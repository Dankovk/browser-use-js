import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = rng;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var rnds8Pool = new Uint8Array(256);
  var poolPtr = rnds8Pool.length;
  function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
      _crypto.default.randomFillSync(rnds8Pool);
      poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, poolPtr += 16);
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  exports.default = _default;
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _regex = _interopRequireDefault(require_regex());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function validate(uuid) {
    return typeof uuid === "string" && _regex.default.test(uuid);
  }
  var _default = validate;
  exports.default = _default;
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  exports.unsafeStringify = unsafeStringify;
  var _validate = _interopRequireDefault(require_validate());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var byteToHex = [];
  for (let i = 0;i < 256; ++i) {
    byteToHex.push((i + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset = 0) {
    return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
  }
  function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var _default = stringify;
  exports.default = _default;
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _nodeId;
  var _clockseq;
  var _lastMSecs = 0;
  var _lastNSecs = 0;
  function v1(options, buf, offset) {
    let i = buf && offset || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node = options.node || _nodeId;
    let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    if (node == null || clockseq == null) {
      const seedBytes = options.random || (options.rng || _rng.default)();
      if (node == null) {
        node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
      }
      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
      }
    }
    let msecs = options.msecs !== undefined ? options.msecs : Date.now();
    let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 12219292800000;
    const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    const tmh = msecs / 4294967296 * 1e4 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    b[i++] = tmh >>> 24 & 15 | 16;
    b[i++] = tmh >>> 16 & 255;
    b[i++] = clockseq >>> 8 | 128;
    b[i++] = clockseq & 255;
    for (let n = 0;n < 6; ++n) {
      b[i + n] = node[n];
    }
    return buf || (0, _stringify.unsafeStringify)(b);
  }
  var _default = v1;
  exports.default = _default;
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function parse(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    let v;
    const arr = new Uint8Array(16);
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = v >>> 16 & 255;
    arr[2] = v >>> 8 & 255;
    arr[3] = v & 255;
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 255;
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 255;
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 255;
    arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
    arr[11] = v / 4294967296 & 255;
    arr[12] = v >>> 24 & 255;
    arr[13] = v >>> 16 & 255;
    arr[14] = v >>> 8 & 255;
    arr[15] = v & 255;
    return arr;
  }
  var _default = parse;
  exports.default = _default;
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.URL = exports.DNS = undefined;
  exports.default = v35;
  var _stringify = require_stringify();
  var _parse = _interopRequireDefault(require_parse());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = [];
    for (let i = 0;i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }
    return bytes;
  }
  var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
  exports.DNS = DNS;
  var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  exports.URL = URL2;
  function v35(name, version, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      var _namespace;
      if (typeof value === "string") {
        value = stringToBytes(value);
      }
      if (typeof namespace === "string") {
        namespace = (0, _parse.default)(namespace);
      }
      if (((_namespace = namespace) === null || _namespace === undefined ? undefined : _namespace.length) !== 16) {
        throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
      }
      let bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = bytes[6] & 15 | version;
      bytes[8] = bytes[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0;i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(bytes);
    }
    try {
      generateUUID.name = name;
    } catch (err) {
    }
    generateUUID.DNS = DNS;
    generateUUID.URL = URL2;
    return generateUUID;
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function md5(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _crypto.default.createHash("md5").update(bytes).digest();
  }
  var _default = md5;
  exports.default = _default;
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _md = _interopRequireDefault(require_md5());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var v3 = (0, _v.default)("v3", 48, _md.default);
  var _default = v3;
  exports.default = _default;
});

// node_modules/uuid/dist/native.js
var require_native = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var _default = {
    randomUUID: _crypto.default.randomUUID
  };
  exports.default = _default;
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _native = _interopRequireDefault(require_native());
  var _rng = _interopRequireDefault(require_rng());
  var _stringify = require_stringify();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function v4(options, buf, offset) {
    if (_native.default.randomUUID && !buf && !options) {
      return _native.default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || _rng.default)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0;i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(rnds);
  }
  var _default = v4;
  exports.default = _default;
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _crypto = _interopRequireDefault(__require("crypto"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function sha1(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return _crypto.default.createHash("sha1").update(bytes).digest();
  }
  var _default = sha1;
  exports.default = _default;
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _v = _interopRequireDefault(require_v35());
  var _sha = _interopRequireDefault(require_sha1());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var v5 = (0, _v.default)("v5", 80, _sha.default);
  var _default = v5;
  exports.default = _default;
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _default = "00000000-0000-0000-0000-000000000000";
  exports.default = _default;
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;
  var _validate = _interopRequireDefault(require_validate());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function version(uuid) {
    if (!(0, _validate.default)(uuid)) {
      throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.slice(14, 15), 16);
  }
  var _default = version;
  exports.default = _default;
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "NIL", {
    enumerable: true,
    get: function() {
      return _nil.default;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function() {
      return _parse.default;
    }
  });
  Object.defineProperty(exports, "stringify", {
    enumerable: true,
    get: function() {
      return _stringify.default;
    }
  });
  Object.defineProperty(exports, "v1", {
    enumerable: true,
    get: function() {
      return _v.default;
    }
  });
  Object.defineProperty(exports, "v3", {
    enumerable: true,
    get: function() {
      return _v2.default;
    }
  });
  Object.defineProperty(exports, "v4", {
    enumerable: true,
    get: function() {
      return _v3.default;
    }
  });
  Object.defineProperty(exports, "v5", {
    enumerable: true,
    get: function() {
      return _v4.default;
    }
  });
  Object.defineProperty(exports, "validate", {
    enumerable: true,
    get: function() {
      return _validate.default;
    }
  });
  Object.defineProperty(exports, "version", {
    enumerable: true,
    get: function() {
      return _version.default;
    }
  });
  var _v = _interopRequireDefault(require_v1());
  var _v2 = _interopRequireDefault(require_v3());
  var _v3 = _interopRequireDefault(require_v4());
  var _v4 = _interopRequireDefault(require_v5());
  var _nil = _interopRequireDefault(require_nil());
  var _version = _interopRequireDefault(require_version());
  var _validate = _interopRequireDefault(require_validate());
  var _stringify = _interopRequireDefault(require_stringify());
  var _parse = _interopRequireDefault(require_parse());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
});

// node_modules/playwright-core/lib/utilsBundleImpl/index.js
var require_utilsBundleImpl = __commonJS((exports, module) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/utilsBundleImpl";
  var Fb = Object.create;
  var ms = Object.defineProperty;
  var Db = Object.getOwnPropertyDescriptor;
  var jb = Object.getOwnPropertyNames;
  var Ub = Object.getPrototypeOf;
  var $b = Object.prototype.hasOwnProperty;
  var w = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
  var gf = (t, e) => {
    for (var i in e)
      ms(t, i, { get: e[i], enumerable: true });
  };
  var vf = (t, e, i, r) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let n of jb(e))
        !$b.call(t, n) && n !== i && ms(t, n, { get: () => e[n], enumerable: !(r = Db(e, n)) || r.enumerable });
    return t;
  };
  var De = (t, e, i) => (i = t != null ? Fb(Ub(t)) : {}, vf(e || !t || !t.__esModule ? ms(i, "default", { value: t, enumerable: true }) : i, t));
  var Vb = (t) => vf(ms({}, "__esModule", { value: true }), t);
  var wf = w((kI, _f) => {
    var bf = {};
    _f.exports = bf;
    var yf = { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29], black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], gray: [90, 39], grey: [90, 39], brightRed: [91, 39], brightGreen: [92, 39], brightYellow: [93, 39], brightBlue: [94, 39], brightMagenta: [95, 39], brightCyan: [96, 39], brightWhite: [97, 39], bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgGray: [100, 49], bgGrey: [100, 49], bgBrightRed: [101, 49], bgBrightGreen: [102, 49], bgBrightYellow: [103, 49], bgBrightBlue: [104, 49], bgBrightMagenta: [105, 49], bgBrightCyan: [106, 49], bgBrightWhite: [107, 49], blackBG: [40, 49], redBG: [41, 49], greenBG: [42, 49], yellowBG: [43, 49], blueBG: [44, 49], magentaBG: [45, 49], cyanBG: [46, 49], whiteBG: [47, 49] };
    Object.keys(yf).forEach(function(t) {
      var e = yf[t], i = bf[t] = [];
      i.open = "\x1B[" + e[0] + "m", i.close = "\x1B[" + e[1] + "m";
    });
  });
  var Sf = w((OI, xf) => {
    xf.exports = function(t, e) {
      e = e || process.argv;
      var i = e.indexOf("--"), r = /^-{1,2}/.test(t) ? "" : "--", n = e.indexOf(r + t);
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var kf = w((CI, Ef) => {
    var Hb = __require("os"), Dt = Sf(), ot = process.env, vr = undefined;
    Dt("no-color") || Dt("no-colors") || Dt("color=false") ? vr = false : (Dt("color") || Dt("colors") || Dt("color=true") || Dt("color=always")) && (vr = true);
    "FORCE_COLOR" in ot && (vr = ot.FORCE_COLOR.length === 0 || parseInt(ot.FORCE_COLOR, 10) !== 0);
    function Gb(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function Yb(t) {
      if (vr === false)
        return 0;
      if (Dt("color=16m") || Dt("color=full") || Dt("color=truecolor"))
        return 3;
      if (Dt("color=256"))
        return 2;
      if (t && !t.isTTY && vr !== true)
        return 0;
      var e = vr ? 1 : 0;
      if (process.platform === "win32") {
        var i = Hb.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in ot)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(n) {
          return n in ot;
        }) || ot.CI_NAME === "codeship" ? 1 : e;
      if ("TEAMCITY_VERSION" in ot)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(ot.TEAMCITY_VERSION) ? 1 : 0;
      if ("TERM_PROGRAM" in ot) {
        var r = parseInt((ot.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (ot.TERM_PROGRAM) {
          case "iTerm.app":
            return r >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(ot.TERM) ? 2 : /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(ot.TERM) || ("COLORTERM" in ot) ? 1 : (ot.TERM === "dumb", e);
    }
    function Sa(t) {
      var e = Yb(t);
      return Gb(e);
    }
    Ef.exports = { supportsColor: Sa, stdout: Sa(process.stdout), stderr: Sa(process.stderr) };
  });
  var Cf = w((TI, Of) => {
    Of.exports = function(e, i) {
      var r = "";
      e = e || "Run the trap, drop the bass", e = e.split("");
      var n = { a: ["@", "Ą", "Ⱥ", "Ʌ", "Δ", "Λ", "Д"], b: ["ß", "Ɓ", "Ƀ", "ɮ", "β", "฿"], c: ["©", "Ȼ", "Ͼ"], d: ["Ð", "Ɗ", "Ԁ", "ԁ", "Ԃ", "ԃ"], e: ["Ë", "ĕ", "Ǝ", "ɘ", "Σ", "ξ", "Ҽ", "੬"], f: ["Ӻ"], g: ["ɢ"], h: ["Ħ", "ƕ", "Ң", "Һ", "Ӈ", "Ԋ"], i: ["༏"], j: ["Ĵ"], k: ["ĸ", "Ҡ", "Ӄ", "Ԟ"], l: ["Ĺ"], m: ["ʍ", "Ӎ", "ӎ", "Ԡ", "ԡ", "൩"], n: ["Ñ", "ŋ", "Ɲ", "Ͷ", "Π", "Ҋ"], o: ["Ø", "õ", "ø", "Ǿ", "ʘ", "Ѻ", "ם", "۝", "๏"], p: ["Ƿ", "Ҏ"], q: ["্"], r: ["®", "Ʀ", "Ȑ", "Ɍ", "ʀ", "Я"], s: ["§", "Ϟ", "ϟ", "Ϩ"], t: ["Ł", "Ŧ", "ͳ"], u: ["Ʊ", "Ս"], v: ["ט"], w: ["Ш", "Ѡ", "Ѽ", "൰"], x: ["Ҳ", "Ӿ", "Ӽ", "ӽ"], y: ["¥", "Ұ", "Ӌ"], z: ["Ƶ", "ɀ"] };
      return e.forEach(function(s) {
        s = s.toLowerCase();
        var o = n[s] || [" "], a = Math.floor(Math.random() * o.length);
        typeof n[s] != "undefined" ? r += n[s][a] : r += s;
      }), r;
    };
  });
  var Af = w((AI, Tf) => {
    Tf.exports = function(e, i) {
      e = e || "   he is here   ";
      var r = { up: ["̍", "̎", "̄", "̅", "̿", "̑", "̆", "̐", "͒", "͗", "͑", "̇", "̈", "̊", "͂", "̓", "̈", "͊", "͋", "͌", "̃", "̂", "̌", "͐", "̀", "́", "̋", "̏", "̒", "̓", "̔", "̽", "̉", "ͣ", "ͤ", "ͥ", "ͦ", "ͧ", "ͨ", "ͩ", "ͪ", "ͫ", "ͬ", "ͭ", "ͮ", "ͯ", "̾", "͛", "͆", "̚"], down: ["̖", "̗", "̘", "̙", "̜", "̝", "̞", "̟", "̠", "̤", "̥", "̦", "̩", "̪", "̫", "̬", "̭", "̮", "̯", "̰", "̱", "̲", "̳", "̹", "̺", "̻", "̼", "ͅ", "͇", "͈", "͉", "͍", "͎", "͓", "͔", "͕", "͖", "͙", "͚", "̣"], mid: ["̕", "̛", "̀", "́", "͘", "̡", "̢", "̧", "̨", "̴", "̵", "̶", "͜", "͝", "͞", "͟", "͠", "͢", "̸", "̷", "͡", " ҉"] }, n = [].concat(r.up, r.down, r.mid);
      function s(l) {
        var c = Math.floor(Math.random() * l);
        return c;
      }
      function o(l) {
        var c = false;
        return n.filter(function(u) {
          c = u === l;
        }), c;
      }
      function a(l, c) {
        var u = "", f, d;
        c = c || {}, c.up = typeof c.up != "undefined" ? c.up : true, c.mid = typeof c.mid != "undefined" ? c.mid : true, c.down = typeof c.down != "undefined" ? c.down : true, c.size = typeof c.size != "undefined" ? c.size : "maxi", l = l.split("");
        for (d in l)
          if (!o(d)) {
            switch (u = u + l[d], f = { up: 0, down: 0, mid: 0 }, c.size) {
              case "mini":
                f.up = s(8), f.mid = s(2), f.down = s(8);
                break;
              case "maxi":
                f.up = s(16) + 3, f.mid = s(4) + 1, f.down = s(64) + 3;
                break;
              default:
                f.up = s(8) + 1, f.mid = s(6) / 2, f.down = s(8) + 1;
                break;
            }
            var g = ["up", "mid", "down"];
            for (var m in g)
              for (var v = g[m], b = 0;b <= f[v]; b++)
                c[v] && (u = u + r[v][s(r[v].length)]);
          }
        return u;
      }
      return a(e, i);
    };
  });
  var Nf = w((II, If) => {
    If.exports = function(t) {
      return function(e, i, r) {
        if (e === " ")
          return e;
        switch (i % 3) {
          case 0:
            return t.red(e);
          case 1:
            return t.white(e);
          case 2:
            return t.blue(e);
        }
      };
    };
  });
  var Bf = w((NI, Lf) => {
    Lf.exports = function(t) {
      return function(e, i, r) {
        return i % 2 === 0 ? e : t.inverse(e);
      };
    };
  });
  var Pf = w((LI, Rf) => {
    Rf.exports = function(t) {
      var e = ["red", "yellow", "green", "blue", "magenta"];
      return function(i, r, n) {
        return i === " " ? i : t[e[r++ % e.length]](i);
      };
    };
  });
  var qf = w((BI, Mf) => {
    Mf.exports = function(t) {
      var e = ["underline", "inverse", "grey", "yellow", "red", "green", "blue", "white", "cyan", "magenta", "brightYellow", "brightRed", "brightGreen", "brightBlue", "brightWhite", "brightCyan", "brightMagenta"];
      return function(i, r, n) {
        return i === " " ? i : t[e[Math.round(Math.random() * (e.length - 2))]](i);
      };
    };
  });
  var Vf = w((PI, $f) => {
    var ye = {};
    $f.exports = ye;
    ye.themes = {};
    var Wb = __require("util"), Hi = ye.styles = wf(), Df = Object.defineProperties, zb = new RegExp(/[\r\n]+/g);
    ye.supportsColor = kf().supportsColor;
    typeof ye.enabled == "undefined" && (ye.enabled = ye.supportsColor() !== false);
    ye.enable = function() {
      ye.enabled = true;
    };
    ye.disable = function() {
      ye.enabled = false;
    };
    ye.stripColors = ye.strip = function(t) {
      return ("" + t).replace(/\x1B\[\d+m/g, "");
    };
    var RI = ye.stylize = function(e, i) {
      if (!ye.enabled)
        return e + "";
      var r = Hi[i];
      return !r && i in ye ? ye[i](e) : r.open + e + r.close;
    }, Kb = /[|\\{}()[\]^$+*?.]/g, Jb = function(t) {
      if (typeof t != "string")
        throw new TypeError("Expected a string");
      return t.replace(Kb, "\\$&");
    };
    function jf(t) {
      var e = function i() {
        return Qb.apply(i, arguments);
      };
      return e._styles = t, e.__proto__ = Zb, e;
    }
    var Uf = function() {
      var t = {};
      return Hi.grey = Hi.gray, Object.keys(Hi).forEach(function(e) {
        Hi[e].closeRe = new RegExp(Jb(Hi[e].close), "g"), t[e] = { get: function() {
          return jf(this._styles.concat(e));
        } };
      }), t;
    }(), Zb = Df(function() {
    }, Uf);
    function Qb() {
      var t = Array.prototype.slice.call(arguments), e = t.map(function(o) {
        return o != null && o.constructor === String ? o : Wb.inspect(o);
      }).join(" ");
      if (!ye.enabled || !e)
        return e;
      for (var i = e.indexOf(`
`) != -1, r = this._styles, n = r.length;n--; ) {
        var s = Hi[r[n]];
        e = s.open + e.replace(s.closeRe, s.open) + s.close, i && (e = e.replace(zb, function(o) {
          return s.close + o + s.open;
        }));
      }
      return e;
    }
    ye.setTheme = function(t) {
      if (typeof t == "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var e in t)
        (function(i) {
          ye[i] = function(r) {
            if (typeof t[i] == "object") {
              var n = r;
              for (var s in t[i])
                n = ye[t[i][s]](n);
              return n;
            }
            return ye[t[i]](r);
          };
        })(e);
    };
    function Xb() {
      var t = {};
      return Object.keys(Uf).forEach(function(e) {
        t[e] = { get: function() {
          return jf([e]);
        } };
      }), t;
    }
    var e_ = function(e, i) {
      var r = i.split("");
      return r = r.map(e), r.join("");
    };
    ye.trap = Cf();
    ye.zalgo = Af();
    ye.maps = {};
    ye.maps.america = Nf()(ye);
    ye.maps.zebra = Bf()(ye);
    ye.maps.rainbow = Pf()(ye);
    ye.maps.random = qf()(ye);
    for (Ff in ye.maps)
      (function(t) {
        ye[t] = function(e) {
          return e_(ye.maps[t], e);
        };
      })(Ff);
    var Ff;
    Df(ye, Xb());
  });
  var Gf = w((MI, Hf) => {
    var t_ = Vf();
    Hf.exports = t_;
  });
  var Wf = w((qI, Yf) => {
    var yr = 1000, br = yr * 60, _r = br * 60, Gi = _r * 24, i_ = Gi * 7, r_ = Gi * 365.25;
    Yf.exports = function(t, e) {
      e = e || {};
      var i = typeof t;
      if (i === "string" && t.length > 0)
        return n_(t);
      if (i === "number" && isFinite(t))
        return e.long ? o_(t) : s_(t);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(t));
    };
    function n_(t) {
      if (t = String(t), !(t.length > 100)) {
        var e = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);
        if (e) {
          var i = parseFloat(e[1]), r = (e[2] || "ms").toLowerCase();
          switch (r) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return i * r_;
            case "weeks":
            case "week":
            case "w":
              return i * i_;
            case "days":
            case "day":
            case "d":
              return i * Gi;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return i * _r;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return i * br;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return i * yr;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return i;
            default:
              return;
          }
        }
      }
    }
    function s_(t) {
      var e = Math.abs(t);
      return e >= Gi ? Math.round(t / Gi) + "d" : e >= _r ? Math.round(t / _r) + "h" : e >= br ? Math.round(t / br) + "m" : e >= yr ? Math.round(t / yr) + "s" : t + "ms";
    }
    function o_(t) {
      var e = Math.abs(t);
      return e >= Gi ? gs(t, e, Gi, "day") : e >= _r ? gs(t, e, _r, "hour") : e >= br ? gs(t, e, br, "minute") : e >= yr ? gs(t, e, yr, "second") : t + " ms";
    }
    function gs(t, e, i, r) {
      var n = e >= i * 1.5;
      return Math.round(t / i) + " " + r + (n ? "s" : "");
    }
  });
  var Ea = w((FI, zf) => {
    function a_(t) {
      i.debug = i, i.default = i, i.coerce = l, i.disable = s, i.enable = n, i.enabled = o, i.humanize = Wf(), i.destroy = c, Object.keys(t).forEach((u) => {
        i[u] = t[u];
      }), i.names = [], i.skips = [], i.formatters = {};
      function e(u) {
        let f = 0;
        for (let d = 0;d < u.length; d++)
          f = (f << 5) - f + u.charCodeAt(d), f |= 0;
        return i.colors[Math.abs(f) % i.colors.length];
      }
      i.selectColor = e;
      function i(u) {
        let f, d = null, g, m;
        function v(...b) {
          if (!v.enabled)
            return;
          let _ = v, S = Number(new Date), O = S - (f || S);
          _.diff = O, _.prev = f, _.curr = S, f = S, b[0] = i.coerce(b[0]), typeof b[0] != "string" && b.unshift("%O");
          let k = 0;
          b[0] = b[0].replace(/%([a-zA-Z%])/g, (R, T) => {
            if (R === "%%")
              return "%";
            k++;
            let A = i.formatters[T];
            if (typeof A == "function") {
              let C = b[k];
              R = A.call(_, C), b.splice(k, 1), k--;
            }
            return R;
          }), i.formatArgs.call(_, b), (_.log || i.log).apply(_, b);
        }
        return v.namespace = u, v.useColors = i.useColors(), v.color = i.selectColor(u), v.extend = r, v.destroy = i.destroy, Object.defineProperty(v, "enabled", { enumerable: true, configurable: false, get: () => d !== null ? d : (g !== i.namespaces && (g = i.namespaces, m = i.enabled(u)), m), set: (b) => {
          d = b;
        } }), typeof i.init == "function" && i.init(v), v;
      }
      function r(u, f) {
        let d = i(this.namespace + (typeof f == "undefined" ? ":" : f) + u);
        return d.log = this.log, d;
      }
      function n(u) {
        i.save(u), i.namespaces = u, i.names = [], i.skips = [];
        let f, d = (typeof u == "string" ? u : "").split(/[\s,]+/), g = d.length;
        for (f = 0;f < g; f++)
          d[f] && (u = d[f].replace(/\*/g, ".*?"), u[0] === "-" ? i.skips.push(new RegExp("^" + u.slice(1) + "$")) : i.names.push(new RegExp("^" + u + "$")));
      }
      function s() {
        let u = [...i.names.map(a), ...i.skips.map(a).map((f) => "-" + f)].join(",");
        return i.enable(""), u;
      }
      function o(u) {
        if (u[u.length - 1] === "*")
          return true;
        let f, d;
        for (f = 0, d = i.skips.length;f < d; f++)
          if (i.skips[f].test(u))
            return false;
        for (f = 0, d = i.names.length;f < d; f++)
          if (i.names[f].test(u))
            return true;
        return false;
      }
      function a(u) {
        return u.toString().substring(2, u.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function l(u) {
        return u instanceof Error ? u.stack || u.message : u;
      }
      function c() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return i.enable(i.load()), i;
    }
    zf.exports = a_;
  });
  var Kf = w((wt, vs) => {
    wt.formatArgs = c_;
    wt.save = u_;
    wt.load = f_;
    wt.useColors = l_;
    wt.storage = h_();
    wt.destroy = (() => {
      let t = false;
      return () => {
        t || (t = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    wt.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function l_() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function c_(t) {
      if (t[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t[0] + (this.useColors ? "%c " : " ") + "+" + vs.exports.humanize(this.diff), !this.useColors)
        return;
      let e = "color: " + this.color;
      t.splice(1, 0, e, "color: inherit");
      let i = 0, r = 0;
      t[0].replace(/%[a-zA-Z%]/g, (n) => {
        n !== "%%" && (i++, n === "%c" && (r = i));
      }), t.splice(r, 0, e);
    }
    wt.log = console.debug || console.log || (() => {
    });
    function u_(t) {
      try {
        t ? wt.storage.setItem("debug", t) : wt.storage.removeItem("debug");
      } catch {
      }
    }
    function f_() {
      let t;
      try {
        t = wt.storage.getItem("debug");
      } catch {
      }
      return !t && typeof process != "undefined" && "env" in process && (t = process.env.DEBUG), t;
    }
    function h_() {
      try {
        return localStorage;
      } catch {
      }
    }
    vs.exports = Ea()(wt);
    var { formatters: p_ } = vs.exports;
    p_.j = function(t) {
      try {
        return JSON.stringify(t);
      } catch (e) {
        return "[UnexpectedJSONParseError]: " + e.message;
      }
    };
  });
  var Zf = w((DI, Jf) => {
    Jf.exports = (t, e) => {
      e = e || process.argv;
      let i = t.startsWith("-") ? "" : t.length === 1 ? "-" : "--", r = e.indexOf(i + t), n = e.indexOf("--");
      return r !== -1 && (n === -1 ? true : r < n);
    };
  });
  var Xf = w((jI, Qf) => {
    var d_ = __require("os"), jt = Zf(), tt = process.env, wr;
    jt("no-color") || jt("no-colors") || jt("color=false") ? wr = false : (jt("color") || jt("colors") || jt("color=true") || jt("color=always")) && (wr = true);
    "FORCE_COLOR" in tt && (wr = tt.FORCE_COLOR.length === 0 || parseInt(tt.FORCE_COLOR, 10) !== 0);
    function m_(t) {
      return t === 0 ? false : { level: t, hasBasic: true, has256: t >= 2, has16m: t >= 3 };
    }
    function g_(t) {
      if (wr === false)
        return 0;
      if (jt("color=16m") || jt("color=full") || jt("color=truecolor"))
        return 3;
      if (jt("color=256"))
        return 2;
      if (t && !t.isTTY && wr !== true)
        return 0;
      let e = wr ? 1 : 0;
      if (process.platform === "win32") {
        let i = d_.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(i[0]) >= 10 && Number(i[2]) >= 10586 ? Number(i[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in tt)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((i) => (i in tt)) || tt.CI_NAME === "codeship" ? 1 : e;
      if ("TEAMCITY_VERSION" in tt)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(tt.TEAMCITY_VERSION) ? 1 : 0;
      if (tt.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in tt) {
        let i = parseInt((tt.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (tt.TERM_PROGRAM) {
          case "iTerm.app":
            return i >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(tt.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(tt.TERM) || ("COLORTERM" in tt) ? 1 : (tt.TERM === "dumb", e);
    }
    function ka(t) {
      let e = g_(t);
      return m_(e);
    }
    Qf.exports = { supportsColor: ka, stdout: ka(process.stdout), stderr: ka(process.stderr) };
  });
  var th = w((Ze, bs) => {
    var v_ = __require("tty"), ys = __require("util");
    Ze.init = E_;
    Ze.log = w_;
    Ze.formatArgs = b_;
    Ze.save = x_;
    Ze.load = S_;
    Ze.useColors = y_;
    Ze.destroy = ys.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    Ze.colors = [6, 2, 3, 4, 5, 1];
    try {
      let t = Xf();
      t && (t.stderr || t).level >= 2 && (Ze.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    Ze.inspectOpts = Object.keys(process.env).filter((t) => /^debug_/i.test(t)).reduce((t, e) => {
      let i = e.substring(6).toLowerCase().replace(/_([a-z])/g, (n, s) => s.toUpperCase()), r = process.env[e];
      return /^(yes|on|true|enabled)$/i.test(r) ? r = true : /^(no|off|false|disabled)$/i.test(r) ? r = false : r === "null" ? r = null : r = Number(r), t[i] = r, t;
    }, {});
    function y_() {
      return "colors" in Ze.inspectOpts ? !!Ze.inspectOpts.colors : v_.isatty(process.stderr.fd);
    }
    function b_(t) {
      let { namespace: e, useColors: i } = this;
      if (i) {
        let r = this.color, n = "\x1B[3" + (r < 8 ? r : "8;5;" + r), s = `  ${n};1m${e} \x1B[0m`;
        t[0] = s + t[0].split(`
`).join(`
` + s), t.push(n + "m+" + bs.exports.humanize(this.diff) + "\x1B[0m");
      } else
        t[0] = __() + e + " " + t[0];
    }
    function __() {
      return Ze.inspectOpts.hideDate ? "" : new Date().toISOString() + " ";
    }
    function w_(...t) {
      return process.stderr.write(ys.format(...t) + `
`);
    }
    function x_(t) {
      t ? process.env.DEBUG = t : delete process.env.DEBUG;
    }
    function S_() {
      return process.env.DEBUG;
    }
    function E_(t) {
      t.inspectOpts = {};
      let e = Object.keys(Ze.inspectOpts);
      for (let i = 0;i < e.length; i++)
        t.inspectOpts[e[i]] = Ze.inspectOpts[e[i]];
    }
    bs.exports = Ea()(Ze);
    var { formatters: eh } = bs.exports;
    eh.o = function(t) {
      return this.inspectOpts.colors = this.useColors, ys.inspect(t, this.inspectOpts).split(`
`).map((e) => e.trim()).join(" ");
    };
    eh.O = function(t) {
      return this.inspectOpts.colors = this.useColors, ys.inspect(t, this.inspectOpts);
    };
  });
  var rn = w((UI, Oa) => {
    typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? Oa.exports = Kf() : Oa.exports = th();
  });
  var Oh = w(($I, ow) => {
    ow.exports = { name: "dotenv", version: "16.4.5", description: "Loads environment variables from .env file", main: "lib/main.js", types: "lib/main.d.ts", exports: { ".": { types: "./lib/main.d.ts", require: "./lib/main.js", default: "./lib/main.js" }, "./config": "./config.js", "./config.js": "./config.js", "./lib/env-options": "./lib/env-options.js", "./lib/env-options.js": "./lib/env-options.js", "./lib/cli-options": "./lib/cli-options.js", "./lib/cli-options.js": "./lib/cli-options.js", "./package.json": "./package.json" }, scripts: { "dts-check": "tsc --project tests/types/tsconfig.json", lint: "standard", "lint-readme": "standard-markdown", pretest: "npm run lint && npm run dts-check", test: "tap tests/*.js --100 -Rspec", "test:coverage": "tap --coverage-report=lcov", prerelease: "npm test", release: "standard-version" }, repository: { type: "git", url: "git://github.com/motdotla/dotenv.git" }, funding: "https://dotenvx.com", keywords: ["dotenv", "env", ".env", "environment", "variables", "config", "settings"], readmeFilename: "README.md", license: "BSD-2-Clause", devDependencies: { "@definitelytyped/dtslint": "^0.0.133", "@types/node": "^18.11.3", decache: "^4.6.1", sinon: "^14.0.1", standard: "^17.0.0", "standard-markdown": "^7.1.0", "standard-version": "^9.5.0", tap: "^16.3.0", tar: "^6.1.11", typescript: "^4.8.4" }, engines: { node: ">=12" }, browser: { fs: false } };
  });
  var Ih = w((VI, ai) => {
    var Ma = __require("fs"), qa = __require("path"), aw = __require("os"), lw = __require("crypto"), cw = Oh(), Fa = cw.version, uw = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function fw(t) {
      let e = {}, i = t.toString();
      i = i.replace(/\r\n?/mg, `
`);
      let r;
      for (;(r = uw.exec(i)) != null; ) {
        let n = r[1], s = r[2] || "";
        s = s.trim();
        let o = s[0];
        s = s.replace(/^(['"`])([\s\S]*)\1$/mg, "$2"), o === '"' && (s = s.replace(/\\n/g, `
`), s = s.replace(/\\r/g, "\r")), e[n] = s;
      }
      return e;
    }
    function hw(t) {
      let e = Ah(t), i = $e.configDotenv({ path: e });
      if (!i.parsed) {
        let o = new Error(`MISSING_DATA: Cannot parse ${e} for an unknown reason`);
        throw o.code = "MISSING_DATA", o;
      }
      let r = Th(t).split(","), n = r.length, s;
      for (let o = 0;o < n; o++)
        try {
          let a = r[o].trim(), l = mw(i, a);
          s = $e.decrypt(l.ciphertext, l.key);
          break;
        } catch (a) {
          if (o + 1 >= n)
            throw a;
        }
      return $e.parse(s);
    }
    function pw(t) {
      console.log(`[dotenv@${Fa}][INFO] ${t}`);
    }
    function dw(t) {
      console.log(`[dotenv@${Fa}][WARN] ${t}`);
    }
    function Ts(t) {
      console.log(`[dotenv@${Fa}][DEBUG] ${t}`);
    }
    function Th(t) {
      return t && t.DOTENV_KEY && t.DOTENV_KEY.length > 0 ? t.DOTENV_KEY : process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0 ? process.env.DOTENV_KEY : "";
    }
    function mw(t, e) {
      let i;
      try {
        i = new URL(e);
      } catch (a) {
        if (a.code === "ERR_INVALID_URL") {
          let l = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
          throw l.code = "INVALID_DOTENV_KEY", l;
        }
        throw a;
      }
      let r = i.password;
      if (!r) {
        let a = new Error("INVALID_DOTENV_KEY: Missing key part");
        throw a.code = "INVALID_DOTENV_KEY", a;
      }
      let n = i.searchParams.get("environment");
      if (!n) {
        let a = new Error("INVALID_DOTENV_KEY: Missing environment part");
        throw a.code = "INVALID_DOTENV_KEY", a;
      }
      let s = `DOTENV_VAULT_${n.toUpperCase()}`, o = t.parsed[s];
      if (!o) {
        let a = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);
        throw a.code = "NOT_FOUND_DOTENV_ENVIRONMENT", a;
      }
      return { ciphertext: o, key: r };
    }
    function Ah(t) {
      let e = null;
      if (t && t.path && t.path.length > 0)
        if (Array.isArray(t.path))
          for (let i of t.path)
            Ma.existsSync(i) && (e = i.endsWith(".vault") ? i : `${i}.vault`);
        else
          e = t.path.endsWith(".vault") ? t.path : `${t.path}.vault`;
      else
        e = qa.resolve(process.cwd(), ".env.vault");
      return Ma.existsSync(e) ? e : null;
    }
    function Ch(t) {
      return t[0] === "~" ? qa.join(aw.homedir(), t.slice(1)) : t;
    }
    function gw(t) {
      pw("Loading env from encrypted .env.vault");
      let e = $e._parseVault(t), i = process.env;
      return t && t.processEnv != null && (i = t.processEnv), $e.populate(i, e, t), { parsed: e };
    }
    function vw(t) {
      let e = qa.resolve(process.cwd(), ".env"), i = "utf8", r = !!(t && t.debug);
      t && t.encoding ? i = t.encoding : r && Ts("No encoding is specified. UTF-8 is used by default");
      let n = [e];
      if (t && t.path)
        if (!Array.isArray(t.path))
          n = [Ch(t.path)];
        else {
          n = [];
          for (let l of t.path)
            n.push(Ch(l));
        }
      let s, o = {};
      for (let l of n)
        try {
          let c = $e.parse(Ma.readFileSync(l, { encoding: i }));
          $e.populate(o, c, t);
        } catch (c) {
          r && Ts(`Failed to load ${l} ${c.message}`), s = c;
        }
      let a = process.env;
      return t && t.processEnv != null && (a = t.processEnv), $e.populate(a, o, t), s ? { parsed: o, error: s } : { parsed: o };
    }
    function yw(t) {
      if (Th(t).length === 0)
        return $e.configDotenv(t);
      let e = Ah(t);
      return e ? $e._configVault(t) : (dw(`You set DOTENV_KEY but you are missing a .env.vault file at ${e}. Did you forget to build it?`), $e.configDotenv(t));
    }
    function bw(t, e) {
      let i = Buffer.from(e.slice(-64), "hex"), r = Buffer.from(t, "base64"), n = r.subarray(0, 12), s = r.subarray(-16);
      r = r.subarray(12, -16);
      try {
        let o = lw.createDecipheriv("aes-256-gcm", i, n);
        return o.setAuthTag(s), `${o.update(r)}${o.final()}`;
      } catch (o) {
        let a = o instanceof RangeError, l = o.message === "Invalid key length", c = o.message === "Unsupported state or unable to authenticate data";
        if (a || l) {
          let u = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
          throw u.code = "INVALID_DOTENV_KEY", u;
        } else if (c) {
          let u = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
          throw u.code = "DECRYPTION_FAILED", u;
        } else
          throw o;
      }
    }
    function _w(t, e, i = {}) {
      let r = !!(i && i.debug), n = !!(i && i.override);
      if (typeof e != "object") {
        let s = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
        throw s.code = "OBJECT_REQUIRED", s;
      }
      for (let s of Object.keys(e))
        Object.prototype.hasOwnProperty.call(t, s) ? (n === true && (t[s] = e[s]), r && Ts(n === true ? `"${s}" is already defined and WAS overwritten` : `"${s}" is already defined and was NOT overwritten`)) : t[s] = e[s];
    }
    var $e = { configDotenv: vw, _configVault: gw, _parseVault: hw, config: yw, decrypt: bw, parse: fw, populate: _w };
    ai.exports.configDotenv = $e.configDotenv;
    ai.exports._configVault = $e._configVault;
    ai.exports._parseVault = $e._parseVault;
    ai.exports.config = $e.config;
    ai.exports.decrypt = $e.decrypt;
    ai.exports.parse = $e.parse;
    ai.exports.populate = $e.populate;
    ai.exports = $e;
  });
  var Lh = w((Nh) => {
    var ww = __require("url").parse, xw = { ftp: 21, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, Sw = String.prototype.endsWith || function(t) {
      return t.length <= this.length && this.indexOf(t, this.length - t.length) !== -1;
    };
    function Ew(t) {
      var e = typeof t == "string" ? ww(t) : t || {}, i = e.protocol, r = e.host, n = e.port;
      if (typeof r != "string" || !r || typeof i != "string" || (i = i.split(":", 1)[0], r = r.replace(/:\d*$/, ""), n = parseInt(n) || xw[i] || 0, !kw(r, n)))
        return "";
      var s = Sr("npm_config_" + i + "_proxy") || Sr(i + "_proxy") || Sr("npm_config_proxy") || Sr("all_proxy");
      return s && s.indexOf("://") === -1 && (s = i + "://" + s), s;
    }
    function kw(t, e) {
      var i = (Sr("npm_config_no_proxy") || Sr("no_proxy")).toLowerCase();
      return i ? i === "*" ? false : i.split(/[,\s]/).every(function(r) {
        if (!r)
          return true;
        var n = r.match(/^(.+):(\d+)$/), s = n ? n[1] : r, o = n ? parseInt(n[2]) : 0;
        return o && o !== e ? true : /^[.*]/.test(s) ? (s.charAt(0) === "*" && (s = s.slice(1)), !Sw.call(t, s)) : t !== s;
      }) : true;
    }
    function Sr(t) {
      return process.env[t.toLowerCase()] || process.env[t.toUpperCase()] || "";
    }
    Nh.getProxyForUrl = Ew;
  });
  var Ph = w((dt) => {
    var Ow = dt && dt.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), Cw = dt && dt.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), Bh = dt && dt.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && Ow(e, t, i);
      return Cw(e, t), e;
    };
    Object.defineProperty(dt, "__esModule", { value: true });
    dt.req = dt.json = dt.toBuffer = undefined;
    var Tw = Bh(__require("http")), Aw = Bh(__require("https"));
    async function Rh(t) {
      let e = 0, i = [];
      for await (let r of t)
        e += r.length, i.push(r);
      return Buffer.concat(i, e);
    }
    dt.toBuffer = Rh;
    async function Iw(t) {
      let i = (await Rh(t)).toString("utf8");
      try {
        return JSON.parse(i);
      } catch (r) {
        let n = r;
        throw n.message += ` (input: ${i})`, n;
      }
    }
    dt.json = Iw;
    function Nw(t, e = {}) {
      let r = ((typeof t == "string" ? t : t.href).startsWith("https:") ? Aw : Tw).request(t, e), n = new Promise((s, o) => {
        r.once("response", s).once("error", o).end();
      });
      return r.then = n.then.bind(n), r;
    }
    dt.req = Nw;
  });
  var ja = w((xt) => {
    var qh = xt && xt.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), Lw = xt && xt.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), Fh = xt && xt.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && qh(e, t, i);
      return Lw(e, t), e;
    }, Bw = xt && xt.__exportStar || function(t, e) {
      for (var i in t)
        i !== "default" && !Object.prototype.hasOwnProperty.call(e, i) && qh(e, t, i);
    };
    Object.defineProperty(xt, "__esModule", { value: true });
    xt.Agent = undefined;
    var Rw = Fh(__require("net")), Mh = Fh(__require("http")), Pw = __require("https");
    Bw(Ph(), xt);
    var Wt = Symbol("AgentBaseInternalState"), Da = class extends Mh.Agent {
      constructor(e) {
        super(e), this[Wt] = {};
      }
      isSecureEndpoint(e) {
        if (e) {
          if (typeof e.secureEndpoint == "boolean")
            return e.secureEndpoint;
          if (typeof e.protocol == "string")
            return e.protocol === "https:";
        }
        let { stack: i } = new Error;
        return typeof i != "string" ? false : i.split(`
`).some((r) => r.indexOf("(https.js:") !== -1 || r.indexOf("node:https:") !== -1);
      }
      incrementSockets(e) {
        if (this.maxSockets === 1 / 0 && this.maxTotalSockets === 1 / 0)
          return null;
        this.sockets[e] || (this.sockets[e] = []);
        let i = new Rw.Socket({ writable: false });
        return this.sockets[e].push(i), this.totalSocketCount++, i;
      }
      decrementSockets(e, i) {
        if (!this.sockets[e] || i === null)
          return;
        let r = this.sockets[e], n = r.indexOf(i);
        n !== -1 && (r.splice(n, 1), this.totalSocketCount--, r.length === 0 && delete this.sockets[e]);
      }
      getName(e) {
        return (typeof e.secureEndpoint == "boolean" ? e.secureEndpoint : this.isSecureEndpoint(e)) ? Pw.Agent.prototype.getName.call(this, e) : super.getName(e);
      }
      createSocket(e, i, r) {
        let n = { ...i, secureEndpoint: this.isSecureEndpoint(i) }, s = this.getName(n), o = this.incrementSockets(s);
        Promise.resolve().then(() => this.connect(e, n)).then((a) => {
          if (this.decrementSockets(s, o), a instanceof Mh.Agent)
            return a.addRequest(e, n);
          this[Wt].currentSocket = a, super.createSocket(e, i, r);
        }, (a) => {
          this.decrementSockets(s, o), r(a);
        });
      }
      createConnection() {
        let e = this[Wt].currentSocket;
        if (this[Wt].currentSocket = undefined, !e)
          throw new Error("No socket was returned in the `connect()` function");
        return e;
      }
      get defaultPort() {
        var e;
        return (e = this[Wt].defaultPort) != null ? e : this.protocol === "https:" ? 443 : 80;
      }
      set defaultPort(e) {
        this[Wt] && (this[Wt].defaultPort = e);
      }
      get protocol() {
        var e;
        return (e = this[Wt].protocol) != null ? e : this.isSecureEndpoint() ? "https:" : "http:";
      }
      set protocol(e) {
        this[Wt] && (this[Wt].protocol = e);
      }
    };
    xt.Agent = Da;
  });
  var Dh = w((Er) => {
    var Mw = Er && Er.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(Er, "__esModule", { value: true });
    Er.parseProxyResponse = undefined;
    var qw = Mw(rn()), As = (0, qw.default)("https-proxy-agent:parse-proxy-response");
    function Fw(t) {
      return new Promise((e, i) => {
        let r = 0, n = [];
        function s() {
          let u = t.read();
          u ? c(u) : t.once("readable", s);
        }
        function o() {
          t.removeListener("end", a), t.removeListener("error", l), t.removeListener("readable", s);
        }
        function a() {
          o(), As("onend"), i(new Error("Proxy connection ended before receiving CONNECT response"));
        }
        function l(u) {
          o(), As("onerror %o", u), i(u);
        }
        function c(u) {
          n.push(u), r += u.length;
          let f = Buffer.concat(n, r), d = f.indexOf(`\r
\r
`);
          if (d === -1) {
            As("have not received end of HTTP headers yet..."), s();
            return;
          }
          let g = f.slice(0, d).toString("ascii").split(`\r
`), m = g.shift();
          if (!m)
            return t.destroy(), i(new Error("No header received from proxy CONNECT response"));
          let v = m.split(" "), b = +v[1], _ = v.slice(2).join(" "), S = {};
          for (let O of g) {
            if (!O)
              continue;
            let k = O.indexOf(":");
            if (k === -1)
              return t.destroy(), i(new Error(`Invalid header from proxy CONNECT response: "${O}"`));
            let E = O.slice(0, k).toLowerCase(), R = O.slice(k + 1).trimStart(), T = S[E];
            typeof T == "string" ? S[E] = [T, R] : Array.isArray(T) ? T.push(R) : S[E] = R;
          }
          As("got proxy server response: %o %o", m, S), o(), e({ connect: { statusCode: b, statusText: _, headers: S }, buffered: f });
        }
        t.on("error", l), t.on("end", a), s();
      });
    }
    Er.parseProxyResponse = Fw;
  });
  var Hh = w((At) => {
    var Dw = At && At.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), jw = At && At.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), $h = At && At.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && Dw(e, t, i);
      return jw(e, t), e;
    }, Vh = At && At.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(At, "__esModule", { value: true });
    At.HttpsProxyAgent = undefined;
    var Ua = $h(__require("net")), jh = $h(__require("tls")), Uw = Vh(__require("assert")), $w = Vh(rn()), Vw = ja(), Hw = __require("url"), Gw = Dh(), an = (0, $w.default)("https-proxy-agent"), Is = class extends Vw.Agent {
      constructor(e, i) {
        var s;
        super(i), this.options = { path: undefined }, this.proxy = typeof e == "string" ? new Hw.URL(e) : e, this.proxyHeaders = (s = i == null ? undefined : i.headers) != null ? s : {}, an("Creating new HttpsProxyAgent instance: %o", this.proxy.href);
        let r = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, ""), n = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === "https:" ? 443 : 80;
        this.connectOpts = { ALPNProtocols: ["http/1.1"], ...i ? Uh(i, "headers") : null, host: r, port: n };
      }
      async connect(e, i) {
        let { proxy: r } = this;
        if (!i.host)
          throw new TypeError('No "host" provided');
        let n;
        if (r.protocol === "https:") {
          an("Creating `tls.Socket`: %o", this.connectOpts);
          let d = this.connectOpts.servername || this.connectOpts.host;
          n = jh.connect({ ...this.connectOpts, servername: d });
        } else
          an("Creating `net.Socket`: %o", this.connectOpts), n = Ua.connect(this.connectOpts);
        let s = typeof this.proxyHeaders == "function" ? this.proxyHeaders() : { ...this.proxyHeaders }, o = Ua.isIPv6(i.host) ? `[${i.host}]` : i.host, a = `CONNECT ${o}:${i.port} HTTP/1.1\r
`;
        if (r.username || r.password) {
          let d = `${decodeURIComponent(r.username)}:${decodeURIComponent(r.password)}`;
          s["Proxy-Authorization"] = `Basic ${Buffer.from(d).toString("base64")}`;
        }
        s.Host = `${o}:${i.port}`, s["Proxy-Connection"] || (s["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close");
        for (let d of Object.keys(s))
          a += `${d}: ${s[d]}\r
`;
        let l = (0, Gw.parseProxyResponse)(n);
        n.write(`${a}\r
`);
        let { connect: c, buffered: u } = await l;
        if (e.emit("proxyConnect", c), this.emit("proxyConnect", c, e), c.statusCode === 200) {
          if (e.once("socket", Yw), i.secureEndpoint) {
            an("Upgrading socket connection to TLS");
            let d = i.servername || i.host;
            return jh.connect({ ...Uh(i, "host", "path", "port"), socket: n, servername: d });
          }
          return n;
        }
        n.destroy();
        let f = new Ua.Socket({ writable: false });
        return f.readable = true, e.once("socket", (d) => {
          an("Replaying proxy buffer for failed request"), (0, Uw.default)(d.listenerCount("data") > 0), d.push(u), d.push(null);
        }), f;
      }
    };
    Is.protocols = ["http", "https"];
    At.HttpsProxyAgent = Is;
    function Yw(t) {
      t.resume();
    }
    function Uh(t, ...e) {
      let i = {}, r;
      for (r in t)
        e.includes(r) || (i[r] = t[r]);
      return i;
    }
  });
  var Wh = w((KI, Ns) => {
    var Yh = Yh || function(t) {
      return Buffer.from(t).toString("base64");
    };
    function Ww(t) {
      var e = this, i = Math.round, r = Math.floor, n = new Array(64), s = new Array(64), o = new Array(64), a = new Array(64), l, c, u, f, d = new Array(65535), g = new Array(65535), m = new Array(64), v = new Array(64), b = [], _ = 0, S = 7, O = new Array(64), k = new Array(64), E = new Array(64), R = new Array(256), T = new Array(2048), A, C = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], L = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], P = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], U = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], F = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], H = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], j = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], V = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], W = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
      function Q(I) {
        for (var Z = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], te = 0;te < 64; te++) {
          var ee = r((Z[te] * I + 50) / 100);
          ee < 1 ? ee = 1 : ee > 255 && (ee = 255), n[C[te]] = ee;
        }
        for (var le = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], ce = 0;ce < 64; ce++) {
          var _e = r((le[ce] * I + 50) / 100);
          _e < 1 ? _e = 1 : _e > 255 && (_e = 255), s[C[ce]] = _e;
        }
        for (var we = [1, 1.387039845, 1.306562965, 1.175875602, 1, 0.785694958, 0.5411961, 0.275899379], Be = 0, Te = 0;Te < 8; Te++)
          for (var D = 0;D < 8; D++)
            o[Be] = 1 / (n[C[Be]] * we[Te] * we[D] * 8), a[Be] = 1 / (s[C[Be]] * we[Te] * we[D] * 8), Be++;
      }
      function Y(I, Z) {
        for (var te = 0, ee = 0, le = new Array, ce = 1;ce <= 16; ce++) {
          for (var _e = 1;_e <= I[ce]; _e++)
            le[Z[ee]] = [], le[Z[ee]][0] = te, le[Z[ee]][1] = ce, ee++, te++;
          te *= 2;
        }
        return le;
      }
      function de() {
        l = Y(L, P), c = Y(H, j), u = Y(U, F), f = Y(V, W);
      }
      function ae() {
        for (var I = 1, Z = 2, te = 1;te <= 15; te++) {
          for (var ee = I;ee < Z; ee++)
            g[32767 + ee] = te, d[32767 + ee] = [], d[32767 + ee][1] = te, d[32767 + ee][0] = ee;
          for (var le = -(Z - 1);le <= -I; le++)
            g[32767 + le] = te, d[32767 + le] = [], d[32767 + le][1] = te, d[32767 + le][0] = Z - 1 + le;
          I <<= 1, Z <<= 1;
        }
      }
      function ne() {
        for (var I = 0;I < 256; I++)
          T[I] = 19595 * I, T[I + 256 >> 0] = 38470 * I, T[I + 512 >> 0] = 7471 * I + 32768, T[I + 768 >> 0] = -11059 * I, T[I + 1024 >> 0] = -21709 * I, T[I + 1280 >> 0] = 32768 * I + 8421375, T[I + 1536 >> 0] = -27439 * I, T[I + 1792 >> 0] = -5329 * I;
      }
      function ue(I) {
        for (var Z = I[0], te = I[1] - 1;te >= 0; )
          Z & 1 << te && (_ |= 1 << S), te--, S--, S < 0 && (_ == 255 ? (N(255), N(0)) : N(_), S = 7, _ = 0);
      }
      function N(I) {
        b.push(I);
      }
      function X(I) {
        N(I >> 8 & 255), N(I & 255);
      }
      function ke(I, Z) {
        var te, ee, le, ce, _e, we, Be, Te, D = 0, J, se = 8, Ie = 64;
        for (J = 0;J < se; ++J) {
          te = I[D], ee = I[D + 1], le = I[D + 2], ce = I[D + 3], _e = I[D + 4], we = I[D + 5], Be = I[D + 6], Te = I[D + 7];
          var oe = te + Te, me = te - Te, Ee = ee + Be, ie = ee - Be, xe = le + we, Ue = le - we, Ae = ce + _e, ht = ce - _e, Ot = oe + Ae, ri = oe - Ae, mi = Ee + xe, gi = Ee - xe;
          I[D] = Ot + mi, I[D + 4] = Ot - mi;
          var Mi = (gi + ri) * 0.707106781;
          I[D + 2] = ri + Mi, I[D + 6] = ri - Mi, Ot = ht + Ue, mi = Ue + ie, gi = ie + me;
          var qi = (Ot - gi) * 0.382683433, dr = 0.5411961 * Ot + qi, Fi = 1.306562965 * gi + qi, Di = mi * 0.707106781, ji = me + Di, Ui = me - Di;
          I[D + 5] = Ui + dr, I[D + 3] = Ui - dr, I[D + 1] = ji + Fi, I[D + 7] = ji - Fi, D += 8;
        }
        for (D = 0, J = 0;J < se; ++J) {
          te = I[D], ee = I[D + 8], le = I[D + 16], ce = I[D + 24], _e = I[D + 32], we = I[D + 40], Be = I[D + 48], Te = I[D + 56];
          var es = te + Te, tn = te - Te, ts = ee + Be, is = ee - Be, rs = le + we, ns = le - we, ss = ce + _e, ya = ce - _e, $i = es + ss, ni = es - ss, Vi = ts + rs, mr = ts - rs;
          I[D] = $i + Vi, I[D + 32] = $i - Vi;
          var os = (mr + ni) * 0.707106781;
          I[D + 16] = ni + os, I[D + 48] = ni - os, $i = ya + ns, Vi = ns + is, mr = is + tn;
          var as = ($i - mr) * 0.382683433, ls = 0.5411961 * $i + as, cs = 1.306562965 * mr + as, Yt = Vi * 0.707106781, us = tn + Yt, fs = tn - Yt;
          I[D + 40] = fs + ls, I[D + 24] = fs - ls, I[D + 8] = us + cs, I[D + 56] = us - cs, D++;
        }
        var gr;
        for (J = 0;J < Ie; ++J)
          gr = I[J] * Z[J], m[J] = gr > 0 ? gr + 0.5 | 0 : gr - 0.5 | 0;
        return m;
      }
      function be() {
        X(65504), X(16), N(74), N(70), N(73), N(70), N(0), N(1), N(1), N(0), X(1), X(1), N(0), N(0);
      }
      function ge(I) {
        if (I) {
          X(65505), I[0] === 69 && I[1] === 120 && I[2] === 105 && I[3] === 102 ? X(I.length + 2) : (X(I.length + 5 + 2), N(69), N(120), N(105), N(102), N(0));
          for (var Z = 0;Z < I.length; Z++)
            N(I[Z]);
        }
      }
      function ve(I, Z) {
        X(65472), X(17), N(8), X(Z), X(I), N(3), N(1), N(17), N(0), N(2), N(17), N(1), N(3), N(17), N(1);
      }
      function fe() {
        X(65499), X(132), N(0);
        for (var I = 0;I < 64; I++)
          N(n[I]);
        N(1);
        for (var Z = 0;Z < 64; Z++)
          N(s[Z]);
      }
      function K() {
        X(65476), X(418), N(0);
        for (var I = 0;I < 16; I++)
          N(L[I + 1]);
        for (var Z = 0;Z <= 11; Z++)
          N(P[Z]);
        N(16);
        for (var te = 0;te < 16; te++)
          N(U[te + 1]);
        for (var ee = 0;ee <= 161; ee++)
          N(F[ee]);
        N(1);
        for (var le = 0;le < 16; le++)
          N(H[le + 1]);
        for (var ce = 0;ce <= 11; ce++)
          N(j[ce]);
        N(17);
        for (var _e = 0;_e < 16; _e++)
          N(V[_e + 1]);
        for (var we = 0;we <= 161; we++)
          N(W[we]);
      }
      function $(I) {
        typeof I == "undefined" || I.constructor !== Array || I.forEach((Z) => {
          if (typeof Z == "string") {
            X(65534);
            var te = Z.length;
            X(te + 2);
            var ee;
            for (ee = 0;ee < te; ee++)
              N(Z.charCodeAt(ee));
          }
        });
      }
      function Ce() {
        X(65498), X(12), N(3), N(1), N(0), N(2), N(17), N(3), N(17), N(0), N(63), N(0);
      }
      function re(I, Z, te, ee, le) {
        for (var ce = le[0], _e = le[240], we, Be = 16, Te = 63, D = 64, J = ke(I, Z), se = 0;se < D; ++se)
          v[C[se]] = J[se];
        var Ie = v[0] - te;
        te = v[0], Ie == 0 ? ue(ee[0]) : (we = 32767 + Ie, ue(ee[g[we]]), ue(d[we]));
        for (var oe = 63;oe > 0 && v[oe] == 0; oe--)
          ;
        if (oe == 0)
          return ue(ce), te;
        for (var me = 1, Ee;me <= oe; ) {
          for (var ie = me;v[me] == 0 && me <= oe; ++me)
            ;
          var xe = me - ie;
          if (xe >= Be) {
            Ee = xe >> 4;
            for (var Ue = 1;Ue <= Ee; ++Ue)
              ue(_e);
            xe = xe & 15;
          }
          we = 32767 + v[me], ue(le[(xe << 4) + g[we]]), ue(d[we]), me++;
        }
        return oe != Te && ue(ce), te;
      }
      function he() {
        for (var I = String.fromCharCode, Z = 0;Z < 256; Z++)
          R[Z] = I(Z);
      }
      this.encode = function(I, Z) {
        var te = new Date().getTime();
        Z && ft(Z), b = new Array, _ = 0, S = 7, X(65496), be(), $(I.comments), ge(I.exifBuffer), fe(), ve(I.width, I.height), K(), Ce();
        var ee = 0, le = 0, ce = 0;
        _ = 0, S = 7, this.encode.displayName = "_encode_";
        for (var { data: _e, width: we, height: Be } = I, Te = we * 4, D = we * 3, J, se = 0, Ie, oe, me, Ee, ie, xe, Ue, Ae;se < Be; ) {
          for (J = 0;J < Te; ) {
            for (Ee = Te * se + J, ie = Ee, xe = -1, Ue = 0, Ae = 0;Ae < 64; Ae++)
              Ue = Ae >> 3, xe = (Ae & 7) * 4, ie = Ee + Ue * Te + xe, se + Ue >= Be && (ie -= Te * (se + 1 + Ue - Be)), J + xe >= Te && (ie -= J + xe - Te + 4), Ie = _e[ie++], oe = _e[ie++], me = _e[ie++], O[Ae] = (T[Ie] + T[oe + 256 >> 0] + T[me + 512 >> 0] >> 16) - 128, k[Ae] = (T[Ie + 768 >> 0] + T[oe + 1024 >> 0] + T[me + 1280 >> 0] >> 16) - 128, E[Ae] = (T[Ie + 1280 >> 0] + T[oe + 1536 >> 0] + T[me + 1792 >> 0] >> 16) - 128;
            ee = re(O, o, ee, l, u), le = re(k, a, le, c, f), ce = re(E, a, ce, c, f), J += 32;
          }
          se += 8;
        }
        if (S >= 0) {
          var ht = [];
          ht[1] = S + 1, ht[0] = (1 << S + 1) - 1, ue(ht);
        }
        if (X(65497), typeof Ns == "undefined")
          return new Uint8Array(b);
        return Buffer.from(b);
        var Ot, ri;
      };
      function ft(I) {
        if (I <= 0 && (I = 1), I > 100 && (I = 100), A != I) {
          var Z = 0;
          I < 50 ? Z = Math.floor(5000 / I) : Z = Math.floor(200 - I * 2), Q(Z), A = I;
        }
      }
      function yt() {
        var I = new Date().getTime();
        t || (t = 50), he(), de(), ae(), ne(), ft(t);
        var Z = new Date().getTime() - I;
      }
      yt();
    }
    typeof Ns != "undefined" ? Ns.exports = Gh : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].encode = Gh);
    function Gh(t, e) {
      typeof e == "undefined" && (e = 50);
      var i = new Ww(e), r = i.encode(t, e);
      return { data: r, width: t.width, height: t.height };
    }
  });
  var Kh = w((JI, Va) => {
    var $a = function() {
      var e = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), i = 4017, r = 799, n = 3406, s = 2276, o = 1567, a = 3784, l = 5793, c = 2896;
      function u() {
      }
      function f(S, O) {
        for (var k = 0, E = [], R, T, A = 16;A > 0 && !S[A - 1]; )
          A--;
        E.push({ children: [], index: 0 });
        var C = E[0], L;
        for (R = 0;R < A; R++) {
          for (T = 0;T < S[R]; T++) {
            for (C = E.pop(), C.children[C.index] = O[k];C.index > 0; ) {
              if (E.length === 0)
                throw new Error("Could not recreate Huffman Table");
              C = E.pop();
            }
            for (C.index++, E.push(C);E.length <= R; )
              E.push(L = { children: [], index: 0 }), C.children[C.index] = L.children, C = L;
            k++;
          }
          R + 1 < A && (E.push(L = { children: [], index: 0 }), C.children[C.index] = L.children, C = L);
        }
        return E[0].children;
      }
      function d(S, O, k, E, R, T, A, C, L, P) {
        var { precision: U, samplesPerLine: F, scanLines: H, mcusPerLine: j, progressive: V, maxH: W, maxV: Q } = k, Y = O, de = 0, ae = 0;
        function ne() {
          if (ae > 0)
            return ae--, de >> ae & 1;
          if (de = S[O++], de == 255) {
            var D = S[O++];
            if (D)
              throw new Error("unexpected marker: " + (de << 8 | D).toString(16));
          }
          return ae = 7, de >>> 7;
        }
        function ue(D) {
          for (var J = D, se;(se = ne()) !== null; ) {
            if (J = J[se], typeof J == "number")
              return J;
            if (typeof J != "object")
              throw new Error("invalid huffman sequence");
          }
          return null;
        }
        function N(D) {
          for (var J = 0;D > 0; ) {
            var se = ne();
            if (se === null)
              return;
            J = J << 1 | se, D--;
          }
          return J;
        }
        function X(D) {
          var J = N(D);
          return J >= 1 << D - 1 ? J : J + (-1 << D) + 1;
        }
        function ke(D, J) {
          var se = ue(D.huffmanTableDC), Ie = se === 0 ? 0 : X(se);
          J[0] = D.pred += Ie;
          for (var oe = 1;oe < 64; ) {
            var me = ue(D.huffmanTableAC), Ee = me & 15, ie = me >> 4;
            if (Ee === 0) {
              if (ie < 15)
                break;
              oe += 16;
              continue;
            }
            oe += ie;
            var xe = e[oe];
            J[xe] = X(Ee), oe++;
          }
        }
        function be(D, J) {
          var se = ue(D.huffmanTableDC), Ie = se === 0 ? 0 : X(se) << L;
          J[0] = D.pred += Ie;
        }
        function ge(D, J) {
          J[0] |= ne() << L;
        }
        var ve = 0;
        function fe(D, J) {
          if (ve > 0) {
            ve--;
            return;
          }
          for (var se = T, Ie = A;se <= Ie; ) {
            var oe = ue(D.huffmanTableAC), me = oe & 15, Ee = oe >> 4;
            if (me === 0) {
              if (Ee < 15) {
                ve = N(Ee) + (1 << Ee) - 1;
                break;
              }
              se += 16;
              continue;
            }
            se += Ee;
            var ie = e[se];
            J[ie] = X(me) * (1 << L), se++;
          }
        }
        var K = 0, $;
        function Ce(D, J) {
          for (var se = T, Ie = A, oe = 0;se <= Ie; ) {
            var me = e[se], Ee = J[me] < 0 ? -1 : 1;
            switch (K) {
              case 0:
                var ie = ue(D.huffmanTableAC), xe = ie & 15, oe = ie >> 4;
                if (xe === 0)
                  oe < 15 ? (ve = N(oe) + (1 << oe), K = 4) : (oe = 16, K = 1);
                else {
                  if (xe !== 1)
                    throw new Error("invalid ACn encoding");
                  $ = X(xe), K = oe ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                J[me] ? J[me] += (ne() << L) * Ee : (oe--, oe === 0 && (K = K == 2 ? 3 : 0));
                break;
              case 3:
                J[me] ? J[me] += (ne() << L) * Ee : (J[me] = $ << L, K = 0);
                break;
              case 4:
                J[me] && (J[me] += (ne() << L) * Ee);
                break;
            }
            se++;
          }
          K === 4 && (ve--, ve === 0 && (K = 0));
        }
        function re(D, J, se, Ie, oe) {
          var me = se / j | 0, Ee = se % j, ie = me * D.v + Ie, xe = Ee * D.h + oe;
          D.blocks[ie] === undefined && P.tolerantDecoding || J(D, D.blocks[ie][xe]);
        }
        function he(D, J, se) {
          var Ie = se / D.blocksPerLine | 0, oe = se % D.blocksPerLine;
          D.blocks[Ie] === undefined && P.tolerantDecoding || J(D, D.blocks[Ie][oe]);
        }
        var ft = E.length, yt, I, Z, te, ee, le;
        V ? T === 0 ? le = C === 0 ? be : ge : le = C === 0 ? fe : Ce : le = ke;
        var ce = 0, _e, we;
        ft == 1 ? we = E[0].blocksPerLine * E[0].blocksPerColumn : we = j * k.mcusPerColumn, R || (R = we);
        for (var Be, Te;ce < we; ) {
          for (I = 0;I < ft; I++)
            E[I].pred = 0;
          if (ve = 0, ft == 1)
            for (yt = E[0], ee = 0;ee < R; ee++)
              he(yt, le, ce), ce++;
          else
            for (ee = 0;ee < R; ee++) {
              for (I = 0;I < ft; I++)
                for (yt = E[I], Be = yt.h, Te = yt.v, Z = 0;Z < Te; Z++)
                  for (te = 0;te < Be; te++)
                    re(yt, le, ce, Z, te);
              if (ce++, ce === we)
                break;
            }
          if (ce === we)
            do {
              if (S[O] === 255 && S[O + 1] !== 0)
                break;
              O += 1;
            } while (O < S.length - 2);
          if (ae = 0, _e = S[O] << 8 | S[O + 1], _e < 65280)
            throw new Error("marker was not found");
          if (_e >= 65488 && _e <= 65495)
            O += 2;
          else
            break;
        }
        return O - Y;
      }
      function g(S, O) {
        var k = [], E = O.blocksPerLine, R = O.blocksPerColumn, T = E << 3, A = new Int32Array(64), C = new Uint8Array(64);
        function L(Y, de, ae) {
          var ne = O.quantizationTable, ue, N, X, ke, be, ge, ve, fe, K, $ = ae, Ce;
          for (Ce = 0;Ce < 64; Ce++)
            $[Ce] = Y[Ce] * ne[Ce];
          for (Ce = 0;Ce < 8; ++Ce) {
            var re = 8 * Ce;
            if ($[1 + re] == 0 && $[2 + re] == 0 && $[3 + re] == 0 && $[4 + re] == 0 && $[5 + re] == 0 && $[6 + re] == 0 && $[7 + re] == 0) {
              K = l * $[0 + re] + 512 >> 10, $[0 + re] = K, $[1 + re] = K, $[2 + re] = K, $[3 + re] = K, $[4 + re] = K, $[5 + re] = K, $[6 + re] = K, $[7 + re] = K;
              continue;
            }
            ue = l * $[0 + re] + 128 >> 8, N = l * $[4 + re] + 128 >> 8, X = $[2 + re], ke = $[6 + re], be = c * ($[1 + re] - $[7 + re]) + 128 >> 8, fe = c * ($[1 + re] + $[7 + re]) + 128 >> 8, ge = $[3 + re] << 4, ve = $[5 + re] << 4, K = ue - N + 1 >> 1, ue = ue + N + 1 >> 1, N = K, K = X * a + ke * o + 128 >> 8, X = X * o - ke * a + 128 >> 8, ke = K, K = be - ve + 1 >> 1, be = be + ve + 1 >> 1, ve = K, K = fe + ge + 1 >> 1, ge = fe - ge + 1 >> 1, fe = K, K = ue - ke + 1 >> 1, ue = ue + ke + 1 >> 1, ke = K, K = N - X + 1 >> 1, N = N + X + 1 >> 1, X = K, K = be * s + fe * n + 2048 >> 12, be = be * n - fe * s + 2048 >> 12, fe = K, K = ge * r + ve * i + 2048 >> 12, ge = ge * i - ve * r + 2048 >> 12, ve = K, $[0 + re] = ue + fe, $[7 + re] = ue - fe, $[1 + re] = N + ve, $[6 + re] = N - ve, $[2 + re] = X + ge, $[5 + re] = X - ge, $[3 + re] = ke + be, $[4 + re] = ke - be;
          }
          for (Ce = 0;Ce < 8; ++Ce) {
            var he = Ce;
            if ($[8 + he] == 0 && $[16 + he] == 0 && $[24 + he] == 0 && $[32 + he] == 0 && $[40 + he] == 0 && $[48 + he] == 0 && $[56 + he] == 0) {
              K = l * ae[Ce + 0] + 8192 >> 14, $[0 + he] = K, $[8 + he] = K, $[16 + he] = K, $[24 + he] = K, $[32 + he] = K, $[40 + he] = K, $[48 + he] = K, $[56 + he] = K;
              continue;
            }
            ue = l * $[0 + he] + 2048 >> 12, N = l * $[32 + he] + 2048 >> 12, X = $[16 + he], ke = $[48 + he], be = c * ($[8 + he] - $[56 + he]) + 2048 >> 12, fe = c * ($[8 + he] + $[56 + he]) + 2048 >> 12, ge = $[24 + he], ve = $[40 + he], K = ue - N + 1 >> 1, ue = ue + N + 1 >> 1, N = K, K = X * a + ke * o + 2048 >> 12, X = X * o - ke * a + 2048 >> 12, ke = K, K = be - ve + 1 >> 1, be = be + ve + 1 >> 1, ve = K, K = fe + ge + 1 >> 1, ge = fe - ge + 1 >> 1, fe = K, K = ue - ke + 1 >> 1, ue = ue + ke + 1 >> 1, ke = K, K = N - X + 1 >> 1, N = N + X + 1 >> 1, X = K, K = be * s + fe * n + 2048 >> 12, be = be * n - fe * s + 2048 >> 12, fe = K, K = ge * r + ve * i + 2048 >> 12, ge = ge * i - ve * r + 2048 >> 12, ve = K, $[0 + he] = ue + fe, $[56 + he] = ue - fe, $[8 + he] = N + ve, $[48 + he] = N - ve, $[16 + he] = X + ge, $[40 + he] = X - ge, $[24 + he] = ke + be, $[32 + he] = ke - be;
          }
          for (Ce = 0;Ce < 64; ++Ce) {
            var ft = 128 + ($[Ce] + 8 >> 4);
            de[Ce] = ft < 0 ? 0 : ft > 255 ? 255 : ft;
          }
        }
        _(T * R * 8);
        for (var P, U, F = 0;F < R; F++) {
          var H = F << 3;
          for (P = 0;P < 8; P++)
            k.push(new Uint8Array(T));
          for (var j = 0;j < E; j++) {
            L(O.blocks[F][j], C, A);
            var V = 0, W = j << 3;
            for (U = 0;U < 8; U++) {
              var Q = k[H + U];
              for (P = 0;P < 8; P++)
                Q[W + P] = C[V++];
            }
          }
        }
        return k;
      }
      function m(S) {
        return S < 0 ? 0 : S > 255 ? 255 : S;
      }
      u.prototype = { load: function(O) {
        var k = new XMLHttpRequest;
        k.open("GET", O, true), k.responseType = "arraybuffer", k.onload = function() {
          var E = new Uint8Array(k.response || k.mozResponseArrayBuffer);
          this.parse(E), this.onload && this.onload();
        }.bind(this), k.send(null);
      }, parse: function(O) {
        var k = this.opts.maxResolutionInMP * 1000 * 1000, E = 0, R = O.length;
        function T() {
          var ie = O[E] << 8 | O[E + 1];
          return E += 2, ie;
        }
        function A() {
          var ie = T(), xe = O.subarray(E, E + ie - 2);
          return E += xe.length, xe;
        }
        function C(ie) {
          var xe = 1, Ue = 1, Ae, ht;
          for (ht in ie.components)
            ie.components.hasOwnProperty(ht) && (Ae = ie.components[ht], xe < Ae.h && (xe = Ae.h), Ue < Ae.v && (Ue = Ae.v));
          var Ot = Math.ceil(ie.samplesPerLine / 8 / xe), ri = Math.ceil(ie.scanLines / 8 / Ue);
          for (ht in ie.components)
            if (ie.components.hasOwnProperty(ht)) {
              Ae = ie.components[ht];
              var mi = Math.ceil(Math.ceil(ie.samplesPerLine / 8) * Ae.h / xe), gi = Math.ceil(Math.ceil(ie.scanLines / 8) * Ae.v / Ue), Mi = Ot * Ae.h, qi = ri * Ae.v, dr = qi * Mi, Fi = [];
              _(dr * 256);
              for (var Di = 0;Di < qi; Di++) {
                for (var ji = [], Ui = 0;Ui < Mi; Ui++)
                  ji.push(new Int32Array(64));
                Fi.push(ji);
              }
              Ae.blocksPerLine = mi, Ae.blocksPerColumn = gi, Ae.blocks = Fi;
            }
          ie.maxH = xe, ie.maxV = Ue, ie.mcusPerLine = Ot, ie.mcusPerColumn = ri;
        }
        var L = null, P = null, U = null, F, H, j = [], V = [], W = [], Q = [], Y = T(), de = -1;
        if (this.comments = [], Y != 65496)
          throw new Error("SOI not found");
        for (Y = T();Y != 65497; ) {
          var ae, ne, ue;
          switch (Y) {
            case 65280:
              break;
            case 65504:
            case 65505:
            case 65506:
            case 65507:
            case 65508:
            case 65509:
            case 65510:
            case 65511:
            case 65512:
            case 65513:
            case 65514:
            case 65515:
            case 65516:
            case 65517:
            case 65518:
            case 65519:
            case 65534:
              var N = A();
              if (Y === 65534) {
                var X = String.fromCharCode.apply(null, N);
                this.comments.push(X);
              }
              Y === 65504 && N[0] === 74 && N[1] === 70 && N[2] === 73 && N[3] === 70 && N[4] === 0 && (L = { version: { major: N[5], minor: N[6] }, densityUnits: N[7], xDensity: N[8] << 8 | N[9], yDensity: N[10] << 8 | N[11], thumbWidth: N[12], thumbHeight: N[13], thumbData: N.subarray(14, 14 + 3 * N[12] * N[13]) }), Y === 65505 && N[0] === 69 && N[1] === 120 && N[2] === 105 && N[3] === 102 && N[4] === 0 && (this.exifBuffer = N.subarray(5, N.length)), Y === 65518 && N[0] === 65 && N[1] === 100 && N[2] === 111 && N[3] === 98 && N[4] === 101 && N[5] === 0 && (P = { version: N[6], flags0: N[7] << 8 | N[8], flags1: N[9] << 8 | N[10], transformCode: N[11] });
              break;
            case 65499:
              for (var ke = T(), be = ke + E - 2;E < be; ) {
                var ge = O[E++];
                _(256);
                var ve = new Int32Array(64);
                if (ge >> 4)
                  if (ge >> 4 === 1)
                    for (ne = 0;ne < 64; ne++) {
                      var fe = e[ne];
                      ve[fe] = T();
                    }
                  else
                    throw new Error("DQT: invalid table spec");
                else
                  for (ne = 0;ne < 64; ne++) {
                    var fe = e[ne];
                    ve[fe] = O[E++];
                  }
                j[ge & 15] = ve;
              }
              break;
            case 65472:
            case 65473:
            case 65474:
              T(), F = {}, F.extended = Y === 65473, F.progressive = Y === 65474, F.precision = O[E++], F.scanLines = T(), F.samplesPerLine = T(), F.components = {}, F.componentsOrder = [];
              var K = F.scanLines * F.samplesPerLine;
              if (K > k) {
                var $ = Math.ceil((K - k) / 1e6);
                throw new Error(`maxResolutionInMP limit exceeded by ${$}MP`);
              }
              var Ce = O[E++], re, he = 0, ft = 0;
              for (ae = 0;ae < Ce; ae++) {
                re = O[E];
                var yt = O[E + 1] >> 4, I = O[E + 1] & 15, Z = O[E + 2];
                if (yt <= 0 || I <= 0)
                  throw new Error("Invalid sampling factor, expected values above 0");
                F.componentsOrder.push(re), F.components[re] = { h: yt, v: I, quantizationIdx: Z }, E += 3;
              }
              C(F), V.push(F);
              break;
            case 65476:
              var te = T();
              for (ae = 2;ae < te; ) {
                var ee = O[E++], le = new Uint8Array(16), ce = 0;
                for (ne = 0;ne < 16; ne++, E++)
                  ce += le[ne] = O[E];
                _(16 + ce);
                var _e = new Uint8Array(ce);
                for (ne = 0;ne < ce; ne++, E++)
                  _e[ne] = O[E];
                ae += 17 + ce, (ee >> 4 ? W : Q)[ee & 15] = f(le, _e);
              }
              break;
            case 65501:
              T(), H = T();
              break;
            case 65500:
              T(), T();
              break;
            case 65498:
              var we = T(), Be = O[E++], Te = [], D;
              for (ae = 0;ae < Be; ae++) {
                D = F.components[O[E++]];
                var J = O[E++];
                D.huffmanTableDC = Q[J >> 4], D.huffmanTableAC = W[J & 15], Te.push(D);
              }
              var se = O[E++], Ie = O[E++], oe = O[E++], me = d(O, E, F, Te, H, se, Ie, oe >> 4, oe & 15, this.opts);
              E += me;
              break;
            case 65535:
              O[E] !== 255 && E--;
              break;
            default:
              if (O[E - 3] == 255 && O[E - 2] >= 192 && O[E - 2] <= 254) {
                E -= 3;
                break;
              } else if (Y === 224 || Y == 225) {
                if (de !== -1)
                  throw new Error(`first unknown JPEG marker at offset ${de.toString(16)}, second unknown JPEG marker ${Y.toString(16)} at offset ${(E - 1).toString(16)}`);
                de = E - 1;
                let ie = T();
                if (O[E + ie - 2] === 255) {
                  E += ie - 2;
                  break;
                }
              }
              throw new Error("unknown JPEG marker " + Y.toString(16));
          }
          Y = T();
        }
        if (V.length != 1)
          throw new Error("only single frame JPEGs supported");
        for (var ae = 0;ae < V.length; ae++) {
          var Ee = V[ae].components;
          for (var ne in Ee)
            Ee[ne].quantizationTable = j[Ee[ne].quantizationIdx], delete Ee[ne].quantizationIdx;
        }
        this.width = F.samplesPerLine, this.height = F.scanLines, this.jfif = L, this.adobe = P, this.components = [];
        for (var ae = 0;ae < F.componentsOrder.length; ae++) {
          var D = F.components[F.componentsOrder[ae]];
          this.components.push({ lines: g(F, D), scaleX: D.h / F.maxH, scaleY: D.v / F.maxV });
        }
      }, getData: function(O, k) {
        var E = this.width / O, R = this.height / k, T, A, C, L, P, U, F, H, j, V, W = 0, Q, Y, de, ae, ne, ue, N, X, ke, be, ge, ve = O * k * this.components.length;
        _(ve);
        var fe = new Uint8Array(ve);
        switch (this.components.length) {
          case 1:
            for (T = this.components[0], V = 0;V < k; V++)
              for (P = T.lines[0 | V * T.scaleY * R], j = 0;j < O; j++)
                Q = P[0 | j * T.scaleX * E], fe[W++] = Q;
            break;
          case 2:
            for (T = this.components[0], A = this.components[1], V = 0;V < k; V++)
              for (P = T.lines[0 | V * T.scaleY * R], U = A.lines[0 | V * A.scaleY * R], j = 0;j < O; j++)
                Q = P[0 | j * T.scaleX * E], fe[W++] = Q, Q = U[0 | j * A.scaleX * E], fe[W++] = Q;
            break;
          case 3:
            for (ge = true, this.adobe && this.adobe.transformCode ? ge = true : typeof this.opts.colorTransform != "undefined" && (ge = !!this.opts.colorTransform), T = this.components[0], A = this.components[1], C = this.components[2], V = 0;V < k; V++)
              for (P = T.lines[0 | V * T.scaleY * R], U = A.lines[0 | V * A.scaleY * R], F = C.lines[0 | V * C.scaleY * R], j = 0;j < O; j++)
                ge ? (Q = P[0 | j * T.scaleX * E], Y = U[0 | j * A.scaleX * E], de = F[0 | j * C.scaleX * E], X = m(Q + 1.402 * (de - 128)), ke = m(Q - 0.3441363 * (Y - 128) - 0.71413636 * (de - 128)), be = m(Q + 1.772 * (Y - 128))) : (X = P[0 | j * T.scaleX * E], ke = U[0 | j * A.scaleX * E], be = F[0 | j * C.scaleX * E]), fe[W++] = X, fe[W++] = ke, fe[W++] = be;
            break;
          case 4:
            if (!this.adobe)
              throw new Error("Unsupported color mode (4 components)");
            for (ge = false, this.adobe && this.adobe.transformCode ? ge = true : typeof this.opts.colorTransform != "undefined" && (ge = !!this.opts.colorTransform), T = this.components[0], A = this.components[1], C = this.components[2], L = this.components[3], V = 0;V < k; V++)
              for (P = T.lines[0 | V * T.scaleY * R], U = A.lines[0 | V * A.scaleY * R], F = C.lines[0 | V * C.scaleY * R], H = L.lines[0 | V * L.scaleY * R], j = 0;j < O; j++)
                ge ? (Q = P[0 | j * T.scaleX * E], Y = U[0 | j * A.scaleX * E], de = F[0 | j * C.scaleX * E], ae = H[0 | j * L.scaleX * E], ne = 255 - m(Q + 1.402 * (de - 128)), ue = 255 - m(Q - 0.3441363 * (Y - 128) - 0.71413636 * (de - 128)), N = 255 - m(Q + 1.772 * (Y - 128))) : (ne = P[0 | j * T.scaleX * E], ue = U[0 | j * A.scaleX * E], N = F[0 | j * C.scaleX * E], ae = H[0 | j * L.scaleX * E]), fe[W++] = 255 - ne, fe[W++] = 255 - ue, fe[W++] = 255 - N, fe[W++] = 255 - ae;
            break;
          default:
            throw new Error("Unsupported color mode");
        }
        return fe;
      }, copyToImageData: function(O, k) {
        var { width: E, height: R, data: T } = O, A = this.getData(E, R), C = 0, L = 0, P, U, F, H, j, V, W, Q, Y;
        switch (this.components.length) {
          case 1:
            for (U = 0;U < R; U++)
              for (P = 0;P < E; P++)
                F = A[C++], T[L++] = F, T[L++] = F, T[L++] = F, k && (T[L++] = 255);
            break;
          case 3:
            for (U = 0;U < R; U++)
              for (P = 0;P < E; P++)
                W = A[C++], Q = A[C++], Y = A[C++], T[L++] = W, T[L++] = Q, T[L++] = Y, k && (T[L++] = 255);
            break;
          case 4:
            for (U = 0;U < R; U++)
              for (P = 0;P < E; P++)
                j = A[C++], V = A[C++], F = A[C++], H = A[C++], W = 255 - m(j * (1 - H / 255) + H), Q = 255 - m(V * (1 - H / 255) + H), Y = 255 - m(F * (1 - H / 255) + H), T[L++] = W, T[L++] = Q, T[L++] = Y, k && (T[L++] = 255);
            break;
          default:
            throw new Error("Unsupported color mode");
        }
      } };
      var v = 0, b = 0;
      function _(S = 0) {
        var O = v + S;
        if (O > b) {
          var k = Math.ceil((O - b) / 1024 / 1024);
          throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${k}MB`);
        }
        v = O;
      }
      return u.resetMaxMemoryUsage = function(S) {
        v = 0, b = S;
      }, u.getBytesAllocated = function() {
        return v;
      }, u.requestMemoryAllocation = _, u;
    }();
    typeof Va != "undefined" ? Va.exports = zh : typeof window != "undefined" && (window["jpeg-js"] = window["jpeg-js"] || {}, window["jpeg-js"].decode = zh);
    function zh(t, e = {}) {
      var i = { colorTransform: undefined, useTArray: false, formatAsRGBA: true, tolerantDecoding: true, maxResolutionInMP: 100, maxMemoryUsageInMB: 512 }, r = { ...i, ...e }, n = new Uint8Array(t), s = new $a;
      s.opts = r, $a.resetMaxMemoryUsage(r.maxMemoryUsageInMB * 1024 * 1024), s.parse(n);
      var o = r.formatAsRGBA ? 4 : 3, a = s.width * s.height * o;
      try {
        $a.requestMemoryAllocation(a);
        var l = { width: s.width, height: s.height, exifBuffer: s.exifBuffer, data: r.useTArray ? new Uint8Array(a) : Buffer.alloc(a) };
        s.comments.length > 0 && (l.comments = s.comments);
      } catch (c) {
        throw c instanceof RangeError ? new Error("Could not allocate enough memory for the image. Required: " + a) : c instanceof ReferenceError && c.message === "Buffer is not defined" ? new Error("Buffer is not globally defined in this environment. Consider setting useTArray to true") : c;
      }
      return s.copyToImageData(l, r.formatAsRGBA), l;
    }
  });
  var Zh = w((ZI, Jh) => {
    var zw = Wh(), Kw = Kh();
    Jh.exports = { encode: zw, decode: Kw };
  });
  var Xh = w((QI, Qh) => {
    function Ls() {
      this._types = Object.create(null), this._extensions = Object.create(null);
      for (let t = 0;t < arguments.length; t++)
        this.define(arguments[t]);
      this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
    }
    Ls.prototype.define = function(t, e) {
      for (let i in t) {
        let r = t[i].map(function(n) {
          return n.toLowerCase();
        });
        i = i.toLowerCase();
        for (let n = 0;n < r.length; n++) {
          let s = r[n];
          if (s[0] !== "*") {
            if (!e && s in this._types)
              throw new Error('Attempt to change mapping for "' + s + '" extension from "' + this._types[s] + '" to "' + i + '". Pass `force=true` to allow this, otherwise remove "' + s + '" from the list of extensions for "' + i + '".');
            this._types[s] = i;
          }
        }
        if (e || !this._extensions[i]) {
          let n = r[0];
          this._extensions[i] = n[0] !== "*" ? n : n.substr(1);
        }
      }
    };
    Ls.prototype.getType = function(t) {
      t = String(t);
      let e = t.replace(/^.*[/\\]/, "").toLowerCase(), i = e.replace(/^.*\./, "").toLowerCase(), r = e.length < t.length;
      return (i.length < e.length - 1 || !r) && this._types[i] || null;
    };
    Ls.prototype.getExtension = function(t) {
      return t = /^\s*([^;\s]*)/.test(t) && RegExp.$1, t && this._extensions[t.toLowerCase()] || null;
    };
    Qh.exports = Ls;
  });
  var tp = w((XI, ep) => {
    ep.exports = { "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] };
  });
  var rp = w((e2, ip) => {
    ip.exports = { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] };
  });
  var sp = w((t2, np) => {
    var Jw = Xh();
    np.exports = new Jw(tp(), rp());
  });
  var ap = w((i2, op) => {
    op.exports = function(t, e) {
      for (var i = [], r = 0;r < t.length; r++) {
        var n = e(t[r], r);
        Zw(n) ? i.push.apply(i, n) : i.push(n);
      }
      return i;
    };
    var Zw = Array.isArray || function(t) {
      return Object.prototype.toString.call(t) === "[object Array]";
    };
  });
  var hp = w((r2, fp) => {
    fp.exports = cp;
    function cp(t, e, i) {
      t instanceof RegExp && (t = lp(t, i)), e instanceof RegExp && (e = lp(e, i));
      var r = up(t, e, i);
      return r && { start: r[0], end: r[1], pre: i.slice(0, r[0]), body: i.slice(r[0] + t.length, r[1]), post: i.slice(r[1] + e.length) };
    }
    function lp(t, e) {
      var i = e.match(t);
      return i ? i[0] : null;
    }
    cp.range = up;
    function up(t, e, i) {
      var r, n, s, o, a, l = i.indexOf(t), c = i.indexOf(e, l + 1), u = l;
      if (l >= 0 && c > 0) {
        if (t === e)
          return [l, c];
        for (r = [], s = i.length;u >= 0 && !a; )
          u == l ? (r.push(u), l = i.indexOf(t, u + 1)) : r.length == 1 ? a = [r.pop(), c] : (n = r.pop(), n < s && (s = n, o = c), c = i.indexOf(e, u + 1)), u = l < c && l >= 0 ? l : c;
        r.length && (a = [s, o]);
      }
      return a;
    }
  });
  var _p = w((n2, bp) => {
    var Qw = ap(), pp = hp();
    bp.exports = t1;
    var dp = "\x00SLASH" + Math.random() + "\x00", mp = "\x00OPEN" + Math.random() + "\x00", Ga = "\x00CLOSE" + Math.random() + "\x00", gp = "\x00COMMA" + Math.random() + "\x00", vp = "\x00PERIOD" + Math.random() + "\x00";
    function Ha(t) {
      return parseInt(t, 10) == t ? parseInt(t, 10) : t.charCodeAt(0);
    }
    function Xw(t) {
      return t.split("\\\\").join(dp).split("\\{").join(mp).split("\\}").join(Ga).split("\\,").join(gp).split("\\.").join(vp);
    }
    function e1(t) {
      return t.split(dp).join("\\").split(mp).join("{").split(Ga).join("}").split(gp).join(",").split(vp).join(".");
    }
    function yp(t) {
      if (!t)
        return [""];
      var e = [], i = pp("{", "}", t);
      if (!i)
        return t.split(",");
      var { pre: r, body: n, post: s } = i, o = r.split(",");
      o[o.length - 1] += "{" + n + "}";
      var a = yp(s);
      return s.length && (o[o.length - 1] += a.shift(), o.push.apply(o, a)), e.push.apply(e, o), e;
    }
    function t1(t) {
      return t ? (t.substr(0, 2) === "{}" && (t = "\\{\\}" + t.substr(2)), kr(Xw(t), true).map(e1)) : [];
    }
    function i1(t) {
      return "{" + t + "}";
    }
    function r1(t) {
      return /^-?0\d/.test(t);
    }
    function n1(t, e) {
      return t <= e;
    }
    function s1(t, e) {
      return t >= e;
    }
    function kr(t, e) {
      var i = [], r = pp("{", "}", t);
      if (!r || /\$$/.test(r.pre))
        return [t];
      var n = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(r.body), s = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(r.body), o = n || s, a = r.body.indexOf(",") >= 0;
      if (!o && !a)
        return r.post.match(/,.*\}/) ? (t = r.pre + "{" + r.body + Ga + r.post, kr(t)) : [t];
      var l;
      if (o)
        l = r.body.split(/\.\./);
      else if (l = yp(r.body), l.length === 1 && (l = kr(l[0], false).map(i1), l.length === 1)) {
        var u = r.post.length ? kr(r.post, false) : [""];
        return u.map(function(P) {
          return r.pre + l[0] + P;
        });
      }
      var c = r.pre, u = r.post.length ? kr(r.post, false) : [""], f;
      if (o) {
        var d = Ha(l[0]), g = Ha(l[1]), m = Math.max(l[0].length, l[1].length), v = l.length == 3 ? Math.abs(Ha(l[2])) : 1, b = n1, _ = g < d;
        _ && (v *= -1, b = s1);
        var S = l.some(r1);
        f = [];
        for (var O = d;b(O, g); O += v) {
          var k;
          if (s)
            k = String.fromCharCode(O), k === "\\" && (k = "");
          else if (k = String(O), S) {
            var E = m - k.length;
            if (E > 0) {
              var R = new Array(E + 1).join("0");
              O < 0 ? k = "-" + R + k.slice(1) : k = R + k;
            }
          }
          f.push(k);
        }
      } else
        f = Qw(l, function(L) {
          return kr(L, false);
        });
      for (var T = 0;T < f.length; T++)
        for (var A = 0;A < u.length; A++) {
          var C = c + f[T] + u[A];
          (!e || o || C) && i.push(C);
        }
      return i;
    }
  });
  var Op = w((s2, kp) => {
    kp.exports = St;
    St.Minimatch = Qe;
    var ln = function() {
      try {
        return __require("path");
      } catch {
      }
    }() || { sep: "/" };
    St.sep = ln.sep;
    var za = St.GLOBSTAR = Qe.GLOBSTAR = {}, o1 = _p(), wp = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } }, Ya = "[^/]", Wa = Ya + "*?", a1 = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?", l1 = "(?:(?!(?:\\/|^)\\.).)*?", xp = c1("().*{}+?[]^$\\!");
    function c1(t) {
      return t.split("").reduce(function(e, i) {
        return e[i] = true, e;
      }, {});
    }
    var Sp = /\/+/;
    St.filter = u1;
    function u1(t, e) {
      return e = e || {}, function(i, r, n) {
        return St(i, t, e);
      };
    }
    function yi(t, e) {
      e = e || {};
      var i = {};
      return Object.keys(t).forEach(function(r) {
        i[r] = t[r];
      }), Object.keys(e).forEach(function(r) {
        i[r] = e[r];
      }), i;
    }
    St.defaults = function(t) {
      if (!t || typeof t != "object" || !Object.keys(t).length)
        return St;
      var e = St, i = function(n, s, o) {
        return e(n, s, yi(t, o));
      };
      return i.Minimatch = function(n, s) {
        return new e.Minimatch(n, yi(t, s));
      }, i.Minimatch.defaults = function(n) {
        return e.defaults(yi(t, n)).Minimatch;
      }, i.filter = function(n, s) {
        return e.filter(n, yi(t, s));
      }, i.defaults = function(n) {
        return e.defaults(yi(t, n));
      }, i.makeRe = function(n, s) {
        return e.makeRe(n, yi(t, s));
      }, i.braceExpand = function(n, s) {
        return e.braceExpand(n, yi(t, s));
      }, i.match = function(r, n, s) {
        return e.match(r, n, yi(t, s));
      }, i;
    };
    Qe.defaults = function(t) {
      return St.defaults(t).Minimatch;
    };
    function St(t, e, i) {
      return Rs(e), i || (i = {}), !i.nocomment && e.charAt(0) === "#" ? false : new Qe(e, i).match(t);
    }
    function Qe(t, e) {
      if (!(this instanceof Qe))
        return new Qe(t, e);
      Rs(t), e || (e = {}), t = t.trim(), !e.allowWindowsEscape && ln.sep !== "/" && (t = t.split(ln.sep).join("/")), this.options = e, this.set = [], this.pattern = t, this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!e.partial, this.make();
    }
    Qe.prototype.debug = function() {
    };
    Qe.prototype.make = f1;
    function f1() {
      var t = this.pattern, e = this.options;
      if (!e.nocomment && t.charAt(0) === "#") {
        this.comment = true;
        return;
      }
      if (!t) {
        this.empty = true;
        return;
      }
      this.parseNegate();
      var i = this.globSet = this.braceExpand();
      e.debug && (this.debug = function() {
        console.error.apply(console, arguments);
      }), this.debug(this.pattern, i), i = this.globParts = i.map(function(r) {
        return r.split(Sp);
      }), this.debug(this.pattern, i), i = i.map(function(r, n, s) {
        return r.map(this.parse, this);
      }, this), this.debug(this.pattern, i), i = i.filter(function(r) {
        return r.indexOf(false) === -1;
      }), this.debug(this.pattern, i), this.set = i;
    }
    Qe.prototype.parseNegate = h1;
    function h1() {
      var t = this.pattern, e = false, i = this.options, r = 0;
      if (!i.nonegate) {
        for (var n = 0, s = t.length;n < s && t.charAt(n) === "!"; n++)
          e = !e, r++;
        r && (this.pattern = t.substr(r)), this.negate = e;
      }
    }
    St.braceExpand = function(t, e) {
      return Ep(t, e);
    };
    Qe.prototype.braceExpand = Ep;
    function Ep(t, e) {
      return e || (this instanceof Qe ? e = this.options : e = {}), t = typeof t == "undefined" ? this.pattern : t, Rs(t), e.nobrace || !/\{(?:(?!\{).)*\}/.test(t) ? [t] : o1(t);
    }
    var p1 = 1024 * 64, Rs = function(t) {
      if (typeof t != "string")
        throw new TypeError("invalid pattern");
      if (t.length > p1)
        throw new TypeError("pattern is too long");
    };
    Qe.prototype.parse = d1;
    var Bs = {};
    function d1(t, e) {
      Rs(t);
      var i = this.options;
      if (t === "**")
        if (i.noglobstar)
          t = "*";
        else
          return za;
      if (t === "")
        return "";
      var r = "", n = !!i.nocase, s = false, o = [], a = [], l, c = false, u = -1, f = -1, d = t.charAt(0) === "." ? "" : i.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", g = this;
      function m() {
        if (l) {
          switch (l) {
            case "*":
              r += Wa, n = true;
              break;
            case "?":
              r += Ya, n = true;
              break;
            default:
              r += "\\" + l;
              break;
          }
          g.debug("clearStateChar %j %j", l, r), l = false;
        }
      }
      for (var v = 0, b = t.length, _;v < b && (_ = t.charAt(v)); v++) {
        if (this.debug("%s\t%s %s %j", t, v, r, _), s && xp[_]) {
          r += "\\" + _, s = false;
          continue;
        }
        switch (_) {
          case "/":
            return false;
          case "\\":
            m(), s = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            if (this.debug("%s\t%s %s %j <-- stateChar", t, v, r, _), c) {
              this.debug("  in class"), _ === "!" && v === f + 1 && (_ = "^"), r += _;
              continue;
            }
            g.debug("call clearStateChar %j", l), m(), l = _, i.noext && m();
            continue;
          case "(":
            if (c) {
              r += "(";
              continue;
            }
            if (!l) {
              r += "\\(";
              continue;
            }
            o.push({ type: l, start: v - 1, reStart: r.length, open: wp[l].open, close: wp[l].close }), r += l === "!" ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", l, r), l = false;
            continue;
          case ")":
            if (c || !o.length) {
              r += "\\)";
              continue;
            }
            m(), n = true;
            var S = o.pop();
            r += S.close, S.type === "!" && a.push(S), S.reEnd = r.length;
            continue;
          case "|":
            if (c || !o.length || s) {
              r += "\\|", s = false;
              continue;
            }
            m(), r += "|";
            continue;
          case "[":
            if (m(), c) {
              r += "\\" + _;
              continue;
            }
            c = true, f = v, u = r.length, r += _;
            continue;
          case "]":
            if (v === f + 1 || !c) {
              r += "\\" + _, s = false;
              continue;
            }
            var O = t.substring(f + 1, v);
            try {
              RegExp("[" + O + "]");
            } catch {
              var k = this.parse(O, Bs);
              r = r.substr(0, u) + "\\[" + k[0] + "\\]", n = n || k[1], c = false;
              continue;
            }
            n = true, c = false, r += _;
            continue;
          default:
            m(), s ? s = false : xp[_] && !(_ === "^" && c) && (r += "\\"), r += _;
        }
      }
      for (c && (O = t.substr(f + 1), k = this.parse(O, Bs), r = r.substr(0, u) + "\\[" + k[0], n = n || k[1]), S = o.pop();S; S = o.pop()) {
        var E = r.slice(S.reStart + S.open.length);
        this.debug("setting tail", r, S), E = E.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(de, ae, ne) {
          return ne || (ne = "\\"), ae + ae + ne + "|";
        }), this.debug(`tail=%j
   %s`, E, E, S, r);
        var R = S.type === "*" ? Wa : S.type === "?" ? Ya : "\\" + S.type;
        n = true, r = r.slice(0, S.reStart) + R + "\\(" + E;
      }
      m(), s && (r += "\\\\");
      var T = false;
      switch (r.charAt(0)) {
        case "[":
        case ".":
        case "(":
          T = true;
      }
      for (var A = a.length - 1;A > -1; A--) {
        var C = a[A], L = r.slice(0, C.reStart), P = r.slice(C.reStart, C.reEnd - 8), U = r.slice(C.reEnd - 8, C.reEnd), F = r.slice(C.reEnd);
        U += F;
        var H = L.split("(").length - 1, j = F;
        for (v = 0;v < H; v++)
          j = j.replace(/\)[+*?]?/, "");
        F = j;
        var V = "";
        F === "" && e !== Bs && (V = "$");
        var W = L + P + F + V + U;
        r = W;
      }
      if (r !== "" && n && (r = "(?=.)" + r), T && (r = d + r), e === Bs)
        return [r, n];
      if (!n)
        return g1(t);
      var Q = i.nocase ? "i" : "";
      try {
        var Y = new RegExp("^" + r + "$", Q);
      } catch {
        return new RegExp("$.");
      }
      return Y._glob = t, Y._src = r, Y;
    }
    St.makeRe = function(t, e) {
      return new Qe(t, e || {}).makeRe();
    };
    Qe.prototype.makeRe = m1;
    function m1() {
      if (this.regexp || this.regexp === false)
        return this.regexp;
      var t = this.set;
      if (!t.length)
        return this.regexp = false, this.regexp;
      var e = this.options, i = e.noglobstar ? Wa : e.dot ? a1 : l1, r = e.nocase ? "i" : "", n = t.map(function(s) {
        return s.map(function(o) {
          return o === za ? i : typeof o == "string" ? v12(o) : o._src;
        }).join("\\/");
      }).join("|");
      n = "^(?:" + n + ")$", this.negate && (n = "^(?!" + n + ").*$");
      try {
        this.regexp = new RegExp(n, r);
      } catch {
        this.regexp = false;
      }
      return this.regexp;
    }
    St.match = function(t, e, i) {
      i = i || {};
      var r = new Qe(e, i);
      return t = t.filter(function(n) {
        return r.match(n);
      }), r.options.nonull && !t.length && t.push(e), t;
    };
    Qe.prototype.match = function(e, i) {
      if (typeof i == "undefined" && (i = this.partial), this.debug("match", e, this.pattern), this.comment)
        return false;
      if (this.empty)
        return e === "";
      if (e === "/" && i)
        return true;
      var r = this.options;
      ln.sep !== "/" && (e = e.split(ln.sep).join("/")), e = e.split(Sp), this.debug(this.pattern, "split", e);
      var n = this.set;
      this.debug(this.pattern, "set", n);
      var s, o;
      for (o = e.length - 1;o >= 0 && (s = e[o], !s); o--)
        ;
      for (o = 0;o < n.length; o++) {
        var a = n[o], l = e;
        r.matchBase && a.length === 1 && (l = [s]);
        var c = this.matchOne(l, a, i);
        if (c)
          return r.flipNegate ? true : !this.negate;
      }
      return r.flipNegate ? false : this.negate;
    };
    Qe.prototype.matchOne = function(t, e, i) {
      var r = this.options;
      this.debug("matchOne", { this: this, file: t, pattern: e }), this.debug("matchOne", t.length, e.length);
      for (var n = 0, s = 0, o = t.length, a = e.length;n < o && s < a; n++, s++) {
        this.debug("matchOne loop");
        var l = e[s], c = t[n];
        if (this.debug(e, l, c), l === false)
          return false;
        if (l === za) {
          this.debug("GLOBSTAR", [e, l, c]);
          var u = n, f = s + 1;
          if (f === a) {
            for (this.debug("** at the end");n < o; n++)
              if (t[n] === "." || t[n] === ".." || !r.dot && t[n].charAt(0) === ".")
                return false;
            return true;
          }
          for (;u < o; ) {
            var d = t[u];
            if (this.debug(`
globstar while`, t, u, e, f, d), this.matchOne(t.slice(u), e.slice(f), i))
              return this.debug("globstar found match!", u, o, d), true;
            if (d === "." || d === ".." || !r.dot && d.charAt(0) === ".") {
              this.debug("dot detected!", t, u, e, f);
              break;
            }
            this.debug("globstar swallow a segment, and continue"), u++;
          }
          return !!(i && (this.debug(`
>>> no match, partial?`, t, u, e, f), u === o));
        }
        var g;
        if (typeof l == "string" ? (g = c === l, this.debug("string match", l, c, g)) : (g = c.match(l), this.debug("pattern match", l, c, g)), !g)
          return false;
      }
      if (n === o && s === a)
        return true;
      if (n === o)
        return i;
      if (s === a)
        return n === o - 1 && t[n] === "";
      throw new Error("wtf?");
    };
    function g1(t) {
      return t.replace(/\\(.)/g, "$1");
    }
    function v12(t) {
      return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    }
  });
  var Ja = w((o2, Tp) => {
    var Cp = __require("fs"), Ka;
    function y1() {
      try {
        return Cp.statSync("/.dockerenv"), true;
      } catch {
        return false;
      }
    }
    function b1() {
      try {
        return Cp.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
      } catch {
        return false;
      }
    }
    Tp.exports = () => (Ka === undefined && (Ka = y1() || b1()), Ka);
  });
  var Np = w((a2, Za) => {
    var _1 = __require("os"), w1 = __require("fs"), Ap = Ja(), Ip = () => {
      if (process.platform !== "linux")
        return false;
      if (_1.release().toLowerCase().includes("microsoft"))
        return !Ap();
      try {
        return w1.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !Ap() : false;
      } catch {
        return false;
      }
    };
    process.env.__IS_WSL_TEST__ ? Za.exports = Ip : Za.exports = Ip();
  });
  var Bp = w((l2, Lp) => {
    Lp.exports = (t, e, i) => {
      let r = (n) => Object.defineProperty(t, e, { value: n, enumerable: true, writable: true });
      return Object.defineProperty(t, e, { configurable: true, enumerable: true, get() {
        let n = i();
        return r(n), n;
      }, set(n) {
        r(n);
      } }), t;
    };
  });
  var jp = w((c2, Dp) => {
    var x1 = __require("path"), S1 = __require("child_process"), { promises: Qa, constants: Fp } = __require("fs"), Ps = Np(), E1 = Ja(), Xa = Bp(), Rp = x1.join(__dirname, "xdg-open"), { platform: Or, arch: Pp } = process, k1 = (() => {
      let t = "/mnt/", e;
      return async function() {
        if (e)
          return e;
        let i = "/etc/wsl.conf", r = false;
        try {
          await Qa.access(i, Fp.F_OK), r = true;
        } catch {
        }
        if (!r)
          return t;
        let n = await Qa.readFile(i, { encoding: "utf8" }), s = /(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(n);
        return s ? (e = s.groups.mountPoint.trim(), e = e.endsWith("/") ? e : `${e}/`, e) : t;
      };
    })(), Mp = async (t, e) => {
      let i;
      for (let r of t)
        try {
          return await e(r);
        } catch (n) {
          i = n;
        }
      throw i;
    }, Ms = async (t) => {
      if (t = { wait: false, background: false, newInstance: false, allowNonzeroExitCode: false, ...t }, Array.isArray(t.app))
        return Mp(t.app, (a) => Ms({ ...t, app: a }));
      let { name: e, arguments: i = [] } = t.app || {};
      if (i = [...i], Array.isArray(e))
        return Mp(e, (a) => Ms({ ...t, app: { name: a, arguments: i } }));
      let r, n = [], s = {};
      if (Or === "darwin")
        r = "open", t.wait && n.push("--wait-apps"), t.background && n.push("--background"), t.newInstance && n.push("--new"), e && n.push("-a", e);
      else if (Or === "win32" || Ps && !E1()) {
        let a = await k1();
        r = Ps ? `${a}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` : `${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`, n.push("-NoProfile", "-NonInteractive", "–ExecutionPolicy", "Bypass", "-EncodedCommand"), Ps || (s.windowsVerbatimArguments = true);
        let l = ["Start"];
        t.wait && l.push("-Wait"), e ? (l.push(`"\`"${e}\`""`, "-ArgumentList"), t.target && i.unshift(t.target)) : t.target && l.push(`"${t.target}"`), i.length > 0 && (i = i.map((c) => `"\`"${c}\`""`), l.push(i.join(","))), t.target = Buffer.from(l.join(" "), "utf16le").toString("base64");
      } else {
        if (e)
          r = e;
        else {
          let a = !__dirname || __dirname === "/", l = false;
          try {
            await Qa.access(Rp, Fp.X_OK), l = true;
          } catch {
          }
          r = process.versions.electron || Or === "android" || a || !l ? "xdg-open" : Rp;
        }
        i.length > 0 && n.push(...i), t.wait || (s.stdio = "ignore", s.detached = true);
      }
      t.target && n.push(t.target), Or === "darwin" && i.length > 0 && n.push("--args", ...i);
      let o = S1.spawn(r, n, s);
      return t.wait ? new Promise((a, l) => {
        o.once("error", l), o.once("close", (c) => {
          if (t.allowNonzeroExitCode && c > 0) {
            l(new Error(`Exited with code ${c}`));
            return;
          }
          a(o);
        });
      }) : (o.unref(), o);
    }, el = (t, e) => {
      if (typeof t != "string")
        throw new TypeError("Expected a `target`");
      return Ms({ ...e, target: t });
    }, O1 = (t, e) => {
      if (typeof t != "string")
        throw new TypeError("Expected a `name`");
      let { arguments: i = [] } = e || {};
      if (i != null && !Array.isArray(i))
        throw new TypeError("Expected `appArguments` as Array type");
      return Ms({ ...e, app: { name: t, arguments: i } });
    };
    function qp(t) {
      if (typeof t == "string" || Array.isArray(t))
        return t;
      let { [Pp]: e } = t;
      if (!e)
        throw new Error(`${Pp} is not supported`);
      return e;
    }
    function tl({ [Or]: t }, { wsl: e }) {
      if (e && Ps)
        return qp(e);
      if (!t)
        throw new Error(`${Or} is not supported`);
      return qp(t);
    }
    var qs = {};
    Xa(qs, "chrome", () => tl({ darwin: "google chrome", win32: "chrome", linux: ["google-chrome", "google-chrome-stable", "chromium"] }, { wsl: { ia32: "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe", x64: ["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe", "/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"] } }));
    Xa(qs, "firefox", () => tl({ darwin: "firefox", win32: "C:\\Program Files\\Mozilla Firefox\\firefox.exe", linux: "firefox" }, { wsl: "/mnt/c/Program Files/Mozilla Firefox/firefox.exe" }));
    Xa(qs, "edge", () => tl({ darwin: "microsoft edge", win32: "msedge", linux: ["microsoft-edge", "microsoft-edge-dev"] }, { wsl: "/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe" }));
    el.apps = qs;
    el.openApp = O1;
    Dp.exports = el;
  });
  var il = w((u2, $p) => {
    var C1 = __require("util"), Up = __require("stream"), Ut = $p.exports = function() {
      Up.call(this), this._buffers = [], this._buffered = 0, this._reads = [], this._paused = false, this._encoding = "utf8", this.writable = true;
    };
    C1.inherits(Ut, Up);
    Ut.prototype.read = function(t, e) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e }), process.nextTick(function() {
        this._process(), this._paused && this._reads && this._reads.length > 0 && (this._paused = false, this.emit("drain"));
      }.bind(this));
    };
    Ut.prototype.write = function(t, e) {
      if (!this.writable)
        return this.emit("error", new Error("Stream not writable")), false;
      let i;
      return Buffer.isBuffer(t) ? i = t : i = Buffer.from(t, e || this._encoding), this._buffers.push(i), this._buffered += i.length, this._process(), this._reads && this._reads.length === 0 && (this._paused = true), this.writable && !this._paused;
    };
    Ut.prototype.end = function(t, e) {
      t && this.write(t, e), this.writable = false, this._buffers && (this._buffers.length === 0 ? this._end() : (this._buffers.push(null), this._process()));
    };
    Ut.prototype.destroySoon = Ut.prototype.end;
    Ut.prototype._end = function() {
      this._reads.length > 0 && this.emit("error", new Error("Unexpected end of input")), this.destroy();
    };
    Ut.prototype.destroy = function() {
      this._buffers && (this.writable = false, this._reads = null, this._buffers = null, this.emit("close"));
    };
    Ut.prototype._processReadAllowingLess = function(t) {
      this._reads.shift();
      let e = this._buffers[0];
      e.length > t.length ? (this._buffered -= t.length, this._buffers[0] = e.slice(t.length), t.func.call(this, e.slice(0, t.length))) : (this._buffered -= e.length, this._buffers.shift(), t.func.call(this, e));
    };
    Ut.prototype._processRead = function(t) {
      this._reads.shift();
      let e = 0, i = 0, r = Buffer.alloc(t.length);
      for (;e < t.length; ) {
        let n = this._buffers[i++], s = Math.min(n.length, t.length - e);
        n.copy(r, e, 0, s), e += s, s !== n.length && (this._buffers[--i] = n.slice(s));
      }
      i > 0 && this._buffers.splice(0, i), this._buffered -= t.length, t.func.call(this, r);
    };
    Ut.prototype._process = function() {
      try {
        for (;this._buffered > 0 && this._reads && this._reads.length > 0; ) {
          let t = this._reads[0];
          if (t.allowLess)
            this._processReadAllowingLess(t);
          else if (this._buffered >= t.length)
            this._processRead(t);
          else
            break;
        }
        this._buffers && !this.writable && this._end();
      } catch (t) {
        this.emit("error", t);
      }
    };
  });
  var nl = w((rl) => {
    var bi = [{ x: [0], y: [0] }, { x: [4], y: [0] }, { x: [0, 4], y: [4] }, { x: [2, 6], y: [0, 4] }, { x: [0, 2, 4, 6], y: [2, 6] }, { x: [1, 3, 5, 7], y: [0, 2, 4, 6] }, { x: [0, 1, 2, 3, 4, 5, 6, 7], y: [1, 3, 5, 7] }];
    rl.getImagePasses = function(t, e) {
      let i = [], r = t % 8, n = e % 8, s = (t - r) / 8, o = (e - n) / 8;
      for (let a = 0;a < bi.length; a++) {
        let l = bi[a], c = s * l.x.length, u = o * l.y.length;
        for (let f = 0;f < l.x.length && l.x[f] < r; f++)
          c++;
        for (let f = 0;f < l.y.length && l.y[f] < n; f++)
          u++;
        c > 0 && u > 0 && i.push({ width: c, height: u, index: a });
      }
      return i;
    };
    rl.getInterlaceIterator = function(t) {
      return function(e, i, r) {
        let n = e % bi[r].x.length, s = (e - n) / bi[r].x.length * 8 + bi[r].x[n], o = i % bi[r].y.length, a = (i - o) / bi[r].y.length * 8 + bi[r].y[o];
        return s * 4 + a * t * 4;
      };
    };
  });
  var sl = w((h2, Vp) => {
    Vp.exports = function(e, i, r) {
      let n = e + i - r, s = Math.abs(n - e), o = Math.abs(n - i), a = Math.abs(n - r);
      return s <= o && s <= a ? e : o <= a ? i : r;
    };
  });
  var ol = w((p2, Gp) => {
    var T1 = nl(), A1 = sl();
    function Hp(t, e, i) {
      let r = t * e;
      return i !== 8 && (r = Math.ceil(r / (8 / i))), r;
    }
    var Cr = Gp.exports = function(t, e) {
      let { width: i, height: r, interlace: n, bpp: s, depth: o } = t;
      if (this.read = e.read, this.write = e.write, this.complete = e.complete, this._imageIndex = 0, this._images = [], n) {
        let a = T1.getImagePasses(i, r);
        for (let l = 0;l < a.length; l++)
          this._images.push({ byteWidth: Hp(a[l].width, s, o), height: a[l].height, lineIndex: 0 });
      } else
        this._images.push({ byteWidth: Hp(i, s, o), height: r, lineIndex: 0 });
      o === 8 ? this._xComparison = s : o === 16 ? this._xComparison = s * 2 : this._xComparison = 1;
    };
    Cr.prototype.start = function() {
      this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));
    };
    Cr.prototype._unFilterType1 = function(t, e, i) {
      let r = this._xComparison, n = r - 1;
      for (let s = 0;s < i; s++) {
        let o = t[1 + s], a = s > n ? e[s - r] : 0;
        e[s] = o + a;
      }
    };
    Cr.prototype._unFilterType2 = function(t, e, i) {
      let r = this._lastLine;
      for (let n = 0;n < i; n++) {
        let s = t[1 + n], o = r ? r[n] : 0;
        e[n] = s + o;
      }
    };
    Cr.prototype._unFilterType3 = function(t, e, i) {
      let r = this._xComparison, n = r - 1, s = this._lastLine;
      for (let o = 0;o < i; o++) {
        let a = t[1 + o], l = s ? s[o] : 0, c = o > n ? e[o - r] : 0, u = Math.floor((c + l) / 2);
        e[o] = a + u;
      }
    };
    Cr.prototype._unFilterType4 = function(t, e, i) {
      let r = this._xComparison, n = r - 1, s = this._lastLine;
      for (let o = 0;o < i; o++) {
        let a = t[1 + o], l = s ? s[o] : 0, c = o > n ? e[o - r] : 0, u = o > n && s ? s[o - r] : 0, f = A1(c, l, u);
        e[o] = a + f;
      }
    };
    Cr.prototype._reverseFilterLine = function(t) {
      let e = t[0], i, r = this._images[this._imageIndex], n = r.byteWidth;
      if (e === 0)
        i = t.slice(1, n + 1);
      else
        switch (i = Buffer.alloc(n), e) {
          case 1:
            this._unFilterType1(t, i, n);
            break;
          case 2:
            this._unFilterType2(t, i, n);
            break;
          case 3:
            this._unFilterType3(t, i, n);
            break;
          case 4:
            this._unFilterType4(t, i, n);
            break;
          default:
            throw new Error("Unrecognised filter type - " + e);
        }
      this.write(i), r.lineIndex++, r.lineIndex >= r.height ? (this._lastLine = null, this._imageIndex++, r = this._images[this._imageIndex]) : this._lastLine = i, r ? this.read(r.byteWidth + 1, this._reverseFilterLine.bind(this)) : (this._lastLine = null, this.complete());
    };
  });
  var zp = w((d2, Wp) => {
    var I1 = __require("util"), Yp = il(), N1 = ol(), L1 = Wp.exports = function(t) {
      Yp.call(this);
      let e = [], i = this;
      this._filter = new N1(t, { read: this.read.bind(this), write: function(r) {
        e.push(r);
      }, complete: function() {
        i.emit("complete", Buffer.concat(e));
      } }), this._filter.start();
    };
    I1.inherits(L1, Yp);
  });
  var Tr = w((m2, Kp) => {
    Kp.exports = { PNG_SIGNATURE: [137, 80, 78, 71, 13, 10, 26, 10], TYPE_IHDR: 1229472850, TYPE_IEND: 1229278788, TYPE_IDAT: 1229209940, TYPE_PLTE: 1347179589, TYPE_tRNS: 1951551059, TYPE_gAMA: 1732332865, COLORTYPE_GRAYSCALE: 0, COLORTYPE_PALETTE: 1, COLORTYPE_COLOR: 2, COLORTYPE_ALPHA: 4, COLORTYPE_PALETTE_COLOR: 3, COLORTYPE_COLOR_ALPHA: 6, COLORTYPE_TO_BPP_MAP: { 0: 1, 2: 3, 3: 1, 4: 2, 6: 4 }, GAMMA_DIVISION: 1e5 };
  });
  var cl = w((g2, Jp) => {
    var al = [];
    (function() {
      for (let t = 0;t < 256; t++) {
        let e = t;
        for (let i = 0;i < 8; i++)
          e & 1 ? e = 3988292384 ^ e >>> 1 : e = e >>> 1;
        al[t] = e;
      }
    })();
    var ll = Jp.exports = function() {
      this._crc = -1;
    };
    ll.prototype.write = function(t) {
      for (let e = 0;e < t.length; e++)
        this._crc = al[(this._crc ^ t[e]) & 255] ^ this._crc >>> 8;
      return true;
    };
    ll.prototype.crc32 = function() {
      return this._crc ^ -1;
    };
    ll.crc32 = function(t) {
      let e = -1;
      for (let i = 0;i < t.length; i++)
        e = al[(e ^ t[i]) & 255] ^ e >>> 8;
      return e ^ -1;
    };
  });
  var ul = w((v2, Zp) => {
    var Ve = Tr(), B1 = cl(), We = Zp.exports = function(t, e) {
      this._options = t, t.checkCRC = t.checkCRC !== false, this._hasIHDR = false, this._hasIEND = false, this._emittedHeadersFinished = false, this._palette = [], this._colorType = 0, this._chunks = {}, this._chunks[Ve.TYPE_IHDR] = this._handleIHDR.bind(this), this._chunks[Ve.TYPE_IEND] = this._handleIEND.bind(this), this._chunks[Ve.TYPE_IDAT] = this._handleIDAT.bind(this), this._chunks[Ve.TYPE_PLTE] = this._handlePLTE.bind(this), this._chunks[Ve.TYPE_tRNS] = this._handleTRNS.bind(this), this._chunks[Ve.TYPE_gAMA] = this._handleGAMA.bind(this), this.read = e.read, this.error = e.error, this.metadata = e.metadata, this.gamma = e.gamma, this.transColor = e.transColor, this.palette = e.palette, this.parsed = e.parsed, this.inflateData = e.inflateData, this.finished = e.finished, this.simpleTransparency = e.simpleTransparency, this.headersFinished = e.headersFinished || function() {
      };
    };
    We.prototype.start = function() {
      this.read(Ve.PNG_SIGNATURE.length, this._parseSignature.bind(this));
    };
    We.prototype._parseSignature = function(t) {
      let e = Ve.PNG_SIGNATURE;
      for (let i = 0;i < e.length; i++)
        if (t[i] !== e[i]) {
          this.error(new Error("Invalid file signature"));
          return;
        }
      this.read(8, this._parseChunkBegin.bind(this));
    };
    We.prototype._parseChunkBegin = function(t) {
      let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = "";
      for (let s = 4;s < 8; s++)
        r += String.fromCharCode(t[s]);
      let n = !!(t[4] & 32);
      if (!this._hasIHDR && i !== Ve.TYPE_IHDR) {
        this.error(new Error("Expected IHDR on beggining"));
        return;
      }
      if (this._crc = new B1, this._crc.write(Buffer.from(r)), this._chunks[i])
        return this._chunks[i](e);
      if (!n) {
        this.error(new Error("Unsupported critical chunk type " + r));
        return;
      }
      this.read(e + 4, this._skipChunk.bind(this));
    };
    We.prototype._skipChunk = function() {
      this.read(8, this._parseChunkBegin.bind(this));
    };
    We.prototype._handleChunkEnd = function() {
      this.read(4, this._parseChunkEnd.bind(this));
    };
    We.prototype._parseChunkEnd = function(t) {
      let e = t.readInt32BE(0), i = this._crc.crc32();
      if (this._options.checkCRC && i !== e) {
        this.error(new Error("Crc error - " + e + " - " + i));
        return;
      }
      this._hasIEND || this.read(8, this._parseChunkBegin.bind(this));
    };
    We.prototype._handleIHDR = function(t) {
      this.read(t, this._parseIHDR.bind(this));
    };
    We.prototype._parseIHDR = function(t) {
      this._crc.write(t);
      let e = t.readUInt32BE(0), i = t.readUInt32BE(4), r = t[8], n = t[9], s = t[10], o = t[11], a = t[12];
      if (r !== 8 && r !== 4 && r !== 2 && r !== 1 && r !== 16) {
        this.error(new Error("Unsupported bit depth " + r));
        return;
      }
      if (!(n in Ve.COLORTYPE_TO_BPP_MAP)) {
        this.error(new Error("Unsupported color type"));
        return;
      }
      if (s !== 0) {
        this.error(new Error("Unsupported compression method"));
        return;
      }
      if (o !== 0) {
        this.error(new Error("Unsupported filter method"));
        return;
      }
      if (a !== 0 && a !== 1) {
        this.error(new Error("Unsupported interlace method"));
        return;
      }
      this._colorType = n;
      let l = Ve.COLORTYPE_TO_BPP_MAP[this._colorType];
      this._hasIHDR = true, this.metadata({ width: e, height: i, depth: r, interlace: !!a, palette: !!(n & Ve.COLORTYPE_PALETTE), color: !!(n & Ve.COLORTYPE_COLOR), alpha: !!(n & Ve.COLORTYPE_ALPHA), bpp: l, colorType: n }), this._handleChunkEnd();
    };
    We.prototype._handlePLTE = function(t) {
      this.read(t, this._parsePLTE.bind(this));
    };
    We.prototype._parsePLTE = function(t) {
      this._crc.write(t);
      let e = Math.floor(t.length / 3);
      for (let i = 0;i < e; i++)
        this._palette.push([t[i * 3], t[i * 3 + 1], t[i * 3 + 2], 255]);
      this.palette(this._palette), this._handleChunkEnd();
    };
    We.prototype._handleTRNS = function(t) {
      this.simpleTransparency(), this.read(t, this._parseTRNS.bind(this));
    };
    We.prototype._parseTRNS = function(t) {
      if (this._crc.write(t), this._colorType === Ve.COLORTYPE_PALETTE_COLOR) {
        if (this._palette.length === 0) {
          this.error(new Error("Transparency chunk must be after palette"));
          return;
        }
        if (t.length > this._palette.length) {
          this.error(new Error("More transparent colors than palette size"));
          return;
        }
        for (let e = 0;e < t.length; e++)
          this._palette[e][3] = t[e];
        this.palette(this._palette);
      }
      this._colorType === Ve.COLORTYPE_GRAYSCALE && this.transColor([t.readUInt16BE(0)]), this._colorType === Ve.COLORTYPE_COLOR && this.transColor([t.readUInt16BE(0), t.readUInt16BE(2), t.readUInt16BE(4)]), this._handleChunkEnd();
    };
    We.prototype._handleGAMA = function(t) {
      this.read(t, this._parseGAMA.bind(this));
    };
    We.prototype._parseGAMA = function(t) {
      this._crc.write(t), this.gamma(t.readUInt32BE(0) / Ve.GAMMA_DIVISION), this._handleChunkEnd();
    };
    We.prototype._handleIDAT = function(t) {
      this._emittedHeadersFinished || (this._emittedHeadersFinished = true, this.headersFinished()), this.read(-t, this._parseIDAT.bind(this, t));
    };
    We.prototype._parseIDAT = function(t, e) {
      if (this._crc.write(e), this._colorType === Ve.COLORTYPE_PALETTE_COLOR && this._palette.length === 0)
        throw new Error("Expected palette not found");
      this.inflateData(e);
      let i = t - e.length;
      i > 0 ? this._handleIDAT(i) : this._handleChunkEnd();
    };
    We.prototype._handleIEND = function(t) {
      this.read(t, this._parseIEND.bind(this));
    };
    We.prototype._parseIEND = function(t) {
      this._crc.write(t), this._hasIEND = true, this._handleChunkEnd(), this.finished && this.finished();
    };
  });
  var fl = w((Xp) => {
    var Qp = nl(), R1 = [function() {
    }, function(t, e, i, r) {
      if (r === e.length)
        throw new Error("Ran out of data");
      let n = e[r];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = 255;
    }, function(t, e, i, r) {
      if (r + 1 >= e.length)
        throw new Error("Ran out of data");
      let n = e[r];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = e[r + 1];
    }, function(t, e, i, r) {
      if (r + 2 >= e.length)
        throw new Error("Ran out of data");
      t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = 255;
    }, function(t, e, i, r) {
      if (r + 3 >= e.length)
        throw new Error("Ran out of data");
      t[i] = e[r], t[i + 1] = e[r + 1], t[i + 2] = e[r + 2], t[i + 3] = e[r + 3];
    }], P1 = [function() {
    }, function(t, e, i, r) {
      let n = e[0];
      t[i] = n, t[i + 1] = n, t[i + 2] = n, t[i + 3] = r;
    }, function(t, e, i) {
      let r = e[0];
      t[i] = r, t[i + 1] = r, t[i + 2] = r, t[i + 3] = e[1];
    }, function(t, e, i, r) {
      t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = r;
    }, function(t, e, i) {
      t[i] = e[0], t[i + 1] = e[1], t[i + 2] = e[2], t[i + 3] = e[3];
    }];
    function M1(t, e) {
      let i = [], r = 0;
      function n() {
        if (r === t.length)
          throw new Error("Ran out of data");
        let s = t[r];
        r++;
        let o, a, l, c, u, f, d, g;
        switch (e) {
          default:
            throw new Error("unrecognised depth");
          case 16:
            d = t[r], r++, i.push((s << 8) + d);
            break;
          case 4:
            d = s & 15, g = s >> 4, i.push(g, d);
            break;
          case 2:
            u = s & 3, f = s >> 2 & 3, d = s >> 4 & 3, g = s >> 6 & 3, i.push(g, d, f, u);
            break;
          case 1:
            o = s & 1, a = s >> 1 & 1, l = s >> 2 & 1, c = s >> 3 & 1, u = s >> 4 & 1, f = s >> 5 & 1, d = s >> 6 & 1, g = s >> 7 & 1, i.push(g, d, f, u, c, l, a, o);
            break;
        }
      }
      return { get: function(s) {
        for (;i.length < s; )
          n();
        let o = i.slice(0, s);
        return i = i.slice(s), o;
      }, resetAfterLine: function() {
        i.length = 0;
      }, end: function() {
        if (r !== t.length)
          throw new Error("extra data found");
      } };
    }
    function q1(t, e, i, r, n, s) {
      let { width: o, height: a, index: l } = t;
      for (let c = 0;c < a; c++)
        for (let u = 0;u < o; u++) {
          let f = i(u, c, l);
          R1[r](e, n, f, s), s += r;
        }
      return s;
    }
    function F1(t, e, i, r, n, s) {
      let { width: o, height: a, index: l } = t;
      for (let c = 0;c < a; c++) {
        for (let u = 0;u < o; u++) {
          let f = n.get(r), d = i(u, c, l);
          P1[r](e, f, d, s);
        }
        n.resetAfterLine();
      }
    }
    Xp.dataToBitMap = function(t, e) {
      let { width: i, height: r, depth: n, bpp: s, interlace: o } = e, a;
      n !== 8 && (a = M1(t, n));
      let l;
      n <= 8 ? l = Buffer.alloc(i * r * 4) : l = new Uint16Array(i * r * 4);
      let c = Math.pow(2, n) - 1, u = 0, f, d;
      if (o)
        f = Qp.getImagePasses(i, r), d = Qp.getInterlaceIterator(i, r);
      else {
        let g = 0;
        d = function() {
          let m = g;
          return g += 4, m;
        }, f = [{ width: i, height: r }];
      }
      for (let g = 0;g < f.length; g++)
        n === 8 ? u = q1(f[g], l, d, s, t, u) : F1(f[g], l, d, s, a, c);
      if (n === 8) {
        if (u !== t.length)
          throw new Error("extra data found");
      } else
        a.end();
      return l;
    };
  });
  var hl = w((b2, ed) => {
    function D1(t, e, i, r, n) {
      let s = 0;
      for (let o = 0;o < r; o++)
        for (let a = 0;a < i; a++) {
          let l = n[t[s]];
          if (!l)
            throw new Error("index " + t[s] + " not in palette");
          for (let c = 0;c < 4; c++)
            e[s + c] = l[c];
          s += 4;
        }
    }
    function j1(t, e, i, r, n) {
      let s = 0;
      for (let o = 0;o < r; o++)
        for (let a = 0;a < i; a++) {
          let l = false;
          if (n.length === 1 ? n[0] === t[s] && (l = true) : n[0] === t[s] && n[1] === t[s + 1] && n[2] === t[s + 2] && (l = true), l)
            for (let c = 0;c < 4; c++)
              e[s + c] = 0;
          s += 4;
        }
    }
    function U1(t, e, i, r, n) {
      let s = 255, o = Math.pow(2, n) - 1, a = 0;
      for (let l = 0;l < r; l++)
        for (let c = 0;c < i; c++) {
          for (let u = 0;u < 4; u++)
            e[a + u] = Math.floor(t[a + u] * s / o + 0.5);
          a += 4;
        }
    }
    ed.exports = function(t, e, i = false) {
      let { depth: r, width: n, height: s, colorType: o, transColor: a, palette: l } = e, c = t;
      return o === 3 ? D1(t, c, n, s, l) : (a && j1(t, c, n, s, a), r !== 8 && !i && (r === 16 && (c = Buffer.alloc(n * s * 4)), U1(t, c, n, s, r))), c;
    };
  });
  var rd = w((_2, id) => {
    var $1 = __require("util"), pl = __require("zlib"), td = il(), V1 = zp(), H1 = ul(), G1 = fl(), Y1 = hl(), zt = id.exports = function(t) {
      td.call(this), this._parser = new H1(t, { read: this.read.bind(this), error: this._handleError.bind(this), metadata: this._handleMetaData.bind(this), gamma: this.emit.bind(this, "gamma"), palette: this._handlePalette.bind(this), transColor: this._handleTransColor.bind(this), finished: this._finished.bind(this), inflateData: this._inflateData.bind(this), simpleTransparency: this._simpleTransparency.bind(this), headersFinished: this._headersFinished.bind(this) }), this._options = t, this.writable = true, this._parser.start();
    };
    $1.inherits(zt, td);
    zt.prototype._handleError = function(t) {
      this.emit("error", t), this.writable = false, this.destroy(), this._inflate && this._inflate.destroy && this._inflate.destroy(), this._filter && (this._filter.destroy(), this._filter.on("error", function() {
      })), this.errord = true;
    };
    zt.prototype._inflateData = function(t) {
      if (!this._inflate)
        if (this._bitmapInfo.interlace)
          this._inflate = pl.createInflate(), this._inflate.on("error", this.emit.bind(this, "error")), this._filter.on("complete", this._complete.bind(this)), this._inflate.pipe(this._filter);
        else {
          let i = ((this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1) * this._bitmapInfo.height, r = Math.max(i, pl.Z_MIN_CHUNK);
          this._inflate = pl.createInflate({ chunkSize: r });
          let n = i, s = this.emit.bind(this, "error");
          this._inflate.on("error", function(a) {
            n && s(a);
          }), this._filter.on("complete", this._complete.bind(this));
          let o = this._filter.write.bind(this._filter);
          this._inflate.on("data", function(a) {
            n && (a.length > n && (a = a.slice(0, n)), n -= a.length, o(a));
          }), this._inflate.on("end", this._filter.end.bind(this._filter));
        }
      this._inflate.write(t);
    };
    zt.prototype._handleMetaData = function(t) {
      this._metaData = t, this._bitmapInfo = Object.create(t), this._filter = new V1(this._bitmapInfo);
    };
    zt.prototype._handleTransColor = function(t) {
      this._bitmapInfo.transColor = t;
    };
    zt.prototype._handlePalette = function(t) {
      this._bitmapInfo.palette = t;
    };
    zt.prototype._simpleTransparency = function() {
      this._metaData.alpha = true;
    };
    zt.prototype._headersFinished = function() {
      this.emit("metadata", this._metaData);
    };
    zt.prototype._finished = function() {
      this.errord || (this._inflate ? this._inflate.end() : this.emit("error", "No Inflate block"));
    };
    zt.prototype._complete = function(t) {
      if (this.errord)
        return;
      let e;
      try {
        let i = G1.dataToBitMap(t, this._bitmapInfo);
        e = Y1(i, this._bitmapInfo, this._options.skipRescale), i = null;
      } catch (i) {
        this._handleError(i);
        return;
      }
      this.emit("parsed", e);
    };
  });
  var sd = w((w2, nd) => {
    var It = Tr();
    nd.exports = function(t, e, i, r) {
      let n = [It.COLORTYPE_COLOR_ALPHA, It.COLORTYPE_ALPHA].indexOf(r.colorType) !== -1;
      if (r.colorType === r.inputColorType) {
        let m = function() {
          let v = new ArrayBuffer(2);
          return new DataView(v).setInt16(0, 256, true), new Int16Array(v)[0] !== 256;
        }();
        if (r.bitDepth === 8 || r.bitDepth === 16 && m)
          return t;
      }
      let s = r.bitDepth !== 16 ? t : new Uint16Array(t.buffer), o = 255, a = It.COLORTYPE_TO_BPP_MAP[r.inputColorType];
      a === 4 && !r.inputHasAlpha && (a = 3);
      let l = It.COLORTYPE_TO_BPP_MAP[r.colorType];
      r.bitDepth === 16 && (o = 65535, l *= 2);
      let c = Buffer.alloc(e * i * l), u = 0, f = 0, d = r.bgColor || {};
      d.red === undefined && (d.red = o), d.green === undefined && (d.green = o), d.blue === undefined && (d.blue = o);
      function g() {
        let m, v, b, _ = o;
        switch (r.inputColorType) {
          case It.COLORTYPE_COLOR_ALPHA:
            _ = s[u + 3], m = s[u], v = s[u + 1], b = s[u + 2];
            break;
          case It.COLORTYPE_COLOR:
            m = s[u], v = s[u + 1], b = s[u + 2];
            break;
          case It.COLORTYPE_ALPHA:
            _ = s[u + 1], m = s[u], v = m, b = m;
            break;
          case It.COLORTYPE_GRAYSCALE:
            m = s[u], v = m, b = m;
            break;
          default:
            throw new Error("input color type:" + r.inputColorType + " is not supported at present");
        }
        return r.inputHasAlpha && (n || (_ /= o, m = Math.min(Math.max(Math.round((1 - _) * d.red + _ * m), 0), o), v = Math.min(Math.max(Math.round((1 - _) * d.green + _ * v), 0), o), b = Math.min(Math.max(Math.round((1 - _) * d.blue + _ * b), 0), o))), { red: m, green: v, blue: b, alpha: _ };
      }
      for (let m = 0;m < i; m++)
        for (let v = 0;v < e; v++) {
          let b = g(s, u);
          switch (r.colorType) {
            case It.COLORTYPE_COLOR_ALPHA:
            case It.COLORTYPE_COLOR:
              r.bitDepth === 8 ? (c[f] = b.red, c[f + 1] = b.green, c[f + 2] = b.blue, n && (c[f + 3] = b.alpha)) : (c.writeUInt16BE(b.red, f), c.writeUInt16BE(b.green, f + 2), c.writeUInt16BE(b.blue, f + 4), n && c.writeUInt16BE(b.alpha, f + 6));
              break;
            case It.COLORTYPE_ALPHA:
            case It.COLORTYPE_GRAYSCALE: {
              let _ = (b.red + b.green + b.blue) / 3;
              r.bitDepth === 8 ? (c[f] = _, n && (c[f + 1] = b.alpha)) : (c.writeUInt16BE(_, f), n && c.writeUInt16BE(b.alpha, f + 2));
              break;
            }
            default:
              throw new Error("unrecognised color Type " + r.colorType);
          }
          u += a, f += l;
        }
      return c;
    };
  });
  var ld = w((x2, ad) => {
    var od = sl();
    function W1(t, e, i, r, n) {
      for (let s = 0;s < i; s++)
        r[n + s] = t[e + s];
    }
    function z1(t, e, i) {
      let r = 0, n = e + i;
      for (let s = e;s < n; s++)
        r += Math.abs(t[s]);
      return r;
    }
    function K1(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let a = o >= s ? t[e + o - s] : 0, l = t[e + o] - a;
        r[n + o] = l;
      }
    }
    function J1(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, a = t[e + s] - o;
        n += Math.abs(a);
      }
      return n;
    }
    function Z1(t, e, i, r, n) {
      for (let s = 0;s < i; s++) {
        let o = e > 0 ? t[e + s - i] : 0, a = t[e + s] - o;
        r[n + s] = a;
      }
    }
    function Q1(t, e, i) {
      let r = 0, n = e + i;
      for (let s = e;s < n; s++) {
        let o = e > 0 ? t[s - i] : 0, a = t[s] - o;
        r += Math.abs(a);
      }
      return r;
    }
    function X1(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let a = o >= s ? t[e + o - s] : 0, l = e > 0 ? t[e + o - i] : 0, c = t[e + o] - (a + l >> 1);
        r[n + o] = c;
      }
    }
    function ex(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, a = e > 0 ? t[e + s - i] : 0, l = t[e + s] - (o + a >> 1);
        n += Math.abs(l);
      }
      return n;
    }
    function tx(t, e, i, r, n, s) {
      for (let o = 0;o < i; o++) {
        let a = o >= s ? t[e + o - s] : 0, l = e > 0 ? t[e + o - i] : 0, c = e > 0 && o >= s ? t[e + o - (i + s)] : 0, u = t[e + o] - od(a, l, c);
        r[n + o] = u;
      }
    }
    function ix(t, e, i, r) {
      let n = 0;
      for (let s = 0;s < i; s++) {
        let o = s >= r ? t[e + s - r] : 0, a = e > 0 ? t[e + s - i] : 0, l = e > 0 && s >= r ? t[e + s - (i + r)] : 0, c = t[e + s] - od(o, a, l);
        n += Math.abs(c);
      }
      return n;
    }
    var rx = { 0: W1, 1: K1, 2: Z1, 3: X1, 4: tx }, nx = { 0: z1, 1: J1, 2: Q1, 3: ex, 4: ix };
    ad.exports = function(t, e, i, r, n) {
      let s;
      if (!("filterType" in r) || r.filterType === -1)
        s = [0, 1, 2, 3, 4];
      else if (typeof r.filterType == "number")
        s = [r.filterType];
      else
        throw new Error("unrecognised filter types");
      r.bitDepth === 16 && (n *= 2);
      let o = e * n, a = 0, l = 0, c = Buffer.alloc((o + 1) * i), u = s[0];
      for (let f = 0;f < i; f++) {
        if (s.length > 1) {
          let d = 1 / 0;
          for (let g = 0;g < s.length; g++) {
            let m = nx[s[g]](t, l, o, n);
            m < d && (u = s[g], d = m);
          }
        }
        c[a] = u, a++, rx[u](t, l, o, c, a, n), a += o, l += o;
      }
      return c;
    };
  });
  var dl = w((S2, cd) => {
    var it = Tr(), sx = cl(), ox = sd(), ax = ld(), lx = __require("zlib"), _i = cd.exports = function(t) {
      if (this._options = t, t.deflateChunkSize = t.deflateChunkSize || 32 * 1024, t.deflateLevel = t.deflateLevel != null ? t.deflateLevel : 9, t.deflateStrategy = t.deflateStrategy != null ? t.deflateStrategy : 3, t.inputHasAlpha = t.inputHasAlpha != null ? t.inputHasAlpha : true, t.deflateFactory = t.deflateFactory || lx.createDeflate, t.bitDepth = t.bitDepth || 8, t.colorType = typeof t.colorType == "number" ? t.colorType : it.COLORTYPE_COLOR_ALPHA, t.inputColorType = typeof t.inputColorType == "number" ? t.inputColorType : it.COLORTYPE_COLOR_ALPHA, [it.COLORTYPE_GRAYSCALE, it.COLORTYPE_COLOR, it.COLORTYPE_COLOR_ALPHA, it.COLORTYPE_ALPHA].indexOf(t.colorType) === -1)
        throw new Error("option color type:" + t.colorType + " is not supported at present");
      if ([it.COLORTYPE_GRAYSCALE, it.COLORTYPE_COLOR, it.COLORTYPE_COLOR_ALPHA, it.COLORTYPE_ALPHA].indexOf(t.inputColorType) === -1)
        throw new Error("option input color type:" + t.inputColorType + " is not supported at present");
      if (t.bitDepth !== 8 && t.bitDepth !== 16)
        throw new Error("option bit depth:" + t.bitDepth + " is not supported at present");
    };
    _i.prototype.getDeflateOptions = function() {
      return { chunkSize: this._options.deflateChunkSize, level: this._options.deflateLevel, strategy: this._options.deflateStrategy };
    };
    _i.prototype.createDeflate = function() {
      return this._options.deflateFactory(this.getDeflateOptions());
    };
    _i.prototype.filterData = function(t, e, i) {
      let r = ox(t, e, i, this._options), n = it.COLORTYPE_TO_BPP_MAP[this._options.colorType];
      return ax(r, e, i, this._options, n);
    };
    _i.prototype._packChunk = function(t, e) {
      let i = e ? e.length : 0, r = Buffer.alloc(i + 12);
      return r.writeUInt32BE(i, 0), r.writeUInt32BE(t, 4), e && e.copy(r, 8), r.writeInt32BE(sx.crc32(r.slice(4, r.length - 4)), r.length - 4), r;
    };
    _i.prototype.packGAMA = function(t) {
      let e = Buffer.alloc(4);
      return e.writeUInt32BE(Math.floor(t * it.GAMMA_DIVISION), 0), this._packChunk(it.TYPE_gAMA, e);
    };
    _i.prototype.packIHDR = function(t, e) {
      let i = Buffer.alloc(13);
      return i.writeUInt32BE(t, 0), i.writeUInt32BE(e, 4), i[8] = this._options.bitDepth, i[9] = this._options.colorType, i[10] = 0, i[11] = 0, i[12] = 0, this._packChunk(it.TYPE_IHDR, i);
    };
    _i.prototype.packIDAT = function(t) {
      return this._packChunk(it.TYPE_IDAT, t);
    };
    _i.prototype.packIEND = function() {
      return this._packChunk(it.TYPE_IEND, null);
    };
  });
  var pd = w((E2, hd) => {
    var cx = __require("util"), ud = __require("stream"), ux = Tr(), fx = dl(), fd = hd.exports = function(t) {
      ud.call(this);
      let e = t || {};
      this._packer = new fx(e), this._deflate = this._packer.createDeflate(), this.readable = true;
    };
    cx.inherits(fd, ud);
    fd.prototype.pack = function(t, e, i, r) {
      this.emit("data", Buffer.from(ux.PNG_SIGNATURE)), this.emit("data", this._packer.packIHDR(e, i)), r && this.emit("data", this._packer.packGAMA(r));
      let n = this._packer.filterData(t, e, i);
      this._deflate.on("error", this.emit.bind(this, "error")), this._deflate.on("data", function(s) {
        this.emit("data", this._packer.packIDAT(s));
      }.bind(this)), this._deflate.on("end", function() {
        this.emit("data", this._packer.packIEND()), this.emit("end");
      }.bind(this)), this._deflate.end(n);
    };
  });
  var bd = w((cn, yd) => {
    var dd = __require("assert").ok, Ar = __require("zlib"), hx = __require("util"), md = __require("buffer").kMaxLength;
    function Wi(t) {
      if (!(this instanceof Wi))
        return new Wi(t);
      t && t.chunkSize < Ar.Z_MIN_CHUNK && (t.chunkSize = Ar.Z_MIN_CHUNK), Ar.Inflate.call(this, t), this._offset = this._offset === undefined ? this._outOffset : this._offset, this._buffer = this._buffer || this._outBuffer, t && t.maxLength != null && (this._maxLength = t.maxLength);
    }
    function px(t) {
      return new Wi(t);
    }
    function gd(t, e) {
      e && process.nextTick(e), t._handle && (t._handle.close(), t._handle = null);
    }
    Wi.prototype._processChunk = function(t, e, i) {
      if (typeof i == "function")
        return Ar.Inflate._processChunk.call(this, t, e, i);
      let r = this, n = t && t.length, s = this._chunkSize - this._offset, o = this._maxLength, a = 0, l = [], c = 0, u;
      this.on("error", function(m) {
        u = m;
      });
      function f(m, v) {
        if (r._hadError)
          return;
        let b = s - v;
        if (dd(b >= 0, "have should not go down"), b > 0) {
          let _ = r._buffer.slice(r._offset, r._offset + b);
          if (r._offset += b, _.length > o && (_ = _.slice(0, o)), l.push(_), c += _.length, o -= _.length, o === 0)
            return false;
        }
        return (v === 0 || r._offset >= r._chunkSize) && (s = r._chunkSize, r._offset = 0, r._buffer = Buffer.allocUnsafe(r._chunkSize)), v === 0 ? (a += n - m, n = m, true) : false;
      }
      dd(this._handle, "zlib binding closed");
      let d;
      do
        d = this._handle.writeSync(e, t, a, n, this._buffer, this._offset, s), d = d || this._writeState;
      while (!this._hadError && f(d[0], d[1]));
      if (this._hadError)
        throw u;
      if (c >= md)
        throw gd(this), new RangeError("Cannot create final Buffer. It would be larger than 0x" + md.toString(16) + " bytes");
      let g = Buffer.concat(l, c);
      return gd(this), g;
    };
    hx.inherits(Wi, Ar.Inflate);
    function dx(t, e) {
      if (typeof e == "string" && (e = Buffer.from(e)), !(e instanceof Buffer))
        throw new TypeError("Not a string or buffer");
      let i = t._finishFlushFlag;
      return i == null && (i = Ar.Z_FINISH), t._processChunk(e, i);
    }
    function vd(t, e) {
      return dx(new Wi(e), t);
    }
    yd.exports = cn = vd;
    cn.Inflate = Wi;
    cn.createInflate = px;
    cn.inflateSync = vd;
  });
  var ml = w((k2, wd) => {
    var _d = wd.exports = function(t) {
      this._buffer = t, this._reads = [];
    };
    _d.prototype.read = function(t, e) {
      this._reads.push({ length: Math.abs(t), allowLess: t < 0, func: e });
    };
    _d.prototype.process = function() {
      for (;this._reads.length > 0 && this._buffer.length; ) {
        let t = this._reads[0];
        if (this._buffer.length && (this._buffer.length >= t.length || t.allowLess)) {
          this._reads.shift();
          let e = this._buffer;
          this._buffer = e.slice(t.length), t.func.call(this, e.slice(0, t.length));
        } else
          break;
      }
      if (this._reads.length > 0)
        throw new Error("There are some read requests waitng on finished stream");
      if (this._buffer.length > 0)
        throw new Error("unrecognised content at end of stream");
    };
  });
  var Sd = w((xd) => {
    var mx = ml(), gx = ol();
    xd.process = function(t, e) {
      let i = [], r = new mx(t);
      return new gx(e, { read: r.read.bind(r), write: function(s) {
        i.push(s);
      }, complete: function() {
      } }).start(), r.process(), Buffer.concat(i);
    };
  });
  var Cd = w((C2, Od) => {
    var Ed = true, kd = __require("zlib"), vx = bd();
    kd.deflateSync || (Ed = false);
    var yx = ml(), bx = Sd(), _x = ul(), wx = fl(), xx = hl();
    Od.exports = function(t, e) {
      if (!Ed)
        throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i;
      function r(k) {
        i = k;
      }
      let n;
      function s(k) {
        n = k;
      }
      function o(k) {
        n.transColor = k;
      }
      function a(k) {
        n.palette = k;
      }
      function l() {
        n.alpha = true;
      }
      let c;
      function u(k) {
        c = k;
      }
      let f = [];
      function d(k) {
        f.push(k);
      }
      let g = new yx(t);
      if (new _x(e, { read: g.read.bind(g), error: r, metadata: s, gamma: u, palette: a, transColor: o, inflateData: d, simpleTransparency: l }).start(), g.process(), i)
        throw i;
      let v = Buffer.concat(f);
      f.length = 0;
      let b;
      if (n.interlace)
        b = kd.inflateSync(v);
      else {
        let E = ((n.width * n.bpp * n.depth + 7 >> 3) + 1) * n.height;
        b = vx(v, { chunkSize: E, maxLength: E });
      }
      if (v = null, !b || !b.length)
        throw new Error("bad png - invalid inflate data response");
      let _ = bx.process(b, n);
      v = null;
      let S = wx.dataToBitMap(_, n);
      _ = null;
      let O = xx(S, n, e.skipRescale);
      return n.data = O, n.gamma = c || 0, n;
    };
  });
  var Nd = w((T2, Id) => {
    var Td = true, Ad = __require("zlib");
    Ad.deflateSync || (Td = false);
    var Sx = Tr(), Ex = dl();
    Id.exports = function(t, e) {
      if (!Td)
        throw new Error("To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0");
      let i = e || {}, r = new Ex(i), n = [];
      n.push(Buffer.from(Sx.PNG_SIGNATURE)), n.push(r.packIHDR(t.width, t.height)), t.gamma && n.push(r.packGAMA(t.gamma));
      let s = r.filterData(t.data, t.width, t.height), o = Ad.deflateSync(s, r.getDeflateOptions());
      if (s = null, !o || !o.length)
        throw new Error("bad png - invalid compressed data response");
      return n.push(r.packIDAT(o)), n.push(r.packIEND()), Buffer.concat(n);
    };
  });
  var Ld = w((gl) => {
    var kx = Cd(), Ox = Nd();
    gl.read = function(t, e) {
      return kx(t, e || {});
    };
    gl.write = function(t, e) {
      return Ox(t, e);
    };
  });
  var Pd = w((Rd) => {
    var Cx = __require("util"), Bd = __require("stream"), Tx = rd(), Ax = pd(), Ix = Ld(), at = Rd.PNG = function(t) {
      Bd.call(this), t = t || {}, this.width = t.width | 0, this.height = t.height | 0, this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null, t.fill && this.data && this.data.fill(0), this.gamma = 0, this.readable = this.writable = true, this._parser = new Tx(t), this._parser.on("error", this.emit.bind(this, "error")), this._parser.on("close", this._handleClose.bind(this)), this._parser.on("metadata", this._metadata.bind(this)), this._parser.on("gamma", this._gamma.bind(this)), this._parser.on("parsed", function(e) {
        this.data = e, this.emit("parsed", e);
      }.bind(this)), this._packer = new Ax(t), this._packer.on("data", this.emit.bind(this, "data")), this._packer.on("end", this.emit.bind(this, "end")), this._parser.on("close", this._handleClose.bind(this)), this._packer.on("error", this.emit.bind(this, "error"));
    };
    Cx.inherits(at, Bd);
    at.sync = Ix;
    at.prototype.pack = function() {
      return !this.data || !this.data.length ? (this.emit("error", "No data provided"), this) : (process.nextTick(function() {
        this._packer.pack(this.data, this.width, this.height, this.gamma);
      }.bind(this)), this);
    };
    at.prototype.parse = function(t, e) {
      if (e) {
        let i, r;
        i = function(n) {
          this.removeListener("error", r), this.data = n, e(null, this);
        }.bind(this), r = function(n) {
          this.removeListener("parsed", i), e(n, null);
        }.bind(this), this.once("parsed", i), this.once("error", r);
      }
      return this.end(t), this;
    };
    at.prototype.write = function(t) {
      return this._parser.write(t), true;
    };
    at.prototype.end = function(t) {
      this._parser.end(t);
    };
    at.prototype._metadata = function(t) {
      this.width = t.width, this.height = t.height, this.emit("metadata", t);
    };
    at.prototype._gamma = function(t) {
      this.gamma = t;
    };
    at.prototype._handleClose = function() {
      !this._parser.writable && !this._packer.readable && this.emit("close");
    };
    at.bitblt = function(t, e, i, r, n, s, o, a) {
      if (i |= 0, r |= 0, n |= 0, s |= 0, o |= 0, a |= 0, i > t.width || r > t.height || i + n > t.width || r + s > t.height)
        throw new Error("bitblt reading outside image");
      if (o > e.width || a > e.height || o + n > e.width || a + s > e.height)
        throw new Error("bitblt writing outside image");
      for (let l = 0;l < s; l++)
        t.data.copy(e.data, (a + l) * e.width + o << 2, (r + l) * t.width + i << 2, (r + l) * t.width + i + n << 2);
    };
    at.prototype.bitblt = function(t, e, i, r, n, s, o) {
      return at.bitblt(this, t, e, i, r, n, s, o), this;
    };
    at.adjustGamma = function(t) {
      if (t.gamma) {
        for (let e = 0;e < t.height; e++)
          for (let i = 0;i < t.width; i++) {
            let r = t.width * e + i << 2;
            for (let n = 0;n < 3; n++) {
              let s = t.data[r + n] / 255;
              s = Math.pow(s, 1 / 2.2 / t.gamma), t.data[r + n] = Math.round(s * 255);
            }
          }
        t.gamma = 0;
      }
    };
    at.prototype.adjustGamma = function() {
      at.adjustGamma(this);
    };
  });
  var un = w((yl) => {
    var Fs = class extends Error {
      constructor(e, i, r) {
        super(r), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name, this.code = i, this.exitCode = e, this.nestedError = undefined;
      }
    }, vl = class extends Fs {
      constructor(e) {
        super(1, "commander.invalidArgument", e), Error.captureStackTrace(this, this.constructor), this.name = this.constructor.name;
      }
    };
    yl.CommanderError = Fs;
    yl.InvalidArgumentError = vl;
  });
  var Ds = w((_l) => {
    var { InvalidArgumentError: Nx } = un(), bl = class {
      constructor(e, i) {
        switch (this.description = i || "", this.variadic = false, this.parseArg = undefined, this.defaultValue = undefined, this.defaultValueDescription = undefined, this.argChoices = undefined, e[0]) {
          case "<":
            this.required = true, this._name = e.slice(1, -1);
            break;
          case "[":
            this.required = false, this._name = e.slice(1, -1);
            break;
          default:
            this.required = true, this._name = e;
            break;
        }
        this._name.length > 3 && this._name.slice(-3) === "..." && (this.variadic = true, this._name = this._name.slice(0, -3));
      }
      name() {
        return this._name;
      }
      _concatValue(e, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
      }
      default(e, i) {
        return this.defaultValue = e, this.defaultValueDescription = i, this;
      }
      argParser(e) {
        return this.parseArg = e, this;
      }
      choices(e) {
        return this.argChoices = e, this.parseArg = (i, r) => {
          if (!e.includes(i))
            throw new Nx(`Allowed choices are ${e.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r) : i;
        }, this;
      }
      argRequired() {
        return this.required = true, this;
      }
      argOptional() {
        return this.required = false, this;
      }
    };
    function Lx(t) {
      let e = t.name() + (t.variadic === true ? "..." : "");
      return t.required ? "<" + e + ">" : "[" + e + "]";
    }
    _l.Argument = bl;
    _l.humanReadableArgName = Lx;
  });
  var xl = w((Md) => {
    var { humanReadableArgName: Bx } = Ds(), wl = class {
      constructor() {
        this.helpWidth = undefined, this.sortSubcommands = false, this.sortOptions = false;
      }
      visibleCommands(e) {
        let i = e.commands.filter((r) => !r._hidden);
        if (e._hasImplicitHelpCommand()) {
          let [, r, n] = e._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/), s = e.createCommand(r).helpOption(false);
          s.description(e._helpCommandDescription), n && s.arguments(n), i.push(s);
        }
        return this.sortSubcommands && i.sort((r, n) => r.name().localeCompare(n.name())), i;
      }
      visibleOptions(e) {
        let i = e.options.filter((s) => !s.hidden), r = e._hasHelpOption && e._helpShortFlag && !e._findOption(e._helpShortFlag), n = e._hasHelpOption && !e._findOption(e._helpLongFlag);
        if (r || n) {
          let s;
          r ? n ? s = e.createOption(e._helpFlags, e._helpDescription) : s = e.createOption(e._helpShortFlag, e._helpDescription) : s = e.createOption(e._helpLongFlag, e._helpDescription), i.push(s);
        }
        if (this.sortOptions) {
          let s = (o) => o.short ? o.short.replace(/^-/, "") : o.long.replace(/^--/, "");
          i.sort((o, a) => s(o).localeCompare(s(a)));
        }
        return i;
      }
      visibleArguments(e) {
        return e._argsDescription && e._args.forEach((i) => {
          i.description = i.description || e._argsDescription[i.name()] || "";
        }), e._args.find((i) => i.description) ? e._args : [];
      }
      subcommandTerm(e) {
        let i = e._args.map((r) => Bx(r)).join(" ");
        return e._name + (e._aliases[0] ? "|" + e._aliases[0] : "") + (e.options.length ? " [options]" : "") + (i ? " " + i : "");
      }
      optionTerm(e) {
        return e.flags;
      }
      argumentTerm(e) {
        return e.name();
      }
      longestSubcommandTermLength(e, i) {
        return i.visibleCommands(e).reduce((r, n) => Math.max(r, i.subcommandTerm(n).length), 0);
      }
      longestOptionTermLength(e, i) {
        return i.visibleOptions(e).reduce((r, n) => Math.max(r, i.optionTerm(n).length), 0);
      }
      longestArgumentTermLength(e, i) {
        return i.visibleArguments(e).reduce((r, n) => Math.max(r, i.argumentTerm(n).length), 0);
      }
      commandUsage(e) {
        let i = e._name;
        e._aliases[0] && (i = i + "|" + e._aliases[0]);
        let r = "";
        for (let n = e.parent;n; n = n.parent)
          r = n.name() + " " + r;
        return r + i + " " + e.usage();
      }
      commandDescription(e) {
        return e.description();
      }
      subcommandDescription(e) {
        return e.description();
      }
      optionDescription(e) {
        let i = [];
        return e.argChoices && !e.negate && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== undefined && !e.negate && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), e.envVar !== undefined && i.push(`env: ${e.envVar}`), i.length > 0 ? `${e.description} (${i.join(", ")})` : e.description;
      }
      argumentDescription(e) {
        let i = [];
        if (e.argChoices && i.push(`choices: ${e.argChoices.map((r) => JSON.stringify(r)).join(", ")}`), e.defaultValue !== undefined && i.push(`default: ${e.defaultValueDescription || JSON.stringify(e.defaultValue)}`), i.length > 0) {
          let r = `(${i.join(", ")})`;
          return e.description ? `${e.description} ${r}` : r;
        }
        return e.description;
      }
      formatHelp(e, i) {
        let r = i.padWidth(e, i), n = i.helpWidth || 80, s = 2, o = 2;
        function a(m, v) {
          if (v) {
            let b = `${m.padEnd(r + o)}${v}`;
            return i.wrap(b, n - s, r + o);
          }
          return m;
        }
        function l(m) {
          return m.join(`
`).replace(/^/gm, " ".repeat(s));
        }
        let c = [`Usage: ${i.commandUsage(e)}`, ""], u = i.commandDescription(e);
        u.length > 0 && (c = c.concat([u, ""]));
        let f = i.visibleArguments(e).map((m) => a(i.argumentTerm(m), i.argumentDescription(m)));
        f.length > 0 && (c = c.concat(["Arguments:", l(f), ""]));
        let d = i.visibleOptions(e).map((m) => a(i.optionTerm(m), i.optionDescription(m)));
        d.length > 0 && (c = c.concat(["Options:", l(d), ""]));
        let g = i.visibleCommands(e).map((m) => a(i.subcommandTerm(m), i.subcommandDescription(m)));
        return g.length > 0 && (c = c.concat(["Commands:", l(g), ""])), c.join(`
`);
      }
      padWidth(e, i) {
        return Math.max(i.longestOptionTermLength(e, i), i.longestSubcommandTermLength(e, i), i.longestArgumentTermLength(e, i));
      }
      wrap(e, i, r, n = 40) {
        if (e.match(/[\n]\s+/))
          return e;
        let s = i - r;
        if (s < n)
          return e;
        let o = e.substr(0, r), a = e.substr(r), l = " ".repeat(r), c = new RegExp(".{1," + (s - 1) + "}([\\s​]|$)|[^\\s​]+?([\\s​]|$)", "g"), u = a.match(c) || [];
        return o + u.map((f, d) => (f.slice(-1) === `
` && (f = f.slice(0, f.length - 1)), (d > 0 ? l : "") + f.trimRight())).join(`
`);
      }
    };
    Md.Help = wl;
  });
  var kl = w((El) => {
    var { InvalidArgumentError: Rx } = un(), Sl = class {
      constructor(e, i) {
        this.flags = e, this.description = i || "", this.required = e.includes("<"), this.optional = e.includes("["), this.variadic = /\w\.\.\.[>\]]$/.test(e), this.mandatory = false;
        let r = qd(e);
        this.short = r.shortFlag, this.long = r.longFlag, this.negate = false, this.long && (this.negate = this.long.startsWith("--no-")), this.defaultValue = undefined, this.defaultValueDescription = undefined, this.envVar = undefined, this.parseArg = undefined, this.hidden = false, this.argChoices = undefined;
      }
      default(e, i) {
        return this.defaultValue = e, this.defaultValueDescription = i, this;
      }
      env(e) {
        return this.envVar = e, this;
      }
      argParser(e) {
        return this.parseArg = e, this;
      }
      makeOptionMandatory(e = true) {
        return this.mandatory = !!e, this;
      }
      hideHelp(e = true) {
        return this.hidden = !!e, this;
      }
      _concatValue(e, i) {
        return i === this.defaultValue || !Array.isArray(i) ? [e] : i.concat(e);
      }
      choices(e) {
        return this.argChoices = e, this.parseArg = (i, r) => {
          if (!e.includes(i))
            throw new Rx(`Allowed choices are ${e.join(", ")}.`);
          return this.variadic ? this._concatValue(i, r) : i;
        }, this;
      }
      name() {
        return this.long ? this.long.replace(/^--/, "") : this.short.replace(/^-/, "");
      }
      attributeName() {
        return Px(this.name().replace(/^no-/, ""));
      }
      is(e) {
        return this.short === e || this.long === e;
      }
    };
    function Px(t) {
      return t.split("-").reduce((e, i) => e + i[0].toUpperCase() + i.slice(1));
    }
    function qd(t) {
      let e, i, r = t.split(/[ |,]+/);
      return r.length > 1 && !/^[[<]/.test(r[1]) && (e = r.shift()), i = r.shift(), !e && /^-[^-]$/.test(i) && (e = i, i = undefined), { shortFlag: e, longFlag: i };
    }
    El.Option = Sl;
    El.splitOptionFlags = qd;
  });
  var Dd = w((Fd) => {
    function Mx(t, e) {
      if (Math.abs(t.length - e.length) > 3)
        return Math.max(t.length, e.length);
      let i = [];
      for (let r = 0;r <= t.length; r++)
        i[r] = [r];
      for (let r = 0;r <= e.length; r++)
        i[0][r] = r;
      for (let r = 1;r <= e.length; r++)
        for (let n = 1;n <= t.length; n++) {
          let s = 1;
          t[n - 1] === e[r - 1] ? s = 0 : s = 1, i[n][r] = Math.min(i[n - 1][r] + 1, i[n][r - 1] + 1, i[n - 1][r - 1] + s), n > 1 && r > 1 && t[n - 1] === e[r - 2] && t[n - 2] === e[r - 1] && (i[n][r] = Math.min(i[n][r], i[n - 2][r - 2] + 1));
        }
      return i[t.length][e.length];
    }
    function qx(t, e) {
      if (!e || e.length === 0)
        return "";
      e = Array.from(new Set(e));
      let i = t.startsWith("--");
      i && (t = t.slice(2), e = e.map((o) => o.slice(2)));
      let r = [], n = 3, s = 0.4;
      return e.forEach((o) => {
        if (o.length <= 1)
          return;
        let a = Mx(t, o), l = Math.max(t.length, o.length);
        (l - a) / l > s && (a < n ? (n = a, r = [o]) : a === n && r.push(o));
      }), r.sort((o, a) => o.localeCompare(a)), i && (r = r.map((o) => `--${o}`)), r.length > 1 ? `
(Did you mean one of ${r.join(", ")}?)` : r.length === 1 ? `
(Did you mean ${r[0]}?)` : "";
    }
    Fd.suggestSimilar = qx;
  });
  var Hd = w((Vd) => {
    var Fx = __require("events").EventEmitter, Ol = __require("child_process"), zi = __require("path"), Cl = __require("fs"), { Argument: Dx, humanReadableArgName: jx } = Ds(), { CommanderError: Tl } = un(), { Help: Ux } = xl(), { Option: $x, splitOptionFlags: Vx } = kl(), { suggestSimilar: jd } = Dd(), Il = class t extends Fx {
      constructor(e) {
        super(), this.commands = [], this.options = [], this.parent = null, this._allowUnknownOption = false, this._allowExcessArguments = true, this._args = [], this.args = [], this.rawArgs = [], this.processedArgs = [], this._scriptPath = null, this._name = e || "", this._optionValues = {}, this._optionValueSources = {}, this._storeOptionsAsProperties = false, this._actionHandler = null, this._executableHandler = false, this._executableFile = null, this._defaultCommandName = null, this._exitCallback = null, this._aliases = [], this._combineFlagAndOptionalValue = true, this._description = "", this._argsDescription = undefined, this._enablePositionalOptions = false, this._passThroughOptions = false, this._lifeCycleHooks = {}, this._showHelpAfterError = false, this._showSuggestionAfterError = false, this._outputConfiguration = { writeOut: (i) => process.stdout.write(i), writeErr: (i) => process.stderr.write(i), getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined, getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined, outputError: (i, r) => r(i) }, this._hidden = false, this._hasHelpOption = true, this._helpFlags = "-h, --help", this._helpDescription = "display help for command", this._helpShortFlag = "-h", this._helpLongFlag = "--help", this._addImplicitHelpCommand = undefined, this._helpCommandName = "help", this._helpCommandnameAndArgs = "help [command]", this._helpCommandDescription = "display help for command", this._helpConfiguration = {};
      }
      copyInheritedSettings(e) {
        return this._outputConfiguration = e._outputConfiguration, this._hasHelpOption = e._hasHelpOption, this._helpFlags = e._helpFlags, this._helpDescription = e._helpDescription, this._helpShortFlag = e._helpShortFlag, this._helpLongFlag = e._helpLongFlag, this._helpCommandName = e._helpCommandName, this._helpCommandnameAndArgs = e._helpCommandnameAndArgs, this._helpCommandDescription = e._helpCommandDescription, this._helpConfiguration = e._helpConfiguration, this._exitCallback = e._exitCallback, this._storeOptionsAsProperties = e._storeOptionsAsProperties, this._combineFlagAndOptionalValue = e._combineFlagAndOptionalValue, this._allowExcessArguments = e._allowExcessArguments, this._enablePositionalOptions = e._enablePositionalOptions, this._showHelpAfterError = e._showHelpAfterError, this._showSuggestionAfterError = e._showSuggestionAfterError, this;
      }
      command(e, i, r) {
        let n = i, s = r;
        typeof n == "object" && n !== null && (s = n, n = null), s = s || {};
        let [, o, a] = e.match(/([^ ]+) *(.*)/), l = this.createCommand(o);
        return n && (l.description(n), l._executableHandler = true), s.isDefault && (this._defaultCommandName = l._name), l._hidden = !!(s.noHelp || s.hidden), l._executableFile = s.executableFile || null, a && l.arguments(a), this.commands.push(l), l.parent = this, l.copyInheritedSettings(this), n ? this : l;
      }
      createCommand(e) {
        return new t(e);
      }
      createHelp() {
        return Object.assign(new Ux, this.configureHelp());
      }
      configureHelp(e) {
        return e === undefined ? this._helpConfiguration : (this._helpConfiguration = e, this);
      }
      configureOutput(e) {
        return e === undefined ? this._outputConfiguration : (Object.assign(this._outputConfiguration, e), this);
      }
      showHelpAfterError(e = true) {
        return typeof e != "string" && (e = !!e), this._showHelpAfterError = e, this;
      }
      showSuggestionAfterError(e = true) {
        return this._showSuggestionAfterError = !!e, this;
      }
      addCommand(e, i) {
        if (!e._name)
          throw new Error("Command passed to .addCommand() must have a name");
        function r(n) {
          n.forEach((s) => {
            if (s._executableHandler && !s._executableFile)
              throw new Error(`Must specify executableFile for deeply nested executable: ${s.name()}`);
            r(s.commands);
          });
        }
        return r(e.commands), i = i || {}, i.isDefault && (this._defaultCommandName = e._name), (i.noHelp || i.hidden) && (e._hidden = true), this.commands.push(e), e.parent = this, this;
      }
      createArgument(e, i) {
        return new Dx(e, i);
      }
      argument(e, i, r, n) {
        let s = this.createArgument(e, i);
        return typeof r == "function" ? s.default(n).argParser(r) : s.default(r), this.addArgument(s), this;
      }
      arguments(e) {
        return e.split(/ +/).forEach((i) => {
          this.argument(i);
        }), this;
      }
      addArgument(e) {
        let i = this._args.slice(-1)[0];
        if (i && i.variadic)
          throw new Error(`only the last argument can be variadic '${i.name()}'`);
        if (e.required && e.defaultValue !== undefined && e.parseArg === undefined)
          throw new Error(`a default value for a required argument is never used: '${e.name()}'`);
        return this._args.push(e), this;
      }
      addHelpCommand(e, i) {
        return e === false ? this._addImplicitHelpCommand = false : (this._addImplicitHelpCommand = true, typeof e == "string" && (this._helpCommandName = e.split(" ")[0], this._helpCommandnameAndArgs = e), this._helpCommandDescription = i || this._helpCommandDescription), this;
      }
      _hasImplicitHelpCommand() {
        return this._addImplicitHelpCommand === undefined ? this.commands.length && !this._actionHandler && !this._findCommand("help") : this._addImplicitHelpCommand;
      }
      hook(e, i) {
        let r = ["preAction", "postAction"];
        if (!r.includes(e))
          throw new Error(`Unexpected value for event passed to hook : '${e}'.
Expecting one of '${r.join("', '")}'`);
        return this._lifeCycleHooks[e] ? this._lifeCycleHooks[e].push(i) : this._lifeCycleHooks[e] = [i], this;
      }
      exitOverride(e) {
        return e ? this._exitCallback = e : this._exitCallback = (i) => {
          if (i.code !== "commander.executeSubCommandAsync")
            throw i;
        }, this;
      }
      _exit(e, i, r) {
        this._exitCallback && this._exitCallback(new Tl(e, i, r)), process.exit(e);
      }
      action(e) {
        let i = (r) => {
          let n = this._args.length, s = r.slice(0, n);
          return this._storeOptionsAsProperties ? s[n] = this : s[n] = this.opts(), s.push(this), e.apply(this, s);
        };
        return this._actionHandler = i, this;
      }
      createOption(e, i) {
        return new $x(e, i);
      }
      addOption(e) {
        let i = e.name(), r = e.attributeName(), n = e.defaultValue;
        if (e.negate || e.optional || e.required || typeof n == "boolean") {
          if (e.negate) {
            let o = e.long.replace(/^--no-/, "--");
            n = this._findOption(o) ? this.getOptionValue(r) : true;
          }
          n !== undefined && this.setOptionValueWithSource(r, n, "default");
        }
        this.options.push(e);
        let s = (o, a, l) => {
          let c = this.getOptionValue(r);
          if (o !== null && e.parseArg)
            try {
              o = e.parseArg(o, c === undefined ? n : c);
            } catch (u) {
              if (u.code === "commander.invalidArgument") {
                let f = `${a} ${u.message}`;
                this._displayError(u.exitCode, u.code, f);
              }
              throw u;
            }
          else
            o !== null && e.variadic && (o = e._concatValue(o, c));
          typeof c == "boolean" || typeof c == "undefined" ? o == null ? this.setOptionValueWithSource(r, e.negate ? false : n || true, l) : this.setOptionValueWithSource(r, o, l) : o !== null && this.setOptionValueWithSource(r, e.negate ? false : o, l);
        };
        return this.on("option:" + i, (o) => {
          let a = `error: option '${e.flags}' argument '${o}' is invalid.`;
          s(o, a, "cli");
        }), e.envVar && this.on("optionEnv:" + i, (o) => {
          let a = `error: option '${e.flags}' value '${o}' from env '${e.envVar}' is invalid.`;
          s(o, a, "env");
        }), this;
      }
      _optionEx(e, i, r, n, s) {
        let o = this.createOption(i, r);
        if (o.makeOptionMandatory(!!e.mandatory), typeof n == "function")
          o.default(s).argParser(n);
        else if (n instanceof RegExp) {
          let a = n;
          n = (l, c) => {
            let u = a.exec(l);
            return u ? u[0] : c;
          }, o.default(s).argParser(n);
        } else
          o.default(n);
        return this.addOption(o);
      }
      option(e, i, r, n) {
        return this._optionEx({}, e, i, r, n);
      }
      requiredOption(e, i, r, n) {
        return this._optionEx({ mandatory: true }, e, i, r, n);
      }
      combineFlagAndOptionalValue(e = true) {
        return this._combineFlagAndOptionalValue = !!e, this;
      }
      allowUnknownOption(e = true) {
        return this._allowUnknownOption = !!e, this;
      }
      allowExcessArguments(e = true) {
        return this._allowExcessArguments = !!e, this;
      }
      enablePositionalOptions(e = true) {
        return this._enablePositionalOptions = !!e, this;
      }
      passThroughOptions(e = true) {
        if (this._passThroughOptions = !!e, this.parent && e && !this.parent._enablePositionalOptions)
          throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
        return this;
      }
      storeOptionsAsProperties(e = true) {
        if (this._storeOptionsAsProperties = !!e, this.options.length)
          throw new Error("call .storeOptionsAsProperties() before adding options");
        return this;
      }
      getOptionValue(e) {
        return this._storeOptionsAsProperties ? this[e] : this._optionValues[e];
      }
      setOptionValue(e, i) {
        return this._storeOptionsAsProperties ? this[e] = i : this._optionValues[e] = i, this;
      }
      setOptionValueWithSource(e, i, r) {
        return this.setOptionValue(e, i), this._optionValueSources[e] = r, this;
      }
      getOptionValueSource(e) {
        return this._optionValueSources[e];
      }
      _prepareUserArgs(e, i) {
        if (e !== undefined && !Array.isArray(e))
          throw new Error("first parameter to parse must be array or undefined");
        i = i || {}, e === undefined && (e = process.argv, process.versions && process.versions.electron && (i.from = "electron")), this.rawArgs = e.slice();
        let r;
        switch (i.from) {
          case undefined:
          case "node":
            this._scriptPath = e[1], r = e.slice(2);
            break;
          case "electron":
            process.defaultApp ? (this._scriptPath = e[1], r = e.slice(2)) : r = e.slice(1);
            break;
          case "user":
            r = e.slice(0);
            break;
          default:
            throw new Error(`unexpected parse option { from: '${i.from}' }`);
        }
        return !this._scriptPath && __require.main && (this._scriptPath = __require.main.filename), this._name = this._name || this._scriptPath && zi.basename(this._scriptPath, zi.extname(this._scriptPath)), r;
      }
      parse(e, i) {
        let r = this._prepareUserArgs(e, i);
        return this._parseCommand([], r), this;
      }
      async parseAsync(e, i) {
        let r = this._prepareUserArgs(e, i);
        return await this._parseCommand([], r), this;
      }
      _executeSubCommand(e, i) {
        i = i.slice();
        let r = false, n = [".js", ".ts", ".tsx", ".mjs", ".cjs"];
        this._checkForMissingMandatoryOptions();
        let s = this._scriptPath;
        !s && __require.main && (s = __require.main.filename);
        let o;
        try {
          let d = Cl.realpathSync(s);
          o = zi.dirname(d);
        } catch {
          o = ".";
        }
        let a = zi.basename(s, zi.extname(s)) + "-" + e._name;
        e._executableFile && (a = e._executableFile);
        let l = zi.join(o, a);
        Cl.existsSync(l) ? a = l : n.forEach((d) => {
          Cl.existsSync(`${l}${d}`) && (a = `${l}${d}`);
        }), r = n.includes(zi.extname(a));
        let c;
        process.platform !== "win32" ? r ? (i.unshift(a), i = $d(process.execArgv).concat(i), c = Ol.spawn(process.argv[0], i, { stdio: "inherit" })) : c = Ol.spawn(a, i, { stdio: "inherit" }) : (i.unshift(a), i = $d(process.execArgv).concat(i), c = Ol.spawn(process.execPath, i, { stdio: "inherit" })), ["SIGUSR1", "SIGUSR2", "SIGTERM", "SIGINT", "SIGHUP"].forEach((d) => {
          process.on(d, () => {
            c.killed === false && c.exitCode === null && c.kill(d);
          });
        });
        let f = this._exitCallback;
        f ? c.on("close", () => {
          f(new Tl(process.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
        }) : c.on("close", process.exit.bind(process)), c.on("error", (d) => {
          if (d.code === "ENOENT") {
            let g = `'${a}' does not exist
 - if '${e._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name`;
            throw new Error(g);
          } else if (d.code === "EACCES")
            throw new Error(`'${a}' not executable`);
          if (!f)
            process.exit(1);
          else {
            let g = new Tl(1, "commander.executeSubCommandAsync", "(error)");
            g.nestedError = d, f(g);
          }
        }), this.runningCommand = c;
      }
      _dispatchSubcommand(e, i, r) {
        let n = this._findCommand(e);
        if (n || this.help({ error: true }), n._executableHandler)
          this._executeSubCommand(n, i.concat(r));
        else
          return n._parseCommand(i, r);
      }
      _checkNumberOfArguments() {
        this._args.forEach((e, i) => {
          e.required && this.args[i] == null && this.missingArgument(e.name());
        }), !(this._args.length > 0 && this._args[this._args.length - 1].variadic) && this.args.length > this._args.length && this._excessArguments(this.args);
      }
      _processArguments() {
        let e = (r, n, s) => {
          let o = n;
          if (n !== null && r.parseArg)
            try {
              o = r.parseArg(n, s);
            } catch (a) {
              if (a.code === "commander.invalidArgument") {
                let l = `error: command-argument value '${n}' is invalid for argument '${r.name()}'. ${a.message}`;
                this._displayError(a.exitCode, a.code, l);
              }
              throw a;
            }
          return o;
        };
        this._checkNumberOfArguments();
        let i = [];
        this._args.forEach((r, n) => {
          let s = r.defaultValue;
          r.variadic ? n < this.args.length ? (s = this.args.slice(n), r.parseArg && (s = s.reduce((o, a) => e(r, a, o), r.defaultValue))) : s === undefined && (s = []) : n < this.args.length && (s = this.args[n], r.parseArg && (s = e(r, s, r.defaultValue))), i[n] = s;
        }), this.processedArgs = i;
      }
      _chainOrCall(e, i) {
        return e && e.then && typeof e.then == "function" ? e.then(() => i()) : i();
      }
      _chainOrCallHooks(e, i) {
        let r = e, n = [];
        return Al(this).reverse().filter((s) => s._lifeCycleHooks[i] !== undefined).forEach((s) => {
          s._lifeCycleHooks[i].forEach((o) => {
            n.push({ hookedCommand: s, callback: o });
          });
        }), i === "postAction" && n.reverse(), n.forEach((s) => {
          r = this._chainOrCall(r, () => s.callback(s.hookedCommand, this));
        }), r;
      }
      _parseCommand(e, i) {
        let r = this.parseOptions(i);
        if (this._parseOptionsEnv(), e = e.concat(r.operands), i = r.unknown, this.args = e.concat(i), e && this._findCommand(e[0]))
          return this._dispatchSubcommand(e[0], e.slice(1), i);
        if (this._hasImplicitHelpCommand() && e[0] === this._helpCommandName)
          return e.length === 1 && this.help(), this._dispatchSubcommand(e[1], [], [this._helpLongFlag]);
        if (this._defaultCommandName)
          return Ud(this, i), this._dispatchSubcommand(this._defaultCommandName, e, i);
        this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName && this.help({ error: true }), Ud(this, r.unknown), this._checkForMissingMandatoryOptions();
        let n = () => {
          r.unknown.length > 0 && this.unknownOption(r.unknown[0]);
        }, s = `command:${this.name()}`;
        if (this._actionHandler) {
          n(), this._processArguments();
          let o;
          return o = this._chainOrCallHooks(o, "preAction"), o = this._chainOrCall(o, () => this._actionHandler(this.processedArgs)), this.parent && this.parent.emit(s, e, i), o = this._chainOrCallHooks(o, "postAction"), o;
        }
        if (this.parent && this.parent.listenerCount(s))
          n(), this._processArguments(), this.parent.emit(s, e, i);
        else if (e.length) {
          if (this._findCommand("*"))
            return this._dispatchSubcommand("*", e, i);
          this.listenerCount("command:*") ? this.emit("command:*", e, i) : this.commands.length ? this.unknownCommand() : (n(), this._processArguments());
        } else
          this.commands.length ? (n(), this.help({ error: true })) : (n(), this._processArguments());
      }
      _findCommand(e) {
        if (e)
          return this.commands.find((i) => i._name === e || i._aliases.includes(e));
      }
      _findOption(e) {
        return this.options.find((i) => i.is(e));
      }
      _checkForMissingMandatoryOptions() {
        for (let e = this;e; e = e.parent)
          e.options.forEach((i) => {
            i.mandatory && e.getOptionValue(i.attributeName()) === undefined && e.missingMandatoryOptionValue(i);
          });
      }
      parseOptions(e) {
        let i = [], r = [], n = i, s = e.slice();
        function o(l) {
          return l.length > 1 && l[0] === "-";
        }
        let a = null;
        for (;s.length; ) {
          let l = s.shift();
          if (l === "--") {
            n === r && n.push(l), n.push(...s);
            break;
          }
          if (a && !o(l)) {
            this.emit(`option:${a.name()}`, l);
            continue;
          }
          if (a = null, o(l)) {
            let c = this._findOption(l);
            if (c) {
              if (c.required) {
                let u = s.shift();
                u === undefined && this.optionMissingArgument(c), this.emit(`option:${c.name()}`, u);
              } else if (c.optional) {
                let u = null;
                s.length > 0 && !o(s[0]) && (u = s.shift()), this.emit(`option:${c.name()}`, u);
              } else
                this.emit(`option:${c.name()}`);
              a = c.variadic ? c : null;
              continue;
            }
          }
          if (l.length > 2 && l[0] === "-" && l[1] !== "-") {
            let c = this._findOption(`-${l[1]}`);
            if (c) {
              c.required || c.optional && this._combineFlagAndOptionalValue ? this.emit(`option:${c.name()}`, l.slice(2)) : (this.emit(`option:${c.name()}`), s.unshift(`-${l.slice(2)}`));
              continue;
            }
          }
          if (/^--[^=]+=/.test(l)) {
            let c = l.indexOf("="), u = this._findOption(l.slice(0, c));
            if (u && (u.required || u.optional)) {
              this.emit(`option:${u.name()}`, l.slice(c + 1));
              continue;
            }
          }
          if (o(l) && (n = r), (this._enablePositionalOptions || this._passThroughOptions) && i.length === 0 && r.length === 0) {
            if (this._findCommand(l)) {
              i.push(l), s.length > 0 && r.push(...s);
              break;
            } else if (l === this._helpCommandName && this._hasImplicitHelpCommand()) {
              i.push(l), s.length > 0 && i.push(...s);
              break;
            } else if (this._defaultCommandName) {
              r.push(l), s.length > 0 && r.push(...s);
              break;
            }
          }
          if (this._passThroughOptions) {
            n.push(l), s.length > 0 && n.push(...s);
            break;
          }
          n.push(l);
        }
        return { operands: i, unknown: r };
      }
      opts() {
        if (this._storeOptionsAsProperties) {
          let e = {}, i = this.options.length;
          for (let r = 0;r < i; r++) {
            let n = this.options[r].attributeName();
            e[n] = n === this._versionOptionName ? this._version : this[n];
          }
          return e;
        }
        return this._optionValues;
      }
      _displayError(e, i, r) {
        this._outputConfiguration.outputError(`${r}
`, this._outputConfiguration.writeErr), typeof this._showHelpAfterError == "string" ? this._outputConfiguration.writeErr(`${this._showHelpAfterError}
`) : this._showHelpAfterError && (this._outputConfiguration.writeErr(`
`), this.outputHelp({ error: true })), this._exit(e, i, r);
      }
      _parseOptionsEnv() {
        this.options.forEach((e) => {
          if (e.envVar && e.envVar in process.env) {
            let i = e.attributeName();
            (this.getOptionValue(i) === undefined || ["default", "config", "env"].includes(this.getOptionValueSource(i))) && (e.required || e.optional ? this.emit(`optionEnv:${e.name()}`, process.env[e.envVar]) : this.emit(`optionEnv:${e.name()}`));
          }
        });
      }
      missingArgument(e) {
        let i = `error: missing required argument '${e}'`;
        this._displayError(1, "commander.missingArgument", i);
      }
      optionMissingArgument(e) {
        let i = `error: option '${e.flags}' argument missing`;
        this._displayError(1, "commander.optionMissingArgument", i);
      }
      missingMandatoryOptionValue(e) {
        let i = `error: required option '${e.flags}' not specified`;
        this._displayError(1, "commander.missingMandatoryOptionValue", i);
      }
      unknownOption(e) {
        if (this._allowUnknownOption)
          return;
        let i = "";
        if (e.startsWith("--") && this._showSuggestionAfterError) {
          let n = [], s = this;
          do {
            let o = s.createHelp().visibleOptions(s).filter((a) => a.long).map((a) => a.long);
            n = n.concat(o), s = s.parent;
          } while (s && !s._enablePositionalOptions);
          i = jd(e, n);
        }
        let r = `error: unknown option '${e}'${i}`;
        this._displayError(1, "commander.unknownOption", r);
      }
      _excessArguments(e) {
        if (this._allowExcessArguments)
          return;
        let i = this._args.length, r = i === 1 ? "" : "s", s = `error: too many arguments${this.parent ? ` for '${this.name()}'` : ""}. Expected ${i} argument${r} but got ${e.length}.`;
        this._displayError(1, "commander.excessArguments", s);
      }
      unknownCommand() {
        let e = this.args[0], i = "";
        if (this._showSuggestionAfterError) {
          let n = [];
          this.createHelp().visibleCommands(this).forEach((s) => {
            n.push(s.name()), s.alias() && n.push(s.alias());
          }), i = jd(e, n);
        }
        let r = `error: unknown command '${e}'${i}`;
        this._displayError(1, "commander.unknownCommand", r);
      }
      version(e, i, r) {
        if (e === undefined)
          return this._version;
        this._version = e, i = i || "-V, --version", r = r || "output the version number";
        let n = this.createOption(i, r);
        return this._versionOptionName = n.attributeName(), this.options.push(n), this.on("option:" + n.name(), () => {
          this._outputConfiguration.writeOut(`${e}
`), this._exit(0, "commander.version", e);
        }), this;
      }
      description(e, i) {
        return e === undefined && i === undefined ? this._description : (this._description = e, i && (this._argsDescription = i), this);
      }
      alias(e) {
        if (e === undefined)
          return this._aliases[0];
        let i = this;
        if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler && (i = this.commands[this.commands.length - 1]), e === i._name)
          throw new Error("Command alias can't be the same as its name");
        return i._aliases.push(e), this;
      }
      aliases(e) {
        return e === undefined ? this._aliases : (e.forEach((i) => this.alias(i)), this);
      }
      usage(e) {
        if (e === undefined) {
          if (this._usage)
            return this._usage;
          let i = this._args.map((r) => jx(r));
          return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? i : []).join(" ");
        }
        return this._usage = e, this;
      }
      name(e) {
        return e === undefined ? this._name : (this._name = e, this);
      }
      helpInformation(e) {
        let i = this.createHelp();
        return i.helpWidth === undefined && (i.helpWidth = e && e.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth()), i.formatHelp(this, i);
      }
      _getHelpContext(e) {
        e = e || {};
        let i = { error: !!e.error }, r;
        return i.error ? r = (n) => this._outputConfiguration.writeErr(n) : r = (n) => this._outputConfiguration.writeOut(n), i.write = e.write || r, i.command = this, i;
      }
      outputHelp(e) {
        let i;
        typeof e == "function" && (i = e, e = undefined);
        let r = this._getHelpContext(e);
        Al(this).reverse().forEach((s) => s.emit("beforeAllHelp", r)), this.emit("beforeHelp", r);
        let n = this.helpInformation(r);
        if (i && (n = i(n), typeof n != "string" && !Buffer.isBuffer(n)))
          throw new Error("outputHelp callback must return a string or a Buffer");
        r.write(n), this.emit(this._helpLongFlag), this.emit("afterHelp", r), Al(this).forEach((s) => s.emit("afterAllHelp", r));
      }
      helpOption(e, i) {
        if (typeof e == "boolean")
          return this._hasHelpOption = e, this;
        this._helpFlags = e || this._helpFlags, this._helpDescription = i || this._helpDescription;
        let r = Vx(this._helpFlags);
        return this._helpShortFlag = r.shortFlag, this._helpLongFlag = r.longFlag, this;
      }
      help(e) {
        this.outputHelp(e);
        let i = process.exitCode || 0;
        i === 0 && e && typeof e != "function" && e.error && (i = 1), this._exit(i, "commander.help", "(outputHelp)");
      }
      addHelpText(e, i) {
        let r = ["beforeAll", "before", "after", "afterAll"];
        if (!r.includes(e))
          throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${r.join("', '")}'`);
        let n = `${e}Help`;
        return this.on(n, (s) => {
          let o;
          typeof i == "function" ? o = i({ error: s.error, command: s.command }) : o = i, o && s.write(`${o}
`);
        }), this;
      }
    };
    function Ud(t, e) {
      t._hasHelpOption && e.find((r) => r === t._helpLongFlag || r === t._helpShortFlag) && (t.outputHelp(), t._exit(0, "commander.helpDisplayed", "(outputHelp)"));
    }
    function $d(t) {
      return t.map((e) => {
        if (!e.startsWith("--inspect"))
          return e;
        let i, r = "127.0.0.1", n = "9229", s;
        return (s = e.match(/^(--inspect(-brk)?)$/)) !== null ? i = s[1] : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null ? (i = s[1], /^\d+$/.test(s[3]) ? n = s[3] : r = s[3]) : (s = e.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null && (i = s[1], r = s[3], n = s[4]), i && n !== "0" ? `${i}=${r}:${parseInt(n) + 1}` : e;
      });
    }
    function Al(t) {
      let e = [];
      for (let i = t;i; i = i.parent)
        e.push(i);
      return e;
    }
    Vd.Command = Il;
  });
  var zd = w(($t, Wd) => {
    var { Argument: Hx } = Ds(), { Command: Gd } = Hd(), { CommanderError: Gx, InvalidArgumentError: Yd } = un(), { Help: Yx } = xl(), { Option: Wx } = kl();
    $t = Wd.exports = new Gd;
    $t.program = $t;
    $t.Argument = Hx;
    $t.Command = Gd;
    $t.CommanderError = Gx;
    $t.Help = Yx;
    $t.InvalidArgumentError = Yd;
    $t.InvalidOptionArgumentError = Yd;
    $t.Option = Wx;
  });
  var Zd = w((Kd, Jd) => {
    Kd = Jd.exports = Ir;
    function Ir(t, e) {
      if (this.stream = e.stream || process.stderr, typeof e == "number") {
        var i = e;
        e = {}, e.total = i;
      } else {
        if (e = e || {}, typeof t != "string")
          throw new Error("format required");
        if (typeof e.total != "number")
          throw new Error("total required");
      }
      this.fmt = t, this.curr = e.curr || 0, this.total = e.total, this.width = e.width || this.total, this.clear = e.clear, this.chars = { complete: e.complete || "=", incomplete: e.incomplete || "-", head: e.head || e.complete || "=" }, this.renderThrottle = e.renderThrottle !== 0 ? e.renderThrottle || 16 : 0, this.lastRender = -1 / 0, this.callback = e.callback || function() {
      }, this.tokens = {}, this.lastDraw = "";
    }
    Ir.prototype.tick = function(t, e) {
      if (t !== 0 && (t = t || 1), typeof t == "object" && (e = t, t = 1), e && (this.tokens = e), this.curr == 0 && (this.start = new Date), this.curr += t, this.render(), this.curr >= this.total) {
        this.render(undefined, true), this.complete = true, this.terminate(), this.callback(this);
        return;
      }
    };
    Ir.prototype.render = function(t, e) {
      if (e = e !== undefined ? e : false, t && (this.tokens = t), !!this.stream.isTTY) {
        var i = Date.now(), r = i - this.lastRender;
        if (!(!e && r < this.renderThrottle)) {
          this.lastRender = i;
          var n = this.curr / this.total;
          n = Math.min(Math.max(n, 0), 1);
          var s = Math.floor(n * 100), o, a, l, c = new Date - this.start, u = s == 100 ? 0 : c * (this.total / this.curr - 1), f = this.curr / (c / 1000), d = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(c) ? "0.0" : (c / 1000).toFixed(1)).replace(":eta", isNaN(u) || !isFinite(u) ? "0.0" : (u / 1000).toFixed(1)).replace(":percent", s.toFixed(0) + "%").replace(":rate", Math.round(f)), g = Math.max(0, this.stream.columns - d.replace(":bar", "").length);
          g && process.platform === "win32" && (g = g - 1);
          var m = Math.min(this.width, g);
          if (l = Math.round(m * n), a = Array(Math.max(0, l + 1)).join(this.chars.complete), o = Array(Math.max(0, m - l + 1)).join(this.chars.incomplete), l > 0 && (a = a.slice(0, -1) + this.chars.head), d = d.replace(":bar", a + o), this.tokens)
            for (var v in this.tokens)
              d = d.replace(":" + v, this.tokens[v]);
          this.lastDraw !== d && (this.stream.cursorTo(0), this.stream.write(d), this.stream.clearLine(1), this.lastDraw = d);
        }
      }
    };
    Ir.prototype.update = function(t, e) {
      var i = Math.floor(t * this.total), r = i - this.curr;
      this.tick(r, e);
    };
    Ir.prototype.interrupt = function(t) {
      this.stream.clearLine(), this.stream.cursorTo(0), this.stream.write(t), this.stream.write(`
`), this.stream.write(this.lastDraw);
    };
    Ir.prototype.terminate = function() {
      this.clear ? this.stream.clearLine && (this.stream.clearLine(), this.stream.cursorTo(0)) : this.stream.write(`
`);
    };
  });
  var Xd = w((q2, Qd) => {
    Qd.exports = Zd();
  });
  var rm = w((li) => {
    Object.defineProperty(li, "__esModule", { value: true });
    var em = __require("buffer"), Ki = { INVALID_ENCODING: "Invalid encoding provided. Please specify a valid encoding the internal Node.js Buffer supports.", INVALID_SMARTBUFFER_SIZE: "Invalid size provided. Size must be a valid integer greater than zero.", INVALID_SMARTBUFFER_BUFFER: "Invalid Buffer provided in SmartBufferOptions.", INVALID_SMARTBUFFER_OBJECT: "Invalid SmartBufferOptions object supplied to SmartBuffer constructor or factory methods.", INVALID_OFFSET: "An invalid offset value was provided.", INVALID_OFFSET_NON_NUMBER: "An invalid offset value was provided. A numeric value is required.", INVALID_LENGTH: "An invalid length value was provided.", INVALID_LENGTH_NON_NUMBER: "An invalid length value was provived. A numeric value is required.", INVALID_TARGET_OFFSET: "Target offset is beyond the bounds of the internal SmartBuffer data.", INVALID_TARGET_LENGTH: "Specified length value moves cursor beyong the bounds of the internal SmartBuffer data.", INVALID_READ_BEYOND_BOUNDS: "Attempted to read beyond the bounds of the managed data.", INVALID_WRITE_BEYOND_BOUNDS: "Attempted to write beyond the bounds of the managed data." };
    li.ERRORS = Ki;
    function zx(t) {
      if (!em.Buffer.isEncoding(t))
        throw new Error(Ki.INVALID_ENCODING);
    }
    li.checkEncoding = zx;
    function tm(t) {
      return typeof t == "number" && isFinite(t) && Qx(t);
    }
    li.isFiniteInteger = tm;
    function im(t, e) {
      if (typeof t == "number") {
        if (!tm(t) || t < 0)
          throw new Error(e ? Ki.INVALID_OFFSET : Ki.INVALID_LENGTH);
      } else
        throw new Error(e ? Ki.INVALID_OFFSET_NON_NUMBER : Ki.INVALID_LENGTH_NON_NUMBER);
    }
    function Kx(t) {
      im(t, false);
    }
    li.checkLengthValue = Kx;
    function Jx(t) {
      im(t, true);
    }
    li.checkOffsetValue = Jx;
    function Zx(t, e) {
      if (t < 0 || t > e.length)
        throw new Error(Ki.INVALID_TARGET_OFFSET);
    }
    li.checkTargetOffset = Zx;
    function Qx(t) {
      return typeof t == "number" && isFinite(t) && Math.floor(t) === t;
    }
    function Xx(t) {
      if (typeof BigInt == "undefined")
        throw new Error("Platform does not support JS BigInt type.");
      if (typeof em.Buffer.prototype[t] == "undefined")
        throw new Error(`Platform does not support Buffer.prototype.${t}.`);
    }
    li.bigIntAndBufferInt64Check = Xx;
  });
  var sm = w((Ll) => {
    Object.defineProperty(Ll, "__esModule", { value: true });
    var pe = rm(), nm = 4096, eS = "utf8", Nl = class t {
      constructor(e) {
        if (this.length = 0, this._encoding = eS, this._writeOffset = 0, this._readOffset = 0, t.isSmartBufferOptions(e))
          if (e.encoding && (pe.checkEncoding(e.encoding), this._encoding = e.encoding), e.size)
            if (pe.isFiniteInteger(e.size) && e.size > 0)
              this._buff = Buffer.allocUnsafe(e.size);
            else
              throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_SIZE);
          else if (e.buff)
            if (Buffer.isBuffer(e.buff))
              this._buff = e.buff, this.length = e.buff.length;
            else
              throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_BUFFER);
          else
            this._buff = Buffer.allocUnsafe(nm);
        else {
          if (typeof e != "undefined")
            throw new Error(pe.ERRORS.INVALID_SMARTBUFFER_OBJECT);
          this._buff = Buffer.allocUnsafe(nm);
        }
      }
      static fromSize(e, i) {
        return new this({ size: e, encoding: i });
      }
      static fromBuffer(e, i) {
        return new this({ buff: e, encoding: i });
      }
      static fromOptions(e) {
        return new this(e);
      }
      static isSmartBufferOptions(e) {
        let i = e;
        return i && (i.encoding !== undefined || i.size !== undefined || i.buff !== undefined);
      }
      readInt8(e) {
        return this._readNumberValue(Buffer.prototype.readInt8, 1, e);
      }
      readInt16BE(e) {
        return this._readNumberValue(Buffer.prototype.readInt16BE, 2, e);
      }
      readInt16LE(e) {
        return this._readNumberValue(Buffer.prototype.readInt16LE, 2, e);
      }
      readInt32BE(e) {
        return this._readNumberValue(Buffer.prototype.readInt32BE, 4, e);
      }
      readInt32LE(e) {
        return this._readNumberValue(Buffer.prototype.readInt32LE, 4, e);
      }
      readBigInt64BE(e) {
        return pe.bigIntAndBufferInt64Check("readBigInt64BE"), this._readNumberValue(Buffer.prototype.readBigInt64BE, 8, e);
      }
      readBigInt64LE(e) {
        return pe.bigIntAndBufferInt64Check("readBigInt64LE"), this._readNumberValue(Buffer.prototype.readBigInt64LE, 8, e);
      }
      writeInt8(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt8, 1, e, i), this;
      }
      insertInt8(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt8, 1, e, i);
      }
      writeInt16BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
      }
      insertInt16BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16BE, 2, e, i);
      }
      writeInt16LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
      }
      insertInt16LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt16LE, 2, e, i);
      }
      writeInt32BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
      }
      insertInt32BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32BE, 4, e, i);
      }
      writeInt32LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
      }
      insertInt32LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeInt32LE, 4, e, i);
      }
      writeBigInt64BE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
      }
      insertBigInt64BE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigInt64BE, 8, e, i);
      }
      writeBigInt64LE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
      }
      insertBigInt64LE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigInt64LE, 8, e, i);
      }
      readUInt8(e) {
        return this._readNumberValue(Buffer.prototype.readUInt8, 1, e);
      }
      readUInt16BE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt16BE, 2, e);
      }
      readUInt16LE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt16LE, 2, e);
      }
      readUInt32BE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt32BE, 4, e);
      }
      readUInt32LE(e) {
        return this._readNumberValue(Buffer.prototype.readUInt32LE, 4, e);
      }
      readBigUInt64BE(e) {
        return pe.bigIntAndBufferInt64Check("readBigUInt64BE"), this._readNumberValue(Buffer.prototype.readBigUInt64BE, 8, e);
      }
      readBigUInt64LE(e) {
        return pe.bigIntAndBufferInt64Check("readBigUInt64LE"), this._readNumberValue(Buffer.prototype.readBigUInt64LE, 8, e);
      }
      writeUInt8(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
      }
      insertUInt8(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt8, 1, e, i);
      }
      writeUInt16BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
      }
      insertUInt16BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16BE, 2, e, i);
      }
      writeUInt16LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
      }
      insertUInt16LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt16LE, 2, e, i);
      }
      writeUInt32BE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
      }
      insertUInt32BE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32BE, 4, e, i);
      }
      writeUInt32LE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
      }
      insertUInt32LE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeUInt32LE, 4, e, i);
      }
      writeBigUInt64BE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
      }
      insertBigUInt64BE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64BE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64BE, 8, e, i);
      }
      writeBigUInt64LE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._writeNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
      }
      insertBigUInt64LE(e, i) {
        return pe.bigIntAndBufferInt64Check("writeBigUInt64LE"), this._insertNumberValue(Buffer.prototype.writeBigUInt64LE, 8, e, i);
      }
      readFloatBE(e) {
        return this._readNumberValue(Buffer.prototype.readFloatBE, 4, e);
      }
      readFloatLE(e) {
        return this._readNumberValue(Buffer.prototype.readFloatLE, 4, e);
      }
      writeFloatBE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
      }
      insertFloatBE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatBE, 4, e, i);
      }
      writeFloatLE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
      }
      insertFloatLE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeFloatLE, 4, e, i);
      }
      readDoubleBE(e) {
        return this._readNumberValue(Buffer.prototype.readDoubleBE, 8, e);
      }
      readDoubleLE(e) {
        return this._readNumberValue(Buffer.prototype.readDoubleLE, 8, e);
      }
      writeDoubleBE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
      }
      insertDoubleBE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleBE, 8, e, i);
      }
      writeDoubleLE(e, i) {
        return this._writeNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
      }
      insertDoubleLE(e, i) {
        return this._insertNumberValue(Buffer.prototype.writeDoubleLE, 8, e, i);
      }
      readString(e, i) {
        let r;
        typeof e == "number" ? (pe.checkLengthValue(e), r = Math.min(e, this.length - this._readOffset)) : (i = e, r = this.length - this._readOffset), typeof i != "undefined" && pe.checkEncoding(i);
        let n = this._buff.slice(this._readOffset, this._readOffset + r).toString(i || this._encoding);
        return this._readOffset += r, n;
      }
      insertString(e, i, r) {
        return pe.checkOffsetValue(i), this._handleString(e, true, i, r);
      }
      writeString(e, i, r) {
        return this._handleString(e, false, i, r);
      }
      readStringNT(e) {
        typeof e != "undefined" && pe.checkEncoding(e);
        let i = this.length;
        for (let n = this._readOffset;n < this.length; n++)
          if (this._buff[n] === 0) {
            i = n;
            break;
          }
        let r = this._buff.slice(this._readOffset, i);
        return this._readOffset = i + 1, r.toString(e || this._encoding);
      }
      insertStringNT(e, i, r) {
        return pe.checkOffsetValue(i), this.insertString(e, i, r), this.insertUInt8(0, i + e.length), this;
      }
      writeStringNT(e, i, r) {
        return this.writeString(e, i, r), this.writeUInt8(0, typeof i == "number" ? i + e.length : this.writeOffset), this;
      }
      readBuffer(e) {
        typeof e != "undefined" && pe.checkLengthValue(e);
        let i = typeof e == "number" ? e : this.length, r = Math.min(this.length, this._readOffset + i), n = this._buff.slice(this._readOffset, r);
        return this._readOffset = r, n;
      }
      insertBuffer(e, i) {
        return pe.checkOffsetValue(i), this._handleBuffer(e, true, i);
      }
      writeBuffer(e, i) {
        return this._handleBuffer(e, false, i);
      }
      readBufferNT() {
        let e = this.length;
        for (let r = this._readOffset;r < this.length; r++)
          if (this._buff[r] === 0) {
            e = r;
            break;
          }
        let i = this._buff.slice(this._readOffset, e);
        return this._readOffset = e + 1, i;
      }
      insertBufferNT(e, i) {
        return pe.checkOffsetValue(i), this.insertBuffer(e, i), this.insertUInt8(0, i + e.length), this;
      }
      writeBufferNT(e, i) {
        return typeof i != "undefined" && pe.checkOffsetValue(i), this.writeBuffer(e, i), this.writeUInt8(0, typeof i == "number" ? i + e.length : this._writeOffset), this;
      }
      clear() {
        return this._writeOffset = 0, this._readOffset = 0, this.length = 0, this;
      }
      remaining() {
        return this.length - this._readOffset;
      }
      get readOffset() {
        return this._readOffset;
      }
      set readOffset(e) {
        pe.checkOffsetValue(e), pe.checkTargetOffset(e, this), this._readOffset = e;
      }
      get writeOffset() {
        return this._writeOffset;
      }
      set writeOffset(e) {
        pe.checkOffsetValue(e), pe.checkTargetOffset(e, this), this._writeOffset = e;
      }
      get encoding() {
        return this._encoding;
      }
      set encoding(e) {
        pe.checkEncoding(e), this._encoding = e;
      }
      get internalBuffer() {
        return this._buff;
      }
      toBuffer() {
        return this._buff.slice(0, this.length);
      }
      toString(e) {
        let i = typeof e == "string" ? e : this._encoding;
        return pe.checkEncoding(i), this._buff.toString(i, 0, this.length);
      }
      destroy() {
        return this.clear(), this;
      }
      _handleString(e, i, r, n) {
        let s = this._writeOffset, o = this._encoding;
        typeof r == "number" ? s = r : typeof r == "string" && (pe.checkEncoding(r), o = r), typeof n == "string" && (pe.checkEncoding(n), o = n);
        let a = Buffer.byteLength(e, o);
        return i ? this.ensureInsertable(a, s) : this._ensureWriteable(a, s), this._buff.write(e, s, a, o), i ? this._writeOffset += a : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, s + a) : this._writeOffset += a, this;
      }
      _handleBuffer(e, i, r) {
        let n = typeof r == "number" ? r : this._writeOffset;
        return i ? this.ensureInsertable(e.length, n) : this._ensureWriteable(e.length, n), e.copy(this._buff, n), i ? this._writeOffset += e.length : typeof r == "number" ? this._writeOffset = Math.max(this._writeOffset, n + e.length) : this._writeOffset += e.length, this;
      }
      ensureReadable(e, i) {
        let r = this._readOffset;
        if (typeof i != "undefined" && (pe.checkOffsetValue(i), r = i), r < 0 || r + e > this.length)
          throw new Error(pe.ERRORS.INVALID_READ_BEYOND_BOUNDS);
      }
      ensureInsertable(e, i) {
        pe.checkOffsetValue(i), this._ensureCapacity(this.length + e), i < this.length && this._buff.copy(this._buff, i + e, i, this._buff.length), i + e > this.length ? this.length = i + e : this.length += e;
      }
      _ensureWriteable(e, i) {
        let r = typeof i == "number" ? i : this._writeOffset;
        this._ensureCapacity(r + e), r + e > this.length && (this.length = r + e);
      }
      _ensureCapacity(e) {
        let i = this._buff.length;
        if (e > i) {
          let r = this._buff, n = i * 3 / 2 + 1;
          n < e && (n = e), this._buff = Buffer.allocUnsafe(n), r.copy(this._buff, 0, 0, i);
        }
      }
      _readNumberValue(e, i, r) {
        this.ensureReadable(i, r);
        let n = e.call(this._buff, typeof r == "number" ? r : this._readOffset);
        return typeof r == "undefined" && (this._readOffset += i), n;
      }
      _insertNumberValue(e, i, r, n) {
        return pe.checkOffsetValue(n), this.ensureInsertable(i, n), e.call(this._buff, r, n), this._writeOffset += i, this;
      }
      _writeNumberValue(e, i, r, n) {
        if (typeof n == "number") {
          if (n < 0)
            throw new Error(pe.ERRORS.INVALID_WRITE_BEYOND_BOUNDS);
          pe.checkOffsetValue(n);
        }
        let s = typeof n == "number" ? n : this._writeOffset;
        return this._ensureWriteable(i, s), e.call(this._buff, r, s), typeof n == "number" ? this._writeOffset = Math.max(this._writeOffset, s + i) : this._writeOffset += i, this;
      }
    };
    Ll.SmartBuffer = Nl;
  });
  var Bl = w((Ne) => {
    Object.defineProperty(Ne, "__esModule", { value: true });
    Ne.SOCKS5_NO_ACCEPTABLE_AUTH = Ne.SOCKS5_CUSTOM_AUTH_END = Ne.SOCKS5_CUSTOM_AUTH_START = Ne.SOCKS_INCOMING_PACKET_SIZES = Ne.SocksClientState = Ne.Socks5Response = Ne.Socks5HostType = Ne.Socks5Auth = Ne.Socks4Response = Ne.SocksCommand = Ne.ERRORS = Ne.DEFAULT_TIMEOUT = undefined;
    var tS = 30000;
    Ne.DEFAULT_TIMEOUT = tS;
    var iS = { InvalidSocksCommand: "An invalid SOCKS command was provided. Valid options are connect, bind, and associate.", InvalidSocksCommandForOperation: "An invalid SOCKS command was provided. Only a subset of commands are supported for this operation.", InvalidSocksCommandChain: "An invalid SOCKS command was provided. Chaining currently only supports the connect command.", InvalidSocksClientOptionsDestination: "An invalid destination host was provided.", InvalidSocksClientOptionsExistingSocket: "An invalid existing socket was provided. This should be an instance of stream.Duplex.", InvalidSocksClientOptionsProxy: "Invalid SOCKS proxy details were provided.", InvalidSocksClientOptionsTimeout: "An invalid timeout value was provided. Please enter a value above 0 (in ms).", InvalidSocksClientOptionsProxiesLength: "At least two socks proxies must be provided for chaining.", InvalidSocksClientOptionsCustomAuthRange: "Custom auth must be a value between 0x80 and 0xFE.", InvalidSocksClientOptionsCustomAuthOptions: "When a custom_auth_method is provided, custom_auth_request_handler, custom_auth_response_size, and custom_auth_response_handler must also be provided and valid.", NegotiationError: "Negotiation error", SocketClosed: "Socket closed", ProxyConnectionTimedOut: "Proxy connection timed out", InternalError: "SocksClient internal error (this should not happen)", InvalidSocks4HandshakeResponse: "Received invalid Socks4 handshake response", Socks4ProxyRejectedConnection: "Socks4 Proxy rejected connection", InvalidSocks4IncomingConnectionResponse: "Socks4 invalid incoming connection response", Socks4ProxyRejectedIncomingBoundConnection: "Socks4 Proxy rejected incoming bound connection", InvalidSocks5InitialHandshakeResponse: "Received invalid Socks5 initial handshake response", InvalidSocks5IntiailHandshakeSocksVersion: "Received invalid Socks5 initial handshake (invalid socks version)", InvalidSocks5InitialHandshakeNoAcceptedAuthType: "Received invalid Socks5 initial handshake (no accepted authentication type)", InvalidSocks5InitialHandshakeUnknownAuthType: "Received invalid Socks5 initial handshake (unknown authentication type)", Socks5AuthenticationFailed: "Socks5 Authentication failed", InvalidSocks5FinalHandshake: "Received invalid Socks5 final handshake response", InvalidSocks5FinalHandshakeRejected: "Socks5 proxy rejected connection", InvalidSocks5IncomingConnectionResponse: "Received invalid Socks5 incoming connection response", Socks5ProxyRejectedIncomingBoundConnection: "Socks5 Proxy rejected incoming bound connection" };
    Ne.ERRORS = iS;
    var rS = { Socks5InitialHandshakeResponse: 2, Socks5UserPassAuthenticationResponse: 2, Socks5ResponseHeader: 5, Socks5ResponseIPv4: 10, Socks5ResponseIPv6: 22, Socks5ResponseHostname: (t) => t + 7, Socks4Response: 8 };
    Ne.SOCKS_INCOMING_PACKET_SIZES = rS;
    var om;
    (function(t) {
      t[t.connect = 1] = "connect", t[t.bind = 2] = "bind", t[t.associate = 3] = "associate";
    })(om || (Ne.SocksCommand = om = {}));
    var am;
    (function(t) {
      t[t.Granted = 90] = "Granted", t[t.Failed = 91] = "Failed", t[t.Rejected = 92] = "Rejected", t[t.RejectedIdent = 93] = "RejectedIdent";
    })(am || (Ne.Socks4Response = am = {}));
    var lm;
    (function(t) {
      t[t.NoAuth = 0] = "NoAuth", t[t.GSSApi = 1] = "GSSApi", t[t.UserPass = 2] = "UserPass";
    })(lm || (Ne.Socks5Auth = lm = {}));
    var nS = 128;
    Ne.SOCKS5_CUSTOM_AUTH_START = nS;
    var sS = 254;
    Ne.SOCKS5_CUSTOM_AUTH_END = sS;
    var oS = 255;
    Ne.SOCKS5_NO_ACCEPTABLE_AUTH = oS;
    var cm;
    (function(t) {
      t[t.Granted = 0] = "Granted", t[t.Failure = 1] = "Failure", t[t.NotAllowed = 2] = "NotAllowed", t[t.NetworkUnreachable = 3] = "NetworkUnreachable", t[t.HostUnreachable = 4] = "HostUnreachable", t[t.ConnectionRefused = 5] = "ConnectionRefused", t[t.TTLExpired = 6] = "TTLExpired", t[t.CommandNotSupported = 7] = "CommandNotSupported", t[t.AddressNotSupported = 8] = "AddressNotSupported";
    })(cm || (Ne.Socks5Response = cm = {}));
    var um;
    (function(t) {
      t[t.IPv4 = 1] = "IPv4", t[t.Hostname = 3] = "Hostname", t[t.IPv6 = 4] = "IPv6";
    })(um || (Ne.Socks5HostType = um = {}));
    var fm;
    (function(t) {
      t[t.Created = 0] = "Created", t[t.Connecting = 1] = "Connecting", t[t.Connected = 2] = "Connected", t[t.SentInitialHandshake = 3] = "SentInitialHandshake", t[t.ReceivedInitialHandshakeResponse = 4] = "ReceivedInitialHandshakeResponse", t[t.SentAuthentication = 5] = "SentAuthentication", t[t.ReceivedAuthenticationResponse = 6] = "ReceivedAuthenticationResponse", t[t.SentFinalHandshake = 7] = "SentFinalHandshake", t[t.ReceivedFinalResponse = 8] = "ReceivedFinalResponse", t[t.BoundWaitingForConnection = 9] = "BoundWaitingForConnection", t[t.Established = 10] = "Established", t[t.Disconnected = 11] = "Disconnected", t[t.Error = 99] = "Error";
    })(fm || (Ne.SocksClientState = fm = {}));
  });
  var Pl = w((Nr) => {
    Object.defineProperty(Nr, "__esModule", { value: true });
    Nr.shuffleArray = Nr.SocksClientError = undefined;
    var Rl = class extends Error {
      constructor(e, i) {
        super(e), this.options = i;
      }
    };
    Nr.SocksClientError = Rl;
    function aS(t) {
      for (let e = t.length - 1;e > 0; e--) {
        let i = Math.floor(Math.random() * (e + 1));
        [t[e], t[i]] = [t[i], t[e]];
      }
    }
    Nr.shuffleArray = aS;
  });
  var Ml = w((Lr) => {
    Object.defineProperty(Lr, "__esModule", { value: true });
    Lr.isCorrect = Lr.isInSubnet = undefined;
    function lS(t) {
      return this.subnetMask < t.subnetMask ? false : this.mask(t.subnetMask) === t.mask();
    }
    Lr.isInSubnet = lS;
    function cS(t) {
      return function() {
        return this.addressMinusSuffix !== this.correctForm() ? false : this.subnetMask === t && !this.parsedSubnet ? true : this.parsedSubnet === String(this.subnetMask);
      };
    }
    Lr.isCorrect = cS;
  });
  var ql = w((Kt) => {
    Object.defineProperty(Kt, "__esModule", { value: true });
    Kt.RE_SUBNET_STRING = Kt.RE_ADDRESS = Kt.GROUPS = Kt.BITS = undefined;
    Kt.BITS = 32;
    Kt.GROUPS = 4;
    Kt.RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
    Kt.RE_SUBNET_STRING = /\/\d{1,2}$/;
  });
  var Us = w((js) => {
    Object.defineProperty(js, "__esModule", { value: true });
    js.AddressError = undefined;
    var Fl = class extends Error {
      constructor(e, i) {
        super(e), this.name = "AddressError", i !== null && (this.parseMessage = i);
      }
    };
    js.AddressError = Fl;
  });
  var Dl = w(($s, hm) => {
    (function() {
      var t, e = 244837814094590, i = (e & 16777215) == 15715070;
      function r(h, p, y) {
        h != null && (typeof h == "number" ? this.fromNumber(h, p, y) : p == null && typeof h != "string" ? this.fromString(h, 256) : this.fromString(h, p));
      }
      function n() {
        return new r(null);
      }
      function s(h, p, y, x, B, M) {
        for (;--M >= 0; ) {
          var G = p * this[h++] + y[x] + B;
          B = Math.floor(G / 67108864), y[x++] = G & 67108863;
        }
        return B;
      }
      function o(h, p, y, x, B, M) {
        for (var G = p & 32767, z2 = p >> 15;--M >= 0; ) {
          var Re = this[h] & 32767, Ye = this[h++] >> 15, Ct = z2 * Re + Ye * G;
          Re = G * Re + ((Ct & 32767) << 15) + y[x] + (B & 1073741823), B = (Re >>> 30) + (Ct >>> 15) + z2 * Ye + (B >>> 30), y[x++] = Re & 1073741823;
        }
        return B;
      }
      function a(h, p, y, x, B, M) {
        for (var G = p & 16383, z2 = p >> 14;--M >= 0; ) {
          var Re = this[h] & 16383, Ye = this[h++] >> 14, Ct = z2 * Re + Ye * G;
          Re = G * Re + ((Ct & 16383) << 14) + y[x] + B, B = (Re >> 28) + (Ct >> 14) + z2 * Ye, y[x++] = Re & 268435455;
        }
        return B;
      }
      var l = typeof navigator != "undefined";
      l && i && navigator.appName == "Microsoft Internet Explorer" ? (r.prototype.am = o, t = 30) : l && i && navigator.appName != "Netscape" ? (r.prototype.am = s, t = 26) : (r.prototype.am = a, t = 28), r.prototype.DB = t, r.prototype.DM = (1 << t) - 1, r.prototype.DV = 1 << t;
      var c = 52;
      r.prototype.FV = Math.pow(2, c), r.prototype.F1 = c - t, r.prototype.F2 = 2 * t - c;
      var u = "0123456789abcdefghijklmnopqrstuvwxyz", f = new Array, d, g;
      for (d = 48, g = 0;g <= 9; ++g)
        f[d++] = g;
      for (d = 97, g = 10;g < 36; ++g)
        f[d++] = g;
      for (d = 65, g = 10;g < 36; ++g)
        f[d++] = g;
      function m(h) {
        return u.charAt(h);
      }
      function v(h, p) {
        var y = f[h.charCodeAt(p)];
        return y == null ? -1 : y;
      }
      function b(h) {
        for (var p = this.t - 1;p >= 0; --p)
          h[p] = this[p];
        h.t = this.t, h.s = this.s;
      }
      function _(h) {
        this.t = 1, this.s = h < 0 ? -1 : 0, h > 0 ? this[0] = h : h < -1 ? this[0] = h + this.DV : this.t = 0;
      }
      function S(h) {
        var p = n();
        return p.fromInt(h), p;
      }
      function O(h, p) {
        var y;
        if (p == 16)
          y = 4;
        else if (p == 8)
          y = 3;
        else if (p == 256)
          y = 8;
        else if (p == 2)
          y = 1;
        else if (p == 32)
          y = 5;
        else if (p == 4)
          y = 2;
        else {
          this.fromRadix(h, p);
          return;
        }
        this.t = 0, this.s = 0;
        for (var x = h.length, B = false, M = 0;--x >= 0; ) {
          var G = y == 8 ? h[x] & 255 : v(h, x);
          if (G < 0) {
            h.charAt(x) == "-" && (B = true);
            continue;
          }
          B = false, M == 0 ? this[this.t++] = G : M + y > this.DB ? (this[this.t - 1] |= (G & (1 << this.DB - M) - 1) << M, this[this.t++] = G >> this.DB - M) : this[this.t - 1] |= G << M, M += y, M >= this.DB && (M -= this.DB);
        }
        y == 8 && h[0] & 128 && (this.s = -1, M > 0 && (this[this.t - 1] |= (1 << this.DB - M) - 1 << M)), this.clamp(), B && r.ZERO.subTo(this, this);
      }
      function k() {
        for (var h = this.s & this.DM;this.t > 0 && this[this.t - 1] == h; )
          --this.t;
      }
      function E(h) {
        if (this.s < 0)
          return "-" + this.negate().toString(h);
        var p;
        if (h == 16)
          p = 4;
        else if (h == 8)
          p = 3;
        else if (h == 2)
          p = 1;
        else if (h == 32)
          p = 5;
        else if (h == 4)
          p = 2;
        else
          return this.toRadix(h);
        var y = (1 << p) - 1, x, B = false, M = "", G = this.t, z2 = this.DB - G * this.DB % p;
        if (G-- > 0)
          for (z2 < this.DB && (x = this[G] >> z2) > 0 && (B = true, M = m(x));G >= 0; )
            z2 < p ? (x = (this[G] & (1 << z2) - 1) << p - z2, x |= this[--G] >> (z2 += this.DB - p)) : (x = this[G] >> (z2 -= p) & y, z2 <= 0 && (z2 += this.DB, --G)), x > 0 && (B = true), B && (M += m(x));
        return B ? M : "0";
      }
      function R() {
        var h = n();
        return r.ZERO.subTo(this, h), h;
      }
      function T() {
        return this.s < 0 ? this.negate() : this;
      }
      function A(h) {
        var p = this.s - h.s;
        if (p != 0)
          return p;
        var y = this.t;
        if (p = y - h.t, p != 0)
          return this.s < 0 ? -p : p;
        for (;--y >= 0; )
          if ((p = this[y] - h[y]) != 0)
            return p;
        return 0;
      }
      function C(h) {
        var p = 1, y;
        return (y = h >>> 16) != 0 && (h = y, p += 16), (y = h >> 8) != 0 && (h = y, p += 8), (y = h >> 4) != 0 && (h = y, p += 4), (y = h >> 2) != 0 && (h = y, p += 2), (y = h >> 1) != 0 && (h = y, p += 1), p;
      }
      function L() {
        return this.t <= 0 ? 0 : this.DB * (this.t - 1) + C(this[this.t - 1] ^ this.s & this.DM);
      }
      function P(h, p) {
        var y;
        for (y = this.t - 1;y >= 0; --y)
          p[y + h] = this[y];
        for (y = h - 1;y >= 0; --y)
          p[y] = 0;
        p.t = this.t + h, p.s = this.s;
      }
      function U(h, p) {
        for (var y = h;y < this.t; ++y)
          p[y - h] = this[y];
        p.t = Math.max(this.t - h, 0), p.s = this.s;
      }
      function F(h, p) {
        var y = h % this.DB, x = this.DB - y, B = (1 << x) - 1, M = Math.floor(h / this.DB), G = this.s << y & this.DM, z2;
        for (z2 = this.t - 1;z2 >= 0; --z2)
          p[z2 + M + 1] = this[z2] >> x | G, G = (this[z2] & B) << y;
        for (z2 = M - 1;z2 >= 0; --z2)
          p[z2] = 0;
        p[M] = G, p.t = this.t + M + 1, p.s = this.s, p.clamp();
      }
      function H(h, p) {
        p.s = this.s;
        var y = Math.floor(h / this.DB);
        if (y >= this.t) {
          p.t = 0;
          return;
        }
        var x = h % this.DB, B = this.DB - x, M = (1 << x) - 1;
        p[0] = this[y] >> x;
        for (var G = y + 1;G < this.t; ++G)
          p[G - y - 1] |= (this[G] & M) << B, p[G - y] = this[G] >> x;
        x > 0 && (p[this.t - y - 1] |= (this.s & M) << B), p.t = this.t - y, p.clamp();
      }
      function j(h, p) {
        for (var y = 0, x = 0, B = Math.min(h.t, this.t);y < B; )
          x += this[y] - h[y], p[y++] = x & this.DM, x >>= this.DB;
        if (h.t < this.t) {
          for (x -= h.s;y < this.t; )
            x += this[y], p[y++] = x & this.DM, x >>= this.DB;
          x += this.s;
        } else {
          for (x += this.s;y < h.t; )
            x -= h[y], p[y++] = x & this.DM, x >>= this.DB;
          x -= h.s;
        }
        p.s = x < 0 ? -1 : 0, x < -1 ? p[y++] = this.DV + x : x > 0 && (p[y++] = x), p.t = y, p.clamp();
      }
      function V(h, p) {
        var y = this.abs(), x = h.abs(), B = y.t;
        for (p.t = B + x.t;--B >= 0; )
          p[B] = 0;
        for (B = 0;B < x.t; ++B)
          p[B + y.t] = y.am(0, x[B], p, B, 0, y.t);
        p.s = 0, p.clamp(), this.s != h.s && r.ZERO.subTo(p, p);
      }
      function W(h) {
        for (var p = this.abs(), y = h.t = 2 * p.t;--y >= 0; )
          h[y] = 0;
        for (y = 0;y < p.t - 1; ++y) {
          var x = p.am(y, p[y], h, 2 * y, 0, 1);
          (h[y + p.t] += p.am(y + 1, 2 * p[y], h, 2 * y + 1, x, p.t - y - 1)) >= p.DV && (h[y + p.t] -= p.DV, h[y + p.t + 1] = 1);
        }
        h.t > 0 && (h[h.t - 1] += p.am(y, p[y], h, 2 * y, 0, 1)), h.s = 0, h.clamp();
      }
      function Q(h, p, y) {
        var x = h.abs();
        if (!(x.t <= 0)) {
          var B = this.abs();
          if (B.t < x.t) {
            p != null && p.fromInt(0), y != null && this.copyTo(y);
            return;
          }
          y == null && (y = n());
          var M = n(), G = this.s, z2 = h.s, Re = this.DB - C(x[x.t - 1]);
          Re > 0 ? (x.lShiftTo(Re, M), B.lShiftTo(Re, y)) : (x.copyTo(M), B.copyTo(y));
          var Ye = M.t, Ct = M[Ye - 1];
          if (Ct != 0) {
            var _t = Ct * (1 << this.F1) + (Ye > 1 ? M[Ye - 2] >> this.F2 : 0), si = this.FV / _t, ps = (1 << this.F1) / _t, qt = 1 << this.F2, Ft = y.t, ds = Ft - Ye, vi = p == null ? n() : p;
            for (M.dlShiftTo(ds, vi), y.compareTo(vi) >= 0 && (y[y.t++] = 1, y.subTo(vi, y)), r.ONE.dlShiftTo(Ye, vi), vi.subTo(M, M);M.t < Ye; )
              M[M.t++] = 0;
            for (;--ds >= 0; ) {
              var xa = y[--Ft] == Ct ? this.DM : Math.floor(y[Ft] * si + (y[Ft - 1] + qt) * ps);
              if ((y[Ft] += M.am(0, xa, y, ds, 0, Ye)) < xa)
                for (M.dlShiftTo(ds, vi), y.subTo(vi, y);y[Ft] < --xa; )
                  y.subTo(vi, y);
            }
            p != null && (y.drShiftTo(Ye, p), G != z2 && r.ZERO.subTo(p, p)), y.t = Ye, y.clamp(), Re > 0 && y.rShiftTo(Re, y), G < 0 && r.ZERO.subTo(y, y);
          }
        }
      }
      function Y(h) {
        var p = n();
        return this.abs().divRemTo(h, null, p), this.s < 0 && p.compareTo(r.ZERO) > 0 && h.subTo(p, p), p;
      }
      function de(h) {
        this.m = h;
      }
      function ae(h) {
        return h.s < 0 || h.compareTo(this.m) >= 0 ? h.mod(this.m) : h;
      }
      function ne(h) {
        return h;
      }
      function ue(h) {
        h.divRemTo(this.m, null, h);
      }
      function N(h, p, y) {
        h.multiplyTo(p, y), this.reduce(y);
      }
      function X(h, p) {
        h.squareTo(p), this.reduce(p);
      }
      de.prototype.convert = ae, de.prototype.revert = ne, de.prototype.reduce = ue, de.prototype.mulTo = N, de.prototype.sqrTo = X;
      function ke() {
        if (this.t < 1)
          return 0;
        var h = this[0];
        if (!(h & 1))
          return 0;
        var p = h & 3;
        return p = p * (2 - (h & 15) * p) & 15, p = p * (2 - (h & 255) * p) & 255, p = p * (2 - ((h & 65535) * p & 65535)) & 65535, p = p * (2 - h * p % this.DV) % this.DV, p > 0 ? this.DV - p : -p;
      }
      function be(h) {
        this.m = h, this.mp = h.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << h.DB - 15) - 1, this.mt2 = 2 * h.t;
      }
      function ge(h) {
        var p = n();
        return h.abs().dlShiftTo(this.m.t, p), p.divRemTo(this.m, null, p), h.s < 0 && p.compareTo(r.ZERO) > 0 && this.m.subTo(p, p), p;
      }
      function ve(h) {
        var p = n();
        return h.copyTo(p), this.reduce(p), p;
      }
      function fe(h) {
        for (;h.t <= this.mt2; )
          h[h.t++] = 0;
        for (var p = 0;p < this.m.t; ++p) {
          var y = h[p] & 32767, x = y * this.mpl + ((y * this.mph + (h[p] >> 15) * this.mpl & this.um) << 15) & h.DM;
          for (y = p + this.m.t, h[y] += this.m.am(0, x, h, p, 0, this.m.t);h[y] >= h.DV; )
            h[y] -= h.DV, h[++y]++;
        }
        h.clamp(), h.drShiftTo(this.m.t, h), h.compareTo(this.m) >= 0 && h.subTo(this.m, h);
      }
      function K(h, p) {
        h.squareTo(p), this.reduce(p);
      }
      function $(h, p, y) {
        h.multiplyTo(p, y), this.reduce(y);
      }
      be.prototype.convert = ge, be.prototype.revert = ve, be.prototype.reduce = fe, be.prototype.mulTo = $, be.prototype.sqrTo = K;
      function Ce() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0;
      }
      function re(h, p) {
        if (h > 4294967295 || h < 1)
          return r.ONE;
        var y = n(), x = n(), B = p.convert(this), M = C(h) - 1;
        for (B.copyTo(y);--M >= 0; )
          if (p.sqrTo(y, x), (h & 1 << M) > 0)
            p.mulTo(x, B, y);
          else {
            var G = y;
            y = x, x = G;
          }
        return p.revert(y);
      }
      function he(h, p) {
        var y;
        return h < 256 || p.isEven() ? y = new de(p) : y = new be(p), this.exp(h, y);
      }
      r.prototype.copyTo = b, r.prototype.fromInt = _, r.prototype.fromString = O, r.prototype.clamp = k, r.prototype.dlShiftTo = P, r.prototype.drShiftTo = U, r.prototype.lShiftTo = F, r.prototype.rShiftTo = H, r.prototype.subTo = j, r.prototype.multiplyTo = V, r.prototype.squareTo = W, r.prototype.divRemTo = Q, r.prototype.invDigit = ke, r.prototype.isEven = Ce, r.prototype.exp = re, r.prototype.toString = E, r.prototype.negate = R, r.prototype.abs = T, r.prototype.compareTo = A, r.prototype.bitLength = L, r.prototype.mod = Y, r.prototype.modPowInt = he, r.ZERO = S(0), r.ONE = S(1);
      function ft() {
        var h = n();
        return this.copyTo(h), h;
      }
      function yt() {
        if (this.s < 0) {
          if (this.t == 1)
            return this[0] - this.DV;
          if (this.t == 0)
            return -1;
        } else {
          if (this.t == 1)
            return this[0];
          if (this.t == 0)
            return 0;
        }
        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
      }
      function I() {
        return this.t == 0 ? this.s : this[0] << 24 >> 24;
      }
      function Z() {
        return this.t == 0 ? this.s : this[0] << 16 >> 16;
      }
      function te(h) {
        return Math.floor(Math.LN2 * this.DB / Math.log(h));
      }
      function ee() {
        return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this[0] <= 0 ? 0 : 1;
      }
      function le(h) {
        if (h == null && (h = 10), this.signum() == 0 || h < 2 || h > 36)
          return "0";
        var p = this.chunkSize(h), y = Math.pow(h, p), x = S(y), B = n(), M = n(), G = "";
        for (this.divRemTo(x, B, M);B.signum() > 0; )
          G = (y + M.intValue()).toString(h).substr(1) + G, B.divRemTo(x, B, M);
        return M.intValue().toString(h) + G;
      }
      function ce(h, p) {
        this.fromInt(0), p == null && (p = 10);
        for (var y = this.chunkSize(p), x = Math.pow(p, y), B = false, M = 0, G = 0, z2 = 0;z2 < h.length; ++z2) {
          var Re = v(h, z2);
          if (Re < 0) {
            h.charAt(z2) == "-" && this.signum() == 0 && (B = true);
            continue;
          }
          G = p * G + Re, ++M >= y && (this.dMultiply(x), this.dAddOffset(G, 0), M = 0, G = 0);
        }
        M > 0 && (this.dMultiply(Math.pow(p, M)), this.dAddOffset(G, 0)), B && r.ZERO.subTo(this, this);
      }
      function _e(h, p, y) {
        if (typeof p == "number")
          if (h < 2)
            this.fromInt(1);
          else
            for (this.fromNumber(h, y), this.testBit(h - 1) || this.bitwiseTo(r.ONE.shiftLeft(h - 1), oe, this), this.isEven() && this.dAddOffset(1, 0);!this.isProbablePrime(p); )
              this.dAddOffset(2, 0), this.bitLength() > h && this.subTo(r.ONE.shiftLeft(h - 1), this);
        else {
          var x = new Array, B = h & 7;
          x.length = (h >> 3) + 1, p.nextBytes(x), B > 0 ? x[0] &= (1 << B) - 1 : x[0] = 0, this.fromString(x, 256);
        }
      }
      function we() {
        var h = this.t, p = new Array;
        p[0] = this.s;
        var y = this.DB - h * this.DB % 8, x, B = 0;
        if (h-- > 0)
          for (y < this.DB && (x = this[h] >> y) != (this.s & this.DM) >> y && (p[B++] = x | this.s << this.DB - y);h >= 0; )
            y < 8 ? (x = (this[h] & (1 << y) - 1) << 8 - y, x |= this[--h] >> (y += this.DB - 8)) : (x = this[h] >> (y -= 8) & 255, y <= 0 && (y += this.DB, --h)), x & 128 && (x |= -256), B == 0 && (this.s & 128) != (x & 128) && ++B, (B > 0 || x != this.s) && (p[B++] = x);
        return p;
      }
      function Be(h) {
        return this.compareTo(h) == 0;
      }
      function Te(h) {
        return this.compareTo(h) < 0 ? this : h;
      }
      function D(h) {
        return this.compareTo(h) > 0 ? this : h;
      }
      function J(h, p, y) {
        var x, B, M = Math.min(h.t, this.t);
        for (x = 0;x < M; ++x)
          y[x] = p(this[x], h[x]);
        if (h.t < this.t) {
          for (B = h.s & this.DM, x = M;x < this.t; ++x)
            y[x] = p(this[x], B);
          y.t = this.t;
        } else {
          for (B = this.s & this.DM, x = M;x < h.t; ++x)
            y[x] = p(B, h[x]);
          y.t = h.t;
        }
        y.s = p(this.s, h.s), y.clamp();
      }
      function se(h, p) {
        return h & p;
      }
      function Ie(h) {
        var p = n();
        return this.bitwiseTo(h, se, p), p;
      }
      function oe(h, p) {
        return h | p;
      }
      function me(h) {
        var p = n();
        return this.bitwiseTo(h, oe, p), p;
      }
      function Ee(h, p) {
        return h ^ p;
      }
      function ie(h) {
        var p = n();
        return this.bitwiseTo(h, Ee, p), p;
      }
      function xe(h, p) {
        return h & ~p;
      }
      function Ue(h) {
        var p = n();
        return this.bitwiseTo(h, xe, p), p;
      }
      function Ae() {
        for (var h = n(), p = 0;p < this.t; ++p)
          h[p] = this.DM & ~this[p];
        return h.t = this.t, h.s = ~this.s, h;
      }
      function ht(h) {
        var p = n();
        return h < 0 ? this.rShiftTo(-h, p) : this.lShiftTo(h, p), p;
      }
      function Ot(h) {
        var p = n();
        return h < 0 ? this.lShiftTo(-h, p) : this.rShiftTo(h, p), p;
      }
      function ri(h) {
        if (h == 0)
          return -1;
        var p = 0;
        return h & 65535 || (h >>= 16, p += 16), h & 255 || (h >>= 8, p += 8), h & 15 || (h >>= 4, p += 4), h & 3 || (h >>= 2, p += 2), h & 1 || ++p, p;
      }
      function mi() {
        for (var h = 0;h < this.t; ++h)
          if (this[h] != 0)
            return h * this.DB + ri(this[h]);
        return this.s < 0 ? this.t * this.DB : -1;
      }
      function gi(h) {
        for (var p = 0;h != 0; )
          h &= h - 1, ++p;
        return p;
      }
      function Mi() {
        for (var h = 0, p = this.s & this.DM, y = 0;y < this.t; ++y)
          h += gi(this[y] ^ p);
        return h;
      }
      function qi(h) {
        var p = Math.floor(h / this.DB);
        return p >= this.t ? this.s != 0 : (this[p] & 1 << h % this.DB) != 0;
      }
      function dr(h, p) {
        var y = r.ONE.shiftLeft(h);
        return this.bitwiseTo(y, p, y), y;
      }
      function Fi(h) {
        return this.changeBit(h, oe);
      }
      function Di(h) {
        return this.changeBit(h, xe);
      }
      function ji(h) {
        return this.changeBit(h, Ee);
      }
      function Ui(h, p) {
        for (var y = 0, x = 0, B = Math.min(h.t, this.t);y < B; )
          x += this[y] + h[y], p[y++] = x & this.DM, x >>= this.DB;
        if (h.t < this.t) {
          for (x += h.s;y < this.t; )
            x += this[y], p[y++] = x & this.DM, x >>= this.DB;
          x += this.s;
        } else {
          for (x += this.s;y < h.t; )
            x += h[y], p[y++] = x & this.DM, x >>= this.DB;
          x += h.s;
        }
        p.s = x < 0 ? -1 : 0, x > 0 ? p[y++] = x : x < -1 && (p[y++] = this.DV + x), p.t = y, p.clamp();
      }
      function es(h) {
        var p = n();
        return this.addTo(h, p), p;
      }
      function tn(h) {
        var p = n();
        return this.subTo(h, p), p;
      }
      function ts(h) {
        var p = n();
        return this.multiplyTo(h, p), p;
      }
      function is() {
        var h = n();
        return this.squareTo(h), h;
      }
      function rs(h) {
        var p = n();
        return this.divRemTo(h, p, null), p;
      }
      function ns(h) {
        var p = n();
        return this.divRemTo(h, null, p), p;
      }
      function ss(h) {
        var p = n(), y = n();
        return this.divRemTo(h, p, y), new Array(p, y);
      }
      function ya(h) {
        this[this.t] = this.am(0, h - 1, this, 0, 0, this.t), ++this.t, this.clamp();
      }
      function $i(h, p) {
        if (h != 0) {
          for (;this.t <= p; )
            this[this.t++] = 0;
          for (this[p] += h;this[p] >= this.DV; )
            this[p] -= this.DV, ++p >= this.t && (this[this.t++] = 0), ++this[p];
        }
      }
      function ni() {
      }
      function Vi(h) {
        return h;
      }
      function mr(h, p, y) {
        h.multiplyTo(p, y);
      }
      function os(h, p) {
        h.squareTo(p);
      }
      ni.prototype.convert = Vi, ni.prototype.revert = Vi, ni.prototype.mulTo = mr, ni.prototype.sqrTo = os;
      function as(h) {
        return this.exp(h, new ni);
      }
      function ls(h, p, y) {
        var x = Math.min(this.t + h.t, p);
        for (y.s = 0, y.t = x;x > 0; )
          y[--x] = 0;
        var B;
        for (B = y.t - this.t;x < B; ++x)
          y[x + this.t] = this.am(0, h[x], y, x, 0, this.t);
        for (B = Math.min(h.t, p);x < B; ++x)
          this.am(0, h[x], y, x, 0, p - x);
        y.clamp();
      }
      function cs(h, p, y) {
        --p;
        var x = y.t = this.t + h.t - p;
        for (y.s = 0;--x >= 0; )
          y[x] = 0;
        for (x = Math.max(p - this.t, 0);x < h.t; ++x)
          y[this.t + x - p] = this.am(p - x, h[x], y, 0, 0, this.t + x - p);
        y.clamp(), y.drShiftTo(1, y);
      }
      function Yt(h) {
        this.r2 = n(), this.q3 = n(), r.ONE.dlShiftTo(2 * h.t, this.r2), this.mu = this.r2.divide(h), this.m = h;
      }
      function us(h) {
        if (h.s < 0 || h.t > 2 * this.m.t)
          return h.mod(this.m);
        if (h.compareTo(this.m) < 0)
          return h;
        var p = n();
        return h.copyTo(p), this.reduce(p), p;
      }
      function fs(h) {
        return h;
      }
      function gr(h) {
        for (h.drShiftTo(this.m.t - 1, this.r2), h.t > this.m.t + 1 && (h.t = this.m.t + 1, h.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);h.compareTo(this.r2) < 0; )
          h.dAddOffset(1, this.m.t + 1);
        for (h.subTo(this.r2, h);h.compareTo(this.m) >= 0; )
          h.subTo(this.m, h);
      }
      function Sb(h, p) {
        h.squareTo(p), this.reduce(p);
      }
      function Eb(h, p, y) {
        h.multiplyTo(p, y), this.reduce(y);
      }
      Yt.prototype.convert = us, Yt.prototype.revert = fs, Yt.prototype.reduce = gr, Yt.prototype.mulTo = Eb, Yt.prototype.sqrTo = Sb;
      function kb(h, p) {
        var y = h.bitLength(), x, B = S(1), M;
        if (y <= 0)
          return B;
        y < 18 ? x = 1 : y < 48 ? x = 3 : y < 144 ? x = 4 : y < 768 ? x = 5 : x = 6, y < 8 ? M = new de(p) : p.isEven() ? M = new Yt(p) : M = new be(p);
        var G = new Array, z2 = 3, Re = x - 1, Ye = (1 << x) - 1;
        if (G[1] = M.convert(this), x > 1) {
          var Ct = n();
          for (M.sqrTo(G[1], Ct);z2 <= Ye; )
            G[z2] = n(), M.mulTo(Ct, G[z2 - 2], G[z2]), z2 += 2;
        }
        var _t = h.t - 1, si, ps = true, qt = n(), Ft;
        for (y = C(h[_t]) - 1;_t >= 0; ) {
          for (y >= Re ? si = h[_t] >> y - Re & Ye : (si = (h[_t] & (1 << y + 1) - 1) << Re - y, _t > 0 && (si |= h[_t - 1] >> this.DB + y - Re)), z2 = x;!(si & 1); )
            si >>= 1, --z2;
          if ((y -= z2) < 0 && (y += this.DB, --_t), ps)
            G[si].copyTo(B), ps = false;
          else {
            for (;z2 > 1; )
              M.sqrTo(B, qt), M.sqrTo(qt, B), z2 -= 2;
            z2 > 0 ? M.sqrTo(B, qt) : (Ft = B, B = qt, qt = Ft), M.mulTo(qt, G[si], B);
          }
          for (;_t >= 0 && !(h[_t] & 1 << y); )
            M.sqrTo(B, qt), Ft = B, B = qt, qt = Ft, --y < 0 && (y = this.DB - 1, --_t);
        }
        return M.revert(B);
      }
      function Ob(h) {
        var p = this.s < 0 ? this.negate() : this.clone(), y = h.s < 0 ? h.negate() : h.clone();
        if (p.compareTo(y) < 0) {
          var x = p;
          p = y, y = x;
        }
        var B = p.getLowestSetBit(), M = y.getLowestSetBit();
        if (M < 0)
          return p;
        for (B < M && (M = B), M > 0 && (p.rShiftTo(M, p), y.rShiftTo(M, y));p.signum() > 0; )
          (B = p.getLowestSetBit()) > 0 && p.rShiftTo(B, p), (B = y.getLowestSetBit()) > 0 && y.rShiftTo(B, y), p.compareTo(y) >= 0 ? (p.subTo(y, p), p.rShiftTo(1, p)) : (y.subTo(p, y), y.rShiftTo(1, y));
        return M > 0 && y.lShiftTo(M, y), y;
      }
      function Cb(h) {
        if (h <= 0)
          return 0;
        var p = this.DV % h, y = this.s < 0 ? h - 1 : 0;
        if (this.t > 0)
          if (p == 0)
            y = this[0] % h;
          else
            for (var x = this.t - 1;x >= 0; --x)
              y = (p * y + this[x]) % h;
        return y;
      }
      function Tb(h) {
        var p = h.isEven();
        if (this.isEven() && p || h.signum() == 0)
          return r.ZERO;
        for (var y = h.clone(), x = this.clone(), B = S(1), M = S(0), G = S(0), z2 = S(1);y.signum() != 0; ) {
          for (;y.isEven(); )
            y.rShiftTo(1, y), p ? ((!B.isEven() || !M.isEven()) && (B.addTo(this, B), M.subTo(h, M)), B.rShiftTo(1, B)) : M.isEven() || M.subTo(h, M), M.rShiftTo(1, M);
          for (;x.isEven(); )
            x.rShiftTo(1, x), p ? ((!G.isEven() || !z2.isEven()) && (G.addTo(this, G), z2.subTo(h, z2)), G.rShiftTo(1, G)) : z2.isEven() || z2.subTo(h, z2), z2.rShiftTo(1, z2);
          y.compareTo(x) >= 0 ? (y.subTo(x, y), p && B.subTo(G, B), M.subTo(z2, M)) : (x.subTo(y, x), p && G.subTo(B, G), z2.subTo(M, z2));
        }
        if (x.compareTo(r.ONE) != 0)
          return r.ZERO;
        if (z2.compareTo(h) >= 0)
          return z2.subtract(h);
        if (z2.signum() < 0)
          z2.addTo(h, z2);
        else
          return z2;
        return z2.signum() < 0 ? z2.add(h) : z2;
      }
      var st = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997], Ab = (1 << 26) / st[st.length - 1];
      function Ib(h) {
        var p, y = this.abs();
        if (y.t == 1 && y[0] <= st[st.length - 1]) {
          for (p = 0;p < st.length; ++p)
            if (y[0] == st[p])
              return true;
          return false;
        }
        if (y.isEven())
          return false;
        for (p = 1;p < st.length; ) {
          for (var x = st[p], B = p + 1;B < st.length && x < Ab; )
            x *= st[B++];
          for (x = y.modInt(x);p < B; )
            if (x % st[p++] == 0)
              return false;
        }
        return y.millerRabin(h);
      }
      function Nb(h) {
        var p = this.subtract(r.ONE), y = p.getLowestSetBit();
        if (y <= 0)
          return false;
        var x = p.shiftRight(y);
        h = h + 1 >> 1, h > st.length && (h = st.length);
        for (var B = n(), M = 0;M < h; ++M) {
          B.fromInt(st[Math.floor(Math.random() * st.length)]);
          var G = B.modPow(x, this);
          if (G.compareTo(r.ONE) != 0 && G.compareTo(p) != 0) {
            for (var z2 = 1;z2++ < y && G.compareTo(p) != 0; )
              if (G = G.modPowInt(2, this), G.compareTo(r.ONE) == 0)
                return false;
            if (G.compareTo(p) != 0)
              return false;
          }
        }
        return true;
      }
      r.prototype.chunkSize = te, r.prototype.toRadix = le, r.prototype.fromRadix = ce, r.prototype.fromNumber = _e, r.prototype.bitwiseTo = J, r.prototype.changeBit = dr, r.prototype.addTo = Ui, r.prototype.dMultiply = ya, r.prototype.dAddOffset = $i, r.prototype.multiplyLowerTo = ls, r.prototype.multiplyUpperTo = cs, r.prototype.modInt = Cb, r.prototype.millerRabin = Nb, r.prototype.clone = ft, r.prototype.intValue = yt, r.prototype.byteValue = I, r.prototype.shortValue = Z, r.prototype.signum = ee, r.prototype.toByteArray = we, r.prototype.equals = Be, r.prototype.min = Te, r.prototype.max = D, r.prototype.and = Ie, r.prototype.or = me, r.prototype.xor = ie, r.prototype.andNot = Ue, r.prototype.not = Ae, r.prototype.shiftLeft = ht, r.prototype.shiftRight = Ot, r.prototype.getLowestSetBit = mi, r.prototype.bitCount = Mi, r.prototype.testBit = qi, r.prototype.setBit = Fi, r.prototype.clearBit = Di, r.prototype.flipBit = ji, r.prototype.add = es, r.prototype.subtract = tn, r.prototype.multiply = ts, r.prototype.divide = rs, r.prototype.remainder = ns, r.prototype.divideAndRemainder = ss, r.prototype.modPow = kb, r.prototype.modInverse = Tb, r.prototype.pow = as, r.prototype.gcd = Ob, r.prototype.isProbablePrime = Ib, r.prototype.square = is, r.prototype.Barrett = Yt;
      var hs, bt, Ge;
      function Lb(h) {
        bt[Ge++] ^= h & 255, bt[Ge++] ^= h >> 8 & 255, bt[Ge++] ^= h >> 16 & 255, bt[Ge++] ^= h >> 24 & 255, Ge >= wa && (Ge -= wa);
      }
      function pf() {
        Lb(new Date().getTime());
      }
      if (bt == null) {
        bt = new Array, Ge = 0;
        var Mt;
        if (typeof window != "undefined" && window.crypto) {
          if (window.crypto.getRandomValues) {
            var df = new Uint8Array(32);
            for (window.crypto.getRandomValues(df), Mt = 0;Mt < 32; ++Mt)
              bt[Ge++] = df[Mt];
          } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
            var mf = window.crypto.random(32);
            for (Mt = 0;Mt < mf.length; ++Mt)
              bt[Ge++] = mf.charCodeAt(Mt) & 255;
          }
        }
        for (;Ge < wa; )
          Mt = Math.floor(65536 * Math.random()), bt[Ge++] = Mt >>> 8, bt[Ge++] = Mt & 255;
        Ge = 0, pf();
      }
      function Bb() {
        if (hs == null) {
          for (pf(), hs = qb(), hs.init(bt), Ge = 0;Ge < bt.length; ++Ge)
            bt[Ge] = 0;
          Ge = 0;
        }
        return hs.next();
      }
      function Rb(h) {
        var p;
        for (p = 0;p < h.length; ++p)
          h[p] = Bb();
      }
      function ba() {
      }
      ba.prototype.nextBytes = Rb;
      function _a() {
        this.i = 0, this.j = 0, this.S = new Array;
      }
      function Pb(h) {
        var p, y, x;
        for (p = 0;p < 256; ++p)
          this.S[p] = p;
        for (y = 0, p = 0;p < 256; ++p)
          y = y + this.S[p] + h[p % h.length] & 255, x = this.S[p], this.S[p] = this.S[y], this.S[y] = x;
        this.i = 0, this.j = 0;
      }
      function Mb() {
        var h;
        return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, h = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = h, this.S[h + this.S[this.i] & 255];
      }
      _a.prototype.init = Pb, _a.prototype.next = Mb;
      function qb() {
        return new _a;
      }
      var wa = 256;
      typeof $s != "undefined" ? $s = hm.exports = { default: r, BigInteger: r, SecureRandom: ba } : this.jsbn = { BigInteger: r, SecureRandom: ba };
    }).call($s);
  });
  var fn = w((Vs) => {
    (function() {
      var t = { not_string: /[^s]/, not_bool: /[^t]/, not_type: /[^T]/, not_primitive: /[^v]/, number: /[diefg]/, numeric_arg: /[bcdiefguxX]/, json: /[j]/, not_json: /[^j]/, text: /^[^\x25]+/, modulo: /^\x25{2}/, placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/, key: /^([a-z_][a-z_\d]*)/i, key_access: /^\.([a-z_][a-z_\d]*)/i, index_access: /^\[(\d+)\]/, sign: /^[+-]/ };
      function e(o) {
        return r(s(o), arguments);
      }
      function i(o, a) {
        return e.apply(null, [o].concat(a || []));
      }
      function r(o, a) {
        var l = 1, c = o.length, u, f = "", d, g, m, v, b, _, S, O;
        for (d = 0;d < c; d++)
          if (typeof o[d] == "string")
            f += o[d];
          else if (typeof o[d] == "object") {
            if (m = o[d], m.keys)
              for (u = a[l], g = 0;g < m.keys.length; g++) {
                if (u == null)
                  throw new Error(e('[sprintf] Cannot access property "%s" of undefined value "%s"', m.keys[g], m.keys[g - 1]));
                u = u[m.keys[g]];
              }
            else
              m.param_no ? u = a[m.param_no] : u = a[l++];
            if (t.not_type.test(m.type) && t.not_primitive.test(m.type) && u instanceof Function && (u = u()), t.numeric_arg.test(m.type) && typeof u != "number" && isNaN(u))
              throw new TypeError(e("[sprintf] expecting number but found %T", u));
            switch (t.number.test(m.type) && (S = u >= 0), m.type) {
              case "b":
                u = parseInt(u, 10).toString(2);
                break;
              case "c":
                u = String.fromCharCode(parseInt(u, 10));
                break;
              case "d":
              case "i":
                u = parseInt(u, 10);
                break;
              case "j":
                u = JSON.stringify(u, null, m.width ? parseInt(m.width) : 0);
                break;
              case "e":
                u = m.precision ? parseFloat(u).toExponential(m.precision) : parseFloat(u).toExponential();
                break;
              case "f":
                u = m.precision ? parseFloat(u).toFixed(m.precision) : parseFloat(u);
                break;
              case "g":
                u = m.precision ? String(Number(u.toPrecision(m.precision))) : parseFloat(u);
                break;
              case "o":
                u = (parseInt(u, 10) >>> 0).toString(8);
                break;
              case "s":
                u = String(u), u = m.precision ? u.substring(0, m.precision) : u;
                break;
              case "t":
                u = String(!!u), u = m.precision ? u.substring(0, m.precision) : u;
                break;
              case "T":
                u = Object.prototype.toString.call(u).slice(8, -1).toLowerCase(), u = m.precision ? u.substring(0, m.precision) : u;
                break;
              case "u":
                u = parseInt(u, 10) >>> 0;
                break;
              case "v":
                u = u.valueOf(), u = m.precision ? u.substring(0, m.precision) : u;
                break;
              case "x":
                u = (parseInt(u, 10) >>> 0).toString(16);
                break;
              case "X":
                u = (parseInt(u, 10) >>> 0).toString(16).toUpperCase();
                break;
            }
            t.json.test(m.type) ? f += u : (t.number.test(m.type) && (!S || m.sign) ? (O = S ? "+" : "-", u = u.toString().replace(t.sign, "")) : O = "", b = m.pad_char ? m.pad_char === "0" ? "0" : m.pad_char.charAt(1) : " ", _ = m.width - (O + u).length, v = m.width && _ > 0 ? b.repeat(_) : "", f += m.align ? O + u + v : b === "0" ? O + v + u : v + O + u);
          }
        return f;
      }
      var n = Object.create(null);
      function s(o) {
        if (n[o])
          return n[o];
        for (var a = o, l, c = [], u = 0;a; ) {
          if ((l = t.text.exec(a)) !== null)
            c.push(l[0]);
          else if ((l = t.modulo.exec(a)) !== null)
            c.push("%");
          else if ((l = t.placeholder.exec(a)) !== null) {
            if (l[2]) {
              u |= 1;
              var f = [], d = l[2], g = [];
              if ((g = t.key.exec(d)) !== null)
                for (f.push(g[1]);(d = d.substring(g[0].length)) !== ""; )
                  if ((g = t.key_access.exec(d)) !== null)
                    f.push(g[1]);
                  else if ((g = t.index_access.exec(d)) !== null)
                    f.push(g[1]);
                  else
                    throw new SyntaxError("[sprintf] failed to parse named argument key");
              else
                throw new SyntaxError("[sprintf] failed to parse named argument key");
              l[2] = f;
            } else
              u |= 2;
            if (u === 3)
              throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            c.push({ placeholder: l[0], param_no: l[1], keys: l[2], sign: l[3], pad_char: l[4], align: l[5], width: l[6], precision: l[7], type: l[8] });
          } else
            throw new SyntaxError("[sprintf] unexpected placeholder");
          a = a.substring(l[0].length);
        }
        return n[o] = c;
      }
      typeof Vs != "undefined" && (Vs.sprintf = e, Vs.vsprintf = i), typeof window != "undefined" && (window.sprintf = e, window.vsprintf = i, typeof define == "function" && define.amd && define(function() {
        return { sprintf: e, vsprintf: i };
      }));
    })();
  });
  var Ul = w((Jt) => {
    var uS = Jt && Jt.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), fS = Jt && Jt.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), mm = Jt && Jt.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && uS(e, t, i);
      return fS(e, t), e;
    };
    Object.defineProperty(Jt, "__esModule", { value: true });
    Jt.Address4 = undefined;
    var pm = mm(Ml()), Vt = mm(ql()), dm = Us(), hn = Dl(), Br = fn(), jl = class t {
      constructor(e) {
        this.groups = Vt.GROUPS, this.parsedAddress = [], this.parsedSubnet = "", this.subnet = "/32", this.subnetMask = 32, this.v4 = true, this.isCorrect = pm.isCorrect(Vt.BITS), this.isInSubnet = pm.isInSubnet, this.address = e;
        let i = Vt.RE_SUBNET_STRING.exec(e);
        if (i) {
          if (this.parsedSubnet = i[0].replace("/", ""), this.subnetMask = parseInt(this.parsedSubnet, 10), this.subnet = `/${this.subnetMask}`, this.subnetMask < 0 || this.subnetMask > Vt.BITS)
            throw new dm.AddressError("Invalid subnet mask.");
          e = e.replace(Vt.RE_SUBNET_STRING, "");
        }
        this.addressMinusSuffix = e, this.parsedAddress = this.parse(e);
      }
      static isValid(e) {
        try {
          return new t(e), true;
        } catch {
          return false;
        }
      }
      parse(e) {
        let i = e.split(".");
        if (!e.match(Vt.RE_ADDRESS))
          throw new dm.AddressError("Invalid IPv4 address.");
        return i;
      }
      correctForm() {
        return this.parsedAddress.map((e) => parseInt(e, 10)).join(".");
      }
      static fromHex(e) {
        let i = e.replace(/:/g, "").padStart(8, "0"), r = [], n;
        for (n = 0;n < 8; n += 2) {
          let s = i.slice(n, n + 2);
          r.push(parseInt(s, 16));
        }
        return new t(r.join("."));
      }
      static fromInteger(e) {
        return t.fromHex(e.toString(16));
      }
      static fromArpa(e) {
        let r = e.replace(/(\.in-addr\.arpa)?\.$/, "").split(".").reverse().join(".");
        return new t(r);
      }
      toHex() {
        return this.parsedAddress.map((e) => (0, Br.sprintf)("%02x", parseInt(e, 10))).join(":");
      }
      toArray() {
        return this.parsedAddress.map((e) => parseInt(e, 10));
      }
      toGroup6() {
        let e = [], i;
        for (i = 0;i < Vt.GROUPS; i += 2) {
          let r = (0, Br.sprintf)("%02x%02x", parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
          e.push((0, Br.sprintf)("%x", parseInt(r, 16)));
        }
        return e.join(":");
      }
      bigInteger() {
        return new hn.BigInteger(this.parsedAddress.map((e) => (0, Br.sprintf)("%02x", parseInt(e, 10))).join(""), 16);
      }
      _startAddress() {
        return new hn.BigInteger(this.mask() + "0".repeat(Vt.BITS - this.subnetMask), 2);
      }
      startAddress() {
        return t.fromBigInteger(this._startAddress());
      }
      startAddressExclusive() {
        let e = new hn.BigInteger("1");
        return t.fromBigInteger(this._startAddress().add(e));
      }
      _endAddress() {
        return new hn.BigInteger(this.mask() + "1".repeat(Vt.BITS - this.subnetMask), 2);
      }
      endAddress() {
        return t.fromBigInteger(this._endAddress());
      }
      endAddressExclusive() {
        let e = new hn.BigInteger("1");
        return t.fromBigInteger(this._endAddress().subtract(e));
      }
      static fromBigInteger(e) {
        return t.fromInteger(parseInt(e.toString(), 10));
      }
      mask(e) {
        return e === undefined && (e = this.subnetMask), this.getBitsBase2(0, e);
      }
      getBitsBase2(e, i) {
        return this.binaryZeroPad().slice(e, i);
      }
      reverseForm(e) {
        e || (e = {});
        let i = this.correctForm().split(".").reverse().join(".");
        return e.omitSuffix ? i : (0, Br.sprintf)("%s.in-addr.arpa.", i);
      }
      isMulticast() {
        return this.isInSubnet(new t("224.0.0.0/4"));
      }
      binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(Vt.BITS, "0");
      }
      groupForV6() {
        let e = this.parsedAddress;
        return this.address.replace(Vt.RE_ADDRESS, (0, Br.sprintf)('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>', e.slice(0, 2).join("."), e.slice(2, 4).join(".")));
      }
    };
    Jt.Address4 = jl;
  });
  var $l = w((qe) => {
    Object.defineProperty(qe, "__esModule", { value: true });
    qe.RE_URL_WITH_PORT = qe.RE_URL = qe.RE_ZONE_STRING = qe.RE_SUBNET_STRING = qe.RE_BAD_ADDRESS = qe.RE_BAD_CHARACTERS = qe.TYPES = qe.SCOPES = qe.GROUPS = qe.BITS = undefined;
    qe.BITS = 128;
    qe.GROUPS = 8;
    qe.SCOPES = { 0: "Reserved", 1: "Interface local", 2: "Link local", 4: "Admin local", 5: "Site local", 8: "Organization local", 14: "Global", 15: "Reserved" };
    qe.TYPES = { "ff01::1/128": "Multicast (All nodes on this interface)", "ff01::2/128": "Multicast (All routers on this interface)", "ff02::1/128": "Multicast (All nodes on this link)", "ff02::2/128": "Multicast (All routers on this link)", "ff05::2/128": "Multicast (All routers in this site)", "ff02::5/128": "Multicast (OSPFv3 AllSPF routers)", "ff02::6/128": "Multicast (OSPFv3 AllDR routers)", "ff02::9/128": "Multicast (RIP routers)", "ff02::a/128": "Multicast (EIGRP routers)", "ff02::d/128": "Multicast (PIM routers)", "ff02::16/128": "Multicast (MLDv2 reports)", "ff01::fb/128": "Multicast (mDNSv6)", "ff02::fb/128": "Multicast (mDNSv6)", "ff05::fb/128": "Multicast (mDNSv6)", "ff02::1:2/128": "Multicast (All DHCP servers and relay agents on this link)", "ff05::1:2/128": "Multicast (All DHCP servers and relay agents in this site)", "ff02::1:3/128": "Multicast (All DHCP servers on this link)", "ff05::1:3/128": "Multicast (All DHCP servers in this site)", "::/128": "Unspecified", "::1/128": "Loopback", "ff00::/8": "Multicast", "fe80::/10": "Link-local unicast" };
    qe.RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;
    qe.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;
    qe.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
    qe.RE_ZONE_STRING = /%.*$/;
    qe.RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
    qe.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);
  });
  var Vl = w((Zt) => {
    Object.defineProperty(Zt, "__esModule", { value: true });
    Zt.simpleGroup = Zt.spanLeadingZeroes = Zt.spanAll = Zt.spanAllZeroes = undefined;
    var gm = fn();
    function vm(t) {
      return t.replace(/(0+)/g, '<span class="zero">$1</span>');
    }
    Zt.spanAllZeroes = vm;
    function hS(t, e = 0) {
      return t.split("").map((r, n) => (0, gm.sprintf)('<span class="digit value-%s position-%d">%s</span>', r, n + e, vm(r))).join("");
    }
    Zt.spanAll = hS;
    function ym(t) {
      return t.replace(/^(0+)/, '<span class="zero">$1</span>');
    }
    function pS(t) {
      return t.split(":").map((i) => ym(i)).join(":");
    }
    Zt.spanLeadingZeroes = pS;
    function dS(t, e = 0) {
      return t.split(":").map((r, n) => /group-v4/.test(r) ? r : (0, gm.sprintf)('<span class="hover-group group-%d">%s</span>', n + e, ym(r)));
    }
    Zt.simpleGroup = dS;
  });
  var bm = w((ze) => {
    var mS = ze && ze.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), gS = ze && ze.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), vS = ze && ze.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && mS(e, t, i);
      return gS(e, t), e;
    };
    Object.defineProperty(ze, "__esModule", { value: true });
    ze.possibleElisions = ze.simpleRegularExpression = ze.ADDRESS_BOUNDARY = ze.padGroup = ze.groupPossibilities = undefined;
    var yS = vS($l()), Rr = fn();
    function Gs(t) {
      return (0, Rr.sprintf)("(%s)", t.join("|"));
    }
    ze.groupPossibilities = Gs;
    function Hs(t) {
      return t.length < 4 ? (0, Rr.sprintf)("0{0,%d}%s", 4 - t.length, t) : t;
    }
    ze.padGroup = Hs;
    ze.ADDRESS_BOUNDARY = "[^A-Fa-f0-9:]";
    function bS(t) {
      let e = [];
      t.forEach((r, n) => {
        parseInt(r, 16) === 0 && e.push(n);
      });
      let i = e.map((r) => t.map((n, s) => {
        if (s === r) {
          let o = s === 0 || s === yS.GROUPS - 1 ? ":" : "";
          return Gs([Hs(n), o]);
        }
        return Hs(n);
      }).join(":"));
      return i.push(t.map(Hs).join(":")), Gs(i);
    }
    ze.simpleRegularExpression = bS;
    function _S(t, e, i) {
      let r = e ? "" : ":", n = i ? "" : ":", s = [];
      !e && !i && s.push("::"), e && i && s.push(""), (i && !e || !i && e) && s.push(":"), s.push((0, Rr.sprintf)("%s(:0{1,4}){1,%d}", r, t - 1)), s.push((0, Rr.sprintf)("(0{1,4}:){1,%d}%s", t - 1, n)), s.push((0, Rr.sprintf)("(0{1,4}:){%d}0{1,4}", t - 1));
      for (let o = 1;o < t - 1; o++)
        for (let a = 1;a < t - o; a++)
          s.push((0, Rr.sprintf)("(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}", a, t - a - o - 1));
      return Gs(s);
    }
    ze.possibleElisions = _S;
  });
  var Sm = w((Qt) => {
    var wS = Qt && Qt.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), xS = Qt && Qt.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), Ws = Qt && Qt.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && wS(e, t, i);
      return xS(e, t), e;
    };
    Object.defineProperty(Qt, "__esModule", { value: true });
    Qt.Address6 = undefined;
    var _m = Ws(Ml()), Hl = Ws(ql()), Le = Ws($l()), Gl = Ws(Vl()), Ji = Ul(), Zi = bm(), ci = Us(), lt = Dl(), ct = fn();
    function Ys(t) {
      if (!t)
        throw new Error("Assertion failed.");
    }
    function SS(t) {
      let e = /(\d+)(\d{3})/;
      for (;e.test(t); )
        t = t.replace(e, "$1,$2");
      return t;
    }
    function ES(t) {
      return t = t.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2'), t = t.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2'), t;
    }
    function kS(t, e) {
      let i = [], r = [], n;
      for (n = 0;n < t.length; n++)
        n < e[0] ? i.push(t[n]) : n > e[1] && r.push(t[n]);
      return i.concat(["compact"]).concat(r);
    }
    function wm(t) {
      return (0, ct.sprintf)("%04x", parseInt(t, 16));
    }
    function xm(t) {
      return t & 255;
    }
    var Yl = class t {
      constructor(e, i) {
        this.addressMinusSuffix = "", this.parsedSubnet = "", this.subnet = "/128", this.subnetMask = 128, this.v4 = false, this.zone = "", this.isInSubnet = _m.isInSubnet, this.isCorrect = _m.isCorrect(Le.BITS), i === undefined ? this.groups = Le.GROUPS : this.groups = i, this.address = e;
        let r = Le.RE_SUBNET_STRING.exec(e);
        if (r) {
          if (this.parsedSubnet = r[0].replace("/", ""), this.subnetMask = parseInt(this.parsedSubnet, 10), this.subnet = `/${this.subnetMask}`, Number.isNaN(this.subnetMask) || this.subnetMask < 0 || this.subnetMask > Le.BITS)
            throw new ci.AddressError("Invalid subnet mask.");
          e = e.replace(Le.RE_SUBNET_STRING, "");
        } else if (/\//.test(e))
          throw new ci.AddressError("Invalid subnet mask.");
        let n = Le.RE_ZONE_STRING.exec(e);
        n && (this.zone = n[0], e = e.replace(Le.RE_ZONE_STRING, "")), this.addressMinusSuffix = e, this.parsedAddress = this.parse(this.addressMinusSuffix);
      }
      static isValid(e) {
        try {
          return new t(e), true;
        } catch {
          return false;
        }
      }
      static fromBigInteger(e) {
        let i = e.toString(16).padStart(32, "0"), r = [], n;
        for (n = 0;n < Le.GROUPS; n++)
          r.push(i.slice(n * 4, (n + 1) * 4));
        return new t(r.join(":"));
      }
      static fromURL(e) {
        let i, r = null, n;
        if (e.indexOf("[") !== -1 && e.indexOf("]:") !== -1) {
          if (n = Le.RE_URL_WITH_PORT.exec(e), n === null)
            return { error: "failed to parse address with port", address: null, port: null };
          i = n[1], r = n[2];
        } else if (e.indexOf("/") !== -1) {
          if (e = e.replace(/^[a-z0-9]+:\/\//, ""), n = Le.RE_URL.exec(e), n === null)
            return { error: "failed to parse address from URL", address: null, port: null };
          i = n[1];
        } else
          i = e;
        return r ? (r = parseInt(r, 10), (r < 0 || r > 65536) && (r = null)) : r = null, { address: new t(i), port: r };
      }
      static fromAddress4(e) {
        let i = new Ji.Address4(e), r = Le.BITS - (Hl.BITS - i.subnetMask);
        return new t(`::ffff:${i.correctForm()}/${r}`);
      }
      static fromArpa(e) {
        let i = e.replace(/(\.ip6\.arpa)?\.$/, ""), r = 7;
        if (i.length !== 63)
          throw new ci.AddressError("Invalid 'ip6.arpa' form.");
        let n = i.split(".").reverse();
        for (let s = r;s > 0; s--) {
          let o = s * 4;
          n.splice(o, 0, ":");
        }
        return i = n.join(""), new t(i);
      }
      microsoftTranscription() {
        return (0, ct.sprintf)("%s.ipv6-literal.net", this.correctForm().replace(/:/g, "-"));
      }
      mask(e = this.subnetMask) {
        return this.getBitsBase2(0, e);
      }
      possibleSubnets(e = 128) {
        let i = Le.BITS - this.subnetMask, r = Math.abs(e - Le.BITS), n = i - r;
        return n < 0 ? "0" : SS(new lt.BigInteger("2", 10).pow(n).toString(10));
      }
      _startAddress() {
        return new lt.BigInteger(this.mask() + "0".repeat(Le.BITS - this.subnetMask), 2);
      }
      startAddress() {
        return t.fromBigInteger(this._startAddress());
      }
      startAddressExclusive() {
        let e = new lt.BigInteger("1");
        return t.fromBigInteger(this._startAddress().add(e));
      }
      _endAddress() {
        return new lt.BigInteger(this.mask() + "1".repeat(Le.BITS - this.subnetMask), 2);
      }
      endAddress() {
        return t.fromBigInteger(this._endAddress());
      }
      endAddressExclusive() {
        let e = new lt.BigInteger("1");
        return t.fromBigInteger(this._endAddress().subtract(e));
      }
      getScope() {
        let e = Le.SCOPES[this.getBits(12, 16).intValue()];
        return this.getType() === "Global unicast" && e !== "Link local" && (e = "Global"), e || "Unknown";
      }
      getType() {
        for (let e of Object.keys(Le.TYPES))
          if (this.isInSubnet(new t(e)))
            return Le.TYPES[e];
        return "Global unicast";
      }
      getBits(e, i) {
        return new lt.BigInteger(this.getBitsBase2(e, i), 2);
      }
      getBitsBase2(e, i) {
        return this.binaryZeroPad().slice(e, i);
      }
      getBitsBase16(e, i) {
        let r = i - e;
        if (r % 4 !== 0)
          throw new Error("Length of bits to retrieve must be divisible by four");
        return this.getBits(e, i).toString(16).padStart(r / 4, "0");
      }
      getBitsPastSubnet() {
        return this.getBitsBase2(this.subnetMask, Le.BITS);
      }
      reverseForm(e) {
        e || (e = {});
        let i = Math.floor(this.subnetMask / 4), r = this.canonicalForm().replace(/:/g, "").split("").slice(0, i).reverse().join(".");
        return i > 0 ? e.omitSuffix ? r : (0, ct.sprintf)("%s.ip6.arpa.", r) : e.omitSuffix ? "" : "ip6.arpa.";
      }
      correctForm() {
        let e, i = [], r = 0, n = [];
        for (e = 0;e < this.parsedAddress.length; e++) {
          let a = parseInt(this.parsedAddress[e], 16);
          a === 0 && r++, a !== 0 && r > 0 && (r > 1 && n.push([e - r, e - 1]), r = 0);
        }
        r > 1 && n.push([this.parsedAddress.length - r, this.parsedAddress.length - 1]);
        let s = n.map((a) => a[1] - a[0] + 1);
        if (n.length > 0) {
          let a = s.indexOf(Math.max(...s));
          i = kS(this.parsedAddress, n[a]);
        } else
          i = this.parsedAddress;
        for (e = 0;e < i.length; e++)
          i[e] !== "compact" && (i[e] = parseInt(i[e], 16).toString(16));
        let o = i.join(":");
        return o = o.replace(/^compact$/, "::"), o = o.replace(/^compact|compact$/, ":"), o = o.replace(/compact/, ""), o;
      }
      binaryZeroPad() {
        return this.bigInteger().toString(2).padStart(Le.BITS, "0");
      }
      parse4in6(e) {
        let i = e.split(":"), n = i.slice(-1)[0].match(Hl.RE_ADDRESS);
        if (n) {
          this.parsedAddress4 = n[0], this.address4 = new Ji.Address4(this.parsedAddress4);
          for (let s = 0;s < this.address4.groups; s++)
            if (/^0[0-9]+/.test(this.address4.parsedAddress[s]))
              throw new ci.AddressError("IPv4 addresses can't have leading zeroes.", e.replace(Hl.RE_ADDRESS, this.address4.parsedAddress.map(ES).join(".")));
          this.v4 = true, i[i.length - 1] = this.address4.toGroup6(), e = i.join(":");
        }
        return e;
      }
      parse(e) {
        e = this.parse4in6(e);
        let i = e.match(Le.RE_BAD_CHARACTERS);
        if (i)
          throw new ci.AddressError((0, ct.sprintf)("Bad character%s detected in address: %s", i.length > 1 ? "s" : "", i.join("")), e.replace(Le.RE_BAD_CHARACTERS, '<span class="parse-error">$1</span>'));
        let r = e.match(Le.RE_BAD_ADDRESS);
        if (r)
          throw new ci.AddressError((0, ct.sprintf)("Address failed regex: %s", r.join("")), e.replace(Le.RE_BAD_ADDRESS, '<span class="parse-error">$1</span>'));
        let n = [], s = e.split("::");
        if (s.length === 2) {
          let o = s[0].split(":"), a = s[1].split(":");
          o.length === 1 && o[0] === "" && (o = []), a.length === 1 && a[0] === "" && (a = []);
          let l = this.groups - (o.length + a.length);
          if (!l)
            throw new ci.AddressError("Error parsing groups");
          this.elidedGroups = l, this.elisionBegin = o.length, this.elisionEnd = o.length + this.elidedGroups, n = n.concat(o);
          for (let c = 0;c < l; c++)
            n.push("0");
          n = n.concat(a);
        } else if (s.length === 1)
          n = e.split(":"), this.elidedGroups = 0;
        else
          throw new ci.AddressError("Too many :: groups found");
        if (n = n.map((o) => (0, ct.sprintf)("%x", parseInt(o, 16))), n.length !== this.groups)
          throw new ci.AddressError("Incorrect number of groups found");
        return n;
      }
      canonicalForm() {
        return this.parsedAddress.map(wm).join(":");
      }
      decimal() {
        return this.parsedAddress.map((e) => (0, ct.sprintf)("%05d", parseInt(e, 16))).join(":");
      }
      bigInteger() {
        return new lt.BigInteger(this.parsedAddress.map(wm).join(""), 16);
      }
      to4() {
        let e = this.binaryZeroPad().split("");
        return Ji.Address4.fromHex(new lt.BigInteger(e.slice(96, 128).join(""), 2).toString(16));
      }
      to4in6() {
        let e = this.to4(), r = new t(this.parsedAddress.slice(0, 6).join(":"), 6).correctForm(), n = "";
        return /:$/.test(r) || (n = ":"), r + n + e.address;
      }
      inspectTeredo() {
        let e = this.getBitsBase16(0, 32), i = this.getBits(80, 96).xor(new lt.BigInteger("ffff", 16)).toString(), r = Ji.Address4.fromHex(this.getBitsBase16(32, 64)), n = Ji.Address4.fromHex(this.getBits(96, 128).xor(new lt.BigInteger("ffffffff", 16)).toString(16)), s = this.getBits(64, 80), o = this.getBitsBase2(64, 80), a = s.testBit(15), l = s.testBit(14), c = s.testBit(8), u = s.testBit(9), f = new lt.BigInteger(o.slice(2, 6) + o.slice(8, 16), 2).toString(10);
        return { prefix: (0, ct.sprintf)("%s:%s", e.slice(0, 4), e.slice(4, 8)), server4: r.address, client4: n.address, flags: o, coneNat: a, microsoft: { reserved: l, universalLocal: u, groupIndividual: c, nonce: f }, udpPort: i };
      }
      inspect6to4() {
        let e = this.getBitsBase16(0, 16), i = Ji.Address4.fromHex(this.getBitsBase16(16, 48));
        return { prefix: (0, ct.sprintf)("%s", e.slice(0, 4)), gateway: i.address };
      }
      to6to4() {
        if (!this.is4())
          return null;
        let e = ["2002", this.getBitsBase16(96, 112), this.getBitsBase16(112, 128), "", "/16"].join(":");
        return new t(e);
      }
      toByteArray() {
        let e = this.bigInteger().toByteArray();
        return e.length === 17 && e[0] === 0 ? e.slice(1) : e;
      }
      toUnsignedByteArray() {
        return this.toByteArray().map(xm);
      }
      static fromByteArray(e) {
        return this.fromUnsignedByteArray(e.map(xm));
      }
      static fromUnsignedByteArray(e) {
        let i = new lt.BigInteger("256", 10), r = new lt.BigInteger("0", 10), n = new lt.BigInteger("1", 10);
        for (let s = e.length - 1;s >= 0; s--)
          r = r.add(n.multiply(new lt.BigInteger(e[s].toString(10), 10))), n = n.multiply(i);
        return t.fromBigInteger(r);
      }
      isCanonical() {
        return this.addressMinusSuffix === this.canonicalForm();
      }
      isLinkLocal() {
        return this.getBitsBase2(0, 64) === "1111111010000000000000000000000000000000000000000000000000000000";
      }
      isMulticast() {
        return this.getType() === "Multicast";
      }
      is4() {
        return this.v4;
      }
      isTeredo() {
        return this.isInSubnet(new t("2001::/32"));
      }
      is6to4() {
        return this.isInSubnet(new t("2002::/16"));
      }
      isLoopback() {
        return this.getType() === "Loopback";
      }
      href(e) {
        return e === undefined ? e = "" : e = (0, ct.sprintf)(":%s", e), (0, ct.sprintf)("http://[%s]%s/", this.correctForm(), e);
      }
      link(e) {
        e || (e = {}), e.className === undefined && (e.className = ""), e.prefix === undefined && (e.prefix = "/#address="), e.v4 === undefined && (e.v4 = false);
        let i = this.correctForm;
        return e.v4 && (i = this.to4in6), e.className ? (0, ct.sprintf)('<a href="%1$s%2$s" class="%3$s">%2$s</a>', e.prefix, i.call(this), e.className) : (0, ct.sprintf)('<a href="%1$s%2$s">%2$s</a>', e.prefix, i.call(this));
      }
      group() {
        if (this.elidedGroups === 0)
          return Gl.simpleGroup(this.address).join(":");
        Ys(typeof this.elidedGroups == "number"), Ys(typeof this.elisionBegin == "number");
        let e = [], [i, r] = this.address.split("::");
        i.length ? e.push(...Gl.simpleGroup(i)) : e.push("");
        let n = ["hover-group"];
        for (let s = this.elisionBegin;s < this.elisionBegin + this.elidedGroups; s++)
          n.push((0, ct.sprintf)("group-%d", s));
        return e.push((0, ct.sprintf)('<span class="%s"></span>', n.join(" "))), r.length ? e.push(...Gl.simpleGroup(r, this.elisionEnd)) : e.push(""), this.is4() && (Ys(this.address4 instanceof Ji.Address4), e.pop(), e.push(this.address4.groupForV6())), e.join(":");
      }
      regularExpressionString(e = false) {
        let i = [], r = new t(this.correctForm());
        if (r.elidedGroups === 0)
          i.push((0, Zi.simpleRegularExpression)(r.parsedAddress));
        else if (r.elidedGroups === Le.GROUPS)
          i.push((0, Zi.possibleElisions)(Le.GROUPS));
        else {
          let n = r.address.split("::");
          n[0].length && i.push((0, Zi.simpleRegularExpression)(n[0].split(":"))), Ys(typeof r.elidedGroups == "number"), i.push((0, Zi.possibleElisions)(r.elidedGroups, n[0].length !== 0, n[1].length !== 0)), n[1].length && i.push((0, Zi.simpleRegularExpression)(n[1].split(":"))), i = [i.join(":")];
        }
        return e || (i = ["(?=^|", Zi.ADDRESS_BOUNDARY, "|[^\\w\\:])(", ...i, ")(?=[^\\w\\:]|", Zi.ADDRESS_BOUNDARY, "|$)"]), i.join("");
      }
      regularExpression(e = false) {
        return new RegExp(this.regularExpressionString(e), "i");
      }
    };
    Qt.Address6 = Yl;
  });
  var Wl = w((rt) => {
    var OS = rt && rt.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), CS = rt && rt.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), TS = rt && rt.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && OS(e, t, i);
      return CS(e, t), e;
    };
    Object.defineProperty(rt, "__esModule", { value: true });
    rt.v6 = rt.AddressError = rt.Address6 = rt.Address4 = undefined;
    var AS = Ul();
    Object.defineProperty(rt, "Address4", { enumerable: true, get: function() {
      return AS.Address4;
    } });
    var IS = Sm();
    Object.defineProperty(rt, "Address6", { enumerable: true, get: function() {
      return IS.Address6;
    } });
    var NS = Us();
    Object.defineProperty(rt, "AddressError", { enumerable: true, get: function() {
      return NS.AddressError;
    } });
    var LS = TS(Vl());
    rt.v6 = { helpers: LS };
  });
  var Am = w((Nt) => {
    Object.defineProperty(Nt, "__esModule", { value: true });
    Nt.ipToBuffer = Nt.int32ToIpv4 = Nt.ipv4ToInt32 = Nt.validateSocksClientChainOptions = Nt.validateSocksClientOptions = undefined;
    var ut = Pl(), Ke = Bl(), BS = __require("stream"), zl = Wl(), Em = __require("net");
    function RS(t, e = ["connect", "bind", "associate"]) {
      if (!Ke.SocksCommand[t.command])
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksCommand, t);
      if (e.indexOf(t.command) === -1)
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksCommandForOperation, t);
      if (!Om(t.destination))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!Cm(t.proxy))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsProxy, t);
      if (km(t.proxy, t), t.timeout && !Tm(t.timeout))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsTimeout, t);
      if (t.existing_socket && !(t.existing_socket instanceof BS.Duplex))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsExistingSocket, t);
    }
    Nt.validateSocksClientOptions = RS;
    function PS(t) {
      if (t.command !== "connect")
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksCommandChain, t);
      if (!Om(t.destination))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsDestination, t);
      if (!(t.proxies && Array.isArray(t.proxies) && t.proxies.length >= 2))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsProxiesLength, t);
      if (t.proxies.forEach((e) => {
        if (!Cm(e))
          throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsProxy, t);
        km(e, t);
      }), t.timeout && !Tm(t.timeout))
        throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsTimeout, t);
    }
    Nt.validateSocksClientChainOptions = PS;
    function km(t, e) {
      if (t.custom_auth_method !== undefined) {
        if (t.custom_auth_method < Ke.SOCKS5_CUSTOM_AUTH_START || t.custom_auth_method > Ke.SOCKS5_CUSTOM_AUTH_END)
          throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsCustomAuthRange, e);
        if (t.custom_auth_request_handler === undefined || typeof t.custom_auth_request_handler != "function")
          throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
        if (t.custom_auth_response_size === undefined)
          throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
        if (t.custom_auth_response_handler === undefined || typeof t.custom_auth_response_handler != "function")
          throw new ut.SocksClientError(Ke.ERRORS.InvalidSocksClientOptionsCustomAuthOptions, e);
      }
    }
    function Om(t) {
      return t && typeof t.host == "string" && typeof t.port == "number" && t.port >= 0 && t.port <= 65535;
    }
    function Cm(t) {
      return t && (typeof t.host == "string" || typeof t.ipaddress == "string") && typeof t.port == "number" && t.port >= 0 && t.port <= 65535 && (t.type === 4 || t.type === 5);
    }
    function Tm(t) {
      return typeof t == "number" && t > 0;
    }
    function MS(t) {
      return new zl.Address4(t).toArray().reduce((i, r) => (i << 8) + r, 0);
    }
    Nt.ipv4ToInt32 = MS;
    function qS(t) {
      let e = t >>> 24 & 255, i = t >>> 16 & 255, r = t >>> 8 & 255, n = t & 255;
      return [e, i, r, n].join(".");
    }
    Nt.int32ToIpv4 = qS;
    function FS(t) {
      if (Em.isIPv4(t)) {
        let e = new zl.Address4(t);
        return Buffer.from(e.toArray());
      } else if (Em.isIPv6(t)) {
        let e = new zl.Address6(t);
        return Buffer.from(e.canonicalForm().split(":").map((i) => i.padStart(4, "0")).join(""), "hex");
      } else
        throw new Error("Invalid IP address format");
    }
    Nt.ipToBuffer = FS;
  });
  var Im = w((zs) => {
    Object.defineProperty(zs, "__esModule", { value: true });
    zs.ReceiveBuffer = undefined;
    var Kl = class {
      constructor(e = 4096) {
        this.buffer = Buffer.allocUnsafe(e), this.offset = 0, this.originalSize = e;
      }
      get length() {
        return this.offset;
      }
      append(e) {
        if (!Buffer.isBuffer(e))
          throw new Error("Attempted to append a non-buffer instance to ReceiveBuffer.");
        if (this.offset + e.length >= this.buffer.length) {
          let i = this.buffer;
          this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + e.length)), i.copy(this.buffer);
        }
        return e.copy(this.buffer, this.offset), this.offset += e.length;
      }
      peek(e) {
        if (e > this.offset)
          throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        return this.buffer.slice(0, e);
      }
      get(e) {
        if (e > this.offset)
          throw new Error("Attempted to read beyond the bounds of the managed internal data.");
        let i = Buffer.allocUnsafe(e);
        return this.buffer.slice(0, e).copy(i), this.buffer.copyWithin(0, e, e + this.offset - e), this.offset -= e, i;
      }
    };
    zs.ReceiveBuffer = Kl;
  });
  var Nm = w((wi) => {
    var Pr = wi && wi.__awaiter || function(t, e, i, r) {
      function n(s) {
        return s instanceof i ? s : new i(function(o) {
          o(s);
        });
      }
      return new (i || (i = Promise))(function(s, o) {
        function a(u) {
          try {
            c(r.next(u));
          } catch (f) {
            o(f);
          }
        }
        function l(u) {
          try {
            c(r.throw(u));
          } catch (f) {
            o(f);
          }
        }
        function c(u) {
          u.done ? s(u.value) : n(u.value).then(a, l);
        }
        c((r = r.apply(t, e || [])).next());
      });
    };
    Object.defineProperty(wi, "__esModule", { value: true });
    wi.SocksClientError = wi.SocksClient = undefined;
    var DS = __require("events"), Mr = __require("net"), mt = sm(), q = Bl(), Et = Am(), jS = Im(), Zl = Pl();
    Object.defineProperty(wi, "SocksClientError", { enumerable: true, get: function() {
      return Zl.SocksClientError;
    } });
    var Jl = Wl(), Ql = class t extends DS.EventEmitter {
      constructor(e) {
        super(), this.options = Object.assign({}, e), (0, Et.validateSocksClientOptions)(e), this.setState(q.SocksClientState.Created);
      }
      static createConnection(e, i) {
        return new Promise((r, n) => {
          try {
            (0, Et.validateSocksClientOptions)(e, ["connect"]);
          } catch (o) {
            return typeof i == "function" ? (i(o), r(o)) : n(o);
          }
          let s = new t(e);
          s.connect(e.existing_socket), s.once("established", (o) => {
            s.removeAllListeners(), typeof i == "function" && i(null, o), r(o);
          }), s.once("error", (o) => {
            s.removeAllListeners(), typeof i == "function" ? (i(o), r(o)) : n(o);
          });
        });
      }
      static createConnectionChain(e, i) {
        return new Promise((r, n) => Pr(this, undefined, undefined, function* () {
          try {
            (0, Et.validateSocksClientChainOptions)(e);
          } catch (s) {
            return typeof i == "function" ? (i(s), r(s)) : n(s);
          }
          e.randomizeChain && (0, Zl.shuffleArray)(e.proxies);
          try {
            let s;
            for (let o = 0;o < e.proxies.length; o++) {
              let a = e.proxies[o], l = o === e.proxies.length - 1 ? e.destination : { host: e.proxies[o + 1].host || e.proxies[o + 1].ipaddress, port: e.proxies[o + 1].port }, c = yield t.createConnection({ command: "connect", proxy: a, destination: l, existing_socket: s });
              s = s || c.socket;
            }
            typeof i == "function" ? (i(null, { socket: s }), r({ socket: s })) : r({ socket: s });
          } catch (s) {
            typeof i == "function" ? (i(s), r(s)) : n(s);
          }
        }));
      }
      static createUDPFrame(e) {
        let i = new mt.SmartBuffer;
        return i.writeUInt16BE(0), i.writeUInt8(e.frameNumber || 0), Mr.isIPv4(e.remoteHost.host) ? (i.writeUInt8(q.Socks5HostType.IPv4), i.writeUInt32BE((0, Et.ipv4ToInt32)(e.remoteHost.host))) : Mr.isIPv6(e.remoteHost.host) ? (i.writeUInt8(q.Socks5HostType.IPv6), i.writeBuffer((0, Et.ipToBuffer)(e.remoteHost.host))) : (i.writeUInt8(q.Socks5HostType.Hostname), i.writeUInt8(Buffer.byteLength(e.remoteHost.host)), i.writeString(e.remoteHost.host)), i.writeUInt16BE(e.remoteHost.port), i.writeBuffer(e.data), i.toBuffer();
      }
      static parseUDPFrame(e) {
        let i = mt.SmartBuffer.fromBuffer(e);
        i.readOffset = 2;
        let r = i.readUInt8(), n = i.readUInt8(), s;
        n === q.Socks5HostType.IPv4 ? s = (0, Et.int32ToIpv4)(i.readUInt32BE()) : n === q.Socks5HostType.IPv6 ? s = Jl.Address6.fromByteArray(Array.from(i.readBuffer(16))).canonicalForm() : s = i.readString(i.readUInt8());
        let o = i.readUInt16BE();
        return { frameNumber: r, remoteHost: { host: s, port: o }, data: i.readBuffer() };
      }
      setState(e) {
        this.state !== q.SocksClientState.Error && (this.state = e);
      }
      connect(e) {
        this.onDataReceived = (r) => this.onDataReceivedHandler(r), this.onClose = () => this.onCloseHandler(), this.onError = (r) => this.onErrorHandler(r), this.onConnect = () => this.onConnectHandler();
        let i = setTimeout(() => this.onEstablishedTimeout(), this.options.timeout || q.DEFAULT_TIMEOUT);
        i.unref && typeof i.unref == "function" && i.unref(), e ? this.socket = e : this.socket = new Mr.Socket, this.socket.once("close", this.onClose), this.socket.once("error", this.onError), this.socket.once("connect", this.onConnect), this.socket.on("data", this.onDataReceived), this.setState(q.SocksClientState.Connecting), this.receiveBuffer = new jS.ReceiveBuffer, e ? this.socket.emit("connect") : (this.socket.connect(this.getSocketOptions()), this.options.set_tcp_nodelay !== undefined && this.options.set_tcp_nodelay !== null && this.socket.setNoDelay(!!this.options.set_tcp_nodelay)), this.prependOnceListener("established", (r) => {
          setImmediate(() => {
            if (this.receiveBuffer.length > 0) {
              let n = this.receiveBuffer.get(this.receiveBuffer.length);
              r.socket.emit("data", n);
            }
            r.socket.resume();
          });
        });
      }
      getSocketOptions() {
        return Object.assign(Object.assign({}, this.options.socket_options), { host: this.options.proxy.host || this.options.proxy.ipaddress, port: this.options.proxy.port });
      }
      onEstablishedTimeout() {
        this.state !== q.SocksClientState.Established && this.state !== q.SocksClientState.BoundWaitingForConnection && this.closeSocket(q.ERRORS.ProxyConnectionTimedOut);
      }
      onConnectHandler() {
        this.setState(q.SocksClientState.Connected), this.options.proxy.type === 4 ? this.sendSocks4InitialHandshake() : this.sendSocks5InitialHandshake(), this.setState(q.SocksClientState.SentInitialHandshake);
      }
      onDataReceivedHandler(e) {
        this.receiveBuffer.append(e), this.processData();
      }
      processData() {
        for (;this.state !== q.SocksClientState.Established && this.state !== q.SocksClientState.Error && this.receiveBuffer.length >= this.nextRequiredPacketBufferSize; )
          if (this.state === q.SocksClientState.SentInitialHandshake)
            this.options.proxy.type === 4 ? this.handleSocks4FinalHandshakeResponse() : this.handleInitialSocks5HandshakeResponse();
          else if (this.state === q.SocksClientState.SentAuthentication)
            this.handleInitialSocks5AuthenticationHandshakeResponse();
          else if (this.state === q.SocksClientState.SentFinalHandshake)
            this.handleSocks5FinalHandshakeResponse();
          else if (this.state === q.SocksClientState.BoundWaitingForConnection)
            this.options.proxy.type === 4 ? this.handleSocks4IncomingConnectionResponse() : this.handleSocks5IncomingConnectionResponse();
          else {
            this.closeSocket(q.ERRORS.InternalError);
            break;
          }
      }
      onCloseHandler() {
        this.closeSocket(q.ERRORS.SocketClosed);
      }
      onErrorHandler(e) {
        this.closeSocket(e.message);
      }
      removeInternalSocketHandlers() {
        this.socket.pause(), this.socket.removeListener("data", this.onDataReceived), this.socket.removeListener("close", this.onClose), this.socket.removeListener("error", this.onError), this.socket.removeListener("connect", this.onConnect);
      }
      closeSocket(e) {
        this.state !== q.SocksClientState.Error && (this.setState(q.SocksClientState.Error), this.socket.destroy(), this.removeInternalSocketHandlers(), this.emit("error", new Zl.SocksClientError(e, this.options)));
      }
      sendSocks4InitialHandshake() {
        let e = this.options.proxy.userId || "", i = new mt.SmartBuffer;
        i.writeUInt8(4), i.writeUInt8(q.SocksCommand[this.options.command]), i.writeUInt16BE(this.options.destination.port), Mr.isIPv4(this.options.destination.host) ? (i.writeBuffer((0, Et.ipToBuffer)(this.options.destination.host)), i.writeStringNT(e)) : (i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(0), i.writeUInt8(1), i.writeStringNT(e), i.writeStringNT(this.options.destination.host)), this.nextRequiredPacketBufferSize = q.SOCKS_INCOMING_PACKET_SIZES.Socks4Response, this.socket.write(i.toBuffer());
      }
      handleSocks4FinalHandshakeResponse() {
        let e = this.receiveBuffer.get(8);
        if (e[1] !== q.Socks4Response.Granted)
          this.closeSocket(`${q.ERRORS.Socks4ProxyRejectedConnection} - (${q.Socks4Response[e[1]]})`);
        else if (q.SocksCommand[this.options.command] === q.SocksCommand.bind) {
          let i = mt.SmartBuffer.fromBuffer(e);
          i.readOffset = 2;
          let r = { port: i.readUInt16BE(), host: (0, Et.int32ToIpv4)(i.readUInt32BE()) };
          r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress), this.setState(q.SocksClientState.BoundWaitingForConnection), this.emit("bound", { remoteHost: r, socket: this.socket });
        } else
          this.setState(q.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { socket: this.socket });
      }
      handleSocks4IncomingConnectionResponse() {
        let e = this.receiveBuffer.get(8);
        if (e[1] !== q.Socks4Response.Granted)
          this.closeSocket(`${q.ERRORS.Socks4ProxyRejectedIncomingBoundConnection} - (${q.Socks4Response[e[1]]})`);
        else {
          let i = mt.SmartBuffer.fromBuffer(e);
          i.readOffset = 2;
          let r = { port: i.readUInt16BE(), host: (0, Et.int32ToIpv4)(i.readUInt32BE()) };
          this.setState(q.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
        }
      }
      sendSocks5InitialHandshake() {
        let e = new mt.SmartBuffer, i = [q.Socks5Auth.NoAuth];
        (this.options.proxy.userId || this.options.proxy.password) && i.push(q.Socks5Auth.UserPass), this.options.proxy.custom_auth_method !== undefined && i.push(this.options.proxy.custom_auth_method), e.writeUInt8(5), e.writeUInt8(i.length);
        for (let r of i)
          e.writeUInt8(r);
        this.nextRequiredPacketBufferSize = q.SOCKS_INCOMING_PACKET_SIZES.Socks5InitialHandshakeResponse, this.socket.write(e.toBuffer()), this.setState(q.SocksClientState.SentInitialHandshake);
      }
      handleInitialSocks5HandshakeResponse() {
        let e = this.receiveBuffer.get(2);
        e[0] !== 5 ? this.closeSocket(q.ERRORS.InvalidSocks5IntiailHandshakeSocksVersion) : e[1] === q.SOCKS5_NO_ACCEPTABLE_AUTH ? this.closeSocket(q.ERRORS.InvalidSocks5InitialHandshakeNoAcceptedAuthType) : e[1] === q.Socks5Auth.NoAuth ? (this.socks5ChosenAuthType = q.Socks5Auth.NoAuth, this.sendSocks5CommandRequest()) : e[1] === q.Socks5Auth.UserPass ? (this.socks5ChosenAuthType = q.Socks5Auth.UserPass, this.sendSocks5UserPassAuthentication()) : e[1] === this.options.proxy.custom_auth_method ? (this.socks5ChosenAuthType = this.options.proxy.custom_auth_method, this.sendSocks5CustomAuthentication()) : this.closeSocket(q.ERRORS.InvalidSocks5InitialHandshakeUnknownAuthType);
      }
      sendSocks5UserPassAuthentication() {
        let e = this.options.proxy.userId || "", i = this.options.proxy.password || "", r = new mt.SmartBuffer;
        r.writeUInt8(1), r.writeUInt8(Buffer.byteLength(e)), r.writeString(e), r.writeUInt8(Buffer.byteLength(i)), r.writeString(i), this.nextRequiredPacketBufferSize = q.SOCKS_INCOMING_PACKET_SIZES.Socks5UserPassAuthenticationResponse, this.socket.write(r.toBuffer()), this.setState(q.SocksClientState.SentAuthentication);
      }
      sendSocks5CustomAuthentication() {
        return Pr(this, undefined, undefined, function* () {
          this.nextRequiredPacketBufferSize = this.options.proxy.custom_auth_response_size, this.socket.write(yield this.options.proxy.custom_auth_request_handler()), this.setState(q.SocksClientState.SentAuthentication);
        });
      }
      handleSocks5CustomAuthHandshakeResponse(e) {
        return Pr(this, undefined, undefined, function* () {
          return yield this.options.proxy.custom_auth_response_handler(e);
        });
      }
      handleSocks5AuthenticationNoAuthHandshakeResponse(e) {
        return Pr(this, undefined, undefined, function* () {
          return e[1] === 0;
        });
      }
      handleSocks5AuthenticationUserPassHandshakeResponse(e) {
        return Pr(this, undefined, undefined, function* () {
          return e[1] === 0;
        });
      }
      handleInitialSocks5AuthenticationHandshakeResponse() {
        return Pr(this, undefined, undefined, function* () {
          this.setState(q.SocksClientState.ReceivedAuthenticationResponse);
          let e = false;
          this.socks5ChosenAuthType === q.Socks5Auth.NoAuth ? e = yield this.handleSocks5AuthenticationNoAuthHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === q.Socks5Auth.UserPass ? e = yield this.handleSocks5AuthenticationUserPassHandshakeResponse(this.receiveBuffer.get(2)) : this.socks5ChosenAuthType === this.options.proxy.custom_auth_method && (e = yield this.handleSocks5CustomAuthHandshakeResponse(this.receiveBuffer.get(this.options.proxy.custom_auth_response_size))), e ? this.sendSocks5CommandRequest() : this.closeSocket(q.ERRORS.Socks5AuthenticationFailed);
        });
      }
      sendSocks5CommandRequest() {
        let e = new mt.SmartBuffer;
        e.writeUInt8(5), e.writeUInt8(q.SocksCommand[this.options.command]), e.writeUInt8(0), Mr.isIPv4(this.options.destination.host) ? (e.writeUInt8(q.Socks5HostType.IPv4), e.writeBuffer((0, Et.ipToBuffer)(this.options.destination.host))) : Mr.isIPv6(this.options.destination.host) ? (e.writeUInt8(q.Socks5HostType.IPv6), e.writeBuffer((0, Et.ipToBuffer)(this.options.destination.host))) : (e.writeUInt8(q.Socks5HostType.Hostname), e.writeUInt8(this.options.destination.host.length), e.writeString(this.options.destination.host)), e.writeUInt16BE(this.options.destination.port), this.nextRequiredPacketBufferSize = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.socket.write(e.toBuffer()), this.setState(q.SocksClientState.SentFinalHandshake);
      }
      handleSocks5FinalHandshakeResponse() {
        let e = this.receiveBuffer.peek(5);
        if (e[0] !== 5 || e[1] !== q.Socks5Response.Granted)
          this.closeSocket(`${q.ERRORS.InvalidSocks5FinalHandshakeRejected} - ${q.Socks5Response[e[1]]}`);
        else {
          let i = e[3], r, n;
          if (i === q.Socks5HostType.IPv4) {
            let s = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = mt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: (0, Et.int32ToIpv4)(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
          } else if (i === q.Socks5HostType.Hostname) {
            let s = e[4], o = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
            if (this.receiveBuffer.length < o) {
              this.nextRequiredPacketBufferSize = o;
              return;
            }
            n = mt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
          } else if (i === q.Socks5HostType.IPv6) {
            let s = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = mt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: Jl.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(), port: n.readUInt16BE() };
          }
          this.setState(q.SocksClientState.ReceivedFinalResponse), q.SocksCommand[this.options.command] === q.SocksCommand.connect ? (this.setState(q.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket })) : q.SocksCommand[this.options.command] === q.SocksCommand.bind ? (this.setState(q.SocksClientState.BoundWaitingForConnection), this.nextRequiredPacketBufferSize = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHeader, this.emit("bound", { remoteHost: r, socket: this.socket })) : q.SocksCommand[this.options.command] === q.SocksCommand.associate && (this.setState(q.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket }));
        }
      }
      handleSocks5IncomingConnectionResponse() {
        let e = this.receiveBuffer.peek(5);
        if (e[0] !== 5 || e[1] !== q.Socks5Response.Granted)
          this.closeSocket(`${q.ERRORS.Socks5ProxyRejectedIncomingBoundConnection} - ${q.Socks5Response[e[1]]}`);
        else {
          let i = e[3], r, n;
          if (i === q.Socks5HostType.IPv4) {
            let s = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv4;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = mt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: (0, Et.int32ToIpv4)(n.readUInt32BE()), port: n.readUInt16BE() }, r.host === "0.0.0.0" && (r.host = this.options.proxy.ipaddress);
          } else if (i === q.Socks5HostType.Hostname) {
            let s = e[4], o = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseHostname(s);
            if (this.receiveBuffer.length < o) {
              this.nextRequiredPacketBufferSize = o;
              return;
            }
            n = mt.SmartBuffer.fromBuffer(this.receiveBuffer.get(o).slice(5)), r = { host: n.readString(s), port: n.readUInt16BE() };
          } else if (i === q.Socks5HostType.IPv6) {
            let s = q.SOCKS_INCOMING_PACKET_SIZES.Socks5ResponseIPv6;
            if (this.receiveBuffer.length < s) {
              this.nextRequiredPacketBufferSize = s;
              return;
            }
            n = mt.SmartBuffer.fromBuffer(this.receiveBuffer.get(s).slice(4)), r = { host: Jl.Address6.fromByteArray(Array.from(n.readBuffer(16))).canonicalForm(), port: n.readUInt16BE() };
          }
          this.setState(q.SocksClientState.Established), this.removeInternalSocketHandlers(), this.emit("established", { remoteHost: r, socket: this.socket });
        }
      }
      get socksClientOptions() {
        return Object.assign({}, this.options);
      }
    };
    wi.SocksClient = Ql;
  });
  var Lm = w((Qi) => {
    var US = Qi && Qi.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), $S = Qi && Qi.__exportStar || function(t, e) {
      for (var i in t)
        i !== "default" && !Object.prototype.hasOwnProperty.call(e, i) && US(e, t, i);
    };
    Object.defineProperty(Qi, "__esModule", { value: true });
    $S(Nm(), Qi);
  });
  var Rm = w((Lt) => {
    var VS = Lt && Lt.__createBinding || (Object.create ? function(t, e, i, r) {
      r === undefined && (r = i);
      var n = Object.getOwnPropertyDescriptor(e, i);
      (!n || ("get" in n ? !e.__esModule : n.writable || n.configurable)) && (n = { enumerable: true, get: function() {
        return e[i];
      } }), Object.defineProperty(t, r, n);
    } : function(t, e, i, r) {
      r === undefined && (r = i), t[r] = e[i];
    }), HS = Lt && Lt.__setModuleDefault || (Object.create ? function(t, e) {
      Object.defineProperty(t, "default", { enumerable: true, value: e });
    } : function(t, e) {
      t.default = e;
    }), Bm = Lt && Lt.__importStar || function(t) {
      if (t && t.__esModule)
        return t;
      var e = {};
      if (t != null)
        for (var i in t)
          i !== "default" && Object.prototype.hasOwnProperty.call(t, i) && VS(e, t, i);
      return HS(e, t), e;
    }, GS = Lt && Lt.__importDefault || function(t) {
      return t && t.__esModule ? t : { default: t };
    };
    Object.defineProperty(Lt, "__esModule", { value: true });
    Lt.SocksProxyAgent = undefined;
    var YS = Lm(), WS = ja(), zS = GS(rn()), KS = Bm(__require("dns")), JS = Bm(__require("tls")), ZS = __require("url"), Ks = (0, zS.default)("socks-proxy-agent");
    function QS(t) {
      let e = false, i = 5, r = t.hostname, n = parseInt(t.port, 10) || 1080;
      switch (t.protocol.replace(":", "")) {
        case "socks4":
          e = true, i = 4;
          break;
        case "socks4a":
          i = 4;
          break;
        case "socks5":
          e = true, i = 5;
          break;
        case "socks":
          i = 5;
          break;
        case "socks5h":
          i = 5;
          break;
        default:
          throw new TypeError(`A "socks" protocol must be specified! Got: ${String(t.protocol)}`);
      }
      let s = { host: r, port: n, type: i };
      return t.username && Object.defineProperty(s, "userId", { value: decodeURIComponent(t.username), enumerable: false }), t.password != null && Object.defineProperty(s, "password", { value: decodeURIComponent(t.password), enumerable: false }), { lookup: e, proxy: s };
    }
    var Js = class extends WS.Agent {
      constructor(e, i) {
        var o, a;
        super(i);
        let r = typeof e == "string" ? new ZS.URL(e) : e, { proxy: n, lookup: s } = QS(r);
        this.shouldLookup = s, this.proxy = n, this.timeout = (o = i == null ? undefined : i.timeout) != null ? o : null, this.socketOptions = (a = i == null ? undefined : i.socketOptions) != null ? a : null;
      }
      async connect(e, i) {
        var d;
        let { shouldLookup: r, proxy: n, timeout: s } = this;
        if (!i.host)
          throw new Error("No `host` defined!");
        let { host: o } = i, { port: a, lookup: l = KS.lookup } = i;
        r && (o = await new Promise((g, m) => {
          l(o, {}, (v, b) => {
            v ? m(v) : g(b);
          });
        }));
        let c = { proxy: n, destination: { host: o, port: typeof a == "number" ? a : parseInt(a, 10) }, command: "connect", timeout: s != null ? s : undefined, socket_options: (d = this.socketOptions) != null ? d : undefined }, u = (g) => {
          e.destroy(), f.destroy(), g && g.destroy();
        };
        Ks("Creating socks proxy connection: %o", c);
        let { socket: f } = await YS.SocksClient.createConnection(c);
        if (Ks("Successfully created socks proxy connection"), s !== null && (f.setTimeout(s), f.on("timeout", () => u())), i.secureEndpoint) {
          Ks("Upgrading socket connection to TLS");
          let g = i.servername || i.host, m = JS.connect({ ...XS(i, "host", "path", "port"), socket: f, servername: g });
          return m.once("error", (v) => {
            Ks("Socket TLS error", v.message), u(m);
          }), m;
        }
        return f;
      }
    };
    Js.protocols = ["socks", "socks4", "socks4a", "socks5", "socks5h"];
    Lt.SocksProxyAgent = Js;
    function XS(t, ...e) {
      let i = {}, r;
      for (r in t)
        e.includes(r) || (i[r] = t[r]);
      return i;
    }
  });
  var Mm = w((rN, Pm) => {
    var eE = /[|\\{}()[\]^$+*?.-]/g;
    Pm.exports = (t) => {
      if (typeof t != "string")
        throw new TypeError("Expected a string");
      return t.replace(eE, "\\$&");
    };
  });
  var jm = w((nN, Dm) => {
    var tE = Mm(), iE = typeof process == "object" && process && typeof process.cwd == "function" ? process.cwd() : ".", Fm = [].concat(__require("module").builtinModules, "bootstrap_node", "node").map((t) => new RegExp(`(?:\\((?:node:)?${t}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${t}(?:\\.js)?:\\d+:\\d+$)`));
    Fm.push(/\((?:node:)?internal\/[^:]+:\d+:\d+\)$/, /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/, /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/);
    var Xl = class t {
      constructor(e) {
        e = { ignoredPackages: [], ...e }, "internals" in e || (e.internals = t.nodeInternals()), "cwd" in e || (e.cwd = iE), this._cwd = e.cwd.replace(/\\/g, "/"), this._internals = [].concat(e.internals, rE(e.ignoredPackages)), this._wrapCallSite = e.wrapCallSite || false;
      }
      static nodeInternals() {
        return [...Fm];
      }
      clean(e, i = 0) {
        i = " ".repeat(i), Array.isArray(e) || (e = e.split(`
`)), !/^\s*at /.test(e[0]) && /^\s*at /.test(e[1]) && (e = e.slice(1));
        let r = false, n = null, s = [];
        return e.forEach((o) => {
          if (o = o.replace(/\\/g, "/"), this._internals.some((l) => l.test(o)))
            return;
          let a = /^\s*at /.test(o);
          r ? o = o.trimEnd().replace(/^(\s+)at /, "$1") : (o = o.trim(), a && (o = o.slice(3))), o = o.replace(`${this._cwd}/`, ""), o && (a ? (n && (s.push(n), n = null), s.push(o)) : (r = true, n = o));
        }), s.map((o) => `${i}${o}
`).join("");
      }
      captureString(e, i = this.captureString) {
        typeof e == "function" && (i = e, e = 1 / 0);
        let { stackTraceLimit: r } = Error;
        e && (Error.stackTraceLimit = e);
        let n = {};
        Error.captureStackTrace(n, i);
        let { stack: s } = n;
        return Error.stackTraceLimit = r, this.clean(s);
      }
      capture(e, i = this.capture) {
        typeof e == "function" && (i = e, e = 1 / 0);
        let { prepareStackTrace: r, stackTraceLimit: n } = Error;
        Error.prepareStackTrace = (a, l) => this._wrapCallSite ? l.map(this._wrapCallSite) : l, e && (Error.stackTraceLimit = e);
        let s = {};
        Error.captureStackTrace(s, i);
        let { stack: o } = s;
        return Object.assign(Error, { prepareStackTrace: r, stackTraceLimit: n }), o;
      }
      at(e = this.at) {
        let [i] = this.capture(1, e);
        if (!i)
          return {};
        let r = { line: i.getLineNumber(), column: i.getColumnNumber() };
        qm(r, i.getFileName(), this._cwd), i.isConstructor() && (r.constructor = true), i.isEval() && (r.evalOrigin = i.getEvalOrigin()), i.isNative() && (r.native = true);
        let n;
        try {
          n = i.getTypeName();
        } catch {
        }
        n && n !== "Object" && n !== "[object Object]" && (r.type = n);
        let s = i.getFunctionName();
        s && (r.function = s);
        let o = i.getMethodName();
        return o && s !== o && (r.method = o), r;
      }
      parseLine(e) {
        let i = e && e.match(nE);
        if (!i)
          return null;
        let r = i[1] === "new", n = i[2], s = i[3], o = i[4], a = Number(i[5]), l = Number(i[6]), c = i[7], u = i[8], f = i[9], d = i[10] === "native", g = i[11] === ")", m, v = {};
        if (u && (v.line = Number(u)), f && (v.column = Number(f)), g && c) {
          let b = 0;
          for (let _ = c.length - 1;_ > 0; _--)
            if (c.charAt(_) === ")")
              b++;
            else if (c.charAt(_) === "(" && c.charAt(_ - 1) === " " && (b--, b === -1 && c.charAt(_ - 1) === " ")) {
              let S = c.slice(0, _ - 1);
              c = c.slice(_ + 1), n += ` (${S}`;
              break;
            }
        }
        if (n) {
          let b = n.match(sE);
          b && (n = b[1], m = b[2]);
        }
        return qm(v, c, this._cwd), r && (v.constructor = true), s && (v.evalOrigin = s, v.evalLine = a, v.evalColumn = l, v.evalFile = o && o.replace(/\\/g, "/")), d && (v.native = true), n && (v.function = n), m && n !== m && (v.method = m), v;
      }
    };
    function qm(t, e, i) {
      e && (e = e.replace(/\\/g, "/"), e.startsWith(`${i}/`) && (e = e.slice(i.length + 1)), t.file = e);
    }
    function rE(t) {
      if (t.length === 0)
        return [];
      let e = t.map((i) => tE(i));
      return new RegExp(`[/\\\\]node_modules[/\\\\](?:${e.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
    }
    var nE = new RegExp("^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"), sE = /^(.*?) \[as (.*?)\]$/;
    Dm.exports = Xl;
  });
  var Se = w((Xe) => {
    var ec = Symbol.for("yaml.alias"), Um = Symbol.for("yaml.document"), Zs = Symbol.for("yaml.map"), $m = Symbol.for("yaml.pair"), tc = Symbol.for("yaml.scalar"), Qs = Symbol.for("yaml.seq"), ui = Symbol.for("yaml.node.type"), oE = (t) => !!t && typeof t == "object" && t[ui] === ec, aE = (t) => !!t && typeof t == "object" && t[ui] === Um, lE = (t) => !!t && typeof t == "object" && t[ui] === Zs, cE = (t) => !!t && typeof t == "object" && t[ui] === $m, Vm = (t) => !!t && typeof t == "object" && t[ui] === tc, uE = (t) => !!t && typeof t == "object" && t[ui] === Qs;
    function Hm(t) {
      if (t && typeof t == "object")
        switch (t[ui]) {
          case Zs:
          case Qs:
            return true;
        }
      return false;
    }
    function fE(t) {
      if (t && typeof t == "object")
        switch (t[ui]) {
          case ec:
          case Zs:
          case tc:
          case Qs:
            return true;
        }
      return false;
    }
    var hE = (t) => (Vm(t) || Hm(t)) && !!t.anchor;
    Xe.ALIAS = ec;
    Xe.DOC = Um;
    Xe.MAP = Zs;
    Xe.NODE_TYPE = ui;
    Xe.PAIR = $m;
    Xe.SCALAR = tc;
    Xe.SEQ = Qs;
    Xe.hasAnchor = hE;
    Xe.isAlias = oE;
    Xe.isCollection = Hm;
    Xe.isDocument = aE;
    Xe.isMap = lE;
    Xe.isNode = fE;
    Xe.isPair = cE;
    Xe.isScalar = Vm;
    Xe.isSeq = uE;
  });
  var pn = w((ic) => {
    var He = Se(), gt = Symbol("break visit"), Gm = Symbol("skip children"), Xt = Symbol("remove node");
    function Xs(t, e) {
      let i = Ym(e);
      He.isDocument(t) ? qr(null, t.contents, i, Object.freeze([t])) === Xt && (t.contents = null) : qr(null, t, i, Object.freeze([]));
    }
    Xs.BREAK = gt;
    Xs.SKIP = Gm;
    Xs.REMOVE = Xt;
    function qr(t, e, i, r) {
      let n = Wm(t, e, i, r);
      if (He.isNode(n) || He.isPair(n))
        return zm(t, r, n), qr(t, n, i, r);
      if (typeof n != "symbol") {
        if (He.isCollection(e)) {
          r = Object.freeze(r.concat(e));
          for (let s = 0;s < e.items.length; ++s) {
            let o = qr(s, e.items[s], i, r);
            if (typeof o == "number")
              s = o - 1;
            else {
              if (o === gt)
                return gt;
              o === Xt && (e.items.splice(s, 1), s -= 1);
            }
          }
        } else if (He.isPair(e)) {
          r = Object.freeze(r.concat(e));
          let s = qr("key", e.key, i, r);
          if (s === gt)
            return gt;
          s === Xt && (e.key = null);
          let o = qr("value", e.value, i, r);
          if (o === gt)
            return gt;
          o === Xt && (e.value = null);
        }
      }
      return n;
    }
    async function eo(t, e) {
      let i = Ym(e);
      He.isDocument(t) ? await Fr(null, t.contents, i, Object.freeze([t])) === Xt && (t.contents = null) : await Fr(null, t, i, Object.freeze([]));
    }
    eo.BREAK = gt;
    eo.SKIP = Gm;
    eo.REMOVE = Xt;
    async function Fr(t, e, i, r) {
      let n = await Wm(t, e, i, r);
      if (He.isNode(n) || He.isPair(n))
        return zm(t, r, n), Fr(t, n, i, r);
      if (typeof n != "symbol") {
        if (He.isCollection(e)) {
          r = Object.freeze(r.concat(e));
          for (let s = 0;s < e.items.length; ++s) {
            let o = await Fr(s, e.items[s], i, r);
            if (typeof o == "number")
              s = o - 1;
            else {
              if (o === gt)
                return gt;
              o === Xt && (e.items.splice(s, 1), s -= 1);
            }
          }
        } else if (He.isPair(e)) {
          r = Object.freeze(r.concat(e));
          let s = await Fr("key", e.key, i, r);
          if (s === gt)
            return gt;
          s === Xt && (e.key = null);
          let o = await Fr("value", e.value, i, r);
          if (o === gt)
            return gt;
          o === Xt && (e.value = null);
        }
      }
      return n;
    }
    function Ym(t) {
      return typeof t == "object" && (t.Collection || t.Node || t.Value) ? Object.assign({ Alias: t.Node, Map: t.Node, Scalar: t.Node, Seq: t.Node }, t.Value && { Map: t.Value, Scalar: t.Value, Seq: t.Value }, t.Collection && { Map: t.Collection, Seq: t.Collection }, t) : t;
    }
    function Wm(t, e, i, r) {
      var n, s, o, a, l;
      if (typeof i == "function")
        return i(t, e, r);
      if (He.isMap(e))
        return (n = i.Map) == null ? undefined : n.call(i, t, e, r);
      if (He.isSeq(e))
        return (s = i.Seq) == null ? undefined : s.call(i, t, e, r);
      if (He.isPair(e))
        return (o = i.Pair) == null ? undefined : o.call(i, t, e, r);
      if (He.isScalar(e))
        return (a = i.Scalar) == null ? undefined : a.call(i, t, e, r);
      if (He.isAlias(e))
        return (l = i.Alias) == null ? undefined : l.call(i, t, e, r);
    }
    function zm(t, e, i) {
      let r = e[e.length - 1];
      if (He.isCollection(r))
        r.items[t] = i;
      else if (He.isPair(r))
        t === "key" ? r.key = i : r.value = i;
      else if (He.isDocument(r))
        r.contents = i;
      else {
        let n = He.isAlias(r) ? "alias" : "scalar";
        throw new Error(`Cannot replace node with ${n} parent`);
      }
    }
    ic.visit = Xs;
    ic.visitAsync = eo;
  });
  var rc = w((Jm) => {
    var Km = Se(), pE = pn(), dE = { "!": "%21", ",": "%2C", "[": "%5B", "]": "%5D", "{": "%7B", "}": "%7D" }, mE = (t) => t.replace(/[!,[\]{}]/g, (e) => dE[e]), dn = class t {
      constructor(e, i) {
        this.docStart = null, this.docEnd = false, this.yaml = Object.assign({}, t.defaultYaml, e), this.tags = Object.assign({}, t.defaultTags, i);
      }
      clone() {
        let e = new t(this.yaml, this.tags);
        return e.docStart = this.docStart, e;
      }
      atDocument() {
        let e = new t(this.yaml, this.tags);
        switch (this.yaml.version) {
          case "1.1":
            this.atNextDocument = true;
            break;
          case "1.2":
            this.atNextDocument = false, this.yaml = { explicit: t.defaultYaml.explicit, version: "1.2" }, this.tags = Object.assign({}, t.defaultTags);
            break;
        }
        return e;
      }
      add(e, i) {
        this.atNextDocument && (this.yaml = { explicit: t.defaultYaml.explicit, version: "1.1" }, this.tags = Object.assign({}, t.defaultTags), this.atNextDocument = false);
        let r = e.trim().split(/[ \t]+/), n = r.shift();
        switch (n) {
          case "%TAG": {
            if (r.length !== 2 && (i(0, "%TAG directive should contain exactly two parts"), r.length < 2))
              return false;
            let [s, o] = r;
            return this.tags[s] = o, true;
          }
          case "%YAML": {
            if (this.yaml.explicit = true, r.length !== 1)
              return i(0, "%YAML directive should contain exactly one part"), false;
            let [s] = r;
            if (s === "1.1" || s === "1.2")
              return this.yaml.version = s, true;
            {
              let o = /^\d+\.\d+$/.test(s);
              return i(6, `Unsupported YAML version ${s}`, o), false;
            }
          }
          default:
            return i(0, `Unknown directive ${n}`, true), false;
        }
      }
      tagName(e, i) {
        if (e === "!")
          return "!";
        if (e[0] !== "!")
          return i(`Not a valid tag: ${e}`), null;
        if (e[1] === "<") {
          let o = e.slice(2, -1);
          return o === "!" || o === "!!" ? (i(`Verbatim tags aren't resolved, so ${e} is invalid.`), null) : (e[e.length - 1] !== ">" && i("Verbatim tags must end with a >"), o);
        }
        let [, r, n] = e.match(/^(.*!)([^!]*)$/s);
        n || i(`The ${e} tag has no suffix`);
        let s = this.tags[r];
        if (s)
          try {
            return s + decodeURIComponent(n);
          } catch (o) {
            return i(String(o)), null;
          }
        return r === "!" ? e : (i(`Could not resolve tag: ${e}`), null);
      }
      tagString(e) {
        for (let [i, r] of Object.entries(this.tags))
          if (e.startsWith(r))
            return i + mE(e.substring(r.length));
        return e[0] === "!" ? e : `!<${e}>`;
      }
      toString(e) {
        let i = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [], r = Object.entries(this.tags), n;
        if (e && r.length > 0 && Km.isNode(e.contents)) {
          let s = {};
          pE.visit(e.contents, (o, a) => {
            Km.isNode(a) && a.tag && (s[a.tag] = true);
          }), n = Object.keys(s);
        } else
          n = [];
        for (let [s, o] of r)
          s === "!!" && o === "tag:yaml.org,2002:" || (!e || n.some((a) => a.startsWith(o))) && i.push(`%TAG ${s} ${o}`);
        return i.join(`
`);
      }
    };
    dn.defaultYaml = { explicit: false, version: "1.2" };
    dn.defaultTags = { "!!": "tag:yaml.org,2002:" };
    Jm.Directives = dn;
  });
  var to = w((mn) => {
    var Zm = Se(), gE = pn();
    function vE(t) {
      if (/[\x00-\x19\s,[\]{}]/.test(t)) {
        let i = `Anchor must not contain whitespace or control characters: ${JSON.stringify(t)}`;
        throw new Error(i);
      }
      return true;
    }
    function Qm(t) {
      let e = new Set;
      return gE.visit(t, { Value(i, r) {
        r.anchor && e.add(r.anchor);
      } }), e;
    }
    function Xm(t, e) {
      for (let i = 1;; ++i) {
        let r = `${t}${i}`;
        if (!e.has(r))
          return r;
      }
    }
    function yE(t, e) {
      let i = [], r = new Map, n = null;
      return { onAnchor: (s) => {
        i.push(s), n || (n = Qm(t));
        let o = Xm(e, n);
        return n.add(o), o;
      }, setAnchors: () => {
        for (let s of i) {
          let o = r.get(s);
          if (typeof o == "object" && o.anchor && (Zm.isScalar(o.node) || Zm.isCollection(o.node)))
            o.node.anchor = o.anchor;
          else {
            let a = new Error("Failed to resolve repeated object (this should not happen)");
            throw a.source = s, a;
          }
        }
      }, sourceObjects: r };
    }
    mn.anchorIsValid = vE;
    mn.anchorNames = Qm;
    mn.createNodeAnchors = yE;
    mn.findNewAnchor = Xm;
  });
  var nc = w((eg) => {
    function gn(t, e, i, r) {
      if (r && typeof r == "object")
        if (Array.isArray(r))
          for (let n = 0, s = r.length;n < s; ++n) {
            let o = r[n], a = gn(t, r, String(n), o);
            a === undefined ? delete r[n] : a !== o && (r[n] = a);
          }
        else if (r instanceof Map)
          for (let n of Array.from(r.keys())) {
            let s = r.get(n), o = gn(t, r, n, s);
            o === undefined ? r.delete(n) : o !== s && r.set(n, o);
          }
        else if (r instanceof Set)
          for (let n of Array.from(r)) {
            let s = gn(t, r, n, n);
            s === undefined ? r.delete(n) : s !== n && (r.delete(n), r.add(s));
          }
        else
          for (let [n, s] of Object.entries(r)) {
            let o = gn(t, r, n, s);
            o === undefined ? delete r[n] : o !== s && (r[n] = o);
          }
      return t.call(e, i, r);
    }
    eg.applyReviver = gn;
  });
  var xi = w((ig) => {
    var bE = Se();
    function tg(t, e, i) {
      if (Array.isArray(t))
        return t.map((r, n) => tg(r, String(n), i));
      if (t && typeof t.toJSON == "function") {
        if (!i || !bE.hasAnchor(t))
          return t.toJSON(e, i);
        let r = { aliasCount: 0, count: 1, res: undefined };
        i.anchors.set(t, r), i.onCreate = (s) => {
          r.res = s, delete i.onCreate;
        };
        let n = t.toJSON(e, i);
        return i.onCreate && i.onCreate(n), n;
      }
      return typeof t == "bigint" && !(i != null && i.keep) ? Number(t) : t;
    }
    ig.toJS = tg;
  });
  var io = w((ng) => {
    var _E = nc(), rg = Se(), wE = xi(), sc = class {
      constructor(e) {
        Object.defineProperty(this, rg.NODE_TYPE, { value: e });
      }
      clone() {
        let e = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        return this.range && (e.range = this.range.slice()), e;
      }
      toJS(e, { mapAsMap: i, maxAliasCount: r, onAnchor: n, reviver: s } = {}) {
        if (!rg.isDocument(e))
          throw new TypeError("A document argument is required");
        let o = { anchors: new Map, doc: e, keep: true, mapAsMap: i === true, mapKeyWarned: false, maxAliasCount: typeof r == "number" ? r : 100 }, a = wE.toJS(this, "", o);
        if (typeof n == "function")
          for (let { count: l, res: c } of o.anchors.values())
            n(c, l);
        return typeof s == "function" ? _E.applyReviver(s, { "": a }, "", a) : a;
      }
    };
    ng.NodeBase = sc;
  });
  var vn = w((og) => {
    var xE = to(), sg = pn(), ro = Se(), SE = io(), EE = xi(), oc = class extends SE.NodeBase {
      constructor(e) {
        super(ro.ALIAS), this.source = e, Object.defineProperty(this, "tag", { set() {
          throw new Error("Alias nodes cannot have tags");
        } });
      }
      resolve(e) {
        let i;
        return sg.visit(e, { Node: (r, n) => {
          if (n === this)
            return sg.visit.BREAK;
          n.anchor === this.source && (i = n);
        } }), i;
      }
      toJSON(e, i) {
        if (!i)
          return { source: this.source };
        let { anchors: r, doc: n, maxAliasCount: s } = i, o = this.resolve(n);
        if (!o) {
          let l = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
          throw new ReferenceError(l);
        }
        let a = r.get(o);
        if (a || (EE.toJS(o, null, i), a = r.get(o)), !a || a.res === undefined) {
          let l = "This should not happen: Alias anchor was not resolved?";
          throw new ReferenceError(l);
        }
        if (s >= 0 && (a.count += 1, a.aliasCount === 0 && (a.aliasCount = no(n, o, r)), a.count * a.aliasCount > s)) {
          let l = "Excessive alias count indicates a resource exhaustion attack";
          throw new ReferenceError(l);
        }
        return a.res;
      }
      toString(e, i, r) {
        let n = `*${this.source}`;
        if (e) {
          if (xE.anchorIsValid(this.source), e.options.verifyAliasOrder && !e.anchors.has(this.source)) {
            let s = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new Error(s);
          }
          if (e.implicitKey)
            return `${n} `;
        }
        return n;
      }
    };
    function no(t, e, i) {
      if (ro.isAlias(e)) {
        let r = e.resolve(t), n = i && r && i.get(r);
        return n ? n.count * n.aliasCount : 0;
      } else if (ro.isCollection(e)) {
        let r = 0;
        for (let n of e.items) {
          let s = no(t, n, i);
          s > r && (r = s);
        }
        return r;
      } else if (ro.isPair(e)) {
        let r = no(t, e.key, i), n = no(t, e.value, i);
        return Math.max(r, n);
      }
      return 1;
    }
    og.Alias = oc;
  });
  var je = w((ac) => {
    var kE = Se(), OE = io(), CE = xi(), TE = (t) => !t || typeof t != "function" && typeof t != "object", Si = class extends OE.NodeBase {
      constructor(e) {
        super(kE.SCALAR), this.value = e;
      }
      toJSON(e, i) {
        return i != null && i.keep ? this.value : CE.toJS(this.value, e, i);
      }
      toString() {
        return String(this.value);
      }
    };
    Si.BLOCK_FOLDED = "BLOCK_FOLDED";
    Si.BLOCK_LITERAL = "BLOCK_LITERAL";
    Si.PLAIN = "PLAIN";
    Si.QUOTE_DOUBLE = "QUOTE_DOUBLE";
    Si.QUOTE_SINGLE = "QUOTE_SINGLE";
    ac.Scalar = Si;
    ac.isScalarValue = TE;
  });
  var yn = w((lg) => {
    var AE = vn(), Xi = Se(), ag = je(), IE = "tag:yaml.org,2002:";
    function NE(t, e, i) {
      var r;
      if (e) {
        let n = i.filter((o) => o.tag === e), s = (r = n.find((o) => !o.format)) != null ? r : n[0];
        if (!s)
          throw new Error(`Tag ${e} not found`);
        return s;
      }
      return i.find((n) => {
        var s;
        return ((s = n.identify) == null ? undefined : s.call(n, t)) && !n.format;
      });
    }
    function LE(t, e, i) {
      var f, d, g;
      if (Xi.isDocument(t) && (t = t.contents), Xi.isNode(t))
        return t;
      if (Xi.isPair(t)) {
        let m = (d = (f = i.schema[Xi.MAP]).createNode) == null ? undefined : d.call(f, i.schema, null, i);
        return m.items.push(t), m;
      }
      (t instanceof String || t instanceof Number || t instanceof Boolean || typeof BigInt != "undefined" && t instanceof BigInt) && (t = t.valueOf());
      let { aliasDuplicateObjects: r, onAnchor: n, onTagObj: s, schema: o, sourceObjects: a } = i, l;
      if (r && t && typeof t == "object") {
        if (l = a.get(t), l)
          return l.anchor || (l.anchor = n(t)), new AE.Alias(l.anchor);
        l = { anchor: null, node: null }, a.set(t, l);
      }
      e != null && e.startsWith("!!") && (e = IE + e.slice(2));
      let c = NE(t, e, o.tags);
      if (!c) {
        if (t && typeof t.toJSON == "function" && (t = t.toJSON()), !t || typeof t != "object") {
          let m = new ag.Scalar(t);
          return l && (l.node = m), m;
        }
        c = t instanceof Map ? o[Xi.MAP] : (Symbol.iterator in Object(t)) ? o[Xi.SEQ] : o[Xi.MAP];
      }
      s && (s(c), delete i.onTagObj);
      let u = c != null && c.createNode ? c.createNode(i.schema, t, i) : typeof ((g = c == null ? undefined : c.nodeClass) == null ? undefined : g.from) == "function" ? c.nodeClass.from(i.schema, t, i) : new ag.Scalar(t);
      return e ? u.tag = e : c.default || (u.tag = c.tag), l && (l.node = u), u;
    }
    lg.createNode = LE;
  });
  var oo = w((so) => {
    var BE = yn(), ei = Se(), RE = io();
    function lc(t, e, i) {
      let r = i;
      for (let n = e.length - 1;n >= 0; --n) {
        let s = e[n];
        if (typeof s == "number" && Number.isInteger(s) && s >= 0) {
          let o = [];
          o[s] = r, r = o;
        } else
          r = new Map([[s, r]]);
      }
      return BE.createNode(r, undefined, { aliasDuplicateObjects: false, keepUndefined: false, onAnchor: () => {
        throw new Error("This should not happen, please report a bug.");
      }, schema: t, sourceObjects: new Map });
    }
    var cg = (t) => t == null || typeof t == "object" && !!t[Symbol.iterator]().next().done, cc = class extends RE.NodeBase {
      constructor(e, i) {
        super(e), Object.defineProperty(this, "schema", { value: i, configurable: true, enumerable: false, writable: true });
      }
      clone(e) {
        let i = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        return e && (i.schema = e), i.items = i.items.map((r) => ei.isNode(r) || ei.isPair(r) ? r.clone(e) : r), this.range && (i.range = this.range.slice()), i;
      }
      addIn(e, i) {
        if (cg(e))
          this.add(i);
        else {
          let [r, ...n] = e, s = this.get(r, true);
          if (ei.isCollection(s))
            s.addIn(n, i);
          else if (s === undefined && this.schema)
            this.set(r, lc(this.schema, n, i));
          else
            throw new Error(`Expected YAML collection at ${r}. Remaining path: ${n}`);
        }
      }
      deleteIn(e) {
        let [i, ...r] = e;
        if (r.length === 0)
          return this.delete(i);
        let n = this.get(i, true);
        if (ei.isCollection(n))
          return n.deleteIn(r);
        throw new Error(`Expected YAML collection at ${i}. Remaining path: ${r}`);
      }
      getIn(e, i) {
        let [r, ...n] = e, s = this.get(r, true);
        return n.length === 0 ? !i && ei.isScalar(s) ? s.value : s : ei.isCollection(s) ? s.getIn(n, i) : undefined;
      }
      hasAllNullValues(e) {
        return this.items.every((i) => {
          if (!ei.isPair(i))
            return false;
          let r = i.value;
          return r == null || e && ei.isScalar(r) && r.value == null && !r.commentBefore && !r.comment && !r.tag;
        });
      }
      hasIn(e) {
        let [i, ...r] = e;
        if (r.length === 0)
          return this.has(i);
        let n = this.get(i, true);
        return ei.isCollection(n) ? n.hasIn(r) : false;
      }
      setIn(e, i) {
        let [r, ...n] = e;
        if (n.length === 0)
          this.set(r, i);
        else {
          let s = this.get(r, true);
          if (ei.isCollection(s))
            s.setIn(n, i);
          else if (s === undefined && this.schema)
            this.set(r, lc(this.schema, n, i));
          else
            throw new Error(`Expected YAML collection at ${r}. Remaining path: ${n}`);
        }
      }
    };
    so.Collection = cc;
    so.collectionFromPath = lc;
    so.isEmptyPath = cg;
  });
  var bn = w((ao) => {
    var PE = (t) => t.replace(/^(?!$)(?: $)?/gm, "#");
    function uc(t, e) {
      return /^\n+$/.test(t) ? t.substring(1) : e ? t.replace(/^(?! *$)/gm, e) : t;
    }
    var ME = (t, e, i) => t.endsWith(`
`) ? uc(i, e) : i.includes(`
`) ? `
` + uc(i, e) : (t.endsWith(" ") ? "" : " ") + i;
    ao.indentComment = uc;
    ao.lineComment = ME;
    ao.stringifyComment = PE;
  });
  var fg = w((_n) => {
    var qE = "flow", fc = "block", lo = "quoted";
    function FE(t, e, i = "flow", { indentAtStart: r, lineWidth: n = 80, minContentWidth: s = 20, onFold: o, onOverflow: a } = {}) {
      if (!n || n < 0)
        return t;
      n < s && (s = 0);
      let l = Math.max(1 + s, 1 + n - e.length);
      if (t.length <= l)
        return t;
      let c = [], u = {}, f = n - e.length;
      typeof r == "number" && (r > n - Math.max(2, s) ? c.push(0) : f = n - r);
      let d, g, m = false, v = -1, b = -1, _ = -1;
      i === fc && (v = ug(t, v, e.length), v !== -1 && (f = v + l));
      for (let O;O = t[v += 1]; ) {
        if (i === lo && O === "\\") {
          switch (b = v, t[v + 1]) {
            case "x":
              v += 3;
              break;
            case "u":
              v += 5;
              break;
            case "U":
              v += 9;
              break;
            default:
              v += 1;
          }
          _ = v;
        }
        if (O === `
`)
          i === fc && (v = ug(t, v, e.length)), f = v + e.length + l, d = undefined;
        else {
          if (O === " " && g && g !== " " && g !== `
` && g !== "\t") {
            let k = t[v + 1];
            k && k !== " " && k !== `
` && k !== "\t" && (d = v);
          }
          if (v >= f)
            if (d)
              c.push(d), f = d + l, d = undefined;
            else if (i === lo) {
              for (;g === " " || g === "\t"; )
                g = O, O = t[v += 1], m = true;
              let k = v > _ + 1 ? v - 2 : b - 1;
              if (u[k])
                return t;
              c.push(k), u[k] = true, f = k + l, d = undefined;
            } else
              m = true;
        }
        g = O;
      }
      if (m && a && a(), c.length === 0)
        return t;
      o && o();
      let S = t.slice(0, c[0]);
      for (let O = 0;O < c.length; ++O) {
        let k = c[O], E = c[O + 1] || t.length;
        k === 0 ? S = `
${e}${t.slice(0, E)}` : (i === lo && u[k] && (S += `${t[k]}\\`), S += `
${e}${t.slice(k + 1, E)}`);
      }
      return S;
    }
    function ug(t, e, i) {
      let r = e, n = e + 1, s = t[n];
      for (;s === " " || s === "\t"; )
        if (e < n + i)
          s = t[++e];
        else {
          do
            s = t[++e];
          while (s && s !== `
`);
          r = e, n = e + 1, s = t[n];
        }
      return r;
    }
    _n.FOLD_BLOCK = fc;
    _n.FOLD_FLOW = qE;
    _n.FOLD_QUOTED = lo;
    _n.foldFlowLines = FE;
  });
  var xn = w((hg) => {
    var ti = je(), Ei = fg(), uo = (t, e) => ({ indentAtStart: e ? t.indent.length : t.indentAtStart, lineWidth: t.options.lineWidth, minContentWidth: t.options.minContentWidth }), fo = (t) => /^(%|---|\.\.\.)/m.test(t);
    function DE(t, e, i) {
      if (!e || e < 0)
        return false;
      let r = e - i, n = t.length;
      if (n <= r)
        return false;
      for (let s = 0, o = 0;s < n; ++s)
        if (t[s] === `
`) {
          if (s - o > r)
            return true;
          if (o = s + 1, n - o <= r)
            return false;
        }
      return true;
    }
    function wn(t, e) {
      let i = JSON.stringify(t);
      if (e.options.doubleQuotedAsJSON)
        return i;
      let { implicitKey: r } = e, n = e.options.doubleQuotedMinMultiLineLength, s = e.indent || (fo(t) ? "  " : ""), o = "", a = 0;
      for (let l = 0, c = i[l];c; c = i[++l])
        if (c === " " && i[l + 1] === "\\" && i[l + 2] === "n" && (o += i.slice(a, l) + "\\ ", l += 1, a = l, c = "\\"), c === "\\")
          switch (i[l + 1]) {
            case "u":
              {
                o += i.slice(a, l);
                let u = i.substr(l + 2, 4);
                switch (u) {
                  case "0000":
                    o += "\\0";
                    break;
                  case "0007":
                    o += "\\a";
                    break;
                  case "000b":
                    o += "\\v";
                    break;
                  case "001b":
                    o += "\\e";
                    break;
                  case "0085":
                    o += "\\N";
                    break;
                  case "00a0":
                    o += "\\_";
                    break;
                  case "2028":
                    o += "\\L";
                    break;
                  case "2029":
                    o += "\\P";
                    break;
                  default:
                    u.substr(0, 2) === "00" ? o += "\\x" + u.substr(2) : o += i.substr(l, 6);
                }
                l += 5, a = l + 1;
              }
              break;
            case "n":
              if (r || i[l + 2] === '"' || i.length < n)
                l += 1;
              else {
                for (o += i.slice(a, l) + `

`;i[l + 2] === "\\" && i[l + 3] === "n" && i[l + 4] !== '"'; )
                  o += `
`, l += 2;
                o += s, i[l + 2] === " " && (o += "\\"), l += 1, a = l + 1;
              }
              break;
            default:
              l += 1;
          }
      return o = a ? o + i.slice(a) : i, r ? o : Ei.foldFlowLines(o, s, Ei.FOLD_QUOTED, uo(e, false));
    }
    function hc(t, e) {
      if (e.options.singleQuote === false || e.implicitKey && t.includes(`
`) || /[ \t]\n|\n[ \t]/.test(t))
        return wn(t, e);
      let i = e.indent || (fo(t) ? "  " : ""), r = "'" + t.replace(/'/g, "''").replace(/\n+/g, `$&
${i}`) + "'";
      return e.implicitKey ? r : Ei.foldFlowLines(r, i, Ei.FOLD_FLOW, uo(e, false));
    }
    function Dr(t, e) {
      let { singleQuote: i } = e.options, r;
      if (i === false)
        r = wn;
      else {
        let n = t.includes('"'), s = t.includes("'");
        n && !s ? r = hc : s && !n ? r = wn : r = i ? hc : wn;
      }
      return r(t, e);
    }
    var pc;
    try {
      pc = new RegExp(`(^|(?<!
))
+(?!
|$)`, "g");
    } catch {
      pc = /\n+(?!\n|$)/g;
    }
    function co({ comment: t, type: e, value: i }, r, n, s) {
      let { blockQuote: o, commentString: a, lineWidth: l } = r.options;
      if (!o || /\n[\t ]+$/.test(i) || /^\s*$/.test(i))
        return Dr(i, r);
      let c = r.indent || (r.forceBlockIndent || fo(i) ? "  " : ""), u = o === "literal" ? true : o === "folded" || e === ti.Scalar.BLOCK_FOLDED ? false : e === ti.Scalar.BLOCK_LITERAL ? true : !DE(i, l, c.length);
      if (!i)
        return u ? `|
` : `>
`;
      let f, d;
      for (d = i.length;d > 0; --d) {
        let R = i[d - 1];
        if (R !== `
` && R !== "\t" && R !== " ")
          break;
      }
      let g = i.substring(d), m = g.indexOf(`
`);
      m === -1 ? f = "-" : i === g || m !== g.length - 1 ? (f = "+", s && s()) : f = "", g && (i = i.slice(0, -g.length), g[g.length - 1] === `
` && (g = g.slice(0, -1)), g = g.replace(pc, `$&${c}`));
      let v = false, b, _ = -1;
      for (b = 0;b < i.length; ++b) {
        let R = i[b];
        if (R === " ")
          v = true;
        else if (R === `
`)
          _ = b;
        else
          break;
      }
      let S = i.substring(0, _ < b ? _ + 1 : b);
      S && (i = i.substring(S.length), S = S.replace(/\n+/g, `$&${c}`));
      let k = (u ? "|" : ">") + (v ? c ? "2" : "1" : "") + f;
      if (t && (k += " " + a(t.replace(/ ?[\r\n]+/g, " ")), n && n()), u)
        return i = i.replace(/\n+/g, `$&${c}`), `${k}
${c}${S}${i}${g}`;
      i = i.replace(/\n+/g, `
$&`).replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${c}`);
      let E = Ei.foldFlowLines(`${S}${i}${g}`, c, Ei.FOLD_BLOCK, uo(r, true));
      return `${k}
${c}${E}`;
    }
    function jE(t, e, i, r) {
      let { type: n, value: s } = t, { actualString: o, implicitKey: a, indent: l, indentStep: c, inFlow: u } = e;
      if (a && s.includes(`
`) || u && /[[\]{},]/.test(s))
        return Dr(s, e);
      if (!s || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(s))
        return a || u || !s.includes(`
`) ? Dr(s, e) : co(t, e, i, r);
      if (!a && !u && n !== ti.Scalar.PLAIN && s.includes(`
`))
        return co(t, e, i, r);
      if (fo(s)) {
        if (l === "")
          return e.forceBlockIndent = true, co(t, e, i, r);
        if (a && l === c)
          return Dr(s, e);
      }
      let f = s.replace(/\n+/g, `$&
${l}`);
      if (o) {
        let d = (v) => {
          var b;
          return v.default && v.tag !== "tag:yaml.org,2002:str" && ((b = v.test) == null ? undefined : b.test(f));
        }, { compat: g, tags: m } = e.doc.schema;
        if (m.some(d) || g != null && g.some(d))
          return Dr(s, e);
      }
      return a ? f : Ei.foldFlowLines(f, l, Ei.FOLD_FLOW, uo(e, false));
    }
    function UE(t, e, i, r) {
      let { implicitKey: n, inFlow: s } = e, o = typeof t.value == "string" ? t : Object.assign({}, t, { value: String(t.value) }), { type: a } = t;
      a !== ti.Scalar.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(o.value) && (a = ti.Scalar.QUOTE_DOUBLE);
      let l = (u) => {
        switch (u) {
          case ti.Scalar.BLOCK_FOLDED:
          case ti.Scalar.BLOCK_LITERAL:
            return n || s ? Dr(o.value, e) : co(o, e, i, r);
          case ti.Scalar.QUOTE_DOUBLE:
            return wn(o.value, e);
          case ti.Scalar.QUOTE_SINGLE:
            return hc(o.value, e);
          case ti.Scalar.PLAIN:
            return jE(o, e, i, r);
          default:
            return null;
        }
      }, c = l(a);
      if (c === null) {
        let { defaultKeyType: u, defaultStringType: f } = e.options, d = n && u || f;
        if (c = l(d), c === null)
          throw new Error(`Unsupported default string type ${d}`);
      }
      return c;
    }
    hg.stringifyString = UE;
  });
  var Sn = w((dc) => {
    var $E = to(), ki = Se(), VE = bn(), HE = xn();
    function GE(t, e) {
      let i = Object.assign({ blockQuote: true, commentString: VE.stringifyComment, defaultKeyType: null, defaultStringType: "PLAIN", directives: null, doubleQuotedAsJSON: false, doubleQuotedMinMultiLineLength: 40, falseStr: "false", flowCollectionPadding: true, indentSeq: true, lineWidth: 80, minContentWidth: 20, nullStr: "null", simpleKeys: false, singleQuote: null, trueStr: "true", verifyAliasOrder: true }, t.schema.toStringOptions, e), r;
      switch (i.collectionStyle) {
        case "block":
          r = false;
          break;
        case "flow":
          r = true;
          break;
        default:
          r = null;
      }
      return { anchors: new Set, doc: t, flowCollectionPadding: i.flowCollectionPadding ? " " : "", indent: "", indentStep: typeof i.indent == "number" ? " ".repeat(i.indent) : "  ", inFlow: r, options: i };
    }
    function YE(t, e) {
      var n, s, o, a;
      if (e.tag) {
        let l = t.filter((c) => c.tag === e.tag);
        if (l.length > 0)
          return (n = l.find((c) => c.format === e.format)) != null ? n : l[0];
      }
      let i, r;
      if (ki.isScalar(e)) {
        r = e.value;
        let l = t.filter((c) => {
          var u;
          return (u = c.identify) == null ? undefined : u.call(c, r);
        });
        if (l.length > 1) {
          let c = l.filter((u) => u.test);
          c.length > 0 && (l = c);
        }
        i = (s = l.find((c) => c.format === e.format)) != null ? s : l.find((c) => !c.format);
      } else
        r = e, i = t.find((l) => l.nodeClass && r instanceof l.nodeClass);
      if (!i) {
        let l = (a = (o = r == null ? undefined : r.constructor) == null ? undefined : o.name) != null ? a : typeof r;
        throw new Error(`Tag not resolved for ${l} value`);
      }
      return i;
    }
    function WE(t, e, { anchors: i, doc: r }) {
      if (!r.directives)
        return "";
      let n = [], s = (ki.isScalar(t) || ki.isCollection(t)) && t.anchor;
      s && $E.anchorIsValid(s) && (i.add(s), n.push(`&${s}`));
      let o = t.tag ? t.tag : e.default ? null : e.tag;
      return o && n.push(r.directives.tagString(o)), n.join(" ");
    }
    function zE(t, e, i, r) {
      var l, c;
      if (ki.isPair(t))
        return t.toString(e, i, r);
      if (ki.isAlias(t)) {
        if (e.doc.directives)
          return t.toString(e);
        if ((l = e.resolvedAliases) != null && l.has(t))
          throw new TypeError("Cannot stringify circular structure without alias nodes");
        e.resolvedAliases ? e.resolvedAliases.add(t) : e.resolvedAliases = new Set([t]), t = t.resolve(e.doc);
      }
      let n, s = ki.isNode(t) ? t : e.doc.createNode(t, { onTagObj: (u) => n = u });
      n || (n = YE(e.doc.schema.tags, s));
      let o = WE(s, n, e);
      o.length > 0 && (e.indentAtStart = ((c = e.indentAtStart) != null ? c : 0) + o.length + 1);
      let a = typeof n.stringify == "function" ? n.stringify(s, e, i, r) : ki.isScalar(s) ? HE.stringifyString(s, e, i, r) : s.toString(e, i, r);
      return o ? ki.isScalar(s) || a[0] === "{" || a[0] === "[" ? `${o} ${a}` : `${o}
${e.indent}${a}` : a;
    }
    dc.createStringifyContext = GE;
    dc.stringify = zE;
  });
  var gg = w((mg) => {
    var fi = Se(), pg = je(), dg = Sn(), En = bn();
    function KE({ key: t, value: e }, i, r, n) {
      var T, A;
      let { allNullValues: s, doc: o, indent: a, indentStep: l, options: { commentString: c, indentSeq: u, simpleKeys: f } } = i, d = fi.isNode(t) && t.comment || null;
      if (f) {
        if (d)
          throw new Error("With simple keys, key nodes cannot have comments");
        if (fi.isCollection(t) || !fi.isNode(t) && typeof t == "object") {
          let C = "With simple keys, collection cannot be used as a key value";
          throw new Error(C);
        }
      }
      let g = !f && (!t || d && e == null && !i.inFlow || fi.isCollection(t) || (fi.isScalar(t) ? t.type === pg.Scalar.BLOCK_FOLDED || t.type === pg.Scalar.BLOCK_LITERAL : typeof t == "object"));
      i = Object.assign({}, i, { allNullValues: false, implicitKey: !g && (f || !s), indent: a + l });
      let m = false, v = false, b = dg.stringify(t, i, () => m = true, () => v = true);
      if (!g && !i.inFlow && b.length > 1024) {
        if (f)
          throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
        g = true;
      }
      if (i.inFlow) {
        if (s || e == null)
          return m && r && r(), b === "" ? "?" : g ? `? ${b}` : b;
      } else if (s && !f || e == null && g)
        return b = `? ${b}`, d && !m ? b += En.lineComment(b, i.indent, c(d)) : v && n && n(), b;
      m && (d = null), g ? (d && (b += En.lineComment(b, i.indent, c(d))), b = `? ${b}
${a}:`) : (b = `${b}:`, d && (b += En.lineComment(b, i.indent, c(d))));
      let _, S, O;
      fi.isNode(e) ? (_ = !!e.spaceBefore, S = e.commentBefore, O = e.comment) : (_ = false, S = null, O = null, e && typeof e == "object" && (e = o.createNode(e))), i.implicitKey = false, !g && !d && fi.isScalar(e) && (i.indentAtStart = b.length + 1), v = false, !u && l.length >= 2 && !i.inFlow && !g && fi.isSeq(e) && !e.flow && !e.tag && !e.anchor && (i.indent = i.indent.substring(2));
      let k = false, E = dg.stringify(e, i, () => k = true, () => v = true), R = " ";
      if (d || _ || S) {
        if (R = _ ? `
` : "", S) {
          let C = c(S);
          R += `
${En.indentComment(C, i.indent)}`;
        }
        E === "" && !i.inFlow ? R === `
` && (R = `

`) : R += `
${i.indent}`;
      } else if (!g && fi.isCollection(e)) {
        let C = E[0], L = E.indexOf(`
`), P = L !== -1, U = (A = (T = i.inFlow) != null ? T : e.flow) != null ? A : e.items.length === 0;
        if (P || !U) {
          let F = false;
          if (P && (C === "&" || C === "!")) {
            let H = E.indexOf(" ");
            C === "&" && H !== -1 && H < L && E[H + 1] === "!" && (H = E.indexOf(" ", H + 1)), (H === -1 || L < H) && (F = true);
          }
          F || (R = `
${i.indent}`);
        }
      } else
        (E === "" || E[0] === `
`) && (R = "");
      return b += R + E, i.inFlow ? k && r && r() : O && !k ? b += En.lineComment(b, i.indent, c(O)) : v && n && n(), b;
    }
    mg.stringifyPair = KE;
  });
  var gc = w((mc) => {
    function JE(t, ...e) {
      t === "debug" && console.log(...e);
    }
    function ZE(t, e) {
      (t === "debug" || t === "warn") && (typeof process != "undefined" && process.emitWarning ? process.emitWarning(e) : console.warn(e));
    }
    mc.debug = JE;
    mc.warn = ZE;
  });
  var go = w((mo) => {
    var kn = Se(), vg = je(), ho = "<<", po = { identify: (t) => t === ho || typeof t == "symbol" && t.description === ho, default: "key", tag: "tag:yaml.org,2002:merge", test: /^<<$/, resolve: () => Object.assign(new vg.Scalar(Symbol(ho)), { addToJSMap: yg }), stringify: () => ho }, QE = (t, e) => (po.identify(e) || kn.isScalar(e) && (!e.type || e.type === vg.Scalar.PLAIN) && po.identify(e.value)) && (t == null ? undefined : t.doc.schema.tags.some((i) => i.tag === po.tag && i.default));
    function yg(t, e, i) {
      if (i = t && kn.isAlias(i) ? i.resolve(t.doc) : i, kn.isSeq(i))
        for (let r of i.items)
          vc(t, e, r);
      else if (Array.isArray(i))
        for (let r of i)
          vc(t, e, r);
      else
        vc(t, e, i);
    }
    function vc(t, e, i) {
      let r = t && kn.isAlias(i) ? i.resolve(t.doc) : i;
      if (!kn.isMap(r))
        throw new Error("Merge sources must be maps or map aliases");
      let n = r.toJSON(null, t, Map);
      for (let [s, o] of n)
        e instanceof Map ? e.has(s) || e.set(s, o) : e instanceof Set ? e.add(s) : Object.prototype.hasOwnProperty.call(e, s) || Object.defineProperty(e, s, { value: o, writable: true, enumerable: true, configurable: true });
      return e;
    }
    mo.addMergeToJSMap = yg;
    mo.isMergeKey = QE;
    mo.merge = po;
  });
  var bc = w((wg) => {
    var XE = gc(), bg = go(), ek = Sn(), _g = Se(), yc = xi();
    function tk(t, e, { key: i, value: r }) {
      if (_g.isNode(i) && i.addToJSMap)
        i.addToJSMap(t, e, r);
      else if (bg.isMergeKey(t, i))
        bg.addMergeToJSMap(t, e, r);
      else {
        let n = yc.toJS(i, "", t);
        if (e instanceof Map)
          e.set(n, yc.toJS(r, n, t));
        else if (e instanceof Set)
          e.add(n);
        else {
          let s = ik(i, n, t), o = yc.toJS(r, s, t);
          s in e ? Object.defineProperty(e, s, { value: o, writable: true, enumerable: true, configurable: true }) : e[s] = o;
        }
      }
      return e;
    }
    function ik(t, e, i) {
      if (e === null)
        return "";
      if (typeof e != "object")
        return String(e);
      if (_g.isNode(t) && (i != null && i.doc)) {
        let r = ek.createStringifyContext(i.doc, {});
        r.anchors = new Set;
        for (let s of i.anchors.keys())
          r.anchors.add(s.anchor);
        r.inFlow = true, r.inStringifyKey = true;
        let n = t.toString(r);
        if (!i.mapKeyWarned) {
          let s = JSON.stringify(n);
          s.length > 40 && (s = s.substring(0, 36) + '..."'), XE.warn(i.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${s}. Set mapAsMap: true to use object keys.`), i.mapKeyWarned = true;
        }
        return n;
      }
      return JSON.stringify(e);
    }
    wg.addPairToJSMap = tk;
  });
  var Oi = w((_c) => {
    var xg = yn(), rk = gg(), nk = bc(), vo = Se();
    function sk(t, e, i) {
      let r = xg.createNode(t, undefined, i), n = xg.createNode(e, undefined, i);
      return new yo(r, n);
    }
    var yo = class t {
      constructor(e, i = null) {
        Object.defineProperty(this, vo.NODE_TYPE, { value: vo.PAIR }), this.key = e, this.value = i;
      }
      clone(e) {
        let { key: i, value: r } = this;
        return vo.isNode(i) && (i = i.clone(e)), vo.isNode(r) && (r = r.clone(e)), new t(i, r);
      }
      toJSON(e, i) {
        let r = i != null && i.mapAsMap ? new Map : {};
        return nk.addPairToJSMap(i, r, this);
      }
      toString(e, i, r) {
        return e != null && e.doc ? rk.stringifyPair(this, e, i, r) : JSON.stringify(this);
      }
    };
    _c.Pair = yo;
    _c.createPair = sk;
  });
  var wc = w((Eg) => {
    var er = Se(), Sg = Sn(), bo = bn();
    function ok(t, e, i) {
      var s;
      return (((s = e.inFlow) != null ? s : t.flow) ? lk : ak)(t, e, i);
    }
    function ak({ comment: t, items: e }, i, { blockItemPrefix: r, flowChars: n, itemIndent: s, onChompKeep: o, onComment: a }) {
      let { indent: l, options: { commentString: c } } = i, u = Object.assign({}, i, { indent: s, type: null }), f = false, d = [];
      for (let m = 0;m < e.length; ++m) {
        let v = e[m], b = null;
        if (er.isNode(v))
          !f && v.spaceBefore && d.push(""), _o(i, d, v.commentBefore, f), v.comment && (b = v.comment);
        else if (er.isPair(v)) {
          let S = er.isNode(v.key) ? v.key : null;
          S && (!f && S.spaceBefore && d.push(""), _o(i, d, S.commentBefore, f));
        }
        f = false;
        let _ = Sg.stringify(v, u, () => b = null, () => f = true);
        b && (_ += bo.lineComment(_, s, c(b))), f && b && (f = false), d.push(r + _);
      }
      let g;
      if (d.length === 0)
        g = n.start + n.end;
      else {
        g = d[0];
        for (let m = 1;m < d.length; ++m) {
          let v = d[m];
          g += v ? `
${l}${v}` : `
`;
        }
      }
      return t ? (g += `
` + bo.indentComment(c(t), l), a && a()) : f && o && o(), g;
    }
    function lk({ items: t }, e, { flowChars: i, itemIndent: r }) {
      let { indent: n, indentStep: s, flowCollectionPadding: o, options: { commentString: a } } = e;
      r += s;
      let l = Object.assign({}, e, { indent: r, inFlow: true, type: null }), c = false, u = 0, f = [];
      for (let m = 0;m < t.length; ++m) {
        let v = t[m], b = null;
        if (er.isNode(v))
          v.spaceBefore && f.push(""), _o(e, f, v.commentBefore, false), v.comment && (b = v.comment);
        else if (er.isPair(v)) {
          let S = er.isNode(v.key) ? v.key : null;
          S && (S.spaceBefore && f.push(""), _o(e, f, S.commentBefore, false), S.comment && (c = true));
          let O = er.isNode(v.value) ? v.value : null;
          O ? (O.comment && (b = O.comment), O.commentBefore && (c = true)) : v.value == null && (S != null && S.comment) && (b = S.comment);
        }
        b && (c = true);
        let _ = Sg.stringify(v, l, () => b = null);
        m < t.length - 1 && (_ += ","), b && (_ += bo.lineComment(_, r, a(b))), !c && (f.length > u || _.includes(`
`)) && (c = true), f.push(_), u = f.length;
      }
      let { start: d, end: g } = i;
      if (f.length === 0)
        return d + g;
      if (!c) {
        let m = f.reduce((v, b) => v + b.length + 2, 2);
        c = e.options.lineWidth > 0 && m > e.options.lineWidth;
      }
      if (c) {
        let m = d;
        for (let v of f)
          m += v ? `
${s}${n}${v}` : `
`;
        return `${m}
${n}${g}`;
      } else
        return `${d}${o}${f.join(" ")}${o}${g}`;
    }
    function _o({ indent: t, options: { commentString: e } }, i, r, n) {
      if (r && n && (r = r.replace(/^\n+/, "")), r) {
        let s = bo.indentComment(e(r), t);
        i.push(s.trimStart());
      }
    }
    Eg.stringifyCollection = ok;
  });
  var Ti = w((Sc) => {
    var ck = wc(), uk = bc(), fk = oo(), Ci = Se(), wo = Oi(), hk = je();
    function On(t, e) {
      let i = Ci.isScalar(e) ? e.value : e;
      for (let r of t)
        if (Ci.isPair(r) && (r.key === e || r.key === i || Ci.isScalar(r.key) && r.key.value === i))
          return r;
    }
    var xc = class extends fk.Collection {
      static get tagName() {
        return "tag:yaml.org,2002:map";
      }
      constructor(e) {
        super(Ci.MAP, e), this.items = [];
      }
      static from(e, i, r) {
        let { keepUndefined: n, replacer: s } = r, o = new this(e), a = (l, c) => {
          if (typeof s == "function")
            c = s.call(i, l, c);
          else if (Array.isArray(s) && !s.includes(l))
            return;
          (c !== undefined || n) && o.items.push(wo.createPair(l, c, r));
        };
        if (i instanceof Map)
          for (let [l, c] of i)
            a(l, c);
        else if (i && typeof i == "object")
          for (let l of Object.keys(i))
            a(l, i[l]);
        return typeof e.sortMapEntries == "function" && o.items.sort(e.sortMapEntries), o;
      }
      add(e, i) {
        var o;
        let r;
        Ci.isPair(e) ? r = e : !e || typeof e != "object" || !("key" in e) ? r = new wo.Pair(e, e == null ? undefined : e.value) : r = new wo.Pair(e.key, e.value);
        let n = On(this.items, r.key), s = (o = this.schema) == null ? undefined : o.sortMapEntries;
        if (n) {
          if (!i)
            throw new Error(`Key ${r.key} already set`);
          Ci.isScalar(n.value) && hk.isScalarValue(r.value) ? n.value.value = r.value : n.value = r.value;
        } else if (s) {
          let a = this.items.findIndex((l) => s(r, l) < 0);
          a === -1 ? this.items.push(r) : this.items.splice(a, 0, r);
        } else
          this.items.push(r);
      }
      delete(e) {
        let i = On(this.items, e);
        return i ? this.items.splice(this.items.indexOf(i), 1).length > 0 : false;
      }
      get(e, i) {
        var s;
        let r = On(this.items, e), n = r == null ? undefined : r.value;
        return (s = !i && Ci.isScalar(n) ? n.value : n) != null ? s : undefined;
      }
      has(e) {
        return !!On(this.items, e);
      }
      set(e, i) {
        this.add(new wo.Pair(e, i), true);
      }
      toJSON(e, i, r) {
        let n = r ? new r : i != null && i.mapAsMap ? new Map : {};
        i != null && i.onCreate && i.onCreate(n);
        for (let s of this.items)
          uk.addPairToJSMap(i, n, s);
        return n;
      }
      toString(e, i, r) {
        if (!e)
          return JSON.stringify(this);
        for (let n of this.items)
          if (!Ci.isPair(n))
            throw new Error(`Map items must all be pairs; found ${JSON.stringify(n)} instead`);
        return !e.allNullValues && this.hasAllNullValues(false) && (e = Object.assign({}, e, { allNullValues: true })), ck.stringifyCollection(this, e, { blockItemPrefix: "", flowChars: { start: "{", end: "}" }, itemIndent: e.indent || "", onChompKeep: r, onComment: i });
      }
    };
    Sc.YAMLMap = xc;
    Sc.findPair = On;
  });
  var jr = w((Og) => {
    var pk = Se(), kg = Ti(), dk = { collection: "map", default: true, nodeClass: kg.YAMLMap, tag: "tag:yaml.org,2002:map", resolve(t, e) {
      return pk.isMap(t) || e("Expected a mapping for this tag"), t;
    }, createNode: (t, e, i) => kg.YAMLMap.from(t, e, i) };
    Og.map = dk;
  });
  var Ai = w((Cg) => {
    var mk = yn(), gk = wc(), vk = oo(), So = Se(), yk = je(), bk = xi(), Ec = class extends vk.Collection {
      static get tagName() {
        return "tag:yaml.org,2002:seq";
      }
      constructor(e) {
        super(So.SEQ, e), this.items = [];
      }
      add(e) {
        this.items.push(e);
      }
      delete(e) {
        let i = xo(e);
        return typeof i != "number" ? false : this.items.splice(i, 1).length > 0;
      }
      get(e, i) {
        let r = xo(e);
        if (typeof r != "number")
          return;
        let n = this.items[r];
        return !i && So.isScalar(n) ? n.value : n;
      }
      has(e) {
        let i = xo(e);
        return typeof i == "number" && i < this.items.length;
      }
      set(e, i) {
        let r = xo(e);
        if (typeof r != "number")
          throw new Error(`Expected a valid index, not ${e}.`);
        let n = this.items[r];
        So.isScalar(n) && yk.isScalarValue(i) ? n.value = i : this.items[r] = i;
      }
      toJSON(e, i) {
        let r = [];
        i != null && i.onCreate && i.onCreate(r);
        let n = 0;
        for (let s of this.items)
          r.push(bk.toJS(s, String(n++), i));
        return r;
      }
      toString(e, i, r) {
        return e ? gk.stringifyCollection(this, e, { blockItemPrefix: "- ", flowChars: { start: "[", end: "]" }, itemIndent: (e.indent || "") + "  ", onChompKeep: r, onComment: i }) : JSON.stringify(this);
      }
      static from(e, i, r) {
        let { replacer: n } = r, s = new this(e);
        if (i && Symbol.iterator in Object(i)) {
          let o = 0;
          for (let a of i) {
            if (typeof n == "function") {
              let l = i instanceof Set ? a : String(o++);
              a = n.call(i, l, a);
            }
            s.items.push(mk.createNode(a, undefined, r));
          }
        }
        return s;
      }
    };
    function xo(t) {
      let e = So.isScalar(t) ? t.value : t;
      return e && typeof e == "string" && (e = Number(e)), typeof e == "number" && Number.isInteger(e) && e >= 0 ? e : null;
    }
    Cg.YAMLSeq = Ec;
  });
  var Ur = w((Ag) => {
    var _k = Se(), Tg = Ai(), wk = { collection: "seq", default: true, nodeClass: Tg.YAMLSeq, tag: "tag:yaml.org,2002:seq", resolve(t, e) {
      return _k.isSeq(t) || e("Expected a sequence for this tag"), t;
    }, createNode: (t, e, i) => Tg.YAMLSeq.from(t, e, i) };
    Ag.seq = wk;
  });
  var Cn = w((Ig) => {
    var xk = xn(), Sk = { identify: (t) => typeof t == "string", default: true, tag: "tag:yaml.org,2002:str", resolve: (t) => t, stringify(t, e, i, r) {
      return e = Object.assign({ actualString: true }, e), xk.stringifyString(t, e, i, r);
    } };
    Ig.string = Sk;
  });
  var Eo = w((Bg) => {
    var Ng = je(), Lg = { identify: (t) => t == null, createNode: () => new Ng.Scalar(null), default: true, tag: "tag:yaml.org,2002:null", test: /^(?:~|[Nn]ull|NULL)?$/, resolve: () => new Ng.Scalar(null), stringify: ({ source: t }, e) => typeof t == "string" && Lg.test.test(t) ? t : e.options.nullStr };
    Bg.nullTag = Lg;
  });
  var kc = w((Pg) => {
    var Ek = je(), Rg = { identify: (t) => typeof t == "boolean", default: true, tag: "tag:yaml.org,2002:bool", test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/, resolve: (t) => new Ek.Scalar(t[0] === "t" || t[0] === "T"), stringify({ source: t, value: e }, i) {
      if (t && Rg.test.test(t)) {
        let r = t[0] === "t" || t[0] === "T";
        if (e === r)
          return t;
      }
      return e ? i.options.trueStr : i.options.falseStr;
    } };
    Pg.boolTag = Rg;
  });
  var $r = w((Mg) => {
    function kk({ format: t, minFractionDigits: e, tag: i, value: r }) {
      if (typeof r == "bigint")
        return String(r);
      let n = typeof r == "number" ? r : Number(r);
      if (!isFinite(n))
        return isNaN(n) ? ".nan" : n < 0 ? "-.inf" : ".inf";
      let s = JSON.stringify(r);
      if (!t && e && (!i || i === "tag:yaml.org,2002:float") && /^\d/.test(s)) {
        let o = s.indexOf(".");
        o < 0 && (o = s.length, s += ".");
        let a = e - (s.length - o - 1);
        for (;a-- > 0; )
          s += "0";
      }
      return s;
    }
    Mg.stringifyNumber = kk;
  });
  var Cc = w((ko) => {
    var Ok = je(), Oc = $r(), Ck = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/, resolve: (t) => t.slice(-3).toLowerCase() === "nan" ? NaN : t[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, stringify: Oc.stringifyNumber }, Tk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", format: "EXP", test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/, resolve: (t) => parseFloat(t), stringify(t) {
      let e = Number(t.value);
      return isFinite(e) ? e.toExponential() : Oc.stringifyNumber(t);
    } }, Ak = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/, resolve(t) {
      let e = new Ok.Scalar(parseFloat(t)), i = t.indexOf(".");
      return i !== -1 && t[t.length - 1] === "0" && (e.minFractionDigits = t.length - i - 1), e;
    }, stringify: Oc.stringifyNumber };
    ko.float = Ak;
    ko.floatExp = Tk;
    ko.floatNaN = Ck;
  });
  var Ac = w((Co) => {
    var qg = $r(), Oo = (t) => typeof t == "bigint" || Number.isInteger(t), Tc = (t, e, i, { intAsBigInt: r }) => r ? BigInt(t) : parseInt(t.substring(e), i);
    function Fg(t, e, i) {
      let { value: r } = t;
      return Oo(r) && r >= 0 ? i + r.toString(e) : qg.stringifyNumber(t);
    }
    var Ik = { identify: (t) => Oo(t) && t >= 0, default: true, tag: "tag:yaml.org,2002:int", format: "OCT", test: /^0o[0-7]+$/, resolve: (t, e, i) => Tc(t, 2, 8, i), stringify: (t) => Fg(t, 8, "0o") }, Nk = { identify: Oo, default: true, tag: "tag:yaml.org,2002:int", test: /^[-+]?[0-9]+$/, resolve: (t, e, i) => Tc(t, 0, 10, i), stringify: qg.stringifyNumber }, Lk = { identify: (t) => Oo(t) && t >= 0, default: true, tag: "tag:yaml.org,2002:int", format: "HEX", test: /^0x[0-9a-fA-F]+$/, resolve: (t, e, i) => Tc(t, 2, 16, i), stringify: (t) => Fg(t, 16, "0x") };
    Co.int = Nk;
    Co.intHex = Lk;
    Co.intOct = Ik;
  });
  var jg = w((Dg) => {
    var Bk = jr(), Rk = Eo(), Pk = Ur(), Mk = Cn(), qk = kc(), Ic = Cc(), Nc = Ac(), Fk = [Bk.map, Pk.seq, Mk.string, Rk.nullTag, qk.boolTag, Nc.intOct, Nc.int, Nc.intHex, Ic.floatNaN, Ic.floatExp, Ic.float];
    Dg.schema = Fk;
  });
  var Vg = w(($g) => {
    var Dk = je(), jk = jr(), Uk = Ur();
    function Ug(t) {
      return typeof t == "bigint" || Number.isInteger(t);
    }
    var To = ({ value: t }) => JSON.stringify(t), $k = [{ identify: (t) => typeof t == "string", default: true, tag: "tag:yaml.org,2002:str", resolve: (t) => t, stringify: To }, { identify: (t) => t == null, createNode: () => new Dk.Scalar(null), default: true, tag: "tag:yaml.org,2002:null", test: /^null$/, resolve: () => null, stringify: To }, { identify: (t) => typeof t == "boolean", default: true, tag: "tag:yaml.org,2002:bool", test: /^true|false$/, resolve: (t) => t === "true", stringify: To }, { identify: Ug, default: true, tag: "tag:yaml.org,2002:int", test: /^-?(?:0|[1-9][0-9]*)$/, resolve: (t, e, { intAsBigInt: i }) => i ? BigInt(t) : parseInt(t, 10), stringify: ({ value: t }) => Ug(t) ? t.toString() : JSON.stringify(t) }, { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/, resolve: (t) => parseFloat(t), stringify: To }], Vk = { default: true, tag: "", test: /^/, resolve(t, e) {
      return e(`Unresolved plain scalar ${JSON.stringify(t)}`), t;
    } }, Hk = [jk.map, Uk.seq].concat($k, Vk);
    $g.schema = Hk;
  });
  var Bc = w((Hg) => {
    var Lc = je(), Gk = xn(), Yk = { identify: (t) => t instanceof Uint8Array, default: false, tag: "tag:yaml.org,2002:binary", resolve(t, e) {
      if (typeof Buffer == "function")
        return Buffer.from(t, "base64");
      if (typeof atob == "function") {
        let i = atob(t.replace(/[\n\r]/g, "")), r = new Uint8Array(i.length);
        for (let n = 0;n < i.length; ++n)
          r[n] = i.charCodeAt(n);
        return r;
      } else
        return e("This environment does not support reading binary tags; either Buffer or atob is required"), t;
    }, stringify({ comment: t, type: e, value: i }, r, n, s) {
      let o = i, a;
      if (typeof Buffer == "function")
        a = o instanceof Buffer ? o.toString("base64") : Buffer.from(o.buffer).toString("base64");
      else if (typeof btoa == "function") {
        let l = "";
        for (let c = 0;c < o.length; ++c)
          l += String.fromCharCode(o[c]);
        a = btoa(l);
      } else
        throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
      if (e || (e = Lc.Scalar.BLOCK_LITERAL), e !== Lc.Scalar.QUOTE_DOUBLE) {
        let l = Math.max(r.options.lineWidth - r.indent.length, r.options.minContentWidth), c = Math.ceil(a.length / l), u = new Array(c);
        for (let f = 0, d = 0;f < c; ++f, d += l)
          u[f] = a.substr(d, l);
        a = u.join(e === Lc.Scalar.BLOCK_LITERAL ? `
` : " ");
      }
      return Gk.stringifyString({ comment: t, type: e, value: a }, r, n, s);
    } };
    Hg.binary = Yk;
  });
  var No = w((Io) => {
    var Ao = Se(), Rc = Oi(), Wk = je(), zk = Ai();
    function Gg(t, e) {
      var i;
      if (Ao.isSeq(t))
        for (let r = 0;r < t.items.length; ++r) {
          let n = t.items[r];
          if (!Ao.isPair(n)) {
            if (Ao.isMap(n)) {
              n.items.length > 1 && e("Each pair must have its own sequence indicator");
              let s = n.items[0] || new Rc.Pair(new Wk.Scalar(null));
              if (n.commentBefore && (s.key.commentBefore = s.key.commentBefore ? `${n.commentBefore}
${s.key.commentBefore}` : n.commentBefore), n.comment) {
                let o = (i = s.value) != null ? i : s.key;
                o.comment = o.comment ? `${n.comment}
${o.comment}` : n.comment;
              }
              n = s;
            }
            t.items[r] = Ao.isPair(n) ? n : new Rc.Pair(n);
          }
        }
      else
        e("Expected a sequence for this tag");
      return t;
    }
    function Yg(t, e, i) {
      let { replacer: r } = i, n = new zk.YAMLSeq(t);
      n.tag = "tag:yaml.org,2002:pairs";
      let s = 0;
      if (e && Symbol.iterator in Object(e))
        for (let o of e) {
          typeof r == "function" && (o = r.call(e, String(s++), o));
          let a, l;
          if (Array.isArray(o))
            if (o.length === 2)
              a = o[0], l = o[1];
            else
              throw new TypeError(`Expected [key, value] tuple: ${o}`);
          else if (o && o instanceof Object) {
            let c = Object.keys(o);
            if (c.length === 1)
              a = c[0], l = o[a];
            else
              throw new TypeError(`Expected tuple with one key, not ${c.length} keys`);
          } else
            a = o;
          n.items.push(Rc.createPair(a, l, i));
        }
      return n;
    }
    var Kk = { collection: "seq", default: false, tag: "tag:yaml.org,2002:pairs", resolve: Gg, createNode: Yg };
    Io.createPairs = Yg;
    Io.pairs = Kk;
    Io.resolvePairs = Gg;
  });
  var qc = w((Mc) => {
    var Wg = Se(), Pc = xi(), Tn = Ti(), Jk = Ai(), zg = No(), tr = class t extends Jk.YAMLSeq {
      constructor() {
        super(), this.add = Tn.YAMLMap.prototype.add.bind(this), this.delete = Tn.YAMLMap.prototype.delete.bind(this), this.get = Tn.YAMLMap.prototype.get.bind(this), this.has = Tn.YAMLMap.prototype.has.bind(this), this.set = Tn.YAMLMap.prototype.set.bind(this), this.tag = t.tag;
      }
      toJSON(e, i) {
        if (!i)
          return super.toJSON(e);
        let r = new Map;
        i != null && i.onCreate && i.onCreate(r);
        for (let n of this.items) {
          let s, o;
          if (Wg.isPair(n) ? (s = Pc.toJS(n.key, "", i), o = Pc.toJS(n.value, s, i)) : s = Pc.toJS(n, "", i), r.has(s))
            throw new Error("Ordered maps must not include duplicate keys");
          r.set(s, o);
        }
        return r;
      }
      static from(e, i, r) {
        let n = zg.createPairs(e, i, r), s = new this;
        return s.items = n.items, s;
      }
    };
    tr.tag = "tag:yaml.org,2002:omap";
    var Zk = { collection: "seq", identify: (t) => t instanceof Map, nodeClass: tr, default: false, tag: "tag:yaml.org,2002:omap", resolve(t, e) {
      let i = zg.resolvePairs(t, e), r = [];
      for (let { key: n } of i.items)
        Wg.isScalar(n) && (r.includes(n.value) ? e(`Ordered maps must not include duplicate keys: ${n.value}`) : r.push(n.value));
      return Object.assign(new tr, i);
    }, createNode: (t, e, i) => tr.from(t, e, i) };
    Mc.YAMLOMap = tr;
    Mc.omap = Zk;
  });
  var Xg = w((Fc) => {
    var Kg = je();
    function Jg({ value: t, source: e }, i) {
      return e && (t ? Zg : Qg).test.test(e) ? e : t ? i.options.trueStr : i.options.falseStr;
    }
    var Zg = { identify: (t) => t === true, default: true, tag: "tag:yaml.org,2002:bool", test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/, resolve: () => new Kg.Scalar(true), stringify: Jg }, Qg = { identify: (t) => t === false, default: true, tag: "tag:yaml.org,2002:bool", test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/, resolve: () => new Kg.Scalar(false), stringify: Jg };
    Fc.falseTag = Qg;
    Fc.trueTag = Zg;
  });
  var e0 = w((Lo) => {
    var Qk = je(), Dc = $r(), Xk = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/, resolve: (t) => t.slice(-3).toLowerCase() === "nan" ? NaN : t[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, stringify: Dc.stringifyNumber }, eO = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", format: "EXP", test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/, resolve: (t) => parseFloat(t.replace(/_/g, "")), stringify(t) {
      let e = Number(t.value);
      return isFinite(e) ? e.toExponential() : Dc.stringifyNumber(t);
    } }, tO = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/, resolve(t) {
      let e = new Qk.Scalar(parseFloat(t.replace(/_/g, ""))), i = t.indexOf(".");
      if (i !== -1) {
        let r = t.substring(i + 1).replace(/_/g, "");
        r[r.length - 1] === "0" && (e.minFractionDigits = r.length);
      }
      return e;
    }, stringify: Dc.stringifyNumber };
    Lo.float = tO;
    Lo.floatExp = eO;
    Lo.floatNaN = Xk;
  });
  var i0 = w((In) => {
    var t0 = $r(), An = (t) => typeof t == "bigint" || Number.isInteger(t);
    function Bo(t, e, i, { intAsBigInt: r }) {
      let n = t[0];
      if ((n === "-" || n === "+") && (e += 1), t = t.substring(e).replace(/_/g, ""), r) {
        switch (i) {
          case 2:
            t = `0b${t}`;
            break;
          case 8:
            t = `0o${t}`;
            break;
          case 16:
            t = `0x${t}`;
            break;
        }
        let o = BigInt(t);
        return n === "-" ? BigInt(-1) * o : o;
      }
      let s = parseInt(t, i);
      return n === "-" ? -1 * s : s;
    }
    function jc(t, e, i) {
      let { value: r } = t;
      if (An(r)) {
        let n = r.toString(e);
        return r < 0 ? "-" + i + n.substr(1) : i + n;
      }
      return t0.stringifyNumber(t);
    }
    var iO = { identify: An, default: true, tag: "tag:yaml.org,2002:int", format: "BIN", test: /^[-+]?0b[0-1_]+$/, resolve: (t, e, i) => Bo(t, 2, 2, i), stringify: (t) => jc(t, 2, "0b") }, rO = { identify: An, default: true, tag: "tag:yaml.org,2002:int", format: "OCT", test: /^[-+]?0[0-7_]+$/, resolve: (t, e, i) => Bo(t, 1, 8, i), stringify: (t) => jc(t, 8, "0") }, nO = { identify: An, default: true, tag: "tag:yaml.org,2002:int", test: /^[-+]?[0-9][0-9_]*$/, resolve: (t, e, i) => Bo(t, 0, 10, i), stringify: t0.stringifyNumber }, sO = { identify: An, default: true, tag: "tag:yaml.org,2002:int", format: "HEX", test: /^[-+]?0x[0-9a-fA-F_]+$/, resolve: (t, e, i) => Bo(t, 2, 16, i), stringify: (t) => jc(t, 16, "0x") };
    In.int = nO;
    In.intBin = iO;
    In.intHex = sO;
    In.intOct = rO;
  });
  var $c = w((Uc) => {
    var Mo = Se(), Ro = Oi(), Po = Ti(), ir = class t extends Po.YAMLMap {
      constructor(e) {
        super(e), this.tag = t.tag;
      }
      add(e) {
        let i;
        Mo.isPair(e) ? i = e : e && typeof e == "object" && ("key" in e) && ("value" in e) && e.value === null ? i = new Ro.Pair(e.key, null) : i = new Ro.Pair(e, null), Po.findPair(this.items, i.key) || this.items.push(i);
      }
      get(e, i) {
        let r = Po.findPair(this.items, e);
        return !i && Mo.isPair(r) ? Mo.isScalar(r.key) ? r.key.value : r.key : r;
      }
      set(e, i) {
        if (typeof i != "boolean")
          throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof i}`);
        let r = Po.findPair(this.items, e);
        r && !i ? this.items.splice(this.items.indexOf(r), 1) : !r && i && this.items.push(new Ro.Pair(e));
      }
      toJSON(e, i) {
        return super.toJSON(e, i, Set);
      }
      toString(e, i, r) {
        if (!e)
          return JSON.stringify(this);
        if (this.hasAllNullValues(true))
          return super.toString(Object.assign({}, e, { allNullValues: true }), i, r);
        throw new Error("Set items must all have null values");
      }
      static from(e, i, r) {
        let { replacer: n } = r, s = new this(e);
        if (i && Symbol.iterator in Object(i))
          for (let o of i)
            typeof n == "function" && (o = n.call(i, o, o)), s.items.push(Ro.createPair(o, null, r));
        return s;
      }
    };
    ir.tag = "tag:yaml.org,2002:set";
    var oO = { collection: "map", identify: (t) => t instanceof Set, nodeClass: ir, default: false, tag: "tag:yaml.org,2002:set", createNode: (t, e, i) => ir.from(t, e, i), resolve(t, e) {
      if (Mo.isMap(t)) {
        if (t.hasAllNullValues(true))
          return Object.assign(new ir, t);
        e("Set items must all have null values");
      } else
        e("Expected a mapping for this tag");
      return t;
    } };
    Uc.YAMLSet = ir;
    Uc.set = oO;
  });
  var Hc = w((qo) => {
    var aO = $r();
    function Vc(t, e) {
      let i = t[0], r = i === "-" || i === "+" ? t.substring(1) : t, n = (o) => e ? BigInt(o) : Number(o), s = r.replace(/_/g, "").split(":").reduce((o, a) => o * n(60) + n(a), n(0));
      return i === "-" ? n(-1) * s : s;
    }
    function r0(t) {
      let { value: e } = t, i = (o) => o;
      if (typeof e == "bigint")
        i = (o) => BigInt(o);
      else if (isNaN(e) || !isFinite(e))
        return aO.stringifyNumber(t);
      let r = "";
      e < 0 && (r = "-", e *= i(-1));
      let n = i(60), s = [e % n];
      return e < 60 ? s.unshift(0) : (e = (e - s[0]) / n, s.unshift(e % n), e >= 60 && (e = (e - s[0]) / n, s.unshift(e))), r + s.map((o) => String(o).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
    }
    var lO = { identify: (t) => typeof t == "bigint" || Number.isInteger(t), default: true, tag: "tag:yaml.org,2002:int", format: "TIME", test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/, resolve: (t, e, { intAsBigInt: i }) => Vc(t, i), stringify: r0 }, cO = { identify: (t) => typeof t == "number", default: true, tag: "tag:yaml.org,2002:float", format: "TIME", test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/, resolve: (t) => Vc(t, false), stringify: r0 }, n0 = { identify: (t) => t instanceof Date, default: true, tag: "tag:yaml.org,2002:timestamp", test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"), resolve(t) {
      let e = t.match(n0.test);
      if (!e)
        throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
      let [, i, r, n, s, o, a] = e.map(Number), l = e[7] ? Number((e[7] + "00").substr(1, 3)) : 0, c = Date.UTC(i, r - 1, n, s || 0, o || 0, a || 0, l), u = e[8];
      if (u && u !== "Z") {
        let f = Vc(u, false);
        Math.abs(f) < 30 && (f *= 60), c -= 60000 * f;
      }
      return new Date(c);
    }, stringify: ({ value: t }) => t.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "") };
    qo.floatTime = cO;
    qo.intTime = lO;
    qo.timestamp = n0;
  });
  var a0 = w((o0) => {
    var uO = jr(), fO = Eo(), hO = Ur(), pO = Cn(), dO = Bc(), s0 = Xg(), Gc = e0(), Fo = i0(), mO = go(), gO = qc(), vO = No(), yO = $c(), Yc = Hc(), bO = [uO.map, hO.seq, pO.string, fO.nullTag, s0.trueTag, s0.falseTag, Fo.intBin, Fo.intOct, Fo.int, Fo.intHex, Gc.floatNaN, Gc.floatExp, Gc.float, dO.binary, mO.merge, gO.omap, vO.pairs, yO.set, Yc.intTime, Yc.floatTime, Yc.timestamp];
    o0.schema = bO;
  });
  var v0 = w((Kc) => {
    var f0 = jr(), _O = Eo(), h0 = Ur(), wO = Cn(), xO = kc(), Wc = Cc(), zc = Ac(), SO = jg(), EO = Vg(), p0 = Bc(), Nn = go(), d0 = qc(), m0 = No(), l0 = a0(), g0 = $c(), Do = Hc(), c0 = new Map([["core", SO.schema], ["failsafe", [f0.map, h0.seq, wO.string]], ["json", EO.schema], ["yaml11", l0.schema], ["yaml-1.1", l0.schema]]), u0 = { binary: p0.binary, bool: xO.boolTag, float: Wc.float, floatExp: Wc.floatExp, floatNaN: Wc.floatNaN, floatTime: Do.floatTime, int: zc.int, intHex: zc.intHex, intOct: zc.intOct, intTime: Do.intTime, map: f0.map, merge: Nn.merge, null: _O.nullTag, omap: d0.omap, pairs: m0.pairs, seq: h0.seq, set: g0.set, timestamp: Do.timestamp }, kO = { "tag:yaml.org,2002:binary": p0.binary, "tag:yaml.org,2002:merge": Nn.merge, "tag:yaml.org,2002:omap": d0.omap, "tag:yaml.org,2002:pairs": m0.pairs, "tag:yaml.org,2002:set": g0.set, "tag:yaml.org,2002:timestamp": Do.timestamp };
    function OO(t, e, i) {
      let r = c0.get(e);
      if (r && !t)
        return i && !r.includes(Nn.merge) ? r.concat(Nn.merge) : r.slice();
      let n = r;
      if (!n)
        if (Array.isArray(t))
          n = [];
        else {
          let s = Array.from(c0.keys()).filter((o) => o !== "yaml11").map((o) => JSON.stringify(o)).join(", ");
          throw new Error(`Unknown schema "${e}"; use one of ${s} or define customTags array`);
        }
      if (Array.isArray(t))
        for (let s of t)
          n = n.concat(s);
      else
        typeof t == "function" && (n = t(n.slice()));
      return i && (n = n.concat(Nn.merge)), n.reduce((s, o) => {
        let a = typeof o == "string" ? u0[o] : o;
        if (!a) {
          let l = JSON.stringify(o), c = Object.keys(u0).map((u) => JSON.stringify(u)).join(", ");
          throw new Error(`Unknown custom tag ${l}; use one of ${c}`);
        }
        return s.includes(a) || s.push(a), s;
      }, []);
    }
    Kc.coreKnownTags = kO;
    Kc.getTags = OO;
  });
  var Qc = w((y0) => {
    var Jc = Se(), CO = jr(), TO = Ur(), AO = Cn(), jo = v0(), IO = (t, e) => t.key < e.key ? -1 : t.key > e.key ? 1 : 0, Zc = class t {
      constructor({ compat: e, customTags: i, merge: r, resolveKnownTags: n, schema: s, sortMapEntries: o, toStringDefaults: a }) {
        this.compat = Array.isArray(e) ? jo.getTags(e, "compat") : e ? jo.getTags(null, e) : null, this.name = typeof s == "string" && s || "core", this.knownTags = n ? jo.coreKnownTags : {}, this.tags = jo.getTags(i, this.name, r), this.toStringOptions = a != null ? a : null, Object.defineProperty(this, Jc.MAP, { value: CO.map }), Object.defineProperty(this, Jc.SCALAR, { value: AO.string }), Object.defineProperty(this, Jc.SEQ, { value: TO.seq }), this.sortMapEntries = typeof o == "function" ? o : o === true ? IO : null;
      }
      clone() {
        let e = Object.create(t.prototype, Object.getOwnPropertyDescriptors(this));
        return e.tags = this.tags.slice(), e;
      }
    };
    y0.Schema = Zc;
  });
  var _0 = w((b0) => {
    var NO = Se(), Xc = Sn(), Ln = bn();
    function LO(t, e) {
      var l;
      let i = [], r = e.directives === true;
      if (e.directives !== false && t.directives) {
        let c = t.directives.toString(t);
        c ? (i.push(c), r = true) : t.directives.docStart && (r = true);
      }
      r && i.push("---");
      let n = Xc.createStringifyContext(t, e), { commentString: s } = n.options;
      if (t.commentBefore) {
        i.length !== 1 && i.unshift("");
        let c = s(t.commentBefore);
        i.unshift(Ln.indentComment(c, ""));
      }
      let o = false, a = null;
      if (t.contents) {
        if (NO.isNode(t.contents)) {
          if (t.contents.spaceBefore && r && i.push(""), t.contents.commentBefore) {
            let f = s(t.contents.commentBefore);
            i.push(Ln.indentComment(f, ""));
          }
          n.forceBlockIndent = !!t.comment, a = t.contents.comment;
        }
        let c = a ? undefined : () => o = true, u = Xc.stringify(t.contents, n, () => a = null, c);
        a && (u += Ln.lineComment(u, "", s(a))), (u[0] === "|" || u[0] === ">") && i[i.length - 1] === "---" ? i[i.length - 1] = `--- ${u}` : i.push(u);
      } else
        i.push(Xc.stringify(t.contents, n));
      if ((l = t.directives) != null && l.docEnd)
        if (t.comment) {
          let c = s(t.comment);
          c.includes(`
`) ? (i.push("..."), i.push(Ln.indentComment(c, ""))) : i.push(`... ${c}`);
        } else
          i.push("...");
      else {
        let c = t.comment;
        c && o && (c = c.replace(/^\n+/, "")), c && ((!o || a) && i[i.length - 1] !== "" && i.push(""), i.push(Ln.indentComment(s(c), "")));
      }
      return i.join(`
`) + `
`;
    }
    b0.stringifyDocument = LO;
  });
  var Bn = w((w0) => {
    var BO = vn(), Vr = oo(), Bt = Se(), RO = Oi(), PO = xi(), MO = Qc(), qO = _0(), eu = to(), FO = nc(), DO = yn(), tu = rc(), iu = class t {
      constructor(e, i, r) {
        this.commentBefore = null, this.comment = null, this.errors = [], this.warnings = [], Object.defineProperty(this, Bt.NODE_TYPE, { value: Bt.DOC });
        let n = null;
        typeof i == "function" || Array.isArray(i) ? n = i : r === undefined && i && (r = i, i = undefined);
        let s = Object.assign({ intAsBigInt: false, keepSourceTokens: false, logLevel: "warn", prettyErrors: true, strict: true, stringKeys: false, uniqueKeys: true, version: "1.2" }, r);
        this.options = s;
        let { version: o } = s;
        r != null && r._directives ? (this.directives = r._directives.atDocument(), this.directives.yaml.explicit && (o = this.directives.yaml.version)) : this.directives = new tu.Directives({ version: o }), this.setSchema(o, r), this.contents = e === undefined ? null : this.createNode(e, n, r);
      }
      clone() {
        let e = Object.create(t.prototype, { [Bt.NODE_TYPE]: { value: Bt.DOC } });
        return e.commentBefore = this.commentBefore, e.comment = this.comment, e.errors = this.errors.slice(), e.warnings = this.warnings.slice(), e.options = Object.assign({}, this.options), this.directives && (e.directives = this.directives.clone()), e.schema = this.schema.clone(), e.contents = Bt.isNode(this.contents) ? this.contents.clone(e.schema) : this.contents, this.range && (e.range = this.range.slice()), e;
      }
      add(e) {
        Hr(this.contents) && this.contents.add(e);
      }
      addIn(e, i) {
        Hr(this.contents) && this.contents.addIn(e, i);
      }
      createAlias(e, i) {
        if (!e.anchor) {
          let r = eu.anchorNames(this);
          e.anchor = !i || r.has(i) ? eu.findNewAnchor(i || "a", r) : i;
        }
        return new BO.Alias(e.anchor);
      }
      createNode(e, i, r) {
        let n;
        if (typeof i == "function")
          e = i.call({ "": e }, "", e), n = i;
        else if (Array.isArray(i)) {
          let b = (S) => typeof S == "number" || S instanceof String || S instanceof Number, _ = i.filter(b).map(String);
          _.length > 0 && (i = i.concat(_)), n = i;
        } else
          r === undefined && i && (r = i, i = undefined);
        let { aliasDuplicateObjects: s, anchorPrefix: o, flow: a, keepUndefined: l, onTagObj: c, tag: u } = r != null ? r : {}, { onAnchor: f, setAnchors: d, sourceObjects: g } = eu.createNodeAnchors(this, o || "a"), m = { aliasDuplicateObjects: s != null ? s : true, keepUndefined: l != null ? l : false, onAnchor: f, onTagObj: c, replacer: n, schema: this.schema, sourceObjects: g }, v = DO.createNode(e, u, m);
        return a && Bt.isCollection(v) && (v.flow = true), d(), v;
      }
      createPair(e, i, r = {}) {
        let n = this.createNode(e, null, r), s = this.createNode(i, null, r);
        return new RO.Pair(n, s);
      }
      delete(e) {
        return Hr(this.contents) ? this.contents.delete(e) : false;
      }
      deleteIn(e) {
        return Vr.isEmptyPath(e) ? this.contents == null ? false : (this.contents = null, true) : Hr(this.contents) ? this.contents.deleteIn(e) : false;
      }
      get(e, i) {
        return Bt.isCollection(this.contents) ? this.contents.get(e, i) : undefined;
      }
      getIn(e, i) {
        return Vr.isEmptyPath(e) ? !i && Bt.isScalar(this.contents) ? this.contents.value : this.contents : Bt.isCollection(this.contents) ? this.contents.getIn(e, i) : undefined;
      }
      has(e) {
        return Bt.isCollection(this.contents) ? this.contents.has(e) : false;
      }
      hasIn(e) {
        return Vr.isEmptyPath(e) ? this.contents !== undefined : Bt.isCollection(this.contents) ? this.contents.hasIn(e) : false;
      }
      set(e, i) {
        this.contents == null ? this.contents = Vr.collectionFromPath(this.schema, [e], i) : Hr(this.contents) && this.contents.set(e, i);
      }
      setIn(e, i) {
        Vr.isEmptyPath(e) ? this.contents = i : this.contents == null ? this.contents = Vr.collectionFromPath(this.schema, Array.from(e), i) : Hr(this.contents) && this.contents.setIn(e, i);
      }
      setSchema(e, i = {}) {
        typeof e == "number" && (e = String(e));
        let r;
        switch (e) {
          case "1.1":
            this.directives ? this.directives.yaml.version = "1.1" : this.directives = new tu.Directives({ version: "1.1" }), r = { resolveKnownTags: false, schema: "yaml-1.1" };
            break;
          case "1.2":
          case "next":
            this.directives ? this.directives.yaml.version = e : this.directives = new tu.Directives({ version: e }), r = { resolveKnownTags: true, schema: "core" };
            break;
          case null:
            this.directives && delete this.directives, r = null;
            break;
          default: {
            let n = JSON.stringify(e);
            throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${n}`);
          }
        }
        if (i.schema instanceof Object)
          this.schema = i.schema;
        else if (r)
          this.schema = new MO.Schema(Object.assign(r, i));
        else
          throw new Error("With a null YAML version, the { schema: Schema } option is required");
      }
      toJS({ json: e, jsonArg: i, mapAsMap: r, maxAliasCount: n, onAnchor: s, reviver: o } = {}) {
        let a = { anchors: new Map, doc: this, keep: !e, mapAsMap: r === true, mapKeyWarned: false, maxAliasCount: typeof n == "number" ? n : 100 }, l = PO.toJS(this.contents, i != null ? i : "", a);
        if (typeof s == "function")
          for (let { count: c, res: u } of a.anchors.values())
            s(u, c);
        return typeof o == "function" ? FO.applyReviver(o, { "": l }, "", l) : l;
      }
      toJSON(e, i) {
        return this.toJS({ json: true, jsonArg: e, mapAsMap: false, onAnchor: i });
      }
      toString(e = {}) {
        if (this.errors.length > 0)
          throw new Error("Document with errors cannot be stringified");
        if ("indent" in e && (!Number.isInteger(e.indent) || Number(e.indent) <= 0)) {
          let i = JSON.stringify(e.indent);
          throw new Error(`"indent" option must be a positive integer, not ${i}`);
        }
        return qO.stringifyDocument(this, e);
      }
    };
    function Hr(t) {
      if (Bt.isCollection(t))
        return true;
      throw new Error("Expected a YAML collection as document contents");
    }
    w0.Document = iu;
  });
  var Mn = w((Pn) => {
    var Rn = class extends Error {
      constructor(e, i, r, n) {
        super(), this.name = e, this.code = r, this.message = n, this.pos = i;
      }
    }, ru = class extends Rn {
      constructor(e, i, r) {
        super("YAMLParseError", e, i, r);
      }
    }, nu = class extends Rn {
      constructor(e, i, r) {
        super("YAMLWarning", e, i, r);
      }
    }, jO = (t, e) => (i) => {
      if (i.pos[0] === -1)
        return;
      i.linePos = i.pos.map((a) => e.linePos(a));
      let { line: r, col: n } = i.linePos[0];
      i.message += ` at line ${r}, column ${n}`;
      let s = n - 1, o = t.substring(e.lineStarts[r - 1], e.lineStarts[r]).replace(/[\n\r]+$/, "");
      if (s >= 60 && o.length > 80) {
        let a = Math.min(s - 39, o.length - 79);
        o = "…" + o.substring(a), s -= a - 1;
      }
      if (o.length > 80 && (o = o.substring(0, 79) + "…"), r > 1 && /^ *$/.test(o.substring(0, s))) {
        let a = t.substring(e.lineStarts[r - 2], e.lineStarts[r - 1]);
        a.length > 80 && (a = a.substring(0, 79) + `…
`), o = a + o;
      }
      if (/[^ ]/.test(o)) {
        let a = 1, l = i.linePos[1];
        l && l.line === r && l.col > n && (a = Math.max(1, Math.min(l.col - n, 80 - s)));
        let c = " ".repeat(s) + "^".repeat(a);
        i.message += `:

${o}
${c}
`;
      }
    };
    Pn.YAMLError = Rn;
    Pn.YAMLParseError = ru;
    Pn.YAMLWarning = nu;
    Pn.prettifyError = jO;
  });
  var qn = w((x0) => {
    function UO(t, { flow: e, indicator: i, next: r, offset: n, onError: s, parentIndent: o, startOnNewline: a }) {
      let l = false, c = a, u = a, f = "", d = "", g = false, m = false, v = null, b = null, _ = null, S = null, O = null, k = null, E = null;
      for (let A of t)
        switch (m && (A.type !== "space" && A.type !== "newline" && A.type !== "comma" && s(A.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space"), m = false), v && (c && A.type !== "comment" && A.type !== "newline" && s(v, "TAB_AS_INDENT", "Tabs are not allowed as indentation"), v = null), A.type) {
          case "space":
            !e && (i !== "doc-start" || (r == null ? undefined : r.type) !== "flow-collection") && A.source.includes("\t") && (v = A), u = true;
            break;
          case "comment": {
            u || s(A, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
            let C = A.source.substring(1) || " ";
            f ? f += d + C : f = C, d = "", c = false;
            break;
          }
          case "newline":
            c ? f ? f += A.source : l = true : d += A.source, c = true, g = true, (b || _) && (S = A), u = true;
            break;
          case "anchor":
            b && s(A, "MULTIPLE_ANCHORS", "A node can have at most one anchor"), A.source.endsWith(":") && s(A.offset + A.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true), b = A, E === null && (E = A.offset), c = false, u = false, m = true;
            break;
          case "tag": {
            _ && s(A, "MULTIPLE_TAGS", "A node can have at most one tag"), _ = A, E === null && (E = A.offset), c = false, u = false, m = true;
            break;
          }
          case i:
            (b || _) && s(A, "BAD_PROP_ORDER", `Anchors and tags must be after the ${A.source} indicator`), k && s(A, "UNEXPECTED_TOKEN", `Unexpected ${A.source} in ${e != null ? e : "collection"}`), k = A, c = i === "seq-item-ind" || i === "explicit-key-ind", u = false;
            break;
          case "comma":
            if (e) {
              O && s(A, "UNEXPECTED_TOKEN", `Unexpected , in ${e}`), O = A, c = false, u = false;
              break;
            }
          default:
            s(A, "UNEXPECTED_TOKEN", `Unexpected ${A.type} token`), c = false, u = false;
        }
      let R = t[t.length - 1], T = R ? R.offset + R.source.length : n;
      return m && r && r.type !== "space" && r.type !== "newline" && r.type !== "comma" && (r.type !== "scalar" || r.source !== "") && s(r.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space"), v && (c && v.indent <= o || (r == null ? undefined : r.type) === "block-map" || (r == null ? undefined : r.type) === "block-seq") && s(v, "TAB_AS_INDENT", "Tabs are not allowed as indentation"), { comma: O, found: k, spaceBefore: l, comment: f, hasNewline: g, anchor: b, tag: _, newlineAfterProp: S, end: T, start: E != null ? E : T };
    }
    x0.resolveProps = UO;
  });
  var Uo = w((S0) => {
    function su(t) {
      if (!t)
        return null;
      switch (t.type) {
        case "alias":
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
          if (t.source.includes(`
`))
            return true;
          if (t.end) {
            for (let e of t.end)
              if (e.type === "newline")
                return true;
          }
          return false;
        case "flow-collection":
          for (let e of t.items) {
            for (let i of e.start)
              if (i.type === "newline")
                return true;
            if (e.sep) {
              for (let i of e.sep)
                if (i.type === "newline")
                  return true;
            }
            if (su(e.key) || su(e.value))
              return true;
          }
          return false;
        default:
          return true;
      }
    }
    S0.containsNewline = su;
  });
  var ou = w((E0) => {
    var $O = Uo();
    function VO(t, e, i) {
      if ((e == null ? undefined : e.type) === "flow-collection") {
        let r = e.end[0];
        r.indent === t && (r.source === "]" || r.source === "}") && $O.containsNewline(e) && i(r, "BAD_INDENT", "Flow end indicator should be more indented than parent", true);
      }
    }
    E0.flowIndentCheck = VO;
  });
  var au = w((O0) => {
    var k0 = Se();
    function HO(t, e, i) {
      let { uniqueKeys: r } = t.options;
      if (r === false)
        return false;
      let n = typeof r == "function" ? r : (s, o) => s === o || k0.isScalar(s) && k0.isScalar(o) && s.value === o.value;
      return e.some((s) => n(s.key, i));
    }
    O0.mapIncludes = HO;
  });
  var L0 = w((N0) => {
    var C0 = Oi(), GO = Ti(), T0 = qn(), YO = Uo(), A0 = ou(), WO = au(), I0 = "All mapping items must start at the same column";
    function zO({ composeNode: t, composeEmptyNode: e }, i, r, n, s) {
      var u, f;
      let o = (u = s == null ? undefined : s.nodeClass) != null ? u : GO.YAMLMap, a = new o(i.schema);
      i.atRoot && (i.atRoot = false);
      let l = r.offset, c = null;
      for (let d of r.items) {
        let { start: g, key: m, sep: v, value: b } = d, _ = T0.resolveProps(g, { indicator: "explicit-key-ind", next: m != null ? m : v == null ? undefined : v[0], offset: l, onError: n, parentIndent: r.indent, startOnNewline: true }), S = !_.found;
        if (S) {
          if (m && (m.type === "block-seq" ? n(l, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key") : ("indent" in m) && m.indent !== r.indent && n(l, "BAD_INDENT", I0)), !_.anchor && !_.tag && !v) {
            c = _.end, _.comment && (a.comment ? a.comment += `
` + _.comment : a.comment = _.comment);
            continue;
          }
          (_.newlineAfterProp || YO.containsNewline(m)) && n(m != null ? m : g[g.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
        } else
          ((f = _.found) == null ? undefined : f.indent) !== r.indent && n(l, "BAD_INDENT", I0);
        i.atKey = true;
        let O = _.end, k = m ? t(i, m, _, n) : e(i, O, g, null, _, n);
        i.schema.compat && A0.flowIndentCheck(r.indent, m, n), i.atKey = false, WO.mapIncludes(i, a.items, k) && n(O, "DUPLICATE_KEY", "Map keys must be unique");
        let E = T0.resolveProps(v != null ? v : [], { indicator: "map-value-ind", next: b, offset: k.range[2], onError: n, parentIndent: r.indent, startOnNewline: !m || m.type === "block-scalar" });
        if (l = E.end, E.found) {
          S && ((b == null ? undefined : b.type) === "block-map" && !E.hasNewline && n(l, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings"), i.options.strict && _.start < E.found.offset - 1024 && n(k.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key"));
          let R = b ? t(i, b, E, n) : e(i, l, v, null, E, n);
          i.schema.compat && A0.flowIndentCheck(r.indent, b, n), l = R.range[2];
          let T = new C0.Pair(k, R);
          i.options.keepSourceTokens && (T.srcToken = d), a.items.push(T);
        } else {
          S && n(k.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values"), E.comment && (k.comment ? k.comment += `
` + E.comment : k.comment = E.comment);
          let R = new C0.Pair(k);
          i.options.keepSourceTokens && (R.srcToken = d), a.items.push(R);
        }
      }
      return c && c < l && n(c, "IMPOSSIBLE", "Map comment with trailing content"), a.range = [r.offset, l, c != null ? c : l], a;
    }
    N0.resolveBlockMap = zO;
  });
  var R0 = w((B0) => {
    var KO = Ai(), JO = qn(), ZO = ou();
    function QO({ composeNode: t, composeEmptyNode: e }, i, r, n, s) {
      var u;
      let o = (u = s == null ? undefined : s.nodeClass) != null ? u : KO.YAMLSeq, a = new o(i.schema);
      i.atRoot && (i.atRoot = false), i.atKey && (i.atKey = false);
      let l = r.offset, c = null;
      for (let { start: f, value: d } of r.items) {
        let g = JO.resolveProps(f, { indicator: "seq-item-ind", next: d, offset: l, onError: n, parentIndent: r.indent, startOnNewline: true });
        if (!g.found)
          if (g.anchor || g.tag || d)
            d && d.type === "block-seq" ? n(g.end, "BAD_INDENT", "All sequence items must start at the same column") : n(l, "MISSING_CHAR", "Sequence item without - indicator");
          else {
            c = g.end, g.comment && (a.comment = g.comment);
            continue;
          }
        let m = d ? t(i, d, g, n) : e(i, g.end, f, null, g, n);
        i.schema.compat && ZO.flowIndentCheck(r.indent, d, n), l = m.range[2], a.items.push(m);
      }
      return a.range = [r.offset, l, c != null ? c : l], a;
    }
    B0.resolveBlockSeq = QO;
  });
  var Gr = w((P0) => {
    function XO(t, e, i, r) {
      let n = "";
      if (t) {
        let s = false, o = "";
        for (let a of t) {
          let { source: l, type: c } = a;
          switch (c) {
            case "space":
              s = true;
              break;
            case "comment": {
              i && !s && r(a, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
              let u = l.substring(1) || " ";
              n ? n += o + u : n = u, o = "";
              break;
            }
            case "newline":
              n && (o += l), s = true;
              break;
            default:
              r(a, "UNEXPECTED_TOKEN", `Unexpected ${c} at node end`);
          }
          e += l.length;
        }
      }
      return { comment: n, offset: e };
    }
    P0.resolveEnd = XO;
  });
  var D0 = w((F0) => {
    var eC = Se(), tC = Oi(), M0 = Ti(), iC = Ai(), rC = Gr(), q0 = qn(), nC = Uo(), sC = au(), lu = "Block collections are not allowed within flow collections", cu = (t) => t && (t.type === "block-map" || t.type === "block-seq");
    function oC({ composeNode: t, composeEmptyNode: e }, i, r, n, s) {
      var b, _;
      let o = r.start.source === "{", a = o ? "flow map" : "flow sequence", l = (b = s == null ? undefined : s.nodeClass) != null ? b : o ? M0.YAMLMap : iC.YAMLSeq, c = new l(i.schema);
      c.flow = true;
      let u = i.atRoot;
      u && (i.atRoot = false), i.atKey && (i.atKey = false);
      let f = r.offset + r.start.source.length;
      for (let S = 0;S < r.items.length; ++S) {
        let O = r.items[S], { start: k, key: E, sep: R, value: T } = O, A = q0.resolveProps(k, { flow: a, indicator: "explicit-key-ind", next: E != null ? E : R == null ? undefined : R[0], offset: f, onError: n, parentIndent: r.indent, startOnNewline: false });
        if (!A.found) {
          if (!A.anchor && !A.tag && !R && !T) {
            S === 0 && A.comma ? n(A.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${a}`) : S < r.items.length - 1 && n(A.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${a}`), A.comment && (c.comment ? c.comment += `
` + A.comment : c.comment = A.comment), f = A.end;
            continue;
          }
          !o && i.options.strict && nC.containsNewline(E) && n(E, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
        }
        if (S === 0)
          A.comma && n(A.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${a}`);
        else if (A.comma || n(A.start, "MISSING_CHAR", `Missing , between ${a} items`), A.comment) {
          let C = "";
          e:
            for (let L of k)
              switch (L.type) {
                case "comma":
                case "space":
                  break;
                case "comment":
                  C = L.source.substring(1);
                  break e;
                default:
                  break e;
              }
          if (C) {
            let L = c.items[c.items.length - 1];
            eC.isPair(L) && (L = (_ = L.value) != null ? _ : L.key), L.comment ? L.comment += `
` + C : L.comment = C, A.comment = A.comment.substring(C.length + 1);
          }
        }
        if (!o && !R && !A.found) {
          let C = T ? t(i, T, A, n) : e(i, A.end, R, null, A, n);
          c.items.push(C), f = C.range[2], cu(T) && n(C.range, "BLOCK_IN_FLOW", lu);
        } else {
          i.atKey = true;
          let C = A.end, L = E ? t(i, E, A, n) : e(i, C, k, null, A, n);
          cu(E) && n(L.range, "BLOCK_IN_FLOW", lu), i.atKey = false;
          let P = q0.resolveProps(R != null ? R : [], { flow: a, indicator: "map-value-ind", next: T, offset: L.range[2], onError: n, parentIndent: r.indent, startOnNewline: false });
          if (P.found) {
            if (!o && !A.found && i.options.strict) {
              if (R)
                for (let H of R) {
                  if (H === P.found)
                    break;
                  if (H.type === "newline") {
                    n(H, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                    break;
                  }
                }
              A.start < P.found.offset - 1024 && n(P.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
            }
          } else
            T && ("source" in T && T.source && T.source[0] === ":" ? n(T, "MISSING_CHAR", `Missing space after : in ${a}`) : n(P.start, "MISSING_CHAR", `Missing , or : between ${a} items`));
          let U = T ? t(i, T, P, n) : P.found ? e(i, P.end, R, null, P, n) : null;
          U ? cu(T) && n(U.range, "BLOCK_IN_FLOW", lu) : P.comment && (L.comment ? L.comment += `
` + P.comment : L.comment = P.comment);
          let F = new tC.Pair(L, U);
          if (i.options.keepSourceTokens && (F.srcToken = O), o) {
            let H = c;
            sC.mapIncludes(i, H.items, L) && n(C, "DUPLICATE_KEY", "Map keys must be unique"), H.items.push(F);
          } else {
            let H = new M0.YAMLMap(i.schema);
            H.flow = true, H.items.push(F);
            let j = (U != null ? U : L).range;
            H.range = [L.range[0], j[1], j[2]], c.items.push(H);
          }
          f = U ? U.range[2] : P.end;
        }
      }
      let d = o ? "}" : "]", [g, ...m] = r.end, v = f;
      if (g && g.source === d)
        v = g.offset + g.source.length;
      else {
        let S = a[0].toUpperCase() + a.substring(1), O = u ? `${S} must end with a ${d}` : `${S} in block collection must be sufficiently indented and end with a ${d}`;
        n(f, u ? "MISSING_CHAR" : "BAD_INDENT", O), g && g.source.length !== 1 && m.unshift(g);
      }
      if (m.length > 0) {
        let S = rC.resolveEnd(m, v, i.options.strict, n);
        S.comment && (c.comment ? c.comment += `
` + S.comment : c.comment = S.comment), c.range = [r.offset, v, S.offset];
      } else
        c.range = [r.offset, v, v];
      return c;
    }
    F0.resolveFlowCollection = oC;
  });
  var U0 = w((j0) => {
    var aC = Se(), lC = je(), cC = Ti(), uC = Ai(), fC = L0(), hC = R0(), pC = D0();
    function uu(t, e, i, r, n, s) {
      let o = i.type === "block-map" ? fC.resolveBlockMap(t, e, i, r, s) : i.type === "block-seq" ? hC.resolveBlockSeq(t, e, i, r, s) : pC.resolveFlowCollection(t, e, i, r, s), a = o.constructor;
      return n === "!" || n === a.tagName ? (o.tag = a.tagName, o) : (n && (o.tag = n), o);
    }
    function dC(t, e, i, r, n) {
      var d, g;
      let s = r.tag, o = s ? e.directives.tagName(s.source, (m) => n(s, "TAG_RESOLVE_FAILED", m)) : null;
      if (i.type === "block-seq") {
        let { anchor: m, newlineAfterProp: v } = r, b = m && s ? m.offset > s.offset ? m : s : m != null ? m : s;
        b && (!v || v.offset < b.offset) && n(b, "MISSING_CHAR", "Missing newline after block sequence props");
      }
      let a = i.type === "block-map" ? "map" : i.type === "block-seq" ? "seq" : i.start.source === "{" ? "map" : "seq";
      if (!s || !o || o === "!" || o === cC.YAMLMap.tagName && a === "map" || o === uC.YAMLSeq.tagName && a === "seq")
        return uu(t, e, i, n, o);
      let l = e.schema.tags.find((m) => m.tag === o && m.collection === a);
      if (!l) {
        let m = e.schema.knownTags[o];
        if (m && m.collection === a)
          e.schema.tags.push(Object.assign({}, m, { default: false })), l = m;
        else
          return m != null && m.collection ? n(s, "BAD_COLLECTION_TYPE", `${m.tag} used for ${a} collection, but expects ${m.collection}`, true) : n(s, "TAG_RESOLVE_FAILED", `Unresolved tag: ${o}`, true), uu(t, e, i, n, o);
      }
      let c = uu(t, e, i, n, o, l), u = (g = (d = l.resolve) == null ? undefined : d.call(l, c, (m) => n(s, "TAG_RESOLVE_FAILED", m), e.options)) != null ? g : c, f = aC.isNode(u) ? u : new lC.Scalar(u);
      return f.range = c.range, f.tag = o, l != null && l.format && (f.format = l.format), f;
    }
    j0.composeCollection = dC;
  });
  var hu = w(($0) => {
    var fu = je();
    function mC(t, e, i) {
      let r = e.offset, n = gC(e, t.options.strict, i);
      if (!n)
        return { value: "", type: null, comment: "", range: [r, r, r] };
      let s = n.mode === ">" ? fu.Scalar.BLOCK_FOLDED : fu.Scalar.BLOCK_LITERAL, o = e.source ? vC(e.source) : [], a = o.length;
      for (let v = o.length - 1;v >= 0; --v) {
        let b = o[v][1];
        if (b === "" || b === "\r")
          a = v;
        else
          break;
      }
      if (a === 0) {
        let v = n.chomp === "+" && o.length > 0 ? `
`.repeat(Math.max(1, o.length - 1)) : "", b = r + n.length;
        return e.source && (b += e.source.length), { value: v, type: s, comment: n.comment, range: [r, b, b] };
      }
      let l = e.indent + n.indent, c = e.offset + n.length, u = 0;
      for (let v = 0;v < a; ++v) {
        let [b, _] = o[v];
        if (_ === "" || _ === "\r")
          n.indent === 0 && b.length > l && (l = b.length);
        else {
          if (b.length < l) {
            let S = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
            i(c + b.length, "MISSING_CHAR", S);
          }
          n.indent === 0 && (l = b.length), u = v, l === 0 && !t.atRoot && i(c, "BAD_INDENT", "Block scalar values in collections must be indented");
          break;
        }
        c += b.length + _.length + 1;
      }
      for (let v = o.length - 1;v >= a; --v)
        o[v][0].length > l && (a = v + 1);
      let f = "", d = "", g = false;
      for (let v = 0;v < u; ++v)
        f += o[v][0].slice(l) + `
`;
      for (let v = u;v < a; ++v) {
        let [b, _] = o[v];
        c += b.length + _.length + 1;
        let S = _[_.length - 1] === "\r";
        if (S && (_ = _.slice(0, -1)), _ && b.length < l) {
          let k = `Block scalar lines must not be less indented than their ${n.indent ? "explicit indentation indicator" : "first line"}`;
          i(c - _.length - (S ? 2 : 1), "BAD_INDENT", k), b = "";
        }
        s === fu.Scalar.BLOCK_LITERAL ? (f += d + b.slice(l) + _, d = `
`) : b.length > l || _[0] === "\t" ? (d === " " ? d = `
` : !g && d === `
` && (d = `

`), f += d + b.slice(l) + _, d = `
`, g = true) : _ === "" ? d === `
` ? f += `
` : d = `
` : (f += d + _, d = " ", g = false);
      }
      switch (n.chomp) {
        case "-":
          break;
        case "+":
          for (let v = a;v < o.length; ++v)
            f += `
` + o[v][0].slice(l);
          f[f.length - 1] !== `
` && (f += `
`);
          break;
        default:
          f += `
`;
      }
      let m = r + n.length + e.source.length;
      return { value: f, type: s, comment: n.comment, range: [r, m, m] };
    }
    function gC({ offset: t, props: e }, i, r) {
      if (e[0].type !== "block-scalar-header")
        return r(e[0], "IMPOSSIBLE", "Block scalar header not found"), null;
      let { source: n } = e[0], s = n[0], o = 0, a = "", l = -1;
      for (let d = 1;d < n.length; ++d) {
        let g = n[d];
        if (!a && (g === "-" || g === "+"))
          a = g;
        else {
          let m = Number(g);
          !o && m ? o = m : l === -1 && (l = t + d);
        }
      }
      l !== -1 && r(l, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${n}`);
      let c = false, u = "", f = n.length;
      for (let d = 1;d < e.length; ++d) {
        let g = e[d];
        switch (g.type) {
          case "space":
            c = true;
          case "newline":
            f += g.source.length;
            break;
          case "comment":
            i && !c && r(g, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters"), f += g.source.length, u = g.source.substring(1);
            break;
          case "error":
            r(g, "UNEXPECTED_TOKEN", g.message), f += g.source.length;
            break;
          default: {
            let m = `Unexpected token in block scalar header: ${g.type}`;
            r(g, "UNEXPECTED_TOKEN", m);
            let v = g.source;
            v && typeof v == "string" && (f += v.length);
          }
        }
      }
      return { mode: s, indent: o, chomp: a, comment: u, length: f };
    }
    function vC(t) {
      let e = t.split(/\n( *)/), i = e[0], r = i.match(/^( *)/), s = [r != null && r[1] ? [r[1], i.slice(r[1].length)] : ["", i]];
      for (let o = 1;o < e.length; o += 2)
        s.push([e[o], e[o + 1]]);
      return s;
    }
    $0.resolveBlockScalar = mC;
  });
  var du = w((H0) => {
    var pu = je(), yC = Gr();
    function bC(t, e, i) {
      let { offset: r, type: n, source: s, end: o } = t, a, l, c = (d, g, m) => i(r + d, g, m);
      switch (n) {
        case "scalar":
          a = pu.Scalar.PLAIN, l = _C(s, c);
          break;
        case "single-quoted-scalar":
          a = pu.Scalar.QUOTE_SINGLE, l = wC(s, c);
          break;
        case "double-quoted-scalar":
          a = pu.Scalar.QUOTE_DOUBLE, l = xC(s, c);
          break;
        default:
          return i(t, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${n}`), { value: "", type: null, comment: "", range: [r, r + s.length, r + s.length] };
      }
      let u = r + s.length, f = yC.resolveEnd(o, u, e, i);
      return { value: l, type: a, comment: f.comment, range: [r, u, f.offset] };
    }
    function _C(t, e) {
      let i = "";
      switch (t[0]) {
        case "\t":
          i = "a tab character";
          break;
        case ",":
          i = "flow indicator character ,";
          break;
        case "%":
          i = "directive indicator character %";
          break;
        case "|":
        case ">": {
          i = `block scalar indicator ${t[0]}`;
          break;
        }
        case "@":
        case "`": {
          i = `reserved character ${t[0]}`;
          break;
        }
      }
      return i && e(0, "BAD_SCALAR_START", `Plain value cannot start with ${i}`), V0(t);
    }
    function wC(t, e) {
      return (t[t.length - 1] !== "'" || t.length === 1) && e(t.length, "MISSING_CHAR", "Missing closing 'quote"), V0(t.slice(1, -1)).replace(/''/g, "'");
    }
    function V0(t) {
      var l;
      let e, i;
      try {
        e = new RegExp(`(.*?)(?<![ \t])[ \t]*\r?
`, "sy"), i = new RegExp(`[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?
`, "sy");
      } catch {
        e = /(.*?)[ \t]*\r?\n/sy, i = /[ \t]*(.*?)[ \t]*\r?\n/sy;
      }
      let r = e.exec(t);
      if (!r)
        return t;
      let n = r[1], s = " ", o = e.lastIndex;
      for (i.lastIndex = o;r = i.exec(t); )
        r[1] === "" ? s === `
` ? n += s : s = `
` : (n += s + r[1], s = " "), o = i.lastIndex;
      let a = /[ \t]*(.*)/sy;
      return a.lastIndex = o, r = a.exec(t), n + s + ((l = r == null ? undefined : r[1]) != null ? l : "");
    }
    function xC(t, e) {
      let i = "";
      for (let r = 1;r < t.length - 1; ++r) {
        let n = t[r];
        if (!(n === "\r" && t[r + 1] === `
`))
          if (n === `
`) {
            let { fold: s, offset: o } = SC(t, r);
            i += s, r = o;
          } else if (n === "\\") {
            let s = t[++r], o = EC[s];
            if (o)
              i += o;
            else if (s === `
`)
              for (s = t[r + 1];s === " " || s === "\t"; )
                s = t[++r + 1];
            else if (s === "\r" && t[r + 1] === `
`)
              for (s = t[++r + 1];s === " " || s === "\t"; )
                s = t[++r + 1];
            else if (s === "x" || s === "u" || s === "U") {
              let a = { x: 2, u: 4, U: 8 }[s];
              i += kC(t, r + 1, a, e), r += a;
            } else {
              let a = t.substr(r - 1, 2);
              e(r - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${a}`), i += a;
            }
          } else if (n === " " || n === "\t") {
            let s = r, o = t[r + 1];
            for (;o === " " || o === "\t"; )
              o = t[++r + 1];
            o !== `
` && !(o === "\r" && t[r + 2] === `
`) && (i += r > s ? t.slice(s, r + 1) : n);
          } else
            i += n;
      }
      return (t[t.length - 1] !== '"' || t.length === 1) && e(t.length, "MISSING_CHAR", 'Missing closing "quote'), i;
    }
    function SC(t, e) {
      let i = "", r = t[e + 1];
      for (;(r === " " || r === "\t" || r === `
` || r === "\r") && !(r === "\r" && t[e + 2] !== `
`); )
        r === `
` && (i += `
`), e += 1, r = t[e + 1];
      return i || (i = " "), { fold: i, offset: e };
    }
    var EC = { 0: "\x00", a: "\x07", b: "\b", e: "\x1B", f: "\f", n: `
`, r: "\r", t: "\t", v: "\v", N: "", _: " ", L: "\u2028", P: "\u2029", " ": " ", '"': '"', "/": "/", "\\": "\\", "\t": "\t" };
    function kC(t, e, i, r) {
      let n = t.substr(e, i), o = n.length === i && /^[0-9a-fA-F]+$/.test(n) ? parseInt(n, 16) : NaN;
      if (isNaN(o)) {
        let a = t.substr(e - 2, i + 2);
        return r(e - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${a}`), a;
      }
      return String.fromCodePoint(o);
    }
    H0.resolveFlowScalar = bC;
  });
  var W0 = w((Y0) => {
    var rr = Se(), G0 = je(), OC = hu(), CC = du();
    function TC(t, e, i, r) {
      let { value: n, type: s, comment: o, range: a } = e.type === "block-scalar" ? OC.resolveBlockScalar(t, e, r) : CC.resolveFlowScalar(e, t.options.strict, r), l = i ? t.directives.tagName(i.source, (f) => r(i, "TAG_RESOLVE_FAILED", f)) : null, c;
      t.options.stringKeys && t.atKey ? c = t.schema[rr.SCALAR] : l ? c = AC(t.schema, n, l, i, r) : e.type === "scalar" ? c = IC(t, n, e, r) : c = t.schema[rr.SCALAR];
      let u;
      try {
        let f = c.resolve(n, (d) => r(i != null ? i : e, "TAG_RESOLVE_FAILED", d), t.options);
        u = rr.isScalar(f) ? f : new G0.Scalar(f);
      } catch (f) {
        let d = f instanceof Error ? f.message : String(f);
        r(i != null ? i : e, "TAG_RESOLVE_FAILED", d), u = new G0.Scalar(n);
      }
      return u.range = a, u.source = n, s && (u.type = s), l && (u.tag = l), c.format && (u.format = c.format), o && (u.comment = o), u;
    }
    function AC(t, e, i, r, n) {
      var a;
      if (i === "!")
        return t[rr.SCALAR];
      let s = [];
      for (let l of t.tags)
        if (!l.collection && l.tag === i)
          if (l.default && l.test)
            s.push(l);
          else
            return l;
      for (let l of s)
        if ((a = l.test) != null && a.test(e))
          return l;
      let o = t.knownTags[i];
      return o && !o.collection ? (t.tags.push(Object.assign({}, o, { default: false, test: undefined })), o) : (n(r, "TAG_RESOLVE_FAILED", `Unresolved tag: ${i}`, i !== "tag:yaml.org,2002:str"), t[rr.SCALAR]);
    }
    function IC({ atKey: t, directives: e, schema: i }, r, n, s) {
      var a;
      let o = i.tags.find((l) => {
        var c;
        return (l.default === true || t && l.default === "key") && ((c = l.test) == null ? undefined : c.test(r));
      }) || i[rr.SCALAR];
      if (i.compat) {
        let l = (a = i.compat.find((c) => {
          var u;
          return c.default && ((u = c.test) == null ? undefined : u.test(r));
        })) != null ? a : i[rr.SCALAR];
        if (o.tag !== l.tag) {
          let c = e.tagString(o.tag), u = e.tagString(l.tag), f = `Value may be parsed as either ${c} or ${u}`;
          s(n, "TAG_RESOLVE_FAILED", f, true);
        }
      }
      return o;
    }
    Y0.composeScalar = TC;
  });
  var K0 = w((z0) => {
    function NC(t, e, i) {
      if (e) {
        i === null && (i = e.length);
        for (let r = i - 1;r >= 0; --r) {
          let n = e[r];
          switch (n.type) {
            case "space":
            case "comment":
            case "newline":
              t -= n.source.length;
              continue;
          }
          for (n = e[++r];(n == null ? undefined : n.type) === "space"; )
            t += n.source.length, n = e[++r];
          break;
        }
      }
      return t;
    }
    z0.emptyScalarPosition = NC;
  });
  var Q0 = w((gu) => {
    var LC = vn(), BC = Se(), RC = U0(), J0 = W0(), PC = Gr(), MC = K0(), qC = { composeNode: Z0, composeEmptyNode: mu };
    function Z0(t, e, i, r) {
      let n = t.atKey, { spaceBefore: s, comment: o, anchor: a, tag: l } = i, c, u = true;
      switch (e.type) {
        case "alias":
          c = FC(t, e, r), (a || l) && r(e, "ALIAS_PROPS", "An alias node must not specify any properties");
          break;
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "block-scalar":
          c = J0.composeScalar(t, e, l, r), a && (c.anchor = a.source.substring(1));
          break;
        case "block-map":
        case "block-seq":
        case "flow-collection":
          c = RC.composeCollection(qC, t, e, i, r), a && (c.anchor = a.source.substring(1));
          break;
        default: {
          let f = e.type === "error" ? e.message : `Unsupported token (type: ${e.type})`;
          r(e, "UNEXPECTED_TOKEN", f), c = mu(t, e.offset, undefined, null, i, r), u = false;
        }
      }
      if (a && c.anchor === "" && r(a, "BAD_ALIAS", "Anchor cannot be an empty string"), n && t.options.stringKeys && (!BC.isScalar(c) || typeof c.value != "string" || c.tag && c.tag !== "tag:yaml.org,2002:str")) {
        let f = "With stringKeys, all keys must be strings";
        r(l != null ? l : e, "NON_STRING_KEY", f);
      }
      return s && (c.spaceBefore = true), o && (e.type === "scalar" && e.source === "" ? c.comment = o : c.commentBefore = o), t.options.keepSourceTokens && u && (c.srcToken = e), c;
    }
    function mu(t, e, i, r, { spaceBefore: n, comment: s, anchor: o, tag: a, end: l }, c) {
      let u = { type: "scalar", offset: MC.emptyScalarPosition(e, i, r), indent: -1, source: "" }, f = J0.composeScalar(t, u, a, c);
      return o && (f.anchor = o.source.substring(1), f.anchor === "" && c(o, "BAD_ALIAS", "Anchor cannot be an empty string")), n && (f.spaceBefore = true), s && (f.comment = s, f.range[2] = l), f;
    }
    function FC({ options: t }, { offset: e, source: i, end: r }, n) {
      let s = new LC.Alias(i.substring(1));
      s.source === "" && n(e, "BAD_ALIAS", "Alias cannot be an empty string"), s.source.endsWith(":") && n(e + i.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
      let o = e + i.length, a = PC.resolveEnd(r, o, t.strict, n);
      return s.range = [e, o, a.offset], a.comment && (s.comment = a.comment), s;
    }
    gu.composeEmptyNode = mu;
    gu.composeNode = Z0;
  });
  var tv = w((ev) => {
    var DC = Bn(), X0 = Q0(), jC = Gr(), UC = qn();
    function $C(t, e, { offset: i, start: r, value: n, end: s }, o) {
      let a = Object.assign({ _directives: e }, t), l = new DC.Document(undefined, a), c = { atKey: false, atRoot: true, directives: l.directives, options: l.options, schema: l.schema }, u = UC.resolveProps(r, { indicator: "doc-start", next: n != null ? n : s == null ? undefined : s[0], offset: i, onError: o, parentIndent: 0, startOnNewline: true });
      u.found && (l.directives.docStart = true, n && (n.type === "block-map" || n.type === "block-seq") && !u.hasNewline && o(u.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker")), l.contents = n ? X0.composeNode(c, n, u, o) : X0.composeEmptyNode(c, u.end, r, null, u, o);
      let f = l.contents.range[2], d = jC.resolveEnd(s, f, false, o);
      return d.comment && (l.comment = d.comment), l.range = [i, f, d.offset], l;
    }
    ev.composeDoc = $C;
  });
  var yu = w((nv) => {
    var VC = rc(), HC = Bn(), Fn = Mn(), iv = Se(), GC = tv(), YC = Gr();
    function Dn(t) {
      if (typeof t == "number")
        return [t, t + 1];
      if (Array.isArray(t))
        return t.length === 2 ? t : [t[0], t[1]];
      let { offset: e, source: i } = t;
      return [e, e + (typeof i == "string" ? i.length : 1)];
    }
    function rv(t) {
      var n;
      let e = "", i = false, r = false;
      for (let s = 0;s < t.length; ++s) {
        let o = t[s];
        switch (o[0]) {
          case "#":
            e += (e === "" ? "" : r ? `

` : `
`) + (o.substring(1) || " "), i = true, r = false;
            break;
          case "%":
            ((n = t[s + 1]) == null ? undefined : n[0]) !== "#" && (s += 1), i = false;
            break;
          default:
            i || (r = true), i = false;
        }
      }
      return { comment: e, afterEmptyLine: r };
    }
    var vu = class {
      constructor(e = {}) {
        this.doc = null, this.atDirectives = false, this.prelude = [], this.errors = [], this.warnings = [], this.onError = (i, r, n, s) => {
          let o = Dn(i);
          s ? this.warnings.push(new Fn.YAMLWarning(o, r, n)) : this.errors.push(new Fn.YAMLParseError(o, r, n));
        }, this.directives = new VC.Directives({ version: e.version || "1.2" }), this.options = e;
      }
      decorate(e, i) {
        let { comment: r, afterEmptyLine: n } = rv(this.prelude);
        if (r) {
          let s = e.contents;
          if (i)
            e.comment = e.comment ? `${e.comment}
${r}` : r;
          else if (n || e.directives.docStart || !s)
            e.commentBefore = r;
          else if (iv.isCollection(s) && !s.flow && s.items.length > 0) {
            let o = s.items[0];
            iv.isPair(o) && (o = o.key);
            let a = o.commentBefore;
            o.commentBefore = a ? `${r}
${a}` : r;
          } else {
            let o = s.commentBefore;
            s.commentBefore = o ? `${r}
${o}` : r;
          }
        }
        i ? (Array.prototype.push.apply(e.errors, this.errors), Array.prototype.push.apply(e.warnings, this.warnings)) : (e.errors = this.errors, e.warnings = this.warnings), this.prelude = [], this.errors = [], this.warnings = [];
      }
      streamInfo() {
        return { comment: rv(this.prelude).comment, directives: this.directives, errors: this.errors, warnings: this.warnings };
      }
      *compose(e, i = false, r = -1) {
        for (let n of e)
          yield* this.next(n);
        yield* this.end(i, r);
      }
      *next(e) {
        switch (process.env.LOG_STREAM && console.dir(e, { depth: null }), e.type) {
          case "directive":
            this.directives.add(e.source, (i, r, n) => {
              let s = Dn(e);
              s[0] += i, this.onError(s, "BAD_DIRECTIVE", r, n);
            }), this.prelude.push(e.source), this.atDirectives = true;
            break;
          case "document": {
            let i = GC.composeDoc(this.options, this.directives, e, this.onError);
            this.atDirectives && !i.directives.docStart && this.onError(e, "MISSING_CHAR", "Missing directives-end/doc-start indicator line"), this.decorate(i, false), this.doc && (yield this.doc), this.doc = i, this.atDirectives = false;
            break;
          }
          case "byte-order-mark":
          case "space":
            break;
          case "comment":
          case "newline":
            this.prelude.push(e.source);
            break;
          case "error": {
            let i = e.source ? `${e.message}: ${JSON.stringify(e.source)}` : e.message, r = new Fn.YAMLParseError(Dn(e), "UNEXPECTED_TOKEN", i);
            this.atDirectives || !this.doc ? this.errors.push(r) : this.doc.errors.push(r);
            break;
          }
          case "doc-end": {
            if (!this.doc) {
              let r = "Unexpected doc-end without preceding document";
              this.errors.push(new Fn.YAMLParseError(Dn(e), "UNEXPECTED_TOKEN", r));
              break;
            }
            this.doc.directives.docEnd = true;
            let i = YC.resolveEnd(e.end, e.offset + e.source.length, this.doc.options.strict, this.onError);
            if (this.decorate(this.doc, true), i.comment) {
              let r = this.doc.comment;
              this.doc.comment = r ? `${r}
${i.comment}` : i.comment;
            }
            this.doc.range[2] = i.offset;
            break;
          }
          default:
            this.errors.push(new Fn.YAMLParseError(Dn(e), "UNEXPECTED_TOKEN", `Unsupported token ${e.type}`));
        }
      }
      *end(e = false, i = -1) {
        if (this.doc)
          this.decorate(this.doc, true), yield this.doc, this.doc = null;
        else if (e) {
          let r = Object.assign({ _directives: this.directives }, this.options), n = new HC.Document(undefined, r);
          this.atDirectives && this.onError(i, "MISSING_CHAR", "Missing directives-end indicator line"), n.range = [0, i, i], this.decorate(n, false), yield n;
        }
      }
    };
    nv.Composer = vu;
  });
  var av = w(($o) => {
    var WC = hu(), zC = du(), KC = Mn(), sv = xn();
    function JC(t, e = true, i) {
      if (t) {
        let r = (n, s, o) => {
          let a = typeof n == "number" ? n : Array.isArray(n) ? n[0] : n.offset;
          if (i)
            i(a, s, o);
          else
            throw new KC.YAMLParseError([a, a + 1], s, o);
        };
        switch (t.type) {
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return zC.resolveFlowScalar(t, e, r);
          case "block-scalar":
            return WC.resolveBlockScalar({ options: { strict: e } }, t, r);
        }
      }
      return null;
    }
    function ZC(t, e) {
      var c;
      let { implicitKey: i = false, indent: r, inFlow: n = false, offset: s = -1, type: o = "PLAIN" } = e, a = sv.stringifyString({ type: o, value: t }, { implicitKey: i, indent: r > 0 ? " ".repeat(r) : "", inFlow: n, options: { blockQuote: true, lineWidth: -1 } }), l = (c = e.end) != null ? c : [{ type: "newline", offset: -1, indent: r, source: `
` }];
      switch (a[0]) {
        case "|":
        case ">": {
          let u = a.indexOf(`
`), f = a.substring(0, u), d = a.substring(u + 1) + `
`, g = [{ type: "block-scalar-header", offset: s, indent: r, source: f }];
          return ov(g, l) || g.push({ type: "newline", offset: -1, indent: r, source: `
` }), { type: "block-scalar", offset: s, indent: r, props: g, source: d };
        }
        case '"':
          return { type: "double-quoted-scalar", offset: s, indent: r, source: a, end: l };
        case "'":
          return { type: "single-quoted-scalar", offset: s, indent: r, source: a, end: l };
        default:
          return { type: "scalar", offset: s, indent: r, source: a, end: l };
      }
    }
    function QC(t, e, i = {}) {
      let { afterKey: r = false, implicitKey: n = false, inFlow: s = false, type: o } = i, a = "indent" in t ? t.indent : null;
      if (r && typeof a == "number" && (a += 2), !o)
        switch (t.type) {
          case "single-quoted-scalar":
            o = "QUOTE_SINGLE";
            break;
          case "double-quoted-scalar":
            o = "QUOTE_DOUBLE";
            break;
          case "block-scalar": {
            let c = t.props[0];
            if (c.type !== "block-scalar-header")
              throw new Error("Invalid block scalar header");
            o = c.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
            break;
          }
          default:
            o = "PLAIN";
        }
      let l = sv.stringifyString({ type: o, value: e }, { implicitKey: n || a === null, indent: a !== null && a > 0 ? " ".repeat(a) : "", inFlow: s, options: { blockQuote: true, lineWidth: -1 } });
      switch (l[0]) {
        case "|":
        case ">":
          XC(t, l);
          break;
        case '"':
          bu(t, l, "double-quoted-scalar");
          break;
        case "'":
          bu(t, l, "single-quoted-scalar");
          break;
        default:
          bu(t, l, "scalar");
      }
    }
    function XC(t, e) {
      let i = e.indexOf(`
`), r = e.substring(0, i), n = e.substring(i + 1) + `
`;
      if (t.type === "block-scalar") {
        let s = t.props[0];
        if (s.type !== "block-scalar-header")
          throw new Error("Invalid block scalar header");
        s.source = r, t.source = n;
      } else {
        let { offset: s } = t, o = "indent" in t ? t.indent : -1, a = [{ type: "block-scalar-header", offset: s, indent: o, source: r }];
        ov(a, "end" in t ? t.end : undefined) || a.push({ type: "newline", offset: -1, indent: o, source: `
` });
        for (let l of Object.keys(t))
          l !== "type" && l !== "offset" && delete t[l];
        Object.assign(t, { type: "block-scalar", indent: o, props: a, source: n });
      }
    }
    function ov(t, e) {
      if (e)
        for (let i of e)
          switch (i.type) {
            case "space":
            case "comment":
              t.push(i);
              break;
            case "newline":
              return t.push(i), true;
          }
      return false;
    }
    function bu(t, e, i) {
      switch (t.type) {
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
          t.type = i, t.source = e;
          break;
        case "block-scalar": {
          let r = t.props.slice(1), n = e.length;
          t.props[0].type === "block-scalar-header" && (n -= t.props[0].source.length);
          for (let s of r)
            s.offset += n;
          delete t.props, Object.assign(t, { type: i, source: e, end: r });
          break;
        }
        case "block-map":
        case "block-seq": {
          let n = { type: "newline", offset: t.offset + e.length, indent: t.indent, source: `
` };
          delete t.items, Object.assign(t, { type: i, source: e, end: [n] });
          break;
        }
        default: {
          let r = "indent" in t ? t.indent : -1, n = "end" in t && Array.isArray(t.end) ? t.end.filter((s) => s.type === "space" || s.type === "comment" || s.type === "newline") : [];
          for (let s of Object.keys(t))
            s !== "type" && s !== "offset" && delete t[s];
          Object.assign(t, { type: i, indent: r, source: e, end: n });
        }
      }
    }
    $o.createScalarToken = ZC;
    $o.resolveAsScalar = JC;
    $o.setScalarValue = QC;
  });
  var cv = w((lv) => {
    var eT = (t) => ("type" in t) ? Ho(t) : Vo(t);
    function Ho(t) {
      switch (t.type) {
        case "block-scalar": {
          let e = "";
          for (let i of t.props)
            e += Ho(i);
          return e + t.source;
        }
        case "block-map":
        case "block-seq": {
          let e = "";
          for (let i of t.items)
            e += Vo(i);
          return e;
        }
        case "flow-collection": {
          let e = t.start.source;
          for (let i of t.items)
            e += Vo(i);
          for (let i of t.end)
            e += i.source;
          return e;
        }
        case "document": {
          let e = Vo(t);
          if (t.end)
            for (let i of t.end)
              e += i.source;
          return e;
        }
        default: {
          let e = t.source;
          if ("end" in t && t.end)
            for (let i of t.end)
              e += i.source;
          return e;
        }
      }
    }
    function Vo({ start: t, key: e, sep: i, value: r }) {
      let n = "";
      for (let s of t)
        n += s.source;
      if (e && (n += Ho(e)), i)
        for (let s of i)
          n += s.source;
      return r && (n += Ho(r)), n;
    }
    lv.stringify = eT;
  });
  var pv = w((hv) => {
    var _u = Symbol("break visit"), tT = Symbol("skip children"), uv = Symbol("remove item");
    function nr(t, e) {
      "type" in t && t.type === "document" && (t = { start: t.start, value: t.value }), fv(Object.freeze([]), t, e);
    }
    nr.BREAK = _u;
    nr.SKIP = tT;
    nr.REMOVE = uv;
    nr.itemAtPath = (t, e) => {
      let i = t;
      for (let [r, n] of e) {
        let s = i == null ? undefined : i[r];
        if (s && "items" in s)
          i = s.items[n];
        else
          return;
      }
      return i;
    };
    nr.parentCollection = (t, e) => {
      let i = nr.itemAtPath(t, e.slice(0, -1)), r = e[e.length - 1][0], n = i == null ? undefined : i[r];
      if (n && "items" in n)
        return n;
      throw new Error("Parent collection not found");
    };
    function fv(t, e, i) {
      let r = i(e, t);
      if (typeof r == "symbol")
        return r;
      for (let n of ["key", "value"]) {
        let s = e[n];
        if (s && "items" in s) {
          for (let o = 0;o < s.items.length; ++o) {
            let a = fv(Object.freeze(t.concat([[n, o]])), s.items[o], i);
            if (typeof a == "number")
              o = a - 1;
            else {
              if (a === _u)
                return _u;
              a === uv && (s.items.splice(o, 1), o -= 1);
            }
          }
          typeof r == "function" && n === "key" && (r = r(e, t));
        }
      }
      return typeof r == "function" ? r(e, t) : r;
    }
    hv.visit = nr;
  });
  var Go = w((vt) => {
    var wu = av(), iT = cv(), rT = pv(), xu = "\uFEFF", Su = "\x02", Eu = "\x18", ku = "\x1F", nT = (t) => !!t && ("items" in t), sT = (t) => !!t && (t.type === "scalar" || t.type === "single-quoted-scalar" || t.type === "double-quoted-scalar" || t.type === "block-scalar");
    function oT(t) {
      switch (t) {
        case xu:
          return "<BOM>";
        case Su:
          return "<DOC>";
        case Eu:
          return "<FLOW_END>";
        case ku:
          return "<SCALAR>";
        default:
          return JSON.stringify(t);
      }
    }
    function aT(t) {
      switch (t) {
        case xu:
          return "byte-order-mark";
        case Su:
          return "doc-mode";
        case Eu:
          return "flow-error-end";
        case ku:
          return "scalar";
        case "---":
          return "doc-start";
        case "...":
          return "doc-end";
        case "":
        case `
`:
        case `\r
`:
          return "newline";
        case "-":
          return "seq-item-ind";
        case "?":
          return "explicit-key-ind";
        case ":":
          return "map-value-ind";
        case "{":
          return "flow-map-start";
        case "}":
          return "flow-map-end";
        case "[":
          return "flow-seq-start";
        case "]":
          return "flow-seq-end";
        case ",":
          return "comma";
      }
      switch (t[0]) {
        case " ":
        case "\t":
          return "space";
        case "#":
          return "comment";
        case "%":
          return "directive-line";
        case "*":
          return "alias";
        case "&":
          return "anchor";
        case "!":
          return "tag";
        case "'":
          return "single-quoted-scalar";
        case '"':
          return "double-quoted-scalar";
        case "|":
        case ">":
          return "block-scalar-header";
      }
      return null;
    }
    vt.createScalarToken = wu.createScalarToken;
    vt.resolveAsScalar = wu.resolveAsScalar;
    vt.setScalarValue = wu.setScalarValue;
    vt.stringify = iT.stringify;
    vt.visit = rT.visit;
    vt.BOM = xu;
    vt.DOCUMENT = Su;
    vt.FLOW_END = Eu;
    vt.SCALAR = ku;
    vt.isCollection = nT;
    vt.isScalar = sT;
    vt.prettyToken = oT;
    vt.tokenType = aT;
  });
  var Tu = w((mv) => {
    var jn = Go();
    function Ht(t) {
      switch (t) {
        case undefined:
        case " ":
        case `
`:
        case "\r":
        case "\t":
          return true;
        default:
          return false;
      }
    }
    var dv = new Set("0123456789ABCDEFabcdef"), lT = new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"), Yo = new Set(",[]{}"), cT = new Set(` ,[]{}
\r\t`), Ou = (t) => !t || cT.has(t), Cu = class {
      constructor() {
        this.atEnd = false, this.blockScalarIndent = -1, this.blockScalarKeep = false, this.buffer = "", this.flowKey = false, this.flowLevel = 0, this.indentNext = 0, this.indentValue = 0, this.lineEndPos = null, this.next = null, this.pos = 0;
      }
      *lex(e, i = false) {
        var n;
        if (e) {
          if (typeof e != "string")
            throw TypeError("source is not a string");
          this.buffer = this.buffer ? this.buffer + e : e, this.lineEndPos = null;
        }
        this.atEnd = !i;
        let r = (n = this.next) != null ? n : "stream";
        for (;r && (i || this.hasChars(1)); )
          r = yield* this.parseNext(r);
      }
      atLineEnd() {
        let e = this.pos, i = this.buffer[e];
        for (;i === " " || i === "\t"; )
          i = this.buffer[++e];
        return !i || i === "#" || i === `
` ? true : i === "\r" ? this.buffer[e + 1] === `
` : false;
      }
      charAt(e) {
        return this.buffer[this.pos + e];
      }
      continueScalar(e) {
        let i = this.buffer[e];
        if (this.indentNext > 0) {
          let r = 0;
          for (;i === " "; )
            i = this.buffer[++r + e];
          if (i === "\r") {
            let n = this.buffer[r + e + 1];
            if (n === `
` || !n && !this.atEnd)
              return e + r + 1;
          }
          return i === `
` || r >= this.indentNext || !i && !this.atEnd ? e + r : -1;
        }
        if (i === "-" || i === ".") {
          let r = this.buffer.substr(e, 3);
          if ((r === "---" || r === "...") && Ht(this.buffer[e + 3]))
            return -1;
        }
        return e;
      }
      getLine() {
        let e = this.lineEndPos;
        return (typeof e != "number" || e !== -1 && e < this.pos) && (e = this.buffer.indexOf(`
`, this.pos), this.lineEndPos = e), e === -1 ? this.atEnd ? this.buffer.substring(this.pos) : null : (this.buffer[e - 1] === "\r" && (e -= 1), this.buffer.substring(this.pos, e));
      }
      hasChars(e) {
        return this.pos + e <= this.buffer.length;
      }
      setNext(e) {
        return this.buffer = this.buffer.substring(this.pos), this.pos = 0, this.lineEndPos = null, this.next = e, null;
      }
      peek(e) {
        return this.buffer.substr(this.pos, e);
      }
      *parseNext(e) {
        switch (e) {
          case "stream":
            return yield* this.parseStream();
          case "line-start":
            return yield* this.parseLineStart();
          case "block-start":
            return yield* this.parseBlockStart();
          case "doc":
            return yield* this.parseDocument();
          case "flow":
            return yield* this.parseFlowCollection();
          case "quoted-scalar":
            return yield* this.parseQuotedScalar();
          case "block-scalar":
            return yield* this.parseBlockScalar();
          case "plain-scalar":
            return yield* this.parsePlainScalar();
        }
      }
      *parseStream() {
        let e = this.getLine();
        if (e === null)
          return this.setNext("stream");
        if (e[0] === jn.BOM && (yield* this.pushCount(1), e = e.substring(1)), e[0] === "%") {
          let i = e.length, r = e.indexOf("#");
          for (;r !== -1; ) {
            let s = e[r - 1];
            if (s === " " || s === "\t") {
              i = r - 1;
              break;
            } else
              r = e.indexOf("#", r + 1);
          }
          for (;; ) {
            let s = e[i - 1];
            if (s === " " || s === "\t")
              i -= 1;
            else
              break;
          }
          let n = (yield* this.pushCount(i)) + (yield* this.pushSpaces(true));
          return yield* this.pushCount(e.length - n), this.pushNewline(), "stream";
        }
        if (this.atLineEnd()) {
          let i = yield* this.pushSpaces(true);
          return yield* this.pushCount(e.length - i), yield* this.pushNewline(), "stream";
        }
        return yield jn.DOCUMENT, yield* this.parseLineStart();
      }
      *parseLineStart() {
        let e = this.charAt(0);
        if (!e && !this.atEnd)
          return this.setNext("line-start");
        if (e === "-" || e === ".") {
          if (!this.atEnd && !this.hasChars(4))
            return this.setNext("line-start");
          let i = this.peek(3);
          if ((i === "---" || i === "...") && Ht(this.charAt(3)))
            return yield* this.pushCount(3), this.indentValue = 0, this.indentNext = 0, i === "---" ? "doc" : "stream";
        }
        return this.indentValue = yield* this.pushSpaces(false), this.indentNext > this.indentValue && !Ht(this.charAt(1)) && (this.indentNext = this.indentValue), yield* this.parseBlockStart();
      }
      *parseBlockStart() {
        let [e, i] = this.peek(2);
        if (!i && !this.atEnd)
          return this.setNext("block-start");
        if ((e === "-" || e === "?" || e === ":") && Ht(i)) {
          let r = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
          return this.indentNext = this.indentValue + 1, this.indentValue += r, yield* this.parseBlockStart();
        }
        return "doc";
      }
      *parseDocument() {
        yield* this.pushSpaces(true);
        let e = this.getLine();
        if (e === null)
          return this.setNext("doc");
        let i = yield* this.pushIndicators();
        switch (e[i]) {
          case "#":
            yield* this.pushCount(e.length - i);
          case undefined:
            return yield* this.pushNewline(), yield* this.parseLineStart();
          case "{":
          case "[":
            return yield* this.pushCount(1), this.flowKey = false, this.flowLevel = 1, "flow";
          case "}":
          case "]":
            return yield* this.pushCount(1), "doc";
          case "*":
            return yield* this.pushUntil(Ou), "doc";
          case '"':
          case "'":
            return yield* this.parseQuotedScalar();
          case "|":
          case ">":
            return i += yield* this.parseBlockScalarHeader(), i += yield* this.pushSpaces(true), yield* this.pushCount(e.length - i), yield* this.pushNewline(), yield* this.parseBlockScalar();
          default:
            return yield* this.parsePlainScalar();
        }
      }
      *parseFlowCollection() {
        let e, i, r = -1;
        do
          e = yield* this.pushNewline(), e > 0 ? (i = yield* this.pushSpaces(false), this.indentValue = r = i) : i = 0, i += yield* this.pushSpaces(true);
        while (e + i > 0);
        let n = this.getLine();
        if (n === null)
          return this.setNext("flow");
        if ((r !== -1 && r < this.indentNext && n[0] !== "#" || r === 0 && (n.startsWith("---") || n.startsWith("...")) && Ht(n[3])) && !(r === this.indentNext - 1 && this.flowLevel === 1 && (n[0] === "]" || n[0] === "}")))
          return this.flowLevel = 0, yield jn.FLOW_END, yield* this.parseLineStart();
        let s = 0;
        for (;n[s] === ","; )
          s += yield* this.pushCount(1), s += yield* this.pushSpaces(true), this.flowKey = false;
        switch (s += yield* this.pushIndicators(), n[s]) {
          case undefined:
            return "flow";
          case "#":
            return yield* this.pushCount(n.length - s), "flow";
          case "{":
          case "[":
            return yield* this.pushCount(1), this.flowKey = false, this.flowLevel += 1, "flow";
          case "}":
          case "]":
            return yield* this.pushCount(1), this.flowKey = true, this.flowLevel -= 1, this.flowLevel ? "flow" : "doc";
          case "*":
            return yield* this.pushUntil(Ou), "flow";
          case '"':
          case "'":
            return this.flowKey = true, yield* this.parseQuotedScalar();
          case ":": {
            let o = this.charAt(1);
            if (this.flowKey || Ht(o) || o === ",")
              return this.flowKey = false, yield* this.pushCount(1), yield* this.pushSpaces(true), "flow";
          }
          default:
            return this.flowKey = false, yield* this.parsePlainScalar();
        }
      }
      *parseQuotedScalar() {
        let e = this.charAt(0), i = this.buffer.indexOf(e, this.pos + 1);
        if (e === "'")
          for (;i !== -1 && this.buffer[i + 1] === "'"; )
            i = this.buffer.indexOf("'", i + 2);
        else
          for (;i !== -1; ) {
            let s = 0;
            for (;this.buffer[i - 1 - s] === "\\"; )
              s += 1;
            if (s % 2 === 0)
              break;
            i = this.buffer.indexOf('"', i + 1);
          }
        let r = this.buffer.substring(0, i), n = r.indexOf(`
`, this.pos);
        if (n !== -1) {
          for (;n !== -1; ) {
            let s = this.continueScalar(n + 1);
            if (s === -1)
              break;
            n = r.indexOf(`
`, s);
          }
          n !== -1 && (i = n - (r[n - 1] === "\r" ? 2 : 1));
        }
        if (i === -1) {
          if (!this.atEnd)
            return this.setNext("quoted-scalar");
          i = this.buffer.length;
        }
        return yield* this.pushToIndex(i + 1, false), this.flowLevel ? "flow" : "doc";
      }
      *parseBlockScalarHeader() {
        this.blockScalarIndent = -1, this.blockScalarKeep = false;
        let e = this.pos;
        for (;; ) {
          let i = this.buffer[++e];
          if (i === "+")
            this.blockScalarKeep = true;
          else if (i > "0" && i <= "9")
            this.blockScalarIndent = Number(i) - 1;
          else if (i !== "-")
            break;
        }
        return yield* this.pushUntil((i) => Ht(i) || i === "#");
      }
      *parseBlockScalar() {
        let e = this.pos - 1, i = 0, r;
        e:
          for (let s = this.pos;r = this.buffer[s]; ++s)
            switch (r) {
              case " ":
                i += 1;
                break;
              case `
`:
                e = s, i = 0;
                break;
              case "\r": {
                let o = this.buffer[s + 1];
                if (!o && !this.atEnd)
                  return this.setNext("block-scalar");
                if (o === `
`)
                  break;
              }
              default:
                break e;
            }
        if (!r && !this.atEnd)
          return this.setNext("block-scalar");
        if (i >= this.indentNext) {
          this.blockScalarIndent === -1 ? this.indentNext = i : this.indentNext = this.blockScalarIndent + (this.indentNext === 0 ? 1 : this.indentNext);
          do {
            let s = this.continueScalar(e + 1);
            if (s === -1)
              break;
            e = this.buffer.indexOf(`
`, s);
          } while (e !== -1);
          if (e === -1) {
            if (!this.atEnd)
              return this.setNext("block-scalar");
            e = this.buffer.length;
          }
        }
        let n = e + 1;
        for (r = this.buffer[n];r === " "; )
          r = this.buffer[++n];
        if (r === "\t") {
          for (;r === "\t" || r === " " || r === "\r" || r === `
`; )
            r = this.buffer[++n];
          e = n - 1;
        } else if (!this.blockScalarKeep)
          do {
            let s = e - 1, o = this.buffer[s];
            o === "\r" && (o = this.buffer[--s]);
            let a = s;
            for (;o === " "; )
              o = this.buffer[--s];
            if (o === `
` && s >= this.pos && s + 1 + i > a)
              e = s;
            else
              break;
          } while (true);
        return yield jn.SCALAR, yield* this.pushToIndex(e + 1, true), yield* this.parseLineStart();
      }
      *parsePlainScalar() {
        let e = this.flowLevel > 0, i = this.pos - 1, r = this.pos - 1, n;
        for (;n = this.buffer[++r]; )
          if (n === ":") {
            let s = this.buffer[r + 1];
            if (Ht(s) || e && Yo.has(s))
              break;
            i = r;
          } else if (Ht(n)) {
            let s = this.buffer[r + 1];
            if (n === "\r" && (s === `
` ? (r += 1, n = `
`, s = this.buffer[r + 1]) : i = r), s === "#" || e && Yo.has(s))
              break;
            if (n === `
`) {
              let o = this.continueScalar(r + 1);
              if (o === -1)
                break;
              r = Math.max(r, o - 2);
            }
          } else {
            if (e && Yo.has(n))
              break;
            i = r;
          }
        return !n && !this.atEnd ? this.setNext("plain-scalar") : (yield jn.SCALAR, yield* this.pushToIndex(i + 1, true), e ? "flow" : "doc");
      }
      *pushCount(e) {
        return e > 0 ? (yield this.buffer.substr(this.pos, e), this.pos += e, e) : 0;
      }
      *pushToIndex(e, i) {
        let r = this.buffer.slice(this.pos, e);
        return r ? (yield r, this.pos += r.length, r.length) : (i && (yield ""), 0);
      }
      *pushIndicators() {
        switch (this.charAt(0)) {
          case "!":
            return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          case "&":
            return (yield* this.pushUntil(Ou)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          case "-":
          case "?":
          case ":": {
            let e = this.flowLevel > 0, i = this.charAt(1);
            if (Ht(i) || e && Yo.has(i))
              return e ? this.flowKey && (this.flowKey = false) : this.indentNext = this.indentValue + 1, (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          }
        }
        return 0;
      }
      *pushTag() {
        if (this.charAt(1) === "<") {
          let e = this.pos + 2, i = this.buffer[e];
          for (;!Ht(i) && i !== ">"; )
            i = this.buffer[++e];
          return yield* this.pushToIndex(i === ">" ? e + 1 : e, false);
        } else {
          let e = this.pos + 1, i = this.buffer[e];
          for (;i; )
            if (lT.has(i))
              i = this.buffer[++e];
            else if (i === "%" && dv.has(this.buffer[e + 1]) && dv.has(this.buffer[e + 2]))
              i = this.buffer[e += 3];
            else
              break;
          return yield* this.pushToIndex(e, false);
        }
      }
      *pushNewline() {
        let e = this.buffer[this.pos];
        return e === `
` ? yield* this.pushCount(1) : e === "\r" && this.charAt(1) === `
` ? yield* this.pushCount(2) : 0;
      }
      *pushSpaces(e) {
        let i = this.pos - 1, r;
        do
          r = this.buffer[++i];
        while (r === " " || e && r === "\t");
        let n = i - this.pos;
        return n > 0 && (yield this.buffer.substr(this.pos, n), this.pos = i), n;
      }
      *pushUntil(e) {
        let i = this.pos, r = this.buffer[i];
        for (;!e(r); )
          r = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
      }
    };
    mv.Lexer = Cu;
  });
  var Iu = w((gv) => {
    var Au = class {
      constructor() {
        this.lineStarts = [], this.addNewLine = (e) => this.lineStarts.push(e), this.linePos = (e) => {
          let i = 0, r = this.lineStarts.length;
          for (;i < r; ) {
            let s = i + r >> 1;
            this.lineStarts[s] < e ? i = s + 1 : r = s;
          }
          if (this.lineStarts[i] === e)
            return { line: i + 1, col: 1 };
          if (i === 0)
            return { line: 0, col: e };
          let n = this.lineStarts[i - 1];
          return { line: i, col: e - n + 1 };
        };
      }
    };
    gv.LineCounter = Au;
  });
  var Lu = w((wv) => {
    var vv = Go(), uT = Tu();
    function sr(t, e) {
      for (let i = 0;i < t.length; ++i)
        if (t[i].type === e)
          return true;
      return false;
    }
    function yv(t) {
      for (let e = 0;e < t.length; ++e)
        switch (t[e].type) {
          case "space":
          case "comment":
          case "newline":
            break;
          default:
            return e;
        }
      return -1;
    }
    function _v(t) {
      switch (t == null ? undefined : t.type) {
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "flow-collection":
          return true;
        default:
          return false;
      }
    }
    function Wo(t) {
      var e;
      switch (t.type) {
        case "document":
          return t.start;
        case "block-map": {
          let i = t.items[t.items.length - 1];
          return (e = i.sep) != null ? e : i.start;
        }
        case "block-seq":
          return t.items[t.items.length - 1].start;
        default:
          return [];
      }
    }
    function Yr(t) {
      var i;
      if (t.length === 0)
        return [];
      let e = t.length;
      e:
        for (;--e >= 0; )
          switch (t[e].type) {
            case "doc-start":
            case "explicit-key-ind":
            case "map-value-ind":
            case "seq-item-ind":
            case "newline":
              break e;
          }
      for (;((i = t[++e]) == null ? undefined : i.type) === "space"; )
        ;
      return t.splice(e, t.length);
    }
    function bv(t) {
      if (t.start.type === "flow-seq-start")
        for (let e of t.items)
          e.sep && !e.value && !sr(e.start, "explicit-key-ind") && !sr(e.sep, "map-value-ind") && (e.key && (e.value = e.key), delete e.key, _v(e.value) ? e.value.end ? Array.prototype.push.apply(e.value.end, e.sep) : e.value.end = e.sep : Array.prototype.push.apply(e.start, e.sep), delete e.sep);
    }
    var Nu = class {
      constructor(e) {
        this.atNewLine = true, this.atScalar = false, this.indent = 0, this.offset = 0, this.onKeyLine = false, this.stack = [], this.source = "", this.type = "", this.lexer = new uT.Lexer, this.onNewLine = e;
      }
      *parse(e, i = false) {
        this.onNewLine && this.offset === 0 && this.onNewLine(0);
        for (let r of this.lexer.lex(e, i))
          yield* this.next(r);
        i || (yield* this.end());
      }
      *next(e) {
        if (this.source = e, process.env.LOG_TOKENS && console.log("|", vv.prettyToken(e)), this.atScalar) {
          this.atScalar = false, yield* this.step(), this.offset += e.length;
          return;
        }
        let i = vv.tokenType(e);
        if (i)
          if (i === "scalar")
            this.atNewLine = false, this.atScalar = true, this.type = "scalar";
          else {
            switch (this.type = i, yield* this.step(), i) {
              case "newline":
                this.atNewLine = true, this.indent = 0, this.onNewLine && this.onNewLine(this.offset + e.length);
                break;
              case "space":
                this.atNewLine && e[0] === " " && (this.indent += e.length);
                break;
              case "explicit-key-ind":
              case "map-value-ind":
              case "seq-item-ind":
                this.atNewLine && (this.indent += e.length);
                break;
              case "doc-mode":
              case "flow-error-end":
                return;
              default:
                this.atNewLine = false;
            }
            this.offset += e.length;
          }
        else {
          let r = `Not a YAML token: ${e}`;
          yield* this.pop({ type: "error", offset: this.offset, message: r, source: e }), this.offset += e.length;
        }
      }
      *end() {
        for (;this.stack.length > 0; )
          yield* this.pop();
      }
      get sourceToken() {
        return { type: this.type, offset: this.offset, indent: this.indent, source: this.source };
      }
      *step() {
        let e = this.peek(1);
        if (this.type === "doc-end" && (!e || e.type !== "doc-end")) {
          for (;this.stack.length > 0; )
            yield* this.pop();
          this.stack.push({ type: "doc-end", offset: this.offset, source: this.source });
          return;
        }
        if (!e)
          return yield* this.stream();
        switch (e.type) {
          case "document":
            return yield* this.document(e);
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return yield* this.scalar(e);
          case "block-scalar":
            return yield* this.blockScalar(e);
          case "block-map":
            return yield* this.blockMap(e);
          case "block-seq":
            return yield* this.blockSequence(e);
          case "flow-collection":
            return yield* this.flowCollection(e);
          case "doc-end":
            return yield* this.documentEnd(e);
        }
        yield* this.pop();
      }
      peek(e) {
        return this.stack[this.stack.length - e];
      }
      *pop(e) {
        let i = e != null ? e : this.stack.pop();
        if (i)
          if (this.stack.length === 0)
            yield i;
          else {
            let r = this.peek(1);
            switch (i.type === "block-scalar" ? i.indent = "indent" in r ? r.indent : 0 : i.type === "flow-collection" && r.type === "document" && (i.indent = 0), i.type === "flow-collection" && bv(i), r.type) {
              case "document":
                r.value = i;
                break;
              case "block-scalar":
                r.props.push(i);
                break;
              case "block-map": {
                let n = r.items[r.items.length - 1];
                if (n.value) {
                  r.items.push({ start: [], key: i, sep: [] }), this.onKeyLine = true;
                  return;
                } else if (n.sep)
                  n.value = i;
                else {
                  Object.assign(n, { key: i, sep: [] }), this.onKeyLine = !n.explicitKey;
                  return;
                }
                break;
              }
              case "block-seq": {
                let n = r.items[r.items.length - 1];
                n.value ? r.items.push({ start: [], value: i }) : n.value = i;
                break;
              }
              case "flow-collection": {
                let n = r.items[r.items.length - 1];
                !n || n.value ? r.items.push({ start: [], key: i, sep: [] }) : n.sep ? n.value = i : Object.assign(n, { key: i, sep: [] });
                return;
              }
              default:
                yield* this.pop(), yield* this.pop(i);
            }
            if ((r.type === "document" || r.type === "block-map" || r.type === "block-seq") && (i.type === "block-map" || i.type === "block-seq")) {
              let n = i.items[i.items.length - 1];
              n && !n.sep && !n.value && n.start.length > 0 && yv(n.start) === -1 && (i.indent === 0 || n.start.every((s) => s.type !== "comment" || s.indent < i.indent)) && (r.type === "document" ? r.end = n.start : r.items.push({ start: n.start }), i.items.splice(-1, 1));
            }
          }
        else {
          let r = "Tried to pop an empty stack";
          yield { type: "error", offset: this.offset, source: "", message: r };
        }
      }
      *stream() {
        switch (this.type) {
          case "directive-line":
            yield { type: "directive", offset: this.offset, source: this.source };
            return;
          case "byte-order-mark":
          case "space":
          case "comment":
          case "newline":
            yield this.sourceToken;
            return;
          case "doc-mode":
          case "doc-start": {
            let e = { type: "document", offset: this.offset, start: [] };
            this.type === "doc-start" && e.start.push(this.sourceToken), this.stack.push(e);
            return;
          }
        }
        yield { type: "error", offset: this.offset, message: `Unexpected ${this.type} token in YAML stream`, source: this.source };
      }
      *document(e) {
        if (e.value)
          return yield* this.lineEnd(e);
        switch (this.type) {
          case "doc-start": {
            yv(e.start) !== -1 ? (yield* this.pop(), yield* this.step()) : e.start.push(this.sourceToken);
            return;
          }
          case "anchor":
          case "tag":
          case "space":
          case "comment":
          case "newline":
            e.start.push(this.sourceToken);
            return;
        }
        let i = this.startBlockValue(e);
        i ? this.stack.push(i) : yield { type: "error", offset: this.offset, message: `Unexpected ${this.type} token in YAML document`, source: this.source };
      }
      *scalar(e) {
        if (this.type === "map-value-ind") {
          let i = Wo(this.peek(2)), r = Yr(i), n;
          e.end ? (n = e.end, n.push(this.sourceToken), delete e.end) : n = [this.sourceToken];
          let s = { type: "block-map", offset: e.offset, indent: e.indent, items: [{ start: r, key: e, sep: n }] };
          this.onKeyLine = true, this.stack[this.stack.length - 1] = s;
        } else
          yield* this.lineEnd(e);
      }
      *blockScalar(e) {
        switch (this.type) {
          case "space":
          case "comment":
          case "newline":
            e.props.push(this.sourceToken);
            return;
          case "scalar":
            if (e.source = this.source, this.atNewLine = true, this.indent = 0, this.onNewLine) {
              let i = this.source.indexOf(`
`) + 1;
              for (;i !== 0; )
                this.onNewLine(this.offset + i), i = this.source.indexOf(`
`, i) + 1;
            }
            yield* this.pop();
            break;
          default:
            yield* this.pop(), yield* this.step();
        }
      }
      *blockMap(e) {
        var r;
        let i = e.items[e.items.length - 1];
        switch (this.type) {
          case "newline":
            if (this.onKeyLine = false, i.value) {
              let n = "end" in i.value ? i.value.end : undefined, s = Array.isArray(n) ? n[n.length - 1] : undefined;
              (s == null ? undefined : s.type) === "comment" ? n == null || n.push(this.sourceToken) : e.items.push({ start: [this.sourceToken] });
            } else
              i.sep ? i.sep.push(this.sourceToken) : i.start.push(this.sourceToken);
            return;
          case "space":
          case "comment":
            if (i.value)
              e.items.push({ start: [this.sourceToken] });
            else if (i.sep)
              i.sep.push(this.sourceToken);
            else {
              if (this.atIndentedComment(i.start, e.indent)) {
                let n = e.items[e.items.length - 2], s = (r = n == null ? undefined : n.value) == null ? undefined : r.end;
                if (Array.isArray(s)) {
                  Array.prototype.push.apply(s, i.start), s.push(this.sourceToken), e.items.pop();
                  return;
                }
              }
              i.start.push(this.sourceToken);
            }
            return;
        }
        if (this.indent >= e.indent) {
          let n = !this.onKeyLine && this.indent === e.indent, s = n && (i.sep || i.explicitKey) && this.type !== "seq-item-ind", o = [];
          if (s && i.sep && !i.value) {
            let a = [];
            for (let l = 0;l < i.sep.length; ++l) {
              let c = i.sep[l];
              switch (c.type) {
                case "newline":
                  a.push(l);
                  break;
                case "space":
                  break;
                case "comment":
                  c.indent > e.indent && (a.length = 0);
                  break;
                default:
                  a.length = 0;
              }
            }
            a.length >= 2 && (o = i.sep.splice(a[1]));
          }
          switch (this.type) {
            case "anchor":
            case "tag":
              s || i.value ? (o.push(this.sourceToken), e.items.push({ start: o }), this.onKeyLine = true) : i.sep ? i.sep.push(this.sourceToken) : i.start.push(this.sourceToken);
              return;
            case "explicit-key-ind":
              !i.sep && !i.explicitKey ? (i.start.push(this.sourceToken), i.explicitKey = true) : s || i.value ? (o.push(this.sourceToken), e.items.push({ start: o, explicitKey: true })) : this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: [this.sourceToken], explicitKey: true }] }), this.onKeyLine = true;
              return;
            case "map-value-ind":
              if (i.explicitKey)
                if (i.sep)
                  if (i.value)
                    e.items.push({ start: [], key: null, sep: [this.sourceToken] });
                  else if (sr(i.sep, "map-value-ind"))
                    this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: o, key: null, sep: [this.sourceToken] }] });
                  else if (_v(i.key) && !sr(i.sep, "newline")) {
                    let a = Yr(i.start), l = i.key, c = i.sep;
                    c.push(this.sourceToken), delete i.key, delete i.sep, this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: a, key: l, sep: c }] });
                  } else
                    o.length > 0 ? i.sep = i.sep.concat(o, this.sourceToken) : i.sep.push(this.sourceToken);
                else if (sr(i.start, "newline"))
                  Object.assign(i, { key: null, sep: [this.sourceToken] });
                else {
                  let a = Yr(i.start);
                  this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: a, key: null, sep: [this.sourceToken] }] });
                }
              else
                i.sep ? i.value || s ? e.items.push({ start: o, key: null, sep: [this.sourceToken] }) : sr(i.sep, "map-value-ind") ? this.stack.push({ type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: [], key: null, sep: [this.sourceToken] }] }) : i.sep.push(this.sourceToken) : Object.assign(i, { key: null, sep: [this.sourceToken] });
              this.onKeyLine = true;
              return;
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar": {
              let a = this.flowScalar(this.type);
              s || i.value ? (e.items.push({ start: o, key: a, sep: [] }), this.onKeyLine = true) : i.sep ? this.stack.push(a) : (Object.assign(i, { key: a, sep: [] }), this.onKeyLine = true);
              return;
            }
            default: {
              let a = this.startBlockValue(e);
              if (a) {
                n && a.type !== "block-seq" && e.items.push({ start: o }), this.stack.push(a);
                return;
              }
            }
          }
        }
        yield* this.pop(), yield* this.step();
      }
      *blockSequence(e) {
        var r;
        let i = e.items[e.items.length - 1];
        switch (this.type) {
          case "newline":
            if (i.value) {
              let n = "end" in i.value ? i.value.end : undefined, s = Array.isArray(n) ? n[n.length - 1] : undefined;
              (s == null ? undefined : s.type) === "comment" ? n == null || n.push(this.sourceToken) : e.items.push({ start: [this.sourceToken] });
            } else
              i.start.push(this.sourceToken);
            return;
          case "space":
          case "comment":
            if (i.value)
              e.items.push({ start: [this.sourceToken] });
            else {
              if (this.atIndentedComment(i.start, e.indent)) {
                let n = e.items[e.items.length - 2], s = (r = n == null ? undefined : n.value) == null ? undefined : r.end;
                if (Array.isArray(s)) {
                  Array.prototype.push.apply(s, i.start), s.push(this.sourceToken), e.items.pop();
                  return;
                }
              }
              i.start.push(this.sourceToken);
            }
            return;
          case "anchor":
          case "tag":
            if (i.value || this.indent <= e.indent)
              break;
            i.start.push(this.sourceToken);
            return;
          case "seq-item-ind":
            if (this.indent !== e.indent)
              break;
            i.value || sr(i.start, "seq-item-ind") ? e.items.push({ start: [this.sourceToken] }) : i.start.push(this.sourceToken);
            return;
        }
        if (this.indent > e.indent) {
          let n = this.startBlockValue(e);
          if (n) {
            this.stack.push(n);
            return;
          }
        }
        yield* this.pop(), yield* this.step();
      }
      *flowCollection(e) {
        let i = e.items[e.items.length - 1];
        if (this.type === "flow-error-end") {
          let r;
          do
            yield* this.pop(), r = this.peek(1);
          while (r && r.type === "flow-collection");
        } else if (e.end.length === 0) {
          switch (this.type) {
            case "comma":
            case "explicit-key-ind":
              !i || i.sep ? e.items.push({ start: [this.sourceToken] }) : i.start.push(this.sourceToken);
              return;
            case "map-value-ind":
              !i || i.value ? e.items.push({ start: [], key: null, sep: [this.sourceToken] }) : i.sep ? i.sep.push(this.sourceToken) : Object.assign(i, { key: null, sep: [this.sourceToken] });
              return;
            case "space":
            case "comment":
            case "newline":
            case "anchor":
            case "tag":
              !i || i.value ? e.items.push({ start: [this.sourceToken] }) : i.sep ? i.sep.push(this.sourceToken) : i.start.push(this.sourceToken);
              return;
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar": {
              let n = this.flowScalar(this.type);
              !i || i.value ? e.items.push({ start: [], key: n, sep: [] }) : i.sep ? this.stack.push(n) : Object.assign(i, { key: n, sep: [] });
              return;
            }
            case "flow-map-end":
            case "flow-seq-end":
              e.end.push(this.sourceToken);
              return;
          }
          let r = this.startBlockValue(e);
          r ? this.stack.push(r) : (yield* this.pop(), yield* this.step());
        } else {
          let r = this.peek(2);
          if (r.type === "block-map" && (this.type === "map-value-ind" && r.indent === e.indent || this.type === "newline" && !r.items[r.items.length - 1].sep))
            yield* this.pop(), yield* this.step();
          else if (this.type === "map-value-ind" && r.type !== "flow-collection") {
            let n = Wo(r), s = Yr(n);
            bv(e);
            let o = e.end.splice(1, e.end.length);
            o.push(this.sourceToken);
            let a = { type: "block-map", offset: e.offset, indent: e.indent, items: [{ start: s, key: e, sep: o }] };
            this.onKeyLine = true, this.stack[this.stack.length - 1] = a;
          } else
            yield* this.lineEnd(e);
        }
      }
      flowScalar(e) {
        if (this.onNewLine) {
          let i = this.source.indexOf(`
`) + 1;
          for (;i !== 0; )
            this.onNewLine(this.offset + i), i = this.source.indexOf(`
`, i) + 1;
        }
        return { type: e, offset: this.offset, indent: this.indent, source: this.source };
      }
      startBlockValue(e) {
        switch (this.type) {
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar":
            return this.flowScalar(this.type);
          case "block-scalar-header":
            return { type: "block-scalar", offset: this.offset, indent: this.indent, props: [this.sourceToken], source: "" };
          case "flow-map-start":
          case "flow-seq-start":
            return { type: "flow-collection", offset: this.offset, indent: this.indent, start: this.sourceToken, items: [], end: [] };
          case "seq-item-ind":
            return { type: "block-seq", offset: this.offset, indent: this.indent, items: [{ start: [this.sourceToken] }] };
          case "explicit-key-ind": {
            this.onKeyLine = true;
            let i = Wo(e), r = Yr(i);
            return r.push(this.sourceToken), { type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: r, explicitKey: true }] };
          }
          case "map-value-ind": {
            this.onKeyLine = true;
            let i = Wo(e), r = Yr(i);
            return { type: "block-map", offset: this.offset, indent: this.indent, items: [{ start: r, key: null, sep: [this.sourceToken] }] };
          }
        }
        return null;
      }
      atIndentedComment(e, i) {
        return this.type !== "comment" || this.indent <= i ? false : e.every((r) => r.type === "newline" || r.type === "space");
      }
      *documentEnd(e) {
        this.type !== "doc-mode" && (e.end ? e.end.push(this.sourceToken) : e.end = [this.sourceToken], this.type === "newline" && (yield* this.pop()));
      }
      *lineEnd(e) {
        switch (this.type) {
          case "comma":
          case "doc-start":
          case "doc-end":
          case "flow-seq-end":
          case "flow-map-end":
          case "map-value-ind":
            yield* this.pop(), yield* this.step();
            break;
          case "newline":
            this.onKeyLine = false;
          case "space":
          case "comment":
          default:
            e.end ? e.end.push(this.sourceToken) : e.end = [this.sourceToken], this.type === "newline" && (yield* this.pop());
        }
      }
    };
    wv.Parser = Nu;
  });
  var Ov = w(($n) => {
    var xv = yu(), fT = Bn(), Un = Mn(), hT = gc(), pT = Se(), dT = Iu(), Sv = Lu();
    function Ev(t) {
      let e = t.prettyErrors !== false;
      return { lineCounter: t.lineCounter || e && new dT.LineCounter || null, prettyErrors: e };
    }
    function mT(t, e = {}) {
      let { lineCounter: i, prettyErrors: r } = Ev(e), n = new Sv.Parser(i == null ? undefined : i.addNewLine), s = new xv.Composer(e), o = Array.from(s.compose(n.parse(t)));
      if (r && i)
        for (let a of o)
          a.errors.forEach(Un.prettifyError(t, i)), a.warnings.forEach(Un.prettifyError(t, i));
      return o.length > 0 ? o : Object.assign([], { empty: true }, s.streamInfo());
    }
    function kv(t, e = {}) {
      let { lineCounter: i, prettyErrors: r } = Ev(e), n = new Sv.Parser(i == null ? undefined : i.addNewLine), s = new xv.Composer(e), o = null;
      for (let a of s.compose(n.parse(t), true, t.length))
        if (!o)
          o = a;
        else if (o.options.logLevel !== "silent") {
          o.errors.push(new Un.YAMLParseError(a.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
          break;
        }
      return r && i && (o.errors.forEach(Un.prettifyError(t, i)), o.warnings.forEach(Un.prettifyError(t, i))), o;
    }
    function gT(t, e, i) {
      let r;
      typeof e == "function" ? r = e : i === undefined && e && typeof e == "object" && (i = e);
      let n = kv(t, i);
      if (!n)
        return null;
      if (n.warnings.forEach((s) => hT.warn(n.options.logLevel, s)), n.errors.length > 0) {
        if (n.options.logLevel !== "silent")
          throw n.errors[0];
        n.errors = [];
      }
      return n.toJS(Object.assign({ reviver: r }, i));
    }
    function vT(t, e, i) {
      var n;
      let r = null;
      if (typeof e == "function" || Array.isArray(e) ? r = e : i === undefined && e && (i = e), typeof i == "string" && (i = i.length), typeof i == "number") {
        let s = Math.round(i);
        i = s < 1 ? undefined : s > 8 ? { indent: 8 } : { indent: s };
      }
      if (t === undefined) {
        let { keepUndefined: s } = (n = i != null ? i : e) != null ? n : {};
        if (!s)
          return;
      }
      return pT.isDocument(t) && !r ? t.toString(i) : new fT.Document(t, r, i).toString(i);
    }
    $n.parse = gT;
    $n.parseAllDocuments = mT;
    $n.parseDocument = kv;
    $n.stringify = vT;
  });
  var Tv = w((Oe) => {
    var yT = yu(), bT = Bn(), _T = Qc(), Bu = Mn(), wT = vn(), Ii = Se(), xT = Oi(), ST = je(), ET = Ti(), kT = Ai(), OT = Go(), CT = Tu(), TT = Iu(), AT = Lu(), zo = Ov(), Cv = pn();
    Oe.Composer = yT.Composer;
    Oe.Document = bT.Document;
    Oe.Schema = _T.Schema;
    Oe.YAMLError = Bu.YAMLError;
    Oe.YAMLParseError = Bu.YAMLParseError;
    Oe.YAMLWarning = Bu.YAMLWarning;
    Oe.Alias = wT.Alias;
    Oe.isAlias = Ii.isAlias;
    Oe.isCollection = Ii.isCollection;
    Oe.isDocument = Ii.isDocument;
    Oe.isMap = Ii.isMap;
    Oe.isNode = Ii.isNode;
    Oe.isPair = Ii.isPair;
    Oe.isScalar = Ii.isScalar;
    Oe.isSeq = Ii.isSeq;
    Oe.Pair = xT.Pair;
    Oe.Scalar = ST.Scalar;
    Oe.YAMLMap = ET.YAMLMap;
    Oe.YAMLSeq = kT.YAMLSeq;
    Oe.CST = OT;
    Oe.Lexer = CT.Lexer;
    Oe.LineCounter = TT.LineCounter;
    Oe.Parser = AT.Parser;
    Oe.parse = zo.parse;
    Oe.parseAllDocuments = zo.parseAllDocuments;
    Oe.parseDocument = zo.parseDocument;
    Oe.stringify = zo.stringify;
    Oe.visit = Cv.visit;
    Oe.visitAsync = Cv.visitAsync;
  });
  var Lv = w((SL, Nv) => {
    var { Duplex: IT } = __require("stream");
    function Av(t) {
      t.emit("close");
    }
    function NT() {
      !this.destroyed && this._writableState.finished && this.destroy();
    }
    function Iv(t) {
      this.removeListener("error", Iv), this.destroy(), this.listenerCount("error") === 0 && this.emit("error", t);
    }
    function LT(t, e) {
      let i = true, r = new IT({ ...e, autoDestroy: false, emitClose: false, objectMode: false, writableObjectMode: false });
      return t.on("message", function(s, o) {
        let a = !o && r._readableState.objectMode ? s.toString() : s;
        r.push(a) || t.pause();
      }), t.once("error", function(s) {
        r.destroyed || (i = false, r.destroy(s));
      }), t.once("close", function() {
        r.destroyed || r.push(null);
      }), r._destroy = function(n, s) {
        if (t.readyState === t.CLOSED) {
          s(n), process.nextTick(Av, r);
          return;
        }
        let o = false;
        t.once("error", function(l) {
          o = true, s(l);
        }), t.once("close", function() {
          o || s(n), process.nextTick(Av, r);
        }), i && t.terminate();
      }, r._final = function(n) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r._final(n);
          });
          return;
        }
        t._socket !== null && (t._socket._writableState.finished ? (n(), r._readableState.endEmitted && r.destroy()) : (t._socket.once("finish", function() {
          n();
        }), t.close()));
      }, r._read = function() {
        t.isPaused && t.resume();
      }, r._write = function(n, s, o) {
        if (t.readyState === t.CONNECTING) {
          t.once("open", function() {
            r._write(n, s, o);
          });
          return;
        }
        t.send(n, o);
      }, r.on("end", NT), r.on("error", Iv), r;
    }
    Nv.exports = LT;
  });
  var Ni = w((EL, Bv) => {
    Bv.exports = { BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"], EMPTY_BUFFER: Buffer.alloc(0), GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", kForOnEventAttribute: Symbol("kIsForOnEventAttribute"), kListener: Symbol("kListener"), kStatusCode: Symbol("status-code"), kWebSocket: Symbol("websocket"), NOOP: () => {
    } };
  });
  var Vn = w((kL, Ko) => {
    var { EMPTY_BUFFER: BT } = Ni(), Ru = Buffer[Symbol.species];
    function RT(t, e) {
      if (t.length === 0)
        return BT;
      if (t.length === 1)
        return t[0];
      let i = Buffer.allocUnsafe(e), r = 0;
      for (let n = 0;n < t.length; n++) {
        let s = t[n];
        i.set(s, r), r += s.length;
      }
      return r < e ? new Ru(i.buffer, i.byteOffset, r) : i;
    }
    function Rv(t, e, i, r, n) {
      for (let s = 0;s < n; s++)
        i[r + s] = t[s] ^ e[s & 3];
    }
    function Pv(t, e) {
      for (let i = 0;i < t.length; i++)
        t[i] ^= e[i & 3];
    }
    function PT(t) {
      return t.length === t.buffer.byteLength ? t.buffer : t.buffer.slice(t.byteOffset, t.byteOffset + t.length);
    }
    function Pu(t) {
      if (Pu.readOnly = true, Buffer.isBuffer(t))
        return t;
      let e;
      return t instanceof ArrayBuffer ? e = new Ru(t) : ArrayBuffer.isView(t) ? e = new Ru(t.buffer, t.byteOffset, t.byteLength) : (e = Buffer.from(t), Pu.readOnly = false), e;
    }
    Ko.exports = { concat: RT, mask: Rv, toArrayBuffer: PT, toBuffer: Pu, unmask: Pv };
    if (!process.env.WS_NO_BUFFER_UTIL)
      try {
        let t = (()=>{throw new Error("Cannot require module "+"bufferutil");})();
        Ko.exports.mask = function(e, i, r, n, s) {
          s < 48 ? Rv(e, i, r, n, s) : t.mask(e, i, r, n, s);
        }, Ko.exports.unmask = function(e, i) {
          e.length < 32 ? Pv(e, i) : t.unmask(e, i);
        };
      } catch {
      }
  });
  var Fv = w((OL, qv) => {
    var Mv = Symbol("kDone"), Mu = Symbol("kRun"), qu = class {
      constructor(e) {
        this[Mv] = () => {
          this.pending--, this[Mu]();
        }, this.concurrency = e || 1 / 0, this.jobs = [], this.pending = 0;
      }
      add(e) {
        this.jobs.push(e), this[Mu]();
      }
      [Mu]() {
        if (this.pending !== this.concurrency && this.jobs.length) {
          let e = this.jobs.shift();
          this.pending++, e(this[Mv]);
        }
      }
    };
    qv.exports = qu;
  });
  var Yn = w((CL, $v) => {
    var Hn = __require("zlib"), Dv = Vn(), MT = Fv(), { kStatusCode: jv } = Ni(), qT = Buffer[Symbol.species], FT = Buffer.from([0, 0, 255, 255]), Qo = Symbol("permessage-deflate"), hi = Symbol("total-length"), Gn = Symbol("callback"), Li = Symbol("buffers"), Zo = Symbol("error"), Jo, Fu = class {
      constructor(e, i, r) {
        if (this._maxPayload = r | 0, this._options = e || {}, this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024, this._isServer = !!i, this._deflate = null, this._inflate = null, this.params = null, !Jo) {
          let n = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;
          Jo = new MT(n);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        let e = {};
        return this._options.serverNoContextTakeover && (e.server_no_context_takeover = true), this._options.clientNoContextTakeover && (e.client_no_context_takeover = true), this._options.serverMaxWindowBits && (e.server_max_window_bits = this._options.serverMaxWindowBits), this._options.clientMaxWindowBits ? e.client_max_window_bits = this._options.clientMaxWindowBits : this._options.clientMaxWindowBits == null && (e.client_max_window_bits = true), e;
      }
      accept(e) {
        return e = this.normalizeParams(e), this.params = this._isServer ? this.acceptAsServer(e) : this.acceptAsClient(e), this.params;
      }
      cleanup() {
        if (this._inflate && (this._inflate.close(), this._inflate = null), this._deflate) {
          let e = this._deflate[Gn];
          this._deflate.close(), this._deflate = null, e && e(new Error("The deflate stream was closed while data was being processed"));
        }
      }
      acceptAsServer(e) {
        let i = this._options, r = e.find((n) => !(i.serverNoContextTakeover === false && n.server_no_context_takeover || n.server_max_window_bits && (i.serverMaxWindowBits === false || typeof i.serverMaxWindowBits == "number" && i.serverMaxWindowBits > n.server_max_window_bits) || typeof i.clientMaxWindowBits == "number" && !n.client_max_window_bits));
        if (!r)
          throw new Error("None of the extension offers can be accepted");
        return i.serverNoContextTakeover && (r.server_no_context_takeover = true), i.clientNoContextTakeover && (r.client_no_context_takeover = true), typeof i.serverMaxWindowBits == "number" && (r.server_max_window_bits = i.serverMaxWindowBits), typeof i.clientMaxWindowBits == "number" ? r.client_max_window_bits = i.clientMaxWindowBits : (r.client_max_window_bits === true || i.clientMaxWindowBits === false) && delete r.client_max_window_bits, r;
      }
      acceptAsClient(e) {
        let i = e[0];
        if (this._options.clientNoContextTakeover === false && i.client_no_context_takeover)
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        if (!i.client_max_window_bits)
          typeof this._options.clientMaxWindowBits == "number" && (i.client_max_window_bits = this._options.clientMaxWindowBits);
        else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits == "number" && i.client_max_window_bits > this._options.clientMaxWindowBits)
          throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
        return i;
      }
      normalizeParams(e) {
        return e.forEach((i) => {
          Object.keys(i).forEach((r) => {
            let n = i[r];
            if (n.length > 1)
              throw new Error(`Parameter "${r}" must have only a single value`);
            if (n = n[0], r === "client_max_window_bits") {
              if (n !== true) {
                let s = +n;
                if (!Number.isInteger(s) || s < 8 || s > 15)
                  throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
                n = s;
              } else if (!this._isServer)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            } else if (r === "server_max_window_bits") {
              let s = +n;
              if (!Number.isInteger(s) || s < 8 || s > 15)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
              n = s;
            } else if (r === "client_no_context_takeover" || r === "server_no_context_takeover") {
              if (n !== true)
                throw new TypeError(`Invalid value for parameter "${r}": ${n}`);
            } else
              throw new Error(`Unknown parameter "${r}"`);
            i[r] = n;
          });
        }), e;
      }
      decompress(e, i, r) {
        Jo.add((n) => {
          this._decompress(e, i, (s, o) => {
            n(), r(s, o);
          });
        });
      }
      compress(e, i, r) {
        Jo.add((n) => {
          this._compress(e, i, (s, o) => {
            n(), r(s, o);
          });
        });
      }
      _decompress(e, i, r) {
        let n = this._isServer ? "client" : "server";
        if (!this._inflate) {
          let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? Hn.Z_DEFAULT_WINDOWBITS : this.params[s];
          this._inflate = Hn.createInflateRaw({ ...this._options.zlibInflateOptions, windowBits: o }), this._inflate[Qo] = this, this._inflate[hi] = 0, this._inflate[Li] = [], this._inflate.on("error", jT), this._inflate.on("data", Uv);
        }
        this._inflate[Gn] = r, this._inflate.write(e), i && this._inflate.write(FT), this._inflate.flush(() => {
          let s = this._inflate[Zo];
          if (s) {
            this._inflate.close(), this._inflate = null, r(s);
            return;
          }
          let o = Dv.concat(this._inflate[Li], this._inflate[hi]);
          this._inflate._readableState.endEmitted ? (this._inflate.close(), this._inflate = null) : (this._inflate[hi] = 0, this._inflate[Li] = [], i && this.params[`${n}_no_context_takeover`] && this._inflate.reset()), r(null, o);
        });
      }
      _compress(e, i, r) {
        let n = this._isServer ? "server" : "client";
        if (!this._deflate) {
          let s = `${n}_max_window_bits`, o = typeof this.params[s] != "number" ? Hn.Z_DEFAULT_WINDOWBITS : this.params[s];
          this._deflate = Hn.createDeflateRaw({ ...this._options.zlibDeflateOptions, windowBits: o }), this._deflate[hi] = 0, this._deflate[Li] = [], this._deflate.on("data", DT);
        }
        this._deflate[Gn] = r, this._deflate.write(e), this._deflate.flush(Hn.Z_SYNC_FLUSH, () => {
          if (!this._deflate)
            return;
          let s = Dv.concat(this._deflate[Li], this._deflate[hi]);
          i && (s = new qT(s.buffer, s.byteOffset, s.length - 4)), this._deflate[Gn] = null, this._deflate[hi] = 0, this._deflate[Li] = [], i && this.params[`${n}_no_context_takeover`] && this._deflate.reset(), r(null, s);
        });
      }
    };
    $v.exports = Fu;
    function DT(t) {
      this[Li].push(t), this[hi] += t.length;
    }
    function Uv(t) {
      if (this[hi] += t.length, this[Qo]._maxPayload < 1 || this[hi] <= this[Qo]._maxPayload) {
        this[Li].push(t);
        return;
      }
      this[Zo] = new RangeError("Max payload size exceeded"), this[Zo].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH", this[Zo][jv] = 1009, this.removeListener("data", Uv), this.reset();
    }
    function jT(t) {
      this[Qo]._inflate = null, t[jv] = 1007, this[Gn](t);
    }
  });
  var Wn = w((TL, Xo) => {
    var { isUtf8: Vv } = __require("buffer"), UT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0];
    function $T(t) {
      return t >= 1000 && t <= 1014 && t !== 1004 && t !== 1005 && t !== 1006 || t >= 3000 && t <= 4999;
    }
    function Du(t) {
      let e = t.length, i = 0;
      for (;i < e; )
        if (!(t[i] & 128))
          i++;
        else if ((t[i] & 224) === 192) {
          if (i + 1 === e || (t[i + 1] & 192) !== 128 || (t[i] & 254) === 192)
            return false;
          i += 2;
        } else if ((t[i] & 240) === 224) {
          if (i + 2 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || t[i] === 224 && (t[i + 1] & 224) === 128 || t[i] === 237 && (t[i + 1] & 224) === 160)
            return false;
          i += 3;
        } else if ((t[i] & 248) === 240) {
          if (i + 3 >= e || (t[i + 1] & 192) !== 128 || (t[i + 2] & 192) !== 128 || (t[i + 3] & 192) !== 128 || t[i] === 240 && (t[i + 1] & 240) === 128 || t[i] === 244 && t[i + 1] > 143 || t[i] > 244)
            return false;
          i += 4;
        } else
          return false;
      return true;
    }
    Xo.exports = { isValidStatusCode: $T, isValidUTF8: Du, tokenChars: UT };
    if (Vv)
      Xo.exports.isValidUTF8 = function(t) {
        return t.length < 24 ? Du(t) : Vv(t);
      };
    else if (!process.env.WS_NO_UTF_8_VALIDATE)
      try {
        let t = (()=>{throw new Error("Cannot require module "+"utf-8-validate");})();
        Xo.exports.isValidUTF8 = function(e) {
          return e.length < 32 ? Du(e) : t(e);
        };
      } catch {
      }
  });
  var Hu = w((AL, Jv) => {
    var { Writable: VT } = __require("stream"), Hv = Yn(), { BINARY_TYPES: HT, EMPTY_BUFFER: Gv, kStatusCode: GT, kWebSocket: YT } = Ni(), { concat: ju, toArrayBuffer: WT, unmask: zT } = Vn(), { isValidStatusCode: KT, isValidUTF8: Yv } = Wn(), ea = Buffer[Symbol.species], Rt = 0, Wv = 1, zv = 2, Kv = 3, Uu = 4, $u = 5, ta = 6, Vu = class extends VT {
      constructor(e = {}) {
        super(), this._allowSynchronousEvents = e.allowSynchronousEvents !== undefined ? e.allowSynchronousEvents : true, this._binaryType = e.binaryType || HT[0], this._extensions = e.extensions || {}, this._isServer = !!e.isServer, this._maxPayload = e.maxPayload | 0, this._skipUTF8Validation = !!e.skipUTF8Validation, this[YT] = undefined, this._bufferedBytes = 0, this._buffers = [], this._compressed = false, this._payloadLength = 0, this._mask = undefined, this._fragmented = 0, this._masked = false, this._fin = false, this._opcode = 0, this._totalPayloadLength = 0, this._messageLength = 0, this._fragments = [], this._errored = false, this._loop = false, this._state = Rt;
      }
      _write(e, i, r) {
        if (this._opcode === 8 && this._state == Rt)
          return r();
        this._bufferedBytes += e.length, this._buffers.push(e), this.startLoop(r);
      }
      consume(e) {
        if (this._bufferedBytes -= e, e === this._buffers[0].length)
          return this._buffers.shift();
        if (e < this._buffers[0].length) {
          let r = this._buffers[0];
          return this._buffers[0] = new ea(r.buffer, r.byteOffset + e, r.length - e), new ea(r.buffer, r.byteOffset, e);
        }
        let i = Buffer.allocUnsafe(e);
        do {
          let r = this._buffers[0], n = i.length - e;
          e >= r.length ? i.set(this._buffers.shift(), n) : (i.set(new Uint8Array(r.buffer, r.byteOffset, e), n), this._buffers[0] = new ea(r.buffer, r.byteOffset + e, r.length - e)), e -= r.length;
        } while (e > 0);
        return i;
      }
      startLoop(e) {
        this._loop = true;
        do
          switch (this._state) {
            case Rt:
              this.getInfo(e);
              break;
            case Wv:
              this.getPayloadLength16(e);
              break;
            case zv:
              this.getPayloadLength64(e);
              break;
            case Kv:
              this.getMask();
              break;
            case Uu:
              this.getData(e);
              break;
            case $u:
            case ta:
              this._loop = false;
              return;
          }
        while (this._loop);
        this._errored || e();
      }
      getInfo(e) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        let i = this.consume(2);
        if (i[0] & 48) {
          let n = this.createError(RangeError, "RSV2 and RSV3 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_2_3");
          e(n);
          return;
        }
        let r = (i[0] & 64) === 64;
        if (r && !this._extensions[Hv.extensionName]) {
          let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
          e(n);
          return;
        }
        if (this._fin = (i[0] & 128) === 128, this._opcode = i[0] & 15, this._payloadLength = i[1] & 127, this._opcode === 0) {
          if (r) {
            let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
            e(n);
            return;
          }
          if (!this._fragmented) {
            let n = this.createError(RangeError, "invalid opcode 0", true, 1002, "WS_ERR_INVALID_OPCODE");
            e(n);
            return;
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            let n = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
            e(n);
            return;
          }
          this._compressed = r;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            let n = this.createError(RangeError, "FIN must be set", true, 1002, "WS_ERR_EXPECTED_FIN");
            e(n);
            return;
          }
          if (r) {
            let n = this.createError(RangeError, "RSV1 must be clear", true, 1002, "WS_ERR_UNEXPECTED_RSV_1");
            e(n);
            return;
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            let n = this.createError(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH");
            e(n);
            return;
          }
        } else {
          let n = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, "WS_ERR_INVALID_OPCODE");
          e(n);
          return;
        }
        if (!this._fin && !this._fragmented && (this._fragmented = this._opcode), this._masked = (i[1] & 128) === 128, this._isServer) {
          if (!this._masked) {
            let n = this.createError(RangeError, "MASK must be set", true, 1002, "WS_ERR_EXPECTED_MASK");
            e(n);
            return;
          }
        } else if (this._masked) {
          let n = this.createError(RangeError, "MASK must be clear", true, 1002, "WS_ERR_UNEXPECTED_MASK");
          e(n);
          return;
        }
        this._payloadLength === 126 ? this._state = Wv : this._payloadLength === 127 ? this._state = zv : this.haveLength(e);
      }
      getPayloadLength16(e) {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0), this.haveLength(e);
      }
      getPayloadLength64(e) {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        let i = this.consume(8), r = i.readUInt32BE(0);
        if (r > Math.pow(2, 53 - 32) - 1) {
          let n = this.createError(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009, "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH");
          e(n);
          return;
        }
        this._payloadLength = r * Math.pow(2, 32) + i.readUInt32BE(4), this.haveLength(e);
      }
      haveLength(e) {
        if (this._payloadLength && this._opcode < 8 && (this._totalPayloadLength += this._payloadLength, this._totalPayloadLength > this._maxPayload && this._maxPayload > 0)) {
          let i = this.createError(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
          e(i);
          return;
        }
        this._masked ? this._state = Kv : this._state = Uu;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4), this._state = Uu;
      }
      getData(e) {
        let i = Gv;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          i = this.consume(this._payloadLength), this._masked && this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3] && zT(i, this._mask);
        }
        if (this._opcode > 7) {
          this.controlMessage(i, e);
          return;
        }
        if (this._compressed) {
          this._state = $u, this.decompress(i, e);
          return;
        }
        i.length && (this._messageLength = this._totalPayloadLength, this._fragments.push(i)), this.dataMessage(e);
      }
      decompress(e, i) {
        this._extensions[Hv.extensionName].decompress(e, this._fin, (n, s) => {
          if (n)
            return i(n);
          if (s.length) {
            if (this._messageLength += s.length, this._messageLength > this._maxPayload && this._maxPayload > 0) {
              let o = this.createError(RangeError, "Max payload size exceeded", false, 1009, "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH");
              i(o);
              return;
            }
            this._fragments.push(s);
          }
          this.dataMessage(i), this._state === Rt && this.startLoop(i);
        });
      }
      dataMessage(e) {
        if (!this._fin) {
          this._state = Rt;
          return;
        }
        let i = this._messageLength, r = this._fragments;
        if (this._totalPayloadLength = 0, this._messageLength = 0, this._fragmented = 0, this._fragments = [], this._opcode === 2) {
          let n;
          this._binaryType === "nodebuffer" ? n = ju(r, i) : this._binaryType === "arraybuffer" ? n = WT(ju(r, i)) : n = r, this._allowSynchronousEvents ? (this.emit("message", n, true), this._state = Rt) : (this._state = ta, setImmediate(() => {
            this.emit("message", n, true), this._state = Rt, this.startLoop(e);
          }));
        } else {
          let n = ju(r, i);
          if (!this._skipUTF8Validation && !Yv(n)) {
            let s = this.createError(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
            e(s);
            return;
          }
          this._state === $u || this._allowSynchronousEvents ? (this.emit("message", n, false), this._state = Rt) : (this._state = ta, setImmediate(() => {
            this.emit("message", n, false), this._state = Rt, this.startLoop(e);
          }));
        }
      }
      controlMessage(e, i) {
        if (this._opcode === 8) {
          if (e.length === 0)
            this._loop = false, this.emit("conclude", 1005, Gv), this.end();
          else {
            let r = e.readUInt16BE(0);
            if (!KT(r)) {
              let s = this.createError(RangeError, `invalid status code ${r}`, true, 1002, "WS_ERR_INVALID_CLOSE_CODE");
              i(s);
              return;
            }
            let n = new ea(e.buffer, e.byteOffset + 2, e.length - 2);
            if (!this._skipUTF8Validation && !Yv(n)) {
              let s = this.createError(Error, "invalid UTF-8 sequence", true, 1007, "WS_ERR_INVALID_UTF8");
              i(s);
              return;
            }
            this._loop = false, this.emit("conclude", r, n), this.end();
          }
          this._state = Rt;
          return;
        }
        this._allowSynchronousEvents ? (this.emit(this._opcode === 9 ? "ping" : "pong", e), this._state = Rt) : (this._state = ta, setImmediate(() => {
          this.emit(this._opcode === 9 ? "ping" : "pong", e), this._state = Rt, this.startLoop(i);
        }));
      }
      createError(e, i, r, n, s) {
        this._loop = false, this._errored = true;
        let o = new e(r ? `Invalid WebSocket frame: ${i}` : i);
        return Error.captureStackTrace(o, this.createError), o.code = s, o[GT] = n, o;
      }
    };
    Jv.exports = Vu;
  });
  var Yu = w((NL, Xv) => {
    var { Duplex: IL } = __require("stream"), { randomFillSync: JT } = __require("crypto"), Zv = Yn(), { EMPTY_BUFFER: ZT } = Ni(), { isValidStatusCode: QT } = Wn(), { mask: Qv, toBuffer: Wr } = Vn(), Gt = Symbol("kByteLength"), XT = Buffer.alloc(4), ia = 8 * 1024, or, zr = ia, Gu = class t {
      constructor(e, i, r) {
        this._extensions = i || {}, r && (this._generateMask = r, this._maskBuffer = Buffer.alloc(4)), this._socket = e, this._firstFragment = true, this._compress = false, this._bufferedBytes = 0, this._deflating = false, this._queue = [];
      }
      static frame(e, i) {
        let r, n = false, s = 2, o = false;
        i.mask && (r = i.maskBuffer || XT, i.generateMask ? i.generateMask(r) : (zr === ia && (or === undefined && (or = Buffer.alloc(ia)), JT(or, 0, ia), zr = 0), r[0] = or[zr++], r[1] = or[zr++], r[2] = or[zr++], r[3] = or[zr++]), o = (r[0] | r[1] | r[2] | r[3]) === 0, s = 6);
        let a;
        typeof e == "string" ? (!i.mask || o) && i[Gt] !== undefined ? a = i[Gt] : (e = Buffer.from(e), a = e.length) : (a = e.length, n = i.mask && i.readOnly && !o);
        let l = a;
        a >= 65536 ? (s += 8, l = 127) : a > 125 && (s += 2, l = 126);
        let c = Buffer.allocUnsafe(n ? a + s : s);
        return c[0] = i.fin ? i.opcode | 128 : i.opcode, i.rsv1 && (c[0] |= 64), c[1] = l, l === 126 ? c.writeUInt16BE(a, 2) : l === 127 && (c[2] = c[3] = 0, c.writeUIntBE(a, 4, 6)), i.mask ? (c[1] |= 128, c[s - 4] = r[0], c[s - 3] = r[1], c[s - 2] = r[2], c[s - 1] = r[3], o ? [c, e] : n ? (Qv(e, r, c, s, a), [c]) : (Qv(e, r, e, 0, a), [c, e])) : [c, e];
      }
      close(e, i, r, n) {
        let s;
        if (e === undefined)
          s = ZT;
        else {
          if (typeof e != "number" || !QT(e))
            throw new TypeError("First argument must be a valid error code number");
          if (i === undefined || !i.length)
            s = Buffer.allocUnsafe(2), s.writeUInt16BE(e, 0);
          else {
            let a = Buffer.byteLength(i);
            if (a > 123)
              throw new RangeError("The message must not be greater than 123 bytes");
            s = Buffer.allocUnsafe(2 + a), s.writeUInt16BE(e, 0), typeof i == "string" ? s.write(i, 2) : s.set(i, 2);
          }
        }
        let o = { [Gt]: s.length, fin: true, generateMask: this._generateMask, mask: r, maskBuffer: this._maskBuffer, opcode: 8, readOnly: false, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, s, false, o, n]) : this.sendFrame(t.frame(s, o), n);
      }
      ping(e, i, r) {
        let n, s;
        if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = Wr(e), n = e.length, s = Wr.readOnly), n > 125)
          throw new RangeError("The data size must not be greater than 125 bytes");
        let o = { [Gt]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 9, readOnly: s, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
      }
      pong(e, i, r) {
        let n, s;
        if (typeof e == "string" ? (n = Buffer.byteLength(e), s = false) : (e = Wr(e), n = e.length, s = Wr.readOnly), n > 125)
          throw new RangeError("The data size must not be greater than 125 bytes");
        let o = { [Gt]: n, fin: true, generateMask: this._generateMask, mask: i, maskBuffer: this._maskBuffer, opcode: 10, readOnly: s, rsv1: false };
        this._deflating ? this.enqueue([this.dispatch, e, false, o, r]) : this.sendFrame(t.frame(e, o), r);
      }
      send(e, i, r) {
        let n = this._extensions[Zv.extensionName], s = i.binary ? 2 : 1, o = i.compress, a, l;
        if (typeof e == "string" ? (a = Buffer.byteLength(e), l = false) : (e = Wr(e), a = e.length, l = Wr.readOnly), this._firstFragment ? (this._firstFragment = false, o && n && n.params[n._isServer ? "server_no_context_takeover" : "client_no_context_takeover"] && (o = a >= n._threshold), this._compress = o) : (o = false, s = 0), i.fin && (this._firstFragment = true), n) {
          let c = { [Gt]: a, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: l, rsv1: o };
          this._deflating ? this.enqueue([this.dispatch, e, this._compress, c, r]) : this.dispatch(e, this._compress, c, r);
        } else
          this.sendFrame(t.frame(e, { [Gt]: a, fin: i.fin, generateMask: this._generateMask, mask: i.mask, maskBuffer: this._maskBuffer, opcode: s, readOnly: l, rsv1: false }), r);
      }
      dispatch(e, i, r, n) {
        if (!i) {
          this.sendFrame(t.frame(e, r), n);
          return;
        }
        let s = this._extensions[Zv.extensionName];
        this._bufferedBytes += r[Gt], this._deflating = true, s.compress(e, r.fin, (o, a) => {
          if (this._socket.destroyed) {
            let l = new Error("The socket was closed while data was being compressed");
            typeof n == "function" && n(l);
            for (let c = 0;c < this._queue.length; c++) {
              let u = this._queue[c], f = u[u.length - 1];
              typeof f == "function" && f(l);
            }
            return;
          }
          this._bufferedBytes -= r[Gt], this._deflating = false, r.readOnly = false, this.sendFrame(t.frame(a, r), n), this.dequeue();
        });
      }
      dequeue() {
        for (;!this._deflating && this._queue.length; ) {
          let e = this._queue.shift();
          this._bufferedBytes -= e[3][Gt], Reflect.apply(e[0], this, e.slice(1));
        }
      }
      enqueue(e) {
        this._bufferedBytes += e[3][Gt], this._queue.push(e);
      }
      sendFrame(e, i) {
        e.length === 2 ? (this._socket.cork(), this._socket.write(e[0]), this._socket.write(e[1], i), this._socket.uncork()) : this._socket.write(e[0], i);
      }
    };
    Xv.exports = Gu;
  });
  var ly = w((LL, ay) => {
    var { kForOnEventAttribute: zn, kListener: Wu } = Ni(), ey = Symbol("kCode"), ty = Symbol("kData"), iy = Symbol("kError"), ry = Symbol("kMessage"), ny = Symbol("kReason"), Kr = Symbol("kTarget"), sy = Symbol("kType"), oy = Symbol("kWasClean"), pi = class {
      constructor(e) {
        this[Kr] = null, this[sy] = e;
      }
      get target() {
        return this[Kr];
      }
      get type() {
        return this[sy];
      }
    };
    Object.defineProperty(pi.prototype, "target", { enumerable: true });
    Object.defineProperty(pi.prototype, "type", { enumerable: true });
    var ar = class extends pi {
      constructor(e, i = {}) {
        super(e), this[ey] = i.code === undefined ? 0 : i.code, this[ny] = i.reason === undefined ? "" : i.reason, this[oy] = i.wasClean === undefined ? false : i.wasClean;
      }
      get code() {
        return this[ey];
      }
      get reason() {
        return this[ny];
      }
      get wasClean() {
        return this[oy];
      }
    };
    Object.defineProperty(ar.prototype, "code", { enumerable: true });
    Object.defineProperty(ar.prototype, "reason", { enumerable: true });
    Object.defineProperty(ar.prototype, "wasClean", { enumerable: true });
    var Jr = class extends pi {
      constructor(e, i = {}) {
        super(e), this[iy] = i.error === undefined ? null : i.error, this[ry] = i.message === undefined ? "" : i.message;
      }
      get error() {
        return this[iy];
      }
      get message() {
        return this[ry];
      }
    };
    Object.defineProperty(Jr.prototype, "error", { enumerable: true });
    Object.defineProperty(Jr.prototype, "message", { enumerable: true });
    var Kn = class extends pi {
      constructor(e, i = {}) {
        super(e), this[ty] = i.data === undefined ? null : i.data;
      }
      get data() {
        return this[ty];
      }
    };
    Object.defineProperty(Kn.prototype, "data", { enumerable: true });
    var eA = { addEventListener(t, e, i = {}) {
      for (let n of this.listeners(t))
        if (!i[zn] && n[Wu] === e && !n[zn])
          return;
      let r;
      if (t === "message")
        r = function(s, o) {
          let a = new Kn("message", { data: o ? s : s.toString() });
          a[Kr] = this, ra(e, this, a);
        };
      else if (t === "close")
        r = function(s, o) {
          let a = new ar("close", { code: s, reason: o.toString(), wasClean: this._closeFrameReceived && this._closeFrameSent });
          a[Kr] = this, ra(e, this, a);
        };
      else if (t === "error")
        r = function(s) {
          let o = new Jr("error", { error: s, message: s.message });
          o[Kr] = this, ra(e, this, o);
        };
      else if (t === "open")
        r = function() {
          let s = new pi("open");
          s[Kr] = this, ra(e, this, s);
        };
      else
        return;
      r[zn] = !!i[zn], r[Wu] = e, i.once ? this.once(t, r) : this.on(t, r);
    }, removeEventListener(t, e) {
      for (let i of this.listeners(t))
        if (i[Wu] === e && !i[zn]) {
          this.removeListener(t, i);
          break;
        }
    } };
    ay.exports = { CloseEvent: ar, ErrorEvent: Jr, Event: pi, EventTarget: eA, MessageEvent: Kn };
    function ra(t, e, i) {
      typeof t == "object" && t.handleEvent ? t.handleEvent.call(t, i) : t.call(e, i);
    }
  });
  var zu = w((BL, cy) => {
    var { tokenChars: Jn } = Wn();
    function ii(t, e, i) {
      t[e] === undefined ? t[e] = [i] : t[e].push(i);
    }
    function tA(t) {
      let e = Object.create(null), i = Object.create(null), r = false, n = false, s = false, o, a, l = -1, c = -1, u = -1, f = 0;
      for (;f < t.length; f++)
        if (c = t.charCodeAt(f), o === undefined)
          if (u === -1 && Jn[c] === 1)
            l === -1 && (l = f);
          else if (f !== 0 && (c === 32 || c === 9))
            u === -1 && l !== -1 && (u = f);
          else if (c === 59 || c === 44) {
            if (l === -1)
              throw new SyntaxError(`Unexpected character at index ${f}`);
            u === -1 && (u = f);
            let g = t.slice(l, u);
            c === 44 ? (ii(e, g, i), i = Object.create(null)) : o = g, l = u = -1;
          } else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (a === undefined)
          if (u === -1 && Jn[c] === 1)
            l === -1 && (l = f);
          else if (c === 32 || c === 9)
            u === -1 && l !== -1 && (u = f);
          else if (c === 59 || c === 44) {
            if (l === -1)
              throw new SyntaxError(`Unexpected character at index ${f}`);
            u === -1 && (u = f), ii(i, t.slice(l, u), true), c === 44 && (ii(e, o, i), i = Object.create(null), o = undefined), l = u = -1;
          } else if (c === 61 && l !== -1 && u === -1)
            a = t.slice(l, f), l = u = -1;
          else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (n) {
          if (Jn[c] !== 1)
            throw new SyntaxError(`Unexpected character at index ${f}`);
          l === -1 ? l = f : r || (r = true), n = false;
        } else if (s)
          if (Jn[c] === 1)
            l === -1 && (l = f);
          else if (c === 34 && l !== -1)
            s = false, u = f;
          else if (c === 92)
            n = true;
          else
            throw new SyntaxError(`Unexpected character at index ${f}`);
        else if (c === 34 && t.charCodeAt(f - 1) === 61)
          s = true;
        else if (u === -1 && Jn[c] === 1)
          l === -1 && (l = f);
        else if (l !== -1 && (c === 32 || c === 9))
          u === -1 && (u = f);
        else if (c === 59 || c === 44) {
          if (l === -1)
            throw new SyntaxError(`Unexpected character at index ${f}`);
          u === -1 && (u = f);
          let g = t.slice(l, u);
          r && (g = g.replace(/\\/g, ""), r = false), ii(i, a, g), c === 44 && (ii(e, o, i), i = Object.create(null), o = undefined), a = undefined, l = u = -1;
        } else
          throw new SyntaxError(`Unexpected character at index ${f}`);
      if (l === -1 || s || c === 32 || c === 9)
        throw new SyntaxError("Unexpected end of input");
      u === -1 && (u = f);
      let d = t.slice(l, u);
      return o === undefined ? ii(e, d, i) : (a === undefined ? ii(i, d, true) : r ? ii(i, a, d.replace(/\\/g, "")) : ii(i, a, d), ii(e, o, i)), e;
    }
    function iA(t) {
      return Object.keys(t).map((e) => {
        let i = t[e];
        return Array.isArray(i) || (i = [i]), i.map((r) => [e].concat(Object.keys(r).map((n) => {
          let s = r[n];
          return Array.isArray(s) || (s = [s]), s.map((o) => o === true ? n : `${n}=${o}`).join("; ");
        })).join("; ")).join(", ");
      }).join(", ");
    }
    cy.exports = { format: iA, parse: tA };
  });
  var Xu = w((ML, _y) => {
    var rA = __require("events"), nA = __require("https"), sA = __require("http"), hy = __require("net"), oA = __require("tls"), { randomBytes: aA, createHash: lA } = __require("crypto"), { Duplex: RL, Readable: PL } = __require("stream"), { URL: Ku } = __require("url"), Bi = Yn(), cA = Hu(), uA = Yu(), { BINARY_TYPES: uy, EMPTY_BUFFER: na, GUID: fA, kForOnEventAttribute: Ju, kListener: hA, kStatusCode: pA, kWebSocket: nt, NOOP: py } = Ni(), { EventTarget: { addEventListener: dA, removeEventListener: mA } } = ly(), { format: gA, parse: vA } = zu(), { toBuffer: yA } = Vn(), bA = 30 * 1000, dy = Symbol("kAborted"), Zu = [8, 13], di = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"], _A = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/, Fe = class t extends rA {
      constructor(e, i, r) {
        super(), this._binaryType = uy[0], this._closeCode = 1006, this._closeFrameReceived = false, this._closeFrameSent = false, this._closeMessage = na, this._closeTimer = null, this._extensions = {}, this._paused = false, this._protocol = "", this._readyState = t.CONNECTING, this._receiver = null, this._sender = null, this._socket = null, e !== null ? (this._bufferedAmount = 0, this._isServer = false, this._redirects = 0, i === undefined ? i = [] : Array.isArray(i) || (typeof i == "object" && i !== null ? (r = i, i = []) : i = [i]), my(this, e, i, r)) : (this._autoPong = r.autoPong, this._isServer = true);
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(e) {
        uy.includes(e) && (this._binaryType = e, this._receiver && (this._receiver._binaryType = e));
      }
      get bufferedAmount() {
        return this._socket ? this._socket._writableState.length + this._sender._bufferedBytes : this._bufferedAmount;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get isPaused() {
        return this._paused;
      }
      get onclose() {
        return null;
      }
      get onerror() {
        return null;
      }
      get onopen() {
        return null;
      }
      get onmessage() {
        return null;
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(e, i, r) {
        let n = new cA({ allowSynchronousEvents: r.allowSynchronousEvents, binaryType: this.binaryType, extensions: this._extensions, isServer: this._isServer, maxPayload: r.maxPayload, skipUTF8Validation: r.skipUTF8Validation });
        this._sender = new uA(e, this._extensions, r.generateMask), this._receiver = n, this._socket = e, n[nt] = this, e[nt] = this, n.on("conclude", SA), n.on("drain", EA), n.on("error", kA), n.on("message", OA), n.on("ping", CA), n.on("pong", TA), e.setTimeout && e.setTimeout(0), e.setNoDelay && e.setNoDelay(), i.length > 0 && e.unshift(i), e.on("close", vy), e.on("data", oa), e.on("end", yy), e.on("error", by), this._readyState = t.OPEN, this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        this._extensions[Bi.extensionName] && this._extensions[Bi.extensionName].cleanup(), this._receiver.removeAllListeners(), this._readyState = t.CLOSED, this.emit("close", this._closeCode, this._closeMessage);
      }
      close(e, i) {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            let r = "WebSocket was closed before the connection was established";
            kt(this, this._req, r);
            return;
          }
          if (this.readyState === t.CLOSING) {
            this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end();
            return;
          }
          this._readyState = t.CLOSING, this._sender.close(e, i, !this._isServer, (r) => {
            r || (this._closeFrameSent = true, (this._closeFrameReceived || this._receiver._writableState.errorEmitted) && this._socket.end());
          }), this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), bA);
        }
      }
      pause() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = true, this._socket.pause());
      }
      ping(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e == "function" ? (r = e, e = i = undefined) : typeof i == "function" && (r = i, i = undefined), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          Qu(this, e, r);
          return;
        }
        i === undefined && (i = !this._isServer), this._sender.ping(e || na, i, r);
      }
      pong(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof e == "function" ? (r = e, e = i = undefined) : typeof i == "function" && (r = i, i = undefined), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          Qu(this, e, r);
          return;
        }
        i === undefined && (i = !this._isServer), this._sender.pong(e || na, i, r);
      }
      resume() {
        this.readyState === t.CONNECTING || this.readyState === t.CLOSED || (this._paused = false, this._receiver._writableState.needDrain || this._socket.resume());
      }
      send(e, i, r) {
        if (this.readyState === t.CONNECTING)
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        if (typeof i == "function" && (r = i, i = {}), typeof e == "number" && (e = e.toString()), this.readyState !== t.OPEN) {
          Qu(this, e, r);
          return;
        }
        let n = { binary: typeof e != "string", mask: !this._isServer, compress: true, fin: true, ...i };
        this._extensions[Bi.extensionName] || (n.compress = false), this._sender.send(e || na, n, r);
      }
      terminate() {
        if (this.readyState !== t.CLOSED) {
          if (this.readyState === t.CONNECTING) {
            let e = "WebSocket was closed before the connection was established";
            kt(this, this._req, e);
            return;
          }
          this._socket && (this._readyState = t.CLOSING, this._socket.destroy());
        }
      }
    };
    Object.defineProperty(Fe, "CONNECTING", { enumerable: true, value: di.indexOf("CONNECTING") });
    Object.defineProperty(Fe.prototype, "CONNECTING", { enumerable: true, value: di.indexOf("CONNECTING") });
    Object.defineProperty(Fe, "OPEN", { enumerable: true, value: di.indexOf("OPEN") });
    Object.defineProperty(Fe.prototype, "OPEN", { enumerable: true, value: di.indexOf("OPEN") });
    Object.defineProperty(Fe, "CLOSING", { enumerable: true, value: di.indexOf("CLOSING") });
    Object.defineProperty(Fe.prototype, "CLOSING", { enumerable: true, value: di.indexOf("CLOSING") });
    Object.defineProperty(Fe, "CLOSED", { enumerable: true, value: di.indexOf("CLOSED") });
    Object.defineProperty(Fe.prototype, "CLOSED", { enumerable: true, value: di.indexOf("CLOSED") });
    ["binaryType", "bufferedAmount", "extensions", "isPaused", "protocol", "readyState", "url"].forEach((t) => {
      Object.defineProperty(Fe.prototype, t, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((t) => {
      Object.defineProperty(Fe.prototype, `on${t}`, { enumerable: true, get() {
        for (let e of this.listeners(t))
          if (e[Ju])
            return e[hA];
        return null;
      }, set(e) {
        for (let i of this.listeners(t))
          if (i[Ju]) {
            this.removeListener(t, i);
            break;
          }
        typeof e == "function" && this.addEventListener(t, e, { [Ju]: true });
      } });
    });
    Fe.prototype.addEventListener = dA;
    Fe.prototype.removeEventListener = mA;
    _y.exports = Fe;
    function my(t, e, i, r) {
      let n = { allowSynchronousEvents: true, autoPong: true, protocolVersion: Zu[1], maxPayload: 104857600, skipUTF8Validation: false, perMessageDeflate: true, followRedirects: false, maxRedirects: 10, ...r, socketPath: undefined, hostname: undefined, protocol: undefined, timeout: undefined, method: "GET", host: undefined, path: undefined, port: undefined };
      if (t._autoPong = n.autoPong, !Zu.includes(n.protocolVersion))
        throw new RangeError(`Unsupported protocol version: ${n.protocolVersion} (supported versions: ${Zu.join(", ")})`);
      let s;
      if (e instanceof Ku)
        s = e;
      else
        try {
          s = new Ku(e);
        } catch {
          throw new SyntaxError(`Invalid URL: ${e}`);
        }
      s.protocol === "http:" ? s.protocol = "ws:" : s.protocol === "https:" && (s.protocol = "wss:"), t._url = s.href;
      let o = s.protocol === "wss:", a = s.protocol === "ws+unix:", l;
      if (s.protocol !== "ws:" && !o && !a ? l = `The URL's protocol must be one of "ws:", "wss:", "http:", "https", or "ws+unix:"` : a && !s.pathname ? l = "The URL's pathname is empty" : s.hash && (l = "The URL contains a fragment identifier"), l) {
        let v = new SyntaxError(l);
        if (t._redirects === 0)
          throw v;
        sa(t, v);
        return;
      }
      let c = o ? 443 : 80, u = aA(16).toString("base64"), f = o ? nA.request : sA.request, d = new Set, g;
      if (n.createConnection = n.createConnection || (o ? xA : wA), n.defaultPort = n.defaultPort || c, n.port = s.port || c, n.host = s.hostname.startsWith("[") ? s.hostname.slice(1, -1) : s.hostname, n.headers = { ...n.headers, "Sec-WebSocket-Version": n.protocolVersion, "Sec-WebSocket-Key": u, Connection: "Upgrade", Upgrade: "websocket" }, n.path = s.pathname + s.search, n.timeout = n.handshakeTimeout, n.perMessageDeflate && (g = new Bi(n.perMessageDeflate !== true ? n.perMessageDeflate : {}, false, n.maxPayload), n.headers["Sec-WebSocket-Extensions"] = gA({ [Bi.extensionName]: g.offer() })), i.length) {
        for (let v of i) {
          if (typeof v != "string" || !_A.test(v) || d.has(v))
            throw new SyntaxError("An invalid or duplicated subprotocol was specified");
          d.add(v);
        }
        n.headers["Sec-WebSocket-Protocol"] = i.join(",");
      }
      if (n.origin && (n.protocolVersion < 13 ? n.headers["Sec-WebSocket-Origin"] = n.origin : n.headers.Origin = n.origin), (s.username || s.password) && (n.auth = `${s.username}:${s.password}`), a) {
        let v = n.path.split(":");
        n.socketPath = v[0], n.path = v[1];
      }
      let m;
      if (n.followRedirects) {
        if (t._redirects === 0) {
          t._originalIpc = a, t._originalSecure = o, t._originalHostOrSocketPath = a ? n.socketPath : s.host;
          let v = r && r.headers;
          if (r = { ...r, headers: {} }, v)
            for (let [b, _] of Object.entries(v))
              r.headers[b.toLowerCase()] = _;
        } else if (t.listenerCount("redirect") === 0) {
          let v = a ? t._originalIpc ? n.socketPath === t._originalHostOrSocketPath : false : t._originalIpc ? false : s.host === t._originalHostOrSocketPath;
          (!v || t._originalSecure && !o) && (delete n.headers.authorization, delete n.headers.cookie, v || delete n.headers.host, n.auth = undefined);
        }
        n.auth && !r.headers.authorization && (r.headers.authorization = "Basic " + Buffer.from(n.auth).toString("base64")), m = t._req = f(n), t._redirects && t.emit("redirect", t.url, m);
      } else
        m = t._req = f(n);
      n.timeout && m.on("timeout", () => {
        kt(t, m, "Opening handshake has timed out");
      }), m.on("error", (v) => {
        m === null || m[dy] || (m = t._req = null, sa(t, v));
      }), m.on("response", (v) => {
        let b = v.headers.location, _ = v.statusCode;
        if (b && n.followRedirects && _ >= 300 && _ < 400) {
          if (++t._redirects > n.maxRedirects) {
            kt(t, m, "Maximum redirects exceeded");
            return;
          }
          m.abort();
          let S;
          try {
            S = new Ku(b, e);
          } catch {
            let k = new SyntaxError(`Invalid URL: ${b}`);
            sa(t, k);
            return;
          }
          my(t, S, i, r);
        } else
          t.emit("unexpected-response", m, v) || kt(t, m, `Unexpected server response: ${v.statusCode}`);
      }), m.on("upgrade", (v, b, _) => {
        if (t.emit("upgrade", v), t.readyState !== Fe.CONNECTING)
          return;
        m = t._req = null;
        let S = v.headers.upgrade;
        if (S === undefined || S.toLowerCase() !== "websocket") {
          kt(t, b, "Invalid Upgrade header");
          return;
        }
        let O = lA("sha1").update(u + fA).digest("base64");
        if (v.headers["sec-websocket-accept"] !== O) {
          kt(t, b, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        let k = v.headers["sec-websocket-protocol"], E;
        if (k !== undefined ? d.size ? d.has(k) || (E = "Server sent an invalid subprotocol") : E = "Server sent a subprotocol but none was requested" : d.size && (E = "Server sent no subprotocol"), E) {
          kt(t, b, E);
          return;
        }
        k && (t._protocol = k);
        let R = v.headers["sec-websocket-extensions"];
        if (R !== undefined) {
          if (!g) {
            kt(t, b, "Server sent a Sec-WebSocket-Extensions header but no extension was requested");
            return;
          }
          let T;
          try {
            T = vA(R);
          } catch {
            kt(t, b, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          let A = Object.keys(T);
          if (A.length !== 1 || A[0] !== Bi.extensionName) {
            kt(t, b, "Server indicated an extension that was not requested");
            return;
          }
          try {
            g.accept(T[Bi.extensionName]);
          } catch {
            kt(t, b, "Invalid Sec-WebSocket-Extensions header");
            return;
          }
          t._extensions[Bi.extensionName] = g;
        }
        t.setSocket(b, _, { allowSynchronousEvents: n.allowSynchronousEvents, generateMask: n.generateMask, maxPayload: n.maxPayload, skipUTF8Validation: n.skipUTF8Validation });
      }), n.finishRequest ? n.finishRequest(m, t) : m.end();
    }
    function sa(t, e) {
      t._readyState = Fe.CLOSING, t.emit("error", e), t.emitClose();
    }
    function wA(t) {
      return t.path = t.socketPath, hy.connect(t);
    }
    function xA(t) {
      return t.path = undefined, !t.servername && t.servername !== "" && (t.servername = hy.isIP(t.host) ? "" : t.host), oA.connect(t);
    }
    function kt(t, e, i) {
      t._readyState = Fe.CLOSING;
      let r = new Error(i);
      Error.captureStackTrace(r, kt), e.setHeader ? (e[dy] = true, e.abort(), e.socket && !e.socket.destroyed && e.socket.destroy(), process.nextTick(sa, t, r)) : (e.destroy(r), e.once("error", t.emit.bind(t, "error")), e.once("close", t.emitClose.bind(t)));
    }
    function Qu(t, e, i) {
      if (e) {
        let r = yA(e).length;
        t._socket ? t._sender._bufferedBytes += r : t._bufferedAmount += r;
      }
      if (i) {
        let r = new Error(`WebSocket is not open: readyState ${t.readyState} (${di[t.readyState]})`);
        process.nextTick(i, r);
      }
    }
    function SA(t, e) {
      let i = this[nt];
      i._closeFrameReceived = true, i._closeMessage = e, i._closeCode = t, i._socket[nt] !== undefined && (i._socket.removeListener("data", oa), process.nextTick(gy, i._socket), t === 1005 ? i.close() : i.close(t, e));
    }
    function EA() {
      let t = this[nt];
      t.isPaused || t._socket.resume();
    }
    function kA(t) {
      let e = this[nt];
      e._socket[nt] !== undefined && (e._socket.removeListener("data", oa), process.nextTick(gy, e._socket), e.close(t[pA])), e.emit("error", t);
    }
    function fy() {
      this[nt].emitClose();
    }
    function OA(t, e) {
      this[nt].emit("message", t, e);
    }
    function CA(t) {
      let e = this[nt];
      e._autoPong && e.pong(t, !this._isServer, py), e.emit("ping", t);
    }
    function TA(t) {
      this[nt].emit("pong", t);
    }
    function gy(t) {
      t.resume();
    }
    function vy() {
      let t = this[nt];
      this.removeListener("close", vy), this.removeListener("data", oa), this.removeListener("end", yy), t._readyState = Fe.CLOSING;
      let e;
      !this._readableState.endEmitted && !t._closeFrameReceived && !t._receiver._writableState.errorEmitted && (e = t._socket.read()) !== null && t._receiver.write(e), t._receiver.end(), this[nt] = undefined, clearTimeout(t._closeTimer), t._receiver._writableState.finished || t._receiver._writableState.errorEmitted ? t.emitClose() : (t._receiver.on("error", fy), t._receiver.on("finish", fy));
    }
    function oa(t) {
      this[nt]._receiver.write(t) || this.pause();
    }
    function yy() {
      let t = this[nt];
      t._readyState = Fe.CLOSING, t._receiver.end(), this.end();
    }
    function by() {
      let t = this[nt];
      this.removeListener("error", by), this.on("error", py), t && (t._readyState = Fe.CLOSING, this.destroy());
    }
  });
  var xy = w((qL, wy) => {
    var { tokenChars: AA } = Wn();
    function IA(t) {
      let e = new Set, i = -1, r = -1, n = 0;
      for (n;n < t.length; n++) {
        let o = t.charCodeAt(n);
        if (r === -1 && AA[o] === 1)
          i === -1 && (i = n);
        else if (n !== 0 && (o === 32 || o === 9))
          r === -1 && i !== -1 && (r = n);
        else if (o === 44) {
          if (i === -1)
            throw new SyntaxError(`Unexpected character at index ${n}`);
          r === -1 && (r = n);
          let a = t.slice(i, r);
          if (e.has(a))
            throw new SyntaxError(`The "${a}" subprotocol is duplicated`);
          e.add(a), i = r = -1;
        } else
          throw new SyntaxError(`Unexpected character at index ${n}`);
      }
      if (i === -1 || r !== -1)
        throw new SyntaxError("Unexpected end of input");
      let s = t.slice(i, n);
      if (e.has(s))
        throw new SyntaxError(`The "${s}" subprotocol is duplicated`);
      return e.add(s), e;
    }
    wy.exports = { parse: IA };
  });
  var Ay = w((DL, Ty) => {
    var NA = __require("events"), aa = __require("http"), { Duplex: FL } = __require("stream"), { createHash: LA } = __require("crypto"), Sy = zu(), lr = Yn(), BA = xy(), RA = Xu(), { GUID: PA, kWebSocket: MA } = Ni(), qA = /^[+/0-9A-Za-z]{22}==$/, Ey = 0, ky = 1, Cy = 2, ef = class extends NA {
      constructor(e, i) {
        if (super(), e = { allowSynchronousEvents: true, autoPong: true, maxPayload: 100 * 1024 * 1024, skipUTF8Validation: false, perMessageDeflate: false, handleProtocols: null, clientTracking: true, verifyClient: null, noServer: false, backlog: null, server: null, host: null, path: null, port: null, WebSocket: RA, ...e }, e.port == null && !e.server && !e.noServer || e.port != null && (e.server || e.noServer) || e.server && e.noServer)
          throw new TypeError('One and only one of the "port", "server", or "noServer" options must be specified');
        if (e.port != null ? (this._server = aa.createServer((r, n) => {
          let s = aa.STATUS_CODES[426];
          n.writeHead(426, { "Content-Length": s.length, "Content-Type": "text/plain" }), n.end(s);
        }), this._server.listen(e.port, e.host, e.backlog, i)) : e.server && (this._server = e.server), this._server) {
          let r = this.emit.bind(this, "connection");
          this._removeListeners = FA(this._server, { listening: this.emit.bind(this, "listening"), error: this.emit.bind(this, "error"), upgrade: (n, s, o) => {
            this.handleUpgrade(n, s, o, r);
          } });
        }
        e.perMessageDeflate === true && (e.perMessageDeflate = {}), e.clientTracking && (this.clients = new Set, this._shouldEmitClose = false), this.options = e, this._state = Ey;
      }
      address() {
        if (this.options.noServer)
          throw new Error('The server is operating in "noServer" mode');
        return this._server ? this._server.address() : null;
      }
      close(e) {
        if (this._state === Cy) {
          e && this.once("close", () => {
            e(new Error("The server is not running"));
          }), process.nextTick(Zn, this);
          return;
        }
        if (e && this.once("close", e), this._state !== ky)
          if (this._state = ky, this.options.noServer || this.options.server)
            this._server && (this._removeListeners(), this._removeListeners = this._server = null), this.clients ? this.clients.size ? this._shouldEmitClose = true : process.nextTick(Zn, this) : process.nextTick(Zn, this);
          else {
            let i = this._server;
            this._removeListeners(), this._removeListeners = this._server = null, i.close(() => {
              Zn(this);
            });
          }
      }
      shouldHandle(e) {
        if (this.options.path) {
          let i = e.url.indexOf("?");
          if ((i !== -1 ? e.url.slice(0, i) : e.url) !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(e, i, r, n) {
        i.on("error", Oy);
        let s = e.headers["sec-websocket-key"], o = e.headers.upgrade, a = +e.headers["sec-websocket-version"];
        if (e.method !== "GET") {
          cr(this, e, i, 405, "Invalid HTTP method");
          return;
        }
        if (o === undefined || o.toLowerCase() !== "websocket") {
          cr(this, e, i, 400, "Invalid Upgrade header");
          return;
        }
        if (s === undefined || !qA.test(s)) {
          cr(this, e, i, 400, "Missing or invalid Sec-WebSocket-Key header");
          return;
        }
        if (a !== 8 && a !== 13) {
          cr(this, e, i, 400, "Missing or invalid Sec-WebSocket-Version header");
          return;
        }
        if (!this.shouldHandle(e)) {
          Qn(i, 400);
          return;
        }
        let l = e.headers["sec-websocket-protocol"], c = new Set;
        if (l !== undefined)
          try {
            c = BA.parse(l);
          } catch {
            cr(this, e, i, 400, "Invalid Sec-WebSocket-Protocol header");
            return;
          }
        let u = e.headers["sec-websocket-extensions"], f = {};
        if (this.options.perMessageDeflate && u !== undefined) {
          let d = new lr(this.options.perMessageDeflate, true, this.options.maxPayload);
          try {
            let g = Sy.parse(u);
            g[lr.extensionName] && (d.accept(g[lr.extensionName]), f[lr.extensionName] = d);
          } catch {
            cr(this, e, i, 400, "Invalid or unacceptable Sec-WebSocket-Extensions header");
            return;
          }
        }
        if (this.options.verifyClient) {
          let d = { origin: e.headers[`${a === 8 ? "sec-websocket-origin" : "origin"}`], secure: !!(e.socket.authorized || e.socket.encrypted), req: e };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(d, (g, m, v, b) => {
              if (!g)
                return Qn(i, m || 401, v, b);
              this.completeUpgrade(f, s, c, e, i, r, n);
            });
            return;
          }
          if (!this.options.verifyClient(d))
            return Qn(i, 401);
        }
        this.completeUpgrade(f, s, c, e, i, r, n);
      }
      completeUpgrade(e, i, r, n, s, o, a) {
        if (!s.readable || !s.writable)
          return s.destroy();
        if (s[MA])
          throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
        if (this._state > Ey)
          return Qn(s, 503);
        let c = ["HTTP/1.1 101 Switching Protocols", "Upgrade: websocket", "Connection: Upgrade", `Sec-WebSocket-Accept: ${LA("sha1").update(i + PA).digest("base64")}`], u = new this.options.WebSocket(null, undefined, this.options);
        if (r.size) {
          let f = this.options.handleProtocols ? this.options.handleProtocols(r, n) : r.values().next().value;
          f && (c.push(`Sec-WebSocket-Protocol: ${f}`), u._protocol = f);
        }
        if (e[lr.extensionName]) {
          let f = e[lr.extensionName].params, d = Sy.format({ [lr.extensionName]: [f] });
          c.push(`Sec-WebSocket-Extensions: ${d}`), u._extensions = e;
        }
        this.emit("headers", c, n), s.write(c.concat(`\r
`).join(`\r
`)), s.removeListener("error", Oy), u.setSocket(s, o, { allowSynchronousEvents: this.options.allowSynchronousEvents, maxPayload: this.options.maxPayload, skipUTF8Validation: this.options.skipUTF8Validation }), this.clients && (this.clients.add(u), u.on("close", () => {
          this.clients.delete(u), this._shouldEmitClose && !this.clients.size && process.nextTick(Zn, this);
        })), a(u, n);
      }
    };
    Ty.exports = ef;
    function FA(t, e) {
      for (let i of Object.keys(e))
        t.on(i, e[i]);
      return function() {
        for (let r of Object.keys(e))
          t.removeListener(r, e[r]);
      };
    }
    function Zn(t) {
      t._state = Cy, t.emit("close");
    }
    function Oy() {
      this.destroy();
    }
    function Qn(t, e, i, r) {
      i = i || aa.STATUS_CODES[e], r = { Connection: "close", "Content-Type": "text/html", "Content-Length": Buffer.byteLength(i), ...r }, t.once("finish", t.destroy), t.end(`HTTP/1.1 ${e} ${aa.STATUS_CODES[e]}\r
` + Object.keys(r).map((n) => `${n}: ${r[n]}`).join(`\r
`) + `\r
\r
` + i);
    }
    function cr(t, e, i, r, n) {
      if (t.listenerCount("wsClientError")) {
        let s = new Error(n);
        Error.captureStackTrace(s, cr), t.emit("wsClientError", s, i, e);
      } else
        Qn(i, r, n);
    }
  });
  var By = w((UL, Ly) => {
    var Ri = __require("constants"), jA = process.cwd, la = null, UA = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      return la || (la = jA.call(process)), la;
    };
    try {
      process.cwd();
    } catch {
    }
    typeof process.chdir == "function" && (sf = process.chdir, process.chdir = function(t) {
      la = null, sf.call(process, t);
    }, Object.setPrototypeOf && Object.setPrototypeOf(process.chdir, sf));
    var sf;
    Ly.exports = $A;
    function $A(t) {
      Ri.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./) && e(t), t.lutimes || i(t), t.chown = s(t.chown), t.fchown = s(t.fchown), t.lchown = s(t.lchown), t.chmod = r(t.chmod), t.fchmod = r(t.fchmod), t.lchmod = r(t.lchmod), t.chownSync = o(t.chownSync), t.fchownSync = o(t.fchownSync), t.lchownSync = o(t.lchownSync), t.chmodSync = n(t.chmodSync), t.fchmodSync = n(t.fchmodSync), t.lchmodSync = n(t.lchmodSync), t.stat = a(t.stat), t.fstat = a(t.fstat), t.lstat = a(t.lstat), t.statSync = l(t.statSync), t.fstatSync = l(t.fstatSync), t.lstatSync = l(t.lstatSync), t.chmod && !t.lchmod && (t.lchmod = function(u, f, d) {
        d && process.nextTick(d);
      }, t.lchmodSync = function() {
      }), t.chown && !t.lchown && (t.lchown = function(u, f, d, g) {
        g && process.nextTick(g);
      }, t.lchownSync = function() {
      }), UA === "win32" && (t.rename = typeof t.rename != "function" ? t.rename : function(u) {
        function f(d, g, m) {
          var v = Date.now(), b = 0;
          u(d, g, function _(S) {
            if (S && (S.code === "EACCES" || S.code === "EPERM") && Date.now() - v < 60000) {
              setTimeout(function() {
                t.stat(g, function(O, k) {
                  O && O.code === "ENOENT" ? u(d, g, _) : m(S);
                });
              }, b), b < 100 && (b += 10);
              return;
            }
            m && m(S);
          });
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f, u), f;
      }(t.rename)), t.read = typeof t.read != "function" ? t.read : function(u) {
        function f(d, g, m, v, b, _) {
          var S;
          if (_ && typeof _ == "function") {
            var O = 0;
            S = function(k, E, R) {
              if (k && k.code === "EAGAIN" && O < 10)
                return O++, u.call(t, d, g, m, v, b, S);
              _.apply(this, arguments);
            };
          }
          return u.call(t, d, g, m, v, b, S);
        }
        return Object.setPrototypeOf && Object.setPrototypeOf(f, u), f;
      }(t.read), t.readSync = typeof t.readSync != "function" ? t.readSync : function(u) {
        return function(f, d, g, m, v) {
          for (var b = 0;; )
            try {
              return u.call(t, f, d, g, m, v);
            } catch (_) {
              if (_.code === "EAGAIN" && b < 10) {
                b++;
                continue;
              }
              throw _;
            }
        };
      }(t.readSync);
      function e(u) {
        u.lchmod = function(f, d, g) {
          u.open(f, Ri.O_WRONLY | Ri.O_SYMLINK, d, function(m, v) {
            if (m) {
              g && g(m);
              return;
            }
            u.fchmod(v, d, function(b) {
              u.close(v, function(_) {
                g && g(b || _);
              });
            });
          });
        }, u.lchmodSync = function(f, d) {
          var g = u.openSync(f, Ri.O_WRONLY | Ri.O_SYMLINK, d), m = true, v;
          try {
            v = u.fchmodSync(g, d), m = false;
          } finally {
            if (m)
              try {
                u.closeSync(g);
              } catch {
              }
            else
              u.closeSync(g);
          }
          return v;
        };
      }
      function i(u) {
        Ri.hasOwnProperty("O_SYMLINK") && u.futimes ? (u.lutimes = function(f, d, g, m) {
          u.open(f, Ri.O_SYMLINK, function(v, b) {
            if (v) {
              m && m(v);
              return;
            }
            u.futimes(b, d, g, function(_) {
              u.close(b, function(S) {
                m && m(_ || S);
              });
            });
          });
        }, u.lutimesSync = function(f, d, g) {
          var m = u.openSync(f, Ri.O_SYMLINK), v, b = true;
          try {
            v = u.futimesSync(m, d, g), b = false;
          } finally {
            if (b)
              try {
                u.closeSync(m);
              } catch {
              }
            else
              u.closeSync(m);
          }
          return v;
        }) : u.futimes && (u.lutimes = function(f, d, g, m) {
          m && process.nextTick(m);
        }, u.lutimesSync = function() {
        });
      }
      function r(u) {
        return u && function(f, d, g) {
          return u.call(t, f, d, function(m) {
            c(m) && (m = null), g && g.apply(this, arguments);
          });
        };
      }
      function n(u) {
        return u && function(f, d) {
          try {
            return u.call(t, f, d);
          } catch (g) {
            if (!c(g))
              throw g;
          }
        };
      }
      function s(u) {
        return u && function(f, d, g, m) {
          return u.call(t, f, d, g, function(v) {
            c(v) && (v = null), m && m.apply(this, arguments);
          });
        };
      }
      function o(u) {
        return u && function(f, d, g) {
          try {
            return u.call(t, f, d, g);
          } catch (m) {
            if (!c(m))
              throw m;
          }
        };
      }
      function a(u) {
        return u && function(f, d, g) {
          typeof d == "function" && (g = d, d = null);
          function m(v, b) {
            b && (b.uid < 0 && (b.uid += 4294967296), b.gid < 0 && (b.gid += 4294967296)), g && g.apply(this, arguments);
          }
          return d ? u.call(t, f, d, m) : u.call(t, f, m);
        };
      }
      function l(u) {
        return u && function(f, d) {
          var g = d ? u.call(t, f, d) : u.call(t, f);
          return g && (g.uid < 0 && (g.uid += 4294967296), g.gid < 0 && (g.gid += 4294967296)), g;
        };
      }
      function c(u) {
        if (!u || u.code === "ENOSYS")
          return true;
        var f = !process.getuid || process.getuid() !== 0;
        return !!(f && (u.code === "EINVAL" || u.code === "EPERM"));
      }
    }
  });
  var My = w(($L, Py) => {
    var Ry = __require("stream").Stream;
    Py.exports = VA;
    function VA(t) {
      return { ReadStream: e, WriteStream: i };
      function e(r, n) {
        if (!(this instanceof e))
          return new e(r, n);
        Ry.call(this);
        var s = this;
        this.path = r, this.fd = null, this.readable = true, this.paused = false, this.flags = "r", this.mode = 438, this.bufferSize = 64 * 1024, n = n || {};
        for (var o = Object.keys(n), a = 0, l = o.length;a < l; a++) {
          var c = o[a];
          this[c] = n[c];
        }
        if (this.encoding && this.setEncoding(this.encoding), this.start !== undefined) {
          if (typeof this.start != "number")
            throw TypeError("start must be a Number");
          if (this.end === undefined)
            this.end = 1 / 0;
          else if (typeof this.end != "number")
            throw TypeError("end must be a Number");
          if (this.start > this.end)
            throw new Error("start must be <= end");
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            s._read();
          });
          return;
        }
        t.open(this.path, this.flags, this.mode, function(u, f) {
          if (u) {
            s.emit("error", u), s.readable = false;
            return;
          }
          s.fd = f, s.emit("open", f), s._read();
        });
      }
      function i(r, n) {
        if (!(this instanceof i))
          return new i(r, n);
        Ry.call(this), this.path = r, this.fd = null, this.writable = true, this.flags = "w", this.encoding = "binary", this.mode = 438, this.bytesWritten = 0, n = n || {};
        for (var s = Object.keys(n), o = 0, a = s.length;o < a; o++) {
          var l = s[o];
          this[l] = n[l];
        }
        if (this.start !== undefined) {
          if (typeof this.start != "number")
            throw TypeError("start must be a Number");
          if (this.start < 0)
            throw new Error("start must be >= zero");
          this.pos = this.start;
        }
        this.busy = false, this._queue = [], this.fd === null && (this._open = t.open, this._queue.push([this._open, this.path, this.flags, this.mode, undefined]), this.flush());
      }
    }
  });
  var Fy = w((VL, qy) => {
    qy.exports = GA;
    var HA = Object.getPrototypeOf || function(t) {
      return t.__proto__;
    };
    function GA(t) {
      if (t === null || typeof t != "object")
        return t;
      if (t instanceof Object)
        var e = { __proto__: HA(t) };
      else
        var e = Object.create(null);
      return Object.getOwnPropertyNames(t).forEach(function(i) {
        Object.defineProperty(e, i, Object.getOwnPropertyDescriptor(t, i));
      }), e;
    }
  });
  var $y = w((HL, lf) => {
    var Me = __require("fs"), YA = By(), WA = My(), zA = Fy(), ca = __require("util"), et, fa;
    typeof Symbol == "function" && typeof Symbol.for == "function" ? (et = Symbol.for("graceful-fs.queue"), fa = Symbol.for("graceful-fs.previous")) : (et = "___graceful-fs.queue", fa = "___graceful-fs.previous");
    function KA() {
    }
    function Uy(t, e) {
      Object.defineProperty(t, et, { get: function() {
        return e;
      } });
    }
    var ur = KA;
    ca.debuglog ? ur = ca.debuglog("gfs4") : /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && (ur = function() {
      var t = ca.format.apply(ca, arguments);
      t = "GFS4: " + t.split(/\n/).join(`
GFS4: `), console.error(t);
    });
    Me[et] || (Dy = global[et] || [], Uy(Me, Dy), Me.close = function(t) {
      function e(i, r) {
        return t.call(Me, i, function(n) {
          n || jy(), typeof r == "function" && r.apply(this, arguments);
        });
      }
      return Object.defineProperty(e, fa, { value: t }), e;
    }(Me.close), Me.closeSync = function(t) {
      function e(i) {
        t.apply(Me, arguments), jy();
      }
      return Object.defineProperty(e, fa, { value: t }), e;
    }(Me.closeSync), /\bgfs4\b/i.test(process.env.NODE_DEBUG || "") && process.on("exit", function() {
      ur(Me[et]), __require("assert").equal(Me[et].length, 0);
    }));
    var Dy;
    global[et] || Uy(global, Me[et]);
    lf.exports = of(zA(Me));
    process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !Me.__patched && (lf.exports = of(Me), Me.__patched = true);
    function of(t) {
      YA(t), t.gracefulify = of, t.createReadStream = E, t.createWriteStream = R;
      var e = t.readFile;
      t.readFile = i;
      function i(C, L, P) {
        return typeof L == "function" && (P = L, L = null), U(C, L, P);
        function U(F, H, j, V) {
          return e(F, H, function(W) {
            W && (W.code === "EMFILE" || W.code === "ENFILE") ? Zr([U, [F, H, j], W, V || Date.now(), Date.now()]) : typeof j == "function" && j.apply(this, arguments);
          });
        }
      }
      var r = t.writeFile;
      t.writeFile = n;
      function n(C, L, P, U) {
        return typeof P == "function" && (U = P, P = null), F(C, L, P, U);
        function F(H, j, V, W, Q) {
          return r(H, j, V, function(Y) {
            Y && (Y.code === "EMFILE" || Y.code === "ENFILE") ? Zr([F, [H, j, V, W], Y, Q || Date.now(), Date.now()]) : typeof W == "function" && W.apply(this, arguments);
          });
        }
      }
      var s = t.appendFile;
      s && (t.appendFile = o);
      function o(C, L, P, U) {
        return typeof P == "function" && (U = P, P = null), F(C, L, P, U);
        function F(H, j, V, W, Q) {
          return s(H, j, V, function(Y) {
            Y && (Y.code === "EMFILE" || Y.code === "ENFILE") ? Zr([F, [H, j, V, W], Y, Q || Date.now(), Date.now()]) : typeof W == "function" && W.apply(this, arguments);
          });
        }
      }
      var a = t.copyFile;
      a && (t.copyFile = l);
      function l(C, L, P, U) {
        return typeof P == "function" && (U = P, P = 0), F(C, L, P, U);
        function F(H, j, V, W, Q) {
          return a(H, j, V, function(Y) {
            Y && (Y.code === "EMFILE" || Y.code === "ENFILE") ? Zr([F, [H, j, V, W], Y, Q || Date.now(), Date.now()]) : typeof W == "function" && W.apply(this, arguments);
          });
        }
      }
      var c = t.readdir;
      t.readdir = f;
      var u = /^v[0-5]\./;
      function f(C, L, P) {
        typeof L == "function" && (P = L, L = null);
        var U = u.test(process.version) ? function(j, V, W, Q) {
          return c(j, F(j, V, W, Q));
        } : function(j, V, W, Q) {
          return c(j, V, F(j, V, W, Q));
        };
        return U(C, L, P);
        function F(H, j, V, W) {
          return function(Q, Y) {
            Q && (Q.code === "EMFILE" || Q.code === "ENFILE") ? Zr([U, [H, j, V], Q, W || Date.now(), Date.now()]) : (Y && Y.sort && Y.sort(), typeof V == "function" && V.call(this, Q, Y));
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var d = WA(t);
        _ = d.ReadStream, O = d.WriteStream;
      }
      var g = t.ReadStream;
      g && (_.prototype = Object.create(g.prototype), _.prototype.open = S);
      var m = t.WriteStream;
      m && (O.prototype = Object.create(m.prototype), O.prototype.open = k), Object.defineProperty(t, "ReadStream", { get: function() {
        return _;
      }, set: function(C) {
        _ = C;
      }, enumerable: true, configurable: true }), Object.defineProperty(t, "WriteStream", { get: function() {
        return O;
      }, set: function(C) {
        O = C;
      }, enumerable: true, configurable: true });
      var v = _;
      Object.defineProperty(t, "FileReadStream", { get: function() {
        return v;
      }, set: function(C) {
        v = C;
      }, enumerable: true, configurable: true });
      var b = O;
      Object.defineProperty(t, "FileWriteStream", { get: function() {
        return b;
      }, set: function(C) {
        b = C;
      }, enumerable: true, configurable: true });
      function _(C, L) {
        return this instanceof _ ? (g.apply(this, arguments), this) : _.apply(Object.create(_.prototype), arguments);
      }
      function S() {
        var C = this;
        A(C.path, C.flags, C.mode, function(L, P) {
          L ? (C.autoClose && C.destroy(), C.emit("error", L)) : (C.fd = P, C.emit("open", P), C.read());
        });
      }
      function O(C, L) {
        return this instanceof O ? (m.apply(this, arguments), this) : O.apply(Object.create(O.prototype), arguments);
      }
      function k() {
        var C = this;
        A(C.path, C.flags, C.mode, function(L, P) {
          L ? (C.destroy(), C.emit("error", L)) : (C.fd = P, C.emit("open", P));
        });
      }
      function E(C, L) {
        return new t.ReadStream(C, L);
      }
      function R(C, L) {
        return new t.WriteStream(C, L);
      }
      var T = t.open;
      t.open = A;
      function A(C, L, P, U) {
        return typeof P == "function" && (U = P, P = null), F(C, L, P, U);
        function F(H, j, V, W, Q) {
          return T(H, j, V, function(Y, de) {
            Y && (Y.code === "EMFILE" || Y.code === "ENFILE") ? Zr([F, [H, j, V, W], Y, Q || Date.now(), Date.now()]) : typeof W == "function" && W.apply(this, arguments);
          });
        }
      }
      return t;
    }
    function Zr(t) {
      ur("ENQUEUE", t[0].name, t[1]), Me[et].push(t), af();
    }
    var ua;
    function jy() {
      for (var t = Date.now(), e = 0;e < Me[et].length; ++e)
        Me[et][e].length > 2 && (Me[et][e][3] = t, Me[et][e][4] = t);
      af();
    }
    function af() {
      if (clearTimeout(ua), ua = undefined, Me[et].length !== 0) {
        var t = Me[et].shift(), e = t[0], i = t[1], r = t[2], n = t[3], s = t[4];
        if (n === undefined)
          ur("RETRY", e.name, i), e.apply(null, i);
        else if (Date.now() - n >= 60000) {
          ur("TIMEOUT", e.name, i);
          var o = i.pop();
          typeof o == "function" && o.call(null, r);
        } else {
          var a = Date.now() - s, l = Math.max(s - n, 1), c = Math.min(l * 1.2, 100);
          a >= c ? (ur("RETRY", e.name, i), e.apply(null, i.concat([n]))) : Me[et].push(t);
        }
        ua === undefined && (ua = setTimeout(af, 0));
      }
    }
  });
  var Hy = w((GL, Vy) => {
    function Pt(t, e) {
      typeof e == "boolean" && (e = { forever: e }), this._originalTimeouts = JSON.parse(JSON.stringify(t)), this._timeouts = t, this._options = e || {}, this._maxRetryTime = e && e.maxRetryTime || 1 / 0, this._fn = null, this._errors = [], this._attempts = 1, this._operationTimeout = null, this._operationTimeoutCb = null, this._timeout = null, this._operationStart = null, this._options.forever && (this._cachedTimeouts = this._timeouts.slice(0));
    }
    Vy.exports = Pt;
    Pt.prototype.reset = function() {
      this._attempts = 1, this._timeouts = this._originalTimeouts;
    };
    Pt.prototype.stop = function() {
      this._timeout && clearTimeout(this._timeout), this._timeouts = [], this._cachedTimeouts = null;
    };
    Pt.prototype.retry = function(t) {
      if (this._timeout && clearTimeout(this._timeout), !t)
        return false;
      var e = new Date().getTime();
      if (t && e - this._operationStart >= this._maxRetryTime)
        return this._errors.unshift(new Error("RetryOperation timeout occurred")), false;
      this._errors.push(t);
      var i = this._timeouts.shift();
      if (i === undefined)
        if (this._cachedTimeouts)
          this._errors.splice(this._errors.length - 1, this._errors.length), this._timeouts = this._cachedTimeouts.slice(0), i = this._timeouts.shift();
        else
          return false;
      var r = this, n = setTimeout(function() {
        r._attempts++, r._operationTimeoutCb && (r._timeout = setTimeout(function() {
          r._operationTimeoutCb(r._attempts);
        }, r._operationTimeout), r._options.unref && r._timeout.unref()), r._fn(r._attempts);
      }, i);
      return this._options.unref && n.unref(), true;
    };
    Pt.prototype.attempt = function(t, e) {
      this._fn = t, e && (e.timeout && (this._operationTimeout = e.timeout), e.cb && (this._operationTimeoutCb = e.cb));
      var i = this;
      this._operationTimeoutCb && (this._timeout = setTimeout(function() {
        i._operationTimeoutCb();
      }, i._operationTimeout)), this._operationStart = new Date().getTime(), this._fn(this._attempts);
    };
    Pt.prototype.try = function(t) {
      console.log("Using RetryOperation.try() is deprecated"), this.attempt(t);
    };
    Pt.prototype.start = function(t) {
      console.log("Using RetryOperation.start() is deprecated"), this.attempt(t);
    };
    Pt.prototype.start = Pt.prototype.try;
    Pt.prototype.errors = function() {
      return this._errors;
    };
    Pt.prototype.attempts = function() {
      return this._attempts;
    };
    Pt.prototype.mainError = function() {
      if (this._errors.length === 0)
        return null;
      for (var t = {}, e = null, i = 0, r = 0;r < this._errors.length; r++) {
        var n = this._errors[r], s = n.message, o = (t[s] || 0) + 1;
        t[s] = o, o >= i && (e = n, i = o);
      }
      return e;
    };
  });
  var Gy = w((fr) => {
    var JA = Hy();
    fr.operation = function(t) {
      var e = fr.timeouts(t);
      return new JA(e, { forever: t && t.forever, unref: t && t.unref, maxRetryTime: t && t.maxRetryTime });
    };
    fr.timeouts = function(t) {
      if (t instanceof Array)
        return [].concat(t);
      var e = { retries: 10, factor: 2, minTimeout: 1 * 1000, maxTimeout: 1 / 0, randomize: false };
      for (var i in t)
        e[i] = t[i];
      if (e.minTimeout > e.maxTimeout)
        throw new Error("minTimeout is greater than maxTimeout");
      for (var r = [], n = 0;n < e.retries; n++)
        r.push(this.createTimeout(n, e));
      return t && t.forever && !r.length && r.push(this.createTimeout(n, e)), r.sort(function(s, o) {
        return s - o;
      }), r;
    };
    fr.createTimeout = function(t, e) {
      var i = e.randomize ? Math.random() + 1 : 1, r = Math.round(i * e.minTimeout * Math.pow(e.factor, t));
      return r = Math.min(r, e.maxTimeout), r;
    };
    fr.wrap = function(t, e, i) {
      if (e instanceof Array && (i = e, e = null), !i) {
        i = [];
        for (var r in t)
          typeof t[r] == "function" && i.push(r);
      }
      for (var n = 0;n < i.length; n++) {
        var s = i[n], o = t[s];
        t[s] = function(l) {
          var c = fr.operation(e), u = Array.prototype.slice.call(arguments, 1), f = u.pop();
          u.push(function(d) {
            c.retry(d) || (d && (arguments[0] = c.mainError()), f.apply(this, arguments));
          }), c.attempt(function() {
            l.apply(t, u);
          });
        }.bind(t, o), t[s].options = e;
      }
    };
  });
  var Wy = w((WL, Yy) => {
    Yy.exports = Gy();
  });
  var zy = w((zL, ha) => {
    ha.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
    process.platform !== "win32" && ha.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
    process.platform === "linux" && ha.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  });
  var Xy = w((KL, en) => {
    var Pe = global.process, hr = function(t) {
      return t && typeof t == "object" && typeof t.removeListener == "function" && typeof t.emit == "function" && typeof t.reallyExit == "function" && typeof t.listeners == "function" && typeof t.kill == "function" && typeof t.pid == "number" && typeof t.on == "function";
    };
    hr(Pe) ? (Ky = __require("assert"), Qr = zy(), Jy = /^win/i.test(Pe.platform), Xn = __require("events"), typeof Xn != "function" && (Xn = Xn.EventEmitter), Pe.__signal_exit_emitter__ ? Je = Pe.__signal_exit_emitter__ : (Je = Pe.__signal_exit_emitter__ = new Xn, Je.count = 0, Je.emitted = {}), Je.infinite || (Je.setMaxListeners(1 / 0), Je.infinite = true), en.exports = function(t, e) {
      if (!hr(global.process))
        return function() {
        };
      Ky.equal(typeof t, "function", "a callback must be provided for exit handler"), Xr === false && cf();
      var i = "exit";
      e && e.alwaysLast && (i = "afterexit");
      var r = function() {
        Je.removeListener(i, t), Je.listeners("exit").length === 0 && Je.listeners("afterexit").length === 0 && pa();
      };
      return Je.on(i, t), r;
    }, pa = function() {
      !Xr || !hr(global.process) || (Xr = false, Qr.forEach(function(e) {
        try {
          Pe.removeListener(e, da[e]);
        } catch {
        }
      }), Pe.emit = ma, Pe.reallyExit = uf, Je.count -= 1);
    }, en.exports.unload = pa, pr = function(e, i, r) {
      Je.emitted[e] || (Je.emitted[e] = true, Je.emit(e, i, r));
    }, da = {}, Qr.forEach(function(t) {
      da[t] = function() {
        if (hr(global.process)) {
          var i = Pe.listeners(t);
          i.length === Je.count && (pa(), pr("exit", null, t), pr("afterexit", null, t), Jy && t === "SIGHUP" && (t = "SIGINT"), Pe.kill(Pe.pid, t));
        }
      };
    }), en.exports.signals = function() {
      return Qr;
    }, Xr = false, cf = function() {
      Xr || !hr(global.process) || (Xr = true, Je.count += 1, Qr = Qr.filter(function(e) {
        try {
          return Pe.on(e, da[e]), true;
        } catch {
          return false;
        }
      }), Pe.emit = Qy, Pe.reallyExit = Zy);
    }, en.exports.load = cf, uf = Pe.reallyExit, Zy = function(e) {
      hr(global.process) && (Pe.exitCode = e || 0, pr("exit", Pe.exitCode, null), pr("afterexit", Pe.exitCode, null), uf.call(Pe, Pe.exitCode));
    }, ma = Pe.emit, Qy = function(e, i) {
      if (e === "exit" && hr(global.process)) {
        i !== undefined && (Pe.exitCode = i);
        var r = ma.apply(this, arguments);
        return pr("exit", Pe.exitCode, null), pr("afterexit", Pe.exitCode, null), r;
      } else
        return ma.apply(this, arguments);
    }) : en.exports = function() {
      return function() {
      };
    };
    var Ky, Qr, Jy, Xn, Je, pa, pr, da, Xr, cf, uf, Zy, ma, Qy;
  });
  var ab = w((JL, ob) => {
    var ZA = __require("path"), rb = $y(), QA = Wy(), XA = Xy(), Pi = {}, eb = Symbol();
    function eI(t, e, i) {
      let r = e[eb];
      if (r)
        return e.stat(t, (s, o) => {
          if (s)
            return i(s);
          i(null, o.mtime, r);
        });
      let n = new Date(Math.ceil(Date.now() / 1000) * 1000 + 5);
      e.utimes(t, n, n, (s) => {
        if (s)
          return i(s);
        e.stat(t, (o, a) => {
          if (o)
            return i(o);
          let l = a.mtime.getTime() % 1000 === 0 ? "s" : "ms";
          Object.defineProperty(e, eb, { value: l }), i(null, a.mtime, l);
        });
      });
    }
    function tI(t) {
      let e = Date.now();
      return t === "s" && (e = Math.ceil(e / 1000) * 1000), new Date(e);
    }
    function va(t, e) {
      return e.lockfilePath || `${t}.lock`;
    }
    function nb(t, e, i) {
      if (!e.realpath)
        return i(null, ZA.resolve(t));
      e.fs.realpath(t, i);
    }
    function hf(t, e, i) {
      let r = va(t, e);
      e.fs.mkdir(r, (n) => {
        if (!n)
          return eI(r, e.fs, (s, o, a) => {
            if (s)
              return e.fs.rmdir(r, () => {
              }), i(s);
            i(null, o, a);
          });
        if (n.code !== "EEXIST")
          return i(n);
        if (e.stale <= 0)
          return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
        e.fs.stat(r, (s, o) => {
          if (s)
            return s.code === "ENOENT" ? hf(t, { ...e, stale: 0 }, i) : i(s);
          if (!iI(o, e))
            return i(Object.assign(new Error("Lock file is already being held"), { code: "ELOCKED", file: t }));
          sb(t, e, (a) => {
            if (a)
              return i(a);
            hf(t, { ...e, stale: 0 }, i);
          });
        });
      });
    }
    function iI(t, e) {
      return t.mtime.getTime() < Date.now() - e.stale;
    }
    function sb(t, e, i) {
      e.fs.rmdir(va(t, e), (r) => {
        if (r && r.code !== "ENOENT")
          return i(r);
        i();
      });
    }
    function ga(t, e) {
      let i = Pi[t];
      i.updateTimeout || (i.updateDelay = i.updateDelay || e.update, i.updateTimeout = setTimeout(() => {
        i.updateTimeout = null, e.fs.stat(i.lockfilePath, (r, n) => {
          let s = i.lastUpdate + e.stale < Date.now();
          if (r)
            return r.code === "ENOENT" || s ? ff(t, i, Object.assign(r, { code: "ECOMPROMISED" })) : (i.updateDelay = 1000, ga(t, e));
          if (!(i.mtime.getTime() === n.mtime.getTime()))
            return ff(t, i, Object.assign(new Error("Unable to update lock within the stale threshold"), { code: "ECOMPROMISED" }));
          let a = tI(i.mtimePrecision);
          e.fs.utimes(i.lockfilePath, a, a, (l) => {
            let c = i.lastUpdate + e.stale < Date.now();
            if (!i.released) {
              if (l)
                return l.code === "ENOENT" || c ? ff(t, i, Object.assign(l, { code: "ECOMPROMISED" })) : (i.updateDelay = 1000, ga(t, e));
              i.mtime = a, i.lastUpdate = Date.now(), i.updateDelay = null, ga(t, e);
            }
          });
        });
      }, i.updateDelay), i.updateTimeout.unref && i.updateTimeout.unref());
    }
    function ff(t, e, i) {
      e.released = true, e.updateTimeout && clearTimeout(e.updateTimeout), Pi[t] === e && delete Pi[t], e.options.onCompromised(i);
    }
    function rI(t, e, i) {
      e = { stale: 1e4, update: null, realpath: true, retries: 0, fs: rb, onCompromised: (r) => {
        throw r;
      }, ...e }, e.retries = e.retries || 0, e.retries = typeof e.retries == "number" ? { retries: e.retries } : e.retries, e.stale = Math.max(e.stale || 0, 2000), e.update = e.update == null ? e.stale / 2 : e.update || 0, e.update = Math.max(Math.min(e.update, e.stale / 2), 1000), nb(t, e, (r, n) => {
        if (r)
          return i(r);
        let s = QA.operation(e.retries);
        s.attempt(() => {
          hf(n, e, (o, a, l) => {
            if (s.retry(o))
              return;
            if (o)
              return i(s.mainError());
            let c = Pi[n] = { lockfilePath: va(n, e), mtime: a, mtimePrecision: l, options: e, lastUpdate: Date.now() };
            ga(n, e), i(null, (u) => {
              if (c.released)
                return u && u(Object.assign(new Error("Lock is already released"), { code: "ERELEASED" }));
              nI(n, { ...e, realpath: false }, u);
            });
          });
        });
      });
    }
    function nI(t, e, i) {
      e = { fs: rb, realpath: true, ...e }, nb(t, e, (r, n) => {
        if (r)
          return i(r);
        let s = Pi[n];
        if (!s)
          return i(Object.assign(new Error("Lock is not acquired/owned by you"), { code: "ENOTACQUIRED" }));
        s.updateTimeout && clearTimeout(s.updateTimeout), s.released = true, delete Pi[n], sb(n, e, i);
      });
    }
    function tb(t) {
      return (...e) => new Promise((i, r) => {
        e.push((n, s) => {
          n ? r(n) : i(s);
        }), t(...e);
      });
    }
    var ib = false;
    function sI() {
      ib || (ib = true, XA(() => {
        for (let t in Pi) {
          let e = Pi[t].options;
          try {
            e.fs.rmdirSync(va(t, e));
          } catch {
          }
        }
      }));
    }
    ob.exports.lock = async (t, e) => {
      sI();
      let i = await tb(rI)(t, e);
      return tb(i);
    };
  });
  var SI = {};
  gf(SI, { HttpsProxyAgent: () => bb.HttpsProxyAgent, PNG: () => _b.PNG, SocksProxyAgent: () => xb.SocksProxyAgent, StackUtils: () => vI, colors: () => oI, debug: () => aI, diff: () => lI, dotenv: () => cI, getProxyForUrl: () => yb.getProxyForUrl, jpegjs: () => uI, lockfile: () => hI, mime: () => pI, minimatch: () => dI, open: () => mI, program: () => wb.program, progress: () => gI, ws: () => bI, wsReceiver: () => wI, wsSender: () => xI, wsServer: () => _I, yaml: () => yI });
  module.exports = Vb(SI);
  var lb = De(Gf());
  var cb = De(rn());
  var Pa = {};
  gf(Pa, { Diff: () => Tt, applyPatch: () => Sh, applyPatches: () => z_, canonicalize: () => Ss, convertChangesToDMP: () => rw, convertChangesToXML: () => nw, createPatch: () => K_, createTwoFilesPatch: () => Eh, diffArrays: () => H_, diffChars: () => O_, diffCss: () => P_, diffJson: () => V_, diffLines: () => Aa, diffSentences: () => R_, diffTrimmedLines: () => B_, diffWords: () => N_, diffWordsWithSpace: () => yh, formatPatch: () => Os, merge: () => X_, parsePatch: () => Cs, reversePatch: () => kh, structuredPatch: () => ks });
  function Tt() {
  }
  Tt.prototype = { diff: function(e, i) {
    var r, n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}, s = n.callback;
    typeof n == "function" && (s = n, n = {});
    var o = this;
    function a(k) {
      return k = o.postProcess(k, n), s ? (setTimeout(function() {
        s(k);
      }, 0), true) : k;
    }
    e = this.castInput(e, n), i = this.castInput(i, n), e = this.removeEmpty(this.tokenize(e, n)), i = this.removeEmpty(this.tokenize(i, n));
    var l = i.length, c = e.length, u = 1, f = l + c;
    n.maxEditLength != null && (f = Math.min(f, n.maxEditLength));
    var d = (r = n.timeout) !== null && r !== undefined ? r : 1 / 0, g = Date.now() + d, m = [{ oldPos: -1, lastComponent: undefined }], v = this.extractCommon(m[0], i, e, 0, n);
    if (m[0].oldPos + 1 >= c && v + 1 >= l)
      return a(ih(o, m[0].lastComponent, i, e, o.useLongestToken));
    var b = -1 / 0, _ = 1 / 0;
    function S() {
      for (var k = Math.max(b, -u);k <= Math.min(_, u); k += 2) {
        var E = undefined, R = m[k - 1], T = m[k + 1];
        R && (m[k - 1] = undefined);
        var A = false;
        if (T) {
          var C = T.oldPos - k;
          A = T && 0 <= C && C < l;
        }
        var L = R && R.oldPos + 1 < c;
        if (!A && !L) {
          m[k] = undefined;
          continue;
        }
        if (!L || A && R.oldPos < T.oldPos ? E = o.addToPath(T, true, false, 0, n) : E = o.addToPath(R, false, true, 1, n), v = o.extractCommon(E, i, e, k, n), E.oldPos + 1 >= c && v + 1 >= l)
          return a(ih(o, E.lastComponent, i, e, o.useLongestToken));
        m[k] = E, E.oldPos + 1 >= c && (_ = Math.min(_, k - 1)), v + 1 >= l && (b = Math.max(b, k + 1));
      }
      u++;
    }
    if (s)
      (function k() {
        setTimeout(function() {
          if (u > f || Date.now() > g)
            return s();
          S() || k();
        }, 0);
      })();
    else
      for (;u <= f && Date.now() <= g; ) {
        var O = S();
        if (O)
          return O;
      }
  }, addToPath: function(e, i, r, n, s) {
    var o = e.lastComponent;
    return o && !s.oneChangePerToken && o.added === i && o.removed === r ? { oldPos: e.oldPos + n, lastComponent: { count: o.count + 1, added: i, removed: r, previousComponent: o.previousComponent } } : { oldPos: e.oldPos + n, lastComponent: { count: 1, added: i, removed: r, previousComponent: o } };
  }, extractCommon: function(e, i, r, n, s) {
    for (var o = i.length, a = r.length, l = e.oldPos, c = l - n, u = 0;c + 1 < o && l + 1 < a && this.equals(r[l + 1], i[c + 1], s); )
      c++, l++, u++, s.oneChangePerToken && (e.lastComponent = { count: 1, previousComponent: e.lastComponent, added: false, removed: false });
    return u && !s.oneChangePerToken && (e.lastComponent = { count: u, previousComponent: e.lastComponent, added: false, removed: false }), e.oldPos = l, c;
  }, equals: function(e, i, r) {
    return r.comparator ? r.comparator(e, i) : e === i || r.ignoreCase && e.toLowerCase() === i.toLowerCase();
  }, removeEmpty: function(e) {
    for (var i = [], r = 0;r < e.length; r++)
      e[r] && i.push(e[r]);
    return i;
  }, castInput: function(e) {
    return e;
  }, tokenize: function(e) {
    return Array.from(e);
  }, join: function(e) {
    return e.join("");
  }, postProcess: function(e) {
    return e;
  } };
  function ih(t, e, i, r, n) {
    for (var s = [], o;e; )
      s.push(e), o = e.previousComponent, delete e.previousComponent, e = o;
    s.reverse();
    for (var a = 0, l = s.length, c = 0, u = 0;a < l; a++) {
      var f = s[a];
      if (f.removed)
        f.value = t.join(r.slice(u, u + f.count)), u += f.count;
      else {
        if (!f.added && n) {
          var d = i.slice(c, c + f.count);
          d = d.map(function(g, m) {
            var v = r[u + m];
            return v.length > g.length ? v : g;
          }), f.value = t.join(d);
        } else
          f.value = t.join(i.slice(c, c + f.count));
        c += f.count, f.added || (u += f.count);
      }
    }
    return s;
  }
  var k_ = new Tt;
  function O_(t, e, i) {
    return k_.diff(t, e, i);
  }
  function rh(t, e) {
    var i;
    for (i = 0;i < t.length && i < e.length; i++)
      if (t[i] != e[i])
        return t.slice(0, i);
    return t.slice(0, i);
  }
  function nh(t, e) {
    var i;
    if (!t || !e || t[t.length - 1] != e[e.length - 1])
      return "";
    for (i = 0;i < t.length && i < e.length; i++)
      if (t[t.length - (i + 1)] != e[e.length - (i + 1)])
        return t.slice(-i);
    return t.slice(-i);
  }
  function Ca(t, e, i) {
    if (t.slice(0, e.length) != e)
      throw Error("string ".concat(JSON.stringify(t), " doesn't start with prefix ").concat(JSON.stringify(e), "; this is a bug"));
    return i + t.slice(e.length);
  }
  function Ta(t, e, i) {
    if (!e)
      return t + i;
    if (t.slice(-e.length) != e)
      throw Error("string ".concat(JSON.stringify(t), " doesn't end with suffix ").concat(JSON.stringify(e), "; this is a bug"));
    return t.slice(0, -e.length) + i;
  }
  function nn(t, e) {
    return Ca(t, e, "");
  }
  function _s(t, e) {
    return Ta(t, e, "");
  }
  function sh(t, e) {
    return e.slice(0, C_(t, e));
  }
  function C_(t, e) {
    var i = 0;
    t.length > e.length && (i = t.length - e.length);
    var r = e.length;
    t.length < e.length && (r = t.length);
    var n = Array(r), s = 0;
    n[0] = 0;
    for (var o = 1;o < r; o++) {
      for (e[o] == e[s] ? n[o] = n[s] : n[o] = s;s > 0 && e[o] != e[s]; )
        s = n[s];
      e[o] == e[s] && s++;
    }
    s = 0;
    for (var a = i;a < t.length; a++) {
      for (;s > 0 && t[a] != e[s]; )
        s = n[s];
      t[a] == e[s] && s++;
    }
    return s;
  }
  function T_(t) {
    return t.includes(`\r
`) && !t.startsWith(`
`) && !t.match(/[^\r]\n/);
  }
  function A_(t) {
    return !t.includes(`\r
`) && t.includes(`
`);
  }
  var xs = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}";
  var I_ = new RegExp("[".concat(xs, "]+|\\s+|[^").concat(xs, "]"), "ug");
  var sn = new Tt;
  sn.equals = function(t, e, i) {
    return i.ignoreCase && (t = t.toLowerCase(), e = e.toLowerCase()), t.trim() === e.trim();
  };
  sn.tokenize = function(t) {
    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, i;
    if (e.intlSegmenter) {
      if (e.intlSegmenter.resolvedOptions().granularity != "word")
        throw new Error('The segmenter passed must have a granularity of "word"');
      i = Array.from(e.intlSegmenter.segment(t), function(s) {
        return s.segment;
      });
    } else
      i = t.match(I_) || [];
    var r = [], n = null;
    return i.forEach(function(s) {
      /\s/.test(s) ? n == null ? r.push(s) : r.push(r.pop() + s) : /\s/.test(n) ? r[r.length - 1] == n ? r.push(r.pop() + s) : r.push(n + s) : r.push(s), n = s;
    }), r;
  };
  sn.join = function(t) {
    return t.map(function(e, i) {
      return i == 0 ? e : e.replace(/^\s+/, "");
    }).join("");
  };
  sn.postProcess = function(t, e) {
    if (!t || e.oneChangePerToken)
      return t;
    var i = null, r = null, n = null;
    return t.forEach(function(s) {
      s.added ? r = s : s.removed ? n = s : ((r || n) && oh(i, n, r, s), i = s, r = null, n = null);
    }), (r || n) && oh(i, n, r, null), t;
  };
  function N_(t, e, i) {
    return (i == null ? undefined : i.ignoreWhitespace) != null && !i.ignoreWhitespace ? yh(t, e, i) : sn.diff(t, e, i);
  }
  function oh(t, e, i, r) {
    if (e && i) {
      var n = e.value.match(/^\s*/)[0], s = e.value.match(/\s*$/)[0], o = i.value.match(/^\s*/)[0], a = i.value.match(/\s*$/)[0];
      if (t) {
        var l = rh(n, o);
        t.value = Ta(t.value, o, l), e.value = nn(e.value, l), i.value = nn(i.value, l);
      }
      if (r) {
        var c = nh(s, a);
        r.value = Ca(r.value, a, c), e.value = _s(e.value, c), i.value = _s(i.value, c);
      }
    } else if (i)
      t && (i.value = i.value.replace(/^\s*/, "")), r && (r.value = r.value.replace(/^\s*/, ""));
    else if (t && r) {
      var u = r.value.match(/^\s*/)[0], f = e.value.match(/^\s*/)[0], d = e.value.match(/\s*$/)[0], g = rh(u, f);
      e.value = nn(e.value, g);
      var m = nh(nn(u, g), d);
      e.value = _s(e.value, m), r.value = Ca(r.value, u, m), t.value = Ta(t.value, u, u.slice(0, u.length - m.length));
    } else if (r) {
      var v = r.value.match(/^\s*/)[0], b = e.value.match(/\s*$/)[0], _ = sh(b, v);
      e.value = _s(e.value, _);
    } else if (t) {
      var S = t.value.match(/\s*$/)[0], O = e.value.match(/^\s*/)[0], k = sh(S, O);
      e.value = nn(e.value, k);
    }
  }
  var vh = new Tt;
  vh.tokenize = function(t) {
    var e = new RegExp("(\\r?\\n)|[".concat(xs, "]+|[^\\S\\n\\r]+|[^").concat(xs, "]"), "ug");
    return t.match(e) || [];
  };
  function yh(t, e, i) {
    return vh.diff(t, e, i);
  }
  function L_(t, e) {
    if (typeof t == "function")
      e.callback = t;
    else if (t)
      for (var i in t)
        t.hasOwnProperty(i) && (e[i] = t[i]);
    return e;
  }
  var on = new Tt;
  on.tokenize = function(t, e) {
    e.stripTrailingCr && (t = t.replace(/\r\n/g, `
`));
    var i = [], r = t.split(/(\n|\r\n)/);
    r[r.length - 1] || r.pop();
    for (var n = 0;n < r.length; n++) {
      var s = r[n];
      n % 2 && !e.newlineIsToken ? i[i.length - 1] += s : i.push(s);
    }
    return i;
  };
  on.equals = function(t, e, i) {
    return i.ignoreWhitespace ? ((!i.newlineIsToken || !t.includes(`
`)) && (t = t.trim()), (!i.newlineIsToken || !e.includes(`
`)) && (e = e.trim())) : i.ignoreNewlineAtEof && !i.newlineIsToken && (t.endsWith(`
`) && (t = t.slice(0, -1)), e.endsWith(`
`) && (e = e.slice(0, -1))), Tt.prototype.equals.call(this, t, e, i);
  };
  function Aa(t, e, i) {
    return on.diff(t, e, i);
  }
  function B_(t, e, i) {
    var r = L_(i, { ignoreWhitespace: true });
    return on.diff(t, e, r);
  }
  var bh = new Tt;
  bh.tokenize = function(t) {
    return t.split(/(\S.+?[.!?])(?=\s+|$)/);
  };
  function R_(t, e, i) {
    return bh.diff(t, e, i);
  }
  var _h = new Tt;
  _h.tokenize = function(t) {
    return t.split(/([{}:;,]|\s+)/);
  };
  function P_(t, e, i) {
    return _h.diff(t, e, i);
  }
  function ah(t, e) {
    var i = Object.keys(t);
    if (Object.getOwnPropertySymbols) {
      var r = Object.getOwnPropertySymbols(t);
      e && (r = r.filter(function(n) {
        return Object.getOwnPropertyDescriptor(t, n).enumerable;
      })), i.push.apply(i, r);
    }
    return i;
  }
  function pt(t) {
    for (var e = 1;e < arguments.length; e++) {
      var i = arguments[e] != null ? arguments[e] : {};
      e % 2 ? ah(Object(i), true).forEach(function(r) {
        F_(t, r, i[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : ah(Object(i)).forEach(function(r) {
        Object.defineProperty(t, r, Object.getOwnPropertyDescriptor(i, r));
      });
    }
    return t;
  }
  function M_(t, e) {
    if (typeof t != "object" || !t)
      return t;
    var i = t[Symbol.toPrimitive];
    if (i !== undefined) {
      var r = i.call(t, e || "default");
      if (typeof r != "object")
        return r;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (e === "string" ? String : Number)(t);
  }
  function q_(t) {
    var e = M_(t, "string");
    return typeof e == "symbol" ? e : e + "";
  }
  function Ia(t) {
    "@babel/helpers - typeof";
    return Ia = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
      return typeof e;
    } : function(e) {
      return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    }, Ia(t);
  }
  function F_(t, e, i) {
    return e = q_(e), e in t ? Object.defineProperty(t, e, { value: i, enumerable: true, configurable: true, writable: true }) : t[e] = i, t;
  }
  function oi(t) {
    return D_(t) || j_(t) || U_(t) || $_();
  }
  function D_(t) {
    if (Array.isArray(t))
      return Na(t);
  }
  function j_(t) {
    if (typeof Symbol != "undefined" && t[Symbol.iterator] != null || t["@@iterator"] != null)
      return Array.from(t);
  }
  function U_(t, e) {
    if (t) {
      if (typeof t == "string")
        return Na(t, e);
      var i = Object.prototype.toString.call(t).slice(8, -1);
      if (i === "Object" && t.constructor && (i = t.constructor.name), i === "Map" || i === "Set")
        return Array.from(t);
      if (i === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))
        return Na(t, e);
    }
  }
  function Na(t, e) {
    (e == null || e > t.length) && (e = t.length);
    for (var i = 0, r = new Array(e);i < e; i++)
      r[i] = t[i];
    return r;
  }
  function $_() {
    throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var xr = new Tt;
  xr.useLongestToken = true;
  xr.tokenize = on.tokenize;
  xr.castInput = function(t, e) {
    var { undefinedReplacement: i, stringifyReplacer: r } = e, n = r === undefined ? function(s, o) {
      return typeof o == "undefined" ? i : o;
    } : r;
    return typeof t == "string" ? t : JSON.stringify(Ss(t, null, null, n), n, "  ");
  };
  xr.equals = function(t, e, i) {
    return Tt.prototype.equals.call(xr, t.replace(/,([\r\n])/g, "$1"), e.replace(/,([\r\n])/g, "$1"), i);
  };
  function V_(t, e, i) {
    return xr.diff(t, e, i);
  }
  function Ss(t, e, i, r, n) {
    e = e || [], i = i || [], r && (t = r(n, t));
    var s;
    for (s = 0;s < e.length; s += 1)
      if (e[s] === t)
        return i[s];
    var o;
    if (Object.prototype.toString.call(t) === "[object Array]") {
      for (e.push(t), o = new Array(t.length), i.push(o), s = 0;s < t.length; s += 1)
        o[s] = Ss(t[s], e, i, r, n);
      return e.pop(), i.pop(), o;
    }
    if (t && t.toJSON && (t = t.toJSON()), Ia(t) === "object" && t !== null) {
      e.push(t), o = {}, i.push(o);
      var a = [], l;
      for (l in t)
        Object.prototype.hasOwnProperty.call(t, l) && a.push(l);
      for (a.sort(), s = 0;s < a.length; s += 1)
        l = a[s], o[l] = Ss(t[l], e, i, r, l);
      e.pop(), i.pop();
    } else
      o = t;
    return o;
  }
  var Es = new Tt;
  Es.tokenize = function(t) {
    return t.slice();
  };
  Es.join = Es.removeEmpty = function(t) {
    return t;
  };
  function H_(t, e, i) {
    return Es.diff(t, e, i);
  }
  function wh(t) {
    return Array.isArray(t) ? t.map(wh) : pt(pt({}, t), {}, { hunks: t.hunks.map(function(e) {
      return pt(pt({}, e), {}, { lines: e.lines.map(function(i, r) {
        var n;
        return i.startsWith("\\") || i.endsWith("\r") || (n = e.lines[r + 1]) !== null && n !== undefined && n.startsWith("\\") ? i : i + "\r";
      }) });
    }) });
  }
  function xh(t) {
    return Array.isArray(t) ? t.map(xh) : pt(pt({}, t), {}, { hunks: t.hunks.map(function(e) {
      return pt(pt({}, e), {}, { lines: e.lines.map(function(i) {
        return i.endsWith("\r") ? i.substring(0, i.length - 1) : i;
      }) });
    }) });
  }
  function G_(t) {
    return Array.isArray(t) || (t = [t]), !t.some(function(e) {
      return e.hunks.some(function(i) {
        return i.lines.some(function(r) {
          return !r.startsWith("\\") && r.endsWith("\r");
        });
      });
    });
  }
  function Y_(t) {
    return Array.isArray(t) || (t = [t]), t.some(function(e) {
      return e.hunks.some(function(i) {
        return i.lines.some(function(r) {
          return r.endsWith("\r");
        });
      });
    }) && t.every(function(e) {
      return e.hunks.every(function(i) {
        return i.lines.every(function(r, n) {
          var s;
          return r.startsWith("\\") || r.endsWith("\r") || ((s = i.lines[n + 1]) === null || s === undefined ? undefined : s.startsWith("\\"));
        });
      });
    });
  }
  function Cs(t) {
    var e = t.split(/\n/), i = [], r = 0;
    function n() {
      var a = {};
      for (i.push(a);r < e.length; ) {
        var l = e[r];
        if (/^(\-\-\-|\+\+\+|@@)\s/.test(l))
          break;
        var c = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(l);
        c && (a.index = c[1]), r++;
      }
      for (s(a), s(a), a.hunks = [];r < e.length; ) {
        var u = e[r];
        if (/^(Index:\s|diff\s|\-\-\-\s|\+\+\+\s|===================================================================)/.test(u))
          break;
        if (/^@@/.test(u))
          a.hunks.push(o());
        else {
          if (u)
            throw new Error("Unknown line " + (r + 1) + " " + JSON.stringify(u));
          r++;
        }
      }
    }
    function s(a) {
      var l = /^(---|\+\+\+)\s+(.*)\r?$/.exec(e[r]);
      if (l) {
        var c = l[1] === "---" ? "old" : "new", u = l[2].split("\t", 2), f = u[0].replace(/\\\\/g, "\\");
        /^".*"$/.test(f) && (f = f.substr(1, f.length - 2)), a[c + "FileName"] = f, a[c + "Header"] = (u[1] || "").trim(), r++;
      }
    }
    function o() {
      var a = r, l = e[r++], c = l.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/), u = { oldStart: +c[1], oldLines: typeof c[2] == "undefined" ? 1 : +c[2], newStart: +c[3], newLines: typeof c[4] == "undefined" ? 1 : +c[4], lines: [] };
      u.oldLines === 0 && (u.oldStart += 1), u.newLines === 0 && (u.newStart += 1);
      for (var f = 0, d = 0;r < e.length && (d < u.oldLines || f < u.newLines || (g = e[r]) !== null && g !== undefined && g.startsWith("\\")); r++) {
        var g, m = e[r].length == 0 && r != e.length - 1 ? " " : e[r][0];
        if (m === "+" || m === "-" || m === " " || m === "\\")
          u.lines.push(e[r]), m === "+" ? f++ : m === "-" ? d++ : m === " " && (f++, d++);
        else
          throw new Error("Hunk at line ".concat(a + 1, " contained invalid line ").concat(e[r]));
      }
      if (!f && u.newLines === 1 && (u.newLines = 0), !d && u.oldLines === 1 && (u.oldLines = 0), f !== u.newLines)
        throw new Error("Added line count did not match for hunk at line " + (a + 1));
      if (d !== u.oldLines)
        throw new Error("Removed line count did not match for hunk at line " + (a + 1));
      return u;
    }
    for (;r < e.length; )
      n();
    return i;
  }
  function W_(t, e, i) {
    var r = true, n = false, s = false, o = 1;
    return function a() {
      if (r && !s) {
        if (n ? o++ : r = false, t + o <= i)
          return t + o;
        s = true;
      }
      if (!n)
        return s || (r = true), e <= t - o ? t - o++ : (n = true, a());
    };
  }
  function Sh(t, e) {
    var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (typeof e == "string" && (e = Cs(e)), Array.isArray(e)) {
      if (e.length > 1)
        throw new Error("applyPatch only works with a single input.");
      e = e[0];
    }
    (i.autoConvertLineEndings || i.autoConvertLineEndings == null) && (T_(t) && G_(e) ? e = wh(e) : A_(t) && Y_(e) && (e = xh(e)));
    var r = t.split(`
`), n = e.hunks, s = i.compareLine || function(P, U, F, H) {
      return U === H;
    }, o = i.fuzzFactor || 0, a = 0;
    if (o < 0 || !Number.isInteger(o))
      throw new Error("fuzzFactor must be a non-negative integer");
    if (!n.length)
      return t;
    for (var l = "", c = false, u = false, f = 0;f < n[n.length - 1].lines.length; f++) {
      var d = n[n.length - 1].lines[f];
      d[0] == "\\" && (l[0] == "+" ? c = true : l[0] == "-" && (u = true)), l = d;
    }
    if (c) {
      if (u) {
        if (!o && r[r.length - 1] == "")
          return false;
      } else if (r[r.length - 1] == "")
        r.pop();
      else if (!o)
        return false;
    } else if (u) {
      if (r[r.length - 1] != "")
        r.push("");
      else if (!o)
        return false;
    }
    function g(P, U, F) {
      for (var H = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0, j = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true, V = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [], W = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0, Q = 0, Y = false;H < P.length; H++) {
        var de = P[H], ae = de.length > 0 ? de[0] : " ", ne = de.length > 0 ? de.substr(1) : de;
        if (ae === "-")
          if (s(U + 1, r[U], ae, ne))
            U++, Q = 0;
          else
            return !F || r[U] == null ? null : (V[W] = r[U], g(P, U + 1, F - 1, H, false, V, W + 1));
        if (ae === "+") {
          if (!j)
            return null;
          V[W] = ne, W++, Q = 0, Y = true;
        }
        if (ae === " ")
          if (Q++, V[W] = r[U], s(U + 1, r[U], ae, ne))
            W++, j = true, Y = false, U++;
          else
            return Y || !F ? null : r[U] && (g(P, U + 1, F - 1, H + 1, false, V, W + 1) || g(P, U + 1, F - 1, H, false, V, W + 1)) || g(P, U, F - 1, H + 1, false, V, W);
      }
      return W -= Q, U -= Q, V.length = W, { patchedLines: V, oldLineLastI: U - 1 };
    }
    for (var m = [], v = 0, b = 0;b < n.length; b++) {
      for (var _ = n[b], S = undefined, O = r.length - _.oldLines + o, k = undefined, E = 0;E <= o; E++) {
        k = _.oldStart + v - 1;
        for (var R = W_(k, a, O);k !== undefined && (S = g(_.lines, k, E), !S); k = R())
          ;
        if (S)
          break;
      }
      if (!S)
        return false;
      for (var T = a;T < k; T++)
        m.push(r[T]);
      for (var A = 0;A < S.patchedLines.length; A++) {
        var C = S.patchedLines[A];
        m.push(C);
      }
      a = S.oldLineLastI + 1, v = k + 1 - _.oldStart;
    }
    for (var L = a;L < r.length; L++)
      m.push(r[L]);
    return m.join(`
`);
  }
  function z_(t, e) {
    typeof t == "string" && (t = Cs(t));
    var i = 0;
    function r() {
      var n = t[i++];
      if (!n)
        return e.complete();
      e.loadFile(n, function(s, o) {
        if (s)
          return e.complete(s);
        var a = Sh(o, n, e);
        e.patched(n, a, function(l) {
          if (l)
            return e.complete(l);
          r();
        });
      });
    }
    r();
  }
  function ks(t, e, i, r, n, s, o) {
    if (o || (o = {}), typeof o == "function" && (o = { callback: o }), typeof o.context == "undefined" && (o.context = 4), o.newlineIsToken)
      throw new Error("newlineIsToken may not be used with patch-generation functions, only with diffing functions");
    if (o.callback) {
      var a = o, l = a.callback;
      Aa(i, r, pt(pt({}, o), {}, { callback: function(f) {
        var d = c(f);
        l(d);
      } }));
    } else
      return c(Aa(i, r, o));
    function c(u) {
      if (!u)
        return;
      u.push({ value: "", lines: [] });
      function f(A) {
        return A.map(function(C) {
          return " " + C;
        });
      }
      for (var d = [], g = 0, m = 0, v = [], b = 1, _ = 1, S = function() {
        var C = u[O], L = C.lines || J_(C.value);
        if (C.lines = L, C.added || C.removed) {
          var P;
          if (!g) {
            var U = u[O - 1];
            g = b, m = _, U && (v = o.context > 0 ? f(U.lines.slice(-o.context)) : [], g -= v.length, m -= v.length);
          }
          (P = v).push.apply(P, oi(L.map(function(W) {
            return (C.added ? "+" : "-") + W;
          }))), C.added ? _ += L.length : b += L.length;
        } else {
          if (g)
            if (L.length <= o.context * 2 && O < u.length - 2) {
              var F;
              (F = v).push.apply(F, oi(f(L)));
            } else {
              var H, j = Math.min(L.length, o.context);
              (H = v).push.apply(H, oi(f(L.slice(0, j))));
              var V = { oldStart: g, oldLines: b - g + j, newStart: m, newLines: _ - m + j, lines: v };
              d.push(V), g = 0, m = 0, v = [];
            }
          b += L.length, _ += L.length;
        }
      }, O = 0;O < u.length; O++)
        S();
      for (var k = 0, E = d;k < E.length; k++)
        for (var R = E[k], T = 0;T < R.lines.length; T++)
          R.lines[T].endsWith(`
`) ? R.lines[T] = R.lines[T].slice(0, -1) : (R.lines.splice(T + 1, 0, "\\ No newline at end of file"), T++);
      return { oldFileName: t, newFileName: e, oldHeader: n, newHeader: s, hunks: d };
    }
  }
  function Os(t) {
    if (Array.isArray(t))
      return t.map(Os).join(`
`);
    var e = [];
    t.oldFileName == t.newFileName && e.push("Index: " + t.oldFileName), e.push("==================================================================="), e.push("--- " + t.oldFileName + (typeof t.oldHeader == "undefined" ? "" : "\t" + t.oldHeader)), e.push("+++ " + t.newFileName + (typeof t.newHeader == "undefined" ? "" : "\t" + t.newHeader));
    for (var i = 0;i < t.hunks.length; i++) {
      var r = t.hunks[i];
      r.oldLines === 0 && (r.oldStart -= 1), r.newLines === 0 && (r.newStart -= 1), e.push("@@ -" + r.oldStart + "," + r.oldLines + " +" + r.newStart + "," + r.newLines + " @@"), e.push.apply(e, r.lines);
    }
    return e.join(`
`) + `
`;
  }
  function Eh(t, e, i, r, n, s, o) {
    var a;
    if (typeof o == "function" && (o = { callback: o }), (a = o) !== null && a !== undefined && a.callback) {
      var c = o, u = c.callback;
      ks(t, e, i, r, n, s, pt(pt({}, o), {}, { callback: function(d) {
        d ? u(Os(d)) : u();
      } }));
    } else {
      var l = ks(t, e, i, r, n, s, o);
      return l ? Os(l) : undefined;
    }
  }
  function K_(t, e, i, r, n, s) {
    return Eh(t, t, e, i, r, n, s);
  }
  function J_(t) {
    var e = t.endsWith(`
`), i = t.split(`
`).map(function(r) {
      return r + `
`;
    });
    return e ? i.pop() : i.push(i.pop().slice(0, -1)), i;
  }
  function Z_(t, e) {
    return t.length !== e.length ? false : La(t, e);
  }
  function La(t, e) {
    if (e.length > t.length)
      return false;
    for (var i = 0;i < e.length; i++)
      if (e[i] !== t[i])
        return false;
    return true;
  }
  function Q_(t) {
    var e = Ba(t.lines), i = e.oldLines, r = e.newLines;
    i !== undefined ? t.oldLines = i : delete t.oldLines, r !== undefined ? t.newLines = r : delete t.newLines;
  }
  function X_(t, e, i) {
    t = lh(t, i), e = lh(e, i);
    var r = {};
    (t.index || e.index) && (r.index = t.index || e.index), (t.newFileName || e.newFileName) && (ch(t) ? ch(e) ? (r.oldFileName = ws(r, t.oldFileName, e.oldFileName), r.newFileName = ws(r, t.newFileName, e.newFileName), r.oldHeader = ws(r, t.oldHeader, e.oldHeader), r.newHeader = ws(r, t.newHeader, e.newHeader)) : (r.oldFileName = t.oldFileName, r.newFileName = t.newFileName, r.oldHeader = t.oldHeader, r.newHeader = t.newHeader) : (r.oldFileName = e.oldFileName || t.oldFileName, r.newFileName = e.newFileName || t.newFileName, r.oldHeader = e.oldHeader || t.oldHeader, r.newHeader = e.newHeader || t.newHeader)), r.hunks = [];
    for (var n = 0, s = 0, o = 0, a = 0;n < t.hunks.length || s < e.hunks.length; ) {
      var l = t.hunks[n] || { oldStart: 1 / 0 }, c = e.hunks[s] || { oldStart: 1 / 0 };
      if (uh(l, c))
        r.hunks.push(fh(l, o)), n++, a += l.newLines - l.oldLines;
      else if (uh(c, l))
        r.hunks.push(fh(c, a)), s++, o += c.newLines - c.oldLines;
      else {
        var u = { oldStart: Math.min(l.oldStart, c.oldStart), oldLines: 0, newStart: Math.min(l.newStart + o, c.oldStart + a), newLines: 0, lines: [] };
        ew(u, l.oldStart, l.lines, c.oldStart, c.lines), s++, n++, r.hunks.push(u);
      }
    }
    return r;
  }
  function lh(t, e) {
    if (typeof t == "string") {
      if (/^@@/m.test(t) || /^Index:/m.test(t))
        return Cs(t)[0];
      if (!e)
        throw new Error("Must provide a base reference or pass in a patch");
      return ks(undefined, undefined, e, t);
    }
    return t;
  }
  function ch(t) {
    return t.newFileName && t.newFileName !== t.oldFileName;
  }
  function ws(t, e, i) {
    return e === i ? e : (t.conflict = true, { mine: e, theirs: i });
  }
  function uh(t, e) {
    return t.oldStart < e.oldStart && t.oldStart + t.oldLines < e.oldStart;
  }
  function fh(t, e) {
    return { oldStart: t.oldStart, oldLines: t.oldLines, newStart: t.newStart + e, newLines: t.newLines, lines: t.lines };
  }
  function ew(t, e, i, r, n) {
    var s = { offset: e, lines: i, index: 0 }, o = { offset: r, lines: n, index: 0 };
    for (ph(t, s, o), ph(t, o, s);s.index < s.lines.length && o.index < o.lines.length; ) {
      var a = s.lines[s.index], l = o.lines[o.index];
      if ((a[0] === "-" || a[0] === "+") && (l[0] === "-" || l[0] === "+"))
        tw(t, s, o);
      else if (a[0] === "+" && l[0] === " ") {
        var c;
        (c = t.lines).push.apply(c, oi(Yi(s)));
      } else if (l[0] === "+" && a[0] === " ") {
        var u;
        (u = t.lines).push.apply(u, oi(Yi(o)));
      } else
        a[0] === "-" && l[0] === " " ? hh(t, s, o) : l[0] === "-" && a[0] === " " ? hh(t, o, s, true) : a === l ? (t.lines.push(a), s.index++, o.index++) : Ra(t, Yi(s), Yi(o));
    }
    dh(t, s), dh(t, o), Q_(t);
  }
  function tw(t, e, i) {
    var r = Yi(e), n = Yi(i);
    if (mh(r) && mh(n)) {
      if (La(r, n) && gh(i, r, r.length - n.length)) {
        var s;
        (s = t.lines).push.apply(s, oi(r));
        return;
      } else if (La(n, r) && gh(e, n, n.length - r.length)) {
        var o;
        (o = t.lines).push.apply(o, oi(n));
        return;
      }
    } else if (Z_(r, n)) {
      var a;
      (a = t.lines).push.apply(a, oi(r));
      return;
    }
    Ra(t, r, n);
  }
  function hh(t, e, i, r) {
    var n = Yi(e), s = iw(i, n);
    if (s.merged) {
      var o;
      (o = t.lines).push.apply(o, oi(s.merged));
    } else
      Ra(t, r ? s : n, r ? n : s);
  }
  function Ra(t, e, i) {
    t.conflict = true, t.lines.push({ conflict: true, mine: e, theirs: i });
  }
  function ph(t, e, i) {
    for (;e.offset < i.offset && e.index < e.lines.length; ) {
      var r = e.lines[e.index++];
      t.lines.push(r), e.offset++;
    }
  }
  function dh(t, e) {
    for (;e.index < e.lines.length; ) {
      var i = e.lines[e.index++];
      t.lines.push(i);
    }
  }
  function Yi(t) {
    for (var e = [], i = t.lines[t.index][0];t.index < t.lines.length; ) {
      var r = t.lines[t.index];
      if (i === "-" && r[0] === "+" && (i = "+"), i === r[0])
        e.push(r), t.index++;
      else
        break;
    }
    return e;
  }
  function iw(t, e) {
    for (var i = [], r = [], n = 0, s = false, o = false;n < e.length && t.index < t.lines.length; ) {
      var a = t.lines[t.index], l = e[n];
      if (l[0] === "+")
        break;
      if (s = s || a[0] !== " ", r.push(l), n++, a[0] === "+")
        for (o = true;a[0] === "+"; )
          i.push(a), a = t.lines[++t.index];
      l.substr(1) === a.substr(1) ? (i.push(a), t.index++) : o = true;
    }
    if ((e[n] || "")[0] === "+" && s && (o = true), o)
      return i;
    for (;n < e.length; )
      r.push(e[n++]);
    return { merged: r, changes: i };
  }
  function mh(t) {
    return t.reduce(function(e, i) {
      return e && i[0] === "-";
    }, true);
  }
  function gh(t, e, i) {
    for (var r = 0;r < i; r++) {
      var n = e[e.length - i + r].substr(1);
      if (t.lines[t.index + r] !== " " + n)
        return false;
    }
    return t.index += i, true;
  }
  function Ba(t) {
    var e = 0, i = 0;
    return t.forEach(function(r) {
      if (typeof r != "string") {
        var n = Ba(r.mine), s = Ba(r.theirs);
        e !== undefined && (n.oldLines === s.oldLines ? e += n.oldLines : e = undefined), i !== undefined && (n.newLines === s.newLines ? i += n.newLines : i = undefined);
      } else
        i !== undefined && (r[0] === "+" || r[0] === " ") && i++, e !== undefined && (r[0] === "-" || r[0] === " ") && e++;
    }), { oldLines: e, newLines: i };
  }
  function kh(t) {
    return Array.isArray(t) ? t.map(kh).reverse() : pt(pt({}, t), {}, { oldFileName: t.newFileName, oldHeader: t.newHeader, newFileName: t.oldFileName, newHeader: t.oldHeader, hunks: t.hunks.map(function(e) {
      return { oldLines: e.newLines, oldStart: e.newStart, newLines: e.oldLines, newStart: e.oldStart, lines: e.lines.map(function(i) {
        return i.startsWith("-") ? "+".concat(i.slice(1)) : i.startsWith("+") ? "-".concat(i.slice(1)) : i;
      }) };
    }) });
  }
  function rw(t) {
    for (var e = [], i, r, n = 0;n < t.length; n++)
      i = t[n], i.added ? r = 1 : i.removed ? r = -1 : r = 0, e.push([r, i.value]);
    return e;
  }
  function nw(t) {
    for (var e = [], i = 0;i < t.length; i++) {
      var r = t[i];
      r.added ? e.push("<ins>") : r.removed && e.push("<del>"), e.push(sw(r.value)), r.added ? e.push("</ins>") : r.removed && e.push("</del>");
    }
    return e.join("");
  }
  function sw(t) {
    var e = t;
    return e = e.replace(/&/g, "&amp;"), e = e.replace(/</g, "&lt;"), e = e.replace(/>/g, "&gt;"), e = e.replace(/"/g, "&quot;"), e;
  }
  var ub = De(Ih());
  var yb = De(Lh());
  var bb = De(Hh());
  var fb = De(Zh());
  var hb = De(sp());
  var pb = De(Op());
  var db = De(jp());
  var _b = De(Pd());
  var wb = De(zd());
  var mb = De(Xd());
  var xb = De(Rm());
  var gb = De(jm());
  var vb = De(Tv());
  var DA = De(Lv(), 1);
  var tf = De(Hu(), 1);
  var rf = De(Yu(), 1);
  var Iy = De(Xu(), 1);
  var nf = De(Ay(), 1);
  var Ny = Iy.default;
  var oI = lb.default;
  var aI = cb.default;
  var lI = Pa;
  var cI = ub.default;
  var uI = fb.default;
  var fI = ab();
  var hI = fI;
  var pI = hb.default;
  var dI = pb.default;
  var mI = db.default;
  var gI = mb.default;
  var vI = gb.default;
  var yI = vb.default;
  var bI = Ny;
  var _I = nf.default;
  var wI = tf.default;
  var xI = rf.default;
  /*! Bundled license information:
  
  progress/lib/node-progress.js:
    (*!
     * node-progress
     * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
     * MIT Licensed
     *)
  */
});

// node_modules/playwright-core/lib/utilsBundle.js
var require_utilsBundle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.minimatch = exports.mime = exports.lockfile = exports.jpegjs = exports.getProxyForUrl = exports.dotenv = exports.diff = exports.debug = exports.colors = exports.SocksProxyAgent = exports.PNG = exports.HttpsProxyAgent = undefined;
  exports.ms = ms;
  exports.open = undefined;
  exports.parseStackTraceLine = parseStackTraceLine;
  exports.yaml = exports.wsServer = exports.wsSender = exports.wsReceiver = exports.ws = exports.progress = exports.program = undefined;
  var _url = _interopRequireDefault(__require("url"));
  var _path = _interopRequireDefault(__require("path"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var colors2 = exports.colors = require_utilsBundleImpl().colors;
  var debug2 = exports.debug = require_utilsBundleImpl().debug;
  var diff2 = exports.diff = require_utilsBundleImpl().diff;
  var dotenv2 = exports.dotenv = require_utilsBundleImpl().dotenv;
  var getProxyForUrl2 = exports.getProxyForUrl = require_utilsBundleImpl().getProxyForUrl;
  var HttpsProxyAgent2 = exports.HttpsProxyAgent = require_utilsBundleImpl().HttpsProxyAgent;
  var jpegjs2 = exports.jpegjs = require_utilsBundleImpl().jpegjs;
  var lockfile2 = exports.lockfile = require_utilsBundleImpl().lockfile;
  var mime2 = exports.mime = require_utilsBundleImpl().mime;
  var minimatch2 = exports.minimatch = require_utilsBundleImpl().minimatch;
  var open2 = exports.open = require_utilsBundleImpl().open;
  var PNG2 = exports.PNG = require_utilsBundleImpl().PNG;
  var program2 = exports.program = require_utilsBundleImpl().program;
  var progress2 = exports.progress = require_utilsBundleImpl().progress;
  var SocksProxyAgent2 = exports.SocksProxyAgent = require_utilsBundleImpl().SocksProxyAgent;
  var yaml2 = exports.yaml = require_utilsBundleImpl().yaml;
  var ws = exports.ws = require_utilsBundleImpl().ws;
  var wsServer2 = exports.wsServer = require_utilsBundleImpl().wsServer;
  var wsReceiver2 = exports.wsReceiver = require_utilsBundleImpl().wsReceiver;
  var wsSender2 = exports.wsSender = require_utilsBundleImpl().wsSender;
  var StackUtils2 = require_utilsBundleImpl().StackUtils;
  var stackUtils = new StackUtils2({
    internals: StackUtils2.nodeInternals()
  });
  function parseStackTraceLine(line) {
    var _frame$file, _frame$file2;
    const frame = stackUtils.parseLine(line);
    if (!frame)
      return null;
    if (!process.env.PWDEBUGIMPL && ((_frame$file = frame.file) !== null && _frame$file !== undefined && _frame$file.startsWith("internal") || (_frame$file2 = frame.file) !== null && _frame$file2 !== undefined && _frame$file2.startsWith("node:")))
      return null;
    if (!frame.file)
      return null;
    const file = frame.file.startsWith("file://") ? _url.default.fileURLToPath(frame.file) : _path.default.resolve(process.cwd(), frame.file);
    return {
      file,
      line: frame.line || 0,
      column: frame.column || 0,
      function: frame.function
    };
  }
  function ms(ms2) {
    if (!isFinite(ms2))
      return "-";
    if (ms2 === 0)
      return "0ms";
    if (ms2 < 1000)
      return ms2.toFixed(0) + "ms";
    const seconds = ms2 / 1000;
    if (seconds < 60)
      return seconds.toFixed(1) + "s";
    const minutes = seconds / 60;
    if (minutes < 60)
      return minutes.toFixed(1) + "m";
    const hours = minutes / 60;
    if (hours < 24)
      return hours.toFixed(1) + "h";
    const days = hours / 24;
    return days.toFixed(1) + "d";
  }
});

// node_modules/playwright-core/lib/utils/sequence.js
var require_sequence = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.findRepeatedSubsequences = findRepeatedSubsequences;
  function findRepeatedSubsequences(s) {
    const n = s.length;
    const result = [];
    let i = 0;
    const arraysEqual = (a1, a2) => {
      if (a1.length !== a2.length)
        return false;
      for (let j = 0;j < a1.length; j++) {
        if (a1[j] !== a2[j])
          return false;
      }
      return true;
    };
    while (i < n) {
      let maxRepeatCount = 1;
      let maxRepeatSubstr = [s[i]];
      let maxRepeatLength = 1;
      for (let p = 1;p <= n - i; p++) {
        const substr = s.slice(i, i + p);
        let k = 1;
        while (i + p * k <= n && arraysEqual(s.slice(i + p * (k - 1), i + p * k), substr))
          k += 1;
        k -= 1;
        if (k > 1 && k * p > maxRepeatCount * maxRepeatLength) {
          maxRepeatCount = k;
          maxRepeatSubstr = substr;
          maxRepeatLength = p;
        }
      }
      result.push({
        sequence: maxRepeatSubstr,
        count: maxRepeatCount
      });
      i += maxRepeatLength * maxRepeatCount;
    }
    return result;
  }
});

// node_modules/playwright-core/lib/utils/stackTrace.js
var require_stackTrace = __commonJS((exports) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/utils";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addInternalStackPrefix = undefined;
  exports.captureLibraryStackText = captureLibraryStackText;
  exports.captureLibraryStackTrace = captureLibraryStackTrace;
  exports.captureRawStack = captureRawStack;
  exports.compressCallLog = compressCallLog;
  exports.formatCallLog = formatCallLog;
  exports.rewriteErrorMessage = rewriteErrorMessage;
  exports.splitErrorMessage = splitErrorMessage;
  exports.stringifyStackFrames = stringifyStackFrames;
  var _path = _interopRequireDefault(__require("path"));
  var _utilsBundle = require_utilsBundle();
  var _sequence = require_sequence();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function rewriteErrorMessage(e, newMessage) {
    var _e$stack;
    const lines = (((_e$stack = e.stack) === null || _e$stack === undefined ? undefined : _e$stack.split(`
`)) || []).filter((l) => l.startsWith("    at "));
    e.message = newMessage;
    const errorTitle = `${e.name}: ${e.message}`;
    if (lines.length)
      e.stack = `${errorTitle}
${lines.join(`
`)}`;
    return e;
  }
  var CORE_DIR = _path.default.resolve(__dirname, "..", "..");
  var internalStackPrefixes = [CORE_DIR];
  var addInternalStackPrefix = (prefix) => internalStackPrefixes.push(prefix);
  exports.addInternalStackPrefix = addInternalStackPrefix;
  function captureRawStack() {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 50;
    const error = new Error;
    const stack = error.stack || "";
    Error.stackTraceLimit = stackTraceLimit;
    return stack.split(`
`);
  }
  function captureLibraryStackTrace() {
    const stack = captureRawStack();
    let parsedFrames = stack.map((line) => {
      const frame = (0, _utilsBundle.parseStackTraceLine)(line);
      if (!frame || !frame.file)
        return null;
      const isPlaywrightLibrary = frame.file.startsWith(CORE_DIR);
      const parsed = {
        frame,
        frameText: line,
        isPlaywrightLibrary
      };
      return parsed;
    }).filter(Boolean);
    let apiName = "";
    for (let i = 0;i < parsedFrames.length - 1; i++) {
      const parsedFrame = parsedFrames[i];
      if (parsedFrame.isPlaywrightLibrary && !parsedFrames[i + 1].isPlaywrightLibrary) {
        apiName = apiName || normalizeAPIName(parsedFrame.frame.function);
        break;
      }
    }
    function normalizeAPIName(name) {
      if (!name)
        return "";
      const match = name.match(/(API|JS|CDP|[A-Z])(.*)/);
      if (!match)
        return name;
      return match[1].toLowerCase() + match[2];
    }
    parsedFrames = parsedFrames.filter((f) => {
      if (process.env.PWDEBUGIMPL)
        return true;
      if (internalStackPrefixes.some((prefix) => f.frame.file.startsWith(prefix)))
        return false;
      return true;
    });
    return {
      frames: parsedFrames.map((p) => p.frame),
      apiName
    };
  }
  function stringifyStackFrames(frames) {
    const stackLines = [];
    for (const frame of frames) {
      if (frame.function)
        stackLines.push(`    at ${frame.function} (${frame.file}:${frame.line}:${frame.column})`);
      else
        stackLines.push(`    at ${frame.file}:${frame.line}:${frame.column}`);
    }
    return stackLines;
  }
  function captureLibraryStackText() {
    const parsed = captureLibraryStackTrace();
    return stringifyStackFrames(parsed.frames).join(`
`);
  }
  function splitErrorMessage(message) {
    const separationIdx = message.indexOf(":");
    return {
      name: separationIdx !== -1 ? message.slice(0, separationIdx) : "",
      message: separationIdx !== -1 && separationIdx + 2 <= message.length ? message.substring(separationIdx + 2) : message
    };
  }
  function formatCallLog(log) {
    if (!log || !log.some((l) => !!l))
      return "";
    return `
Call log:
${_utilsBundle.colors.dim(log.join(`
`))}
`;
  }
  function compressCallLog(log) {
    const lines = [];
    for (const block of (0, _sequence.findRepeatedSubsequences)(log)) {
      for (let i = 0;i < block.sequence.length; i++) {
        const line = block.sequence[i];
        const leadingWhitespace = line.match(/^\s*/);
        const whitespacePrefix = "  " + (leadingWhitespace === null || leadingWhitespace === undefined ? undefined : leadingWhitespace[0]) || "";
        const countPrefix = `${block.count} × `;
        if (block.count > 1 && i === 0)
          lines.push(whitespacePrefix + countPrefix + line.trim());
        else if (block.count > 1)
          lines.push(whitespacePrefix + " ".repeat(countPrefix.length - 2) + "- " + line.trim());
        else
          lines.push(whitespacePrefix + "- " + line.trim());
      }
    }
    return lines;
  }
});

// node_modules/playwright-core/lib/utils/manualPromise.js
var require_manualPromise = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ManualPromise = exports.LongStandingScope = undefined;
  var _stackTrace = require_stackTrace();
  var _Symbol$species;
  var _Symbol$toStringTag;
  _Symbol$species = Symbol.species;
  _Symbol$toStringTag = Symbol.toStringTag;

  class ManualPromise extends Promise {
    constructor() {
      let resolve;
      let reject;
      super((f, r) => {
        resolve = f;
        reject = r;
      });
      this._resolve = undefined;
      this._reject = undefined;
      this._isDone = undefined;
      this._isDone = false;
      this._resolve = resolve;
      this._reject = reject;
    }
    isDone() {
      return this._isDone;
    }
    resolve(t) {
      this._isDone = true;
      this._resolve(t);
    }
    reject(e) {
      this._isDone = true;
      this._reject(e);
    }
    static get [_Symbol$species]() {
      return Promise;
    }
    get [_Symbol$toStringTag]() {
      return "ManualPromise";
    }
  }
  exports.ManualPromise = ManualPromise;

  class LongStandingScope {
    constructor() {
      this._terminateError = undefined;
      this._closeError = undefined;
      this._terminatePromises = new Map;
      this._isClosed = false;
    }
    reject(error) {
      this._isClosed = true;
      this._terminateError = error;
      for (const p of this._terminatePromises.keys())
        p.resolve(error);
    }
    close(error) {
      this._isClosed = true;
      this._closeError = error;
      for (const [p, frames] of this._terminatePromises)
        p.resolve(cloneError(error, frames));
    }
    isClosed() {
      return this._isClosed;
    }
    static async raceMultiple(scopes, promise) {
      return Promise.race(scopes.map((s) => s.race(promise)));
    }
    async race(promise) {
      return this._race(Array.isArray(promise) ? promise : [promise], false);
    }
    async safeRace(promise, defaultValue) {
      return this._race([promise], true, defaultValue);
    }
    async _race(promises, safe, defaultValue) {
      const terminatePromise = new ManualPromise;
      const frames = (0, _stackTrace.captureRawStack)();
      if (this._terminateError)
        terminatePromise.resolve(this._terminateError);
      if (this._closeError)
        terminatePromise.resolve(cloneError(this._closeError, frames));
      this._terminatePromises.set(terminatePromise, frames);
      try {
        return await Promise.race([terminatePromise.then((e) => safe ? defaultValue : Promise.reject(e)), ...promises]);
      } finally {
        this._terminatePromises.delete(terminatePromise);
      }
    }
  }
  exports.LongStandingScope = LongStandingScope;
  function cloneError(error, frames) {
    const clone = new Error;
    clone.name = error.name;
    clone.message = error.message;
    clone.stack = [error.name + ":" + error.message, ...frames].join(`
`);
    return clone;
  }
});

// node_modules/playwright-core/lib/utils/env.js
var require_env = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAsBooleanFromENV = getAsBooleanFromENV;
  exports.getFromENV = getFromENV;
  exports.getPackageManager = getPackageManager;
  exports.getPackageManagerExecCommand = getPackageManagerExecCommand;
  function getFromENV(name) {
    let value = process.env[name];
    value = value === undefined ? process.env[`npm_config_${name.toLowerCase()}`] : value;
    value = value === undefined ? process.env[`npm_package_config_${name.toLowerCase()}`] : value;
    return value;
  }
  function getAsBooleanFromENV(name, defaultValue) {
    const value = getFromENV(name);
    if (value === "false" || value === "0")
      return false;
    if (value)
      return true;
    return !!defaultValue;
  }
  function getPackageManager() {
    const env = process.env.npm_config_user_agent || "";
    if (env.includes("yarn"))
      return "yarn";
    if (env.includes("pnpm"))
      return "pnpm";
    return "npm";
  }
  function getPackageManagerExecCommand() {
    const packageManager = getPackageManager();
    if (packageManager === "yarn")
      return "yarn";
    if (packageManager === "pnpm")
      return "pnpm exec";
    return "npx";
  }
});

// node_modules/playwright-core/lib/utils/debug.js
var require_debug = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.assert = assert;
  exports.debugAssert = debugAssert;
  exports.debugMode = debugMode;
  exports.isUnderTest = isUnderTest;
  exports.setUnderTest = setUnderTest;
  var _env = require_env();
  function assert(value, message) {
    if (!value)
      throw new Error(message || "Assertion error");
  }
  function debugAssert(value, message) {
    if (isUnderTest() && !value)
      throw new Error(message);
  }
  var debugEnv = (0, _env.getFromENV)("PWDEBUG") || "";
  function debugMode() {
    if (debugEnv === "console")
      return "console";
    if (debugEnv === "0" || debugEnv === "false")
      return "";
    return debugEnv ? "inspector" : "";
  }
  var _isUnderTest = !!process.env.PWTEST_UNDER_TEST;
  function setUnderTest() {
    _isUnderTest = true;
  }
  function isUnderTest() {
    return _isUnderTest;
  }
});

// node_modules/playwright-core/lib/utils/time.js
var require_time = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.monotonicTime = monotonicTime;
  var initialTime = process.hrtime();
  function monotonicTime() {
    const [seconds, nanoseconds] = process.hrtime(initialTime);
    return seconds * 1000 + (nanoseconds / 1000 | 0) / 1000;
  }
});

// node_modules/playwright-core/lib/utils/happy-eyeballs.js
var require_happy_eyeballs = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createConnectionAsync = createConnectionAsync;
  exports.createSocket = createSocket;
  exports.createTLSSocket = createTLSSocket;
  exports.httpsHappyEyeballsAgent = exports.httpHappyEyeballsAgent = undefined;
  exports.timingForSocket = timingForSocket;
  var dns = _interopRequireWildcard(__require("dns"));
  var http = _interopRequireWildcard(__require("http"));
  var https = _interopRequireWildcard(__require("https"));
  var net = _interopRequireWildcard(__require("net"));
  var tls = _interopRequireWildcard(__require("tls"));
  var _manualPromise = require_manualPromise();
  var _debug = require_debug();
  var _time = require_time();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var connectionAttemptDelayMs = 300;
  var kDNSLookupAt = Symbol("kDNSLookupAt");
  var kTCPConnectionAt = Symbol("kTCPConnectionAt");

  class HttpHappyEyeballsAgent extends http.Agent {
    createConnection(options, oncreate) {
      if (net.isIP(clientRequestArgsToHostName(options)))
        return net.createConnection(options);
      createConnectionAsync(options, oncreate, false).catch((err) => oncreate === null || oncreate === undefined ? undefined : oncreate(err));
    }
  }

  class HttpsHappyEyeballsAgent extends https.Agent {
    createConnection(options, oncreate) {
      if (net.isIP(clientRequestArgsToHostName(options)))
        return tls.connect(options);
      createConnectionAsync(options, oncreate, true).catch((err) => oncreate === null || oncreate === undefined ? undefined : oncreate(err));
    }
  }
  var httpsHappyEyeballsAgent = exports.httpsHappyEyeballsAgent = new HttpsHappyEyeballsAgent({
    keepAlive: true
  });
  var httpHappyEyeballsAgent = exports.httpHappyEyeballsAgent = new HttpHappyEyeballsAgent({
    keepAlive: true
  });
  async function createSocket(host, port) {
    return new Promise((resolve, reject) => {
      if (net.isIP(host)) {
        const socket = net.createConnection({
          host,
          port
        });
        socket.on("connect", () => resolve(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync({
          host,
          port
        }, (err, socket) => {
          if (err)
            reject(err);
          if (socket)
            resolve(socket);
        }, false).catch((err) => reject(err));
      }
    });
  }
  async function createTLSSocket(options) {
    return new Promise((resolve, reject) => {
      (0, _debug.assert)(options.host, "host is required");
      if (net.isIP(options.host)) {
        const socket = tls.connect(options);
        socket.on("secureConnect", () => resolve(socket));
        socket.on("error", (error) => reject(error));
      } else {
        createConnectionAsync(options, (err, socket) => {
          if (err)
            reject(err);
          if (socket) {
            socket.on("secureConnect", () => resolve(socket));
            socket.on("error", (error) => reject(error));
          }
        }, true).catch((err) => reject(err));
      }
    });
  }
  async function createConnectionAsync(options, oncreate, useTLS) {
    const lookup = options.__testHookLookup || lookupAddresses;
    const hostname = clientRequestArgsToHostName(options);
    const addresses = await lookup(hostname);
    const dnsLookupAt = (0, _time.monotonicTime)();
    const sockets = new Set;
    let firstError;
    let errorCount = 0;
    const handleError = (socket, err) => {
      var _firstError;
      if (!sockets.delete(socket))
        return;
      ++errorCount;
      (_firstError = firstError) !== null && _firstError !== undefined || (firstError = err);
      if (errorCount === addresses.length)
        oncreate === null || oncreate === undefined || oncreate(firstError);
    };
    const connected = new _manualPromise.ManualPromise;
    for (const {
      address
    } of addresses) {
      const socket = useTLS ? tls.connect({
        ...options,
        port: options.port,
        host: address,
        servername: hostname
      }) : net.createConnection({
        ...options,
        port: options.port,
        host: address
      });
      socket[kDNSLookupAt] = dnsLookupAt;
      socket.on("connect", () => {
        socket[kTCPConnectionAt] = (0, _time.monotonicTime)();
        connected.resolve();
        oncreate === null || oncreate === undefined || oncreate(null, socket);
        sockets.delete(socket);
        for (const s of sockets)
          s.destroy();
        sockets.clear();
      });
      socket.on("timeout", () => {
        socket.destroy();
        handleError(socket, new Error("Connection timeout"));
      });
      socket.on("error", (e) => handleError(socket, e));
      sockets.add(socket);
      await Promise.race([connected, new Promise((f) => setTimeout(f, connectionAttemptDelayMs))]);
      if (connected.isDone())
        break;
    }
  }
  async function lookupAddresses(hostname) {
    const addresses = await dns.promises.lookup(hostname, {
      all: true,
      family: 0,
      verbatim: true
    });
    let firstFamily = addresses.filter(({
      family
    }) => family === 6);
    let secondFamily = addresses.filter(({
      family
    }) => family === 4);
    if (firstFamily.length && firstFamily[0] !== addresses[0]) {
      const tmp = firstFamily;
      firstFamily = secondFamily;
      secondFamily = tmp;
    }
    const result = [];
    for (let i = 0;i < Math.max(firstFamily.length, secondFamily.length); i++) {
      if (firstFamily[i])
        result.push(firstFamily[i]);
      if (secondFamily[i])
        result.push(secondFamily[i]);
    }
    return result;
  }
  function clientRequestArgsToHostName(options) {
    if (options.hostname)
      return options.hostname;
    if (options.host)
      return options.host;
    throw new Error("Either options.hostname or options.host must be provided");
  }
  function timingForSocket(socket) {
    return {
      dnsLookupAt: socket[kDNSLookupAt],
      tcpConnectionAt: socket[kTCPConnectionAt]
    };
  }
});

// node_modules/playwright-core/lib/utils/network.js
var require_network = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NET_DEFAULT_TIMEOUT = undefined;
  exports.createHttp2Server = createHttp2Server;
  exports.createHttpServer = createHttpServer;
  exports.createHttpsServer = createHttpsServer;
  exports.fetchData = fetchData;
  exports.httpRequest = httpRequest;
  exports.isURLAvailable = isURLAvailable;
  var _http = _interopRequireDefault(__require("http"));
  var _https = _interopRequireDefault(__require("https"));
  var _http2 = _interopRequireDefault(__require("http2"));
  var _utilsBundle = require_utilsBundle();
  var _url = _interopRequireDefault(__require("url"));
  var _happyEyeballs = require_happy_eyeballs();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var NET_DEFAULT_TIMEOUT = exports.NET_DEFAULT_TIMEOUT = 30000;
  function httpRequest(params, onResponse, onError) {
    var _params$timeout;
    const parsedUrl = _url.default.parse(params.url);
    let options = {
      ...parsedUrl,
      agent: parsedUrl.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
      method: params.method || "GET",
      headers: params.headers
    };
    if (params.rejectUnauthorized !== undefined)
      options.rejectUnauthorized = params.rejectUnauthorized;
    const timeout = (_params$timeout = params.timeout) !== null && _params$timeout !== undefined ? _params$timeout : NET_DEFAULT_TIMEOUT;
    const proxyURL = (0, _utilsBundle.getProxyForUrl)(params.url);
    if (proxyURL) {
      const parsedProxyURL = new URL(proxyURL);
      if (params.url.startsWith("http:")) {
        options = {
          path: parsedUrl.href,
          host: parsedProxyURL.hostname,
          port: parsedProxyURL.port,
          headers: options.headers,
          method: options.method
        };
      } else {
        parsedProxyURL.secureProxy = parsedProxyURL.protocol === "https:";
        options.agent = new _utilsBundle.HttpsProxyAgent(parsedProxyURL);
        options.rejectUnauthorized = false;
      }
    }
    const requestCallback = (res) => {
      const statusCode = res.statusCode || 0;
      if (statusCode >= 300 && statusCode < 400 && res.headers.location)
        httpRequest({
          ...params,
          url: new URL(res.headers.location, params.url).toString()
        }, onResponse, onError);
      else
        onResponse(res);
    };
    const request = options.protocol === "https:" ? _https.default.request(options, requestCallback) : _http.default.request(options, requestCallback);
    request.on("error", onError);
    if (timeout !== undefined) {
      const rejectOnTimeout = () => {
        onError(new Error(`Request to ${params.url} timed out after ${timeout}ms`));
        request.abort();
      };
      if (timeout <= 0) {
        rejectOnTimeout();
        return;
      }
      request.setTimeout(timeout, rejectOnTimeout);
    }
    request.end(params.data);
  }
  function fetchData(params, onError) {
    return new Promise((resolve, reject) => {
      httpRequest(params, async (response) => {
        if (response.statusCode !== 200) {
          const error = onError ? await onError(params, response) : new Error(`fetch failed: server returned code ${response.statusCode}. URL: ${params.url}`);
          reject(error);
          return;
        }
        let body = "";
        response.on("data", (chunk) => body += chunk);
        response.on("error", (error) => reject(error));
        response.on("end", () => resolve(body));
      }, reject);
    });
  }
  function createHttpServer(...args) {
    const server = _http.default.createServer(...args);
    decorateServer(server);
    return server;
  }
  function createHttpsServer(...args) {
    const server = _https.default.createServer(...args);
    decorateServer(server);
    return server;
  }
  function createHttp2Server(...args) {
    const server = _http2.default.createSecureServer(...args);
    decorateServer(server);
    return server;
  }
  async function isURLAvailable(url, ignoreHTTPSErrors, onLog, onStdErr) {
    let statusCode = await httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr);
    if (statusCode === 404 && url.pathname === "/") {
      const indexUrl = new URL(url);
      indexUrl.pathname = "/index.html";
      statusCode = await httpStatusCode(indexUrl, ignoreHTTPSErrors, onLog, onStdErr);
    }
    return statusCode >= 200 && statusCode < 404;
  }
  async function httpStatusCode(url, ignoreHTTPSErrors, onLog, onStdErr) {
    return new Promise((resolve) => {
      onLog === null || onLog === undefined || onLog(`HTTP GET: ${url}`);
      httpRequest({
        url: url.toString(),
        headers: {
          Accept: "*/*"
        },
        rejectUnauthorized: !ignoreHTTPSErrors
      }, (res) => {
        var _res$statusCode;
        res.resume();
        const statusCode = (_res$statusCode = res.statusCode) !== null && _res$statusCode !== undefined ? _res$statusCode : 0;
        onLog === null || onLog === undefined || onLog(`HTTP Status: ${statusCode}`);
        resolve(statusCode);
      }, (error) => {
        if (error.code === "DEPTH_ZERO_SELF_SIGNED_CERT")
          onStdErr === null || onStdErr === undefined || onStdErr(`[WebServer] Self-signed certificate detected. Try adding ignoreHTTPSErrors: true to config.webServer.`);
        onLog === null || onLog === undefined || onLog(`Error while checking if ${url} is available: ${error.message}`);
        resolve(0);
      });
    });
  }
  function decorateServer(server) {
    const sockets = new Set;
    server.on("connection", (socket) => {
      sockets.add(socket);
      socket.once("close", () => sockets.delete(socket));
    });
    const close = server.close;
    server.close = (callback) => {
      for (const socket of sockets)
        socket.destroy();
      sockets.clear();
      return close.call(server, callback);
    };
  }
});

// node_modules/playwright-core/lib/utils/linuxUtils.js
var require_linuxUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLinuxDistributionInfo = getLinuxDistributionInfo;
  exports.getLinuxDistributionInfoSync = getLinuxDistributionInfoSync;
  var _fs = _interopRequireDefault(__require("fs"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var didFailToReadOSRelease = false;
  var osRelease;
  async function getLinuxDistributionInfo() {
    if (process.platform !== "linux")
      return;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get, _fields$get2;
        const osReleaseText = await _fs.default.promises.readFile("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get = fields.get("id")) !== null && _fields$get !== undefined ? _fields$get : "",
          version: (_fields$get2 = fields.get("version_id")) !== null && _fields$get2 !== undefined ? _fields$get2 : ""
        };
      } catch (e) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  }
  function getLinuxDistributionInfoSync() {
    if (process.platform !== "linux")
      return;
    if (!osRelease && !didFailToReadOSRelease) {
      try {
        var _fields$get3, _fields$get4;
        const osReleaseText = _fs.default.readFileSync("/etc/os-release", "utf8");
        const fields = parseOSReleaseText(osReleaseText);
        osRelease = {
          id: (_fields$get3 = fields.get("id")) !== null && _fields$get3 !== undefined ? _fields$get3 : "",
          version: (_fields$get4 = fields.get("version_id")) !== null && _fields$get4 !== undefined ? _fields$get4 : ""
        };
      } catch (e) {
        didFailToReadOSRelease = true;
      }
    }
    return osRelease;
  }
  function parseOSReleaseText(osReleaseText) {
    const fields = new Map;
    for (const line of osReleaseText.split(`
`)) {
      const tokens = line.split("=");
      const name = tokens.shift();
      let value = tokens.join("=").trim();
      if (value.startsWith('"') && value.endsWith('"'))
        value = value.substring(1, value.length - 1);
      if (!name)
        continue;
      fields.set(name.toLowerCase(), value);
    }
    return fields;
  }
});

// node_modules/playwright-core/lib/utils/ascii.js
var require_ascii = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.jsonStringifyForceASCII = jsonStringifyForceASCII;
  exports.wrapInASCIIBox = wrapInASCIIBox;
  function wrapInASCIIBox(text, padding = 0) {
    const lines = text.split(`
`);
    const maxLength = Math.max(...lines.map((line) => line.length));
    return ["╔" + "═".repeat(maxLength + padding * 2) + "╗", ...lines.map((line) => "║" + " ".repeat(padding) + line + " ".repeat(maxLength - line.length + padding) + "║"), "╚" + "═".repeat(maxLength + padding * 2) + "╝"].join(`
`);
  }
  function jsonStringifyForceASCII(object) {
    return JSON.stringify(object).replace(/[\u007f-\uffff]/g, (c) => "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4));
  }
});

// node_modules/playwright-core/package.json
var require_package = __commonJS((exports, module) => {
  module.exports = {
    name: "playwright-core",
    version: "1.49.1",
    description: "A high-level API to automate web browsers",
    repository: {
      type: "git",
      url: "git+https://github.com/microsoft/playwright.git"
    },
    homepage: "https://playwright.dev",
    engines: {
      node: ">=18"
    },
    author: {
      name: "Microsoft Corporation"
    },
    license: "Apache-2.0",
    exports: {
      ".": {
        types: "./index.d.ts",
        import: "./index.mjs",
        require: "./index.js",
        default: "./index.js"
      },
      "./package.json": "./package.json",
      "./lib/outofprocess": "./lib/outofprocess.js",
      "./lib/image_tools/stats": "./lib/image_tools/stats.js",
      "./lib/image_tools/compare": "./lib/image_tools/compare.js",
      "./lib/image_tools/imageChannel": "./lib/image_tools/imageChannel.js",
      "./lib/image_tools/colorUtils": "./lib/image_tools/colorUtils.js",
      "./lib/cli/program": "./lib/cli/program.js",
      "./lib/server/registry/index": "./lib/server/registry/index.js",
      "./lib/remote/playwrightServer": "./lib/remote/playwrightServer.js",
      "./lib/server": "./lib/server/index.js",
      "./lib/utils": "./lib/utils/index.js",
      "./lib/utilsBundle": "./lib/utilsBundle.js",
      "./lib/zipBundle": "./lib/zipBundle.js",
      "./types/protocol": "./types/protocol.d.ts",
      "./types/structs": "./types/structs.d.ts"
    },
    bin: {
      "playwright-core": "cli.js"
    },
    types: "types/types.d.ts"
  };
});

// node_modules/playwright-core/lib/utils/userAgent.js
var require_userAgent = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getEmbedderName = getEmbedderName;
  exports.getPlaywrightVersion = getPlaywrightVersion;
  exports.getUserAgent = getUserAgent;
  exports.userAgentVersionMatchesErrorMessage = userAgentVersionMatchesErrorMessage;
  var _child_process = __require("child_process");
  var _os = _interopRequireDefault(__require("os"));
  var _linuxUtils = require_linuxUtils();
  var _ascii = require_ascii();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var cachedUserAgent;
  function getUserAgent() {
    if (cachedUserAgent)
      return cachedUserAgent;
    try {
      cachedUserAgent = determineUserAgent();
    } catch (e) {
      cachedUserAgent = "Playwright/unknown";
    }
    return cachedUserAgent;
  }
  function determineUserAgent() {
    let osIdentifier = "unknown";
    let osVersion = "unknown";
    if (process.platform === "win32") {
      const version2 = _os.default.release().split(".");
      osIdentifier = "windows";
      osVersion = `${version2[0]}.${version2[1]}`;
    } else if (process.platform === "darwin") {
      const version2 = (0, _child_process.execSync)("sw_vers -productVersion", {
        stdio: ["ignore", "pipe", "ignore"]
      }).toString().trim().split(".");
      osIdentifier = "macOS";
      osVersion = `${version2[0]}.${version2[1]}`;
    } else if (process.platform === "linux") {
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if (distroInfo) {
        osIdentifier = distroInfo.id || "linux";
        osVersion = distroInfo.version || "unknown";
      } else {
        osIdentifier = "linux";
      }
    }
    const additionalTokens = [];
    if (process.env.CI)
      additionalTokens.push("CI/1");
    const serializedTokens = additionalTokens.length ? " " + additionalTokens.join(" ") : "";
    const {
      embedderName,
      embedderVersion
    } = getEmbedderName();
    return `Playwright/${getPlaywrightVersion()} (${_os.default.arch()}; ${osIdentifier} ${osVersion}) ${embedderName}/${embedderVersion}${serializedTokens}`;
  }
  function getEmbedderName() {
    let embedderName = "unknown";
    let embedderVersion = "unknown";
    if (!process.env.PW_LANG_NAME) {
      embedderName = "node";
      embedderVersion = process.version.substring(1).split(".").slice(0, 2).join(".");
    } else if (["node", "python", "java", "csharp"].includes(process.env.PW_LANG_NAME)) {
      var _process$env$PW_LANG_;
      embedderName = process.env.PW_LANG_NAME;
      embedderVersion = (_process$env$PW_LANG_ = process.env.PW_LANG_NAME_VERSION) !== null && _process$env$PW_LANG_ !== undefined ? _process$env$PW_LANG_ : "unknown";
    }
    return {
      embedderName,
      embedderVersion
    };
  }
  function getPlaywrightVersion(majorMinorOnly = false) {
    const version2 = process.env.PW_VERSION_OVERRIDE || require_package().version;
    return majorMinorOnly ? version2.split(".").slice(0, 2).join(".") : version2;
  }
  function userAgentVersionMatchesErrorMessage(userAgent) {
    const match = userAgent.match(/^Playwright\/(\d+\.\d+\.\d+)/);
    if (!match) {
      return;
    }
    const received = match[1].split(".").slice(0, 2).join(".");
    const expected = getPlaywrightVersion(true);
    if (received !== expected) {
      return (0, _ascii.wrapInASCIIBox)([`Playwright version mismatch:`, `  - server version: v${expected}`, `  - client version: v${received}`, ``, `If you are using VSCode extension, restart VSCode.`, ``, `If you are connecting to a remote service,`, `keep your local Playwright version in sync`, `with the remote service version.`, ``, `<3 Playwright Team`].join(`
`), 1);
    }
  }
});

// node_modules/playwright-core/lib/third_party/pixelmatch.js
var require_pixelmatch = __commonJS((exports, module) => {
  module.exports = pixelmatch;
  var defaultOptions = {
    threshold: 0.1,
    includeAA: false,
    alpha: 0.1,
    aaColor: [255, 255, 0],
    diffColor: [255, 0, 0],
    diffColorAlt: null,
    diffMask: false
  };
  function pixelmatch(img1, img2, output, width, height, options) {
    if (!isPixelData(img1) || !isPixelData(img2) || output && !isPixelData(output))
      throw new Error("Image data: Uint8Array, Uint8ClampedArray or Buffer expected.");
    if (img1.length !== img2.length || output && output.length !== img1.length)
      throw new Error("Image sizes do not match.");
    if (img1.length !== width * height * 4)
      throw new Error("Image data size does not match width/height.");
    options = Object.assign({}, defaultOptions, options);
    const len = width * height;
    const a32 = new Uint32Array(img1.buffer, img1.byteOffset, len);
    const b32 = new Uint32Array(img2.buffer, img2.byteOffset, len);
    let identical = true;
    for (let i = 0;i < len; i++) {
      if (a32[i] !== b32[i]) {
        identical = false;
        break;
      }
    }
    if (identical) {
      if (output && !options.diffMask) {
        for (let i = 0;i < len; i++)
          drawGrayPixel(img1, 4 * i, options.alpha, output);
      }
      return 0;
    }
    const maxDelta = 35215 * options.threshold * options.threshold;
    let diff2 = 0;
    for (let y = 0;y < height; y++) {
      for (let x = 0;x < width; x++) {
        const pos = (y * width + x) * 4;
        const delta = colorDelta(img1, img2, pos, pos);
        if (Math.abs(delta) > maxDelta) {
          if (!options.includeAA && (antialiased(img1, x, y, width, height, img2) || antialiased(img2, x, y, width, height, img1))) {
            if (output && !options.diffMask)
              drawPixel(output, pos, ...options.aaColor);
          } else {
            if (output) {
              drawPixel(output, pos, ...delta < 0 && options.diffColorAlt || options.diffColor);
            }
            diff2++;
          }
        } else if (output) {
          if (!options.diffMask)
            drawGrayPixel(img1, pos, options.alpha, output);
        }
      }
    }
    return diff2;
  }
  function isPixelData(arr) {
    return ArrayBuffer.isView(arr) && arr.constructor.BYTES_PER_ELEMENT === 1;
  }
  function antialiased(img, x1, y1, width, height, img2) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    let min = 0;
    let max = 0;
    let minX, minY, maxX, maxY;
    for (let x = x0;x <= x2; x++) {
      for (let y = y0;y <= y2; y++) {
        if (x === x1 && y === y1)
          continue;
        const delta = colorDelta(img, img, pos, (y * width + x) * 4, true);
        if (delta === 0) {
          zeroes++;
          if (zeroes > 2)
            return false;
        } else if (delta < min) {
          min = delta;
          minX = x;
          minY = y;
        } else if (delta > max) {
          max = delta;
          maxX = x;
          maxY = y;
        }
      }
    }
    if (min === 0 || max === 0)
      return false;
    return hasManySiblings(img, minX, minY, width, height) && hasManySiblings(img2, minX, minY, width, height) || hasManySiblings(img, maxX, maxY, width, height) && hasManySiblings(img2, maxX, maxY, width, height);
  }
  function hasManySiblings(img, x1, y1, width, height) {
    const x0 = Math.max(x1 - 1, 0);
    const y0 = Math.max(y1 - 1, 0);
    const x2 = Math.min(x1 + 1, width - 1);
    const y2 = Math.min(y1 + 1, height - 1);
    const pos = (y1 * width + x1) * 4;
    let zeroes = x1 === x0 || x1 === x2 || y1 === y0 || y1 === y2 ? 1 : 0;
    for (let x = x0;x <= x2; x++) {
      for (let y = y0;y <= y2; y++) {
        if (x === x1 && y === y1)
          continue;
        const pos2 = (y * width + x) * 4;
        if (img[pos] === img[pos2] && img[pos + 1] === img[pos2 + 1] && img[pos + 2] === img[pos2 + 2] && img[pos + 3] === img[pos2 + 3])
          zeroes++;
        if (zeroes > 2)
          return true;
      }
    }
    return false;
  }
  function colorDelta(img1, img2, k, m, yOnly) {
    let r1 = img1[k + 0];
    let g1 = img1[k + 1];
    let b1 = img1[k + 2];
    let a1 = img1[k + 3];
    let r2 = img2[m + 0];
    let g2 = img2[m + 1];
    let b2 = img2[m + 2];
    let a2 = img2[m + 3];
    if (a1 === a2 && r1 === r2 && g1 === g2 && b1 === b2)
      return 0;
    if (a1 < 255) {
      a1 /= 255;
      r1 = blend(r1, a1);
      g1 = blend(g1, a1);
      b1 = blend(b1, a1);
    }
    if (a2 < 255) {
      a2 /= 255;
      r2 = blend(r2, a2);
      g2 = blend(g2, a2);
      b2 = blend(b2, a2);
    }
    const y1 = rgb2y(r1, g1, b1);
    const y2 = rgb2y(r2, g2, b2);
    const y = y1 - y2;
    if (yOnly)
      return y;
    const i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2);
    const q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);
    const delta = 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;
    return y1 > y2 ? -delta : delta;
  }
  function rgb2y(r, g, b) {
    return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;
  }
  function rgb2i(r, g, b) {
    return r * 0.59597799 - g * 0.2741761 - b * 0.32180189;
  }
  function rgb2q(r, g, b) {
    return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;
  }
  function blend(c, a) {
    return 255 + (c - 255) * a;
  }
  function drawPixel(output, pos, r, g, b) {
    output[pos + 0] = r;
    output[pos + 1] = g;
    output[pos + 2] = b;
    output[pos + 3] = 255;
  }
  function drawGrayPixel(img, i, alpha, output) {
    const r = img[i + 0];
    const g = img[i + 1];
    const b = img[i + 2];
    const val = blend(rgb2y(r, g, b), alpha * img[i + 3] / 255);
    drawPixel(output, i, val, val, val);
  }
});

// node_modules/playwright-core/lib/image_tools/colorUtils.js
var require_colorUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.blendWithWhite = blendWithWhite;
  exports.colorDeltaE94 = colorDeltaE94;
  exports.rgb2gray = rgb2gray;
  exports.srgb2xyz = srgb2xyz;
  exports.xyz2lab = xyz2lab;
  function blendWithWhite(c, a) {
    return 255 + (c - 255) * a;
  }
  function rgb2gray(r, g, b) {
    return 77 * r + 150 * g + 29 * b + 128 >> 8;
  }
  function colorDeltaE94(rgb1, rgb2) {
    const [l1, a1, b1] = xyz2lab(srgb2xyz(rgb1));
    const [l2, a2, b2] = xyz2lab(srgb2xyz(rgb2));
    const deltaL = l1 - l2;
    const deltaA = a1 - a2;
    const deltaB = b1 - b2;
    const c1 = Math.sqrt(a1 ** 2 + b1 ** 2);
    const c2 = Math.sqrt(a2 ** 2 + b2 ** 2);
    const deltaC = c1 - c2;
    let deltaH = deltaA ** 2 + deltaB ** 2 - deltaC ** 2;
    deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);
    const k1 = 0.045;
    const k2 = 0.015;
    const kL = 1;
    const kC = 1;
    const kH = 1;
    const sC = 1 + k1 * c1;
    const sH = 1 + k2 * c1;
    const sL = 1;
    return Math.sqrt((deltaL / sL / kL) ** 2 + (deltaC / sC / kC) ** 2 + (deltaH / sH / kH) ** 2);
  }
  function srgb2xyz(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    return [r * 0.4124 + g * 0.3576 + b * 0.1805, r * 0.2126 + g * 0.7152 + b * 0.0722, r * 0.0193 + g * 0.1192 + b * 0.9505];
  }
  var sigma_pow2 = 6 * 6 / 29 / 29;
  var sigma_pow3 = 6 * 6 * 6 / 29 / 29 / 29;
  function xyz2lab(xyz) {
    const x = xyz[0] / 0.950489;
    const y = xyz[1];
    const z2 = xyz[2] / 1.08884;
    const fx = x > sigma_pow3 ? x ** (1 / 3) : x / 3 / sigma_pow2 + 4 / 29;
    const fy = y > sigma_pow3 ? y ** (1 / 3) : y / 3 / sigma_pow2 + 4 / 29;
    const fz = z2 > sigma_pow3 ? z2 ** (1 / 3) : z2 / 3 / sigma_pow2 + 4 / 29;
    const l = 116 * fy - 16;
    const a = 500 * (fx - fy);
    const b = 200 * (fy - fz);
    return [l, a, b];
  }
});

// node_modules/playwright-core/lib/image_tools/imageChannel.js
var require_imageChannel = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ImageChannel = undefined;
  var _colorUtils = require_colorUtils();

  class ImageChannel {
    static intoRGB(width, height, data, options = {}) {
      const {
        paddingSize = 0,
        paddingColorOdd = [255, 0, 255],
        paddingColorEven = [0, 255, 0]
      } = options;
      const newWidth = width + 2 * paddingSize;
      const newHeight = height + 2 * paddingSize;
      const r = new Uint8Array(newWidth * newHeight);
      const g = new Uint8Array(newWidth * newHeight);
      const b = new Uint8Array(newWidth * newHeight);
      for (let y = 0;y < newHeight; ++y) {
        for (let x = 0;x < newWidth; ++x) {
          const index = y * newWidth + x;
          if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {
            const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;
            const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;
            r[index] = (0, _colorUtils.blendWithWhite)(data[offset], alpha);
            g[index] = (0, _colorUtils.blendWithWhite)(data[offset + 1], alpha);
            b[index] = (0, _colorUtils.blendWithWhite)(data[offset + 2], alpha);
          } else {
            const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;
            r[index] = color[0];
            g[index] = color[1];
            b[index] = color[2];
          }
        }
      }
      return [new ImageChannel(newWidth, newHeight, r), new ImageChannel(newWidth, newHeight, g), new ImageChannel(newWidth, newHeight, b)];
    }
    constructor(width, height, data) {
      this.data = undefined;
      this.width = undefined;
      this.height = undefined;
      this.data = data;
      this.width = width;
      this.height = height;
    }
    get(x, y) {
      return this.data[y * this.width + x];
    }
    boundXY(x, y) {
      return [Math.min(Math.max(x, 0), this.width - 1), Math.min(Math.max(y, 0), this.height - 1)];
    }
  }
  exports.ImageChannel = ImageChannel;
});

// node_modules/playwright-core/lib/image_tools/stats.js
var require_stats = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FastStats = undefined;
  exports.ssim = ssim;
  var DYNAMIC_RANGE = 2 ** 8 - 1;
  function ssim(stats, x1, y1, x2, y2) {
    const mean1 = stats.meanC1(x1, y1, x2, y2);
    const mean2 = stats.meanC2(x1, y1, x2, y2);
    const var1 = stats.varianceC1(x1, y1, x2, y2);
    const var2 = stats.varianceC2(x1, y1, x2, y2);
    const cov = stats.covariance(x1, y1, x2, y2);
    const c1 = (0.01 * DYNAMIC_RANGE) ** 2;
    const c2 = (0.03 * DYNAMIC_RANGE) ** 2;
    return (2 * mean1 * mean2 + c1) * (2 * cov + c2) / (mean1 ** 2 + mean2 ** 2 + c1) / (var1 + var2 + c2);
  }

  class FastStats {
    constructor(c1, c2) {
      this.c1 = undefined;
      this.c2 = undefined;
      this._partialSumC1 = undefined;
      this._partialSumC2 = undefined;
      this._partialSumMult = undefined;
      this._partialSumSq1 = undefined;
      this._partialSumSq2 = undefined;
      this.c1 = c1;
      this.c2 = c2;
      const {
        width,
        height
      } = c1;
      this._partialSumC1 = new Array(width * height);
      this._partialSumC2 = new Array(width * height);
      this._partialSumSq1 = new Array(width * height);
      this._partialSumSq2 = new Array(width * height);
      this._partialSumMult = new Array(width * height);
      const recalc = (mx, idx, initial, x, y) => {
        mx[idx] = initial;
        if (y > 0)
          mx[idx] += mx[(y - 1) * width + x];
        if (x > 0)
          mx[idx] += mx[y * width + x - 1];
        if (x > 0 && y > 0)
          mx[idx] -= mx[(y - 1) * width + x - 1];
      };
      for (let y = 0;y < height; ++y) {
        for (let x = 0;x < width; ++x) {
          const idx = y * width + x;
          recalc(this._partialSumC1, idx, this.c1.data[idx], x, y);
          recalc(this._partialSumC2, idx, this.c2.data[idx], x, y);
          recalc(this._partialSumSq1, idx, this.c1.data[idx] * this.c1.data[idx], x, y);
          recalc(this._partialSumSq2, idx, this.c2.data[idx] * this.c2.data[idx], x, y);
          recalc(this._partialSumMult, idx, this.c1.data[idx] * this.c2.data[idx], x, y);
        }
      }
    }
    _sum(partialSum, x1, y1, x2, y2) {
      const width = this.c1.width;
      let result = partialSum[y2 * width + x2];
      if (y1 > 0)
        result -= partialSum[(y1 - 1) * width + x2];
      if (x1 > 0)
        result -= partialSum[y2 * width + x1 - 1];
      if (x1 > 0 && y1 > 0)
        result += partialSum[(y1 - 1) * width + x1 - 1];
      return result;
    }
    meanC1(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC1, x1, y1, x2, y2) / N;
    }
    meanC2(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return this._sum(this._partialSumC2, x1, y1, x2, y2) / N;
    }
    varianceC1(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq1, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) ** 2 / N) / N;
    }
    varianceC2(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumSq2, x1, y1, x2, y2) - this._sum(this._partialSumC2, x1, y1, x2, y2) ** 2 / N) / N;
    }
    covariance(x1, y1, x2, y2) {
      const N = (y2 - y1 + 1) * (x2 - x1 + 1);
      return (this._sum(this._partialSumMult, x1, y1, x2, y2) - this._sum(this._partialSumC1, x1, y1, x2, y2) * this._sum(this._partialSumC2, x1, y1, x2, y2) / N) / N;
    }
  }
  exports.FastStats = FastStats;
});

// node_modules/playwright-core/lib/image_tools/compare.js
var require_compare = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.compare = compare;
  var _colorUtils = require_colorUtils();
  var _imageChannel = require_imageChannel();
  var _stats = require_stats();
  var SSIM_WINDOW_RADIUS = 15;
  var VARIANCE_WINDOW_RADIUS = 1;
  function drawPixel(width, data, x, y, r, g, b) {
    const idx = (y * width + x) * 4;
    data[idx + 0] = r;
    data[idx + 1] = g;
    data[idx + 2] = b;
    data[idx + 3] = 255;
  }
  function compare(actual, expected, diff2, width, height, options = {}) {
    const {
      maxColorDeltaE94 = 1
    } = options;
    const paddingSize = Math.max(VARIANCE_WINDOW_RADIUS, SSIM_WINDOW_RADIUS);
    const paddingColorEven = [255, 0, 255];
    const paddingColorOdd = [0, 255, 0];
    const [r1, g1, b1] = _imageChannel.ImageChannel.intoRGB(width, height, expected, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const [r2, g2, b2] = _imageChannel.ImageChannel.intoRGB(width, height, actual, {
      paddingSize,
      paddingColorEven,
      paddingColorOdd
    });
    const noop = (x, y) => {
    };
    const drawRedPixel = diff2 ? (x, y) => drawPixel(width, diff2, x - paddingSize, y - paddingSize, 255, 0, 0) : noop;
    const drawYellowPixel = diff2 ? (x, y) => drawPixel(width, diff2, x - paddingSize, y - paddingSize, 255, 255, 0) : noop;
    const drawGrayPixel = diff2 ? (x, y) => {
      const gray = (0, _colorUtils.rgb2gray)(r1.get(x, y), g1.get(x, y), b1.get(x, y));
      const value = (0, _colorUtils.blendWithWhite)(gray, 0.1);
      drawPixel(width, diff2, x - paddingSize, y - paddingSize, value, value, value);
    } : noop;
    let fastR, fastG, fastB;
    let diffCount = 0;
    for (let y = paddingSize;y < r1.height - paddingSize; ++y) {
      for (let x = paddingSize;x < r1.width - paddingSize; ++x) {
        if (r1.get(x, y) === r2.get(x, y) && g1.get(x, y) === g2.get(x, y) && b1.get(x, y) === b2.get(x, y)) {
          drawGrayPixel(x, y);
          continue;
        }
        const delta = (0, _colorUtils.colorDeltaE94)([r1.get(x, y), g1.get(x, y), b1.get(x, y)], [r2.get(x, y), g2.get(x, y), b2.get(x, y)]);
        if (delta <= maxColorDeltaE94) {
          drawGrayPixel(x, y);
          continue;
        }
        if (!fastR || !fastG || !fastB) {
          fastR = new _stats.FastStats(r1, r2);
          fastG = new _stats.FastStats(g1, g2);
          fastB = new _stats.FastStats(b1, b2);
        }
        const [varX1, varY1] = r1.boundXY(x - VARIANCE_WINDOW_RADIUS, y - VARIANCE_WINDOW_RADIUS);
        const [varX2, varY2] = r1.boundXY(x + VARIANCE_WINDOW_RADIUS, y + VARIANCE_WINDOW_RADIUS);
        const var1 = fastR.varianceC1(varX1, varY1, varX2, varY2) + fastG.varianceC1(varX1, varY1, varX2, varY2) + fastB.varianceC1(varX1, varY1, varX2, varY2);
        const var2 = fastR.varianceC2(varX1, varY1, varX2, varY2) + fastG.varianceC2(varX1, varY1, varX2, varY2) + fastB.varianceC2(varX1, varY1, varX2, varY2);
        if (var1 === 0 || var2 === 0) {
          drawRedPixel(x, y);
          ++diffCount;
          continue;
        }
        const [ssimX1, ssimY1] = r1.boundXY(x - SSIM_WINDOW_RADIUS, y - SSIM_WINDOW_RADIUS);
        const [ssimX2, ssimY2] = r1.boundXY(x + SSIM_WINDOW_RADIUS, y + SSIM_WINDOW_RADIUS);
        const ssimRGB = ((0, _stats.ssim)(fastR, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastG, ssimX1, ssimY1, ssimX2, ssimY2) + (0, _stats.ssim)(fastB, ssimX1, ssimY1, ssimX2, ssimY2)) / 3;
        const isAntialiased = ssimRGB >= 0.99;
        if (isAntialiased) {
          drawYellowPixel(x, y);
        } else {
          drawRedPixel(x, y);
          ++diffCount;
        }
      }
    }
    return diffCount;
  }
});

// node_modules/playwright-core/lib/utils/comparators.js
var require_comparators = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getComparator = getComparator;
  var _utilsBundle = require_utilsBundle();
  var _pixelmatch = _interopRequireDefault(require_pixelmatch());
  var _compare = require_compare();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function getComparator(mimeType) {
    if (mimeType === "image/png")
      return compareImages.bind(null, "image/png");
    if (mimeType === "image/jpeg")
      return compareImages.bind(null, "image/jpeg");
    if (mimeType === "text/plain")
      return compareText;
    return compareBuffersOrStrings;
  }
  var JPEG_JS_MAX_BUFFER_SIZE_IN_MB = 5 * 1024;
  function compareBuffersOrStrings(actualBuffer, expectedBuffer) {
    if (typeof actualBuffer === "string")
      return compareText(actualBuffer, expectedBuffer);
    if (!actualBuffer || !(actualBuffer instanceof Buffer))
      return {
        errorMessage: "Actual result should be a Buffer or a string."
      };
    if (Buffer.compare(actualBuffer, expectedBuffer))
      return {
        errorMessage: "Buffers differ"
      };
    return null;
  }
  function compareImages(mimeType, actualBuffer, expectedBuffer, options = {}) {
    var _options$comparator, _ref;
    if (!actualBuffer || !(actualBuffer instanceof Buffer))
      return {
        errorMessage: "Actual result should be a Buffer."
      };
    validateBuffer(expectedBuffer, mimeType);
    let actual = mimeType === "image/png" ? _utilsBundle.PNG.sync.read(actualBuffer) : _utilsBundle.jpegjs.decode(actualBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    let expected = mimeType === "image/png" ? _utilsBundle.PNG.sync.read(expectedBuffer) : _utilsBundle.jpegjs.decode(expectedBuffer, {
      maxMemoryUsageInMB: JPEG_JS_MAX_BUFFER_SIZE_IN_MB
    });
    const size = {
      width: Math.max(expected.width, actual.width),
      height: Math.max(expected.height, actual.height)
    };
    let sizesMismatchError = "";
    if (expected.width !== actual.width || expected.height !== actual.height) {
      sizesMismatchError = `Expected an image ${expected.width}px by ${expected.height}px, received ${actual.width}px by ${actual.height}px. `;
      actual = resizeImage(actual, size);
      expected = resizeImage(expected, size);
    }
    const diff2 = new _utilsBundle.PNG({
      width: size.width,
      height: size.height
    });
    let count;
    if (options.comparator === "ssim-cie94") {
      count = (0, _compare.compare)(expected.data, actual.data, diff2.data, size.width, size.height, {
        maxColorDeltaE94: 1
      });
    } else if (((_options$comparator = options.comparator) !== null && _options$comparator !== undefined ? _options$comparator : "pixelmatch") === "pixelmatch") {
      var _options$threshold;
      count = (0, _pixelmatch.default)(expected.data, actual.data, diff2.data, size.width, size.height, {
        threshold: (_options$threshold = options.threshold) !== null && _options$threshold !== undefined ? _options$threshold : 0.2
      });
    } else {
      throw new Error(`Configuration specifies unknown comparator "${options.comparator}"`);
    }
    const maxDiffPixels1 = options.maxDiffPixels;
    const maxDiffPixels2 = options.maxDiffPixelRatio !== undefined ? expected.width * expected.height * options.maxDiffPixelRatio : undefined;
    let maxDiffPixels;
    if (maxDiffPixels1 !== undefined && maxDiffPixels2 !== undefined)
      maxDiffPixels = Math.min(maxDiffPixels1, maxDiffPixels2);
    else
      maxDiffPixels = (_ref = maxDiffPixels1 !== null && maxDiffPixels1 !== undefined ? maxDiffPixels1 : maxDiffPixels2) !== null && _ref !== undefined ? _ref : 0;
    const ratio = Math.ceil(count / (expected.width * expected.height) * 100) / 100;
    const pixelsMismatchError = count > maxDiffPixels ? `${count} pixels (ratio ${ratio.toFixed(2)} of all image pixels) are different.` : "";
    if (pixelsMismatchError || sizesMismatchError)
      return {
        errorMessage: sizesMismatchError + pixelsMismatchError,
        diff: _utilsBundle.PNG.sync.write(diff2)
      };
    return null;
  }
  function validateBuffer(buffer, mimeType) {
    if (mimeType === "image/png") {
      const pngMagicNumber = [137, 80, 78, 71, 13, 10, 26, 10];
      if (buffer.length < pngMagicNumber.length || !pngMagicNumber.every((byte, index) => buffer[index] === byte))
        throw new Error("could not decode image as PNG.");
    } else if (mimeType === "image/jpeg") {
      const jpegMagicNumber = [255, 216];
      if (buffer.length < jpegMagicNumber.length || !jpegMagicNumber.every((byte, index) => buffer[index] === byte))
        throw new Error("could not decode image as JPEG.");
    }
  }
  function compareText(actual, expectedBuffer) {
    if (typeof actual !== "string")
      return {
        errorMessage: "Actual result should be a string"
      };
    const expected = expectedBuffer.toString("utf-8");
    if (expected === actual)
      return null;
    const diffs = _utilsBundle.diff.diffChars(expected, actual);
    return {
      errorMessage: diff_prettyTerminal(diffs)
    };
  }
  function diff_prettyTerminal(diffs) {
    const result = diffs.map((part) => {
      const text = part.value;
      if (part.added)
        return _utilsBundle.colors.green(text);
      else if (part.removed)
        return _utilsBundle.colors.reset(_utilsBundle.colors.strikethrough(_utilsBundle.colors.red(text)));
      else
        return text;
    });
    return result.join("");
  }
  function resizeImage(image, size) {
    if (image.width === size.width && image.height === size.height)
      return image;
    const buffer = new Uint8Array(size.width * size.height * 4);
    for (let y = 0;y < size.height; y++) {
      for (let x = 0;x < size.width; x++) {
        const to = (y * size.width + x) * 4;
        if (y < image.height && x < image.width) {
          const from = (y * image.width + x) * 4;
          buffer[to] = image.data[from];
          buffer[to + 1] = image.data[from + 1];
          buffer[to + 2] = image.data[from + 2];
          buffer[to + 3] = image.data[from + 3];
        } else {
          buffer[to] = 0;
          buffer[to + 1] = 0;
          buffer[to + 2] = 0;
          buffer[to + 3] = 0;
        }
      }
    }
    return {
      data: Buffer.from(buffer),
      width: size.width,
      height: size.height
    };
  }
});

// node_modules/playwright-core/lib/utils/crypto.js
var require_crypto = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.calculateSha1 = calculateSha1;
  exports.createGuid = createGuid;
  exports.generateSelfSignedCertificate = generateSelfSignedCertificate;
  var _crypto = _interopRequireDefault(__require("crypto"));
  var _debug = require_debug();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function createGuid() {
    return _crypto.default.randomBytes(16).toString("hex");
  }
  function calculateSha1(buffer) {
    const hash = _crypto.default.createHash("sha1");
    hash.update(buffer);
    return hash.digest("hex");
  }
  function encodeBase128(value) {
    const bytes = [];
    do {
      let byte = value & 127;
      value >>>= 7;
      if (bytes.length > 0)
        byte |= 128;
      bytes.push(byte);
    } while (value > 0);
    return Buffer.from(bytes.reverse());
  }

  class DER {
    static encodeSequence(data) {
      return this._encode(48, Buffer.concat(data));
    }
    static encodeInteger(data) {
      (0, _debug.assert)(data >= -128 && data <= 127);
      return this._encode(2, Buffer.from([data]));
    }
    static encodeObjectIdentifier(oid) {
      const parts = oid.split(".").map((v) => Number(v));
      const output = [encodeBase128(40 * parts[0] + parts[1])];
      for (let i = 2;i < parts.length; i++)
        output.push(encodeBase128(parts[i]));
      return this._encode(6, Buffer.concat(output));
    }
    static encodeNull() {
      return Buffer.from([5, 0]);
    }
    static encodeSet(data) {
      (0, _debug.assert)(data.length === 1, "Only one item in the set is supported. We'd need to sort the data to support more.");
      return this._encode(49, Buffer.concat(data));
    }
    static encodeExplicitContextDependent(tag, data) {
      return this._encode(160 + tag, data);
    }
    static encodePrintableString(data) {
      return this._encode(19, Buffer.from(data));
    }
    static encodeBitString(data) {
      const unusedBits = 0;
      const content = Buffer.concat([Buffer.from([unusedBits]), data]);
      return this._encode(3, content);
    }
    static encodeDate(date) {
      const year = date.getUTCFullYear();
      const isGeneralizedTime = year >= 2050;
      const parts = [isGeneralizedTime ? year.toString() : year.toString().slice(-2), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
      const encodedDate = parts.join("") + "Z";
      const tag = isGeneralizedTime ? 24 : 23;
      return this._encode(tag, Buffer.from(encodedDate));
    }
    static _encode(tag, data) {
      const lengthBytes = this._encodeLength(data.length);
      return Buffer.concat([Buffer.from([tag]), lengthBytes, data]);
    }
    static _encodeLength(length) {
      if (length < 128) {
        return Buffer.from([length]);
      } else {
        const lengthBytes = [];
        while (length > 0) {
          lengthBytes.unshift(length & 255);
          length >>= 8;
        }
        return Buffer.from([128 | lengthBytes.length, ...lengthBytes]);
      }
    }
  }
  function generateSelfSignedCertificate() {
    const {
      privateKey,
      publicKey
    } = _crypto.default.generateKeyPairSync("rsa", {
      modulusLength: 2048
    });
    const publicKeyDer = publicKey.export({
      type: "pkcs1",
      format: "der"
    });
    const oneYearInMilliseconds = 365 * 24 * 60 * 60 * 1000;
    const notBefore = new Date(new Date().getTime() - oneYearInMilliseconds);
    const notAfter = new Date(new Date().getTime() + oneYearInMilliseconds);
    const tbsCertificate = DER.encodeSequence([
      DER.encodeExplicitContextDependent(0, DER.encodeInteger(1)),
      DER.encodeInteger(1),
      DER.encodeSequence([
        DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
        DER.encodeNull()
      ]),
      DER.encodeSequence([DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.3"),
        DER.encodePrintableString("localhost")
      ])]), DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.10"),
        DER.encodePrintableString("Playwright Client Certificate Support")
      ])])]),
      DER.encodeSequence([
        DER.encodeDate(notBefore),
        DER.encodeDate(notAfter)
      ]),
      DER.encodeSequence([DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.3"),
        DER.encodePrintableString("localhost")
      ])]), DER.encodeSet([DER.encodeSequence([
        DER.encodeObjectIdentifier("2.5.4.10"),
        DER.encodePrintableString("Playwright Client Certificate Support")
      ])])]),
      DER.encodeSequence([DER.encodeSequence([
        DER.encodeObjectIdentifier("1.2.840.113549.1.1.1"),
        DER.encodeNull()
      ]), DER.encodeBitString(publicKeyDer)])
    ]);
    const signature = _crypto.default.sign("sha256", tbsCertificate, privateKey);
    const certificate = DER.encodeSequence([tbsCertificate, DER.encodeSequence([
      DER.encodeObjectIdentifier("1.2.840.113549.1.1.11"),
      DER.encodeNull()
    ]), DER.encodeBitString(signature)]);
    const certPem = [
      "-----BEGIN CERTIFICATE-----",
      certificate.toString("base64").match(/.{1,64}/g).join(`
`),
      "-----END CERTIFICATE-----"
    ].join(`
`);
    return {
      cert: certPem,
      key: privateKey.export({
        type: "pkcs1",
        format: "pem"
      })
    };
  }
});

// node_modules/playwright-core/lib/utils/debugLogger.js
var require_debugLogger = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.debugLogger = exports.RecentLogsCollector = undefined;
  var _utilsBundle = require_utilsBundle();
  var _fs = _interopRequireDefault(__require("fs"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var debugLoggerColorMap = {
    api: 45,
    protocol: 34,
    install: 34,
    download: 34,
    browser: 0,
    socks: 92,
    "client-certificates": 92,
    error: 160,
    channel: 33,
    server: 45,
    "server:channel": 34,
    "server:metadata": 33
  };

  class DebugLogger {
    constructor() {
      this._debuggers = new Map;
      if (process.env.DEBUG_FILE) {
        const ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|"), "g");
        const stream = _fs.default.createWriteStream(process.env.DEBUG_FILE);
        _utilsBundle.debug.log = (data) => {
          stream.write(data.replace(ansiRegex, ""));
          stream.write(`
`);
        };
      }
    }
    log(name, message) {
      let cachedDebugger = this._debuggers.get(name);
      if (!cachedDebugger) {
        cachedDebugger = (0, _utilsBundle.debug)(`pw:${name}`);
        this._debuggers.set(name, cachedDebugger);
        cachedDebugger.color = debugLoggerColorMap[name] || 0;
      }
      cachedDebugger(message);
    }
    isEnabled(name) {
      return _utilsBundle.debug.enabled(`pw:${name}`);
    }
  }
  var debugLogger = exports.debugLogger = new DebugLogger;
  var kLogCount = 150;

  class RecentLogsCollector {
    constructor() {
      this._logs = [];
    }
    log(message) {
      this._logs.push(message);
      if (this._logs.length === kLogCount * 2)
        this._logs.splice(0, kLogCount);
    }
    recentLogs() {
      if (this._logs.length > kLogCount)
        return this._logs.slice(-kLogCount);
      return this._logs;
    }
  }
  exports.RecentLogsCollector = RecentLogsCollector;
});

// node_modules/playwright-core/lib/utils/eventsHelper.js
var require_eventsHelper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.eventsHelper = undefined;

  class EventsHelper {
    static addEventListener(emitter, eventName, handler) {
      emitter.on(eventName, handler);
      return {
        emitter,
        eventName,
        handler
      };
    }
    static removeEventListeners(listeners) {
      for (const listener of listeners)
        listener.emitter.removeListener(listener.eventName, listener.handler);
      listeners.splice(0, listeners.length);
    }
  }
  var eventsHelper = exports.eventsHelper = EventsHelper;
});

// node_modules/playwright-core/lib/utils/isomorphic/stringUtils.js
var require_stringUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.cacheNormalizedWhitespaces = cacheNormalizedWhitespaces;
  exports.cssEscape = cssEscape;
  exports.escapeForAttributeSelector = escapeForAttributeSelector;
  exports.escapeForTextSelector = escapeForTextSelector;
  exports.escapeHTML = escapeHTML;
  exports.escapeHTMLAttribute = escapeHTMLAttribute;
  exports.escapeRegExp = escapeRegExp;
  exports.escapeTemplateString = escapeTemplateString;
  exports.escapeWithQuotes = escapeWithQuotes;
  exports.isString = isString;
  exports.longestCommonSubstring = longestCommonSubstring;
  exports.normalizeEscapedRegexQuotes = normalizeEscapedRegexQuotes;
  exports.normalizeWhiteSpace = normalizeWhiteSpace;
  exports.quoteCSSAttributeValue = quoteCSSAttributeValue;
  exports.toSnakeCase = toSnakeCase;
  exports.toTitleCase = toTitleCase;
  exports.trimString = trimString;
  exports.trimStringWithEllipsis = trimStringWithEllipsis;
  function escapeWithQuotes(text, char = "'") {
    const stringified = JSON.stringify(text);
    const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\"/g, '"');
    if (char === "'")
      return char + escapedText.replace(/[']/g, "\\'") + char;
    if (char === '"')
      return char + escapedText.replace(/["]/g, "\\\"") + char;
    if (char === "`")
      return char + escapedText.replace(/[`]/g, "`") + char;
    throw new Error("Invalid escape char");
  }
  function escapeTemplateString(text) {
    return text.replace(/\\/g, "\\\\").replace(/`/g, "\\`").replace(/\$\{/g, "\\${");
  }
  function isString(obj) {
    return typeof obj === "string" || obj instanceof String;
  }
  function toTitleCase(name) {
    return name.charAt(0).toUpperCase() + name.substring(1);
  }
  function toSnakeCase(name) {
    return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
  }
  function cssEscape(s) {
    let result = "";
    for (let i = 0;i < s.length; i++)
      result += cssEscapeOne(s, i);
    return result;
  }
  function quoteCSSAttributeValue(text) {
    return `"${cssEscape(text).replace(/\\ /g, " ")}"`;
  }
  function cssEscapeOne(s, i) {
    const c = s.charCodeAt(i);
    if (c === 0)
      return "�";
    if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))
      return "\\" + c.toString(16) + " ";
    if (i === 0 && c === 45 && s.length === 1)
      return "\\" + s.charAt(i);
    if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)
      return s.charAt(i);
    return "\\" + s.charAt(i);
  }
  var normalizedWhitespaceCache;
  function cacheNormalizedWhitespaces() {
    normalizedWhitespaceCache = new Map;
  }
  function normalizeWhiteSpace(text) {
    var _normalizedWhitespace;
    let result = (_normalizedWhitespace = normalizedWhitespaceCache) === null || _normalizedWhitespace === undefined ? undefined : _normalizedWhitespace.get(text);
    if (result === undefined) {
      var _normalizedWhitespace2;
      result = text.replace(/\u200b/g, "").trim().replace(/\s+/g, " ");
      (_normalizedWhitespace2 = normalizedWhitespaceCache) === null || _normalizedWhitespace2 === undefined || _normalizedWhitespace2.set(text, result);
    }
    return result;
  }
  function normalizeEscapedRegexQuotes(source) {
    return source.replace(/(^|[^\\])(\\\\)*\\(['"`])/g, "$1$2$3");
  }
  function escapeRegexForSelector(re) {
    if (re.unicode || re.unicodeSets)
      return String(re);
    return String(re).replace(/(^|[^\\])(\\\\)*(["'`])/g, "$1$2\\$3").replace(/>>/g, "\\>\\>");
  }
  function escapeForTextSelector(text, exact) {
    if (typeof text !== "string")
      return escapeRegexForSelector(text);
    return `${JSON.stringify(text)}${exact ? "s" : "i"}`;
  }
  function escapeForAttributeSelector(value, exact) {
    if (typeof value !== "string")
      return escapeRegexForSelector(value);
    return `"${value.replace(/\\/g, "\\\\").replace(/["]/g, "\\\"")}"${exact ? "s" : "i"}`;
  }
  function trimString(input, cap, suffix = "") {
    if (input.length <= cap)
      return input;
    const chars = [...input];
    if (chars.length > cap)
      return chars.slice(0, cap - suffix.length).join("") + suffix;
    return chars.join("");
  }
  function trimStringWithEllipsis(input, cap) {
    return trimString(input, cap, "…");
  }
  function escapeRegExp(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  var escaped = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  function escapeHTMLAttribute(s) {
    return s.replace(/[&<>"']/ug, (char) => escaped[char]);
  }
  function escapeHTML(s) {
    return s.replace(/[&<]/ug, (char) => escaped[char]);
  }
  function longestCommonSubstring(s1, s2) {
    const n = s1.length;
    const m = s2.length;
    let maxLen = 0;
    let endingIndex = 0;
    const dp = Array(n + 1).fill(null).map(() => Array(m + 1).fill(0));
    for (let i = 1;i <= n; i++) {
      for (let j = 1;j <= m; j++) {
        if (s1[i - 1] === s2[j - 1]) {
          dp[i][j] = dp[i - 1][j - 1] + 1;
          if (dp[i][j] > maxLen) {
            maxLen = dp[i][j];
            endingIndex = i;
          }
        }
      }
    }
    return s1.slice(endingIndex - maxLen, endingIndex);
  }
});

// node_modules/playwright-core/lib/utils/rtti.js
var require_rtti = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isError = isError;
  exports.isLikelyNpxGlobal = undefined;
  exports.isObject = isObject;
  exports.isRegExp = isRegExp;
  Object.defineProperty(exports, "isString", {
    enumerable: true,
    get: function() {
      return _stringUtils.isString;
    }
  });
  var _stringUtils = require_stringUtils();
  function isRegExp(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function isObject(obj) {
    return typeof obj === "object" && obj !== null;
  }
  function isError(obj) {
    var _Object$getPrototypeO;
    return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === undefined ? undefined : _Object$getPrototypeO.name) === "Error";
  }
  var isLikelyNpxGlobal = () => process.argv.length >= 2 && process.argv[1].includes("_npx");
  exports.isLikelyNpxGlobal = isLikelyNpxGlobal;
});

// node_modules/playwright-core/lib/utils/expectUtils.js
var require_expectUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeExpectedTextValues = serializeExpectedTextValues;
  var _rtti = require_rtti();
  function serializeExpectedTextValues(items, options = {}) {
    return items.map((i) => ({
      string: (0, _rtti.isString)(i) ? i : undefined,
      regexSource: (0, _rtti.isRegExp)(i) ? i.source : undefined,
      regexFlags: (0, _rtti.isRegExp)(i) ? i.flags : undefined,
      matchSubstring: options.matchSubstring,
      ignoreCase: options.ignoreCase,
      normalizeWhiteSpace: options.normalizeWhiteSpace
    }));
  }
});

// node_modules/playwright-core/lib/zipBundleImpl.js
var require_zipBundleImpl = __commonJS((exports, module) => {
  var ht = Object.create;
  var ae = Object.defineProperty;
  var pt = Object.getOwnPropertyDescriptor;
  var mt = Object.getOwnPropertyNames;
  var xt = Object.getPrototypeOf;
  var vt = Object.prototype.hasOwnProperty;
  var E = (e, r) => () => (r || e((r = { exports: {} }).exports, r), r.exports);
  var Et = (e, r) => {
    for (var t in r)
      ae(e, t, { get: r[t], enumerable: true });
  };
  var or = (e, r, t, n) => {
    if (r && typeof r == "object" || typeof r == "function")
      for (let i of mt(r))
        !vt.call(e, i) && i !== t && ae(e, i, { get: () => r[i], enumerable: !(n = pt(r, i)) || n.enumerable });
    return e;
  };
  var Ue = (e, r, t) => (t = e != null ? ht(xt(e)) : {}, or(r || !e || !e.__esModule ? ae(t, "default", { value: e, enumerable: true }) : t, e));
  var wt = (e) => or(ae({}, "__esModule", { value: true }), e);
  var Be = E((An, fr) => {
    var T = __require("buffer").Buffer, Te = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
    typeof Int32Array != "undefined" && (Te = new Int32Array(Te));
    function sr(e) {
      if (T.isBuffer(e))
        return e;
      var r = typeof T.alloc == "function" && typeof T.from == "function";
      if (typeof e == "number")
        return r ? T.alloc(e) : new T(e);
      if (typeof e == "string")
        return r ? T.from(e) : new T(e);
      throw new Error("input must be buffer, number, or string, received " + typeof e);
    }
    function gt(e) {
      var r = sr(4);
      return r.writeInt32BE(e, 0), r;
    }
    function Ne(e, r) {
      e = sr(e), T.isBuffer(r) && (r = r.readUInt32BE(0));
      for (var t = ~~r ^ -1, n = 0;n < e.length; n++)
        t = Te[(t ^ e[n]) & 255] ^ t >>> 8;
      return t ^ -1;
    }
    function Me() {
      return gt(Ne.apply(null, arguments));
    }
    Me.signed = function() {
      return Ne.apply(null, arguments);
    };
    Me.unsigned = function() {
      return Ne.apply(null, arguments) >>> 0;
    };
    fr.exports = Me;
  });
  var br = E((Ge) => {
    var ar = __require("fs"), he = __require("stream").Transform, ur = __require("stream").PassThrough, cr = __require("zlib"), We = __require("util"), yt = __require("events").EventEmitter, dr = Be();
    Ge.ZipFile = W;
    Ge.dateToDosDateTime = Cr;
    We.inherits(W, yt);
    function W() {
      this.outputStream = new ur, this.entries = [], this.outputStreamCursor = 0, this.ended = false, this.allDone = false, this.forceZip64Eocd = false;
    }
    W.prototype.addFile = function(e, r, t) {
      var n = this;
      r = pe(r, false), t == null && (t = {});
      var i = new m(r, false, t);
      n.entries.push(i), ar.stat(e, function(o, s) {
        if (o)
          return n.emit("error", o);
        if (!s.isFile())
          return n.emit("error", new Error("not a file: " + e));
        i.uncompressedSize = s.size, t.mtime == null && i.setLastModDate(s.mtime), t.mode == null && i.setFileAttributesMode(s.mode), i.setFileDataPumpFunction(function() {
          var f = ar.createReadStream(e);
          i.state = m.FILE_DATA_IN_PROGRESS, f.on("error", function(u) {
            n.emit("error", u);
          }), lr(n, i, f);
        }), M(n);
      });
    };
    W.prototype.addReadStream = function(e, r, t) {
      var n = this;
      r = pe(r, false), t == null && (t = {});
      var i = new m(r, false, t);
      n.entries.push(i), i.setFileDataPumpFunction(function() {
        i.state = m.FILE_DATA_IN_PROGRESS, lr(n, i, e);
      }), M(n);
    };
    W.prototype.addBuffer = function(e, r, t) {
      var n = this;
      if (r = pe(r, false), e.length > 1073741823)
        throw new Error("buffer too large: " + e.length + " > 1073741823");
      if (t == null && (t = {}), t.size != null)
        throw new Error("options.size not allowed");
      var i = new m(r, false, t);
      i.uncompressedSize = e.length, i.crc32 = dr.unsigned(e), i.crcAndFileSizeKnown = true, n.entries.push(i), i.compress ? cr.deflateRaw(e, function(s, f) {
        o(f);
      }) : o(e);
      function o(s) {
        i.compressedSize = s.length, i.setFileDataPumpFunction(function() {
          Z(n, s), Z(n, i.getDataDescriptor()), i.state = m.FILE_DATA_DONE, setImmediate(function() {
            M(n);
          });
        }), M(n);
      }
    };
    W.prototype.addEmptyDirectory = function(e, r) {
      var t = this;
      if (e = pe(e, true), r == null && (r = {}), r.size != null)
        throw new Error("options.size not allowed");
      if (r.compress != null)
        throw new Error("options.compress not allowed");
      var n = new m(e, true, r);
      t.entries.push(n), n.setFileDataPumpFunction(function() {
        Z(t, n.getDataDescriptor()), n.state = m.FILE_DATA_DONE, M(t);
      }), M(t);
    };
    var Ct = N([80, 75, 5, 6]);
    W.prototype.end = function(e, r) {
      if (typeof e == "function" && (r = e, e = null), e == null && (e = {}), !this.ended) {
        if (this.ended = true, this.finalSizeCallback = r, this.forceZip64Eocd = !!e.forceZip64Format, e.comment) {
          if (typeof e.comment == "string" ? this.comment = St(e.comment) : this.comment = e.comment, this.comment.length > 65535)
            throw new Error("comment is too large");
          if (te(this.comment, Ct))
            throw new Error("comment contains end of central directory record signature");
        } else
          this.comment = me;
        M(this);
      }
    };
    function Z(e, r) {
      e.outputStream.write(r), e.outputStreamCursor += r.length;
    }
    function lr(e, r, t) {
      var n = new He, i = new le, o = r.compress ? new cr.DeflateRaw : new ur, s = new le;
      t.pipe(n).pipe(i).pipe(o).pipe(s).pipe(e.outputStream, { end: false }), s.on("end", function() {
        if (r.crc32 = n.crc32, r.uncompressedSize == null)
          r.uncompressedSize = i.byteCount;
        else if (r.uncompressedSize !== i.byteCount)
          return e.emit("error", new Error("file data stream has unexpected number of bytes"));
        r.compressedSize = s.byteCount, e.outputStreamCursor += r.compressedSize, Z(e, r.getDataDescriptor()), r.state = m.FILE_DATA_DONE, M(e);
      });
    }
    function M(e) {
      if (e.allDone)
        return;
      if (e.ended && e.finalSizeCallback != null) {
        var r = bt(e);
        r != null && (e.finalSizeCallback(r), e.finalSizeCallback = null);
      }
      var t = n();
      function n() {
        for (var o = 0;o < e.entries.length; o++) {
          var s = e.entries[o];
          if (s.state < m.FILE_DATA_DONE)
            return s;
        }
        return null;
      }
      if (t != null) {
        if (t.state < m.READY_TO_PUMP_FILE_DATA || t.state === m.FILE_DATA_IN_PROGRESS)
          return;
        t.relativeOffsetOfLocalHeader = e.outputStreamCursor;
        var i = t.getLocalFileHeader();
        Z(e, i), t.doFileDataPump();
      } else
        e.ended && (e.offsetOfStartOfCentralDirectory = e.outputStreamCursor, e.entries.forEach(function(o) {
          var s = o.getCentralDirectoryRecord();
          Z(e, s);
        }), Z(e, Ft(e)), e.outputStream.end(), e.allDone = true);
    }
    function bt(e) {
      for (var r = 0, t = 0, n = 0;n < e.entries.length; n++) {
        var i = e.entries[n];
        if (i.compress)
          return -1;
        if (i.state >= m.READY_TO_PUMP_FILE_DATA) {
          if (i.uncompressedSize == null)
            return -1;
        } else if (i.uncompressedSize == null)
          return null;
        i.relativeOffsetOfLocalHeader = r;
        var o = i.useZip64Format();
        r += hr + i.utf8FileName.length, r += i.uncompressedSize, i.crcAndFileSizeKnown || (o ? r += gr : r += wr), t += yr + i.utf8FileName.length + i.fileComment.length, o && (t += Pe);
      }
      var s = 0;
      return (e.forceZip64Eocd || e.entries.length >= 65535 || t >= 65535 || r >= 4294967295) && (s += ce + qe), s += de + e.comment.length, r + t + s;
    }
    var ce = 56, qe = 20, de = 22;
    function Ft(e, r) {
      var t = false, n = e.entries.length;
      (e.forceZip64Eocd || e.entries.length >= 65535) && (n = 65535, t = true);
      var i = e.outputStreamCursor - e.offsetOfStartOfCentralDirectory, o = i;
      (e.forceZip64Eocd || i >= 4294967295) && (o = 4294967295, t = true);
      var s = e.offsetOfStartOfCentralDirectory;
      if ((e.forceZip64Eocd || e.offsetOfStartOfCentralDirectory >= 4294967295) && (s = 4294967295, t = true), r)
        return t ? ce + qe + de : de;
      var f = F(de + e.comment.length);
      if (f.writeUInt32LE(101010256, 0), f.writeUInt16LE(0, 4), f.writeUInt16LE(0, 6), f.writeUInt16LE(n, 8), f.writeUInt16LE(n, 10), f.writeUInt32LE(o, 12), f.writeUInt32LE(s, 16), f.writeUInt16LE(e.comment.length, 20), e.comment.copy(f, 22), !t)
        return f;
      var u = F(ce);
      u.writeUInt32LE(101075792, 0), I(u, ce - 12, 4), u.writeUInt16LE(xr, 12), u.writeUInt16LE(mr, 14), u.writeUInt32LE(0, 16), u.writeUInt32LE(0, 20), I(u, e.entries.length, 24), I(u, e.entries.length, 32), I(u, i, 40), I(u, e.offsetOfStartOfCentralDirectory, 48);
      var d = F(qe);
      return d.writeUInt32LE(117853008, 0), d.writeUInt32LE(0, 4), I(d, e.outputStreamCursor, 8), d.writeUInt32LE(1, 16), Buffer.concat([u, d, f]);
    }
    function pe(e, r) {
      if (e === "")
        throw new Error("empty metadataPath");
      if (e = e.replace(/\\/g, "/"), /^[a-zA-Z]:/.test(e) || /^\//.test(e))
        throw new Error("absolute path: " + e);
      if (e.split("/").indexOf("..") !== -1)
        throw new Error("invalid relative path: " + e);
      var t = /\/$/.test(e);
      if (r)
        t || (e += "/");
      else if (t)
        throw new Error("file path cannot end with '/': " + e);
      return e;
    }
    var me = F(0);
    function m(e, r, t) {
      if (this.utf8FileName = N(e), this.utf8FileName.length > 65535)
        throw new Error("utf8 file name too long. " + utf8FileName.length + " > 65535");
      if (this.isDirectory = r, this.state = m.WAITING_FOR_METADATA, this.setLastModDate(t.mtime != null ? t.mtime : new Date), t.mode != null ? this.setFileAttributesMode(t.mode) : this.setFileAttributesMode(r ? 16893 : 33204), r ? (this.crcAndFileSizeKnown = true, this.crc32 = 0, this.uncompressedSize = 0, this.compressedSize = 0) : (this.crcAndFileSizeKnown = false, this.crc32 = null, this.uncompressedSize = null, this.compressedSize = null, t.size != null && (this.uncompressedSize = t.size)), r ? this.compress = false : (this.compress = true, t.compress != null && (this.compress = !!t.compress)), this.forceZip64Format = !!t.forceZip64Format, t.fileComment) {
        if (typeof t.fileComment == "string" ? this.fileComment = N(t.fileComment, "utf-8") : this.fileComment = t.fileComment, this.fileComment.length > 65535)
          throw new Error("fileComment is too large");
      } else
        this.fileComment = me;
    }
    m.WAITING_FOR_METADATA = 0;
    m.READY_TO_PUMP_FILE_DATA = 1;
    m.FILE_DATA_IN_PROGRESS = 2;
    m.FILE_DATA_DONE = 3;
    m.prototype.setLastModDate = function(e) {
      var r = Cr(e);
      this.lastModFileTime = r.time, this.lastModFileDate = r.date;
    };
    m.prototype.setFileAttributesMode = function(e) {
      if ((e & 65535) !== e)
        throw new Error("invalid mode. expected: 0 <= " + e + " <= 65535");
      this.externalFileAttributes = e << 16 >>> 0;
    };
    m.prototype.setFileDataPumpFunction = function(e) {
      this.doFileDataPump = e, this.state = m.READY_TO_PUMP_FILE_DATA;
    };
    m.prototype.useZip64Format = function() {
      return this.forceZip64Format || this.uncompressedSize != null && this.uncompressedSize > 4294967294 || this.compressedSize != null && this.compressedSize > 4294967294 || this.relativeOffsetOfLocalHeader != null && this.relativeOffsetOfLocalHeader > 4294967294;
    };
    var hr = 30, pr = 20, mr = 45, xr = 831, vr = 2048, Er = 8;
    m.prototype.getLocalFileHeader = function() {
      var e = 0, r = 0, t = 0;
      this.crcAndFileSizeKnown && (e = this.crc32, r = this.compressedSize, t = this.uncompressedSize);
      var n = F(hr), i = vr;
      return this.crcAndFileSizeKnown || (i |= Er), n.writeUInt32LE(67324752, 0), n.writeUInt16LE(pr, 4), n.writeUInt16LE(i, 6), n.writeUInt16LE(this.getCompressionMethod(), 8), n.writeUInt16LE(this.lastModFileTime, 10), n.writeUInt16LE(this.lastModFileDate, 12), n.writeUInt32LE(e, 14), n.writeUInt32LE(r, 18), n.writeUInt32LE(t, 22), n.writeUInt16LE(this.utf8FileName.length, 26), n.writeUInt16LE(0, 28), Buffer.concat([n, this.utf8FileName]);
    };
    var wr = 16, gr = 24;
    m.prototype.getDataDescriptor = function() {
      if (this.crcAndFileSizeKnown)
        return me;
      if (this.useZip64Format()) {
        var e = F(gr);
        return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), I(e, this.compressedSize, 8), I(e, this.uncompressedSize, 16), e;
      } else {
        var e = F(wr);
        return e.writeUInt32LE(134695760, 0), e.writeUInt32LE(this.crc32, 4), e.writeUInt32LE(this.compressedSize, 8), e.writeUInt32LE(this.uncompressedSize, 12), e;
      }
    };
    var yr = 46, Pe = 28;
    m.prototype.getCentralDirectoryRecord = function() {
      var e = F(yr), r = vr;
      this.crcAndFileSizeKnown || (r |= Er);
      var t = this.compressedSize, n = this.uncompressedSize, i = this.relativeOffsetOfLocalHeader, o, s;
      return this.useZip64Format() ? (t = 4294967295, n = 4294967295, i = 4294967295, o = mr, s = F(Pe), s.writeUInt16LE(1, 0), s.writeUInt16LE(Pe - 4, 2), I(s, this.uncompressedSize, 4), I(s, this.compressedSize, 12), I(s, this.relativeOffsetOfLocalHeader, 20)) : (o = pr, s = me), e.writeUInt32LE(33639248, 0), e.writeUInt16LE(xr, 4), e.writeUInt16LE(o, 6), e.writeUInt16LE(r, 8), e.writeUInt16LE(this.getCompressionMethod(), 10), e.writeUInt16LE(this.lastModFileTime, 12), e.writeUInt16LE(this.lastModFileDate, 14), e.writeUInt32LE(this.crc32, 16), e.writeUInt32LE(t, 20), e.writeUInt32LE(n, 24), e.writeUInt16LE(this.utf8FileName.length, 28), e.writeUInt16LE(s.length, 30), e.writeUInt16LE(this.fileComment.length, 32), e.writeUInt16LE(0, 34), e.writeUInt16LE(0, 36), e.writeUInt32LE(this.externalFileAttributes, 38), e.writeUInt32LE(i, 42), Buffer.concat([e, this.utf8FileName, s, this.fileComment]);
    };
    m.prototype.getCompressionMethod = function() {
      var e = 0, r = 8;
      return this.compress ? r : e;
    };
    function Cr(e) {
      var r = 0;
      r |= e.getDate() & 31, r |= (e.getMonth() + 1 & 15) << 5, r |= (e.getFullYear() - 1980 & 127) << 9;
      var t = 0;
      return t |= Math.floor(e.getSeconds() / 2), t |= (e.getMinutes() & 63) << 5, t |= (e.getHours() & 31) << 11, { date: r, time: t };
    }
    function I(e, r, t) {
      var n = Math.floor(r / 4294967296), i = r % 4294967296;
      e.writeUInt32LE(i, t), e.writeUInt32LE(n, t + 4);
    }
    We.inherits(le, he);
    function le(e) {
      he.call(this, e), this.byteCount = 0;
    }
    le.prototype._transform = function(e, r, t) {
      this.byteCount += e.length, t(null, e);
    };
    We.inherits(He, he);
    function He(e) {
      he.call(this, e), this.crc32 = 0;
    }
    He.prototype._transform = function(e, r, t) {
      this.crc32 = dr.unsigned(e, this.crc32), t(null, e);
    };
    var Ze = "\x00☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
    if (Ze.length !== 256)
      throw new Error("assertion failure");
    var ue = null;
    function St(e) {
      if (/^[\x20-\x7e]*$/.test(e))
        return N(e, "utf-8");
      if (ue == null) {
        ue = {};
        for (var r = 0;r < Ze.length; r++)
          ue[Ze[r]] = r;
      }
      for (var t = F(e.length), r = 0;r < e.length; r++) {
        var n = ue[e[r]];
        if (n == null)
          throw new Error("character not encodable in CP437: " + JSON.stringify(e[r]));
        t[r] = n;
      }
      return t;
    }
    function F(e) {
      F = r;
      try {
        return F(e);
      } catch {
        return F = t, F(e);
      }
      function r(n) {
        return Buffer.allocUnsafe(n);
      }
      function t(n) {
        return new Buffer(n);
      }
    }
    function N(e, r) {
      N = t;
      try {
        return N(e, r);
      } catch {
        return N = n, N(e, r);
      }
      function t(i, o) {
        return Buffer.from(i, o);
      }
      function n(i, o) {
        return new Buffer(i, o);
      }
    }
    function te(e, r) {
      te = t;
      try {
        return te(e, r);
      } catch {
        return te = n, te(e, r);
      }
      function t(i, o) {
        return i.includes(o);
      }
      function n(i, o) {
        for (var s = 0;s <= i.length - o.length; s++)
          for (var f = 0;; f++) {
            if (f === o.length)
              return true;
            if (i[s + f] !== o[f])
              break;
          }
        return false;
      }
    }
  });
  var Lr = E((Dn, Ir) => {
    Ir.exports = xe;
    function xe() {
      this.pending = 0, this.max = 1 / 0, this.listeners = [], this.waiting = [], this.error = null;
    }
    xe.prototype.go = function(e) {
      this.pending < this.max ? Sr(this, e) : this.waiting.push(e);
    };
    xe.prototype.wait = function(e) {
      this.pending === 0 ? e(this.error) : this.listeners.push(e);
    };
    xe.prototype.hold = function() {
      return Fr(this);
    };
    function Fr(e) {
      e.pending += 1;
      var r = false;
      return t;
      function t(i) {
        if (r)
          throw new Error("callback called twice");
        if (r = true, e.error = e.error || i, e.pending -= 1, e.waiting.length > 0 && e.pending < e.max)
          Sr(e, e.waiting.shift());
        else if (e.pending === 0) {
          var o = e.listeners;
          e.listeners = [], o.forEach(n);
        }
      }
      function n(i) {
        i(e.error);
      }
    }
    function Sr(e, r) {
      r(Fr(e));
    }
  });
  var zr = E((ie) => {
    var ne = __require("fs"), ve = __require("util"), Ye = __require("stream"), Or = Ye.Readable, $e = Ye.Writable, It = Ye.PassThrough, Lt = Lr(), Ee = __require("events").EventEmitter;
    ie.createFromBuffer = Ot;
    ie.createFromFd = zt;
    ie.BufferSlicer = D;
    ie.FdSlicer = R;
    ve.inherits(R, Ee);
    function R(e, r) {
      r = r || {}, Ee.call(this), this.fd = e, this.pend = new Lt, this.pend.max = 1, this.refCount = 0, this.autoClose = !!r.autoClose;
    }
    R.prototype.read = function(e, r, t, n, i) {
      var o = this;
      o.pend.go(function(s) {
        ne.read(o.fd, e, r, t, n, function(f, u, d) {
          s(), i(f, u, d);
        });
      });
    };
    R.prototype.write = function(e, r, t, n, i) {
      var o = this;
      o.pend.go(function(s) {
        ne.write(o.fd, e, r, t, n, function(f, u, d) {
          s(), i(f, u, d);
        });
      });
    };
    R.prototype.createReadStream = function(e) {
      return new we(this, e);
    };
    R.prototype.createWriteStream = function(e) {
      return new ge(this, e);
    };
    R.prototype.ref = function() {
      this.refCount += 1;
    };
    R.prototype.unref = function() {
      var e = this;
      if (e.refCount -= 1, e.refCount > 0)
        return;
      if (e.refCount < 0)
        throw new Error("invalid unref");
      e.autoClose && ne.close(e.fd, r);
      function r(t) {
        t ? e.emit("error", t) : e.emit("close");
      }
    };
    ve.inherits(we, Or);
    function we(e, r) {
      r = r || {}, Or.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end, this.pos = this.start, this.destroyed = false;
    }
    we.prototype._read = function(e) {
      var r = this;
      if (!r.destroyed) {
        var t = Math.min(r._readableState.highWaterMark, e);
        if (r.endOffset != null && (t = Math.min(t, r.endOffset - r.pos)), t <= 0) {
          r.destroyed = true, r.push(null), r.context.unref();
          return;
        }
        r.context.pend.go(function(n) {
          if (r.destroyed)
            return n();
          var i = Buffer.alloc(t);
          ne.read(r.context.fd, i, 0, t, r.pos, function(o, s) {
            o ? r.destroy(o) : s === 0 ? (r.destroyed = true, r.push(null), r.context.unref()) : (r.pos += s, r.push(i.slice(0, s))), n();
          });
        });
      }
    };
    we.prototype.destroy = function(e) {
      this.destroyed || (e = e || new Error("stream destroyed"), this.destroyed = true, this.emit("error", e), this.context.unref());
    };
    ve.inherits(ge, $e);
    function ge(e, r) {
      r = r || {}, $e.call(this, r), this.context = e, this.context.ref(), this.start = r.start || 0, this.endOffset = r.end == null ? 1 / 0 : +r.end, this.bytesWritten = 0, this.pos = this.start, this.destroyed = false, this.on("finish", this.destroy.bind(this));
    }
    ge.prototype._write = function(e, r, t) {
      var n = this;
      if (!n.destroyed) {
        if (n.pos + e.length > n.endOffset) {
          var i = new Error("maximum file length exceeded");
          i.code = "ETOOBIG", n.destroy(), t(i);
          return;
        }
        n.context.pend.go(function(o) {
          if (n.destroyed)
            return o();
          ne.write(n.context.fd, e, 0, e.length, n.pos, function(s, f) {
            s ? (n.destroy(), o(), t(s)) : (n.bytesWritten += f, n.pos += f, n.emit("progress"), o(), t());
          });
        });
      }
    };
    ge.prototype.destroy = function() {
      this.destroyed || (this.destroyed = true, this.context.unref());
    };
    ve.inherits(D, Ee);
    function D(e, r) {
      Ee.call(this), r = r || {}, this.refCount = 0, this.buffer = e, this.maxChunkSize = r.maxChunkSize || Number.MAX_SAFE_INTEGER;
    }
    D.prototype.read = function(e, r, t, n, i) {
      var o = n + t, s = o - this.buffer.length, f = s > 0 ? s : t;
      this.buffer.copy(e, r, n, o), setImmediate(function() {
        i(null, f);
      });
    };
    D.prototype.write = function(e, r, t, n, i) {
      e.copy(this.buffer, n, r, r + t), setImmediate(function() {
        i(null, t, e);
      });
    };
    D.prototype.createReadStream = function(e) {
      e = e || {};
      var r = new It(e);
      r.destroyed = false, r.start = e.start || 0, r.endOffset = e.end, r.pos = r.endOffset || this.buffer.length;
      for (var t = this.buffer.slice(r.start, r.pos), n = 0;; ) {
        var i = n + this.maxChunkSize;
        if (i >= t.length) {
          n < t.length && r.write(t.slice(n, t.length));
          break;
        }
        r.write(t.slice(n, i)), n = i;
      }
      return r.end(), r.destroy = function() {
        r.destroyed = true;
      }, r;
    };
    D.prototype.createWriteStream = function(e) {
      var r = this;
      e = e || {};
      var t = new $e(e);
      return t.start = e.start || 0, t.endOffset = e.end == null ? this.buffer.length : +e.end, t.bytesWritten = 0, t.pos = t.start, t.destroyed = false, t._write = function(n, i, o) {
        if (!t.destroyed) {
          var s = t.pos + n.length;
          if (s > t.endOffset) {
            var f = new Error("maximum file length exceeded");
            f.code = "ETOOBIG", t.destroyed = true, o(f);
            return;
          }
          n.copy(r.buffer, t.pos, 0, n.length), t.bytesWritten += n.length, t.pos = s, t.emit("progress"), o();
        }
      }, t.destroy = function() {
        t.destroyed = true;
      }, t;
    };
    D.prototype.ref = function() {
      this.refCount += 1;
    };
    D.prototype.unref = function() {
      if (this.refCount -= 1, this.refCount < 0)
        throw new Error("invalid unref");
    };
    function Ot(e, r) {
      return new D(e, r);
    }
    function zt(e, r) {
      return new R(e, r);
    }
  });
  var Xe = E((A) => {
    var je = __require("fs"), _t = __require("zlib"), _r = zr(), At = Be(), be = __require("util"), Fe = __require("events").EventEmitter, Ar = __require("stream").Transform, Ve = __require("stream").PassThrough, Rt = __require("stream").Writable;
    A.open = Dt;
    A.fromFd = Rr;
    A.fromBuffer = Ut;
    A.fromRandomAccessReader = Ke;
    A.dosDateTimeToDate = Ur;
    A.validateFileName = Tr;
    A.ZipFile = B;
    A.Entry = oe;
    A.RandomAccessReader = q;
    function Dt(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = true), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.open(e, "r", function(n, i) {
        if (n)
          return t(n);
        Rr(i, r, function(o, s) {
          o && je.close(i, Ce), t(o, s);
        });
      });
    }
    function Rr(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose == null && (r.autoClose = false), r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false), t == null && (t = Ce), je.fstat(e, function(n, i) {
        if (n)
          return t(n);
        var o = _r.createFromFd(e, { autoClose: true });
        Ke(o, i.size, r, t);
      });
    }
    function Ut(e, r, t) {
      typeof r == "function" && (t = r, r = null), r == null && (r = {}), r.autoClose = false, r.lazyEntries == null && (r.lazyEntries = false), r.decodeStrings == null && (r.decodeStrings = true), r.validateEntrySizes == null && (r.validateEntrySizes = true), r.strictFileNames == null && (r.strictFileNames = false);
      var n = _r.createFromBuffer(e, { maxChunkSize: 65536 });
      Ke(n, e.length, r, t);
    }
    function Ke(e, r, t, n) {
      typeof t == "function" && (n = t, t = null), t == null && (t = {}), t.autoClose == null && (t.autoClose = true), t.lazyEntries == null && (t.lazyEntries = false), t.decodeStrings == null && (t.decodeStrings = true);
      var i = !!t.decodeStrings;
      if (t.validateEntrySizes == null && (t.validateEntrySizes = true), t.strictFileNames == null && (t.strictFileNames = false), n == null && (n = Ce), typeof r != "number")
        throw new Error("expected totalSize parameter to be a number");
      if (r > Number.MAX_SAFE_INTEGER)
        throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");
      e.ref();
      var o = 22, s = 65535, f = Math.min(o + s, r), u = _(f), d = r - u.length;
      $(e, u, 0, f, d, function(a) {
        if (a)
          return n(a);
        for (var c = f - o;c >= 0; c -= 1)
          if (u.readUInt32LE(c) === 101010256) {
            var l = u.slice(c), x = l.readUInt16LE(4);
            if (x !== 0)
              return n(new Error("multi-disk zip files are not supported: found disk number: " + x));
            var g = l.readUInt16LE(10), p = l.readUInt32LE(16), h = l.readUInt16LE(20), v = l.length - o;
            if (h !== v)
              return n(new Error("invalid comment length. expected: " + v + ". found: " + h));
            var w = i ? ye(l, 22, l.length, false) : l.slice(22);
            if (!(g === 65535 || p === 4294967295))
              return n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames));
            var b = _(20), U = d + c - b.length;
            $(e, b, 0, b.length, U, function(Y) {
              if (Y)
                return n(Y);
              if (b.readUInt32LE(0) !== 117853008)
                return n(new Error("invalid zip64 end of central directory locator signature"));
              var ee = j(b, 8), P = _(56);
              $(e, P, 0, P.length, ee, function(re) {
                return re ? n(re) : P.readUInt32LE(0) !== 101075792 ? n(new Error("invalid zip64 end of central directory record signature")) : (g = j(P, 32), p = j(P, 48), n(null, new B(e, p, r, g, w, t.autoClose, t.lazyEntries, i, t.validateEntrySizes, t.strictFileNames)));
              });
            });
            return;
          }
        n(new Error("end of central directory record signature not found"));
      });
    }
    be.inherits(B, Fe);
    function B(e, r, t, n, i, o, s, f, u, d) {
      var a = this;
      Fe.call(a), a.reader = e, a.reader.on("error", function(c) {
        Dr(a, c);
      }), a.reader.once("close", function() {
        a.emit("close");
      }), a.readEntryCursor = r, a.fileSize = t, a.entryCount = n, a.comment = i, a.entriesRead = 0, a.autoClose = !!o, a.lazyEntries = !!s, a.decodeStrings = !!f, a.validateEntrySizes = !!u, a.strictFileNames = !!d, a.isOpen = true, a.emittedError = false, a.lazyEntries || a._readEntry();
    }
    B.prototype.close = function() {
      this.isOpen && (this.isOpen = false, this.reader.unref());
    };
    function L(e, r) {
      e.autoClose && e.close(), Dr(e, r);
    }
    function Dr(e, r) {
      e.emittedError || (e.emittedError = true, e.emit("error", r));
    }
    B.prototype.readEntry = function() {
      if (!this.lazyEntries)
        throw new Error("readEntry() called without lazyEntries:true");
      this._readEntry();
    };
    B.prototype._readEntry = function() {
      var e = this;
      if (e.entryCount === e.entriesRead) {
        setImmediate(function() {
          e.autoClose && e.close(), !e.emittedError && e.emit("end");
        });
        return;
      }
      if (!e.emittedError) {
        var r = _(46);
        $(e.reader, r, 0, r.length, e.readEntryCursor, function(t) {
          if (t)
            return L(e, t);
          if (!e.emittedError) {
            var n = new oe, i = r.readUInt32LE(0);
            if (i !== 33639248)
              return L(e, new Error("invalid central directory file header signature: 0x" + i.toString(16)));
            if (n.versionMadeBy = r.readUInt16LE(4), n.versionNeededToExtract = r.readUInt16LE(6), n.generalPurposeBitFlag = r.readUInt16LE(8), n.compressionMethod = r.readUInt16LE(10), n.lastModFileTime = r.readUInt16LE(12), n.lastModFileDate = r.readUInt16LE(14), n.crc32 = r.readUInt32LE(16), n.compressedSize = r.readUInt32LE(20), n.uncompressedSize = r.readUInt32LE(24), n.fileNameLength = r.readUInt16LE(28), n.extraFieldLength = r.readUInt16LE(30), n.fileCommentLength = r.readUInt16LE(32), n.internalFileAttributes = r.readUInt16LE(36), n.externalFileAttributes = r.readUInt32LE(38), n.relativeOffsetOfLocalHeader = r.readUInt32LE(42), n.generalPurposeBitFlag & 64)
              return L(e, new Error("strong encryption is not supported"));
            e.readEntryCursor += 46, r = _(n.fileNameLength + n.extraFieldLength + n.fileCommentLength), $(e.reader, r, 0, r.length, e.readEntryCursor, function(o) {
              if (o)
                return L(e, o);
              if (!e.emittedError) {
                var s = (n.generalPurposeBitFlag & 2048) !== 0;
                n.fileName = e.decodeStrings ? ye(r, 0, n.fileNameLength, s) : r.slice(0, n.fileNameLength);
                var f = n.fileNameLength + n.extraFieldLength, u = r.slice(n.fileNameLength, f);
                n.extraFields = [];
                for (var d = 0;d < u.length - 3; ) {
                  var a = u.readUInt16LE(d + 0), c = u.readUInt16LE(d + 2), l = d + 4, x = l + c;
                  if (x > u.length)
                    return L(e, new Error("extra field length exceeds extra field buffer size"));
                  var g = _(c);
                  u.copy(g, 0, l, x), n.extraFields.push({ id: a, data: g }), d = x;
                }
                if (n.fileComment = e.decodeStrings ? ye(r, f, f + n.fileCommentLength, s) : r.slice(f, f + n.fileCommentLength), n.comment = n.fileComment, e.readEntryCursor += r.length, e.entriesRead += 1, n.uncompressedSize === 4294967295 || n.compressedSize === 4294967295 || n.relativeOffsetOfLocalHeader === 4294967295) {
                  for (var p = null, d = 0;d < n.extraFields.length; d++) {
                    var h = n.extraFields[d];
                    if (h.id === 1) {
                      p = h.data;
                      break;
                    }
                  }
                  if (p == null)
                    return L(e, new Error("expected zip64 extended information extra field"));
                  var v = 0;
                  if (n.uncompressedSize === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include uncompressed size"));
                    n.uncompressedSize = j(p, v), v += 8;
                  }
                  if (n.compressedSize === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include compressed size"));
                    n.compressedSize = j(p, v), v += 8;
                  }
                  if (n.relativeOffsetOfLocalHeader === 4294967295) {
                    if (v + 8 > p.length)
                      return L(e, new Error("zip64 extended information extra field does not include relative header offset"));
                    n.relativeOffsetOfLocalHeader = j(p, v), v += 8;
                  }
                }
                if (e.decodeStrings)
                  for (var d = 0;d < n.extraFields.length; d++) {
                    var h = n.extraFields[d];
                    if (h.id === 28789) {
                      if (h.data.length < 6 || h.data.readUInt8(0) !== 1)
                        continue;
                      var w = h.data.readUInt32LE(1);
                      if (At.unsigned(r.slice(0, n.fileNameLength)) !== w)
                        continue;
                      n.fileName = ye(h.data, 5, h.data.length, true);
                      break;
                    }
                  }
                if (e.validateEntrySizes && n.compressionMethod === 0) {
                  var b = n.uncompressedSize;
                  if (n.isEncrypted() && (b += 12), n.compressedSize !== b) {
                    var U = "compressed/uncompressed size mismatch for stored file: " + n.compressedSize + " != " + n.uncompressedSize;
                    return L(e, new Error(U));
                  }
                }
                if (e.decodeStrings) {
                  e.strictFileNames || (n.fileName = n.fileName.replace(/\\/g, "/"));
                  var Y = Tr(n.fileName, e.validateFileNameOptions);
                  if (Y != null)
                    return L(e, new Error(Y));
                }
                e.emit("entry", n), e.lazyEntries || e._readEntry();
              }
            });
          }
        });
      }
    };
    B.prototype.openReadStream = function(e, r, t) {
      var n = this, i = 0, o = e.compressedSize;
      if (t == null)
        t = r, r = {};
      else {
        if (r.decrypt != null) {
          if (!e.isEncrypted())
            throw new Error("options.decrypt can only be specified for encrypted entries");
          if (r.decrypt !== false)
            throw new Error("invalid options.decrypt value: " + r.decrypt);
          if (e.isCompressed() && r.decompress !== false)
            throw new Error("entry is encrypted and compressed, and options.decompress !== false");
        }
        if (r.decompress != null) {
          if (!e.isCompressed())
            throw new Error("options.decompress can only be specified for compressed entries");
          if (!(r.decompress === false || r.decompress === true))
            throw new Error("invalid options.decompress value: " + r.decompress);
        }
        if (r.start != null || r.end != null) {
          if (e.isCompressed() && r.decompress !== false)
            throw new Error("start/end range not allowed for compressed entry without options.decompress === false");
          if (e.isEncrypted() && r.decrypt !== false)
            throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false");
        }
        if (r.start != null) {
          if (i = r.start, i < 0)
            throw new Error("options.start < 0");
          if (i > e.compressedSize)
            throw new Error("options.start > entry.compressedSize");
        }
        if (r.end != null) {
          if (o = r.end, o < 0)
            throw new Error("options.end < 0");
          if (o > e.compressedSize)
            throw new Error("options.end > entry.compressedSize");
          if (o < i)
            throw new Error("options.end < options.start");
        }
      }
      if (!n.isOpen)
        return t(new Error("closed"));
      if (e.isEncrypted() && r.decrypt !== false)
        return t(new Error("entry is encrypted, and options.decrypt !== false"));
      n.reader.ref();
      var s = _(30);
      $(n.reader, s, 0, s.length, e.relativeOffsetOfLocalHeader, function(f) {
        try {
          if (f)
            return t(f);
          var u = s.readUInt32LE(0);
          if (u !== 67324752)
            return t(new Error("invalid local file header signature: 0x" + u.toString(16)));
          var d = s.readUInt16LE(26), a = s.readUInt16LE(28), c = e.relativeOffsetOfLocalHeader + s.length + d + a, l;
          if (e.compressionMethod === 0)
            l = false;
          else if (e.compressionMethod === 8)
            l = r.decompress != null ? r.decompress : true;
          else
            return t(new Error("unsupported compression method: " + e.compressionMethod));
          var x = c, g = x + e.compressedSize;
          if (e.compressedSize !== 0 && g > n.fileSize)
            return t(new Error("file data overflows file bounds: " + x + " + " + e.compressedSize + " > " + n.fileSize));
          var p = n.reader.createReadStream({ start: x + i, end: x + o }), h = p;
          if (l) {
            var v = false, w = _t.createInflateRaw();
            p.on("error", function(b) {
              setImmediate(function() {
                v || w.emit("error", b);
              });
            }), p.pipe(w), n.validateEntrySizes ? (h = new se(e.uncompressedSize), w.on("error", function(b) {
              setImmediate(function() {
                v || h.emit("error", b);
              });
            }), w.pipe(h)) : h = w, h.destroy = function() {
              v = true, w !== h && w.unpipe(h), p.unpipe(w), p.destroy();
            };
          }
          t(null, h);
        } finally {
          n.reader.unref();
        }
      });
    };
    function oe() {
    }
    oe.prototype.getLastModDate = function() {
      return Ur(this.lastModFileDate, this.lastModFileTime);
    };
    oe.prototype.isEncrypted = function() {
      return (this.generalPurposeBitFlag & 1) !== 0;
    };
    oe.prototype.isCompressed = function() {
      return this.compressionMethod === 8;
    };
    function Ur(e, r) {
      var t = e & 31, n = (e >> 5 & 15) - 1, i = (e >> 9 & 127) + 1980, o = 0, s = (r & 31) * 2, f = r >> 5 & 63, u = r >> 11 & 31;
      return new Date(i, n, t, u, f, s, o);
    }
    function Tr(e) {
      return e.indexOf("\\") !== -1 ? "invalid characters in fileName: " + e : /^[a-zA-Z]:/.test(e) || /^\//.test(e) ? "absolute path: " + e : e.split("/").indexOf("..") !== -1 ? "invalid relative path: " + e : null;
    }
    function $(e, r, t, n, i, o) {
      if (n === 0)
        return setImmediate(function() {
          o(null, _(0));
        });
      e.read(r, t, n, i, function(s, f) {
        if (s)
          return o(s);
        if (f < n)
          return o(new Error("unexpected EOF"));
        o();
      });
    }
    be.inherits(se, Ar);
    function se(e) {
      Ar.call(this), this.actualByteCount = 0, this.expectedByteCount = e;
    }
    se.prototype._transform = function(e, r, t) {
      if (this.actualByteCount += e.length, this.actualByteCount > this.expectedByteCount) {
        var n = "too many bytes in the stream. expected " + this.expectedByteCount + ". got at least " + this.actualByteCount;
        return t(new Error(n));
      }
      t(null, e);
    };
    se.prototype._flush = function(e) {
      if (this.actualByteCount < this.expectedByteCount) {
        var r = "not enough bytes in the stream. expected " + this.expectedByteCount + ". got only " + this.actualByteCount;
        return e(new Error(r));
      }
      e();
    };
    be.inherits(q, Fe);
    function q() {
      Fe.call(this), this.refCount = 0;
    }
    q.prototype.ref = function() {
      this.refCount += 1;
    };
    q.prototype.unref = function() {
      var e = this;
      if (e.refCount -= 1, e.refCount > 0)
        return;
      if (e.refCount < 0)
        throw new Error("invalid unref");
      e.close(r);
      function r(t) {
        if (t)
          return e.emit("error", t);
        e.emit("close");
      }
    };
    q.prototype.createReadStream = function(e) {
      var { start: r, end: t } = e;
      if (r === t) {
        var n = new Ve;
        return setImmediate(function() {
          n.end();
        }), n;
      }
      var i = this._readStreamForRange(r, t), o = false, s = new Se(this);
      i.on("error", function(u) {
        setImmediate(function() {
          o || s.emit("error", u);
        });
      }), s.destroy = function() {
        i.unpipe(s), s.unref(), i.destroy();
      };
      var f = new se(t - r);
      return s.on("error", function(u) {
        setImmediate(function() {
          o || f.emit("error", u);
        });
      }), f.destroy = function() {
        o = true, s.unpipe(f), s.destroy();
      }, i.pipe(s).pipe(f);
    };
    q.prototype._readStreamForRange = function(e, r) {
      throw new Error("not implemented");
    };
    q.prototype.read = function(e, r, t, n, i) {
      var o = this.createReadStream({ start: n, end: n + t }), s = new Rt, f = 0;
      s._write = function(u, d, a) {
        u.copy(e, r + f, 0, u.length), f += u.length, a();
      }, s.on("finish", i), o.on("error", function(u) {
        i(u);
      }), o.pipe(s);
    };
    q.prototype.close = function(e) {
      setImmediate(e);
    };
    be.inherits(Se, Ve);
    function Se(e) {
      Ve.call(this), this.context = e, this.context.ref(), this.unreffedYet = false;
    }
    Se.prototype._flush = function(e) {
      this.unref(), e();
    };
    Se.prototype.unref = function(e) {
      this.unreffedYet || (this.unreffedYet = true, this.context.unref());
    };
    var Tt = "\x00☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";
    function ye(e, r, t, n) {
      if (n)
        return e.toString("utf8", r, t);
      for (var i = "", o = r;o < t; o++)
        i += Tt[e[o]];
      return i;
    }
    function j(e, r) {
      var t = e.readUInt32LE(r), n = e.readUInt32LE(r + 4);
      return n * 4294967296 + t;
    }
    var _;
    typeof Buffer.allocUnsafe == "function" ? _ = function(e) {
      return Buffer.allocUnsafe(e);
    } : _ = function(e) {
      return new Buffer(e);
    };
    function Ce(e) {
      if (e)
        throw e;
    }
  });
  var Mr = E((Nn, Nr) => {
    var V = 1000, K = V * 60, X = K * 60, H = X * 24, Nt = H * 7, Mt = H * 365.25;
    Nr.exports = function(e, r) {
      r = r || {};
      var t = typeof e;
      if (t === "string" && e.length > 0)
        return Bt(e);
      if (t === "number" && isFinite(e))
        return r.long ? Pt(e) : qt(e);
      throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(e));
    };
    function Bt(e) {
      if (e = String(e), !(e.length > 100)) {
        var r = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);
        if (r) {
          var t = parseFloat(r[1]), n = (r[2] || "ms").toLowerCase();
          switch (n) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return t * Mt;
            case "weeks":
            case "week":
            case "w":
              return t * Nt;
            case "days":
            case "day":
            case "d":
              return t * H;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return t * X;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return t * K;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return t * V;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return t;
            default:
              return;
          }
        }
      }
    }
    function qt(e) {
      var r = Math.abs(e);
      return r >= H ? Math.round(e / H) + "d" : r >= X ? Math.round(e / X) + "h" : r >= K ? Math.round(e / K) + "m" : r >= V ? Math.round(e / V) + "s" : e + "ms";
    }
    function Pt(e) {
      var r = Math.abs(e);
      return r >= H ? Ie(e, r, H, "day") : r >= X ? Ie(e, r, X, "hour") : r >= K ? Ie(e, r, K, "minute") : r >= V ? Ie(e, r, V, "second") : e + " ms";
    }
    function Ie(e, r, t, n) {
      var i = r >= t * 1.5;
      return Math.round(e / t) + " " + n + (i ? "s" : "");
    }
  });
  var Je = E((Mn, Br) => {
    function Zt(e) {
      t.debug = t, t.default = t, t.coerce = u, t.disable = o, t.enable = i, t.enabled = s, t.humanize = Mr(), t.destroy = d, Object.keys(e).forEach((a) => {
        t[a] = e[a];
      }), t.names = [], t.skips = [], t.formatters = {};
      function r(a) {
        let c = 0;
        for (let l = 0;l < a.length; l++)
          c = (c << 5) - c + a.charCodeAt(l), c |= 0;
        return t.colors[Math.abs(c) % t.colors.length];
      }
      t.selectColor = r;
      function t(a) {
        let c, l = null, x, g;
        function p(...h) {
          if (!p.enabled)
            return;
          let v = p, w = Number(new Date), b = w - (c || w);
          v.diff = b, v.prev = c, v.curr = w, c = w, h[0] = t.coerce(h[0]), typeof h[0] != "string" && h.unshift("%O");
          let U = 0;
          h[0] = h[0].replace(/%([a-zA-Z%])/g, (ee, P) => {
            if (ee === "%%")
              return "%";
            U++;
            let re = t.formatters[P];
            if (typeof re == "function") {
              let lt = h[U];
              ee = re.call(v, lt), h.splice(U, 1), U--;
            }
            return ee;
          }), t.formatArgs.call(v, h), (v.log || t.log).apply(v, h);
        }
        return p.namespace = a, p.useColors = t.useColors(), p.color = t.selectColor(a), p.extend = n, p.destroy = t.destroy, Object.defineProperty(p, "enabled", { enumerable: true, configurable: false, get: () => l !== null ? l : (x !== t.namespaces && (x = t.namespaces, g = t.enabled(a)), g), set: (h) => {
          l = h;
        } }), typeof t.init == "function" && t.init(p), p;
      }
      function n(a, c) {
        let l = t(this.namespace + (typeof c == "undefined" ? ":" : c) + a);
        return l.log = this.log, l;
      }
      function i(a) {
        t.save(a), t.namespaces = a, t.names = [], t.skips = [];
        let c, l = (typeof a == "string" ? a : "").split(/[\s,]+/), x = l.length;
        for (c = 0;c < x; c++)
          l[c] && (a = l[c].replace(/\*/g, ".*?"), a[0] === "-" ? t.skips.push(new RegExp("^" + a.slice(1) + "$")) : t.names.push(new RegExp("^" + a + "$")));
      }
      function o() {
        let a = [...t.names.map(f), ...t.skips.map(f).map((c) => "-" + c)].join(",");
        return t.enable(""), a;
      }
      function s(a) {
        if (a[a.length - 1] === "*")
          return true;
        let c, l;
        for (c = 0, l = t.skips.length;c < l; c++)
          if (t.skips[c].test(a))
            return false;
        for (c = 0, l = t.names.length;c < l; c++)
          if (t.names[c].test(a))
            return true;
        return false;
      }
      function f(a) {
        return a.toString().substring(2, a.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function u(a) {
        return a instanceof Error ? a.stack || a.message : a;
      }
      function d() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      return t.enable(t.load()), t;
    }
    Br.exports = Zt;
  });
  var qr = E((S, Le) => {
    S.formatArgs = Ht;
    S.save = Gt;
    S.load = Yt;
    S.useColors = Wt;
    S.storage = $t();
    S.destroy = (() => {
      let e = false;
      return () => {
        e || (e = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })();
    S.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];
    function Wt() {
      return typeof window != "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs) ? true : typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/) ? false : typeof document != "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window != "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator != "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function Ht(e) {
      if (e[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + e[0] + (this.useColors ? "%c " : " ") + "+" + Le.exports.humanize(this.diff), !this.useColors)
        return;
      let r = "color: " + this.color;
      e.splice(1, 0, r, "color: inherit");
      let t = 0, n = 0;
      e[0].replace(/%[a-zA-Z%]/g, (i) => {
        i !== "%%" && (t++, i === "%c" && (n = t));
      }), e.splice(n, 0, r);
    }
    S.log = console.debug || console.log || (() => {
    });
    function Gt(e) {
      try {
        e ? S.storage.setItem("debug", e) : S.storage.removeItem("debug");
      } catch {
      }
    }
    function Yt() {
      let e;
      try {
        e = S.storage.getItem("debug");
      } catch {
      }
      return !e && typeof process != "undefined" && "env" in process && (e = process.env.DEBUG), e;
    }
    function $t() {
      try {
        return localStorage;
      } catch {
      }
    }
    Le.exports = Je()(S);
    var { formatters: jt } = Le.exports;
    jt.j = function(e) {
      try {
        return JSON.stringify(e);
      } catch (r) {
        return "[UnexpectedJSONParseError]: " + r.message;
      }
    };
  });
  var Zr = E((Bn, Pr) => {
    Pr.exports = (e, r) => {
      r = r || process.argv;
      let t = e.startsWith("-") ? "" : e.length === 1 ? "-" : "--", n = r.indexOf(t + e), i = r.indexOf("--");
      return n !== -1 && (i === -1 ? true : n < i);
    };
  });
  var Hr = E((qn, Wr) => {
    var Vt = __require("os"), O = Zr(), C = process.env, J;
    O("no-color") || O("no-colors") || O("color=false") ? J = false : (O("color") || O("colors") || O("color=true") || O("color=always")) && (J = true);
    "FORCE_COLOR" in C && (J = C.FORCE_COLOR.length === 0 || parseInt(C.FORCE_COLOR, 10) !== 0);
    function Kt(e) {
      return e === 0 ? false : { level: e, hasBasic: true, has256: e >= 2, has16m: e >= 3 };
    }
    function Xt(e) {
      if (J === false)
        return 0;
      if (O("color=16m") || O("color=full") || O("color=truecolor"))
        return 3;
      if (O("color=256"))
        return 2;
      if (e && !e.isTTY && J !== true)
        return 0;
      let r = J ? 1 : 0;
      if (process.platform === "win32") {
        let t = Vt.release().split(".");
        return Number(process.versions.node.split(".")[0]) >= 8 && Number(t[0]) >= 10 && Number(t[2]) >= 10586 ? Number(t[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in C)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((t) => (t in C)) || C.CI_NAME === "codeship" ? 1 : r;
      if ("TEAMCITY_VERSION" in C)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(C.TEAMCITY_VERSION) ? 1 : 0;
      if (C.COLORTERM === "truecolor")
        return 3;
      if ("TERM_PROGRAM" in C) {
        let t = parseInt((C.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (C.TERM_PROGRAM) {
          case "iTerm.app":
            return t >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(C.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(C.TERM) || ("COLORTERM" in C) ? 1 : (C.TERM === "dumb", r);
    }
    function Qe(e) {
      let r = Xt(e);
      return Kt(r);
    }
    Wr.exports = { supportsColor: Qe, stdout: Qe(process.stdout), stderr: Qe(process.stderr) };
  });
  var Yr = E((y, ze) => {
    var Jt = __require("tty"), Oe = __require("util");
    y.init = on;
    y.log = rn;
    y.formatArgs = kt;
    y.save = tn;
    y.load = nn;
    y.useColors = Qt;
    y.destroy = Oe.deprecate(() => {
    }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    y.colors = [6, 2, 3, 4, 5, 1];
    try {
      let e = Hr();
      e && (e.stderr || e).level >= 2 && (y.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
    } catch {
    }
    y.inspectOpts = Object.keys(process.env).filter((e) => /^debug_/i.test(e)).reduce((e, r) => {
      let t = r.substring(6).toLowerCase().replace(/_([a-z])/g, (i, o) => o.toUpperCase()), n = process.env[r];
      return /^(yes|on|true|enabled)$/i.test(n) ? n = true : /^(no|off|false|disabled)$/i.test(n) ? n = false : n === "null" ? n = null : n = Number(n), e[t] = n, e;
    }, {});
    function Qt() {
      return "colors" in y.inspectOpts ? !!y.inspectOpts.colors : Jt.isatty(process.stderr.fd);
    }
    function kt(e) {
      let { namespace: r, useColors: t } = this;
      if (t) {
        let n = this.color, i = "\x1B[3" + (n < 8 ? n : "8;5;" + n), o = `  ${i};1m${r} \x1B[0m`;
        e[0] = o + e[0].split(`
`).join(`
` + o), e.push(i + "m+" + ze.exports.humanize(this.diff) + "\x1B[0m");
      } else
        e[0] = en() + r + " " + e[0];
    }
    function en() {
      return y.inspectOpts.hideDate ? "" : new Date().toISOString() + " ";
    }
    function rn(...e) {
      return process.stderr.write(Oe.format(...e) + `
`);
    }
    function tn(e) {
      e ? process.env.DEBUG = e : delete process.env.DEBUG;
    }
    function nn() {
      return process.env.DEBUG;
    }
    function on(e) {
      e.inspectOpts = {};
      let r = Object.keys(y.inspectOpts);
      for (let t = 0;t < r.length; t++)
        e.inspectOpts[r[t]] = y.inspectOpts[r[t]];
    }
    ze.exports = Je()(y);
    var { formatters: Gr } = ze.exports;
    Gr.o = function(e) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts).split(`
`).map((r) => r.trim()).join(" ");
    };
    Gr.O = function(e) {
      return this.inspectOpts.colors = this.useColors, Oe.inspect(e, this.inspectOpts);
    };
  });
  var $r = E((Pn, ke) => {
    typeof process == "undefined" || process.type === "renderer" || false || process.__nwjs ? ke.exports = qr() : ke.exports = Yr();
  });
  var Kr = E((Zn, Vr) => {
    Vr.exports = jr;
    function jr(e, r) {
      if (e && r)
        return jr(e)(r);
      if (typeof e != "function")
        throw new TypeError("need wrapper function");
      return Object.keys(e).forEach(function(n) {
        t[n] = e[n];
      }), t;
      function t() {
        for (var n = new Array(arguments.length), i = 0;i < n.length; i++)
          n[i] = arguments[i];
        var o = e.apply(this, n), s = n[n.length - 1];
        return typeof o == "function" && o !== s && Object.keys(s).forEach(function(f) {
          o[f] = s[f];
        }), o;
      }
    }
  });
  var rr = E((Wn, er) => {
    var Xr = Kr();
    er.exports = Xr(_e);
    er.exports.strict = Xr(Jr);
    _e.proto = _e(function() {
      Object.defineProperty(Function.prototype, "once", { value: function() {
        return _e(this);
      }, configurable: true }), Object.defineProperty(Function.prototype, "onceStrict", { value: function() {
        return Jr(this);
      }, configurable: true });
    });
    function _e(e) {
      var r = function() {
        return r.called ? r.value : (r.called = true, r.value = e.apply(this, arguments));
      };
      return r.called = false, r;
    }
    function Jr(e) {
      var r = function() {
        if (r.called)
          throw new Error(r.onceError);
        return r.called = true, r.value = e.apply(this, arguments);
      }, t = e.name || "Function wrapped with `once`";
      return r.onceError = t + " shouldn't be called more than once", r.called = false, r;
    }
  });
  var et = E((Hn, kr) => {
    var sn = rr(), fn = function() {
    }, an = function(e) {
      return e.setHeader && typeof e.abort == "function";
    }, un = function(e) {
      return e.stdio && Array.isArray(e.stdio) && e.stdio.length === 3;
    }, Qr = function(e, r, t) {
      if (typeof r == "function")
        return Qr(e, null, r);
      r || (r = {}), t = sn(t || fn);
      var { _writableState: n, _readableState: i } = e, o = r.readable || r.readable !== false && e.readable, s = r.writable || r.writable !== false && e.writable, f = false, u = function() {
        e.writable || d();
      }, d = function() {
        s = false, o || t.call(e);
      }, a = function() {
        o = false, s || t.call(e);
      }, c = function(h) {
        t.call(e, h ? new Error("exited with error code: " + h) : null);
      }, l = function(h) {
        t.call(e, h);
      }, x = function() {
        process.nextTick(g);
      }, g = function() {
        if (!f) {
          if (o && !(i && i.ended && !i.destroyed))
            return t.call(e, new Error("premature close"));
          if (s && !(n && n.ended && !n.destroyed))
            return t.call(e, new Error("premature close"));
        }
      }, p = function() {
        e.req.on("finish", d);
      };
      return an(e) ? (e.on("complete", d), e.on("abort", x), e.req ? p() : e.on("request", p)) : s && !n && (e.on("end", u), e.on("close", u)), un(e) && e.on("exit", c), e.on("end", a), e.on("finish", d), r.error !== false && e.on("error", l), e.on("close", x), function() {
        f = true, e.removeListener("complete", d), e.removeListener("abort", x), e.removeListener("request", p), e.req && e.req.removeListener("finish", d), e.removeListener("end", u), e.removeListener("close", u), e.removeListener("finish", d), e.removeListener("exit", c), e.removeListener("end", a), e.removeListener("error", l), e.removeListener("close", x);
      };
    };
    kr.exports = Qr;
  });
  var nt = E((Gn, tt) => {
    var cn = rr(), dn = et(), tr = __require("fs"), fe = function() {
    }, ln = /^v?\.0/.test(process.version), Ae = function(e) {
      return typeof e == "function";
    }, hn = function(e) {
      return !ln || !tr ? false : (e instanceof (tr.ReadStream || fe) || e instanceof (tr.WriteStream || fe)) && Ae(e.close);
    }, pn = function(e) {
      return e.setHeader && Ae(e.abort);
    }, mn = function(e, r, t, n) {
      n = cn(n);
      var i = false;
      e.on("close", function() {
        i = true;
      }), dn(e, { readable: r, writable: t }, function(s) {
        if (s)
          return n(s);
        i = true, n();
      });
      var o = false;
      return function(s) {
        if (!i && !o) {
          if (o = true, hn(e))
            return e.close(fe);
          if (pn(e))
            return e.abort();
          if (Ae(e.destroy))
            return e.destroy();
          n(s || new Error("stream was destroyed"));
        }
      };
    }, rt = function(e) {
      e();
    }, xn = function(e, r) {
      return e.pipe(r);
    }, vn = function() {
      var e = Array.prototype.slice.call(arguments), r = Ae(e[e.length - 1] || fe) && e.pop() || fe;
      if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
        throw new Error("pump requires two streams per minimum");
      var t, n = e.map(function(i, o) {
        var s = o < e.length - 1, f = o > 0;
        return mn(i, s, f, function(u) {
          t || (t = u), u && n.forEach(rt), !s && (n.forEach(rt), r(t));
        });
      });
      return e.reduce(xn);
    };
    tt.exports = vn;
  });
  var ot = E((Yn, it) => {
    var { PassThrough: En } = __require("stream");
    it.exports = (e) => {
      e = { ...e };
      let { array: r } = e, { encoding: t } = e, n = t === "buffer", i = false;
      r ? i = !(t || n) : t = t || "utf8", n && (t = null);
      let o = new En({ objectMode: i });
      t && o.setEncoding(t);
      let s = 0, f = [];
      return o.on("data", (u) => {
        f.push(u), i ? s = f.length : s += u.length;
      }), o.getBufferedValue = () => r ? f : n ? Buffer.concat(f, s) : f.join(""), o.getBufferedLength = () => s, o;
    };
  });
  var st = E(($n, Q) => {
    var { constants: wn } = __require("buffer"), gn = nt(), yn = ot(), Re = class extends Error {
      constructor() {
        super("maxBuffer exceeded"), this.name = "MaxBufferError";
      }
    };
    async function De(e, r) {
      if (!e)
        return Promise.reject(new Error("Expected a stream"));
      r = { maxBuffer: 1 / 0, ...r };
      let { maxBuffer: t } = r, n;
      return await new Promise((i, o) => {
        let s = (f) => {
          f && n.getBufferedLength() <= wn.MAX_LENGTH && (f.bufferedData = n.getBufferedValue()), o(f);
        };
        n = gn(e, yn(r), (f) => {
          if (f) {
            s(f);
            return;
          }
          i();
        }), n.on("data", () => {
          n.getBufferedLength() > t && s(new Re);
        });
      }), n.getBufferedValue();
    }
    Q.exports = De;
    Q.exports.default = De;
    Q.exports.buffer = (e, r) => De(e, { ...r, encoding: "buffer" });
    Q.exports.array = (e, r) => De(e, { ...r, array: true });
    Q.exports.MaxBufferError = Re;
  });
  var at = E((jn, ft) => {
    var z2 = $r()("extract-zip"), { createWriteStream: Cn, promises: k } = __require("fs"), bn = st(), G = __require("path"), { promisify: ir } = __require("util"), Fn = __require("stream"), Sn = Xe(), In = ir(Sn.open), Ln = ir(Fn.pipeline), nr = class {
      constructor(r, t) {
        this.zipPath = r, this.opts = t;
      }
      async extract() {
        return z2("opening", this.zipPath, "with opts", this.opts), this.zipfile = await In(this.zipPath, { lazyEntries: true }), this.canceled = false, new Promise((r, t) => {
          this.zipfile.on("error", (n) => {
            this.canceled = true, t(n);
          }), this.zipfile.readEntry(), this.zipfile.on("close", () => {
            this.canceled || (z2("zip extraction complete"), r());
          }), this.zipfile.on("entry", async (n) => {
            if (this.canceled) {
              z2("skipping entry", n.fileName, { cancelled: this.canceled });
              return;
            }
            if (z2("zipfile entry", n.fileName), n.fileName.startsWith("__MACOSX/")) {
              this.zipfile.readEntry();
              return;
            }
            let i = G.dirname(G.join(this.opts.dir, n.fileName));
            try {
              await k.mkdir(i, { recursive: true });
              let o = await k.realpath(i);
              if (G.relative(this.opts.dir, o).split(G.sep).includes(".."))
                throw new Error(`Out of bound path "${o}" found while processing file ${n.fileName}`);
              await this.extractEntry(n), z2("finished processing", n.fileName), this.zipfile.readEntry();
            } catch (o) {
              this.canceled = true, this.zipfile.close(), t(o);
            }
          });
        });
      }
      async extractEntry(r) {
        if (this.canceled) {
          z2("skipping entry extraction", r.fileName, { cancelled: this.canceled });
          return;
        }
        this.opts.onEntry && this.opts.onEntry(r, this.zipfile);
        let t = G.join(this.opts.dir, r.fileName), n = r.externalFileAttributes >> 16 & 65535, i = 61440, o = 16384, s = 40960, f = (n & i) === s, u = (n & i) === o;
        !u && r.fileName.endsWith("/") && (u = true);
        let d = r.versionMadeBy >> 8;
        u || (u = d === 0 && r.externalFileAttributes === 16), z2("extracting entry", { filename: r.fileName, isDir: u, isSymlink: f });
        let a = this.getExtractedMode(n, u) & 511, c = u ? t : G.dirname(t), l = { recursive: true };
        if (u && (l.mode = a), z2("mkdir", { dir: c, ...l }), await k.mkdir(c, l), u)
          return;
        z2("opening read stream", t);
        let x = await ir(this.zipfile.openReadStream.bind(this.zipfile))(r);
        if (f) {
          let g = await bn(x);
          z2("creating symlink", g, t), await k.symlink(g, t);
        } else
          await Ln(x, Cn(t, { mode: a }));
      }
      getExtractedMode(r, t) {
        let n = r;
        return n === 0 && (t ? (this.opts.defaultDirMode && (n = parseInt(this.opts.defaultDirMode, 10)), n || (n = 493)) : (this.opts.defaultFileMode && (n = parseInt(this.opts.defaultFileMode, 10)), n || (n = 420))), n;
      }
    };
    ft.exports = async function(e, r) {
      if (z2("creating target directory", r.dir), !G.isAbsolute(r.dir))
        throw new Error("Target directory is expected to be absolute");
      return await k.mkdir(r.dir, { recursive: true }), r.dir = await k.realpath(r.dir), new nr(e, r).extract();
    };
  });
  var zn = {};
  Et(zn, { extract: () => On, yauzl: () => dt, yazl: () => ct });
  module.exports = wt(zn);
  var ct = Ue(br());
  var dt = Ue(Xe());
  var ut = Ue(at());
  var On = ut.default;
});

// node_modules/playwright-core/lib/zipBundle.js
var require_zipBundle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.yazl = exports.yauzl = exports.extract = undefined;
  var yazl2 = exports.yazl = require_zipBundleImpl().yazl;
  var yauzl2 = exports.yauzl = require_zipBundleImpl().yauzl;
  var extract2 = exports.extract = require_zipBundleImpl().extract;
});

// node_modules/playwright-core/lib/utils/fileUtils.js
var require_fileUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SerializedFS = undefined;
  exports.canAccessFile = canAccessFile;
  exports.copyFileAndMakeWritable = copyFileAndMakeWritable;
  exports.fileUploadSizeLimit = exports.existsAsync = undefined;
  exports.mkdirIfNeeded = mkdirIfNeeded;
  exports.removeFolders = removeFolders;
  exports.sanitizeForFilePath = sanitizeForFilePath;
  exports.toPosixPath = toPosixPath;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _manualPromise = require_manualPromise();
  var _zipBundle = require_zipBundle();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var fileUploadSizeLimit = exports.fileUploadSizeLimit = 50 * 1024 * 1024;
  var existsAsync = (path) => new Promise((resolve) => _fs.default.stat(path, (err) => resolve(!err)));
  exports.existsAsync = existsAsync;
  async function mkdirIfNeeded(filePath) {
    await _fs.default.promises.mkdir(_path.default.dirname(filePath), {
      recursive: true
    }).catch(() => {
    });
  }
  async function removeFolders(dirs) {
    return await Promise.all(dirs.map((dir) => _fs.default.promises.rm(dir, {
      recursive: true,
      force: true,
      maxRetries: 10
    }).catch((e) => e)));
  }
  function canAccessFile(file) {
    if (!file)
      return false;
    try {
      _fs.default.accessSync(file);
      return true;
    } catch (e) {
      return false;
    }
  }
  async function copyFileAndMakeWritable(from, to) {
    await _fs.default.promises.copyFile(from, to);
    await _fs.default.promises.chmod(to, 436);
  }
  function sanitizeForFilePath(s) {
    return s.replace(/[\x00-\x2C\x2E-\x2F\x3A-\x40\x5B-\x60\x7B-\x7F]+/g, "-");
  }
  function toPosixPath(aPath) {
    return aPath.split(_path.default.sep).join(_path.default.posix.sep);
  }

  class SerializedFS {
    constructor() {
      this._buffers = new Map;
      this._error = undefined;
      this._operations = [];
      this._operationsDone = undefined;
      this._operationsDone = new _manualPromise.ManualPromise;
      this._operationsDone.resolve();
    }
    mkdir(dir) {
      this._appendOperation({
        op: "mkdir",
        dir
      });
    }
    writeFile(file, content, skipIfExists) {
      this._buffers.delete(file);
      this._appendOperation({
        op: "writeFile",
        file,
        content,
        skipIfExists
      });
    }
    appendFile(file, text, flush) {
      if (!this._buffers.has(file))
        this._buffers.set(file, []);
      this._buffers.get(file).push(text);
      if (flush)
        this._flushFile(file);
    }
    _flushFile(file) {
      const buffer = this._buffers.get(file);
      if (buffer === undefined)
        return;
      const content = buffer.join("");
      this._buffers.delete(file);
      this._appendOperation({
        op: "appendFile",
        file,
        content
      });
    }
    copyFile(from, to) {
      this._flushFile(from);
      this._buffers.delete(to);
      this._appendOperation({
        op: "copyFile",
        from,
        to
      });
    }
    async syncAndGetError() {
      for (const file of this._buffers.keys())
        this._flushFile(file);
      await this._operationsDone;
      return this._error;
    }
    zip(entries, zipFileName) {
      for (const file of this._buffers.keys())
        this._flushFile(file);
      this._appendOperation({
        op: "zip",
        entries,
        zipFileName
      });
    }
    _appendOperation(op) {
      const last = this._operations[this._operations.length - 1];
      if ((last === null || last === undefined ? undefined : last.op) === "appendFile" && op.op === "appendFile" && last.file === op.file) {
        last.content += op.content;
        return;
      }
      this._operations.push(op);
      if (this._operationsDone.isDone())
        this._performOperations();
    }
    async _performOperations() {
      this._operationsDone = new _manualPromise.ManualPromise;
      while (this._operations.length) {
        const op = this._operations.shift();
        if (this._error)
          continue;
        try {
          await this._performOperation(op);
        } catch (e) {
          this._error = e;
        }
      }
      this._operationsDone.resolve();
    }
    async _performOperation(op) {
      switch (op.op) {
        case "mkdir": {
          await _fs.default.promises.mkdir(op.dir, {
            recursive: true
          });
          return;
        }
        case "writeFile": {
          if (op.skipIfExists)
            await _fs.default.promises.writeFile(op.file, op.content, {
              flag: "wx"
            }).catch(() => {
            });
          else
            await _fs.default.promises.writeFile(op.file, op.content);
          return;
        }
        case "copyFile": {
          await _fs.default.promises.copyFile(op.from, op.to);
          return;
        }
        case "appendFile": {
          await _fs.default.promises.appendFile(op.file, op.content);
          return;
        }
        case "zip": {
          const zipFile = new _zipBundle.yazl.ZipFile;
          const result = new _manualPromise.ManualPromise;
          zipFile.on("error", (error) => result.reject(error));
          for (const entry of op.entries)
            zipFile.addFile(entry.value, entry.name);
          zipFile.end();
          zipFile.outputStream.pipe(_fs.default.createWriteStream(op.zipFileName)).on("close", () => result.resolve()).on("error", (error) => result.reject(error));
          await result;
          return;
        }
      }
    }
  }
  exports.SerializedFS = SerializedFS;
});

// node_modules/playwright-core/lib/utils/headers.js
var require_headers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.headersArrayToObject = headersArrayToObject;
  exports.headersObjectToArray = headersObjectToArray;
  function headersObjectToArray(headers, separator, setCookieSeparator) {
    if (!setCookieSeparator)
      setCookieSeparator = separator;
    const result = [];
    for (const name in headers) {
      const values = headers[name];
      if (values === undefined)
        continue;
      if (separator) {
        const sep = name.toLowerCase() === "set-cookie" ? setCookieSeparator : separator;
        for (const value of values.split(sep))
          result.push({
            name,
            value: value.trim()
          });
      } else {
        result.push({
          name,
          value: values
        });
      }
    }
    return result;
  }
  function headersArrayToObject(headers, lowerCase) {
    const result = {};
    for (const {
      name,
      value
    } of headers)
      result[lowerCase ? name.toLowerCase() : name] = value;
    return result;
  }
});

// node_modules/playwright-core/lib/utils/hostPlatform.js
var require_hostPlatform = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isOfficiallySupportedPlatform = exports.hostPlatform = undefined;
  var _os = _interopRequireDefault(__require("os"));
  var _linuxUtils = require_linuxUtils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function calculatePlatform() {
    if (process.env.PLAYWRIGHT_HOST_PLATFORM_OVERRIDE) {
      return {
        hostPlatform: process.env.PLAYWRIGHT_HOST_PLATFORM_OVERRIDE,
        isOfficiallySupportedPlatform: false
      };
    }
    const platform = _os.default.platform();
    if (platform === "darwin") {
      const ver = _os.default.release().split(".").map((a) => parseInt(a, 10));
      let macVersion = "";
      if (ver[0] < 18) {
        macVersion = "mac10.13";
      } else if (ver[0] === 18) {
        macVersion = "mac10.14";
      } else if (ver[0] === 19) {
        macVersion = "mac10.15";
      } else {
        const LAST_STABLE_MACOS_MAJOR_VERSION = 15;
        macVersion = "mac" + Math.min(ver[0] - 9, LAST_STABLE_MACOS_MAJOR_VERSION);
        if (_os.default.cpus().some((cpu) => cpu.model.includes("Apple")))
          macVersion += "-arm64";
      }
      return {
        hostPlatform: macVersion,
        isOfficiallySupportedPlatform: true
      };
    }
    if (platform === "linux") {
      if (!["x64", "arm64"].includes(_os.default.arch()))
        return {
          hostPlatform: "<unknown>",
          isOfficiallySupportedPlatform: false
        };
      const archSuffix = "-" + _os.default.arch();
      const distroInfo = (0, _linuxUtils.getLinuxDistributionInfoSync)();
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "ubuntu" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "pop" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "neon" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "tuxedo") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "ubuntu";
        if (parseInt(distroInfo.version, 10) <= 19)
          return {
            hostPlatform: "ubuntu18.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        if (parseInt(distroInfo.version, 10) <= 21)
          return {
            hostPlatform: "ubuntu20.04" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if (parseInt(distroInfo.version, 10) <= 22)
          return {
            hostPlatform: "ubuntu22.04" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        return {
          hostPlatform: "ubuntu24.04" + archSuffix,
          isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
        };
      }
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "linuxmint") {
        const mintMajor = parseInt(distroInfo.version, 10);
        if (mintMajor <= 20)
          return {
            hostPlatform: "ubuntu20.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        if (mintMajor === 21)
          return {
            hostPlatform: "ubuntu22.04" + archSuffix,
            isOfficiallySupportedPlatform: false
          };
        return {
          hostPlatform: "ubuntu24.04" + archSuffix,
          isOfficiallySupportedPlatform: false
        };
      }
      if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "debian" || (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "raspbian") {
        const isOfficiallySupportedPlatform2 = (distroInfo === null || distroInfo === undefined ? undefined : distroInfo.id) === "debian";
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "11")
          return {
            hostPlatform: "debian11" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "12")
          return {
            hostPlatform: "debian12" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
        if ((distroInfo === null || distroInfo === undefined ? undefined : distroInfo.version) === "")
          return {
            hostPlatform: "debian12" + archSuffix,
            isOfficiallySupportedPlatform: isOfficiallySupportedPlatform2
          };
      }
      return {
        hostPlatform: "ubuntu20.04" + archSuffix,
        isOfficiallySupportedPlatform: false
      };
    }
    if (platform === "win32")
      return {
        hostPlatform: "win64",
        isOfficiallySupportedPlatform: true
      };
    return {
      hostPlatform: "<unknown>",
      isOfficiallySupportedPlatform: false
    };
  }
  var {
    hostPlatform,
    isOfficiallySupportedPlatform
  } = calculatePlatform();
  exports.isOfficiallySupportedPlatform = isOfficiallySupportedPlatform;
  exports.hostPlatform = hostPlatform;
});

// node_modules/playwright-core/lib/utils/httpServer.js
var require_httpServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HttpServer = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _utilsBundle = require_utilsBundle();
  var _debug = require_debug();
  var _network = require_network();
  var _manualPromise = require_manualPromise();
  var _crypto = require_crypto();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class HttpServer {
    constructor() {
      this._server = undefined;
      this._urlPrefixPrecise = "";
      this._urlPrefixHumanReadable = "";
      this._port = 0;
      this._started = false;
      this._routes = [];
      this._wsGuid = undefined;
      this._server = (0, _network.createHttpServer)(this._onRequest.bind(this));
    }
    server() {
      return this._server;
    }
    routePrefix(prefix, handler) {
      this._routes.push({
        prefix,
        handler
      });
    }
    routePath(path, handler) {
      this._routes.push({
        exact: path,
        handler
      });
    }
    port() {
      return this._port;
    }
    async _tryStart(port, host) {
      const errorPromise = new _manualPromise.ManualPromise;
      const errorListener = (error) => errorPromise.reject(error);
      this._server.on("error", errorListener);
      try {
        this._server.listen(port, host);
        await Promise.race([new Promise((cb) => this._server.once("listening", cb)), errorPromise]);
      } finally {
        this._server.removeListener("error", errorListener);
      }
    }
    createWebSocket(transport, guid) {
      (0, _debug.assert)(!this._wsGuid, "can only create one main websocket transport per server");
      this._wsGuid = guid || (0, _crypto.createGuid)();
      const wss = new _utilsBundle.wsServer({
        server: this._server,
        path: "/" + this._wsGuid
      });
      wss.on("connection", (ws) => {
        transport.onconnect();
        transport.sendEvent = (method, params) => ws.send(JSON.stringify({
          method,
          params
        }));
        transport.close = () => ws.close();
        ws.on("message", async (message) => {
          const {
            id,
            method,
            params
          } = JSON.parse(String(message));
          try {
            const result = await transport.dispatch(method, params);
            ws.send(JSON.stringify({
              id,
              result
            }));
          } catch (e) {
            ws.send(JSON.stringify({
              id,
              error: String(e)
            }));
          }
        });
        ws.on("close", () => transport.onclose());
        ws.on("error", () => transport.onclose());
      });
    }
    wsGuid() {
      return this._wsGuid;
    }
    async start(options = {}) {
      (0, _debug.assert)(!this._started, "server already started");
      this._started = true;
      const host = options.host || "localhost";
      if (options.preferredPort) {
        try {
          await this._tryStart(options.preferredPort, host);
        } catch (e) {
          if (!e || !e.message || !e.message.includes("EADDRINUSE"))
            throw e;
          await this._tryStart(undefined, host);
        }
      } else {
        await this._tryStart(options.port, host);
      }
      const address = this._server.address();
      (0, _debug.assert)(address, "Could not bind server socket");
      if (typeof address === "string") {
        this._urlPrefixPrecise = address;
        this._urlPrefixHumanReadable = address;
      } else {
        this._port = address.port;
        const resolvedHost = address.family === "IPv4" ? address.address : `[${address.address}]`;
        this._urlPrefixPrecise = `http://${resolvedHost}:${address.port}`;
        this._urlPrefixHumanReadable = `http://${host}:${address.port}`;
      }
    }
    async stop() {
      await new Promise((cb) => this._server.close(cb));
    }
    urlPrefix(purpose) {
      return purpose === "human-readable" ? this._urlPrefixHumanReadable : this._urlPrefixPrecise;
    }
    serveFile(request, response, absoluteFilePath, headers) {
      try {
        for (const [name, value] of Object.entries(headers || {}))
          response.setHeader(name, value);
        if (request.headers.range)
          this._serveRangeFile(request, response, absoluteFilePath);
        else
          this._serveFile(response, absoluteFilePath);
        return true;
      } catch (e) {
        return false;
      }
    }
    _serveFile(response, absoluteFilePath) {
      const content = _fs.default.readFileSync(absoluteFilePath);
      response.statusCode = 200;
      const contentType = _utilsBundle.mime.getType(_path.default.extname(absoluteFilePath)) || "application/octet-stream";
      response.setHeader("Content-Type", contentType);
      response.setHeader("Content-Length", content.byteLength);
      response.end(content);
    }
    _serveRangeFile(request, response, absoluteFilePath) {
      const range = request.headers.range;
      if (!range || !range.startsWith("bytes=") || range.includes(", ") || [...range].filter((char) => char === "-").length !== 1) {
        response.statusCode = 400;
        return response.end("Bad request");
      }
      const [startStr, endStr] = range.replace(/bytes=/, "").split("-");
      let start;
      let end;
      const size = _fs.default.statSync(absoluteFilePath).size;
      if (startStr !== "" && endStr === "") {
        start = +startStr;
        end = size - 1;
      } else if (startStr === "" && endStr !== "") {
        start = size - +endStr;
        end = size - 1;
      } else {
        start = +startStr;
        end = +endStr;
      }
      if (Number.isNaN(start) || Number.isNaN(end) || start >= size || end >= size || start > end) {
        response.writeHead(416, {
          "Content-Range": `bytes */${size}`
        });
        return response.end();
      }
      response.writeHead(206, {
        "Content-Range": `bytes ${start}-${end}/${size}`,
        "Accept-Ranges": "bytes",
        "Content-Length": end - start + 1,
        "Content-Type": _utilsBundle.mime.getType(_path.default.extname(absoluteFilePath))
      });
      const readable = _fs.default.createReadStream(absoluteFilePath, {
        start,
        end
      });
      readable.pipe(response);
    }
    _onRequest(request, response) {
      response.setHeader("Access-Control-Allow-Origin", "*");
      response.setHeader("Access-Control-Request-Method", "*");
      response.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET");
      if (request.headers.origin)
        response.setHeader("Access-Control-Allow-Headers", request.headers.origin);
      if (request.method === "OPTIONS") {
        response.writeHead(200);
        response.end();
        return;
      }
      request.on("error", () => response.end());
      try {
        if (!request.url) {
          response.end();
          return;
        }
        const url = new URL("http://localhost" + request.url);
        for (const route of this._routes) {
          if (route.exact && url.pathname === route.exact && route.handler(request, response))
            return;
          if (route.prefix && url.pathname.startsWith(route.prefix) && route.handler(request, response))
            return;
        }
        response.statusCode = 404;
        response.end();
      } catch (e) {
        response.end();
      }
    }
  }
  exports.HttpServer = HttpServer;
});

// node_modules/playwright-core/lib/utils/isomorphic/cssTokenizer.js
var require_cssTokenizer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WhitespaceToken = exports.URLToken = exports.SuffixMatchToken = exports.SubstringMatchToken = exports.StringValuedToken = exports.StringToken = exports.SemicolonToken = exports.PrefixMatchToken = exports.PercentageToken = exports.OpenSquareToken = exports.OpenParenToken = exports.OpenCurlyToken = exports.NumberToken = exports.InvalidCharacterError = exports.IncludeMatchToken = exports.IdentToken = exports.HashToken = exports.GroupingToken = exports.FunctionToken = exports.EOFToken = exports.DimensionToken = exports.DelimToken = exports.DashMatchToken = exports.CommaToken = exports.ColumnToken = exports.ColonToken = exports.CloseSquareToken = exports.CloseParenToken = exports.CloseCurlyToken = exports.CSSParserToken = exports.CDOToken = exports.CDCToken = exports.BadURLToken = exports.BadStringToken = exports.AtKeywordToken = undefined;
  exports.tokenize = tokenize;
  var between = function(num, first, last) {
    return num >= first && num <= last;
  };
  function digit(code) {
    return between(code, 48, 57);
  }
  function hexdigit(code) {
    return digit(code) || between(code, 65, 70) || between(code, 97, 102);
  }
  function uppercaseletter(code) {
    return between(code, 65, 90);
  }
  function lowercaseletter(code) {
    return between(code, 97, 122);
  }
  function letter(code) {
    return uppercaseletter(code) || lowercaseletter(code);
  }
  function nonascii(code) {
    return code >= 128;
  }
  function namestartchar(code) {
    return letter(code) || nonascii(code) || code === 95;
  }
  function namechar(code) {
    return namestartchar(code) || digit(code) || code === 45;
  }
  function nonprintable(code) {
    return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
  }
  function newline(code) {
    return code === 10;
  }
  function whitespace(code) {
    return newline(code) || code === 9 || code === 32;
  }
  var maximumallowedcodepoint = 1114111;

  class InvalidCharacterError extends Error {
    constructor(message) {
      super(message);
      this.name = "InvalidCharacterError";
    }
  }
  exports.InvalidCharacterError = InvalidCharacterError;
  function preprocess(str) {
    const codepoints = [];
    for (let i = 0;i < str.length; i++) {
      let code = str.charCodeAt(i);
      if (code === 13 && str.charCodeAt(i + 1) === 10) {
        code = 10;
        i++;
      }
      if (code === 13 || code === 12)
        code = 10;
      if (code === 0)
        code = 65533;
      if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
        const lead = code - 55296;
        const trail = str.charCodeAt(i + 1) - 56320;
        code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
        i++;
      }
      codepoints.push(code);
    }
    return codepoints;
  }
  function stringFromCode(code) {
    if (code <= 65535)
      return String.fromCharCode(code);
    code -= Math.pow(2, 16);
    const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
    const trail = code % Math.pow(2, 10) + 56320;
    return String.fromCharCode(lead) + String.fromCharCode(trail);
  }
  function tokenize(str1) {
    const str = preprocess(str1);
    let i = -1;
    const tokens = [];
    let code;
    let line = 0;
    let column = 0;
    let lastLineLength = 0;
    const incrLineno = function() {
      line += 1;
      lastLineLength = column;
      column = 0;
    };
    const locStart = {
      line,
      column
    };
    const codepoint = function(i2) {
      if (i2 >= str.length)
        return -1;
      return str[i2];
    };
    const next = function(num) {
      if (num === undefined)
        num = 1;
      if (num > 3)
        throw "Spec Error: no more than three codepoints of lookahead.";
      return codepoint(i + num);
    };
    const consume = function(num) {
      if (num === undefined)
        num = 1;
      i += num;
      code = codepoint(i);
      if (newline(code))
        incrLineno();
      else
        column += num;
      return true;
    };
    const reconsume = function() {
      i -= 1;
      if (newline(code)) {
        line -= 1;
        column = lastLineLength;
      } else {
        column -= 1;
      }
      locStart.line = line;
      locStart.column = column;
      return true;
    };
    const eof = function(codepoint2) {
      if (codepoint2 === undefined)
        codepoint2 = code;
      return codepoint2 === -1;
    };
    const donothing = function() {
    };
    const parseerror = function() {
    };
    const consumeAToken = function() {
      consumeComments();
      consume();
      if (whitespace(code)) {
        while (whitespace(next()))
          consume();
        return new WhitespaceToken;
      } else if (code === 34) {
        return consumeAStringToken();
      } else if (code === 35) {
        if (namechar(next()) || areAValidEscape(next(1), next(2))) {
          const token = new HashToken("");
          if (wouldStartAnIdentifier(next(1), next(2), next(3)))
            token.type = "id";
          token.value = consumeAName();
          return token;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 36) {
        if (next() === 61) {
          consume();
          return new SuffixMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 39) {
        return consumeAStringToken();
      } else if (code === 40) {
        return new OpenParenToken;
      } else if (code === 41) {
        return new CloseParenToken;
      } else if (code === 42) {
        if (next() === 61) {
          consume();
          return new SubstringMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 43) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 44) {
        return new CommaToken;
      } else if (code === 45) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else if (next(1) === 45 && next(2) === 62) {
          consume(2);
          return new CDCToken;
        } else if (startsWithAnIdentifier()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 46) {
        if (startsWithANumber()) {
          reconsume();
          return consumeANumericToken();
        } else {
          return new DelimToken(code);
        }
      } else if (code === 58) {
        return new ColonToken;
      } else if (code === 59) {
        return new SemicolonToken;
      } else if (code === 60) {
        if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
          consume(3);
          return new CDOToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 64) {
        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
          return new AtKeywordToken(consumeAName());
        else
          return new DelimToken(code);
      } else if (code === 91) {
        return new OpenSquareToken;
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          reconsume();
          return consumeAnIdentlikeToken();
        } else {
          parseerror();
          return new DelimToken(code);
        }
      } else if (code === 93) {
        return new CloseSquareToken;
      } else if (code === 94) {
        if (next() === 61) {
          consume();
          return new PrefixMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 123) {
        return new OpenCurlyToken;
      } else if (code === 124) {
        if (next() === 61) {
          consume();
          return new DashMatchToken;
        } else if (next() === 124) {
          consume();
          return new ColumnToken;
        } else {
          return new DelimToken(code);
        }
      } else if (code === 125) {
        return new CloseCurlyToken;
      } else if (code === 126) {
        if (next() === 61) {
          consume();
          return new IncludeMatchToken;
        } else {
          return new DelimToken(code);
        }
      } else if (digit(code)) {
        reconsume();
        return consumeANumericToken();
      } else if (namestartchar(code)) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else if (eof()) {
        return new EOFToken;
      } else {
        return new DelimToken(code);
      }
    };
    const consumeComments = function() {
      while (next(1) === 47 && next(2) === 42) {
        consume(2);
        while (true) {
          consume();
          if (code === 42 && next() === 47) {
            consume();
            break;
          } else if (eof()) {
            parseerror();
            return;
          }
        }
      }
    };
    const consumeANumericToken = function() {
      const num = consumeANumber();
      if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
        const token = new DimensionToken;
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        token.unit = consumeAName();
        return token;
      } else if (next() === 37) {
        consume();
        const token = new PercentageToken;
        token.value = num.value;
        token.repr = num.repr;
        return token;
      } else {
        const token = new NumberToken;
        token.value = num.value;
        token.repr = num.repr;
        token.type = num.type;
        return token;
      }
    };
    const consumeAnIdentlikeToken = function() {
      const str2 = consumeAName();
      if (str2.toLowerCase() === "url" && next() === 40) {
        consume();
        while (whitespace(next(1)) && whitespace(next(2)))
          consume();
        if (next() === 34 || next() === 39)
          return new FunctionToken(str2);
        else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
          return new FunctionToken(str2);
        else
          return consumeAURLToken();
      } else if (next() === 40) {
        consume();
        return new FunctionToken(str2);
      } else {
        return new IdentToken(str2);
      }
    };
    const consumeAStringToken = function(endingCodePoint) {
      if (endingCodePoint === undefined)
        endingCodePoint = code;
      let string = "";
      while (consume()) {
        if (code === endingCodePoint || eof()) {
          return new StringToken(string);
        } else if (newline(code)) {
          parseerror();
          reconsume();
          return new BadStringToken;
        } else if (code === 92) {
          if (eof(next()))
            donothing();
          else if (newline(next()))
            consume();
          else
            string += stringFromCode(consumeEscape());
        } else {
          string += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeAURLToken = function() {
      const token = new URLToken("");
      while (whitespace(next()))
        consume();
      if (eof(next()))
        return token;
      while (consume()) {
        if (code === 41 || eof()) {
          return token;
        } else if (whitespace(code)) {
          while (whitespace(next()))
            consume();
          if (next() === 41 || eof(next())) {
            consume();
            return token;
          } else {
            consumeTheRemnantsOfABadURL();
            return new BadURLToken;
          }
        } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
          parseerror();
          consumeTheRemnantsOfABadURL();
          return new BadURLToken;
        } else if (code === 92) {
          if (startsWithAValidEscape()) {
            token.value += stringFromCode(consumeEscape());
          } else {
            parseerror();
            consumeTheRemnantsOfABadURL();
            return new BadURLToken;
          }
        } else {
          token.value += stringFromCode(code);
        }
      }
      throw new Error("Internal error");
    };
    const consumeEscape = function() {
      consume();
      if (hexdigit(code)) {
        const digits = [code];
        for (let total = 0;total < 5; total++) {
          if (hexdigit(next())) {
            consume();
            digits.push(code);
          } else {
            break;
          }
        }
        if (whitespace(next()))
          consume();
        let value = parseInt(digits.map(function(x) {
          return String.fromCharCode(x);
        }).join(""), 16);
        if (value > maximumallowedcodepoint)
          value = 65533;
        return value;
      } else if (eof()) {
        return 65533;
      } else {
        return code;
      }
    };
    const areAValidEscape = function(c1, c2) {
      if (c1 !== 92)
        return false;
      if (newline(c2))
        return false;
      return true;
    };
    const startsWithAValidEscape = function() {
      return areAValidEscape(code, next());
    };
    const wouldStartAnIdentifier = function(c1, c2, c3) {
      if (c1 === 45)
        return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
      else if (namestartchar(c1))
        return true;
      else if (c1 === 92)
        return areAValidEscape(c1, c2);
      else
        return false;
    };
    const startsWithAnIdentifier = function() {
      return wouldStartAnIdentifier(code, next(1), next(2));
    };
    const wouldStartANumber = function(c1, c2, c3) {
      if (c1 === 43 || c1 === 45) {
        if (digit(c2))
          return true;
        if (c2 === 46 && digit(c3))
          return true;
        return false;
      } else if (c1 === 46) {
        if (digit(c2))
          return true;
        return false;
      } else if (digit(c1)) {
        return true;
      } else {
        return false;
      }
    };
    const startsWithANumber = function() {
      return wouldStartANumber(code, next(1), next(2));
    };
    const consumeAName = function() {
      let result = "";
      while (consume()) {
        if (namechar(code)) {
          result += stringFromCode(code);
        } else if (startsWithAValidEscape()) {
          result += stringFromCode(consumeEscape());
        } else {
          reconsume();
          return result;
        }
      }
      throw new Error("Internal parse error");
    };
    const consumeANumber = function() {
      let repr = "";
      let type = "integer";
      if (next() === 43 || next() === 45) {
        consume();
        repr += stringFromCode(code);
      }
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
      if (next(1) === 46 && digit(next(2))) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const c1 = next(1), c2 = next(2), c3 = next(3);
      if ((c1 === 69 || c1 === 101) && digit(c2)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        consume();
        repr += stringFromCode(code);
        type = "number";
        while (digit(next())) {
          consume();
          repr += stringFromCode(code);
        }
      }
      const value = convertAStringToANumber(repr);
      return {
        type,
        value,
        repr
      };
    };
    const convertAStringToANumber = function(string) {
      return +string;
    };
    const consumeTheRemnantsOfABadURL = function() {
      while (consume()) {
        if (code === 41 || eof()) {
          return;
        } else if (startsWithAValidEscape()) {
          consumeEscape();
          donothing();
        } else {
          donothing();
        }
      }
    };
    let iterationCount = 0;
    while (!eof(next())) {
      tokens.push(consumeAToken());
      iterationCount++;
      if (iterationCount > str.length * 2)
        throw new Error("I'm infinite-looping!");
    }
    return tokens;
  }

  class CSSParserToken {
    constructor() {
      this.tokenType = "";
      this.value = undefined;
    }
    toJSON() {
      return {
        token: this.tokenType
      };
    }
    toString() {
      return this.tokenType;
    }
    toSource() {
      return "" + this;
    }
  }
  exports.CSSParserToken = CSSParserToken;

  class BadStringToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADSTRING";
    }
  }
  exports.BadStringToken = BadStringToken;

  class BadURLToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "BADURL";
    }
  }
  exports.BadURLToken = BadURLToken;

  class WhitespaceToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "WHITESPACE";
    }
    toString() {
      return "WS";
    }
    toSource() {
      return " ";
    }
  }
  exports.WhitespaceToken = WhitespaceToken;

  class CDOToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDO";
    }
    toSource() {
      return "<!--";
    }
  }
  exports.CDOToken = CDOToken;

  class CDCToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "CDC";
    }
    toSource() {
      return "-->";
    }
  }
  exports.CDCToken = CDCToken;

  class ColonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ":";
    }
  }
  exports.ColonToken = ColonToken;

  class SemicolonToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ";";
    }
  }
  exports.SemicolonToken = SemicolonToken;

  class CommaToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = ",";
    }
  }
  exports.CommaToken = CommaToken;

  class GroupingToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
      this.mirror = "";
    }
  }
  exports.GroupingToken = GroupingToken;

  class OpenCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "{";
      this.value = "{";
      this.mirror = "}";
    }
  }
  exports.OpenCurlyToken = OpenCurlyToken;

  class CloseCurlyToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "}";
      this.value = "}";
      this.mirror = "{";
    }
  }
  exports.CloseCurlyToken = CloseCurlyToken;

  class OpenSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "[";
      this.value = "[";
      this.mirror = "]";
    }
  }
  exports.OpenSquareToken = OpenSquareToken;

  class CloseSquareToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "]";
      this.value = "]";
      this.mirror = "[";
    }
  }
  exports.CloseSquareToken = CloseSquareToken;

  class OpenParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = "(";
      this.value = "(";
      this.mirror = ")";
    }
  }
  exports.OpenParenToken = OpenParenToken;

  class CloseParenToken extends GroupingToken {
    constructor() {
      super();
      this.tokenType = ")";
      this.value = ")";
      this.mirror = "(";
    }
  }
  exports.CloseParenToken = CloseParenToken;

  class IncludeMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "~=";
    }
  }
  exports.IncludeMatchToken = IncludeMatchToken;

  class DashMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "|=";
    }
  }
  exports.DashMatchToken = DashMatchToken;

  class PrefixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "^=";
    }
  }
  exports.PrefixMatchToken = PrefixMatchToken;

  class SuffixMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "$=";
    }
  }
  exports.SuffixMatchToken = SuffixMatchToken;

  class SubstringMatchToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "*=";
    }
  }
  exports.SubstringMatchToken = SubstringMatchToken;

  class ColumnToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "||";
    }
  }
  exports.ColumnToken = ColumnToken;

  class EOFToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.tokenType = "EOF";
    }
    toSource() {
      return "";
    }
  }
  exports.EOFToken = EOFToken;

  class DelimToken extends CSSParserToken {
    constructor(code) {
      super();
      this.tokenType = "DELIM";
      this.value = "";
      this.value = stringFromCode(code);
    }
    toString() {
      return "DELIM(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      return json;
    }
    toSource() {
      if (this.value === "\\")
        return "\\\n";
      else
        return this.value;
    }
  }
  exports.DelimToken = DelimToken;

  class StringValuedToken extends CSSParserToken {
    constructor(...args) {
      super(...args);
      this.value = "";
    }
    ASCIIMatch(str) {
      return this.value.toLowerCase() === str.toLowerCase();
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      return json;
    }
  }
  exports.StringValuedToken = StringValuedToken;

  class IdentToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "IDENT";
      this.value = val;
    }
    toString() {
      return "IDENT(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value);
    }
  }
  exports.IdentToken = IdentToken;

  class FunctionToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "FUNCTION";
      this.mirror = undefined;
      this.value = val;
      this.mirror = ")";
    }
    toString() {
      return "FUNCTION(" + this.value + ")";
    }
    toSource() {
      return escapeIdent(this.value) + "(";
    }
  }
  exports.FunctionToken = FunctionToken;

  class AtKeywordToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "AT-KEYWORD";
      this.value = val;
    }
    toString() {
      return "AT(" + this.value + ")";
    }
    toSource() {
      return "@" + escapeIdent(this.value);
    }
  }
  exports.AtKeywordToken = AtKeywordToken;

  class HashToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "HASH";
      this.type = undefined;
      this.value = val;
      this.type = "unrestricted";
    }
    toString() {
      return "HASH(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.type = this.type;
      return json;
    }
    toSource() {
      if (this.type === "id")
        return "#" + escapeIdent(this.value);
      else
        return "#" + escapeHash(this.value);
    }
  }
  exports.HashToken = HashToken;

  class StringToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "STRING";
      this.value = val;
    }
    toString() {
      return '"' + escapeString(this.value) + '"';
    }
  }
  exports.StringToken = StringToken;

  class URLToken extends StringValuedToken {
    constructor(val) {
      super();
      this.tokenType = "URL";
      this.value = val;
    }
    toString() {
      return "URL(" + this.value + ")";
    }
    toSource() {
      return 'url("' + escapeString(this.value) + '")';
    }
  }
  exports.URLToken = URLToken;

  class NumberToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "NUMBER";
      this.type = undefined;
      this.repr = undefined;
      this.type = "integer";
      this.repr = "";
    }
    toString() {
      if (this.type === "integer")
        return "INT(" + this.value + ")";
      return "NUMBER(" + this.value + ")";
    }
    toJSON() {
      const json = super.toJSON();
      json.value = this.value;
      json.type = this.type;
      json.repr = this.repr;
      return json;
    }
    toSource() {
      return this.repr;
    }
  }
  exports.NumberToken = NumberToken;

  class PercentageToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "PERCENTAGE";
      this.repr = undefined;
      this.repr = "";
    }
    toString() {
      return "PERCENTAGE(" + this.value + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.repr = this.repr;
      return json;
    }
    toSource() {
      return this.repr + "%";
    }
  }
  exports.PercentageToken = PercentageToken;

  class DimensionToken extends CSSParserToken {
    constructor() {
      super();
      this.tokenType = "DIMENSION";
      this.type = undefined;
      this.repr = undefined;
      this.unit = undefined;
      this.type = "integer";
      this.repr = "";
      this.unit = "";
    }
    toString() {
      return "DIM(" + this.value + "," + this.unit + ")";
    }
    toJSON() {
      const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
      json.value = this.value;
      json.type = this.type;
      json.repr = this.repr;
      json.unit = this.unit;
      return json;
    }
    toSource() {
      const source = this.repr;
      let unit = escapeIdent(this.unit);
      if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
        unit = "\\65 " + unit.slice(1, unit.length);
      }
      return source + unit;
    }
  }
  exports.DimensionToken = DimensionToken;
  function escapeIdent(string) {
    string = "" + string;
    let result = "";
    const firstcode = string.charCodeAt(0);
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
        result += "\\" + code.toString(16) + " ";
      else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
        result += string[i];
      else
        result += "\\" + string[i];
    }
    return result;
  }
  function escapeHash(string) {
    string = "" + string;
    let result = "";
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
        result += string[i];
      else
        result += "\\" + code.toString(16) + " ";
    }
    return result;
  }
  function escapeString(string) {
    string = "" + string;
    let result = "";
    for (let i = 0;i < string.length; i++) {
      const code = string.charCodeAt(i);
      if (code === 0)
        throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
      if (between(code, 1, 31) || code === 127)
        result += "\\" + code.toString(16) + " ";
      else if (code === 34 || code === 92)
        result += "\\" + string[i];
      else
        result += string[i];
    }
    return result;
  }
});

// node_modules/playwright-core/lib/utils/isomorphic/cssParser.js
var require_cssParser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.InvalidSelectorError = undefined;
  exports.isInvalidSelectorError = isInvalidSelectorError;
  exports.parseCSS = parseCSS;
  exports.serializeSelector = serializeSelector;
  var css = _interopRequireWildcard(require_cssTokenizer());
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class InvalidSelectorError extends Error {
  }
  exports.InvalidSelectorError = InvalidSelectorError;
  function isInvalidSelectorError(error) {
    return error instanceof InvalidSelectorError;
  }
  function parseCSS(selector, customNames) {
    let tokens;
    try {
      tokens = css.tokenize(selector);
      if (!(tokens[tokens.length - 1] instanceof css.EOFToken))
        tokens.push(new css.EOFToken);
    } catch (e) {
      const newMessage = e.message + ` while parsing selector "${selector}"`;
      const index = (e.stack || "").indexOf(e.message);
      if (index !== -1)
        e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
      e.message = newMessage;
      throw e;
    }
    const unsupportedToken = tokens.find((token) => {
      return token instanceof css.AtKeywordToken || token instanceof css.BadStringToken || token instanceof css.BadURLToken || token instanceof css.ColumnToken || token instanceof css.CDOToken || token instanceof css.CDCToken || token instanceof css.SemicolonToken || token instanceof css.OpenCurlyToken || token instanceof css.CloseCurlyToken || token instanceof css.URLToken || token instanceof css.PercentageToken;
    });
    if (unsupportedToken)
      throw new InvalidSelectorError(`Unsupported token "${unsupportedToken.toSource()}" while parsing selector "${selector}"`);
    let pos = 0;
    const names = new Set;
    function unexpected() {
      return new InvalidSelectorError(`Unexpected token "${tokens[pos].toSource()}" while parsing selector "${selector}"`);
    }
    function skipWhitespace() {
      while (tokens[pos] instanceof css.WhitespaceToken)
        pos++;
    }
    function isIdent(p = pos) {
      return tokens[p] instanceof css.IdentToken;
    }
    function isString(p = pos) {
      return tokens[p] instanceof css.StringToken;
    }
    function isNumber(p = pos) {
      return tokens[p] instanceof css.NumberToken;
    }
    function isComma(p = pos) {
      return tokens[p] instanceof css.CommaToken;
    }
    function isOpenParen(p = pos) {
      return tokens[p] instanceof css.OpenParenToken;
    }
    function isCloseParen(p = pos) {
      return tokens[p] instanceof css.CloseParenToken;
    }
    function isFunction(p = pos) {
      return tokens[p] instanceof css.FunctionToken;
    }
    function isStar(p = pos) {
      return tokens[p] instanceof css.DelimToken && tokens[p].value === "*";
    }
    function isEOF(p = pos) {
      return tokens[p] instanceof css.EOFToken;
    }
    function isClauseCombinator(p = pos) {
      return tokens[p] instanceof css.DelimToken && [">", "+", "~"].includes(tokens[p].value);
    }
    function isSelectorClauseEnd(p = pos) {
      return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof css.WhitespaceToken;
    }
    function consumeFunctionArguments() {
      const result2 = [consumeArgument()];
      while (true) {
        skipWhitespace();
        if (!isComma())
          break;
        pos++;
        result2.push(consumeArgument());
      }
      return result2;
    }
    function consumeArgument() {
      skipWhitespace();
      if (isNumber())
        return tokens[pos++].value;
      if (isString())
        return tokens[pos++].value;
      return consumeComplexSelector();
    }
    function consumeComplexSelector() {
      const result2 = {
        simples: []
      };
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples.push({
          selector: {
            functions: [{
              name: "scope",
              args: []
            }]
          },
          combinator: ""
        });
      } else {
        result2.simples.push({
          selector: consumeSimpleSelector(),
          combinator: ""
        });
      }
      while (true) {
        skipWhitespace();
        if (isClauseCombinator()) {
          result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
          skipWhitespace();
        } else if (isSelectorClauseEnd()) {
          break;
        }
        result2.simples.push({
          combinator: "",
          selector: consumeSimpleSelector()
        });
      }
      return result2;
    }
    function consumeSimpleSelector() {
      let rawCSSString = "";
      const functions = [];
      while (!isSelectorClauseEnd()) {
        if (isIdent() || isStar()) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.HashToken) {
          rawCSSString += tokens[pos++].toSource();
        } else if (tokens[pos] instanceof css.DelimToken && tokens[pos].value === ".") {
          pos++;
          if (isIdent())
            rawCSSString += "." + tokens[pos++].toSource();
          else
            throw unexpected();
        } else if (tokens[pos] instanceof css.ColonToken) {
          pos++;
          if (isIdent()) {
            if (!customNames.has(tokens[pos].value.toLowerCase())) {
              rawCSSString += ":" + tokens[pos++].toSource();
            } else {
              const name = tokens[pos++].value.toLowerCase();
              functions.push({
                name,
                args: []
              });
              names.add(name);
            }
          } else if (isFunction()) {
            const name = tokens[pos++].value.toLowerCase();
            if (!customNames.has(name)) {
              rawCSSString += `:${name}(${consumeBuiltinFunctionArguments()})`;
            } else {
              functions.push({
                name,
                args: consumeFunctionArguments()
              });
              names.add(name);
            }
            skipWhitespace();
            if (!isCloseParen())
              throw unexpected();
            pos++;
          } else {
            throw unexpected();
          }
        } else if (tokens[pos] instanceof css.OpenSquareToken) {
          rawCSSString += "[";
          pos++;
          while (!(tokens[pos] instanceof css.CloseSquareToken) && !isEOF())
            rawCSSString += tokens[pos++].toSource();
          if (!(tokens[pos] instanceof css.CloseSquareToken))
            throw unexpected();
          rawCSSString += "]";
          pos++;
        } else {
          throw unexpected();
        }
      }
      if (!rawCSSString && !functions.length)
        throw unexpected();
      return {
        css: rawCSSString || undefined,
        functions
      };
    }
    function consumeBuiltinFunctionArguments() {
      let s = "";
      let balance = 1;
      while (!isEOF()) {
        if (isOpenParen() || isFunction())
          balance++;
        if (isCloseParen())
          balance--;
        if (!balance)
          break;
        s += tokens[pos++].toSource();
      }
      return s;
    }
    const result = consumeFunctionArguments();
    if (!isEOF())
      throw unexpected();
    if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
      throw new InvalidSelectorError(`Error while parsing selector "${selector}"`);
    return {
      selector: result,
      names: Array.from(names)
    };
  }
  function serializeSelector(args) {
    return args.map((arg) => {
      if (typeof arg === "string")
        return `"${arg}"`;
      if (typeof arg === "number")
        return String(arg);
      return arg.simples.map(({
        selector,
        combinator
      }) => {
        let s = selector.css || "";
        s = s + selector.functions.map((func) => `:${func.name}(${serializeSelector(func.args)})`).join("");
        if (combinator)
          s += " " + combinator;
        return s;
      }).join(" ");
    }).join(", ");
  }
});

// node_modules/playwright-core/lib/utils/isomorphic/selectorParser.js
var require_selectorParser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "InvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.InvalidSelectorError;
    }
  });
  exports.customCSSNames = undefined;
  Object.defineProperty(exports, "isInvalidSelectorError", {
    enumerable: true,
    get: function() {
      return _cssParser.isInvalidSelectorError;
    }
  });
  exports.parseAttributeSelector = parseAttributeSelector;
  exports.parseSelector = parseSelector;
  exports.splitSelectorByFrame = splitSelectorByFrame;
  exports.stringifySelector = stringifySelector;
  exports.visitAllSelectorParts = visitAllSelectorParts;
  var _cssParser = require_cssParser();
  var kNestedSelectorNames = new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
  var kNestedSelectorNamesWithDistance = new Set(["left-of", "right-of", "above", "below", "near"]);
  var customCSSNames = exports.customCSSNames = new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
  function parseSelector(selector) {
    const parsedStrings = parseSelectorString(selector);
    const parts = [];
    for (const part of parsedStrings.parts) {
      if (part.name === "css" || part.name === "css:light") {
        if (part.name === "css:light")
          part.body = ":light(" + part.body + ")";
        const parsedCSS = (0, _cssParser.parseCSS)(part.body, customCSSNames);
        parts.push({
          name: "css",
          body: parsedCSS.selector,
          source: part.body
        });
        continue;
      }
      if (kNestedSelectorNames.has(part.name)) {
        let innerSelector;
        let distance;
        try {
          const unescaped = JSON.parse("[" + part.body + "]");
          if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
            throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
          innerSelector = unescaped[0];
          if (unescaped.length === 2) {
            if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
              throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
            distance = unescaped[1];
          }
        } catch (e) {
          throw new _cssParser.InvalidSelectorError(`Malformed selector: ${part.name}=` + part.body);
        }
        const nested = {
          name: part.name,
          source: part.body,
          body: {
            parsed: parseSelector(innerSelector),
            distance
          }
        };
        const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
        const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
        if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
          nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
        parts.push(nested);
        continue;
      }
      parts.push({
        ...part,
        source: part.body
      });
    }
    if (kNestedSelectorNames.has(parts[0].name))
      throw new _cssParser.InvalidSelectorError(`"${parts[0].name}" selector cannot be first`);
    return {
      capture: parsedStrings.capture,
      parts
    };
  }
  function splitSelectorByFrame(selectorText) {
    const selector = parseSelector(selectorText);
    const result = [];
    let chunk = {
      parts: []
    };
    let chunkStartIndex = 0;
    for (let i = 0;i < selector.parts.length; ++i) {
      const part = selector.parts[i];
      if (part.name === "internal:control" && part.body === "enter-frame") {
        if (!chunk.parts.length)
          throw new _cssParser.InvalidSelectorError("Selector cannot start with entering frame, select the iframe first");
        result.push(chunk);
        chunk = {
          parts: []
        };
        chunkStartIndex = i + 1;
        continue;
      }
      if (selector.capture === i)
        chunk.capture = i - chunkStartIndex;
      chunk.parts.push(part);
    }
    if (!chunk.parts.length)
      throw new _cssParser.InvalidSelectorError(`Selector cannot end with entering frame, while parsing selector ${selectorText}`);
    result.push(chunk);
    if (typeof selector.capture === "number" && typeof result[result.length - 1].capture !== "number")
      throw new _cssParser.InvalidSelectorError(`Can not capture the selector before diving into the frame. Only use * after the last frame has been selected`);
    return result;
  }
  function selectorPartsEqual(list1, list2) {
    return stringifySelector({
      parts: list1
    }) === stringifySelector({
      parts: list2
    });
  }
  function stringifySelector(selector, forceEngineName) {
    if (typeof selector === "string")
      return selector;
    return selector.parts.map((p, i) => {
      let includeEngine = true;
      if (!forceEngineName && i !== selector.capture) {
        if (p.name === "css")
          includeEngine = false;
        else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
          includeEngine = false;
      }
      const prefix = includeEngine ? p.name + "=" : "";
      return `${i === selector.capture ? "*" : ""}${prefix}${p.source}`;
    }).join(" >> ");
  }
  function visitAllSelectorParts(selector, visitor) {
    const visit = (selector2, nested) => {
      for (const part of selector2.parts) {
        visitor(part, nested);
        if (kNestedSelectorNames.has(part.name))
          visit(part.body.parsed, true);
      }
    };
    visit(selector, false);
  }
  function parseSelectorString(selector) {
    let index = 0;
    let quote;
    let start = 0;
    const result = {
      parts: []
    };
    const append = () => {
      const part = selector.substring(start, index).trim();
      const eqIndex = part.indexOf("=");
      let name;
      let body;
      if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
        name = part.substring(0, eqIndex).trim();
        body = part.substring(eqIndex + 1);
      } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
        name = "text";
        body = part;
      } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
        name = "text";
        body = part;
      } else if (/^\(*\/\//.test(part) || part.startsWith("..")) {
        name = "xpath";
        body = part;
      } else {
        name = "css";
        body = part;
      }
      let capture = false;
      if (name[0] === "*") {
        capture = true;
        name = name.substring(1);
      }
      result.parts.push({
        name,
        body
      });
      if (capture) {
        if (result.capture !== undefined)
          throw new _cssParser.InvalidSelectorError(`Only one of the selectors can capture using * modifier`);
        result.capture = result.parts.length - 1;
      }
    };
    if (!selector.includes(">>")) {
      index = selector.length;
      append();
      return result;
    }
    const shouldIgnoreTextSelectorQuote = () => {
      const prefix = selector.substring(start, index);
      const match = prefix.match(/^\s*text\s*=(.*)$/);
      return !!match && !!match[1];
    };
    while (index < selector.length) {
      const c = selector[index];
      if (c === "\\" && index + 1 < selector.length) {
        index += 2;
      } else if (c === quote) {
        quote = undefined;
        index++;
      } else if (!quote && (c === '"' || c === "'" || c === "`") && !shouldIgnoreTextSelectorQuote()) {
        quote = c;
        index++;
      } else if (!quote && c === ">" && selector[index + 1] === ">") {
        append();
        index += 2;
        start = index;
      } else {
        index++;
      }
    }
    append();
    return result;
  }
  function parseAttributeSelector(selector, allowUnquotedStrings) {
    let wp = 0;
    let EOL = selector.length === 0;
    const next = () => selector[wp] || "";
    const eat1 = () => {
      const result2 = next();
      ++wp;
      EOL = wp >= selector.length;
      return result2;
    };
    const syntaxError = (stage) => {
      if (EOL)
        throw new _cssParser.InvalidSelectorError(`Unexpected end of selector while parsing selector \`${selector}\``);
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - unexpected symbol "${next()}" at position ${wp}` + (stage ? " during " + stage : ""));
    };
    function skipSpaces() {
      while (!EOL && /\s/.test(next()))
        eat1();
    }
    function isCSSNameChar(char) {
      return char >= "" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
    }
    function readIdentifier() {
      let result2 = "";
      skipSpaces();
      while (!EOL && isCSSNameChar(next()))
        result2 += eat1();
      return result2;
    }
    function readQuotedString(quote) {
      let result2 = eat1();
      if (result2 !== quote)
        syntaxError("parsing quoted string");
      while (!EOL && next() !== quote) {
        if (next() === "\\")
          eat1();
        result2 += eat1();
      }
      if (next() !== quote)
        syntaxError("parsing quoted string");
      result2 += eat1();
      return result2;
    }
    function readRegularExpression() {
      if (eat1() !== "/")
        syntaxError("parsing regular expression");
      let source = "";
      let inClass = false;
      while (!EOL) {
        if (next() === "\\") {
          source += eat1();
          if (EOL)
            syntaxError("parsing regular expression");
        } else if (inClass && next() === "]") {
          inClass = false;
        } else if (!inClass && next() === "[") {
          inClass = true;
        } else if (!inClass && next() === "/") {
          break;
        }
        source += eat1();
      }
      if (eat1() !== "/")
        syntaxError("parsing regular expression");
      let flags = "";
      while (!EOL && next().match(/[dgimsuy]/))
        flags += eat1();
      try {
        return new RegExp(source, flags);
      } catch (e) {
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\`: ${e.message}`);
      }
    }
    function readAttributeToken() {
      let token = "";
      skipSpaces();
      if (next() === `'` || next() === `"`)
        token = readQuotedString(next()).slice(1, -1);
      else
        token = readIdentifier();
      if (!token)
        syntaxError("parsing property path");
      return token;
    }
    function readOperator() {
      skipSpaces();
      let op = "";
      if (!EOL)
        op += eat1();
      if (!EOL && op !== "=")
        op += eat1();
      if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
        syntaxError("parsing operator");
      return op;
    }
    function readAttribute() {
      eat1();
      const jsonPath = [];
      jsonPath.push(readAttributeToken());
      skipSpaces();
      while (next() === ".") {
        eat1();
        jsonPath.push(readAttributeToken());
        skipSpaces();
      }
      if (next() === "]") {
        eat1();
        return {
          name: jsonPath.join("."),
          jsonPath,
          op: "<truthy>",
          value: null,
          caseSensitive: false
        };
      }
      const operator = readOperator();
      let value = undefined;
      let caseSensitive = true;
      skipSpaces();
      if (next() === "/") {
        if (operator !== "=")
          throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with regular expression`);
        value = readRegularExpression();
      } else if (next() === `'` || next() === `"`) {
        value = readQuotedString(next()).slice(1, -1);
        skipSpaces();
        if (next() === "i" || next() === "I") {
          caseSensitive = false;
          eat1();
        } else if (next() === "s" || next() === "S") {
          caseSensitive = true;
          eat1();
        }
      } else {
        value = "";
        while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
          value += eat1();
        if (value === "true") {
          value = true;
        } else if (value === "false") {
          value = false;
        } else {
          if (!allowUnquotedStrings) {
            value = +value;
            if (Number.isNaN(value))
              syntaxError("parsing attribute value");
          }
        }
      }
      skipSpaces();
      if (next() !== "]")
        syntaxError("parsing attribute value");
      eat1();
      if (operator !== "=" && typeof value !== "string")
        throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - cannot use ${operator} in attribute with non-string matching value - ${value}`);
      return {
        name: jsonPath.join("."),
        jsonPath,
        op: operator,
        value,
        caseSensitive
      };
    }
    const result = {
      name: "",
      attributes: []
    };
    result.name = readIdentifier();
    skipSpaces();
    while (next() === "[") {
      result.attributes.push(readAttribute());
      skipSpaces();
    }
    if (!EOL)
      syntaxError(undefined);
    if (!result.name && !result.attributes.length)
      throw new _cssParser.InvalidSelectorError(`Error while parsing selector \`${selector}\` - selector cannot be empty`);
    return result;
  }
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorGenerators.js
var require_locatorGenerators = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PythonLocatorFactory = exports.JsonlLocatorFactory = exports.JavaScriptLocatorFactory = exports.JavaLocatorFactory = exports.CSharpLocatorFactory = undefined;
  exports.asLocator = asLocator;
  exports.asLocators = asLocators;
  var _stringUtils = require_stringUtils();
  var _selectorParser = require_selectorParser();
  function asLocator(lang, selector, isFrameLocator = false) {
    return asLocators(lang, selector, isFrameLocator)[0];
  }
  function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
    try {
      return innerAsLocators(new generators[lang](preferredQuote), (0, _selectorParser.parseSelector)(selector), isFrameLocator, maxOutputSize);
    } catch (e) {
      return [selector];
    }
  }
  function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
    const parts = [...parsed.parts];
    const tokens = [];
    let nextBase = isFrameLocator ? "frame-locator" : "page";
    for (let index = 0;index < parts.length; index++) {
      const part = parts[index];
      const base = nextBase;
      nextBase = "locator";
      if (part.name === "nth") {
        if (part.body === "0")
          tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
        else if (part.body === "-1")
          tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
        else
          tokens.push([factory.generateLocator(base, "nth", part.body)]);
        continue;
      }
      if (part.name === "internal:text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "text", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:has-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has-not-text") {
        const {
          exact,
          text
        } = detectExact(part.body);
        if (!exact) {
          tokens.push([factory.generateLocator(base, "has-not-text", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:has") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
        continue;
      }
      if (part.name === "internal:has-not") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
        continue;
      }
      if (part.name === "internal:and") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
        continue;
      }
      if (part.name === "internal:or") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
        continue;
      }
      if (part.name === "internal:chain") {
        const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
        tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
        continue;
      }
      if (part.name === "internal:label") {
        const {
          exact,
          text
        } = detectExact(part.body);
        tokens.push([factory.generateLocator(base, "label", text, {
          exact
        })]);
        continue;
      }
      if (part.name === "internal:role") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const options = {
          attrs: []
        };
        for (const attr of attrSelector.attributes) {
          if (attr.name === "name") {
            options.exact = attr.caseSensitive;
            options.name = attr.value;
          } else {
            if (attr.name === "level" && typeof attr.value === "string")
              attr.value = +attr.value;
            options.attrs.push({
              name: attr.name === "include-hidden" ? "includeHidden" : attr.name,
              value: attr.value
            });
          }
        }
        tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
        continue;
      }
      if (part.name === "internal:testid") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          value
        } = attrSelector.attributes[0];
        tokens.push([factory.generateLocator(base, "test-id", value)]);
        continue;
      }
      if (part.name === "internal:attr") {
        const attrSelector = (0, _selectorParser.parseAttributeSelector)(part.body, true);
        const {
          name,
          value,
          caseSensitive
        } = attrSelector.attributes[0];
        const text = value;
        const exact = !!caseSensitive;
        if (name === "placeholder") {
          tokens.push([factory.generateLocator(base, "placeholder", text, {
            exact
          })]);
          continue;
        }
        if (name === "alt") {
          tokens.push([factory.generateLocator(base, "alt", text, {
            exact
          })]);
          continue;
        }
        if (name === "title") {
          tokens.push([factory.generateLocator(base, "title", text, {
            exact
          })]);
          continue;
        }
      }
      if (part.name === "internal:control" && part.body === "enter-frame") {
        const lastTokens = tokens[tokens.length - 1];
        const lastPart = parts[index - 1];
        const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));
        if (["xpath", "css"].includes(lastPart.name)) {
          transformed.push(factory.generateLocator(base, "frame-locator", (0, _selectorParser.stringifySelector)({
            parts: [lastPart]
          })), factory.generateLocator(base, "frame-locator", (0, _selectorParser.stringifySelector)({
            parts: [lastPart]
          }, true)));
        }
        lastTokens.splice(0, lastTokens.length, ...transformed);
        nextBase = "frame-locator";
        continue;
      }
      const nextPart = parts[index + 1];
      const selectorPart = (0, _selectorParser.stringifySelector)({
        parts: [part]
      });
      const locatorPart = factory.generateLocator(base, "default", selectorPart);
      if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
        const {
          exact,
          text
        } = detectExact(nextPart.body);
        if (!exact) {
          const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, {
            exact
          });
          const options = {};
          if (nextPart.name === "internal:has-text")
            options.hasText = text;
          else
            options.hasNotText = text;
          const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
          tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
          index++;
          continue;
        }
      }
      let locatorPartWithEngine;
      if (["xpath", "css"].includes(part.name)) {
        const selectorPart2 = (0, _selectorParser.stringifySelector)({
          parts: [part]
        }, true);
        locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);
      }
      tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
    }
    return combineTokens(factory, tokens, maxOutputSize);
  }
  function combineTokens(factory, tokens, maxOutputSize) {
    const currentTokens = tokens.map(() => "");
    const result = [];
    const visit = (index) => {
      if (index === tokens.length) {
        result.push(factory.chainLocators(currentTokens));
        return currentTokens.length < maxOutputSize;
      }
      for (const taken of tokens[index]) {
        currentTokens[index] = taken;
        if (!visit(index + 1))
          return false;
      }
      return true;
    };
    visit(0);
    return result;
  }
  function detectExact(text) {
    let exact = false;
    const match = text.match(/^\/(.*)\/([igm]*)$/);
    if (match)
      return {
        text: new RegExp(match[1], match[2])
      };
    if (text.endsWith('"')) {
      text = JSON.parse(text);
      exact = true;
    } else if (text.endsWith('"s')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = true;
    } else if (text.endsWith('"i')) {
      text = JSON.parse(text.substring(0, text.length - 1));
      exact = false;
    }
    return {
      exact,
      text
    };
  }

  class JavaScriptLocatorFactory {
    constructor(preferredQuote) {
      this.preferredQuote = preferredQuote;
    }
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, { hasText: ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, { hasNotText: ${this.toHasText(options.hasNotText)} })`;
          return `locator(${this.quote(body)})`;
        case "frame-locator":
          return `frameLocator(${this.quote(body)})`;
        case "frame":
          return `contentFrame()`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name: ${this.regexToSourceString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name: ${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`exact: true`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`${name}: ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, { ${attrs.join(", ")} }` : "";
          return `getByRole(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter({ hasText: ${this.toHasText(body)} })`;
        case "has-not-text":
          return `filter({ hasNotText: ${this.toHasText(body)} })`;
        case "has":
          return `filter({ has: ${body} })`;
        case "hasNot":
          return `filter({ hasNot: ${body} })`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToSourceString(re) {
      return (0, _stringUtils.normalizeEscapedRegexQuotes)(String(re));
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToSourceString(body)})`;
      return exact ? `${method}(${this.quote(body)}, { exact: true })` : `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToSourceString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToSourceString(value);
      return this.quote(value);
    }
    quote(text) {
      var _this$preferredQuote;
      return (0, _stringUtils.escapeWithQuotes)(text, (_this$preferredQuote = this.preferredQuote) !== null && _this$preferredQuote !== undefined ? _this$preferredQuote : "'");
    }
  }
  exports.JavaScriptLocatorFactory = JavaScriptLocatorFactory;

  class PythonLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, has_text=${this.toHasText(options.hasText)})`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, has_not_text=${this.toHasText(options.hasNotText)})`;
          return `locator(${this.quote(body)})`;
        case "frame-locator":
          return `frame_locator(${this.quote(body)})`;
        case "frame":
          return `content_frame`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first`;
        case "last":
          return `last`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`name=${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`name=${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`exact=True`);
          }
          for (const {
            name,
            value
          } of options.attrs) {
            let valueString = typeof value === "string" ? this.quote(value) : value;
            if (typeof value === "boolean")
              valueString = value ? "True" : "False";
            attrs.push(`${(0, _stringUtils.toSnakeCase)(name)}=${valueString}`);
          }
          const attrString = attrs.length ? `, ${attrs.join(", ")}` : "";
          return `get_by_role(${this.quote(body)}${attrString})`;
        case "has-text":
          return `filter(has_text=${this.toHasText(body)})`;
        case "has-not-text":
          return `filter(has_not_text=${this.toHasText(body)})`;
        case "has":
          return `filter(has=${body})`;
        case "hasNot":
          return `filter(has_not=${body})`;
        case "and":
          return `and_(${body})`;
        case "or":
          return `or_(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `get_by_test_id(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("get_by_text", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("get_by_label", body, !!options.exact);
        case "title":
          return this.toCallWithExact("get_by_title", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
      return `re.compile(r"${(0, _stringUtils.normalizeEscapedRegexQuotes)(body.source).replace(/\\\//, "/").replace(/"/g, "\\\"")}"${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, exact=True)`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToString(body);
      return `${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, '"');
    }
  }
  exports.PythonLocatorFactory = PythonLocatorFactory;

  class JavaLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      let clazz;
      switch (base) {
        case "page":
          clazz = "Page";
          break;
        case "frame-locator":
          clazz = "FrameLocator";
          break;
        case "locator":
          clazz = "Locator";
          break;
      }
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasText(${this.toHasText(options.hasText)}))`;
          if (options.hasNotText !== undefined)
            return `locator(${this.quote(body)}, new ${clazz}.LocatorOptions().setHasNotText(${this.toHasText(options.hasNotText)}))`;
          return `locator(${this.quote(body)})`;
        case "frame-locator":
          return `frameLocator(${this.quote(body)})`;
        case "frame":
          return `contentFrame()`;
        case "nth":
          return `nth(${body})`;
        case "first":
          return `first()`;
        case "last":
          return `last()`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`.setName(${this.regexToString(options.name)})`);
          } else if (typeof options.name === "string") {
            attrs.push(`.setName(${this.quote(options.name)})`);
            if (options.exact)
              attrs.push(`.setExact(true)`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`.set${(0, _stringUtils.toTitleCase)(name)}(${typeof value === "string" ? this.quote(value) : value})`);
          const attrString = attrs.length ? `, new ${clazz}.GetByRoleOptions()${attrs.join("")}` : "";
          return `getByRole(AriaRole.${(0, _stringUtils.toSnakeCase)(body).toUpperCase()}${attrString})`;
        case "has-text":
          return `filter(new ${clazz}.FilterOptions().setHasText(${this.toHasText(body)}))`;
        case "has-not-text":
          return `filter(new ${clazz}.FilterOptions().setHasNotText(${this.toHasText(body)}))`;
        case "has":
          return `filter(new ${clazz}.FilterOptions().setHas(${body}))`;
        case "hasNot":
          return `filter(new ${clazz}.FilterOptions().setHasNot(${body}))`;
        case "and":
          return `and(${body})`;
        case "or":
          return `or(${body})`;
        case "chain":
          return `locator(${body})`;
        case "test-id":
          return `getByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
      return `Pattern.compile(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(clazz, method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, new ${clazz}.${(0, _stringUtils.toTitleCase)(method)}Options().setExact(true))`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return this.regexToString(body);
      return this.quote(body);
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, '"');
    }
  }
  exports.JavaLocatorFactory = JavaLocatorFactory;

  class CSharpLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      switch (kind) {
        case "default":
          if (options.hasText !== undefined)
            return `Locator(${this.quote(body)}, new() { ${this.toHasText(options.hasText)} })`;
          if (options.hasNotText !== undefined)
            return `Locator(${this.quote(body)}, new() { ${this.toHasNotText(options.hasNotText)} })`;
          return `Locator(${this.quote(body)})`;
        case "frame-locator":
          return `FrameLocator(${this.quote(body)})`;
        case "frame":
          return `ContentFrame`;
        case "nth":
          return `Nth(${body})`;
        case "first":
          return `First`;
        case "last":
          return `Last`;
        case "role":
          const attrs = [];
          if (isRegExp(options.name)) {
            attrs.push(`NameRegex = ${this.regexToString(options.name)}`);
          } else if (typeof options.name === "string") {
            attrs.push(`Name = ${this.quote(options.name)}`);
            if (options.exact)
              attrs.push(`Exact = true`);
          }
          for (const {
            name,
            value
          } of options.attrs)
            attrs.push(`${(0, _stringUtils.toTitleCase)(name)} = ${typeof value === "string" ? this.quote(value) : value}`);
          const attrString = attrs.length ? `, new() { ${attrs.join(", ")} }` : "";
          return `GetByRole(AriaRole.${(0, _stringUtils.toTitleCase)(body)}${attrString})`;
        case "has-text":
          return `Filter(new() { ${this.toHasText(body)} })`;
        case "has-not-text":
          return `Filter(new() { ${this.toHasNotText(body)} })`;
        case "has":
          return `Filter(new() { Has = ${body} })`;
        case "hasNot":
          return `Filter(new() { HasNot = ${body} })`;
        case "and":
          return `And(${body})`;
        case "or":
          return `Or(${body})`;
        case "chain":
          return `Locator(${body})`;
        case "test-id":
          return `GetByTestId(${this.toTestIdValue(body)})`;
        case "text":
          return this.toCallWithExact("GetByText", body, !!options.exact);
        case "alt":
          return this.toCallWithExact("GetByAltText", body, !!options.exact);
        case "placeholder":
          return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
        case "label":
          return this.toCallWithExact("GetByLabel", body, !!options.exact);
        case "title":
          return this.toCallWithExact("GetByTitle", body, !!options.exact);
        default:
          throw new Error("Unknown selector kind " + kind);
      }
    }
    chainLocators(locators) {
      return locators.join(".");
    }
    regexToString(body) {
      const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
      return `new Regex(${this.quote((0, _stringUtils.normalizeEscapedRegexQuotes)(body.source))}${suffix})`;
    }
    toCallWithExact(method, body, exact) {
      if (isRegExp(body))
        return `${method}(${this.regexToString(body)})`;
      if (exact)
        return `${method}(${this.quote(body)}, new() { Exact = true })`;
      return `${method}(${this.quote(body)})`;
    }
    toHasText(body) {
      if (isRegExp(body))
        return `HasTextRegex = ${this.regexToString(body)}`;
      return `HasText = ${this.quote(body)}`;
    }
    toTestIdValue(value) {
      if (isRegExp(value))
        return this.regexToString(value);
      return this.quote(value);
    }
    toHasNotText(body) {
      if (isRegExp(body))
        return `HasNotTextRegex = ${this.regexToString(body)}`;
      return `HasNotText = ${this.quote(body)}`;
    }
    quote(text) {
      return (0, _stringUtils.escapeWithQuotes)(text, '"');
    }
  }
  exports.CSharpLocatorFactory = CSharpLocatorFactory;

  class JsonlLocatorFactory {
    generateLocator(base, kind, body, options = {}) {
      return JSON.stringify({
        kind,
        body,
        options
      });
    }
    chainLocators(locators) {
      const objects = locators.map((l) => JSON.parse(l));
      for (let i = 0;i < objects.length - 1; ++i)
        objects[i].next = objects[i + 1];
      return JSON.stringify(objects[0]);
    }
  }
  exports.JsonlLocatorFactory = JsonlLocatorFactory;
  var generators = {
    javascript: JavaScriptLocatorFactory,
    python: PythonLocatorFactory,
    java: JavaLocatorFactory,
    csharp: CSharpLocatorFactory,
    jsonl: JsonlLocatorFactory
  };
  function isRegExp(obj) {
    return obj instanceof RegExp;
  }
});

// node_modules/playwright-core/lib/utils/isomorphic/mimeType.js
var require_mimeType = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isJsonMimeType = isJsonMimeType;
  exports.isTextualMimeType = isTextualMimeType;
  function isJsonMimeType(mimeType) {
    return !!mimeType.match(/^(application\/json|application\/.*?\+json|text\/(x-)?json)(;\s*charset=.*)?$/);
  }
  function isTextualMimeType(mimeType) {
    return !!mimeType.match(/^(text\/.*?|application\/(json|(x-)?javascript|xml.*?|ecmascript|graphql|x-www-form-urlencoded)|image\/svg(\+xml)?|application\/.*?(\+json|\+xml))(;\s*charset=.*)?$/);
  }
});

// node_modules/playwright-core/lib/utils/isomorphic/urlMatch.js
var require_urlMatch = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.constructURLBasedOnBaseURL = constructURLBasedOnBaseURL;
  exports.globToRegex = globToRegex;
  exports.urlMatches = urlMatches;
  exports.urlMatchesEqual = urlMatchesEqual;
  var _stringUtils = require_stringUtils();
  var escapedChars = new Set(["$", "^", "+", ".", "*", "(", ")", "|", "\\", "?", "{", "}", "[", "]"]);
  function globToRegex(glob) {
    const tokens = ["^"];
    let inGroup = false;
    for (let i = 0;i < glob.length; ++i) {
      const c = glob[i];
      if (c === "\\" && i + 1 < glob.length) {
        const char = glob[++i];
        tokens.push(escapedChars.has(char) ? "\\" + char : char);
        continue;
      }
      if (c === "*") {
        const beforeDeep = glob[i - 1];
        let starCount = 1;
        while (glob[i + 1] === "*") {
          starCount++;
          i++;
        }
        const afterDeep = glob[i + 1];
        const isDeep = starCount > 1 && (beforeDeep === "/" || beforeDeep === undefined) && (afterDeep === "/" || afterDeep === undefined);
        if (isDeep) {
          tokens.push("((?:[^/]*(?:/|$))*)");
          i++;
        } else {
          tokens.push("([^/]*)");
        }
        continue;
      }
      switch (c) {
        case "?":
          tokens.push(".");
          break;
        case "[":
          tokens.push("[");
          break;
        case "]":
          tokens.push("]");
          break;
        case "{":
          inGroup = true;
          tokens.push("(");
          break;
        case "}":
          inGroup = false;
          tokens.push(")");
          break;
        case ",":
          if (inGroup) {
            tokens.push("|");
            break;
          }
          tokens.push("\\" + c);
          break;
        default:
          tokens.push(escapedChars.has(c) ? "\\" + c : c);
      }
    }
    tokens.push("$");
    return new RegExp(tokens.join(""));
  }
  function isRegExp(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function urlMatchesEqual(match1, match2) {
    if (isRegExp(match1) && isRegExp(match2))
      return match1.source === match2.source && match1.flags === match2.flags;
    return match1 === match2;
  }
  function urlMatches(baseURL, urlString, match) {
    if (match === undefined || match === "")
      return true;
    if ((0, _stringUtils.isString)(match) && !match.startsWith("*")) {
      if (baseURL && /^https?:\/\//.test(baseURL) && /^wss?:\/\//.test(urlString))
        baseURL = baseURL.replace(/^http/, "ws");
      match = constructURLBasedOnBaseURL(baseURL, match);
    }
    if ((0, _stringUtils.isString)(match))
      match = globToRegex(match);
    if (isRegExp(match))
      return match.test(urlString);
    if (typeof match === "string" && match === urlString)
      return true;
    const url = parsedURL(urlString);
    if (!url)
      return false;
    if (typeof match === "string")
      return url.pathname === match;
    if (typeof match !== "function")
      throw new Error("url parameter should be string, RegExp or function");
    return match(url);
  }
  function parsedURL(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  }
  function constructURLBasedOnBaseURL(baseURL, givenURL) {
    try {
      return new URL(givenURL, baseURL).toString();
    } catch (e) {
      return givenURL;
    }
  }
});

// node_modules/playwright-core/lib/utils/multimap.js
var require_multimap = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MultiMap = undefined;
  var _Symbol$iterator;
  _Symbol$iterator = Symbol.iterator;

  class MultiMap {
    constructor() {
      this._map = undefined;
      this._map = new Map;
    }
    set(key, value) {
      let values = this._map.get(key);
      if (!values) {
        values = [];
        this._map.set(key, values);
      }
      values.push(value);
    }
    get(key) {
      return this._map.get(key) || [];
    }
    has(key) {
      return this._map.has(key);
    }
    delete(key, value) {
      const values = this._map.get(key);
      if (!values)
        return;
      if (values.includes(value))
        this._map.set(key, values.filter((v) => value !== v));
    }
    deleteAll(key) {
      this._map.delete(key);
    }
    hasValue(key, value) {
      const values = this._map.get(key);
      if (!values)
        return false;
      return values.includes(value);
    }
    get size() {
      return this._map.size;
    }
    [_Symbol$iterator]() {
      return this._map[Symbol.iterator]();
    }
    keys() {
      return this._map.keys();
    }
    values() {
      const result = [];
      for (const key of this.keys())
        result.push(...this.get(key));
      return result;
    }
    clear() {
      this._map.clear();
    }
  }
  exports.MultiMap = MultiMap;
});

// node_modules/playwright-core/lib/utils/processLauncher.js
var require_processLauncher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.envArrayToObject = envArrayToObject;
  exports.gracefullyCloseAll = gracefullyCloseAll;
  exports.gracefullyCloseSet = undefined;
  exports.gracefullyProcessExitDoNotHang = gracefullyProcessExitDoNotHang;
  exports.launchProcess = launchProcess;
  var _fs = _interopRequireDefault(__require("fs"));
  var childProcess = _interopRequireWildcard(__require("child_process"));
  var readline = _interopRequireWildcard(__require("readline"));
  var _ = require_utils();
  var _fileUtils = require_fileUtils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var gracefullyCloseSet = exports.gracefullyCloseSet = new Set;
  var killSet = new Set;
  async function gracefullyCloseAll() {
    await Promise.all(Array.from(gracefullyCloseSet).map((gracefullyClose) => gracefullyClose().catch((e) => {
    })));
  }
  function gracefullyProcessExitDoNotHang(code) {
    setTimeout(() => process.exit(code), 30000);
    gracefullyCloseAll().then(() => {
      process.exit(code);
    });
  }
  function exitHandler() {
    for (const kill of killSet)
      kill();
  }
  var sigintHandlerCalled = false;
  function sigintHandler() {
    const exitWithCode130 = () => {
      if ((0, _.isUnderTest)()) {
        setTimeout(() => process.exit(130), 1000);
      } else {
        process.exit(130);
      }
    };
    if (sigintHandlerCalled) {
      process.off("SIGINT", sigintHandler);
      for (const kill of killSet)
        kill();
      exitWithCode130();
    } else {
      sigintHandlerCalled = true;
      gracefullyCloseAll().then(() => exitWithCode130());
    }
  }
  function sigtermHandler() {
    gracefullyCloseAll();
  }
  function sighupHandler() {
    gracefullyCloseAll();
  }
  var installedHandlers = new Set;
  var processHandlers = {
    exit: exitHandler,
    SIGINT: sigintHandler,
    SIGTERM: sigtermHandler,
    SIGHUP: sighupHandler
  };
  function addProcessHandlerIfNeeded(name) {
    if (!installedHandlers.has(name)) {
      installedHandlers.add(name);
      process.on(name, processHandlers[name]);
    }
  }
  function removeProcessHandlersIfNeeded() {
    if (killSet.size)
      return;
    for (const handler of installedHandlers)
      process.off(handler, processHandlers[handler]);
    installedHandlers.clear();
  }
  async function launchProcess(options) {
    const stdio = options.stdio === "pipe" ? ["ignore", "pipe", "pipe", "pipe", "pipe"] : ["pipe", "pipe", "pipe"];
    options.log(`<launching> ${options.command} ${options.args ? options.args.join(" ") : ""}`);
    const spawnOptions = {
      detached: process.platform !== "win32",
      env: options.env,
      cwd: options.cwd,
      shell: options.shell,
      stdio
    };
    const spawnedProcess = childProcess.spawn(options.command, options.args || [], spawnOptions);
    const cleanup = async () => {
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      const errors = await (0, _fileUtils.removeFolders)(options.tempDirectories);
      for (let i = 0;i < options.tempDirectories.length; ++i) {
        if (errors[i])
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${options.tempDirectories[i]}: ${errors[i]}`);
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    };
    spawnedProcess.on("error", () => {
    });
    if (!spawnedProcess.pid) {
      let failed;
      const failedPromise = new Promise((f, r) => failed = f);
      spawnedProcess.once("error", (error) => {
        failed(new Error("Failed to launch: " + error));
      });
      return cleanup().then(() => failedPromise).then((e) => Promise.reject(e));
    }
    options.log(`<launched> pid=${spawnedProcess.pid}`);
    const stdout = readline.createInterface({
      input: spawnedProcess.stdout
    });
    stdout.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][out] ` + data);
    });
    const stderr = readline.createInterface({
      input: spawnedProcess.stderr
    });
    stderr.on("line", (data) => {
      options.log(`[pid=${spawnedProcess.pid}][err] ` + data);
    });
    let processClosed = false;
    let fulfillCleanup = () => {
    };
    const waitForCleanup = new Promise((f) => fulfillCleanup = f);
    spawnedProcess.once("exit", (exitCode, signal) => {
      options.log(`[pid=${spawnedProcess.pid}] <process did exit: exitCode=${exitCode}, signal=${signal}>`);
      processClosed = true;
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.onExit(exitCode, signal);
      cleanup().then(fulfillCleanup);
    });
    addProcessHandlerIfNeeded("exit");
    if (options.handleSIGINT)
      addProcessHandlerIfNeeded("SIGINT");
    if (options.handleSIGTERM)
      addProcessHandlerIfNeeded("SIGTERM");
    if (options.handleSIGHUP)
      addProcessHandlerIfNeeded("SIGHUP");
    gracefullyCloseSet.add(gracefullyClose);
    killSet.add(killProcessAndCleanup);
    let gracefullyClosing = false;
    async function gracefullyClose() {
      if (gracefullyClosing) {
        options.log(`[pid=${spawnedProcess.pid}] <forcefully close>`);
        killProcess();
        await waitForCleanup;
        return;
      }
      gracefullyClosing = true;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close start>`);
      await options.attemptToGracefullyClose().catch(() => killProcess());
      await waitForCleanup;
      options.log(`[pid=${spawnedProcess.pid}] <gracefully close end>`);
    }
    function killProcess() {
      gracefullyCloseSet.delete(gracefullyClose);
      killSet.delete(killProcessAndCleanup);
      removeProcessHandlersIfNeeded();
      options.log(`[pid=${spawnedProcess.pid}] <kill>`);
      if (spawnedProcess.pid && !spawnedProcess.killed && !processClosed) {
        options.log(`[pid=${spawnedProcess.pid}] <will force kill>`);
        try {
          if (process.platform === "win32") {
            const taskkillProcess = childProcess.spawnSync(`taskkill /pid ${spawnedProcess.pid} /T /F`, {
              shell: true
            });
            const [stdout2, stderr2] = [taskkillProcess.stdout.toString(), taskkillProcess.stderr.toString()];
            if (stdout2)
              options.log(`[pid=${spawnedProcess.pid}] taskkill stdout: ${stdout2}`);
            if (stderr2)
              options.log(`[pid=${spawnedProcess.pid}] taskkill stderr: ${stderr2}`);
          } else {
            process.kill(-spawnedProcess.pid, "SIGKILL");
          }
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid}] exception while trying to kill process: ${e}`);
        }
      } else {
        options.log(`[pid=${spawnedProcess.pid}] <skipped force kill spawnedProcess.killed=${spawnedProcess.killed} processClosed=${processClosed}>`);
      }
    }
    function killProcessAndCleanup() {
      killProcess();
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] starting temporary directories cleanup`);
      for (const dir of options.tempDirectories) {
        try {
          _fs.default.rmSync(dir, {
            force: true,
            recursive: true,
            maxRetries: 5
          });
        } catch (e) {
          options.log(`[pid=${spawnedProcess.pid || "N/A"}] exception while removing ${dir}: ${e}`);
        }
      }
      options.log(`[pid=${spawnedProcess.pid || "N/A"}] finished temporary directories cleanup`);
    }
    function killAndWait() {
      killProcess();
      return waitForCleanup;
    }
    return {
      launchedProcess: spawnedProcess,
      gracefullyClose,
      kill: killAndWait
    };
  }
  function envArrayToObject(env) {
    const result = {};
    for (const {
      name,
      value
    } of env)
      result[name] = value;
    return result;
  }
});

// node_modules/playwright-core/lib/utils/profiler.js
var require_profiler = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.startProfiling = startProfiling;
  exports.stopProfiling = stopProfiling;
  var fs = _interopRequireWildcard(__require("fs"));
  var path = _interopRequireWildcard(__require("path"));
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var profileDir = process.env.PWTEST_PROFILE_DIR || "";
  var session;
  async function startProfiling() {
    if (!profileDir)
      return;
    session = new (__require("inspector")).Session;
    session.connect();
    await new Promise((f) => {
      session.post("Profiler.enable", () => {
        session.post("Profiler.start", f);
      });
    });
  }
  async function stopProfiling(profileName) {
    if (!profileDir)
      return;
    await new Promise((f) => session.post("Profiler.stop", (err, {
      profile
    }) => {
      if (!err) {
        fs.mkdirSync(profileDir, {
          recursive: true
        });
        fs.writeFileSync(path.join(profileDir, profileName + ".json"), JSON.stringify(profile));
      }
      f();
    }));
  }
});

// node_modules/playwright-core/lib/utils/semaphore.js
var require_semaphore = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Semaphore = undefined;
  var _manualPromise = require_manualPromise();

  class Semaphore {
    constructor(max) {
      this._max = undefined;
      this._acquired = 0;
      this._queue = [];
      this._max = max;
    }
    setMax(max) {
      this._max = max;
    }
    acquire() {
      const lock = new _manualPromise.ManualPromise;
      this._queue.push(lock);
      this._flush();
      return lock;
    }
    release() {
      --this._acquired;
      this._flush();
    }
    _flush() {
      while (this._acquired < this._max && this._queue.length) {
        ++this._acquired;
        this._queue.shift().resolve();
      }
    }
  }
  exports.Semaphore = Semaphore;
});

// node_modules/playwright-core/lib/utils/spawnAsync.js
var require_spawnAsync = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.spawnAsync = spawnAsync;
  var _child_process = __require("child_process");
  function spawnAsync(cmd, args, options = {}) {
    const process2 = (0, _child_process.spawn)(cmd, args, Object.assign({
      windowsHide: true
    }, options));
    return new Promise((resolve) => {
      let stdout = "";
      let stderr = "";
      if (process2.stdout)
        process2.stdout.on("data", (data) => stdout += data.toString());
      if (process2.stderr)
        process2.stderr.on("data", (data) => stderr += data.toString());
      process2.on("close", (code) => resolve({
        stdout,
        stderr,
        code
      }));
      process2.on("error", (error) => resolve({
        stdout,
        stderr,
        code: 0,
        error
      }));
    });
  }
});

// node_modules/playwright-core/lib/utils/task.js
var require_task = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.makeWaitForNextTask = makeWaitForNextTask;
  function makeWaitForNextTask() {
    if (process.versions.electron)
      return (callback) => setTimeout(callback, 0);
    if (parseInt(process.versions.node, 10) >= 11)
      return setImmediate;
    let spinning = false;
    const callbacks = [];
    const loop = () => {
      const callback = callbacks.shift();
      if (!callback) {
        spinning = false;
        return;
      }
      setImmediate(loop);
      callback();
    };
    return (callback) => {
      callbacks.push(callback);
      if (!spinning) {
        spinning = true;
        setImmediate(loop);
      }
    };
  }
});

// node_modules/playwright-core/lib/utils/timeoutRunner.js
var require_timeoutRunner = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.pollAgainstDeadline = pollAgainstDeadline;
  exports.raceAgainstDeadline = raceAgainstDeadline;
  var _ = require_utils();
  async function raceAgainstDeadline(cb, deadline) {
    let timer;
    return Promise.race([cb().then((result) => {
      return {
        result,
        timedOut: false
      };
    }), new Promise((resolve) => {
      const kMaxDeadline = 2147483647;
      const timeout = (deadline || kMaxDeadline) - (0, _.monotonicTime)();
      timer = setTimeout(() => resolve({
        timedOut: true
      }), timeout);
    })]).finally(() => {
      clearTimeout(timer);
    });
  }
  async function pollAgainstDeadline(callback, deadline, pollIntervals = [100, 250, 500, 1000]) {
    var _pollIntervals$pop;
    const lastPollInterval = (_pollIntervals$pop = pollIntervals.pop()) !== null && _pollIntervals$pop !== undefined ? _pollIntervals$pop : 1000;
    let lastResult;
    const wrappedCallback = () => Promise.resolve().then(callback);
    while (true) {
      var _shift;
      const time = (0, _.monotonicTime)();
      if (deadline && time >= deadline)
        break;
      const received = await raceAgainstDeadline(wrappedCallback, deadline);
      if (received.timedOut)
        break;
      lastResult = received.result.result;
      if (!received.result.continuePolling)
        return {
          result: lastResult,
          timedOut: false
        };
      const interval = (_shift = pollIntervals.shift()) !== null && _shift !== undefined ? _shift : lastPollInterval;
      if (deadline && deadline <= (0, _.monotonicTime)() + interval)
        break;
      await new Promise((x) => setTimeout(x, interval));
    }
    return {
      timedOut: true,
      result: lastResult
    };
  }
});

// node_modules/playwright-core/lib/utils/traceUtils.js
var require_traceUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeClientSideCallMetadata = serializeClientSideCallMetadata;
  function serializeClientSideCallMetadata(metadatas) {
    const fileNames = new Map;
    const stacks = [];
    for (const m of metadatas) {
      if (!m.stack || !m.stack.length)
        continue;
      const stack = [];
      for (const frame of m.stack) {
        let ordinal = fileNames.get(frame.file);
        if (typeof ordinal !== "number") {
          ordinal = fileNames.size;
          fileNames.set(frame.file, ordinal);
        }
        const stackFrame = [ordinal, frame.line || 0, frame.column || 0, frame.function || ""];
        stack.push(stackFrame);
      }
      stacks.push([m.id, stack]);
    }
    return {
      files: [...fileNames.keys()],
      stacks
    };
  }
});

// node_modules/playwright-core/lib/utils/wsServer.js
var require_wsServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.perMessageDeflate = exports.WSServer = undefined;
  var _utils = require_utils();
  var _utilsBundle = require_utilsBundle();
  var _debugLogger = require_debugLogger();
  var lastConnectionId = 0;
  var kConnectionSymbol = Symbol("kConnection");
  var perMessageDeflate = exports.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };

  class WSServer {
    constructor(delegate) {
      this._wsServer = undefined;
      this.server = undefined;
      this._delegate = undefined;
      this._delegate = delegate;
    }
    async listen(port = 0, hostname, path) {
      _debugLogger.debugLogger.log("server", `Server started at ${new Date}`);
      const server = (0, _utils.createHttpServer)((request, response) => {
        if (request.method === "GET" && request.url === "/json") {
          response.setHeader("Content-Type", "application/json");
          response.end(JSON.stringify({
            wsEndpointPath: path
          }));
          return;
        }
        response.end("Running");
      });
      server.on("error", (error) => _debugLogger.debugLogger.log("server", String(error)));
      this.server = server;
      const wsEndpoint = await new Promise((resolve, reject) => {
        server.listen(port, hostname, () => {
          const address = server.address();
          if (!address) {
            reject(new Error("Could not bind server socket"));
            return;
          }
          const wsEndpoint2 = typeof address === "string" ? `${address}${path}` : `ws://${hostname || "localhost"}:${address.port}${path}`;
          resolve(wsEndpoint2);
        }).on("error", reject);
      });
      _debugLogger.debugLogger.log("server", "Listening at " + wsEndpoint);
      this._wsServer = new _utilsBundle.wsServer({
        noServer: true,
        perMessageDeflate
      });
      if (this._delegate.onHeaders)
        this._wsServer.on("headers", (headers) => this._delegate.onHeaders(headers));
      server.on("upgrade", (request, socket, head) => {
        var _this$_delegate$onUpg, _this$_delegate, _this$_wsServer;
        const pathname = new URL("http://localhost" + request.url).pathname;
        if (pathname !== path) {
          socket.write(`HTTP/${request.httpVersion} 400 Bad Request\r
\r
`);
          socket.destroy();
          return;
        }
        const upgradeResult = (_this$_delegate$onUpg = (_this$_delegate = this._delegate).onUpgrade) === null || _this$_delegate$onUpg === undefined ? undefined : _this$_delegate$onUpg.call(_this$_delegate, request, socket);
        if (upgradeResult) {
          socket.write(upgradeResult.error);
          socket.destroy();
          return;
        }
        (_this$_wsServer = this._wsServer) === null || _this$_wsServer === undefined || _this$_wsServer.handleUpgrade(request, socket, head, (ws) => {
          var _this$_wsServer2;
          return (_this$_wsServer2 = this._wsServer) === null || _this$_wsServer2 === undefined ? undefined : _this$_wsServer2.emit("connection", ws, request);
        });
      });
      this._wsServer.on("connection", (ws, request) => {
        _debugLogger.debugLogger.log("server", "Connected client ws.extension=" + ws.extensions);
        const url = new URL("http://localhost" + (request.url || ""));
        const id = String(++lastConnectionId);
        _debugLogger.debugLogger.log("server", `[${id}] serving connection: ${request.url}`);
        const connection = this._delegate.onConnection(request, url, ws, id);
        ws[kConnectionSymbol] = connection;
      });
      return wsEndpoint;
    }
    async close() {
      var _this$_delegate$onClo, _this$_delegate2;
      const server = this._wsServer;
      if (!server)
        return;
      _debugLogger.debugLogger.log("server", "closing websocket server");
      const waitForClose = new Promise((f) => server.close(f));
      await Promise.all(Array.from(server.clients).map(async (ws) => {
        const connection = ws[kConnectionSymbol];
        if (connection)
          await connection.close();
        try {
          ws.terminate();
        } catch (e) {
        }
      }));
      await waitForClose;
      _debugLogger.debugLogger.log("server", "closing http server");
      if (this.server)
        await new Promise((f) => this.server.close(f));
      this._wsServer = undefined;
      this.server = undefined;
      _debugLogger.debugLogger.log("server", "closed server");
      await ((_this$_delegate$onClo = (_this$_delegate2 = this._delegate).onClose) === null || _this$_delegate$onClo === undefined ? undefined : _this$_delegate$onClo.call(_this$_delegate2));
    }
  }
  exports.WSServer = WSServer;
});

// node_modules/playwright-core/lib/utils/zipFile.js
var require_zipFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ZipFile = undefined;
  var _zipBundle = require_zipBundle();

  class ZipFile {
    constructor(fileName) {
      this._fileName = undefined;
      this._zipFile = undefined;
      this._entries = new Map;
      this._openedPromise = undefined;
      this._fileName = fileName;
      this._openedPromise = this._open();
    }
    async _open() {
      await new Promise((fulfill, reject) => {
        _zipBundle.yauzl.open(this._fileName, {
          autoClose: false
        }, (e, z2) => {
          if (e) {
            reject(e);
            return;
          }
          this._zipFile = z2;
          this._zipFile.on("entry", (entry) => {
            this._entries.set(entry.fileName, entry);
          });
          this._zipFile.on("end", fulfill);
        });
      });
    }
    async entries() {
      await this._openedPromise;
      return [...this._entries.keys()];
    }
    async read(entryPath) {
      await this._openedPromise;
      const entry = this._entries.get(entryPath);
      if (!entry)
        throw new Error(`${entryPath} not found in file ${this._fileName}`);
      return new Promise((resolve, reject) => {
        this._zipFile.openReadStream(entry, (error, readStream) => {
          if (error || !readStream) {
            reject(error || "Entry not found");
            return;
          }
          const buffers = [];
          readStream.on("data", (data) => buffers.push(data));
          readStream.on("end", () => resolve(Buffer.concat(buffers)));
        });
      });
    }
    close() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === undefined || _this$_zipFile.close();
    }
  }
  exports.ZipFile = ZipFile;
});

// node_modules/playwright-core/lib/utils/zones.js
var require_zones = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.zones = exports.Zone = undefined;
  var _async_hooks = __require("async_hooks");

  class ZoneManager {
    constructor() {
      this._asyncLocalStorage = new _async_hooks.AsyncLocalStorage;
    }
    run(type, data, func) {
      const zone = Zone._createWithData(this._asyncLocalStorage, type, data);
      return this._asyncLocalStorage.run(zone, func);
    }
    zoneData(type) {
      const zone = this._asyncLocalStorage.getStore();
      return zone === null || zone === undefined ? undefined : zone.get(type);
    }
    currentZone() {
      var _this$_asyncLocalStor;
      return (_this$_asyncLocalStor = this._asyncLocalStorage.getStore()) !== null && _this$_asyncLocalStor !== undefined ? _this$_asyncLocalStor : Zone._createEmpty(this._asyncLocalStorage);
    }
    exitZones(func) {
      return this._asyncLocalStorage.run(undefined, func);
    }
  }

  class Zone {
    static _createWithData(asyncLocalStorage, type, data) {
      var _asyncLocalStorage$ge;
      const store = new Map((_asyncLocalStorage$ge = asyncLocalStorage.getStore()) === null || _asyncLocalStorage$ge === undefined ? undefined : _asyncLocalStorage$ge._data);
      store.set(type, data);
      return new Zone(asyncLocalStorage, store);
    }
    static _createEmpty(asyncLocalStorage) {
      return new Zone(asyncLocalStorage, new Map);
    }
    constructor(asyncLocalStorage, store) {
      this._asyncLocalStorage = undefined;
      this._data = undefined;
      this._asyncLocalStorage = asyncLocalStorage;
      this._data = store;
    }
    run(func) {
      const entries = [...this._data.entries()].filter(([type]) => type !== "apiZone" && type !== "expectZone");
      const resetZone = new Zone(this._asyncLocalStorage, new Map(entries));
      return this._asyncLocalStorage.run(resetZone, func);
    }
    get(type) {
      return this._data.get(type);
    }
  }
  exports.Zone = Zone;
  var zones = exports.zones = new ZoneManager;
});

// node_modules/playwright-core/lib/utils/index.js
var require_utils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _ascii = require_ascii();
  Object.keys(_ascii).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _ascii[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _ascii[key];
      }
    });
  });
  var _comparators = require_comparators();
  Object.keys(_comparators).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _comparators[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _comparators[key];
      }
    });
  });
  var _crypto = require_crypto();
  Object.keys(_crypto).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _crypto[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _crypto[key];
      }
    });
  });
  var _debug = require_debug();
  Object.keys(_debug).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _debug[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _debug[key];
      }
    });
  });
  var _debugLogger = require_debugLogger();
  Object.keys(_debugLogger).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _debugLogger[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _debugLogger[key];
      }
    });
  });
  var _env = require_env();
  Object.keys(_env).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _env[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _env[key];
      }
    });
  });
  var _eventsHelper = require_eventsHelper();
  Object.keys(_eventsHelper).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _eventsHelper[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _eventsHelper[key];
      }
    });
  });
  var _expectUtils = require_expectUtils();
  Object.keys(_expectUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _expectUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _expectUtils[key];
      }
    });
  });
  var _fileUtils = require_fileUtils();
  Object.keys(_fileUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _fileUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _fileUtils[key];
      }
    });
  });
  var _headers = require_headers();
  Object.keys(_headers).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _headers[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _headers[key];
      }
    });
  });
  var _hostPlatform = require_hostPlatform();
  Object.keys(_hostPlatform).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _hostPlatform[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _hostPlatform[key];
      }
    });
  });
  var _httpServer = require_httpServer();
  Object.keys(_httpServer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _httpServer[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _httpServer[key];
      }
    });
  });
  var _manualPromise = require_manualPromise();
  Object.keys(_manualPromise).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _manualPromise[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _manualPromise[key];
      }
    });
  });
  var _locatorGenerators = require_locatorGenerators();
  Object.keys(_locatorGenerators).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _locatorGenerators[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _locatorGenerators[key];
      }
    });
  });
  var _mimeType = require_mimeType();
  Object.keys(_mimeType).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _mimeType[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _mimeType[key];
      }
    });
  });
  var _stringUtils = require_stringUtils();
  Object.keys(_stringUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _stringUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _stringUtils[key];
      }
    });
  });
  var _urlMatch = require_urlMatch();
  Object.keys(_urlMatch).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _urlMatch[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _urlMatch[key];
      }
    });
  });
  var _multimap = require_multimap();
  Object.keys(_multimap).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _multimap[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _multimap[key];
      }
    });
  });
  var _network = require_network();
  Object.keys(_network).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _network[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _network[key];
      }
    });
  });
  var _processLauncher = require_processLauncher();
  Object.keys(_processLauncher).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _processLauncher[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _processLauncher[key];
      }
    });
  });
  var _profiler = require_profiler();
  Object.keys(_profiler).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _profiler[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _profiler[key];
      }
    });
  });
  var _rtti = require_rtti();
  Object.keys(_rtti).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _rtti[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _rtti[key];
      }
    });
  });
  var _semaphore = require_semaphore();
  Object.keys(_semaphore).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _semaphore[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _semaphore[key];
      }
    });
  });
  var _spawnAsync = require_spawnAsync();
  Object.keys(_spawnAsync).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _spawnAsync[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _spawnAsync[key];
      }
    });
  });
  var _stackTrace = require_stackTrace();
  Object.keys(_stackTrace).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _stackTrace[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _stackTrace[key];
      }
    });
  });
  var _task = require_task();
  Object.keys(_task).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _task[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _task[key];
      }
    });
  });
  var _time = require_time();
  Object.keys(_time).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _time[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _time[key];
      }
    });
  });
  var _timeoutRunner = require_timeoutRunner();
  Object.keys(_timeoutRunner).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _timeoutRunner[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _timeoutRunner[key];
      }
    });
  });
  var _traceUtils = require_traceUtils();
  Object.keys(_traceUtils).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _traceUtils[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _traceUtils[key];
      }
    });
  });
  var _userAgent = require_userAgent();
  Object.keys(_userAgent).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _userAgent[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _userAgent[key];
      }
    });
  });
  var _wsServer = require_wsServer();
  Object.keys(_wsServer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _wsServer[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _wsServer[key];
      }
    });
  });
  var _zipFile = require_zipFile();
  Object.keys(_zipFile).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _zipFile[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _zipFile[key];
      }
    });
  });
  var _zones = require_zones();
  Object.keys(_zones).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if (key in exports && exports[key] === _zones[key])
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _zones[key];
      }
    });
  });
});

// node_modules/playwright-core/lib/server/registry/nativeDeps.js
var require_nativeDeps = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deps = undefined;
  var deps = exports.deps = {
    "ubuntu20.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "ttf-unifont", "libfontconfig", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "ttf-ubuntu-font-family"],
      chromium: ["fonts-liberation", "libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libegl1", "libgbm1", "libglib2.0-0", "libgtk-3-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libx11-xcb1", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxrandr2", "libxshmfence1"],
      firefox: ["ffmpeg", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpangoft2-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrender1", "libxt6", "libxtst6"],
      webkit: ["libenchant-2-2", "libflite1", "libx264-155", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libegl1", "libenchant1c2a", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf2.0-0", "libgl1", "libgles2", "libglib2.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu66", "libjpeg-turbo8", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libsecret-1-0", "libvpx6", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libflite.so.1": "libflite1",
        "libflite_usenglish.so.1": "libflite1",
        "libflite_cmu_grapheme_lang.so.1": "libflite1",
        "libflite_cmu_grapheme_lex.so.1": "libflite1",
        "libflite_cmu_indic_lang.so.1": "libflite1",
        "libflite_cmu_indic_lex.so.1": "libflite1",
        "libflite_cmulex.so.1": "libflite1",
        "libflite_cmu_time_awb.so.1": "libflite1",
        "libflite_cmu_us_awb.so.1": "libflite1",
        "libflite_cmu_us_kal16.so.1": "libflite1",
        "libflite_cmu_us_kal.so.1": "libflite1",
        "libflite_cmu_us_rms.so.1": "libflite1",
        "libflite_cmu_us_slt.so.1": "libflite1",
        "libx264.so": "libx264-155",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant.so.1": "libenchant1c2a",
        "libevdev.so.2": "libevdev2",
        "libepoxy.so.0": "libepoxy0",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgdk-x11-2.0.so.0": "libgtk2.0-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGL.so.1": "libgl1",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgthread-2.0.so.0": "libglib2.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgtk-x11-2.0.so.0": "libgtk2.0-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.66": "libicu66",
        "libicuuc.so.66": "libicu66",
        "libjpeg.so.8": "libjpeg-turbo8",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpangoft2-1.0.so.0": "libpangoft2-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libvpx.so.6": "libvpx6",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-dri3.so.0": "libxcb-dri3-0",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXt.so.6": "libxt6",
        "libXtst.so.6": "libxtst6",
        "libxshmfence.so.1": "libxshmfence1",
        "libatomic.so.1": "libatomic1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "ubuntu22.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["ffmpeg", "libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "libenchant-2-2", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu70", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libepoxy0", "libevdev2", "libffi7", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-163", "libatomic1", "libevent-2.1-7", "libavif13"],
      lib2package: {
        "libavif.so.13": "libavif13",
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libffi.so.7": "libffi7",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libjpeg.so.8": "libjpeg-turbo8",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libicui18n.so.60": "libicu70",
        "libicuuc.so.66": "libicu70",
        "libicui18n.so.66": "libicu70",
        "libwebp.so.6": "libwebp6",
        "libenchant-2.so.2": "libenchant-2-2",
        "libx264.so": "libx264-163",
        "libvpx.so.7": "libvpx7",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "ubuntu24.04-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2t64", "libatk-bridge2.0-0t64", "libatk1.0-0t64", "libatspi2.0-0t64", "libcairo2", "libcups2t64", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0t64", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2t64", "libatk1.0-0t64", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0t64", "libgtk-3-0t64", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1"],
      webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libicu74", "libatomic1", "libatk-bridge2.0-0t64", "libatk1.0-0t64", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdrm2", "libenchant-2-2", "libepoxy0", "libevent-2.1-7t64", "libflite1", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0t64", "libgstreamer-gl1.0-0", "libgstreamer-plugins-bad1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0t64", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu74", "libjpeg-turbo8", "liblcms2-2", "libmanette-0.2-0", "libopus0", "libpango-1.0-0", "libpangocairo-1.0-0", "libpng16-16t64", "libsecret-1-0", "libvpx9", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxkbcommon0", "libxml2", "libxslt1.1", "libx264-164", "libavif16"],
      lib2package: {
        "libavif.so.16": "libavif16",
        "libasound.so.2": "libasound2t64",
        "libatk-1.0.so.0": "libatk1.0-0t64",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0t64",
        "libatomic.so.1": "libatomic1",
        "libatspi.so.0": "libatspi2.0-0t64",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2t64",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdrm.so.2": "libdrm2",
        "libenchant-2.so.2": "libenchant-2-2",
        "libepoxy.so.0": "libepoxy0",
        "libevent-2.1.so.7": "libevent-2.1-7t64",
        "libflite_cmu_grapheme_lang.so.1": "libflite1",
        "libflite_cmu_grapheme_lex.so.1": "libflite1",
        "libflite_cmu_indic_lang.so.1": "libflite1",
        "libflite_cmu_indic_lex.so.1": "libflite1",
        "libflite_cmu_time_awb.so.1": "libflite1",
        "libflite_cmu_us_awb.so.1": "libflite1",
        "libflite_cmu_us_kal.so.1": "libflite1",
        "libflite_cmu_us_kal16.so.1": "libflite1",
        "libflite_cmu_us_rms.so.1": "libflite1",
        "libflite_cmu_us_slt.so.1": "libflite1",
        "libflite_cmulex.so.1": "libflite1",
        "libflite_usenglish.so.1": "libflite1",
        "libflite.so.1": "libflite1",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0t64",
        "libgio-2.0.so.0": "libglib2.0-0t64",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0t64",
        "libgmodule-2.0.so.0": "libglib2.0-0t64",
        "libgobject-2.0.so.0": "libglib2.0-0t64",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstcodecparsers-1.0.so.0": "libgstreamer-plugins-bad1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0t64",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicudata.so.74": "libicu74",
        "libicui18n.so.74": "libicu74",
        "libicuuc.so.74": "libicu74",
        "libjpeg.so.8": "libjpeg-turbo8",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16t64",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libvpx.so.9": "libvpx9",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.7": "libwebp7",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libx264.so": "libx264-164"
      }
    },
    "debian11-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-cyrillic", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libwayland-client0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu67", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnghttp2-14", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp6", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7"],
      lib2package: {
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo-gobject.so.2": "libcairo-gobject2",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdbus-glib-1.so.2": "libdbus-glib-1-2",
        "libdrm.so.2": "libdrm2",
        "libEGL.so.1": "libegl1",
        "libenchant-2.so.2": "libenchant-2-2",
        "libepoxy.so.0": "libepoxy0",
        "libevdev.so.2": "libevdev2",
        "libfontconfig.so.1": "libfontconfig1",
        "libfreetype.so.6": "libfreetype6",
        "libgbm.so.1": "libgbm1",
        "libgdk_pixbuf-2.0.so.0": "libgdk-pixbuf-2.0-0",
        "libgdk-3.so.0": "libgtk-3-0",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libGLESv2.so.2": "libgles2",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libGLX.so.0": "libglx0",
        "libgmodule-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libgstallocators-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstapp-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstaudio-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstbase-1.0.so.0": "libgstreamer1.0-0",
        "libgstfft-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstgl-1.0.so.0": "libgstreamer-gl1.0-0",
        "libgstpbutils-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstreamer-1.0.so.0": "libgstreamer1.0-0",
        "libgsttag-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgstvideo-1.0.so.0": "libgstreamer-plugins-base1.0-0",
        "libgtk-3.so.0": "libgtk-3-0",
        "libgudev-1.0.so.0": "libgudev-1.0-0",
        "libharfbuzz-icu.so.0": "libharfbuzz-icu0",
        "libharfbuzz.so.0": "libharfbuzz0b",
        "libhyphen.so.0": "libhyphen0",
        "libicui18n.so.67": "libicu67",
        "libicuuc.so.67": "libicu67",
        "libjpeg.so.62": "libjpeg62-turbo",
        "liblcms2.so.2": "liblcms2-2",
        "libmanette-0.2.so.0": "libmanette-0.2-0",
        "libnotify.so.4": "libnotify4",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libOpenGL.so.0": "libopengl0",
        "libopenjp2.so.7": "libopenjp2-7",
        "libopus.so.0": "libopus0",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libpangocairo-1.0.so.0": "libpangocairo-1.0-0",
        "libpng16.so.16": "libpng16-16",
        "libproxy.so.1": "libproxy1v5",
        "libsecret-1.so.0": "libsecret-1-0",
        "libsmime3.so": "libnss3",
        "libwayland-client.so.0": "libwayland-client0",
        "libwayland-egl.so.1": "libwayland-egl1",
        "libwayland-server.so.0": "libwayland-server0",
        "libwebp.so.6": "libwebp6",
        "libwebpdemux.so.2": "libwebpdemux2",
        "libwoff2dec.so.1.0.2": "libwoff1",
        "libX11-xcb.so.1": "libx11-xcb1",
        "libX11.so.6": "libx11-6",
        "libxcb-shm.so.0": "libxcb-shm0",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXcursor.so.1": "libxcursor1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libXi.so.6": "libxi6",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libxml2.so.2": "libxml2",
        "libXrandr.so.2": "libxrandr2",
        "libXrender.so.1": "libxrender1",
        "libxslt.so.1": "libxslt1.1",
        "libXtst.so.6": "libxtst6",
        "libatomic.so.1": "libatomic1",
        "libevent-2.1.so.7": "libevent-2.1-7"
      }
    },
    "debian12-x64": {
      tools: ["xvfb", "fonts-noto-color-emoji", "fonts-unifont", "libfontconfig1", "libfreetype6", "xfonts-scalable", "fonts-liberation", "fonts-ipafont-gothic", "fonts-wqy-zenhei", "fonts-tlwg-loma-otf", "fonts-freefont-ttf"],
      chromium: ["libasound2", "libatk-bridge2.0-0", "libatk1.0-0", "libatspi2.0-0", "libcairo2", "libcups2", "libdbus-1-3", "libdrm2", "libgbm1", "libglib2.0-0", "libnspr4", "libnss3", "libpango-1.0-0", "libx11-6", "libxcb1", "libxcomposite1", "libxdamage1", "libxext6", "libxfixes3", "libxkbcommon0", "libxrandr2"],
      firefox: ["libasound2", "libatk1.0-0", "libcairo-gobject2", "libcairo2", "libdbus-1-3", "libdbus-glib-1-2", "libfontconfig1", "libfreetype6", "libgdk-pixbuf-2.0-0", "libglib2.0-0", "libgtk-3-0", "libharfbuzz0b", "libpango-1.0-0", "libpangocairo-1.0-0", "libx11-6", "libx11-xcb1", "libxcb-shm0", "libxcb1", "libxcomposite1", "libxcursor1", "libxdamage1", "libxext6", "libxfixes3", "libxi6", "libxrandr2", "libxrender1", "libxtst6"],
      webkit: ["libsoup-3.0-0", "gstreamer1.0-libav", "gstreamer1.0-plugins-bad", "gstreamer1.0-plugins-base", "gstreamer1.0-plugins-good", "libatk-bridge2.0-0", "libatk1.0-0", "libcairo2", "libdbus-1-3", "libdrm2", "libegl1", "libenchant-2-2", "libepoxy0", "libevdev2", "libfontconfig1", "libfreetype6", "libgbm1", "libgdk-pixbuf-2.0-0", "libgles2", "libglib2.0-0", "libglx0", "libgstreamer-gl1.0-0", "libgstreamer-plugins-base1.0-0", "libgstreamer1.0-0", "libgtk-3-0", "libgudev-1.0-0", "libharfbuzz-icu0", "libharfbuzz0b", "libhyphen0", "libicu72", "libjpeg62-turbo", "liblcms2-2", "libmanette-0.2-0", "libnotify4", "libopengl0", "libopenjp2-7", "libopus0", "libpango-1.0-0", "libpng16-16", "libproxy1v5", "libsecret-1-0", "libwayland-client0", "libwayland-egl1", "libwayland-server0", "libwebp7", "libwebpdemux2", "libwoff1", "libx11-6", "libxcomposite1", "libxdamage1", "libxkbcommon0", "libxml2", "libxslt1.1", "libatomic1", "libevent-2.1-7", "libavif15"],
      lib2package: {
        "libavif.so.15": "libavif15",
        "libsoup-3.0.so.0": "libsoup-3.0-0",
        "libasound.so.2": "libasound2",
        "libatk-1.0.so.0": "libatk1.0-0",
        "libatk-bridge-2.0.so.0": "libatk-bridge2.0-0",
        "libatspi.so.0": "libatspi2.0-0",
        "libcairo.so.2": "libcairo2",
        "libcups.so.2": "libcups2",
        "libdbus-1.so.3": "libdbus-1-3",
        "libdrm.so.2": "libdrm2",
        "libgbm.so.1": "libgbm1",
        "libgio-2.0.so.0": "libglib2.0-0",
        "libglib-2.0.so.0": "libglib2.0-0",
        "libgobject-2.0.so.0": "libglib2.0-0",
        "libnspr4.so": "libnspr4",
        "libnss3.so": "libnss3",
        "libnssutil3.so": "libnss3",
        "libpango-1.0.so.0": "libpango-1.0-0",
        "libsmime3.so": "libnss3",
        "libX11.so.6": "libx11-6",
        "libxcb.so.1": "libxcb1",
        "libXcomposite.so.1": "libxcomposite1",
        "libXdamage.so.1": "libxdamage1",
        "libXext.so.6": "libxext6",
        "libXfixes.so.3": "libxfixes3",
        "libxkbcommon.so.0": "libxkbcommon0",
        "libXrandr.so.2": "libxrandr2"
      }
    }
  };
  deps["ubuntu20.04-arm64"] = {
    tools: [...deps["ubuntu20.04-x64"].tools],
    chromium: [...deps["ubuntu20.04-x64"].chromium],
    firefox: [...deps["ubuntu20.04-x64"].firefox],
    webkit: [...deps["ubuntu20.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu20.04-x64"].lib2package
    }
  };
  deps["ubuntu22.04-arm64"] = {
    tools: [...deps["ubuntu22.04-x64"].tools],
    chromium: [...deps["ubuntu22.04-x64"].chromium],
    firefox: [...deps["ubuntu22.04-x64"].firefox],
    webkit: [...deps["ubuntu22.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu22.04-x64"].lib2package
    }
  };
  deps["ubuntu24.04-arm64"] = {
    tools: [...deps["ubuntu24.04-x64"].tools],
    chromium: [...deps["ubuntu24.04-x64"].chromium],
    firefox: [...deps["ubuntu24.04-x64"].firefox],
    webkit: [...deps["ubuntu24.04-x64"].webkit],
    lib2package: {
      ...deps["ubuntu24.04-x64"].lib2package
    }
  };
  deps["debian11-arm64"] = {
    tools: [...deps["debian11-x64"].tools],
    chromium: [...deps["debian11-x64"].chromium],
    firefox: [...deps["debian11-x64"].firefox],
    webkit: [...deps["debian11-x64"].webkit],
    lib2package: {
      ...deps["debian11-x64"].lib2package
    }
  };
  deps["debian12-arm64"] = {
    tools: [...deps["debian12-x64"].tools],
    chromium: [...deps["debian12-x64"].chromium],
    firefox: [...deps["debian12-x64"].firefox],
    webkit: [...deps["debian12-x64"].webkit],
    lib2package: {
      ...deps["debian12-x64"].lib2package
    }
  };
});

// node_modules/playwright-core/lib/server/registry/dependencies.js
var require_dependencies = __commonJS((exports) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dockerVersion = dockerVersion;
  exports.installDependenciesLinux = installDependenciesLinux;
  exports.installDependenciesWindows = installDependenciesWindows;
  exports.readDockerVersionSync = readDockerVersionSync;
  exports.transformCommandsForRoot = transformCommandsForRoot;
  exports.validateDependenciesLinux = validateDependenciesLinux;
  exports.validateDependenciesWindows = validateDependenciesWindows;
  exports.writeDockerVersion = writeDockerVersion;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var os = _interopRequireWildcard(__require("os"));
  var _child_process = _interopRequireDefault(__require("child_process"));
  var utils = _interopRequireWildcard(require_utils());
  var _spawnAsync = require_spawnAsync();
  var _hostPlatform = require_hostPlatform();
  var _ = require_registry();
  var _nativeDeps = require_nativeDeps();
  var _userAgent = require_userAgent();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var BIN_DIRECTORY = _path.default.join(__dirname, "..", "..", "..", "bin");
  var languageBindingVersion = process.env.PW_CLI_DISPLAY_VERSION || require_package().version;
  var dockerVersionFilePath = "/ms-playwright/.docker-info";
  async function writeDockerVersion(dockerImageNameTemplate) {
    await _fs.default.promises.mkdir(_path.default.dirname(dockerVersionFilePath), {
      recursive: true
    });
    await _fs.default.promises.writeFile(dockerVersionFilePath, JSON.stringify(dockerVersion(dockerImageNameTemplate), null, 2), "utf8");
    await _fs.default.promises.chmod(dockerVersionFilePath, 511);
  }
  function dockerVersion(dockerImageNameTemplate) {
    return {
      driverVersion: languageBindingVersion,
      dockerImageName: dockerImageNameTemplate.replace("%version%", languageBindingVersion)
    };
  }
  function readDockerVersionSync() {
    try {
      const data = JSON.parse(_fs.default.readFileSync(dockerVersionFilePath, "utf8"));
      return {
        ...data,
        dockerImageNameTemplate: data.dockerImageName.replace(data.driverVersion, "%version%")
      };
    } catch (e) {
      return null;
    }
  }
  var checkExecutable = (filePath) => {
    if (process.platform === "win32")
      return filePath.endsWith(".exe");
    return _fs.default.promises.access(filePath, _fs.default.constants.X_OK).then(() => true).catch(() => false);
  };
  function isSupportedWindowsVersion() {
    if (os.platform() !== "win32" || os.arch() !== "x64")
      return false;
    const [major, minor] = os.release().split(".").map((token) => parseInt(token, 10));
    return major > 6 || major === 6 && minor > 1;
  }
  async function installDependenciesWindows(targets, dryRun) {
    if (targets.has("chromium")) {
      const command = "powershell.exe";
      const args = ["-ExecutionPolicy", "Bypass", "-File", _path.default.join(BIN_DIRECTORY, "install_media_pack.ps1")];
      if (dryRun) {
        console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
        return;
      }
      const {
        code
      } = await (0, _spawnAsync.spawnAsync)(command, args, {
        cwd: BIN_DIRECTORY,
        stdio: "inherit"
      });
      if (code !== 0)
        throw new Error("Failed to install windows dependencies!");
    }
  }
  async function installDependenciesLinux(targets, dryRun) {
    const libraries = [];
    const platform = _hostPlatform.hostPlatform;
    if (!_hostPlatform.isOfficiallySupportedPlatform)
      console.warn(`BEWARE: your OS is not officially supported by Playwright; installing dependencies for ${platform} as a fallback.`);
    for (const target of targets) {
      const info = _nativeDeps.deps[platform];
      if (!info) {
        console.warn(`Cannot install dependencies for ${platform}!`);
        return;
      }
      libraries.push(...info[target]);
    }
    const uniqueLibraries = Array.from(new Set(libraries));
    if (!dryRun)
      console.log(`Installing dependencies...`);
    const commands = [];
    commands.push("apt-get update");
    commands.push(["apt-get", "install", "-y", "--no-install-recommends", ...uniqueLibraries].join(" "));
    const {
      command,
      args,
      elevatedPermissions
    } = await transformCommandsForRoot(commands);
    if (dryRun) {
      console.log(`${command} ${quoteProcessArgs(args).join(" ")}`);
      return;
    }
    if (elevatedPermissions)
      console.log("Switching to root user to install dependencies...");
    const child = _child_process.default.spawn(command, args, {
      stdio: "inherit"
    });
    await new Promise((resolve, reject) => {
      child.on("exit", (code) => code === 0 ? resolve() : reject(new Error(`Installation process exited with code: ${code}`)));
      child.on("error", reject);
    });
  }
  async function validateDependenciesWindows(windowsExeAndDllDirectories) {
    const directoryPaths = windowsExeAndDllDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths)
      lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const allMissingDeps = await Promise.all(lddPaths.map((lddPath) => missingFileDependenciesWindows(lddPath)));
    const missingDeps = new Set;
    for (const deps of allMissingDeps) {
      for (const dep of deps)
        missingDeps.add(dep);
    }
    if (!missingDeps.size)
      return;
    let isCrtMissing = false;
    let isMediaFoundationMissing = false;
    for (const dep of missingDeps) {
      if (dep.startsWith("api-ms-win-crt") || dep === "vcruntime140.dll" || dep === "vcruntime140_1.dll" || dep === "msvcp140.dll")
        isCrtMissing = true;
      else if (dep === "mf.dll" || dep === "mfplat.dll" || dep === "msmpeg2vdec.dll" || dep === "evr.dll" || dep === "avrt.dll")
        isMediaFoundationMissing = true;
    }
    const details = [];
    if (isCrtMissing) {
      details.push(`Some of the Universal C Runtime files cannot be found on the system. You can fix`, `that by installing Microsoft Visual C++ Redistributable for Visual Studio from:`, `https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads`, ``);
    }
    if (isMediaFoundationMissing) {
      details.push(`Some of the Media Foundation files cannot be found on the system. If you are`, `on Windows Server try fixing this by running the following command in PowerShell`, `as Administrator:`, ``, `    Install-WindowsFeature Server-Media-Foundation`, ``, `For Windows N editions visit:`, `https://support.microsoft.com/en-us/help/3145500/media-feature-pack-list-for-windows-n-editions`, ``);
    }
    details.push(`Full list of missing libraries:`, `    ${[...missingDeps].join(`
    `)}`, ``);
    const message = `Host system is missing dependencies!

${details.join(`
`)}`;
    if (isSupportedWindowsVersion()) {
      throw new Error(message);
    } else {
      console.warn(`WARNING: running on unsupported windows version!`);
      console.warn(message);
    }
  }
  async function validateDependenciesLinux(sdkLanguage, linuxLddDirectories, dlOpenLibraries) {
    var _deps$hostPlatform, _process$getuid, _process;
    const directoryPaths = linuxLddDirectories;
    const lddPaths = [];
    for (const directoryPath of directoryPaths)
      lddPaths.push(...await executablesOrSharedLibraries(directoryPath));
    const missingDepsPerFile = await Promise.all(lddPaths.map((lddPath) => missingFileDependencies(lddPath, directoryPaths)));
    const missingDeps = new Set;
    for (const deps of missingDepsPerFile) {
      for (const dep of deps)
        missingDeps.add(dep);
    }
    for (const dep of await missingDLOPENLibraries(dlOpenLibraries))
      missingDeps.add(dep);
    if (!missingDeps.size)
      return;
    const allMissingDeps = new Set(missingDeps);
    const missingPackages = new Set;
    const libraryToPackageNameMapping = _nativeDeps.deps[_hostPlatform.hostPlatform] ? {
      ...((_deps$hostPlatform = _nativeDeps.deps[_hostPlatform.hostPlatform]) === null || _deps$hostPlatform === undefined ? undefined : _deps$hostPlatform.lib2package) || {},
      ...MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU
    } : {};
    for (const missingDep of missingDeps) {
      const packageName = libraryToPackageNameMapping[missingDep];
      if (packageName) {
        missingPackages.add(packageName);
        missingDeps.delete(missingDep);
      }
    }
    const maybeSudo = (_process$getuid = (_process = process).getuid) !== null && _process$getuid !== undefined && _process$getuid.call(_process) && os.platform() !== "win32" ? "sudo " : "";
    const dockerInfo = readDockerVersionSync();
    const errorLines = [`Host system is missing dependencies to run browsers.`];
    if (dockerInfo && !dockerInfo.driverVersion.startsWith((0, _userAgent.getPlaywrightVersion)(true) + ".")) {
      const pwVersion = (0, _userAgent.getPlaywrightVersion)();
      const requiredDockerImage = dockerInfo.dockerImageName.replace(dockerInfo.driverVersion, pwVersion);
      errorLines.push(...[`This is most likely due to Docker image version not matching Playwright version:`, `- Playwright  : ${pwVersion}`, `- Docker image: ${dockerInfo.driverVersion}`, ``, `Either:`, `- (recommended) use Docker image "${requiredDockerImage}"`, `- (alternative 1) run the following command inside Docker to install missing dependencies:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `- (alternative 2) use apt inside Docker:`, ``, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else if (missingPackages.size && !missingDeps.size) {
      errorLines.push(...[`Please install them with the following command:`, ``, `    ${maybeSudo}${(0, _.buildPlaywrightCLICommand)(sdkLanguage, "install-deps")}`, ``, `Alternatively, use apt:`, `    ${maybeSudo}apt-get install ${[...missingPackages].join("\\\n        ")}`, ``, `<3 Playwright Team`]);
    } else {
      errorLines.push(...[`Missing libraries:`, ...[...allMissingDeps].map((dep) => "    " + dep)]);
    }
    throw new Error(`
` + utils.wrapInASCIIBox(errorLines.join(`
`), 1));
  }
  function isSharedLib(basename) {
    switch (os.platform()) {
      case "linux":
        return basename.endsWith(".so") || basename.includes(".so.");
      case "win32":
        return basename.endsWith(".dll");
      default:
        return false;
    }
  }
  async function executablesOrSharedLibraries(directoryPath) {
    if (!_fs.default.existsSync(directoryPath))
      return [];
    const allPaths = (await _fs.default.promises.readdir(directoryPath)).map((file) => _path.default.resolve(directoryPath, file));
    const allStats = await Promise.all(allPaths.map((aPath) => _fs.default.promises.stat(aPath)));
    const filePaths = allPaths.filter((aPath, index) => allStats[index].isFile());
    const executablersOrLibraries = (await Promise.all(filePaths.map(async (filePath) => {
      const basename = _path.default.basename(filePath).toLowerCase();
      if (isSharedLib(basename))
        return filePath;
      if (await checkExecutable(filePath))
        return filePath;
      return false;
    }))).filter(Boolean);
    return executablersOrLibraries;
  }
  async function missingFileDependenciesWindows(filePath) {
    const executable = _path.default.join(__dirname, "..", "..", "..", "bin", "PrintDeps.exe");
    const dirname2 = _path.default.dirname(filePath);
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)(executable, [filePath], {
      cwd: dirname2,
      env: {
        ...process.env,
        LD_LIBRARY_PATH: process.env.LD_LIBRARY_PATH ? `${process.env.LD_LIBRARY_PATH}:${dirname2}` : dirname2
      }
    });
    if (code !== 0)
      return [];
    const missingDeps = stdout.split(`
`).map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim().toLowerCase());
    return missingDeps;
  }
  async function missingFileDependencies(filePath, extraLDPaths) {
    const dirname2 = _path.default.dirname(filePath);
    let LD_LIBRARY_PATH = extraLDPaths.join(":");
    if (process.env.LD_LIBRARY_PATH)
      LD_LIBRARY_PATH = `${process.env.LD_LIBRARY_PATH}:${LD_LIBRARY_PATH}`;
    const {
      stdout,
      code
    } = await (0, _spawnAsync.spawnAsync)("ldd", [filePath], {
      cwd: dirname2,
      env: {
        ...process.env,
        LD_LIBRARY_PATH
      }
    });
    if (code !== 0)
      return [];
    const missingDeps = stdout.split(`
`).map((line) => line.trim()).filter((line) => line.endsWith("not found") && line.includes("=>")).map((line) => line.split("=>")[0].trim());
    return missingDeps;
  }
  async function missingDLOPENLibraries(libraries) {
    if (!libraries.length)
      return [];
    const {
      stdout,
      code,
      error
    } = await (0, _spawnAsync.spawnAsync)("/sbin/ldconfig", ["-p"], {});
    if (code !== 0 || error)
      return [];
    const isLibraryAvailable = (library) => stdout.toLowerCase().includes(library.toLowerCase());
    return libraries.filter((library) => !isLibraryAvailable(library));
  }
  var MANUAL_LIBRARY_TO_PACKAGE_NAME_UBUNTU = {
    "libx264.so": "gstreamer1.0-libav"
  };
  function quoteProcessArgs(args) {
    return args.map((arg) => {
      if (arg.includes(" "))
        return `"${arg}"`;
      return arg;
    });
  }
  async function transformCommandsForRoot(commands) {
    var _process$getuid2, _process2;
    const isRoot = ((_process$getuid2 = (_process2 = process).getuid) === null || _process$getuid2 === undefined ? undefined : _process$getuid2.call(_process2)) === 0;
    if (isRoot)
      return {
        command: "sh",
        args: ["-c", `${commands.join("&& ")}`],
        elevatedPermissions: false
      };
    const sudoExists = await (0, _spawnAsync.spawnAsync)("which", ["sudo"]);
    if (sudoExists.code === 0)
      return {
        command: "sudo",
        args: ["--", "sh", "-c", `${commands.join("&& ")}`],
        elevatedPermissions: true
      };
    return {
      command: "su",
      args: ["root", "-c", `${commands.join("&& ")}`],
      elevatedPermissions: true
    };
  }
});

// node_modules/playwright-core/lib/server/registry/browserFetcher.js
var require_browserFetcher = __commonJS((exports) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.downloadBrowserWithProgressBar = downloadBrowserWithProgressBar;
  exports.logPolitely = logPolitely;
  var _fs = _interopRequireDefault(__require("fs"));
  var _os = _interopRequireDefault(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _child_process = _interopRequireDefault(__require("child_process"));
  var _fileUtils = require_fileUtils();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _utilsBundle = require_utilsBundle();
  var _ = require_registry();
  var _userAgent = require_userAgent();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  async function downloadBrowserWithProgressBar(title, browserDirectory, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout) {
    if (await (0, _fileUtils.existsAsync)((0, _.browserDirectoryToMarkerFilePath)(browserDirectory))) {
      _debugLogger.debugLogger.log("install", `${title} is already downloaded.`);
      return false;
    }
    const zipPath = _path.default.join(_os.default.tmpdir(), downloadFileName);
    try {
      const retryCount = 3;
      for (let attempt = 1;attempt <= retryCount; ++attempt) {
        _debugLogger.debugLogger.log("install", `downloading ${title} - attempt #${attempt}`);
        const url = downloadURLs[(attempt - 1) % downloadURLs.length];
        logPolitely(`Downloading ${title}` + _utilsBundle.colors.dim(` from ${url}`));
        const {
          error
        } = await downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, downloadConnectionTimeout);
        if (!error) {
          _debugLogger.debugLogger.log("install", `SUCCESS installing ${title}`);
          break;
        }
        if (await (0, _fileUtils.existsAsync)(zipPath))
          await _fs.default.promises.unlink(zipPath);
        if (await (0, _fileUtils.existsAsync)(browserDirectory))
          await _fs.default.promises.rmdir(browserDirectory, {
            recursive: true
          });
        const errorMessage = (error === null || error === undefined ? undefined : error.message) || "";
        _debugLogger.debugLogger.log("install", `attempt #${attempt} - ERROR: ${errorMessage}`);
        if (attempt >= retryCount)
          throw error;
      }
    } catch (e) {
      _debugLogger.debugLogger.log("install", `FAILED installation ${title} with error: ${e}`);
      process.exitCode = 1;
      throw e;
    } finally {
      if (await (0, _fileUtils.existsAsync)(zipPath))
        await _fs.default.promises.unlink(zipPath);
    }
    logPolitely(`${title} downloaded to ${browserDirectory}`);
    return true;
  }
  function downloadBrowserWithProgressBarOutOfProcess(title, browserDirectory, url, zipPath, executablePath, connectionTimeout) {
    const cp = _child_process.default.fork(_path.default.join(__dirname, "oopDownloadBrowserMain.js"));
    const promise = new _manualPromise.ManualPromise;
    const progress2 = getDownloadProgress();
    cp.on("message", (message) => {
      if ((message === null || message === undefined ? undefined : message.method) === "log")
        _debugLogger.debugLogger.log("install", message.params.message);
      if ((message === null || message === undefined ? undefined : message.method) === "progress")
        progress2(message.params.done, message.params.total);
    });
    cp.on("exit", (code) => {
      if (code !== 0) {
        promise.resolve({
          error: new Error(`Download failure, code=${code}`)
        });
        return;
      }
      if (!_fs.default.existsSync((0, _.browserDirectoryToMarkerFilePath)(browserDirectory)))
        promise.resolve({
          error: new Error(`Download failure, ${(0, _.browserDirectoryToMarkerFilePath)(browserDirectory)} does not exist`)
        });
      else
        promise.resolve({
          error: null
        });
    });
    cp.on("error", (error) => {
      promise.resolve({
        error
      });
    });
    _debugLogger.debugLogger.log("install", `running download:`);
    _debugLogger.debugLogger.log("install", `-- from url: ${url}`);
    _debugLogger.debugLogger.log("install", `-- to location: ${zipPath}`);
    const downloadParams = {
      title,
      browserDirectory,
      url,
      zipPath,
      executablePath,
      connectionTimeout,
      userAgent: (0, _userAgent.getUserAgent)()
    };
    cp.send({
      method: "download",
      params: downloadParams
    });
    return promise;
  }
  function logPolitely(toBeLogged) {
    const logLevel = process.env.npm_config_loglevel;
    const logLevelDisplay = ["silent", "error", "warn"].indexOf(logLevel || "") > -1;
    if (!logLevelDisplay)
      console.log(toBeLogged);
  }
  function getDownloadProgress() {
    if (process.stdout.isTTY)
      return getAnimatedDownloadProgress();
    return getBasicDownloadProgress();
  }
  function getAnimatedDownloadProgress() {
    let progressBar;
    let lastDownloadedBytes = 0;
    return (downloadedBytes, totalBytes) => {
      if (!progressBar) {
        progressBar = new _utilsBundle.progress(`${toMegabytes(totalBytes)} [:bar] :percent :etas`, {
          complete: "=",
          incomplete: " ",
          width: 20,
          total: totalBytes
        });
      }
      const delta = downloadedBytes - lastDownloadedBytes;
      lastDownloadedBytes = downloadedBytes;
      progressBar.tick(delta);
    };
  }
  function getBasicDownloadProgress() {
    const totalRows = 10;
    const stepWidth = 8;
    let lastRow = -1;
    return (downloadedBytes, totalBytes) => {
      const percentage = downloadedBytes / totalBytes;
      const row = Math.floor(totalRows * percentage);
      if (row > lastRow) {
        lastRow = row;
        const percentageString = String(percentage * 100 | 0).padStart(3);
        console.log(`|${"■".repeat(row * stepWidth)}${" ".repeat((totalRows - row) * stepWidth)}| ${percentageString}% of ${toMegabytes(totalBytes)}`);
      }
    };
  }
  function toMegabytes(bytes) {
    const mb = bytes / 1024 / 1024;
    return `${Math.round(mb * 10) / 10} MiB`;
  }
});

// node_modules/playwright-core/browsers.json
var require_browsers = __commonJS((exports, module) => {
  module.exports = {
    comment: "Do not edit this file, use utils/roll_browser.js",
    browsers: [
      {
        name: "chromium",
        revision: "1148",
        installByDefault: true,
        browserVersion: "131.0.6778.33"
      },
      {
        name: "chromium-headless-shell",
        revision: "1148",
        installByDefault: true,
        browserVersion: "131.0.6778.33"
      },
      {
        name: "chromium-tip-of-tree",
        revision: "1277",
        installByDefault: false,
        browserVersion: "132.0.6834.0"
      },
      {
        name: "firefox",
        revision: "1466",
        installByDefault: true,
        browserVersion: "132.0"
      },
      {
        name: "firefox-beta",
        revision: "1465",
        installByDefault: false,
        browserVersion: "132.0b8"
      },
      {
        name: "webkit",
        revision: "2104",
        installByDefault: true,
        revisionOverrides: {
          "mac10.14": "1446",
          "mac10.15": "1616",
          mac11: "1816",
          "mac11-arm64": "1816",
          mac12: "2009",
          "mac12-arm64": "2009",
          "ubuntu20.04-x64": "2092",
          "ubuntu20.04-arm64": "2092"
        },
        browserVersion: "18.2"
      },
      {
        name: "ffmpeg",
        revision: "1010",
        installByDefault: true,
        revisionOverrides: {
          mac12: "1010",
          "mac12-arm64": "1010"
        }
      },
      {
        name: "android",
        revision: "1001",
        installByDefault: false
      }
    ]
  };
});

// node_modules/playwright-core/lib/server/registry/index.js
var require_registry = __commonJS((exports) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/server/registry";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Registry = undefined;
  exports.browserDirectoryToMarkerFilePath = browserDirectoryToMarkerFilePath;
  exports.buildPlaywrightCLICommand = buildPlaywrightCLICommand;
  exports.findChromiumChannel = findChromiumChannel;
  exports.installBrowsersForNpmInstall = installBrowsersForNpmInstall;
  exports.registryDirectory = exports.registry = undefined;
  Object.defineProperty(exports, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _dependencies.writeDockerVersion;
    }
  });
  var os = _interopRequireWildcard(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var util = _interopRequireWildcard(__require("util"));
  var fs = _interopRequireWildcard(__require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _network = require_network();
  var _userAgent = require_userAgent();
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _hostPlatform = require_hostPlatform();
  var _spawnAsync = require_spawnAsync();
  var _dependencies = require_dependencies();
  var _browserFetcher = require_browserFetcher();
  var _debugLogger = require_debugLogger();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var PACKAGE_PATH = _path.default.join(__dirname, "..", "..", "..");
  var BIN_PATH = _path.default.join(__dirname, "..", "..", "..", "bin");
  var PLAYWRIGHT_CDN_MIRRORS = ["https://playwright.azureedge.net", "https://playwright-akamai.azureedge.net", "https://playwright-verizon.azureedge.net"];
  if (process.env.PW_TEST_CDN_THAT_SHOULD_WORK) {
    for (let i = 0;i < PLAYWRIGHT_CDN_MIRRORS.length; i++) {
      const cdn = PLAYWRIGHT_CDN_MIRRORS[i];
      if (cdn !== process.env.PW_TEST_CDN_THAT_SHOULD_WORK)
        PLAYWRIGHT_CDN_MIRRORS[i] = cdn + ".does-not-resolve.playwright.dev";
    }
  }
  var EXECUTABLE_PATHS = {
    chromium: {
      linux: ["chrome-linux", "chrome"],
      mac: ["chrome-mac", "Chromium.app", "Contents", "MacOS", "Chromium"],
      win: ["chrome-win", "chrome.exe"]
    },
    "chromium-headless-shell": {
      linux: ["chrome-linux", "headless_shell"],
      mac: ["chrome-mac", "headless_shell"],
      win: ["chrome-win", "headless_shell.exe"]
    },
    firefox: {
      linux: ["firefox", "firefox"],
      mac: ["firefox", "Nightly.app", "Contents", "MacOS", "firefox"],
      win: ["firefox", "firefox.exe"]
    },
    webkit: {
      linux: ["pw_run.sh"],
      mac: ["pw_run.sh"],
      win: ["Playwright.exe"]
    },
    ffmpeg: {
      linux: ["ffmpeg-linux"],
      mac: ["ffmpeg-mac"],
      win: ["ffmpeg-win64.exe"]
    }
  };
  var DOWNLOAD_PATHS = {
    chromium: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu22.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu24.04-x64": "builds/chromium/%s/chromium-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "ubuntu24.04-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "debian11-x64": "builds/chromium/%s/chromium-linux.zip",
      "debian11-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "debian12-x64": "builds/chromium/%s/chromium-linux.zip",
      "debian12-arm64": "builds/chromium/%s/chromium-linux-arm64.zip",
      "mac10.13": "builds/chromium/%s/chromium-mac.zip",
      "mac10.14": "builds/chromium/%s/chromium-mac.zip",
      "mac10.15": "builds/chromium/%s/chromium-mac.zip",
      mac11: "builds/chromium/%s/chromium-mac.zip",
      "mac11-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac12: "builds/chromium/%s/chromium-mac.zip",
      "mac12-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac13: "builds/chromium/%s/chromium-mac.zip",
      "mac13-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac14: "builds/chromium/%s/chromium-mac.zip",
      "mac14-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      mac15: "builds/chromium/%s/chromium-mac.zip",
      "mac15-arm64": "builds/chromium/%s/chromium-mac-arm64.zip",
      win64: "builds/chromium/%s/chromium-win64.zip"
    },
    "chromium-headless-shell": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
      "ubuntu22.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
      "ubuntu24.04-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
      "ubuntu24.04-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
      "debian11-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
      "debian11-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
      "debian12-x64": "builds/chromium/%s/chromium-headless-shell-linux.zip",
      "debian12-arm64": "builds/chromium/%s/chromium-headless-shell-linux-arm64.zip",
      "mac10.13": undefined,
      "mac10.14": undefined,
      "mac10.15": undefined,
      mac11: "builds/chromium/%s/chromium-headless-shell-mac.zip",
      "mac11-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
      mac12: "builds/chromium/%s/chromium-headless-shell-mac.zip",
      "mac12-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
      mac13: "builds/chromium/%s/chromium-headless-shell-mac.zip",
      "mac13-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
      mac14: "builds/chromium/%s/chromium-headless-shell-mac.zip",
      "mac14-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
      mac15: "builds/chromium/%s/chromium-headless-shell-mac.zip",
      "mac15-arm64": "builds/chromium/%s/chromium-headless-shell-mac-arm64.zip",
      win64: "builds/chromium/%s/chromium-headless-shell-win64.zip"
    },
    "chromium-tip-of-tree": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu22.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu24.04-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "ubuntu24.04-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "debian11-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "debian11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "debian12-x64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux.zip",
      "debian12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-linux-arm64.zip",
      "mac10.13": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac10.14": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac10.15": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      mac11: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac11-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac12: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac12-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac13: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac13-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac14: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac14-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      mac15: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac.zip",
      "mac15-arm64": "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-mac-arm64.zip",
      win64: "builds/chromium-tip-of-tree/%s/chromium-tip-of-tree-win64.zip"
    },
    firefox: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/firefox/%s/firefox-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/firefox/%s/firefox-ubuntu-22.04.zip",
      "ubuntu24.04-x64": "builds/firefox/%s/firefox-ubuntu-24.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/firefox/%s/firefox-ubuntu-20.04-arm64.zip",
      "ubuntu22.04-arm64": "builds/firefox/%s/firefox-ubuntu-22.04-arm64.zip",
      "ubuntu24.04-arm64": "builds/firefox/%s/firefox-ubuntu-24.04-arm64.zip",
      "debian11-x64": "builds/firefox/%s/firefox-debian-11.zip",
      "debian11-arm64": "builds/firefox/%s/firefox-debian-11-arm64.zip",
      "debian12-x64": "builds/firefox/%s/firefox-debian-12.zip",
      "debian12-arm64": "builds/firefox/%s/firefox-debian-12-arm64.zip",
      "mac10.13": "builds/firefox/%s/firefox-mac.zip",
      "mac10.14": "builds/firefox/%s/firefox-mac.zip",
      "mac10.15": "builds/firefox/%s/firefox-mac.zip",
      mac11: "builds/firefox/%s/firefox-mac.zip",
      "mac11-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
      mac12: "builds/firefox/%s/firefox-mac.zip",
      "mac12-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
      mac13: "builds/firefox/%s/firefox-mac.zip",
      "mac13-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
      mac14: "builds/firefox/%s/firefox-mac.zip",
      "mac14-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
      mac15: "builds/firefox/%s/firefox-mac.zip",
      "mac15-arm64": "builds/firefox/%s/firefox-mac-arm64.zip",
      win64: "builds/firefox/%s/firefox-win64.zip"
    },
    "firefox-beta": {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04.zip",
      "ubuntu24.04-x64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": undefined,
      "ubuntu22.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-22.04-arm64.zip",
      "ubuntu24.04-arm64": "builds/firefox-beta/%s/firefox-beta-ubuntu-24.04-arm64.zip",
      "debian11-x64": "builds/firefox-beta/%s/firefox-beta-debian-11.zip",
      "debian11-arm64": "builds/firefox-beta/%s/firefox-beta-debian-11-arm64.zip",
      "debian12-x64": "builds/firefox-beta/%s/firefox-beta-debian-12.zip",
      "debian12-arm64": "builds/firefox-beta/%s/firefox-beta-debian-12-arm64.zip",
      "mac10.13": "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac10.14": "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac10.15": "builds/firefox-beta/%s/firefox-beta-mac.zip",
      mac11: "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac11-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
      mac12: "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac12-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
      mac13: "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac13-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
      mac14: "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac14-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
      mac15: "builds/firefox-beta/%s/firefox-beta-mac.zip",
      "mac15-arm64": "builds/firefox-beta/%s/firefox-beta-mac-arm64.zip",
      win64: "builds/firefox-beta/%s/firefox-beta-win64.zip"
    },
    webkit: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/webkit/%s/webkit-ubuntu-20.04.zip",
      "ubuntu22.04-x64": "builds/webkit/%s/webkit-ubuntu-22.04.zip",
      "ubuntu24.04-x64": "builds/webkit/%s/webkit-ubuntu-24.04.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/webkit/%s/webkit-ubuntu-20.04-arm64.zip",
      "ubuntu22.04-arm64": "builds/webkit/%s/webkit-ubuntu-22.04-arm64.zip",
      "ubuntu24.04-arm64": "builds/webkit/%s/webkit-ubuntu-24.04-arm64.zip",
      "debian11-x64": "builds/webkit/%s/webkit-debian-11.zip",
      "debian11-arm64": "builds/webkit/%s/webkit-debian-11-arm64.zip",
      "debian12-x64": "builds/webkit/%s/webkit-debian-12.zip",
      "debian12-arm64": "builds/webkit/%s/webkit-debian-12-arm64.zip",
      "mac10.13": undefined,
      "mac10.14": "builds/deprecated-webkit-mac-10.14/%s/deprecated-webkit-mac-10.14.zip",
      "mac10.15": "builds/deprecated-webkit-mac-10.15/%s/deprecated-webkit-mac-10.15.zip",
      mac11: "builds/webkit/%s/webkit-mac-11.zip",
      "mac11-arm64": "builds/webkit/%s/webkit-mac-11-arm64.zip",
      mac12: "builds/webkit/%s/webkit-mac-12.zip",
      "mac12-arm64": "builds/webkit/%s/webkit-mac-12-arm64.zip",
      mac13: "builds/webkit/%s/webkit-mac-13.zip",
      "mac13-arm64": "builds/webkit/%s/webkit-mac-13-arm64.zip",
      mac14: "builds/webkit/%s/webkit-mac-14.zip",
      "mac14-arm64": "builds/webkit/%s/webkit-mac-14-arm64.zip",
      mac15: "builds/webkit/%s/webkit-mac-15.zip",
      "mac15-arm64": "builds/webkit/%s/webkit-mac-15-arm64.zip",
      win64: "builds/webkit/%s/webkit-win64.zip"
    },
    ffmpeg: {
      "<unknown>": undefined,
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu22.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu24.04-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "ubuntu22.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "ubuntu24.04-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "debian11-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "debian11-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "debian12-x64": "builds/ffmpeg/%s/ffmpeg-linux.zip",
      "debian12-arm64": "builds/ffmpeg/%s/ffmpeg-linux-arm64.zip",
      "mac10.13": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac10.14": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac10.15": "builds/ffmpeg/%s/ffmpeg-mac.zip",
      mac11: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac11-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac12: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac12-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac13: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac13-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac14: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac14-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      mac15: "builds/ffmpeg/%s/ffmpeg-mac.zip",
      "mac15-arm64": "builds/ffmpeg/%s/ffmpeg-mac-arm64.zip",
      win64: "builds/ffmpeg/%s/ffmpeg-win64.zip"
    },
    android: {
      "<unknown>": "builds/android/%s/android.zip",
      "ubuntu18.04-x64": undefined,
      "ubuntu20.04-x64": "builds/android/%s/android.zip",
      "ubuntu22.04-x64": "builds/android/%s/android.zip",
      "ubuntu24.04-x64": "builds/android/%s/android.zip",
      "ubuntu18.04-arm64": undefined,
      "ubuntu20.04-arm64": "builds/android/%s/android.zip",
      "ubuntu22.04-arm64": "builds/android/%s/android.zip",
      "ubuntu24.04-arm64": "builds/android/%s/android.zip",
      "debian11-x64": "builds/android/%s/android.zip",
      "debian11-arm64": "builds/android/%s/android.zip",
      "debian12-x64": "builds/android/%s/android.zip",
      "debian12-arm64": "builds/android/%s/android.zip",
      "mac10.13": "builds/android/%s/android.zip",
      "mac10.14": "builds/android/%s/android.zip",
      "mac10.15": "builds/android/%s/android.zip",
      mac11: "builds/android/%s/android.zip",
      "mac11-arm64": "builds/android/%s/android.zip",
      mac12: "builds/android/%s/android.zip",
      "mac12-arm64": "builds/android/%s/android.zip",
      mac13: "builds/android/%s/android.zip",
      "mac13-arm64": "builds/android/%s/android.zip",
      mac14: "builds/android/%s/android.zip",
      "mac14-arm64": "builds/android/%s/android.zip",
      mac15: "builds/android/%s/android.zip",
      "mac15-arm64": "builds/android/%s/android.zip",
      win64: "builds/android/%s/android.zip"
    },
    bidi: {}
  };
  var registryDirectory = exports.registryDirectory = (() => {
    let result;
    const envDefined = (0, _utils.getFromENV)("PLAYWRIGHT_BROWSERS_PATH");
    if (envDefined === "0") {
      result = _path.default.join(__dirname, "..", "..", "..", ".local-browsers");
    } else if (envDefined) {
      result = envDefined;
    } else {
      let cacheDirectory;
      if (process.platform === "linux")
        cacheDirectory = process.env.XDG_CACHE_HOME || _path.default.join(os.homedir(), ".cache");
      else if (process.platform === "darwin")
        cacheDirectory = _path.default.join(os.homedir(), "Library", "Caches");
      else if (process.platform === "win32")
        cacheDirectory = process.env.LOCALAPPDATA || _path.default.join(os.homedir(), "AppData", "Local");
      else
        throw new Error("Unsupported platform: " + process.platform);
      result = _path.default.join(cacheDirectory, "ms-playwright");
    }
    if (!_path.default.isAbsolute(result)) {
      result = _path.default.resolve((0, _utils.getFromENV)("INIT_CWD") || process.cwd(), result);
    }
    return result;
  })();
  function isBrowserDirectory(browserDirectory) {
    const baseName = _path.default.basename(browserDirectory);
    for (const browserName of allDownloadable) {
      if (baseName.startsWith(browserName.replace(/-/g, "_") + "-"))
        return true;
    }
    return false;
  }
  function readDescriptors(browsersJSON) {
    return browsersJSON["browsers"].map((obj) => {
      const name = obj.name;
      const revisionOverride = (obj.revisionOverrides || {})[_hostPlatform.hostPlatform];
      const revision = revisionOverride || obj.revision;
      const browserDirectoryPrefix = revisionOverride ? `${name}_${_hostPlatform.hostPlatform}_special` : `${name}`;
      const descriptor = {
        name,
        revision,
        hasRevisionOverride: !!revisionOverride,
        browserVersion: revisionOverride ? undefined : obj.browserVersion,
        installByDefault: !!obj.installByDefault,
        dir: _path.default.join(registryDirectory, browserDirectoryPrefix.replace(/-/g, "_") + "-" + revision)
      };
      return descriptor;
    });
  }
  var allDownloadable = ["android", "chromium", "firefox", "webkit", "ffmpeg", "firefox-beta", "chromium-tip-of-tree", "chromium-headless-shell"];

  class Registry {
    constructor(browsersJSON) {
      this._executables = undefined;
      const descriptors = readDescriptors(browsersJSON);
      const findExecutablePath = (dir, name) => {
        let tokens = undefined;
        if (process.platform === "linux")
          tokens = EXECUTABLE_PATHS[name]["linux"];
        else if (process.platform === "darwin")
          tokens = EXECUTABLE_PATHS[name]["mac"];
        else if (process.platform === "win32")
          tokens = EXECUTABLE_PATHS[name]["win"];
        return tokens ? _path.default.join(dir, ...tokens) : undefined;
      };
      const executablePathOrDie = (name, e, installByDefault, sdkLanguage) => {
        if (!e)
          throw new Error(`${name} is not supported on ${_hostPlatform.hostPlatform}`);
        const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install${installByDefault ? "" : " " + name}`);
        if (!(0, _fileUtils.canAccessFile)(e)) {
          const currentDockerVersion = (0, _dependencies.readDockerVersionSync)();
          const preferredDockerVersion = currentDockerVersion ? (0, _dependencies.dockerVersion)(currentDockerVersion.dockerImageNameTemplate) : null;
          const isOutdatedDockerImage = currentDockerVersion && preferredDockerVersion && currentDockerVersion.dockerImageName !== preferredDockerVersion.dockerImageName;
          const prettyMessage = isOutdatedDockerImage ? [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just updated to ${preferredDockerVersion.driverVersion}.`, `Please update docker image as well.`, `-  current: ${currentDockerVersion.dockerImageName}`, `- required: ${preferredDockerVersion.dockerImageName}`, ``, `<3 Playwright Team`].join(`
`) : [`Looks like ${sdkLanguage === "javascript" ? "Playwright Test or " : ""}Playwright was just installed or updated.`, `Please run the following command to download new browser${installByDefault ? "s" : ""}:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join(`
`);
          throw new Error(`Executable doesn't exist at ${e}
${(0, _utils.wrapInASCIIBox)(prettyMessage, 1)}`);
        }
        return e;
      };
      this._executables = [];
      const chromium = descriptors.find((d) => d.name === "chromium");
      const chromiumExecutable = findExecutablePath(chromium.dir, "chromium");
      this._executables.push({
        type: "browser",
        name: "chromium",
        browserName: "chromium",
        directory: chromium.dir,
        executablePath: () => chromiumExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium.installByDefault, sdkLanguage),
        installType: chromium.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromium.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromium),
        browserVersion: chromium.browserVersion,
        _install: () => this._downloadExecutable(chromium, chromiumExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      const chromiumHeadlessShell = descriptors.find((d) => d.name === "chromium-headless-shell");
      const chromiumHeadlessShellExecutable = findExecutablePath(chromiumHeadlessShell.dir, "chromium-headless-shell");
      this._executables.push({
        type: "channel",
        name: "chromium-headless-shell",
        browserName: "chromium",
        directory: chromiumHeadlessShell.dir,
        executablePath: () => chromiumHeadlessShellExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumHeadlessShellExecutable, chromiumHeadlessShell.installByDefault, sdkLanguage),
        installType: chromiumHeadlessShell.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumHeadlessShell.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromiumHeadlessShell),
        browserVersion: chromium.browserVersion,
        _install: () => this._downloadExecutable(chromiumHeadlessShell, chromiumHeadlessShellExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      const chromiumTipOfTree = descriptors.find((d) => d.name === "chromium-tip-of-tree");
      const chromiumTipOfTreeExecutable = findExecutablePath(chromiumTipOfTree.dir, "chromium");
      this._executables.push({
        type: "tool",
        name: "chromium-tip-of-tree",
        browserName: "chromium",
        directory: chromiumTipOfTree.dir,
        executablePath: () => chromiumTipOfTreeExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium-tip-of-tree", chromiumTipOfTreeExecutable, chromiumTipOfTree.installByDefault, sdkLanguage),
        installType: chromiumTipOfTree.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromiumTipOfTree.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromiumTipOfTree),
        browserVersion: chromiumTipOfTree.browserVersion,
        _install: () => this._downloadExecutable(chromiumTipOfTree, chromiumTipOfTreeExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      this._executables.push(this._createChromiumChannel("chrome", {
        linux: "/opt/google/chrome/chrome",
        darwin: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        win32: `\\Google\\Chrome\\Application\\chrome.exe`
      }, () => this._installChromiumChannel("chrome", {
        linux: "reinstall_chrome_stable_linux.sh",
        darwin: "reinstall_chrome_stable_mac.sh",
        win32: "reinstall_chrome_stable_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("chrome-beta", {
        linux: "/opt/google/chrome-beta/chrome",
        darwin: "/Applications/Google Chrome Beta.app/Contents/MacOS/Google Chrome Beta",
        win32: `\\Google\\Chrome Beta\\Application\\chrome.exe`
      }, () => this._installChromiumChannel("chrome-beta", {
        linux: "reinstall_chrome_beta_linux.sh",
        darwin: "reinstall_chrome_beta_mac.sh",
        win32: "reinstall_chrome_beta_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("chrome-dev", {
        linux: "/opt/google/chrome-unstable/chrome",
        darwin: "/Applications/Google Chrome Dev.app/Contents/MacOS/Google Chrome Dev",
        win32: `\\Google\\Chrome Dev\\Application\\chrome.exe`
      }));
      this._executables.push(this._createChromiumChannel("chrome-canary", {
        linux: "",
        darwin: "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
        win32: `\\Google\\Chrome SxS\\Application\\chrome.exe`
      }));
      this._executables.push(this._createChromiumChannel("msedge", {
        linux: "/opt/microsoft/msedge/msedge",
        darwin: "/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge",
        win32: `\\Microsoft\\Edge\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge", {
        linux: "reinstall_msedge_stable_linux.sh",
        darwin: "reinstall_msedge_stable_mac.sh",
        win32: "reinstall_msedge_stable_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-beta", {
        linux: "/opt/microsoft/msedge-beta/msedge",
        darwin: "/Applications/Microsoft Edge Beta.app/Contents/MacOS/Microsoft Edge Beta",
        win32: `\\Microsoft\\Edge Beta\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge-beta", {
        darwin: "reinstall_msedge_beta_mac.sh",
        linux: "reinstall_msedge_beta_linux.sh",
        win32: "reinstall_msedge_beta_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-dev", {
        linux: "/opt/microsoft/msedge-dev/msedge",
        darwin: "/Applications/Microsoft Edge Dev.app/Contents/MacOS/Microsoft Edge Dev",
        win32: `\\Microsoft\\Edge Dev\\Application\\msedge.exe`
      }, () => this._installMSEdgeChannel("msedge-dev", {
        darwin: "reinstall_msedge_dev_mac.sh",
        linux: "reinstall_msedge_dev_linux.sh",
        win32: "reinstall_msedge_dev_win.ps1"
      })));
      this._executables.push(this._createChromiumChannel("msedge-canary", {
        linux: "",
        darwin: "/Applications/Microsoft Edge Canary.app/Contents/MacOS/Microsoft Edge Canary",
        win32: `\\Microsoft\\Edge SxS\\Application\\msedge.exe`
      }));
      this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-stable", {
        linux: "/firefox/firefox",
        darwin: "/Firefox.app/Contents/MacOS/firefox",
        win32: "\\core\\firefox.exe"
      }));
      this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-beta", {
        linux: "/firefox/firefox",
        darwin: "/Firefox.app/Contents/MacOS/firefox",
        win32: "\\core\\firefox.exe"
      }));
      this._executables.push(this._createBidiFirefoxChannel("bidi-firefox-nightly", {
        linux: "/firefox/firefox",
        darwin: "/Firefox Nightly.app/Contents/MacOS/firefox",
        win32: "\\firefox\\firefox.exe"
      }));
      this._executables.push(this._createBidiChannel("bidi-chrome-stable", {
        linux: "/opt/google/chrome/chrome",
        darwin: "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        win32: `\\Google\\Chrome\\Application\\chrome.exe`
      }));
      this._executables.push(this._createBidiChannel("bidi-chrome-canary", {
        linux: "",
        darwin: "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary",
        win32: `\\Google\\Chrome SxS\\Application\\chrome.exe`
      }));
      this._executables.push({
        type: "browser",
        name: "bidi-chromium",
        browserName: "bidi",
        directory: chromium.dir,
        executablePath: () => chromiumExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("chromium", chromiumExecutable, chromium.installByDefault, sdkLanguage),
        installType: "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, chromium.dir, ["chrome-linux"], [], ["chrome-win"]),
        downloadURLs: this._downloadURLs(chromium),
        browserVersion: chromium.browserVersion,
        _install: () => this._downloadExecutable(chromium, chromiumExecutable),
        _dependencyGroup: "chromium",
        _isHermeticInstallation: true
      });
      const firefox = descriptors.find((d) => d.name === "firefox");
      const firefoxExecutable = findExecutablePath(firefox.dir, "firefox");
      this._executables.push({
        type: "browser",
        name: "firefox",
        browserName: "firefox",
        directory: firefox.dir,
        executablePath: () => firefoxExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox", firefoxExecutable, firefox.installByDefault, sdkLanguage),
        installType: firefox.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, firefox.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefox),
        browserVersion: firefox.browserVersion,
        _install: () => this._downloadExecutable(firefox, firefoxExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const firefoxBeta = descriptors.find((d) => d.name === "firefox-beta");
      const firefoxBetaExecutable = findExecutablePath(firefoxBeta.dir, "firefox");
      this._executables.push({
        type: "tool",
        name: "firefox-beta",
        browserName: "firefox",
        directory: firefoxBeta.dir,
        executablePath: () => firefoxBetaExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("firefox-beta", firefoxBetaExecutable, firefoxBeta.installByDefault, sdkLanguage),
        installType: firefoxBeta.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, firefoxBeta.dir, ["firefox"], [], ["firefox"]),
        downloadURLs: this._downloadURLs(firefoxBeta),
        browserVersion: firefoxBeta.browserVersion,
        _install: () => this._downloadExecutable(firefoxBeta, firefoxBetaExecutable),
        _dependencyGroup: "firefox",
        _isHermeticInstallation: true
      });
      const webkit = descriptors.find((d) => d.name === "webkit");
      const webkitExecutable = findExecutablePath(webkit.dir, "webkit");
      const webkitLinuxLddDirectories = [_path.default.join("minibrowser-gtk"), _path.default.join("minibrowser-gtk", "bin"), _path.default.join("minibrowser-gtk", "lib"), _path.default.join("minibrowser-gtk", "sys", "lib"), _path.default.join("minibrowser-wpe"), _path.default.join("minibrowser-wpe", "bin"), _path.default.join("minibrowser-wpe", "lib"), _path.default.join("minibrowser-wpe", "sys", "lib")];
      this._executables.push({
        type: "browser",
        name: "webkit",
        browserName: "webkit",
        directory: webkit.dir,
        executablePath: () => webkitExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("webkit", webkitExecutable, webkit.installByDefault, sdkLanguage),
        installType: webkit.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: (sdkLanguage) => this._validateHostRequirements(sdkLanguage, webkit.dir, webkitLinuxLddDirectories, ["libGLESv2.so.2", "libx264.so"], [""]),
        downloadURLs: this._downloadURLs(webkit),
        browserVersion: webkit.browserVersion,
        _install: () => this._downloadExecutable(webkit, webkitExecutable),
        _dependencyGroup: "webkit",
        _isHermeticInstallation: true
      });
      const ffmpeg = descriptors.find((d) => d.name === "ffmpeg");
      const ffmpegExecutable = findExecutablePath(ffmpeg.dir, "ffmpeg");
      this._executables.push({
        type: "tool",
        name: "ffmpeg",
        browserName: undefined,
        directory: ffmpeg.dir,
        executablePath: () => ffmpegExecutable,
        executablePathOrDie: (sdkLanguage) => executablePathOrDie("ffmpeg", ffmpegExecutable, ffmpeg.installByDefault, sdkLanguage),
        installType: ffmpeg.installByDefault ? "download-by-default" : "download-on-demand",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: this._downloadURLs(ffmpeg),
        _install: () => this._downloadExecutable(ffmpeg, ffmpegExecutable),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
      const android = descriptors.find((d) => d.name === "android");
      this._executables.push({
        type: "tool",
        name: "android",
        browserName: undefined,
        directory: android.dir,
        executablePath: () => {
          return;
        },
        executablePathOrDie: () => "",
        installType: "download-on-demand",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: this._downloadURLs(android),
        _install: () => this._downloadExecutable(android),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
      this._executables.push({
        type: "browser",
        name: "bidi",
        browserName: "bidi",
        directory: undefined,
        executablePath: () => {
          return;
        },
        executablePathOrDie: () => "",
        installType: "none",
        _validateHostRequirements: () => Promise.resolve(),
        downloadURLs: [],
        _install: () => Promise.resolve(),
        _dependencyGroup: "tools",
        _isHermeticInstallation: true
      });
    }
    _createChromiumChannel(name, lookAt, install) {
      const executablePath = (sdkLanguage, shouldThrow) => {
        const suffix = lookAt[process.platform];
        if (!suffix) {
          if (shouldThrow)
            throw new Error(`Chromium distribution '${name}' is not supported on ${process.platform}`);
          return;
        }
        const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
        for (const prefix of prefixes) {
          const executablePath2 = _path.default.join(prefix, suffix);
          if ((0, _fileUtils.canAccessFile)(executablePath2))
            return executablePath2;
        }
        if (!shouldThrow)
          return;
        const location2 = prefixes.length ? ` at ${_path.default.join(prefixes[0], suffix)}` : ``;
        const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
        throw new Error(`Chromium distribution '${name}' is not found${location2}${installation}`);
      };
      return {
        type: "channel",
        name,
        browserName: "chromium",
        directory: undefined,
        executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
        executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
        installType: install ? "install-script" : "none",
        _validateHostRequirements: () => Promise.resolve(),
        _isHermeticInstallation: false,
        _install: install
      };
    }
    _createBidiFirefoxChannel(name, lookAt, install) {
      const executablePath = (sdkLanguage, shouldThrow) => {
        const suffix = lookAt[process.platform];
        if (!suffix) {
          if (shouldThrow)
            throw new Error(`Firefox distribution '${name}' is not supported on ${process.platform}`);
          return;
        }
        const folder = _path.default.resolve("firefox");
        let channelName = "stable";
        if (name.includes("beta"))
          channelName = "beta";
        else if (name.includes("nightly"))
          channelName = "nightly";
        const installedVersions = fs.readdirSync(folder);
        const found = installedVersions.filter((e) => e.includes(channelName));
        if (found.length === 1)
          return _path.default.join(folder, found[0], suffix);
        if (found.length > 1) {
          if (shouldThrow)
            throw new Error(`Multiple Firefox installations found for channel '${name}': ${found.join(", ")}`);
          else
            return;
        }
        if (shouldThrow)
          throw new Error(`Cannot find Firefox installation for channel '${name}' under ${folder}`);
        return;
      };
      return {
        type: "channel",
        name,
        browserName: "bidi",
        directory: undefined,
        executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
        executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
        installType: "none",
        _validateHostRequirements: () => Promise.resolve(),
        _isHermeticInstallation: true,
        _install: install
      };
    }
    _createBidiChannel(name, lookAt, install) {
      const executablePath = (sdkLanguage, shouldThrow) => {
        const suffix = lookAt[process.platform];
        if (!suffix) {
          if (shouldThrow)
            throw new Error(`Firefox distribution '${name}' is not supported on ${process.platform}`);
          return;
        }
        const prefixes = process.platform === "win32" ? [process.env.LOCALAPPDATA, process.env.PROGRAMFILES, process.env["PROGRAMFILES(X86)"]].filter(Boolean) : [""];
        for (const prefix of prefixes) {
          const executablePath2 = _path.default.join(prefix, suffix);
          if ((0, _fileUtils.canAccessFile)(executablePath2))
            return executablePath2;
        }
        if (!shouldThrow)
          return;
        const location2 = prefixes.length ? ` at ${_path.default.join(prefixes[0], suffix)}` : ``;
        const installation = install ? `
Run "${buildPlaywrightCLICommand(sdkLanguage, "install " + name)}"` : "";
        throw new Error(`Firefox distribution '${name}' is not found${location2}${installation}`);
      };
      return {
        type: "channel",
        name,
        browserName: "bidi",
        directory: undefined,
        executablePath: (sdkLanguage) => executablePath(sdkLanguage, false),
        executablePathOrDie: (sdkLanguage) => executablePath(sdkLanguage, true),
        installType: install ? "install-script" : "none",
        _validateHostRequirements: () => Promise.resolve(),
        _isHermeticInstallation: false,
        _install: install
      };
    }
    executables() {
      return this._executables;
    }
    findExecutable(name) {
      return this._executables.find((b) => b.name === name);
    }
    defaultExecutables() {
      return this._executables.filter((e) => e.installType === "download-by-default");
    }
    _dedupe(executables) {
      return Array.from(new Set(executables));
    }
    async _validateHostRequirements(sdkLanguage, browserDirectory, linuxLddDirectories, dlOpenLibraries, windowsExeAndDllDirectories) {
      if (os.platform() === "linux")
        return await (0, _dependencies.validateDependenciesLinux)(sdkLanguage, linuxLddDirectories.map((d) => _path.default.join(browserDirectory, d)), dlOpenLibraries);
      if (os.platform() === "win32" && os.arch() === "x64")
        return await (0, _dependencies.validateDependenciesWindows)(windowsExeAndDllDirectories.map((d) => _path.default.join(browserDirectory, d)));
    }
    async installDeps(executablesToInstallDeps, dryRun) {
      const executables = this._dedupe(executablesToInstallDeps);
      const targets = new Set;
      for (const executable of executables) {
        if (executable._dependencyGroup)
          targets.add(executable._dependencyGroup);
      }
      targets.add("tools");
      if (os.platform() === "win32")
        return await (0, _dependencies.installDependenciesWindows)(targets, dryRun);
      if (os.platform() === "linux")
        return await (0, _dependencies.installDependenciesLinux)(targets, dryRun);
    }
    async install(executablesToInstall, forceReinstall) {
      const executables = this._dedupe(executablesToInstall);
      await fs.promises.mkdir(registryDirectory, {
        recursive: true
      });
      const lockfilePath = _path.default.join(registryDirectory, "__dirlock");
      const linksDir = _path.default.join(registryDirectory, ".links");
      let releaseLock;
      try {
        releaseLock = await _utilsBundle.lockfile.lock(registryDirectory, {
          retries: {
            retries: 20,
            factor: 1.27579
          },
          onCompromised: (err) => {
            throw new Error(`${err.message} Path: ${lockfilePath}`);
          },
          lockfilePath
        });
        await fs.promises.mkdir(linksDir, {
          recursive: true
        });
        await fs.promises.writeFile(_path.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH)), PACKAGE_PATH);
        await this._validateInstallationCache(linksDir);
        for (const executable of executables) {
          if (!executable._install)
            throw new Error(`ERROR: Playwright does not support installing ${executable.name}`);
          const {
            embedderName
          } = (0, _userAgent.getEmbedderName)();
          if (!(0, _utils.getAsBooleanFromENV)("CI") && !executable._isHermeticInstallation && !forceReinstall && executable.executablePath(embedderName)) {
            const command = buildPlaywrightCLICommand(embedderName, "install --force " + executable.name);
            throw new Error(`
` + (0, _utils.wrapInASCIIBox)([`ATTENTION: "${executable.name}" is already installed on the system!`, ``, `"${executable.name}" installation is not hermetic; installing newer version`, `requires *removal* of a current installation first.`, ``, `To *uninstall* current version and re-install latest "${executable.name}":`, ``, `- Close all running instances of "${executable.name}", if any`, `- Use "--force" to install browser:`, ``, `    ${command}`, ``, `<3 Playwright Team`].join(`
`), 1));
          }
          await executable._install();
        }
      } catch (e) {
        if (e.code === "ELOCKED") {
          const rmCommand = process.platform === "win32" ? "rm -R" : "rm -rf";
          throw new Error(`
` + (0, _utils.wrapInASCIIBox)([`An active lockfile is found at:`, ``, `  ${lockfilePath}`, ``, `Either:`, `- wait a few minutes if other Playwright is installing browsers in parallel`, `- remove lock manually with:`, ``, `    ${rmCommand} ${lockfilePath}`, ``, `<3 Playwright Team`].join(`
`), 1));
        } else {
          throw e;
        }
      } finally {
        if (releaseLock)
          await releaseLock();
      }
    }
    async uninstall(all) {
      const linksDir = _path.default.join(registryDirectory, ".links");
      if (all) {
        const links = await fs.promises.readdir(linksDir).catch(() => []);
        for (const link of links)
          await fs.promises.unlink(_path.default.join(linksDir, link));
      } else {
        await fs.promises.unlink(_path.default.join(linksDir, (0, _utils.calculateSha1)(PACKAGE_PATH))).catch(() => {
        });
      }
      await this._validateInstallationCache(linksDir);
      return {
        numberOfBrowsersLeft: (await fs.promises.readdir(registryDirectory).catch(() => [])).filter((browserDirectory) => isBrowserDirectory(browserDirectory)).length
      };
    }
    async validateHostRequirementsForExecutablesIfNeeded(executables, sdkLanguage) {
      if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS")) {
        process.stderr.write("Skipping host requirements validation logic because `PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS` env variable is set.\n");
        return;
      }
      for (const executable of executables)
        await this._validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage);
    }
    async _validateHostRequirementsForExecutableIfNeeded(executable, sdkLanguage) {
      const kMaximumReValidationPeriod = 30 * 24 * 60 * 60 * 1000;
      if (!executable.directory)
        return;
      const markerFile = _path.default.join(executable.directory, "DEPENDENCIES_VALIDATED");
      if (await fs.promises.stat(markerFile).then((stat) => Date.now() - stat.mtime.getTime() < kMaximumReValidationPeriod).catch(() => false))
        return;
      _debugLogger.debugLogger.log("install", `validating host requirements for "${executable.name}"`);
      try {
        await executable._validateHostRequirements(sdkLanguage);
        _debugLogger.debugLogger.log("install", `validation passed for ${executable.name}`);
      } catch (error) {
        _debugLogger.debugLogger.log("install", `validation failed for ${executable.name}`);
        throw error;
      }
      await fs.promises.writeFile(markerFile, "").catch(() => {
      });
    }
    _downloadURLs(descriptor) {
      const paths = DOWNLOAD_PATHS[descriptor.name];
      const downloadPathTemplate = paths[_hostPlatform.hostPlatform] || paths["<unknown>"];
      if (!downloadPathTemplate)
        return [];
      const downloadPath = util.format(downloadPathTemplate, descriptor.revision);
      let downloadURLs = PLAYWRIGHT_CDN_MIRRORS.map((mirror) => `${mirror}/${downloadPath}`);
      let downloadHostEnv;
      if (descriptor.name.startsWith("chromium"))
        downloadHostEnv = "PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST";
      else if (descriptor.name.startsWith("firefox"))
        downloadHostEnv = "PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST";
      else if (descriptor.name.startsWith("webkit"))
        downloadHostEnv = "PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST";
      const customHostOverride = downloadHostEnv && (0, _utils.getFromENV)(downloadHostEnv) || (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_HOST");
      if (customHostOverride)
        downloadURLs = [`${customHostOverride}/${downloadPath}`];
      return downloadURLs;
    }
    async _downloadExecutable(descriptor, executablePath) {
      const downloadURLs = this._downloadURLs(descriptor);
      if (!downloadURLs.length)
        throw new Error(`ERROR: Playwright does not support ${descriptor.name} on ${_hostPlatform.hostPlatform}`);
      if (!_hostPlatform.isOfficiallySupportedPlatform)
        (0, _browserFetcher.logPolitely)(`BEWARE: your OS is not officially supported by Playwright; downloading fallback build for ${_hostPlatform.hostPlatform}.`);
      if (descriptor.hasRevisionOverride) {
        const message = `You are using a frozen ${descriptor.name} browser which does not receive updates anymore on ${_hostPlatform.hostPlatform}. Please update to the latest version of your operating system to test up-to-date browsers.`;
        if (process.env.GITHUB_ACTIONS)
          console.log(`::warning title=Playwright::${message}`);
        else
          (0, _browserFetcher.logPolitely)(message);
      }
      const displayName = descriptor.name.split("-").map((word) => {
        return word === "ffmpeg" ? "FFMPEG" : word.charAt(0).toUpperCase() + word.slice(1);
      }).join(" ");
      const title = descriptor.browserVersion ? `${displayName} ${descriptor.browserVersion} (playwright build v${descriptor.revision})` : `${displayName} playwright build v${descriptor.revision}`;
      const downloadFileName = `playwright-download-${descriptor.name}-${_hostPlatform.hostPlatform}-${descriptor.revision}.zip`;
      const downloadConnectionTimeoutEnv = (0, _utils.getFromENV)("PLAYWRIGHT_DOWNLOAD_CONNECTION_TIMEOUT");
      const downloadConnectionTimeout = +(downloadConnectionTimeoutEnv || "0") || 30000;
      await (0, _browserFetcher.downloadBrowserWithProgressBar)(title, descriptor.dir, executablePath, downloadURLs, downloadFileName, downloadConnectionTimeout).catch((e) => {
        throw new Error(`Failed to download ${title}, caused by
${e.stack}`);
      });
    }
    async _installMSEdgeChannel(channel, scripts) {
      const scriptArgs = [];
      if (process.platform !== "linux") {
        const products = lowercaseAllKeys(JSON.parse(await (0, _network.fetchData)({
          url: "https://edgeupdates.microsoft.com/api/products"
        })));
        const productName = {
          msedge: "Stable",
          "msedge-beta": "Beta",
          "msedge-dev": "Dev"
        }[channel];
        const product = products.find((product2) => product2.product === productName);
        const searchConfig = {
          darwin: {
            platform: "MacOS",
            arch: "universal",
            artifact: "pkg"
          },
          win32: {
            platform: "Windows",
            arch: "x64",
            artifact: "msi"
          }
        }[process.platform];
        const release = searchConfig ? product.releases.find((release2) => release2.platform === searchConfig.platform && release2.architecture === searchConfig.arch && release2.artifacts.length > 0) : null;
        const artifact = release ? release.artifacts.find((artifact2) => artifact2.artifactname === searchConfig.artifact) : null;
        if (artifact)
          scriptArgs.push(artifact.location);
        else
          throw new Error(`Cannot install ${channel} on ${process.platform}`);
      }
      await this._installChromiumChannel(channel, scripts, scriptArgs);
    }
    async _installChromiumChannel(channel, scripts, scriptArgs = []) {
      const scriptName = scripts[process.platform];
      if (!scriptName)
        throw new Error(`Cannot install ${channel} on ${process.platform}`);
      const cwd = BIN_PATH;
      const isPowerShell = scriptName.endsWith(".ps1");
      if (isPowerShell) {
        const args = ["-ExecutionPolicy", "Bypass", "-File", _path.default.join(BIN_PATH, scriptName), ...scriptArgs];
        const {
          code
        } = await (0, _spawnAsync.spawnAsync)("powershell.exe", args, {
          cwd,
          stdio: "inherit"
        });
        if (code !== 0)
          throw new Error(`Failed to install ${channel}`);
      } else {
        const {
          command,
          args,
          elevatedPermissions
        } = await (0, _dependencies.transformCommandsForRoot)([`bash "${_path.default.join(BIN_PATH, scriptName)}" ${scriptArgs.join("")}`]);
        if (elevatedPermissions)
          console.log("Switching to root user to install dependencies...");
        const {
          code
        } = await (0, _spawnAsync.spawnAsync)(command, args, {
          cwd,
          stdio: "inherit"
        });
        if (code !== 0)
          throw new Error(`Failed to install ${channel}`);
      }
    }
    async _validateInstallationCache(linksDir) {
      const usedBrowserPaths = new Set;
      for (const fileName of await fs.promises.readdir(linksDir)) {
        const linkPath = _path.default.join(linksDir, fileName);
        let linkTarget = "";
        try {
          linkTarget = (await fs.promises.readFile(linkPath)).toString();
          const browsersJSON = __require(_path.default.join(linkTarget, "browsers.json"));
          const descriptors = readDescriptors(browsersJSON);
          for (const browserName of allDownloadable) {
            const descriptor = descriptors.find((d) => d.name === browserName);
            if (!descriptor)
              continue;
            const usedBrowserPath = descriptor.dir;
            const browserRevision = parseInt(descriptor.revision, 10);
            const shouldHaveMarkerFile = browserName === "chromium" && (browserRevision >= 786218 || browserRevision < 300000) || browserName === "firefox" && browserRevision >= 1128 || browserName === "webkit" && browserRevision >= 1307 || browserName !== "firefox" && browserName !== "chromium" && browserName !== "webkit";
            if (!shouldHaveMarkerFile || await (0, _fileUtils.existsAsync)(browserDirectoryToMarkerFilePath(usedBrowserPath)))
              usedBrowserPaths.add(usedBrowserPath);
          }
        } catch (e) {
          await fs.promises.unlink(linkPath).catch((e2) => {
          });
        }
      }
      if (!(0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_GC")) {
        let downloadedBrowsers = (await fs.promises.readdir(registryDirectory)).map((file) => _path.default.join(registryDirectory, file));
        downloadedBrowsers = downloadedBrowsers.filter((file) => isBrowserDirectory(file));
        const directories = new Set(downloadedBrowsers);
        for (const browserDirectory of usedBrowserPaths)
          directories.delete(browserDirectory);
        for (const directory of directories)
          (0, _browserFetcher.logPolitely)("Removing unused browser at " + directory);
        await (0, _fileUtils.removeFolders)([...directories]);
      }
    }
  }
  exports.Registry = Registry;
  function browserDirectoryToMarkerFilePath(browserDirectory) {
    return _path.default.join(browserDirectory, "INSTALLATION_COMPLETE");
  }
  function buildPlaywrightCLICommand(sdkLanguage, parameters) {
    switch (sdkLanguage) {
      case "python":
        return `playwright ${parameters}`;
      case "java":
        return `mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="${parameters}"`;
      case "csharp":
        return `pwsh bin/Debug/netX/playwright.ps1 ${parameters}`;
      default: {
        const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
        return `${packageManagerCommand} playwright ${parameters}`;
      }
    }
  }
  async function installBrowsersForNpmInstall(browsers) {
    if ((0, _utils.getAsBooleanFromENV)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD")) {
      (0, _browserFetcher.logPolitely)("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set");
      return false;
    }
    const executables = [];
    for (const browserName of browsers) {
      const executable = registry.findExecutable(browserName);
      if (!executable || executable.installType === "none")
        throw new Error(`Cannot install ${browserName}`);
      executables.push(executable);
    }
    await registry.install(executables, false);
  }
  function findChromiumChannel(sdkLanguage) {
    let channel = null;
    for (const name of ["chromium", "chrome", "msedge"]) {
      try {
        registry.findExecutable(name).executablePathOrDie(sdkLanguage);
        channel = name === "chromium" ? undefined : name;
        break;
      } catch (e) {
      }
    }
    if (channel === null) {
      const installCommand = buildPlaywrightCLICommand(sdkLanguage, `install chromium`);
      const prettyMessage = [`No chromium-based browser found on the system.`, `Please run the following command to download one:`, ``, `    ${installCommand}`, ``, `<3 Playwright Team`].join(`
`);
      throw new Error(`
` + (0, _utils.wrapInASCIIBox)(prettyMessage, 1));
    }
    return channel;
  }
  function lowercaseAllKeys(json) {
    if (typeof json !== "object" || !json)
      return json;
    if (Array.isArray(json))
      return json.map(lowercaseAllKeys);
    const result = {};
    for (const [key, value] of Object.entries(json))
      result[key.toLowerCase()] = lowercaseAllKeys(value);
    return result;
  }
  var registry = exports.registry = new Registry(require_browsers());
});

// node_modules/playwright-core/lib/protocol/validatorPrimitives.js
var require_validatorPrimitives = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ValidationError = undefined;
  exports.createMetadataValidator = createMetadataValidator;
  exports.findValidator = findValidator;
  exports.maybeFindValidator = maybeFindValidator;
  exports.tUndefined = exports.tType = exports.tString = exports.tOptional = exports.tObject = exports.tNumber = exports.tEnum = exports.tChannel = exports.tBoolean = exports.tBinary = exports.tArray = exports.tAny = exports.scheme = undefined;
  var _utils = require_utils();

  class ValidationError extends Error {
  }
  exports.ValidationError = ValidationError;
  var scheme = exports.scheme = {};
  function findValidator(type, method, kind) {
    const validator = maybeFindValidator(type, method, kind);
    if (!validator)
      throw new ValidationError(`Unknown scheme for ${kind}: ${type}.${method}`);
    return validator;
  }
  function maybeFindValidator(type, method, kind) {
    const schemeName = type + (kind === "Initializer" ? "" : method[0].toUpperCase() + method.substring(1)) + kind;
    return scheme[schemeName];
  }
  function createMetadataValidator() {
    return tOptional(scheme["Metadata"]);
  }
  var tNumber = (arg, path, context) => {
    if (arg instanceof Number)
      return arg.valueOf();
    if (typeof arg === "number")
      return arg;
    throw new ValidationError(`${path}: expected number, got ${typeof arg}`);
  };
  exports.tNumber = tNumber;
  var tBoolean = (arg, path, context) => {
    if (arg instanceof Boolean)
      return arg.valueOf();
    if (typeof arg === "boolean")
      return arg;
    throw new ValidationError(`${path}: expected boolean, got ${typeof arg}`);
  };
  exports.tBoolean = tBoolean;
  var tString = (arg, path, context) => {
    if (arg instanceof String)
      return arg.valueOf();
    if (typeof arg === "string")
      return arg;
    throw new ValidationError(`${path}: expected string, got ${typeof arg}`);
  };
  exports.tString = tString;
  var tBinary = (arg, path, context) => {
    if (context.binary === "fromBase64") {
      if (arg instanceof String)
        return Buffer.from(arg.valueOf(), "base64");
      if (typeof arg === "string")
        return Buffer.from(arg, "base64");
      throw new ValidationError(`${path}: expected base64-encoded buffer, got ${typeof arg}`);
    }
    if (context.binary === "toBase64") {
      if (!(arg instanceof Buffer))
        throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg.toString("base64");
    }
    if (context.binary === "buffer") {
      if (!(arg instanceof Buffer))
        throw new ValidationError(`${path}: expected Buffer, got ${typeof arg}`);
      return arg;
    }
    throw new ValidationError(`Unsupported binary behavior "${context.binary}"`);
  };
  exports.tBinary = tBinary;
  var tUndefined = (arg, path, context) => {
    if (Object.is(arg, undefined))
      return arg;
    throw new ValidationError(`${path}: expected undefined, got ${typeof arg}`);
  };
  exports.tUndefined = tUndefined;
  var tAny = (arg, path, context) => {
    return arg;
  };
  exports.tAny = tAny;
  var tOptional = (v) => {
    return (arg, path, context) => {
      if (Object.is(arg, undefined))
        return arg;
      return v(arg, path, context);
    };
  };
  exports.tOptional = tOptional;
  var tArray = (v) => {
    return (arg, path, context) => {
      if (!Array.isArray(arg))
        throw new ValidationError(`${path}: expected array, got ${typeof arg}`);
      return arg.map((x, index) => v(x, path + "[" + index + "]", context));
    };
  };
  exports.tArray = tArray;
  var tObject = (s) => {
    return (arg, path, context) => {
      if (Object.is(arg, null))
        throw new ValidationError(`${path}: expected object, got null`);
      if (typeof arg !== "object")
        throw new ValidationError(`${path}: expected object, got ${typeof arg}`);
      const result = {};
      for (const [key, v] of Object.entries(s)) {
        const value = v(arg[key], path ? path + "." + key : key, context);
        if (!Object.is(value, undefined))
          result[key] = value;
      }
      if ((0, _utils.isUnderTest)()) {
        for (const [key, value] of Object.entries(arg)) {
          if (key.startsWith("__testHook"))
            result[key] = value;
        }
      }
      return result;
    };
  };
  exports.tObject = tObject;
  var tEnum = (e) => {
    return (arg, path, context) => {
      if (!e.includes(arg))
        throw new ValidationError(`${path}: expected one of (${e.join("|")})`);
      return arg;
    };
  };
  exports.tEnum = tEnum;
  var tChannel = (names) => {
    return (arg, path, context) => {
      return context.tChannelImpl(names, arg, path, context);
    };
  };
  exports.tChannel = tChannel;
  var tType = (name) => {
    return (arg, path, context) => {
      const v = scheme[name];
      if (!v)
        throw new ValidationError(path + ': unknown type "' + name + '"');
      return v(arg, path, context);
    };
  };
  exports.tType = tType;
});

// node_modules/playwright-core/lib/protocol/validator.js
var require_validator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "ValidationError", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.ValidationError;
    }
  });
  Object.defineProperty(exports, "createMetadataValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.createMetadataValidator;
    }
  });
  Object.defineProperty(exports, "findValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.findValidator;
    }
  });
  Object.defineProperty(exports, "maybeFindValidator", {
    enumerable: true,
    get: function() {
      return _validatorPrimitives.maybeFindValidator;
    }
  });
  var _validatorPrimitives = require_validatorPrimitives();
  _validatorPrimitives.scheme.StackFrame = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString,
    line: _validatorPrimitives.tNumber,
    column: _validatorPrimitives.tNumber,
    function: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.Metadata = (0, _validatorPrimitives.tObject)({
    location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString,
      line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    apiName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    internal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    stepId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ClientSideCallMetadata = (0, _validatorPrimitives.tObject)({
    id: _validatorPrimitives.tNumber,
    stack: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("StackFrame")))
  });
  _validatorPrimitives.scheme.Point = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.Rect = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    width: _validatorPrimitives.tNumber,
    height: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SerializedValue = (0, _validatorPrimitives.tObject)({
    n: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    b: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    s: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    v: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["null", "undefined", "NaN", "Infinity", "-Infinity", "-0"])),
    d: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    u: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    bi: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    e: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      m: _validatorPrimitives.tString,
      n: _validatorPrimitives.tString,
      s: _validatorPrimitives.tString
    })),
    r: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      p: _validatorPrimitives.tString,
      f: _validatorPrimitives.tString
    })),
    a: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    o: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      k: _validatorPrimitives.tString,
      v: (0, _validatorPrimitives.tType)("SerializedValue")
    }))),
    h: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    id: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ref: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.SerializedArgument = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue"),
    handles: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)("*"))
  });
  _validatorPrimitives.scheme.ExpectedTextValue = (0, _validatorPrimitives.tObject)({
    string: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    matchSubstring: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreCase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    normalizeWhiteSpace: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AXNode = (0, _validatorPrimitives.tObject)({
    role: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    valueString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valueNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    description: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    keyshortcuts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    roledescription: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    valuetext: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    disabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expanded: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modal: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    multiselectable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    readonly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    required: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["checked", "unchecked", "mixed"])),
    pressed: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["pressed", "released", "mixed"])),
    level: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    valuemax: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    autocomplete: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    haspopup: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    invalid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    orientation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AXNode")))
  });
  _validatorPrimitives.scheme.SetNetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    expires: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    httpOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    secure: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sameSite: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"]))
  });
  _validatorPrimitives.scheme.NetworkCookie = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString,
    domain: _validatorPrimitives.tString,
    path: _validatorPrimitives.tString,
    expires: _validatorPrimitives.tNumber,
    httpOnly: _validatorPrimitives.tBoolean,
    secure: _validatorPrimitives.tBoolean,
    sameSite: (0, _validatorPrimitives.tEnum)(["Strict", "Lax", "None"])
  });
  _validatorPrimitives.scheme.NameValue = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.OriginStorage = (0, _validatorPrimitives.tObject)({
    origin: _validatorPrimitives.tString,
    localStorage: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.SerializedError = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      message: _validatorPrimitives.tString,
      name: _validatorPrimitives.tString,
      stack: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue"))
  });
  _validatorPrimitives.scheme.RecordHarOptions = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString,
    content: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["embed", "attach", "omit"])),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["full", "minimal"])),
    urlGlob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    urlRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FormField = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    file: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))
  });
  _validatorPrimitives.scheme.APIRequestContextInitializer = (0, _validatorPrimitives.tObject)({
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.APIRequestContextFetchParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    encodedParams: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    params: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    jsonData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    formData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    multipartData: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("FormField"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    failOnStatusCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    maxRedirects: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    maxRetries: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tType)("APIResponse")
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextFetchLogResult = (0, _validatorPrimitives.tObject)({
    log: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.APIRequestContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseParams = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeAPIResponseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIRequestContextDisposeParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.APIRequestContextDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.APIResponse = (0, _validatorPrimitives.tObject)({
    fetchUid: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LifecycleEvent = (0, _validatorPrimitives.tEnum)(["load", "domcontentloaded", "networkidle", "commit"]);
  _validatorPrimitives.scheme.LocalUtilsInitializer = (0, _validatorPrimitives.tObject)({
    deviceDescriptors: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      descriptor: (0, _validatorPrimitives.tObject)({
        userAgent: _validatorPrimitives.tString,
        viewport: (0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        }),
        screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
          width: _validatorPrimitives.tNumber,
          height: _validatorPrimitives.tNumber
        })),
        deviceScaleFactor: _validatorPrimitives.tNumber,
        isMobile: _validatorPrimitives.tBoolean,
        hasTouch: _validatorPrimitives.tBoolean,
        defaultBrowserType: (0, _validatorPrimitives.tEnum)(["chromium", "firefox", "webkit"])
      })
    }))
  });
  _validatorPrimitives.scheme.LocalUtilsZipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    stacksId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tEnum)(["write", "append"]),
    includeSources: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsZipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarOpenParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarOpenResult = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString,
    url: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    isNavigationRequest: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.LocalUtilsHarLookupResult = (0, _validatorPrimitives.tObject)({
    action: (0, _validatorPrimitives.tEnum)(["error", "redirect", "fulfill", "noentry"]),
    message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    redirectURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseParams = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsHarUnzipParams = (0, _validatorPrimitives.tObject)({
    zipFile: _validatorPrimitives.tString,
    harFile: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsHarUnzipResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsConnectParams = (0, _validatorPrimitives.tObject)({
    wsEndpoint: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    exposeNetwork: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    socksProxyRedirectPortForTest: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.LocalUtilsConnectResult = (0, _validatorPrimitives.tObject)({
    pipe: (0, _validatorPrimitives.tChannel)(["JsonPipe"]),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedParams = (0, _validatorPrimitives.tObject)({
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTracingStartedResult = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyParams = (0, _validatorPrimitives.tObject)({
    callData: (0, _validatorPrimitives.tType)("ClientSideCallMetadata")
  });
  _validatorPrimitives.scheme.LocalUtilsAddStackToTracingNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedParams = (0, _validatorPrimitives.tObject)({
    stacksId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.LocalUtilsTraceDiscardedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RootInitializeParams = (0, _validatorPrimitives.tObject)({
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.RootInitializeResult = (0, _validatorPrimitives.tObject)({
    playwright: (0, _validatorPrimitives.tChannel)(["Playwright"])
  });
  _validatorPrimitives.scheme.PlaywrightInitializer = (0, _validatorPrimitives.tObject)({
    chromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    firefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    webkit: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    bidiChromium: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    bidiFirefox: (0, _validatorPrimitives.tChannel)(["BrowserType"]),
    android: (0, _validatorPrimitives.tChannel)(["Android"]),
    electron: (0, _validatorPrimitives.tChannel)(["Electron"]),
    utils: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["LocalUtils"])),
    selectors: (0, _validatorPrimitives.tChannel)(["Selectors"]),
    preLaunchedBrowser: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Browser"])),
    preConnectedAndroidDevice: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["AndroidDevice"])),
    socksSupport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["SocksSupport"]))
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestParams = (0, _validatorPrimitives.tObject)({
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    })),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PlaywrightNewRequestResult = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["APIRequestContext"])
  });
  _validatorPrimitives.scheme.RecorderSource = (0, _validatorPrimitives.tObject)({
    isRecorded: _validatorPrimitives.tBoolean,
    id: _validatorPrimitives.tString,
    label: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    language: _validatorPrimitives.tString,
    highlight: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      line: _validatorPrimitives.tNumber,
      type: _validatorPrimitives.tString
    })),
    revealLine: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    group: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerInspectRequestedEvent = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    locator: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerSetModeRequestedEvent = (0, _validatorPrimitives.tObject)({
    mode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerStateChangedEvent = (0, _validatorPrimitives.tObject)({
    pageCount: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.DebugControllerSourceChangedEvent = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    header: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.DebugControllerPausedEvent = (0, _validatorPrimitives.tObject)({
    paused: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerInitializeParams = (0, _validatorPrimitives.tObject)({
    codegenId: _validatorPrimitives.tString,
    sdkLanguage: (0, _validatorPrimitives.tEnum)(["javascript", "python", "java", "csharp"])
  });
  _validatorPrimitives.scheme.DebugControllerInitializeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedParams = (0, _validatorPrimitives.tObject)({
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.DebugControllerSetReportStateChangedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResetForReuseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerNavigateParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DebugControllerNavigateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["inspecting", "recording", "none"]),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerSetRecorderModeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    ariaTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DebugControllerHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerHideHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerKillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DebugControllerCloseAllBrowsersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksRequestedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksClosedEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    host: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.SocksSupportSocksConnectedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksFailedParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    errorCode: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksFailedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksDataParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.SocksSupportSocksDataResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksErrorParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString,
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksErrorResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SocksSupportSocksEndParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SocksSupportSocksEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsRegisterParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    source: _validatorPrimitives.tString,
    contentScript: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.SelectorsRegisterResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameParams = (0, _validatorPrimitives.tObject)({
    testIdAttributeName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.SelectorsSetTestIdAttributeNameResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserTypeInitializer = (0, _validatorPrimitives.tObject)({
    executablePath: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"])
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextParams = (0, _validatorPrimitives.tObject)({
    channel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    ignoreAllDefaultArgs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    ignoreDefaultArgs: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGTERM: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    handleSIGHUP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    headless: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    devtools: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    downloadsPath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    chromiumSandbox: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    firefoxUserPrefs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    userDataDir: _validatorPrimitives.tString,
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeLaunchPersistentContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPParams = (0, _validatorPrimitives.tObject)({
    endpointURL: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    slowMo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserTypeConnectOverCDPResult = (0, _validatorPrimitives.tObject)({
    browser: (0, _validatorPrimitives.tChannel)(["Browser"]),
    defaultContext: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["BrowserContext"]))
  });
  _validatorPrimitives.scheme.BrowserInitializer = (0, _validatorPrimitives.tObject)({
    version: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserKillForTestsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserDefaultUserAgentForTestResult = (0, _validatorPrimitives.tObject)({
    userAgent: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserNewContextParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    storageState: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      cookies: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))),
      origins: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage")))
    }))
  });
  _validatorPrimitives.scheme.BrowserNewContextForReuseResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsParams = (0, _validatorPrimitives.tObject)({
    reason: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserStopPendingOperationsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserNewBrowserCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserStartTracingParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    categories: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.BrowserStartTracingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserStopTracingResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.EventTargetInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoParams = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tObject)({
      waitId: _validatorPrimitives.tString,
      phase: (0, _validatorPrimitives.tEnum)(["before", "after", "log"]),
      event: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      message: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })
  });
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.PageWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoParams = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoParams");
  _validatorPrimitives.scheme.EventTargetWaitForEventInfoResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.PageWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.WebSocketWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.ElectronApplicationWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.AndroidDeviceWaitForEventInfoResult = (0, _validatorPrimitives.tType)("EventTargetWaitForEventInfoResult");
  _validatorPrimitives.scheme.BrowserContextInitializer = (0, _validatorPrimitives.tObject)({
    isChromium: _validatorPrimitives.tBoolean,
    requestContext: (0, _validatorPrimitives.tChannel)(["APIRequestContext"]),
    tracing: (0, _validatorPrimitives.tChannel)(["Tracing"])
  });
  _validatorPrimitives.scheme.BrowserContextBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.BrowserContextConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    }),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextDialogEvent = (0, _validatorPrimitives.tObject)({
    dialog: (0, _validatorPrimitives.tChannel)(["Dialog"])
  });
  _validatorPrimitives.scheme.BrowserContextPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextPageErrorEvent = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError"),
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.BrowserContextWebSocketRouteEvent = (0, _validatorPrimitives.tObject)({
    webSocketRoute: (0, _validatorPrimitives.tChannel)(["WebSocketRoute"])
  });
  _validatorPrimitives.scheme.BrowserContextVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextBackgroundPageEvent = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextServiceWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.BrowserContextRequestEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFailedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    failureText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextRequestFinishedEvent = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"])),
    responseEndTiming: _validatorPrimitives.tNumber,
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextResponseEvent = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tChannel)(["Response"]),
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesParams = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SetNetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextAddCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearCookiesParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    nameRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    nameRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domain: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domainRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    domainRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    path: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    pathRegexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    pathRegexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClearCookiesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClearPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCloseParams = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextCookiesParams = (0, _validatorPrimitives.tObject)({
    urls: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextCookiesResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie"))
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsParams = (0, _validatorPrimitives.tObject)({
    permissions: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString),
    origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextGrantPermissionsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewPageResult = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.BrowserContextSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.BrowserContextSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetGeolocationParams = (0, _validatorPrimitives.tObject)({
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetGeolocationResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsParams = (0, _validatorPrimitives.tObject)({
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetHTTPCredentialsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextSetWebSocketInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextSetOfflineParams = (0, _validatorPrimitives.tObject)({
    offline: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextSetOfflineResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextStorageStateResult = (0, _validatorPrimitives.tObject)({
    cookies: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NetworkCookie")),
    origins: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("OriginStorage"))
  });
  _validatorPrimitives.scheme.BrowserContextPauseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextPauseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextEnableRecorderParams = (0, _validatorPrimitives.tObject)({
    language: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    mode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["inspecting", "recording"])),
    codegenMode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["actions", "trace-events"])),
    pauseOnNextStatement: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    testIdAttributeName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    launchOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    contextOptions: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    device: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    saveStorage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    outputFile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    handleSIGINT: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    omitCallTracking: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.BrowserContextEnableRecorderResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.BrowserContextNewCDPSessionResult = (0, _validatorPrimitives.tObject)({
    session: (0, _validatorPrimitives.tChannel)(["CDPSession"])
  });
  _validatorPrimitives.scheme.BrowserContextHarStartParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    options: (0, _validatorPrimitives.tType)("RecordHarOptions")
  });
  _validatorPrimitives.scheme.BrowserContextHarStartResult = (0, _validatorPrimitives.tObject)({
    harId: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.BrowserContextHarExportParams = (0, _validatorPrimitives.tObject)({
    harId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextHarExportResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFilesParams = (0, _validatorPrimitives.tObject)({
    rootDirName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    items: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      lastModifiedMs: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.BrowserContextCreateTempFilesResult = (0, _validatorPrimitives.tObject)({
    rootDir: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
    writableStreams: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.BrowserContextUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockFastForwardParams = (0, _validatorPrimitives.tObject)({
    ticksNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ticksString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockFastForwardResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockInstallParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockInstallResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockPauseAtParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockPauseAtResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockResumeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockResumeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockRunForParams = (0, _validatorPrimitives.tObject)({
    ticksNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    ticksString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockRunForResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockSetFixedTimeParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockSetFixedTimeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BrowserContextClockSetSystemTimeParams = (0, _validatorPrimitives.tObject)({
    timeNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeString: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.BrowserContextClockSetSystemTimeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageInitializer = (0, _validatorPrimitives.tObject)({
    mainFrame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    viewportSize: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    isClosed: _validatorPrimitives.tBoolean,
    opener: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"]))
  });
  _validatorPrimitives.scheme.PageBindingCallEvent = (0, _validatorPrimitives.tObject)({
    binding: (0, _validatorPrimitives.tChannel)(["BindingCall"])
  });
  _validatorPrimitives.scheme.PageCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCrashEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageDownloadEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    suggestedFilename: _validatorPrimitives.tString,
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageFileChooserEvent = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"]),
    isMultiple: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageFrameAttachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageFrameDetachedEvent = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"])
  });
  _validatorPrimitives.scheme.PageLocatorHandlerTriggeredEvent = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageRouteEvent = (0, _validatorPrimitives.tObject)({
    route: (0, _validatorPrimitives.tChannel)(["Route"])
  });
  _validatorPrimitives.scheme.PageWebSocketRouteEvent = (0, _validatorPrimitives.tObject)({
    webSocketRoute: (0, _validatorPrimitives.tChannel)(["WebSocketRoute"])
  });
  _validatorPrimitives.scheme.PageVideoEvent = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tChannel)(["Artifact"])
  });
  _validatorPrimitives.scheme.PageWebSocketEvent = (0, _validatorPrimitives.tObject)({
    webSocket: (0, _validatorPrimitives.tChannel)(["WebSocket"])
  });
  _validatorPrimitives.scheme.PageWorkerEvent = (0, _validatorPrimitives.tObject)({
    worker: (0, _validatorPrimitives.tChannel)(["Worker"])
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultNavigationTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAddInitScriptParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageAddInitScriptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageCloseParams = (0, _validatorPrimitives.tObject)({
    runBeforeUnload: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageEmulateMediaParams = (0, _validatorPrimitives.tObject)({
    media: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["screen", "print", "no-override"])),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"]))
  });
  _validatorPrimitives.scheme.PageEmulateMediaResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageExposeBindingParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    needsHandle: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageExposeBindingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageGoBackParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoBackResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageGoForwardParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageGoForwardResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageRequestGCParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageRequestGCResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageRegisterLocatorHandlerResult = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber,
    remove: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageResolveLocatorHandlerNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUnregisterLocatorHandlerParams = (0, _validatorPrimitives.tObject)({
    uid: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageUnregisterLocatorHandlerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageReloadParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.PageReloadResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.PageExpectScreenshotParams = (0, _validatorPrimitives.tObject)({
    expected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    timeout: _validatorPrimitives.tNumber,
    isNot: _validatorPrimitives.tBoolean,
    locator: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    })),
    comparator: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    maxDiffPixels: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    maxDiffPixelRatio: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    threshold: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageExpectScreenshotResult = (0, _validatorPrimitives.tObject)({
    diff: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    errorMessage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    actual: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    previous: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.PageScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    fullPage: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clip: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect")),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.PageScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersParams = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.PageSetExtraHTTPHeadersResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.PageSetNetworkInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsParams = (0, _validatorPrimitives.tObject)({
    patterns: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      glob: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexSource: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      regexFlags: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.PageSetWebSocketInterceptionPatternsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageSetViewportSizeParams = (0, _validatorPrimitives.tObject)({
    viewportSize: (0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.PageSetViewportSizeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardDownParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardUpParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardInsertTextParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.PageKeyboardInsertTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageKeyboardPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageKeyboardPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseMoveParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    steps: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseMoveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseDownParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseDownResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseUpParams = (0, _validatorPrimitives.tObject)({
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseUpResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseClickParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.PageMouseClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageMouseWheelParams = (0, _validatorPrimitives.tObject)({
    deltaX: _validatorPrimitives.tNumber,
    deltaY: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageMouseWheelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageTouchscreenTapParams = (0, _validatorPrimitives.tObject)({
    x: _validatorPrimitives.tNumber,
    y: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.PageTouchscreenTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageAccessibilitySnapshotParams = (0, _validatorPrimitives.tObject)({
    interestingOnly: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    root: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.PageAccessibilitySnapshotResult = (0, _validatorPrimitives.tObject)({
    rootAXNode: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("AXNode"))
  });
  _validatorPrimitives.scheme.PagePdfParams = (0, _validatorPrimitives.tObject)({
    scale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    displayHeaderFooter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    headerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    footerTemplate: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    printBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    landscape: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pageRanges: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    format: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    width: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    height: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    preferCSSPageSize: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    margin: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      top: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      bottom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      left: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      right: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    tagged: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    outline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PagePdfResult = (0, _validatorPrimitives.tObject)({
    pdf: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.PageStartJSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    reportAnonymousScripts: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartJSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopJSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      scriptId: _validatorPrimitives.tString,
      source: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      functions: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        functionName: _validatorPrimitives.tString,
        isBlockCoverage: _validatorPrimitives.tBoolean,
        ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
          startOffset: _validatorPrimitives.tNumber,
          endOffset: _validatorPrimitives.tNumber,
          count: _validatorPrimitives.tNumber
        }))
      }))
    }))
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageParams = (0, _validatorPrimitives.tObject)({
    resetOnNavigation: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.PageStartCSSCoverageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageStopCSSCoverageResult = (0, _validatorPrimitives.tObject)({
    entries: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      ranges: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
        start: _validatorPrimitives.tNumber,
        end: _validatorPrimitives.tNumber
      }))
    }))
  });
  _validatorPrimitives.scheme.PageBringToFrontParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageBringToFrontResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.PageUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console", "dialog", "fileChooser", "request", "response", "requestFinished", "requestFailed"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.PageUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    parentFrame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    loadStates: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameLoadstateEvent = (0, _validatorPrimitives.tObject)({
    add: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    remove: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameNavigatedEvent = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    name: _validatorPrimitives.tString,
    newDocument: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      request: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
    })),
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameAddScriptTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    type: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddScriptTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameAddStyleTagParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    content: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameAddStyleTagResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameAriaSnapshotParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameAriaSnapshotResult = (0, _validatorPrimitives.tObject)({
    snapshot: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameBlurParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameBlurResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameCheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameClickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameContentResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameDragAndDropParams = (0, _validatorPrimitives.tObject)({
    source: _validatorPrimitives.tString,
    target: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    sourcePosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    targetPosition: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDragAndDropResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDblclickParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameDispatchEventParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.FrameEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameFillParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFocusParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameFrameElementResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tChannel)(["ElementHandle"])
  });
  _validatorPrimitives.scheme.FrameHighlightParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameHighlightResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameGetAttributeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    name: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent")),
    referer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameGotoResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.FrameHoverParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameInnerHTMLParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInnerTextParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameInputValueParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameIsCheckedParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsDisabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEnabledParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsHiddenParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsVisibleParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FrameIsEditableParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.FramePressParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FramePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameQueryCountParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameQueryCountResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameSelectOptionParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameSetContentParams = (0, _validatorPrimitives.tObject)({
    html: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    waitUntil: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("LifecycleEvent"))
  });
  _validatorPrimitives.scheme.FrameSetContentResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localDirectory: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    directoryStream: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTapParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTextContentParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.FrameTitleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameTitleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.FrameTypeParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameUncheckParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForTimeoutParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameWaitForTimeoutResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.FrameWaitForFunctionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    pollingInterval: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.FrameWaitForFunctionResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"])),
    omitReturnValue: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.FrameWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.FrameExpectParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    expressionArg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny),
    expectedText: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("ExpectedTextValue"))),
    expectedNumber: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    expectedValue: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedArgument")),
    useInnerText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    isNot: _validatorPrimitives.tBoolean,
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.FrameExpectResult = (0, _validatorPrimitives.tObject)({
    matches: _validatorPrimitives.tBoolean,
    received: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SerializedValue")),
    timedOut: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    log: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.WorkerInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WorkerCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WorkerEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.WorkerEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.JSHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.JSHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandlePreviewUpdatedEvent = (0, _validatorPrimitives.tType)("JSHandlePreviewUpdatedEvent");
  _validatorPrimitives.scheme.JSHandleDisposeParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeParams = (0, _validatorPrimitives.tType)("JSHandleDisposeParams");
  _validatorPrimitives.scheme.JSHandleDisposeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDisposeResult = (0, _validatorPrimitives.tType)("JSHandleDisposeResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionResult");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleParams = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleParams");
  _validatorPrimitives.scheme.JSHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleEvaluateExpressionHandleResult = (0, _validatorPrimitives.tType)("JSHandleEvaluateExpressionHandleResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyListParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetPropertyListParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyListResult = (0, _validatorPrimitives.tObject)({
    properties: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      value: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
    }))
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyListResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyListResult");
  _validatorPrimitives.scheme.JSHandleGetPropertyParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyParams = (0, _validatorPrimitives.tType)("JSHandleGetPropertyParams");
  _validatorPrimitives.scheme.JSHandleGetPropertyResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElementHandleGetPropertyResult = (0, _validatorPrimitives.tType)("JSHandleGetPropertyResult");
  _validatorPrimitives.scheme.JSHandleJsonValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleJsonValueParams = (0, _validatorPrimitives.tType)("JSHandleJsonValueParams");
  _validatorPrimitives.scheme.JSHandleJsonValueResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleJsonValueResult = (0, _validatorPrimitives.tType)("JSHandleJsonValueResult");
  _validatorPrimitives.scheme.ElementHandleInitializer = (0, _validatorPrimitives.tObject)({
    preview: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleEvalOnSelectorAllResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElementHandleBoundingBoxParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleBoundingBoxResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Rect"))
  });
  _validatorPrimitives.scheme.ElementHandleCheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleCheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleClickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    clickCount: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleClickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleContentFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandleDblclickParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    button: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["left", "right", "middle"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleDblclickResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleDispatchEventParams = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    eventInit: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElementHandleDispatchEventResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFillParams = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString,
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleFocusResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleGetAttributeParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleGetAttributeResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleHoverParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleHoverResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerHTMLResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInnerTextParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInnerTextResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleInputValueParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleInputValueResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleIsCheckedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsCheckedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsDisabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsDisabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEditableParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEditableResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsEnabledParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsEnabledResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsHiddenParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsHiddenResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleIsVisibleParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleIsVisibleResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElementHandleOwnerFrameParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleOwnerFrameResult = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"]))
  });
  _validatorPrimitives.scheme.ElementHandlePressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    noWaitAfter: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandlePressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleQuerySelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ElementHandleQuerySelectorAllResult = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    type: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["png", "jpeg"])),
    quality: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitBackground: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    caret: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["hide", "initial"])),
    animations: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["disabled", "allow"])),
    scale: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["css", "device"])),
    mask: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
      selector: _validatorPrimitives.tString
    }))),
    maskColor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    style: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededParams = (0, _validatorPrimitives.tObject)({
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleScrollIntoViewIfNeededResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSelectOptionParams = (0, _validatorPrimitives.tObject)({
    elements: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))),
    options: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      valueOrLabel: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      label: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      index: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))),
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSelectOptionResult = (0, _validatorPrimitives.tObject)({
    values: (0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSelectTextResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleSetInputFilesParams = (0, _validatorPrimitives.tObject)({
    payloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      name: _validatorPrimitives.tString,
      mimeType: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      buffer: _validatorPrimitives.tBinary
    }))),
    localDirectory: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    directoryStream: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["WritableStream"])),
    localPaths: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    streams: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["WritableStream"]))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleSetInputFilesResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTapParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    modifiers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tEnum)(["Alt", "Control", "ControlOrMeta", "Meta", "Shift"]))),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleTextContentResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElementHandleTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString,
    delay: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleUncheckParams = (0, _validatorPrimitives.tObject)({
    force: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    position: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("Point")),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    trial: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.ElementHandleUncheckResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateParams = (0, _validatorPrimitives.tObject)({
    state: (0, _validatorPrimitives.tEnum)(["visible", "hidden", "stable", "enabled", "disabled", "editable"]),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.ElementHandleWaitForElementStateResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorParams = (0, _validatorPrimitives.tObject)({
    selector: _validatorPrimitives.tString,
    strict: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["attached", "detached", "visible", "hidden"]))
  });
  _validatorPrimitives.scheme.ElementHandleWaitForSelectorResult = (0, _validatorPrimitives.tObject)({
    element: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle"]))
  });
  _validatorPrimitives.scheme.RequestInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Frame"])),
    serviceWorker: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Worker"])),
    url: _validatorPrimitives.tString,
    resourceType: _validatorPrimitives.tString,
    method: _validatorPrimitives.tString,
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    isNavigationRequest: _validatorPrimitives.tBoolean,
    redirectedFrom: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Request"]))
  });
  _validatorPrimitives.scheme.RequestResponseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestResponseResult = (0, _validatorPrimitives.tObject)({
    response: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Response"]))
  });
  _validatorPrimitives.scheme.RequestRawRequestHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RequestRawRequestHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.RouteInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"])
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestParams = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.RouteRedirectNavigationRequestResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteAbortParams = (0, _validatorPrimitives.tObject)({
    errorCode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.RouteAbortResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteContinueParams = (0, _validatorPrimitives.tObject)({
    url: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    method: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    postData: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
    isFallback: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.RouteContinueResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.RouteFulfillParams = (0, _validatorPrimitives.tObject)({
    status: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    headers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    body: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    isBase64: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    fetchResponseUid: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.RouteFulfillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketRouteMessageFromPageEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteMessageFromServerEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteClosePageEvent = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteCloseServerEvent = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteConnectParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteConnectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteEnsureOpenedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteEnsureOpenedResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteSendToPageParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteSendToPageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteSendToServerParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tString,
    isBase64: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteSendToServerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteClosePageParams = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteClosePageResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketRouteCloseServerParams = (0, _validatorPrimitives.tObject)({
    code: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    wasClean: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.WebSocketRouteCloseServerResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResourceTiming = (0, _validatorPrimitives.tObject)({
    startTime: _validatorPrimitives.tNumber,
    domainLookupStart: _validatorPrimitives.tNumber,
    domainLookupEnd: _validatorPrimitives.tNumber,
    connectStart: _validatorPrimitives.tNumber,
    secureConnectionStart: _validatorPrimitives.tNumber,
    connectEnd: _validatorPrimitives.tNumber,
    requestStart: _validatorPrimitives.tNumber,
    responseStart: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.ResponseInitializer = (0, _validatorPrimitives.tObject)({
    request: (0, _validatorPrimitives.tChannel)(["Request"]),
    url: _validatorPrimitives.tString,
    status: _validatorPrimitives.tNumber,
    statusText: _validatorPrimitives.tString,
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")),
    timing: (0, _validatorPrimitives.tType)("ResourceTiming"),
    fromServiceWorker: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ResponseBodyParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseBodyResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.ResponseSecurityDetailsParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSecurityDetailsResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("SecurityDetails"))
  });
  _validatorPrimitives.scheme.ResponseServerAddrParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseServerAddrResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RemoteAddr"))
  });
  _validatorPrimitives.scheme.ResponseRawResponseHeadersParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseRawResponseHeadersResult = (0, _validatorPrimitives.tObject)({
    headers: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))
  });
  _validatorPrimitives.scheme.ResponseSizesParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ResponseSizesResult = (0, _validatorPrimitives.tObject)({
    sizes: (0, _validatorPrimitives.tType)("RequestSizes")
  });
  _validatorPrimitives.scheme.SecurityDetails = (0, _validatorPrimitives.tObject)({
    issuer: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    protocol: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    subjectName: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    validFrom: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    validTo: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.RequestSizes = (0, _validatorPrimitives.tObject)({
    requestBodySize: _validatorPrimitives.tNumber,
    requestHeadersSize: _validatorPrimitives.tNumber,
    responseBodySize: _validatorPrimitives.tNumber,
    responseHeadersSize: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.RemoteAddr = (0, _validatorPrimitives.tObject)({
    ipAddress: _validatorPrimitives.tString,
    port: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.WebSocketInitializer = (0, _validatorPrimitives.tObject)({
    url: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketOpenEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WebSocketFrameSentEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketFrameReceivedEvent = (0, _validatorPrimitives.tObject)({
    opcode: _validatorPrimitives.tNumber,
    data: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketSocketErrorEvent = (0, _validatorPrimitives.tObject)({
    error: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.WebSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallInitializer = (0, _validatorPrimitives.tObject)({
    frame: (0, _validatorPrimitives.tChannel)(["Frame"]),
    name: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("SerializedValue"))),
    handle: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"]))
  });
  _validatorPrimitives.scheme.BindingCallRejectParams = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tType)("SerializedError")
  });
  _validatorPrimitives.scheme.BindingCallRejectResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.BindingCallResolveParams = (0, _validatorPrimitives.tObject)({
    result: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.BindingCallResolveResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogInitializer = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Page"])),
    type: _validatorPrimitives.tString,
    message: _validatorPrimitives.tString,
    defaultValue: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.DialogAcceptParams = (0, _validatorPrimitives.tObject)({
    promptText: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.DialogAcceptResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.DialogDismissResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    snapshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    screenshots: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    live: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.TracingTracingStartResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStartChunkParams = (0, _validatorPrimitives.tObject)({
    name: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    title: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.TracingTracingStartChunkResult = (0, _validatorPrimitives.tObject)({
    traceName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.TracingTracingGroupParams = (0, _validatorPrimitives.tObject)({
    name: _validatorPrimitives.tString,
    location: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      file: _validatorPrimitives.tString,
      line: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
      column: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    }))
  });
  _validatorPrimitives.scheme.TracingTracingGroupResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingGroupEndParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingGroupEndResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStopChunkParams = (0, _validatorPrimitives.tObject)({
    mode: (0, _validatorPrimitives.tEnum)(["archive", "discard", "entries"])
  });
  _validatorPrimitives.scheme.TracingTracingStopChunkResult = (0, _validatorPrimitives.tObject)({
    artifact: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tChannel)(["Artifact"])),
    entries: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue")))
  });
  _validatorPrimitives.scheme.TracingTracingStopParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.TracingTracingStopResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactInitializer = (0, _validatorPrimitives.tObject)({
    absolutePath: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactPathAfterFinishedResult = (0, _validatorPrimitives.tObject)({
    value: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsParams = (0, _validatorPrimitives.tObject)({
    path: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.ArtifactSaveAsResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactSaveAsStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactFailureParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactFailureResult = (0, _validatorPrimitives.tObject)({
    error: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ArtifactStreamParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactStreamResult = (0, _validatorPrimitives.tObject)({
    stream: (0, _validatorPrimitives.tChannel)(["Stream"])
  });
  _validatorPrimitives.scheme.ArtifactCancelParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactCancelResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ArtifactDeleteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamReadParams = (0, _validatorPrimitives.tObject)({
    size: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.StreamReadResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.StreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.StreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamWriteParams = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.WritableStreamWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.WritableStreamCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionEventEvent = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendParams = (0, _validatorPrimitives.tObject)({
    method: _validatorPrimitives.tString,
    params: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tAny)
  });
  _validatorPrimitives.scheme.CDPSessionSendResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.CDPSessionDetachParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.CDPSessionDetachResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronLaunchParams = (0, _validatorPrimitives.tObject)({
    executablePath: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    cwd: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    env: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    tracesDir: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.ElectronLaunchResult = (0, _validatorPrimitives.tObject)({
    electronApplication: (0, _validatorPrimitives.tChannel)(["ElectronApplication"])
  });
  _validatorPrimitives.scheme.ElectronApplicationInitializer = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.ElectronApplicationCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.ElectronApplicationConsoleEvent = (0, _validatorPrimitives.tObject)({
    type: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    args: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])),
    location: (0, _validatorPrimitives.tObject)({
      url: _validatorPrimitives.tString,
      lineNumber: _validatorPrimitives.tNumber,
      columnNumber: _validatorPrimitives.tNumber
    })
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowParams = (0, _validatorPrimitives.tObject)({
    page: (0, _validatorPrimitives.tChannel)(["Page"])
  });
  _validatorPrimitives.scheme.ElectronApplicationBrowserWindowResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionResult = (0, _validatorPrimitives.tObject)({
    value: (0, _validatorPrimitives.tType)("SerializedValue")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleParams = (0, _validatorPrimitives.tObject)({
    expression: _validatorPrimitives.tString,
    isFunction: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    arg: (0, _validatorPrimitives.tType)("SerializedArgument")
  });
  _validatorPrimitives.scheme.ElectronApplicationEvaluateExpressionHandleResult = (0, _validatorPrimitives.tObject)({
    handle: (0, _validatorPrimitives.tChannel)(["ElementHandle", "JSHandle"])
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionParams = (0, _validatorPrimitives.tObject)({
    event: (0, _validatorPrimitives.tEnum)(["console"]),
    enabled: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.ElectronApplicationUpdateSubscriptionResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicesParams = (0, _validatorPrimitives.tObject)({
    host: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    port: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    omitDriverInstall: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean)
  });
  _validatorPrimitives.scheme.AndroidDevicesResult = (0, _validatorPrimitives.tObject)({
    devices: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tChannel)(["AndroidDevice"]))
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketDataEvent = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketWriteParams = (0, _validatorPrimitives.tObject)({
    data: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidSocketWriteResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidSocketCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInitializer = (0, _validatorPrimitives.tObject)({
    model: _validatorPrimitives.tString,
    serial: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseEvent = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceWebViewAddedEvent = (0, _validatorPrimitives.tObject)({
    webView: (0, _validatorPrimitives.tType)("AndroidWebView")
  });
  _validatorPrimitives.scheme.AndroidDeviceWebViewRemovedEvent = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    state: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["gone"])),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceWaitResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFillParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    text: _validatorPrimitives.tString,
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFillResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    duration: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceDragParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    dest: (0, _validatorPrimitives.tType)("Point"),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceFlingParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceFlingResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLongTapParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceLongTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchCloseParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePinchOpenParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePinchOpenResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScrollParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceScrollResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSwipeParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
    direction: (0, _validatorPrimitives.tEnum)(["up", "down", "left", "right"]),
    percent: _validatorPrimitives.tNumber,
    speed: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    timeout: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDeviceSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInfoParams = (0, _validatorPrimitives.tObject)({
    selector: (0, _validatorPrimitives.tType)("AndroidSelector")
  });
  _validatorPrimitives.scheme.AndroidDeviceInfoResult = (0, _validatorPrimitives.tObject)({
    info: (0, _validatorPrimitives.tType)("AndroidElementInfo")
  });
  _validatorPrimitives.scheme.AndroidDeviceScreenshotParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceScreenshotResult = (0, _validatorPrimitives.tObject)({
    binary: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeParams = (0, _validatorPrimitives.tObject)({
    text: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTypeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputPressParams = (0, _validatorPrimitives.tObject)({
    key: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceInputPressResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputTapParams = (0, _validatorPrimitives.tObject)({
    point: (0, _validatorPrimitives.tType)("Point")
  });
  _validatorPrimitives.scheme.AndroidDeviceInputTapResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeParams = (0, _validatorPrimitives.tObject)({
    segments: (0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("Point")),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputSwipeResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceInputDragParams = (0, _validatorPrimitives.tObject)({
    from: (0, _validatorPrimitives.tType)("Point"),
    to: (0, _validatorPrimitives.tType)("Point"),
    steps: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceInputDragResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserParams = (0, _validatorPrimitives.tObject)({
    noDefaultViewport: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    viewport: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    screen: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      width: _validatorPrimitives.tNumber,
      height: _validatorPrimitives.tNumber
    })),
    ignoreHTTPSErrors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clientCertificates: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tObject)({
      origin: _validatorPrimitives.tString,
      cert: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      key: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary),
      passphrase: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      pfx: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBinary)
    }))),
    javaScriptEnabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    bypassCSP: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    userAgent: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    locale: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    timezoneId: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    geolocation: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      longitude: _validatorPrimitives.tNumber,
      latitude: _validatorPrimitives.tNumber,
      accuracy: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    permissions: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    extraHTTPHeaders: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("NameValue"))),
    offline: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    httpCredentials: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      username: _validatorPrimitives.tString,
      password: _validatorPrimitives.tString,
      origin: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      send: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["always", "unauthorized"]))
    })),
    deviceScaleFactor: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    isMobile: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasTouch: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    colorScheme: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["dark", "light", "no-preference", "no-override"])),
    reducedMotion: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["reduce", "no-preference", "no-override"])),
    forcedColors: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["active", "none", "no-override"])),
    acceptDownloads: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["accept", "deny", "internal-browser-default"])),
    baseURL: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    recordVideo: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      dir: _validatorPrimitives.tString,
      size: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
        width: _validatorPrimitives.tNumber,
        height: _validatorPrimitives.tNumber
      }))
    })),
    recordHar: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tType)("RecordHarOptions")),
    strictSelectors: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    serviceWorkers: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tEnum)(["allow", "block"])),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString)),
    proxy: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      server: _validatorPrimitives.tString,
      bypass: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      username: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
      password: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
    }))
  });
  _validatorPrimitives.scheme.AndroidDeviceLaunchBrowserResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceOpenResult = (0, _validatorPrimitives.tObject)({
    socket: (0, _validatorPrimitives.tChannel)(["AndroidSocket"])
  });
  _validatorPrimitives.scheme.AndroidDeviceShellParams = (0, _validatorPrimitives.tObject)({
    command: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceShellResult = (0, _validatorPrimitives.tObject)({
    result: _validatorPrimitives.tBinary
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    args: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)(_validatorPrimitives.tString))
  });
  _validatorPrimitives.scheme.AndroidDeviceInstallApkResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDevicePushParams = (0, _validatorPrimitives.tObject)({
    file: _validatorPrimitives.tBinary,
    path: _validatorPrimitives.tString,
    mode: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
  });
  _validatorPrimitives.scheme.AndroidDevicePushResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyParams = (0, _validatorPrimitives.tObject)({
    timeout: _validatorPrimitives.tNumber
  });
  _validatorPrimitives.scheme.AndroidDeviceSetDefaultTimeoutNoReplyResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewParams = (0, _validatorPrimitives.tObject)({
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidDeviceConnectToWebViewResult = (0, _validatorPrimitives.tObject)({
    context: (0, _validatorPrimitives.tChannel)(["BrowserContext"])
  });
  _validatorPrimitives.scheme.AndroidDeviceCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidDeviceCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.AndroidWebView = (0, _validatorPrimitives.tObject)({
    pid: _validatorPrimitives.tNumber,
    pkg: _validatorPrimitives.tString,
    socketName: _validatorPrimitives.tString
  });
  _validatorPrimitives.scheme.AndroidSelector = (0, _validatorPrimitives.tObject)({
    checkable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    checked: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    clazz: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    clickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    depth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber),
    desc: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    enabled: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focusable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    focused: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    hasChild: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector")
    })),
    hasDescendant: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({
      selector: (0, _validatorPrimitives.tType)("AndroidSelector"),
      maxDepth: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tNumber)
    })),
    longClickable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    pkg: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    res: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString),
    scrollable: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    selected: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tBoolean),
    text: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.AndroidElementInfo = (0, _validatorPrimitives.tObject)({
    children: (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tArray)((0, _validatorPrimitives.tType)("AndroidElementInfo"))),
    clazz: _validatorPrimitives.tString,
    desc: _validatorPrimitives.tString,
    res: _validatorPrimitives.tString,
    pkg: _validatorPrimitives.tString,
    text: _validatorPrimitives.tString,
    bounds: (0, _validatorPrimitives.tType)("Rect"),
    checkable: _validatorPrimitives.tBoolean,
    checked: _validatorPrimitives.tBoolean,
    clickable: _validatorPrimitives.tBoolean,
    enabled: _validatorPrimitives.tBoolean,
    focusable: _validatorPrimitives.tBoolean,
    focused: _validatorPrimitives.tBoolean,
    longClickable: _validatorPrimitives.tBoolean,
    scrollable: _validatorPrimitives.tBoolean,
    selected: _validatorPrimitives.tBoolean
  });
  _validatorPrimitives.scheme.JsonPipeInitializer = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeMessageEvent = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeClosedEvent = (0, _validatorPrimitives.tObject)({
    reason: (0, _validatorPrimitives.tOptional)(_validatorPrimitives.tString)
  });
  _validatorPrimitives.scheme.JsonPipeSendParams = (0, _validatorPrimitives.tObject)({
    message: _validatorPrimitives.tAny
  });
  _validatorPrimitives.scheme.JsonPipeSendResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseParams = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
  _validatorPrimitives.scheme.JsonPipeCloseResult = (0, _validatorPrimitives.tOptional)((0, _validatorPrimitives.tObject)({}));
});

// node_modules/playwright-core/lib/protocol/serializers.js
var require_serializers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseSerializedValue = parseSerializedValue;
  exports.serializeValue = serializeValue;
  function parseSerializedValue(value, handles) {
    return innerParseSerializedValue(value, handles, new Map);
  }
  function innerParseSerializedValue(value, handles, refs) {
    if (value.ref !== undefined)
      return refs.get(value.ref);
    if (value.n !== undefined)
      return value.n;
    if (value.s !== undefined)
      return value.s;
    if (value.b !== undefined)
      return value.b;
    if (value.v !== undefined) {
      if (value.v === "undefined")
        return;
      if (value.v === "null")
        return null;
      if (value.v === "NaN")
        return NaN;
      if (value.v === "Infinity")
        return Infinity;
      if (value.v === "-Infinity")
        return -Infinity;
      if (value.v === "-0")
        return -0;
    }
    if (value.d !== undefined)
      return new Date(value.d);
    if (value.u !== undefined)
      return new URL(value.u);
    if (value.bi !== undefined)
      return BigInt(value.bi);
    if (value.e !== undefined) {
      const error = new Error(value.e.m);
      error.name = value.e.n;
      error.stack = value.e.s;
      return error;
    }
    if (value.r !== undefined)
      return new RegExp(value.r.p, value.r.f);
    if (value.a !== undefined) {
      const result = [];
      refs.set(value.id, result);
      for (const v of value.a)
        result.push(innerParseSerializedValue(v, handles, refs));
      return result;
    }
    if (value.o !== undefined) {
      const result = {};
      refs.set(value.id, result);
      for (const {
        k,
        v
      } of value.o)
        result[k] = innerParseSerializedValue(v, handles, refs);
      return result;
    }
    if (value.h !== undefined) {
      if (handles === undefined)
        throw new Error("Unexpected handle");
      return handles[value.h];
    }
    throw new Error("Unexpected value");
  }
  function serializeValue(value, handleSerializer) {
    return innerSerializeValue(value, handleSerializer, {
      lastId: 0,
      visited: new Map
    });
  }
  function innerSerializeValue(value, handleSerializer, visitorInfo) {
    const handle = handleSerializer(value);
    if ("fallThrough" in handle)
      value = handle.fallThrough;
    else
      return handle;
    if (typeof value === "symbol")
      return {
        v: "undefined"
      };
    if (Object.is(value, undefined))
      return {
        v: "undefined"
      };
    if (Object.is(value, null))
      return {
        v: "null"
      };
    if (Object.is(value, NaN))
      return {
        v: "NaN"
      };
    if (Object.is(value, Infinity))
      return {
        v: "Infinity"
      };
    if (Object.is(value, -Infinity))
      return {
        v: "-Infinity"
      };
    if (Object.is(value, -0))
      return {
        v: "-0"
      };
    if (typeof value === "boolean")
      return {
        b: value
      };
    if (typeof value === "number")
      return {
        n: value
      };
    if (typeof value === "string")
      return {
        s: value
      };
    if (typeof value === "bigint")
      return {
        bi: value.toString()
      };
    if (isError(value))
      return {
        e: {
          n: value.name,
          m: value.message,
          s: value.stack || ""
        }
      };
    if (isDate(value))
      return {
        d: value.toJSON()
      };
    if (isURL(value))
      return {
        u: value.toJSON()
      };
    if (isRegExp(value))
      return {
        r: {
          p: value.source,
          f: value.flags
        }
      };
    const id = visitorInfo.visited.get(value);
    if (id)
      return {
        ref: id
      };
    if (Array.isArray(value)) {
      const a = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (let i = 0;i < value.length; ++i)
        a.push(innerSerializeValue(value[i], handleSerializer, visitorInfo));
      return {
        a,
        id: id2
      };
    }
    if (typeof value === "object") {
      const o = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (const name of Object.keys(value))
        o.push({
          k: name,
          v: innerSerializeValue(value[name], handleSerializer, visitorInfo)
        });
      return {
        o,
        id: id2
      };
    }
    throw new Error("Unexpected value");
  }
  function isRegExp(obj) {
    return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
  }
  function isDate(obj) {
    return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
  }
  function isURL(obj) {
    return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
  }
  function isError(obj) {
    const proto = obj ? Object.getPrototypeOf(obj) : null;
    return obj instanceof Error || (proto === null || proto === undefined ? undefined : proto.name) === "Error" || proto && isError(proto);
  }
});

// node_modules/playwright-core/lib/server/errors.js
var require_errors = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutError = exports.TargetClosedError = undefined;
  exports.isTargetClosedError = isTargetClosedError;
  exports.parseError = parseError;
  exports.serializeError = serializeError;
  var _utils = require_utils();
  var _serializers = require_serializers();

  class CustomError extends Error {
    constructor(message) {
      super(message);
      this.name = this.constructor.name;
    }
  }

  class TimeoutError extends CustomError {
  }
  exports.TimeoutError = TimeoutError;

  class TargetClosedError extends CustomError {
    constructor(cause, logs) {
      super((cause || "Target page, context or browser has been closed") + (logs || ""));
    }
  }
  exports.TargetClosedError = TargetClosedError;
  function isTargetClosedError(error) {
    return error instanceof TargetClosedError || error.name === "TargetClosedError";
  }
  function serializeError(e) {
    if ((0, _utils.isError)(e))
      return {
        error: {
          message: e.message,
          stack: e.stack,
          name: e.name
        }
      };
    return {
      value: (0, _serializers.serializeValue)(e, (value) => ({
        fallThrough: value
      }))
    };
  }
  function parseError(error) {
    if (!error.error) {
      if (error.value === undefined)
        throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, undefined);
    }
    const e = new Error(error.error.message);
    e.stack = error.error.stack || "";
    e.name = error.error.name;
    return e;
  }
});

// node_modules/playwright-core/lib/server/instrumentation.js
var require_instrumentation = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SdkObject = undefined;
  exports.createInstrumentation = createInstrumentation;
  exports.serverSideCallMetadata = serverSideCallMetadata;
  var _events = __require("events");
  var _utils = require_utils();

  class SdkObject extends _events.EventEmitter {
    constructor(parent, guidPrefix, guid) {
      super();
      this.guid = undefined;
      this.attribution = undefined;
      this.instrumentation = undefined;
      this.guid = guid || `${guidPrefix || ""}@${(0, _utils.createGuid)()}`;
      this.setMaxListeners(0);
      this.attribution = {
        ...parent.attribution
      };
      this.instrumentation = parent.instrumentation;
    }
  }
  exports.SdkObject = SdkObject;
  function createInstrumentation() {
    const listeners = new Map;
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string")
          return obj[prop];
        if (prop === "addListener")
          return (listener, context) => listeners.set(listener, context);
        if (prop === "removeListener")
          return (listener) => listeners.delete(listener);
        if (!prop.startsWith("on"))
          return obj[prop];
        return async (sdkObject, ...params) => {
          for (const [listener, context] of listeners) {
            var _prop, _ref;
            if (!context || sdkObject.attribution.context === context)
              await ((_prop = (_ref = listener)[prop]) === null || _prop === undefined ? undefined : _prop.call(_ref, sdkObject, ...params));
          }
        };
      }
    });
  }
  function serverSideCallMetadata() {
    return {
      id: "",
      startTime: 0,
      endTime: 0,
      type: "Internal",
      method: "",
      params: {},
      log: [],
      isServerSide: true
    };
  }
});

// node_modules/playwright-core/lib/server/protocolError.js
var require_protocolError = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProtocolError = undefined;
  exports.isProtocolError = isProtocolError;
  exports.isSessionClosedError = isSessionClosedError;
  var _stackTrace = require_stackTrace();

  class ProtocolError extends Error {
    constructor(type, method, logs) {
      super();
      this.type = undefined;
      this.method = undefined;
      this.logs = undefined;
      this.type = type;
      this.method = method;
      this.logs = logs;
    }
    setMessage(message) {
      (0, _stackTrace.rewriteErrorMessage)(this, `Protocol error (${this.method}): ${message}`);
    }
    browserLogMessage() {
      return this.logs ? `
Browser logs:
` + this.logs : "";
    }
  }
  exports.ProtocolError = ProtocolError;
  function isProtocolError(e) {
    return e instanceof ProtocolError;
  }
  function isSessionClosedError(e) {
    return e instanceof ProtocolError && (e.type === "closed" || e.type === "crashed");
  }
});

// node_modules/playwright-core/lib/server/dispatchers/dispatcher.js
var require_dispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dispatcherSymbol = exports.RootDispatcher = exports.DispatcherConnection = exports.Dispatcher = undefined;
  exports.existingDispatcher = existingDispatcher;
  exports.setMaxDispatchersForTest = setMaxDispatchersForTest;
  var _events = __require("events");
  var _validator = require_validator();
  var _utils = require_utils();
  var _errors = require_errors();
  var _instrumentation = require_instrumentation();
  var _eventsHelper = require_eventsHelper();
  var _protocolError = require_protocolError();
  var dispatcherSymbol = exports.dispatcherSymbol = Symbol("dispatcher");
  var metadataValidator = (0, _validator.createMetadataValidator)();
  function existingDispatcher(object) {
    return object[dispatcherSymbol];
  }
  var maxDispatchersOverride;
  function setMaxDispatchersForTest(value) {
    maxDispatchersOverride = value;
  }
  function maxDispatchersForBucket(gcBucket) {
    var _ref, _maxDispatchersOverri;
    return (_ref = (_maxDispatchersOverri = maxDispatchersOverride) !== null && _maxDispatchersOverri !== undefined ? _maxDispatchersOverri : {
      JSHandle: 1e5,
      ElementHandle: 1e5
    }[gcBucket]) !== null && _ref !== undefined ? _ref : 1e4;
  }

  class Dispatcher extends _events.EventEmitter {
    constructor(parent, object, type, initializer, gcBucket) {
      super();
      this._connection = undefined;
      this._parent = undefined;
      this._dispatchers = new Map;
      this._disposed = false;
      this._eventListeners = [];
      this._guid = undefined;
      this._type = undefined;
      this._gcBucket = undefined;
      this._object = undefined;
      this._openScope = new _utils.LongStandingScope;
      this._connection = parent instanceof DispatcherConnection ? parent : parent._connection;
      this._parent = parent instanceof DispatcherConnection ? undefined : parent;
      const guid = object.guid;
      this._guid = guid;
      this._type = type;
      this._object = object;
      this._gcBucket = gcBucket !== null && gcBucket !== undefined ? gcBucket : type;
      object[dispatcherSymbol] = this;
      this._connection.registerDispatcher(this);
      if (this._parent) {
        (0, _utils.assert)(!this._parent._dispatchers.has(guid));
        this._parent._dispatchers.set(guid, this);
      }
      if (this._parent)
        this._connection.sendCreate(this._parent, type, guid, initializer);
      this._connection.maybeDisposeStaleDispatchers(this._gcBucket);
    }
    parentScope() {
      return this._parent;
    }
    addObjectListener(eventName, handler) {
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._object, eventName, handler));
    }
    adopt(child) {
      if (child._parent === this)
        return;
      const oldParent = child._parent;
      oldParent._dispatchers.delete(child._guid);
      this._dispatchers.set(child._guid, child);
      child._parent = this;
      this._connection.sendAdopt(this, child);
    }
    async _handleCommand(callMetadata, method, validParams) {
      const commandPromise = this[method](validParams, callMetadata);
      try {
        return await this._openScope.race(commandPromise);
      } catch (e) {
        if (callMetadata.potentiallyClosesScope && (0, _errors.isTargetClosedError)(e))
          return await commandPromise;
        throw e;
      }
    }
    _dispatchEvent(method, params) {
      if (this._disposed) {
        if ((0, _utils.isUnderTest)())
          throw new Error(`${this._guid} is sending "${String(method)}" event after being disposed`);
        return;
      }
      this._connection.sendEvent(this, method, params);
    }
    _dispose(reason) {
      this._disposeRecursively(new _errors.TargetClosedError);
      this._connection.sendDispose(this, reason);
    }
    _onDispose() {
    }
    _disposeRecursively(error) {
      var _this$_parent;
      (0, _utils.assert)(!this._disposed, `${this._guid} is disposed more than once`);
      this._onDispose();
      this._disposed = true;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      (_this$_parent = this._parent) === null || _this$_parent === undefined || _this$_parent._dispatchers.delete(this._guid);
      const list = this._connection._dispatchersByBucket.get(this._gcBucket);
      list === null || list === undefined || list.delete(this._guid);
      this._connection._dispatchers.delete(this._guid);
      for (const dispatcher of [...this._dispatchers.values()])
        dispatcher._disposeRecursively(error);
      this._dispatchers.clear();
      delete this._object[dispatcherSymbol];
      this._openScope.close(error);
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._dispatchers.values()).map((o) => o._debugScopeState())
      };
    }
    async waitForEventInfo() {
    }
  }
  exports.Dispatcher = Dispatcher;

  class RootDispatcher extends Dispatcher {
    constructor(connection, createPlaywright) {
      super(connection, {
        guid: ""
      }, "Root", {});
      this._initialized = false;
      this.createPlaywright = createPlaywright;
    }
    async initialize(params) {
      (0, _utils.assert)(this.createPlaywright);
      (0, _utils.assert)(!this._initialized);
      this._initialized = true;
      return {
        playwright: await this.createPlaywright(this, params)
      };
    }
  }
  exports.RootDispatcher = RootDispatcher;

  class DispatcherConnection {
    constructor(isLocal) {
      this._dispatchers = new Map;
      this._dispatchersByBucket = new Map;
      this.onmessage = (message) => {
      };
      this._waitOperations = new Map;
      this._isLocal = undefined;
      this._isLocal = !!isLocal;
    }
    sendEvent(dispatcher, event, params) {
      const validator = (0, _validator.findValidator)(dispatcher._type, event, "Event");
      params = validator(params, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      this.onmessage({
        guid: dispatcher._guid,
        method: event,
        params
      });
    }
    sendCreate(parent, type, guid, initializer) {
      const validator = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator(initializer, "", {
        tChannelImpl: this._tChannelImplToWire.bind(this),
        binary: this._isLocal ? "buffer" : "toBase64"
      });
      this.onmessage({
        guid: parent._guid,
        method: "__create__",
        params: {
          type,
          initializer,
          guid
        }
      });
    }
    sendAdopt(parent, dispatcher) {
      this.onmessage({
        guid: parent._guid,
        method: "__adopt__",
        params: {
          guid: dispatcher._guid
        }
      });
    }
    sendDispose(dispatcher, reason) {
      this.onmessage({
        guid: dispatcher._guid,
        method: "__dispose__",
        params: {
          reason
        }
      });
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const guid = arg.guid;
        const dispatcher = this._dispatchers.get(guid);
        if (!dispatcher)
          throw new _validator.ValidationError(`${path}: no object with guid ${guid}`);
        if (names !== "*" && !names.includes(dispatcher._type))
          throw new _validator.ValidationError(`${path}: object with guid ${guid} has type ${dispatcher._type}, expected ${names.toString()}`);
        return dispatcher;
      }
      throw new _validator.ValidationError(`${path}: expected guid for ${names.toString()}`);
    }
    _tChannelImplToWire(names, arg, path, context) {
      if (arg instanceof Dispatcher) {
        if (names !== "*" && !names.includes(arg._type))
          throw new _validator.ValidationError(`${path}: dispatcher with guid ${arg._guid} has type ${arg._type}, expected ${names.toString()}`);
        return {
          guid: arg._guid
        };
      }
      throw new _validator.ValidationError(`${path}: expected dispatcher ${names.toString()}`);
    }
    registerDispatcher(dispatcher) {
      (0, _utils.assert)(!this._dispatchers.has(dispatcher._guid));
      this._dispatchers.set(dispatcher._guid, dispatcher);
      let list = this._dispatchersByBucket.get(dispatcher._gcBucket);
      if (!list) {
        list = new Set;
        this._dispatchersByBucket.set(dispatcher._gcBucket, list);
      }
      list.add(dispatcher._guid);
    }
    maybeDisposeStaleDispatchers(gcBucket) {
      const maxDispatchers = maxDispatchersForBucket(gcBucket);
      const list = this._dispatchersByBucket.get(gcBucket);
      if (!list || list.size <= maxDispatchers)
        return;
      const dispatchersArray = [...list];
      const disposeCount = maxDispatchers / 10 | 0;
      this._dispatchersByBucket.set(gcBucket, new Set(dispatchersArray.slice(disposeCount)));
      for (let i = 0;i < disposeCount; ++i) {
        const d = this._dispatchers.get(dispatchersArray[i]);
        if (!d)
          continue;
        d._dispose("gc");
      }
    }
    async dispatch(message) {
      var _sdkObject$attributio, _sdkObject$attributio2, _params$info;
      const {
        id,
        guid,
        method,
        params,
        metadata
      } = message;
      const dispatcher = this._dispatchers.get(guid);
      if (!dispatcher) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(new _errors.TargetClosedError)
        });
        return;
      }
      let validParams;
      let validMetadata;
      try {
        const validator = (0, _validator.findValidator)(dispatcher._type, method, "Params");
        validParams = validator(params, "", {
          tChannelImpl: this._tChannelImplFromWire.bind(this),
          binary: this._isLocal ? "buffer" : "fromBase64"
        });
        validMetadata = metadataValidator(metadata, "", {
          tChannelImpl: this._tChannelImplFromWire.bind(this),
          binary: this._isLocal ? "buffer" : "fromBase64"
        });
        if (typeof dispatcher[method] !== "function")
          throw new Error(`Mismatching dispatcher: "${dispatcher._type}" does not implement "${method}"`);
      } catch (e) {
        this.onmessage({
          id,
          error: (0, _errors.serializeError)(e)
        });
        return;
      }
      const sdkObject = dispatcher._object instanceof _instrumentation.SdkObject ? dispatcher._object : undefined;
      const callMetadata = {
        id: `call@${id}`,
        location: validMetadata.location,
        apiName: validMetadata.apiName,
        internal: validMetadata.internal,
        stepId: validMetadata.stepId,
        objectId: sdkObject === null || sdkObject === undefined ? undefined : sdkObject.guid,
        pageId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio = sdkObject.attribution) === null || _sdkObject$attributio === undefined || (_sdkObject$attributio = _sdkObject$attributio.page) === null || _sdkObject$attributio === undefined ? undefined : _sdkObject$attributio.guid,
        frameId: sdkObject === null || sdkObject === undefined || (_sdkObject$attributio2 = sdkObject.attribution) === null || _sdkObject$attributio2 === undefined || (_sdkObject$attributio2 = _sdkObject$attributio2.frame) === null || _sdkObject$attributio2 === undefined ? undefined : _sdkObject$attributio2.guid,
        startTime: (0, _utils.monotonicTime)(),
        endTime: 0,
        type: dispatcher._type,
        method,
        params: params || {},
        log: []
      };
      if (sdkObject && params !== null && params !== undefined && (_params$info = params.info) !== null && _params$info !== undefined && _params$info.waitId) {
        const info = params.info;
        switch (info.phase) {
          case "before": {
            this._waitOperations.set(info.waitId, callMetadata);
            await sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata);
            this.onmessage({
              id
            });
            return;
          }
          case "log": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.log.push(info.message);
            sdkObject.instrumentation.onCallLog(sdkObject, originalMetadata, "api", info.message);
            this.onmessage({
              id
            });
            return;
          }
          case "after": {
            const originalMetadata = this._waitOperations.get(info.waitId);
            originalMetadata.endTime = (0, _utils.monotonicTime)();
            originalMetadata.error = info.error ? {
              error: {
                name: "Error",
                message: info.error
              }
            } : undefined;
            this._waitOperations.delete(info.waitId);
            await sdkObject.instrumentation.onAfterCall(sdkObject, originalMetadata);
            this.onmessage({
              id
            });
            return;
          }
        }
      }
      await (sdkObject === null || sdkObject === undefined ? undefined : sdkObject.instrumentation.onBeforeCall(sdkObject, callMetadata));
      const response = {
        id
      };
      try {
        const result = await dispatcher._handleCommand(callMetadata, method, validParams);
        const validator = (0, _validator.findValidator)(dispatcher._type, method, "Result");
        response.result = validator(result, "", {
          tChannelImpl: this._tChannelImplToWire.bind(this),
          binary: this._isLocal ? "buffer" : "toBase64"
        });
        callMetadata.result = result;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e) && sdkObject) {
          const reason = closeReason(sdkObject);
          if (reason)
            (0, _utils.rewriteErrorMessage)(e, reason);
        } else if ((0, _protocolError.isProtocolError)(e)) {
          if (e.type === "closed") {
            const reason = sdkObject ? closeReason(sdkObject) : undefined;
            e = new _errors.TargetClosedError(reason, e.browserLogMessage());
          } else if (e.type === "crashed") {
            (0, _utils.rewriteErrorMessage)(e, "Target crashed " + e.browserLogMessage());
          }
        }
        response.error = (0, _errors.serializeError)(e);
        callMetadata.error = response.error;
      } finally {
        callMetadata.endTime = (0, _utils.monotonicTime)();
        await (sdkObject === null || sdkObject === undefined ? undefined : sdkObject.instrumentation.onAfterCall(sdkObject, callMetadata));
      }
      if (response.error)
        response.log = (0, _utils.compressCallLog)(callMetadata.log);
      this.onmessage(response);
    }
  }
  exports.DispatcherConnection = DispatcherConnection;
  function closeReason(sdkObject) {
    var _sdkObject$attributio3, _sdkObject$attributio4, _sdkObject$attributio5;
    return ((_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === undefined ? undefined : _sdkObject$attributio3._closeReason) || ((_sdkObject$attributio4 = sdkObject.attribution.context) === null || _sdkObject$attributio4 === undefined ? undefined : _sdkObject$attributio4._closeReason) || ((_sdkObject$attributio5 = sdkObject.attribution.browser) === null || _sdkObject$attributio5 === undefined ? undefined : _sdkObject$attributio5._closeReason);
  }
});

// node_modules/playwright-core/lib/common/timeoutSettings.js
var require_timeoutSettings = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutSettings = exports.DEFAULT_TIMEOUT = exports.DEFAULT_LAUNCH_TIMEOUT = undefined;
  var _utils = require_utils();
  var DEFAULT_TIMEOUT = exports.DEFAULT_TIMEOUT = 30000;
  var DEFAULT_LAUNCH_TIMEOUT = exports.DEFAULT_LAUNCH_TIMEOUT = 3 * 60 * 1000;

  class TimeoutSettings {
    constructor(parent) {
      this._parent = undefined;
      this._defaultTimeout = undefined;
      this._defaultNavigationTimeout = undefined;
      this._parent = parent;
    }
    setDefaultTimeout(timeout) {
      this._defaultTimeout = timeout;
    }
    setDefaultNavigationTimeout(timeout) {
      this._defaultNavigationTimeout = timeout;
    }
    defaultNavigationTimeout() {
      return this._defaultNavigationTimeout;
    }
    defaultTimeout() {
      return this._defaultTimeout;
    }
    navigationTimeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if (this._defaultNavigationTimeout !== undefined)
        return this._defaultNavigationTimeout;
      if ((0, _utils.debugMode)())
        return 0;
      if (this._defaultTimeout !== undefined)
        return this._defaultTimeout;
      if (this._parent)
        return this._parent.navigationTimeout(options);
      return DEFAULT_TIMEOUT;
    }
    timeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      if (this._defaultTimeout !== undefined)
        return this._defaultTimeout;
      if (this._parent)
        return this._parent.timeout(options);
      return DEFAULT_TIMEOUT;
    }
    static timeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      return DEFAULT_TIMEOUT;
    }
    static launchTimeout(options) {
      if (typeof options.timeout === "number")
        return options.timeout;
      if ((0, _utils.debugMode)())
        return 0;
      return DEFAULT_LAUNCH_TIMEOUT;
    }
  }
  exports.TimeoutSettings = TimeoutSettings;
});

// node_modules/playwright-core/lib/server/helper.js
var require_helper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.helper = undefined;
  var _debugLogger = require_debugLogger();
  var _eventsHelper = require_eventsHelper();
  var MAX_LOG_LENGTH = process.env.MAX_LOG_LENGTH ? +process.env.MAX_LOG_LENGTH : Infinity;

  class Helper {
    static completeUserURL(urlString) {
      if (urlString.startsWith("localhost") || urlString.startsWith("127.0.0.1"))
        urlString = "http://" + urlString;
      return urlString;
    }
    static enclosingIntRect(rect) {
      const x = Math.floor(rect.x + 0.001);
      const y = Math.floor(rect.y + 0.001);
      const x2 = Math.ceil(rect.x + rect.width - 0.001);
      const y2 = Math.ceil(rect.y + rect.height - 0.001);
      return {
        x,
        y,
        width: x2 - x,
        height: y2 - y
      };
    }
    static enclosingIntSize(size) {
      return {
        width: Math.floor(size.width + 0.001),
        height: Math.floor(size.height + 0.001)
      };
    }
    static getViewportSizeFromWindowFeatures(features) {
      const widthString = features.find((f) => f.startsWith("width="));
      const heightString = features.find((f) => f.startsWith("height="));
      const width = widthString ? parseInt(widthString.substring(6), 10) : NaN;
      const height = heightString ? parseInt(heightString.substring(7), 10) : NaN;
      if (!Number.isNaN(width) && !Number.isNaN(height))
        return {
          width,
          height
        };
      return null;
    }
    static waitForEvent(progress2, emitter, event, predicate) {
      const listeners = [];
      const promise = new Promise((resolve, reject) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(emitter, event, (eventArg) => {
          try {
            if (predicate && !predicate(eventArg))
              return;
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            resolve(eventArg);
          } catch (e) {
            _eventsHelper.eventsHelper.removeEventListeners(listeners);
            reject(e);
          }
        }));
      });
      const dispose = () => _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (progress2)
        progress2.cleanupWhenAborted(dispose);
      return {
        promise,
        dispose
      };
    }
    static secondsToRoundishMillis(value) {
      return (value * 1e6 | 0) / 1000;
    }
    static millisToRoundishMillis(value) {
      return (value * 1000 | 0) / 1000;
    }
    static debugProtocolLogger(protocolLogger) {
      return (direction, message) => {
        if (protocolLogger)
          protocolLogger(direction, message);
        if (_debugLogger.debugLogger.isEnabled("protocol")) {
          let text = JSON.stringify(message);
          if (text.length > MAX_LOG_LENGTH)
            text = text.substring(0, MAX_LOG_LENGTH / 2) + " <<<<<( LOG TRUNCATED )>>>>> " + text.substring(text.length - MAX_LOG_LENGTH / 2);
          _debugLogger.debugLogger.log("protocol", (direction === "send" ? "SEND ► " : "◀ RECV ") + text);
        }
      };
    }
    static formatBrowserLogs(logs, disconnectReason) {
      if (!disconnectReason && !logs.length)
        return "";
      return `
` + (disconnectReason ? disconnectReason + `
` : "") + logs.join(`
`);
    }
  }
  var helper = exports.helper = Helper;
});

// node_modules/playwright-core/lib/server/network.js
var require_network2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocket = exports.Route = exports.Response = exports.Request = undefined;
  exports.filterCookies = filterCookies;
  exports.kMaxCookieExpiresDateInSeconds = undefined;
  exports.mergeHeaders = mergeHeaders;
  exports.parsedURL = parsedURL;
  exports.rewriteCookies = rewriteCookies;
  exports.singleHeader = singleHeader;
  exports.statusText = statusText;
  exports.stripFragmentFromUrl = stripFragmentFromUrl;
  var _utils = require_utils();
  var _manualPromise = require_manualPromise();
  var _instrumentation = require_instrumentation();
  var _fetch = require_fetch();
  var _browserContext = require_browserContext();
  function filterCookies(cookies, urls) {
    const parsedURLs = urls.map((s) => new URL(s));
    return cookies.filter((c) => {
      if (!parsedURLs.length)
        return true;
      for (const parsedURL2 of parsedURLs) {
        let domain = c.domain;
        if (!domain.startsWith("."))
          domain = "." + domain;
        if (!("." + parsedURL2.hostname).endsWith(domain))
          continue;
        if (!parsedURL2.pathname.startsWith(c.path))
          continue;
        if (parsedURL2.protocol !== "https:" && parsedURL2.hostname !== "localhost" && c.secure)
          continue;
        return true;
      }
      return false;
    });
  }
  var kMaxCookieExpiresDateInSeconds = exports.kMaxCookieExpiresDateInSeconds = 253402300799;
  function rewriteCookies(cookies) {
    return cookies.map((c) => {
      (0, _utils.assert)(c.url || c.domain && c.path, "Cookie should have a url or a domain/path pair");
      (0, _utils.assert)(!(c.url && c.domain), "Cookie should have either url or domain");
      (0, _utils.assert)(!(c.url && c.path), "Cookie should have either url or path");
      (0, _utils.assert)(!(c.expires && c.expires < 0 && c.expires !== -1), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      (0, _utils.assert)(!(c.expires && c.expires > 0 && c.expires > kMaxCookieExpiresDateInSeconds), "Cookie should have a valid expires, only -1 or a positive number for the unix timestamp in seconds is allowed");
      const copy = {
        ...c
      };
      if (copy.url) {
        (0, _utils.assert)(copy.url !== "about:blank", `Blank page can not have cookie "${c.name}"`);
        (0, _utils.assert)(!copy.url.startsWith("data:"), `Data URL page can not have cookie "${c.name}"`);
        const url = new URL(copy.url);
        copy.domain = url.hostname;
        copy.path = url.pathname.substring(0, url.pathname.lastIndexOf("/") + 1);
        copy.secure = url.protocol === "https:";
      }
      return copy;
    });
  }
  function parsedURL(url) {
    try {
      return new URL(url);
    } catch (e) {
      return null;
    }
  }
  function stripFragmentFromUrl(url) {
    if (!url.includes("#"))
      return url;
    return url.substring(0, url.indexOf("#"));
  }

  class Request extends _instrumentation.SdkObject {
    constructor(context, frame, serviceWorker, redirectedFrom, documentId, url, resourceType, method, postData, headers) {
      super(frame || context, "request");
      this._response = null;
      this._redirectedFrom = undefined;
      this._redirectedTo = null;
      this._documentId = undefined;
      this._isFavicon = undefined;
      this._failureText = null;
      this._url = undefined;
      this._resourceType = undefined;
      this._method = undefined;
      this._postData = undefined;
      this._headers = undefined;
      this._headersMap = new Map;
      this._frame = null;
      this._serviceWorker = null;
      this._context = undefined;
      this._rawRequestHeadersPromise = new _manualPromise.ManualPromise;
      this._waitForResponsePromise = new _manualPromise.ManualPromise;
      this._responseEndTiming = -1;
      this._overrides = undefined;
      this._bodySize = undefined;
      (0, _utils.assert)(!url.startsWith("data:"), "Data urls should not fire requests");
      this._context = context;
      this._frame = frame;
      this._serviceWorker = serviceWorker;
      this._redirectedFrom = redirectedFrom;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      this._documentId = documentId;
      this._url = stripFragmentFromUrl(url);
      this._resourceType = resourceType;
      this._method = method;
      this._postData = postData;
      this._headers = headers;
      this._updateHeadersMap();
      this._isFavicon = url.endsWith("/favicon.ico") || !!(redirectedFrom !== null && redirectedFrom !== undefined && redirectedFrom._isFavicon);
    }
    _setFailureText(failureText) {
      this._failureText = failureText;
      this._waitForResponsePromise.resolve(null);
    }
    _setOverrides(overrides) {
      this._overrides = overrides;
      this._updateHeadersMap();
    }
    _updateHeadersMap() {
      for (const {
        name,
        value
      } of this.headers())
        this._headersMap.set(name.toLowerCase(), value);
    }
    _hasOverrides() {
      return !!this._overrides;
    }
    url() {
      var _this$_overrides;
      return ((_this$_overrides = this._overrides) === null || _this$_overrides === undefined ? undefined : _this$_overrides.url) || this._url;
    }
    resourceType() {
      return this._resourceType;
    }
    method() {
      var _this$_overrides2;
      return ((_this$_overrides2 = this._overrides) === null || _this$_overrides2 === undefined ? undefined : _this$_overrides2.method) || this._method;
    }
    postDataBuffer() {
      var _this$_overrides3;
      return ((_this$_overrides3 = this._overrides) === null || _this$_overrides3 === undefined ? undefined : _this$_overrides3.postData) || this._postData;
    }
    headers() {
      var _this$_overrides4;
      return ((_this$_overrides4 = this._overrides) === null || _this$_overrides4 === undefined ? undefined : _this$_overrides4.headers) || this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    setRawRequestHeaders(headers) {
      if (!this._rawRequestHeadersPromise.isDone())
        this._rawRequestHeadersPromise.resolve(headers || this._headers);
    }
    async rawRequestHeaders() {
      var _this$_overrides5;
      return ((_this$_overrides5 = this._overrides) === null || _this$_overrides5 === undefined ? undefined : _this$_overrides5.headers) || this._rawRequestHeadersPromise;
    }
    response() {
      return this._waitForResponsePromise;
    }
    _existingResponse() {
      return this._response;
    }
    _setResponse(response) {
      this._response = response;
      this._waitForResponsePromise.resolve(response);
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    frame() {
      return this._frame;
    }
    serviceWorker() {
      return this._serviceWorker;
    }
    isNavigationRequest() {
      return !!this._documentId;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    failure() {
      if (this._failureText === null)
        return null;
      return {
        errorText: this._failureText
      };
    }
    _setBodySize(size) {
      this._bodySize = size;
    }
    bodySize() {
      var _this$postDataBuffer;
      return this._bodySize || ((_this$postDataBuffer = this.postDataBuffer()) === null || _this$postDataBuffer === undefined ? undefined : _this$postDataBuffer.length) || 0;
    }
    async requestHeadersSize() {
      let headersSize = 4;
      headersSize += this.method().length;
      headersSize += new URL(this.url()).pathname.length;
      headersSize += 8;
      const headers = await this.rawRequestHeaders();
      for (const header of headers)
        headersSize += header.name.length + header.value.length + 4;
      return headersSize;
    }
  }
  exports.Request = Request;

  class Route extends _instrumentation.SdkObject {
    constructor(request, delegate) {
      super(request._frame || request._context, "route");
      this._request = undefined;
      this._delegate = undefined;
      this._handled = false;
      this._request = request;
      this._delegate = delegate;
      this._request._context.addRouteInFlight(this);
    }
    request() {
      return this._request;
    }
    async abort(errorCode = "failed") {
      this._startHandling();
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestAborted, this._request);
      await this._delegate.abort(errorCode);
      this._endHandling();
    }
    async redirectNavigationRequest(url) {
      this._startHandling();
      (0, _utils.assert)(this._request.isNavigationRequest());
      this._request.frame().redirectNavigation(url, this._request._documentId, this._request.headerValue("referer"));
    }
    async fulfill(overrides) {
      this._startHandling();
      let body = overrides.body;
      let isBase64 = overrides.isBase64 || false;
      if (body === undefined) {
        if (overrides.fetchResponseUid) {
          const buffer = this._request._context.fetchRequest.fetchResponses.get(overrides.fetchResponseUid) || _fetch.APIRequestContext.findResponseBody(overrides.fetchResponseUid);
          (0, _utils.assert)(buffer, "Fetch response has been disposed");
          body = buffer.toString("base64");
          isBase64 = true;
        } else {
          body = "";
          isBase64 = false;
        }
      }
      const headers = [...overrides.headers || []];
      this._maybeAddCorsHeaders(headers);
      this._request._context.emit(_browserContext.BrowserContext.Events.RequestFulfilled, this._request);
      await this._delegate.fulfill({
        status: overrides.status || 200,
        headers,
        body,
        isBase64
      });
      this._endHandling();
    }
    _maybeAddCorsHeaders(headers) {
      const origin = this._request.headerValue("origin");
      if (!origin)
        return;
      const requestUrl = new URL(this._request.url());
      if (!requestUrl.protocol.startsWith("http"))
        return;
      if (requestUrl.origin === origin.trim())
        return;
      const corsHeader = headers.find(({
        name
      }) => name === "access-control-allow-origin");
      if (corsHeader)
        return;
      headers.push({
        name: "access-control-allow-origin",
        value: origin
      });
      headers.push({
        name: "access-control-allow-credentials",
        value: "true"
      });
      headers.push({
        name: "vary",
        value: "Origin"
      });
    }
    async continue(overrides) {
      this._startHandling();
      if (overrides.url) {
        const newUrl = new URL(overrides.url);
        const oldUrl = new URL(this._request.url());
        if (oldUrl.protocol !== newUrl.protocol)
          throw new Error("New URL must have same protocol as overridden URL");
      }
      this._request._setOverrides(overrides);
      if (!overrides.isFallback)
        this._request._context.emit(_browserContext.BrowserContext.Events.RequestContinued, this._request);
      await this._delegate.continue(overrides);
      this._endHandling();
    }
    _startHandling() {
      (0, _utils.assert)(!this._handled, "Route is already handled!");
      this._handled = true;
    }
    _endHandling() {
      this._request._context.removeRouteInFlight(this);
    }
  }
  exports.Route = Route;

  class Response extends _instrumentation.SdkObject {
    constructor(request, status, statusText2, headers, timing, getResponseBodyCallback, fromServiceWorker, httpVersion) {
      super(request.frame() || request._context, "response");
      this._request = undefined;
      this._contentPromise = null;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._status = undefined;
      this._statusText = undefined;
      this._url = undefined;
      this._headers = undefined;
      this._headersMap = new Map;
      this._getResponseBodyCallback = undefined;
      this._timing = undefined;
      this._serverAddrPromise = new _manualPromise.ManualPromise;
      this._securityDetailsPromise = new _manualPromise.ManualPromise;
      this._rawResponseHeadersPromise = new _manualPromise.ManualPromise;
      this._httpVersion = undefined;
      this._fromServiceWorker = undefined;
      this._encodedBodySizePromise = new _manualPromise.ManualPromise;
      this._transferSizePromise = new _manualPromise.ManualPromise;
      this._responseHeadersSizePromise = new _manualPromise.ManualPromise;
      this._request = request;
      this._timing = timing;
      this._status = status;
      this._statusText = statusText2;
      this._url = request.url();
      this._headers = headers;
      for (const {
        name,
        value
      } of this._headers)
        this._headersMap.set(name.toLowerCase(), value);
      this._getResponseBodyCallback = getResponseBodyCallback;
      this._request._setResponse(this);
      this._httpVersion = httpVersion;
      this._fromServiceWorker = fromServiceWorker;
    }
    _serverAddrFinished(addr) {
      this._serverAddrPromise.resolve(addr);
    }
    _securityDetailsFinished(securityDetails) {
      this._securityDetailsPromise.resolve(securityDetails);
    }
    _requestFinished(responseEndTiming) {
      this._request._responseEndTiming = Math.max(responseEndTiming, this._timing.responseStart);
      if (this._timing.requestStart === -1)
        this._timing.requestStart = this._request._responseEndTiming;
      this._finishedPromise.resolve();
    }
    _setHttpVersion(httpVersion) {
      this._httpVersion = httpVersion;
    }
    url() {
      return this._url;
    }
    status() {
      return this._status;
    }
    statusText() {
      return this._statusText;
    }
    headers() {
      return this._headers;
    }
    headerValue(name) {
      return this._headersMap.get(name);
    }
    async rawResponseHeaders() {
      return this._rawResponseHeadersPromise;
    }
    setRawResponseHeaders(headers) {
      if (!this._rawResponseHeadersPromise.isDone())
        this._rawResponseHeadersPromise.resolve(headers || this._headers);
    }
    setTransferSize(size) {
      this._transferSizePromise.resolve(size);
    }
    setEncodedBodySize(size) {
      this._encodedBodySizePromise.resolve(size);
    }
    setResponseHeadersSize(size) {
      this._responseHeadersSizePromise.resolve(size);
    }
    timing() {
      return this._timing;
    }
    async serverAddr() {
      return await this._serverAddrPromise || null;
    }
    async securityDetails() {
      return await this._securityDetailsPromise || null;
    }
    body() {
      if (!this._contentPromise) {
        this._contentPromise = this._finishedPromise.then(async () => {
          if (this._status >= 300 && this._status <= 399)
            throw new Error("Response body is unavailable for redirect responses");
          return this._getResponseBodyCallback();
        });
      }
      return this._contentPromise;
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    httpVersion() {
      if (!this._httpVersion)
        return "HTTP/1.1";
      if (this._httpVersion === "http/1.1")
        return "HTTP/1.1";
      if (this._httpVersion === "h2")
        return "HTTP/2.0";
      return this._httpVersion;
    }
    fromServiceWorker() {
      return this._fromServiceWorker;
    }
    async responseHeadersSize() {
      const availableSize = await this._responseHeadersSizePromise;
      if (availableSize !== null)
        return availableSize;
      let headersSize = 4;
      headersSize += 8;
      headersSize += 3;
      headersSize += this.statusText().length;
      const headers = await this._rawResponseHeadersPromise;
      for (const header of headers)
        headersSize += header.name.length + header.value.length + 4;
      headersSize += 2;
      return headersSize;
    }
    async sizes() {
      const requestHeadersSize = await this._request.requestHeadersSize();
      const responseHeadersSize = await this.responseHeadersSize();
      let encodedBodySize = await this._encodedBodySizePromise;
      if (encodedBodySize === null) {
        var _headers$find;
        const headers = await this._rawResponseHeadersPromise;
        const contentLength = (_headers$find = headers.find((h) => h.name.toLowerCase() === "content-length")) === null || _headers$find === undefined ? undefined : _headers$find.value;
        encodedBodySize = contentLength ? +contentLength : 0;
      }
      let transferSize = await this._transferSizePromise;
      if (transferSize === null) {
        transferSize = responseHeadersSize + encodedBodySize;
      }
      return {
        requestBodySize: this._request.bodySize(),
        requestHeadersSize,
        responseBodySize: encodedBodySize,
        responseHeadersSize,
        transferSize
      };
    }
  }
  exports.Response = Response;

  class WebSocket extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "ws");
      this._url = undefined;
      this._notified = false;
      this._url = url;
    }
    markAsNotified() {
      if (this._notified)
        return false;
      this._notified = true;
      return true;
    }
    url() {
      return this._url;
    }
    frameSent(opcode, data) {
      this.emit(WebSocket.Events.FrameSent, {
        opcode,
        data
      });
    }
    frameReceived(opcode, data) {
      this.emit(WebSocket.Events.FrameReceived, {
        opcode,
        data
      });
    }
    error(errorMessage) {
      this.emit(WebSocket.Events.SocketError, errorMessage);
    }
    closed() {
      this.emit(WebSocket.Events.Close);
    }
  }
  exports.WebSocket = WebSocket;
  WebSocket.Events = {
    Close: "close",
    SocketError: "socketerror",
    FrameReceived: "framereceived",
    FrameSent: "framesent"
  };
  var STATUS_TEXTS = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "Switch Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Too Early",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
  function statusText(status) {
    return STATUS_TEXTS[String(status)] || "Unknown";
  }
  function singleHeader(name, value) {
    return [{
      name,
      value
    }];
  }
  function mergeHeaders(headers) {
    const lowerCaseToValue = new Map;
    const lowerCaseToOriginalCase = new Map;
    for (const h of headers) {
      if (!h)
        continue;
      for (const {
        name,
        value
      } of h) {
        const lower = name.toLowerCase();
        lowerCaseToOriginalCase.set(lower, name);
        lowerCaseToValue.set(lower, value);
      }
    }
    const result = [];
    for (const [lower, value] of lowerCaseToValue)
      result.push({
        name: lowerCaseToOriginalCase.get(lower),
        value
      });
    return result;
  }
});

// node_modules/playwright-core/lib/generated/injectedScriptSource.js
var require_injectedScriptSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/injectedScript.ts
var injectedScript_exports = {};
__export(injectedScript_exports, {
  InjectedScript: () => InjectedScript
});
module.exports = __toCommonJS(injectedScript_exports);

// packages/playwright-core/src/server/injected/xpathSelectorEngine.ts
var XPathEngine = {
  queryAll(root, selector) {
    if (selector.startsWith("/") && root.nodeType !== Node.DOCUMENT_NODE)
      selector = "." + selector;
    const result = [];
    const document = root.ownerDocument || root;
    if (!document)
      return result;
    const it = document.evaluate(selector, root, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE);
    for (let node = it.iterateNext(); node; node = it.iterateNext()) {
      if (node.nodeType === Node.ELEMENT_NODE)
        result.push(node);
    }
    return result;
  }
};

// packages/playwright-core/src/server/injected/domUtils.ts
var browserNameForWorkarounds = "";
function setBrowserName(name) {
  browserNameForWorkarounds = name;
}
function isInsideScope(scope, element) {
  while (element) {
    if (scope.contains(element))
      return true;
    element = enclosingShadowHost(element);
  }
  return false;
}
function parentElementOrShadowHost(element) {
  if (element.parentElement)
    return element.parentElement;
  if (!element.parentNode)
    return;
  if (element.parentNode.nodeType === 11 && element.parentNode.host)
    return element.parentNode.host;
}
function enclosingShadowRootOrDocument(element) {
  let node = element;
  while (node.parentNode)
    node = node.parentNode;
  if (node.nodeType === 11 || node.nodeType === 9)
    return node;
}
function enclosingShadowHost(element) {
  while (element.parentElement)
    element = element.parentElement;
  return parentElementOrShadowHost(element);
}
function closestCrossShadow(element, css, scope) {
  while (element) {
    const closest = element.closest(css);
    if (scope && closest !== scope && (closest == null ? void 0 : closest.contains(scope)))
      return;
    if (closest)
      return closest;
    element = enclosingShadowHost(element);
  }
}
function getElementComputedStyle(element, pseudo) {
  return element.ownerDocument && element.ownerDocument.defaultView ? element.ownerDocument.defaultView.getComputedStyle(element, pseudo) : void 0;
}
function isElementStyleVisibilityVisible(element, style) {
  style = style != null ? style : getElementComputedStyle(element);
  if (!style)
    return true;
  if (Element.prototype.checkVisibility && browserNameForWorkarounds !== "webkit") {
    if (!element.checkVisibility())
      return false;
  } else {
    const detailsOrSummary = element.closest("details,summary");
    if (detailsOrSummary !== element && (detailsOrSummary == null ? void 0 : detailsOrSummary.nodeName) === "DETAILS" && !detailsOrSummary.open)
      return false;
  }
  if (style.visibility !== "visible")
    return false;
  return true;
}
function isElementVisible(element) {
  const style = getElementComputedStyle(element);
  if (!style)
    return true;
  if (style.display === "contents") {
    for (let child = element.firstChild; child; child = child.nextSibling) {
      if (child.nodeType === 1 && isElementVisible(child))
        return true;
      if (child.nodeType === 3 && isVisibleTextNode(child))
        return true;
    }
    return false;
  }
  if (!isElementStyleVisibilityVisible(element, style))
    return false;
  const rect = element.getBoundingClientRect();
  return rect.width > 0 && rect.height > 0;
}
function isVisibleTextNode(node) {
  const range = node.ownerDocument.createRange();
  range.selectNode(node);
  const rect = range.getBoundingClientRect();
  return rect.width > 0 && rect.height > 0;
}
function elementSafeTagName(element) {
  if (element instanceof HTMLFormElement)
    return "FORM";
  return element.tagName.toUpperCase();
}

// packages/playwright-core/src/utils/isomorphic/stringUtils.ts
function escapeWithQuotes(text, char = "'") {
  const stringified = JSON.stringify(text);
  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, '"');
  if (char === "'")
    return char + escapedText.replace(/[']/g, "\\\\'") + char;
  if (char === '"')
    return char + escapedText.replace(/["]/g, '\\\\"') + char;
  if (char === "\`")
    return char + escapedText.replace(/[\`]/g, "\`") + char;
  throw new Error("Invalid escape char");
}
function toTitleCase(name) {
  return name.charAt(0).toUpperCase() + name.substring(1);
}
function toSnakeCase(name) {
  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
}
function cssEscape(s) {
  let result = "";
  for (let i = 0; i < s.length; i++)
    result += cssEscapeOne(s, i);
  return result;
}
function quoteCSSAttributeValue(text) {
  return \`"\${cssEscape(text).replace(/\\\\ /g, " ")}"\`;
}
function cssEscapeOne(s, i) {
  const c = s.charCodeAt(i);
  if (c === 0)
    return "\\uFFFD";
  if (c >= 1 && c <= 31 || c >= 48 && c <= 57 && (i === 0 || i === 1 && s.charCodeAt(0) === 45))
    return "\\\\" + c.toString(16) + " ";
  if (i === 0 && c === 45 && s.length === 1)
    return "\\\\" + s.charAt(i);
  if (c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122)
    return s.charAt(i);
  return "\\\\" + s.charAt(i);
}
var normalizedWhitespaceCache;
function cacheNormalizedWhitespaces() {
  normalizedWhitespaceCache = /* @__PURE__ */ new Map();
}
function normalizeWhiteSpace(text) {
  let result = normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.get(text);
  if (result === void 0) {
    result = text.replace(/\\u200b/g, "").trim().replace(/\\s+/g, " ");
    normalizedWhitespaceCache == null ? void 0 : normalizedWhitespaceCache.set(text, result);
  }
  return result;
}
function normalizeEscapedRegexQuotes(source) {
  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['"\`])/g, "$1$2$3");
}
function escapeRegexForSelector(re) {
  if (re.unicode || re.unicodeSets)
    return String(re);
  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["'\`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");
}
function escapeForTextSelector(text, exact) {
  if (typeof text !== "string")
    return escapeRegexForSelector(text);
  return \`\${JSON.stringify(text)}\${exact ? "s" : "i"}\`;
}
function escapeForAttributeSelector(value, exact) {
  if (typeof value !== "string")
    return escapeRegexForSelector(value);
  return \`"\${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, '\\\\"')}"\${exact ? "s" : "i"}\`;
}
function trimString(input, cap, suffix = "") {
  if (input.length <= cap)
    return input;
  const chars = [...input];
  if (chars.length > cap)
    return chars.slice(0, cap - suffix.length).join("") + suffix;
  return chars.join("");
}
function trimStringWithEllipsis(input, cap) {
  return trimString(input, cap, "\\u2026");
}
function escapeRegExp(s) {
  return s.replace(/[.*+?^\${}()|[\\]\\\\]/g, "\\\\$&");
}
function longestCommonSubstring(s1, s2) {
  const n = s1.length;
  const m = s2.length;
  let maxLen = 0;
  let endingIndex = 0;
  const dp = Array(n + 1).fill(null).map(() => Array(m + 1).fill(0));
  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= m; j++) {
      if (s1[i - 1] === s2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
        if (dp[i][j] > maxLen) {
          maxLen = dp[i][j];
          endingIndex = i;
        }
      }
    }
  }
  return s1.slice(endingIndex - maxLen, endingIndex);
}

// packages/playwright-core/src/server/injected/roleUtils.ts
function hasExplicitAccessibleName(e) {
  return e.hasAttribute("aria-label") || e.hasAttribute("aria-labelledby");
}
var kAncestorPreventingLandmark = "article:not([role]), aside:not([role]), main:not([role]), nav:not([role]), section:not([role]), [role=article], [role=complementary], [role=main], [role=navigation], [role=region]";
var kGlobalAriaAttributes = /* @__PURE__ */ new Map([
  ["aria-atomic", void 0],
  ["aria-busy", void 0],
  ["aria-controls", void 0],
  ["aria-current", void 0],
  ["aria-describedby", void 0],
  ["aria-details", void 0],
  // Global use deprecated in ARIA 1.2
  // ['aria-disabled', undefined],
  ["aria-dropeffect", void 0],
  // Global use deprecated in ARIA 1.2
  // ['aria-errormessage', undefined],
  ["aria-flowto", void 0],
  ["aria-grabbed", void 0],
  // Global use deprecated in ARIA 1.2
  // ['aria-haspopup', undefined],
  ["aria-hidden", void 0],
  // Global use deprecated in ARIA 1.2
  // ['aria-invalid', undefined],
  ["aria-keyshortcuts", void 0],
  ["aria-label", /* @__PURE__ */ new Set(["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"])],
  ["aria-labelledby", /* @__PURE__ */ new Set(["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"])],
  ["aria-live", void 0],
  ["aria-owns", void 0],
  ["aria-relevant", void 0],
  ["aria-roledescription", /* @__PURE__ */ new Set(["generic"])]
]);
function hasGlobalAriaAttribute(element, forRole) {
  return [...kGlobalAriaAttributes].some(([attr, prohibited]) => {
    return !(prohibited == null ? void 0 : prohibited.has(forRole || "")) && element.hasAttribute(attr);
  });
}
function hasTabIndex(element) {
  return !Number.isNaN(Number(String(element.getAttribute("tabindex"))));
}
function isFocusable(element) {
  return !isNativelyDisabled(element) && (isNativelyFocusable(element) || hasTabIndex(element));
}
function isNativelyFocusable(element) {
  const tagName = elementSafeTagName(element);
  if (["BUTTON", "DETAILS", "SELECT", "TEXTAREA"].includes(tagName))
    return true;
  if (tagName === "A" || tagName === "AREA")
    return element.hasAttribute("href");
  if (tagName === "INPUT")
    return !element.hidden;
  return false;
}
var kImplicitRoleByTagName = {
  "A": (e) => {
    return e.hasAttribute("href") ? "link" : null;
  },
  "AREA": (e) => {
    return e.hasAttribute("href") ? "link" : null;
  },
  "ARTICLE": () => "article",
  "ASIDE": () => "complementary",
  "BLOCKQUOTE": () => "blockquote",
  "BUTTON": () => "button",
  "CAPTION": () => "caption",
  "CODE": () => "code",
  "DATALIST": () => "listbox",
  "DD": () => "definition",
  "DEL": () => "deletion",
  "DETAILS": () => "group",
  "DFN": () => "term",
  "DIALOG": () => "dialog",
  "DT": () => "term",
  "EM": () => "emphasis",
  "FIELDSET": () => "group",
  "FIGURE": () => "figure",
  "FOOTER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "contentinfo",
  "FORM": (e) => hasExplicitAccessibleName(e) ? "form" : null,
  "H1": () => "heading",
  "H2": () => "heading",
  "H3": () => "heading",
  "H4": () => "heading",
  "H5": () => "heading",
  "H6": () => "heading",
  "HEADER": (e) => closestCrossShadow(e, kAncestorPreventingLandmark) ? null : "banner",
  "HR": () => "separator",
  "HTML": () => "document",
  "IMG": (e) => e.getAttribute("alt") === "" && !e.getAttribute("title") && !hasGlobalAriaAttribute(e) && !hasTabIndex(e) ? "presentation" : "img",
  "INPUT": (e) => {
    const type = e.type.toLowerCase();
    if (type === "search")
      return e.hasAttribute("list") ? "combobox" : "searchbox";
    if (["email", "tel", "text", "url", ""].includes(type)) {
      const list = getIdRefs(e, e.getAttribute("list"))[0];
      return list && elementSafeTagName(list) === "DATALIST" ? "combobox" : "textbox";
    }
    if (type === "hidden")
      return null;
    return inputTypeToRole[type] || "textbox";
  },
  "INS": () => "insertion",
  "LI": () => "listitem",
  "MAIN": () => "main",
  "MARK": () => "mark",
  "MATH": () => "math",
  "MENU": () => "list",
  "METER": () => "meter",
  "NAV": () => "navigation",
  "OL": () => "list",
  "OPTGROUP": () => "group",
  "OPTION": () => "option",
  "OUTPUT": () => "status",
  "P": () => "paragraph",
  "PROGRESS": () => "progressbar",
  "SECTION": (e) => hasExplicitAccessibleName(e) ? "region" : null,
  "SELECT": (e) => e.hasAttribute("multiple") || e.size > 1 ? "listbox" : "combobox",
  "STRONG": () => "strong",
  "SUB": () => "subscript",
  "SUP": () => "superscript",
  // For <svg> we default to Chrome behavior:
  // - Chrome reports 'img'.
  // - Firefox reports 'diagram' that is not in official ARIA spec yet.
  // - Safari reports 'no role', but still computes accessible name.
  "SVG": () => "img",
  "TABLE": () => "table",
  "TBODY": () => "rowgroup",
  "TD": (e) => {
    const table = closestCrossShadow(e, "table");
    const role = table ? getExplicitAriaRole(table) : "";
    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";
  },
  "TEXTAREA": () => "textbox",
  "TFOOT": () => "rowgroup",
  "TH": (e) => {
    if (e.getAttribute("scope") === "col")
      return "columnheader";
    if (e.getAttribute("scope") === "row")
      return "rowheader";
    const table = closestCrossShadow(e, "table");
    const role = table ? getExplicitAriaRole(table) : "";
    return role === "grid" || role === "treegrid" ? "gridcell" : "cell";
  },
  "THEAD": () => "rowgroup",
  "TIME": () => "time",
  "TR": () => "row",
  "UL": () => "list"
};
var kPresentationInheritanceParents = {
  "DD": ["DL", "DIV"],
  "DIV": ["DL"],
  "DT": ["DL", "DIV"],
  "LI": ["OL", "UL"],
  "TBODY": ["TABLE"],
  "TD": ["TR"],
  "TFOOT": ["TABLE"],
  "TH": ["TR"],
  "THEAD": ["TABLE"],
  "TR": ["THEAD", "TBODY", "TFOOT", "TABLE"]
};
function getImplicitAriaRole(element) {
  var _a;
  const implicitRole = ((_a = kImplicitRoleByTagName[elementSafeTagName(element)]) == null ? void 0 : _a.call(kImplicitRoleByTagName, element)) || "";
  if (!implicitRole)
    return null;
  let ancestor = element;
  while (ancestor) {
    const parent = parentElementOrShadowHost(ancestor);
    const parents = kPresentationInheritanceParents[elementSafeTagName(ancestor)];
    if (!parents || !parent || !parents.includes(elementSafeTagName(parent)))
      break;
    const parentExplicitRole = getExplicitAriaRole(parent);
    if ((parentExplicitRole === "none" || parentExplicitRole === "presentation") && !hasPresentationConflictResolution(parent, parentExplicitRole))
      return parentExplicitRole;
    ancestor = parent;
  }
  return implicitRole;
}
var validRoles = [
  "alert",
  "alertdialog",
  "application",
  "article",
  "banner",
  "blockquote",
  "button",
  "caption",
  "cell",
  "checkbox",
  "code",
  "columnheader",
  "combobox",
  "complementary",
  "contentinfo",
  "definition",
  "deletion",
  "dialog",
  "directory",
  "document",
  "emphasis",
  "feed",
  "figure",
  "form",
  "generic",
  "grid",
  "gridcell",
  "group",
  "heading",
  "img",
  "insertion",
  "link",
  "list",
  "listbox",
  "listitem",
  "log",
  "main",
  "mark",
  "marquee",
  "math",
  "meter",
  "menu",
  "menubar",
  "menuitem",
  "menuitemcheckbox",
  "menuitemradio",
  "navigation",
  "none",
  "note",
  "option",
  "paragraph",
  "presentation",
  "progressbar",
  "radio",
  "radiogroup",
  "region",
  "row",
  "rowgroup",
  "rowheader",
  "scrollbar",
  "search",
  "searchbox",
  "separator",
  "slider",
  "spinbutton",
  "status",
  "strong",
  "subscript",
  "superscript",
  "switch",
  "tab",
  "table",
  "tablist",
  "tabpanel",
  "term",
  "textbox",
  "time",
  "timer",
  "toolbar",
  "tooltip",
  "tree",
  "treegrid",
  "treeitem"
];
function getExplicitAriaRole(element) {
  const roles = (element.getAttribute("role") || "").split(" ").map((role) => role.trim());
  return roles.find((role) => validRoles.includes(role)) || null;
}
function hasPresentationConflictResolution(element, role) {
  return hasGlobalAriaAttribute(element, role) || isFocusable(element);
}
function getAriaRole(element) {
  const explicitRole = getExplicitAriaRole(element);
  if (!explicitRole)
    return getImplicitAriaRole(element);
  if (explicitRole === "none" || explicitRole === "presentation") {
    const implicitRole = getImplicitAriaRole(element);
    if (hasPresentationConflictResolution(element, implicitRole))
      return implicitRole;
  }
  return explicitRole;
}
function getAriaBoolean(attr) {
  return attr === null ? void 0 : attr.toLowerCase() === "true";
}
function isElementIgnoredForAria(element) {
  return ["STYLE", "SCRIPT", "NOSCRIPT", "TEMPLATE"].includes(elementSafeTagName(element));
}
function isElementHiddenForAria(element) {
  if (isElementIgnoredForAria(element))
    return true;
  const style = getElementComputedStyle(element);
  const isSlot = element.nodeName === "SLOT";
  if ((style == null ? void 0 : style.display) === "contents" && !isSlot) {
    for (let child = element.firstChild; child; child = child.nextSibling) {
      if (child.nodeType === 1 && !isElementHiddenForAria(child))
        return false;
      if (child.nodeType === 3 && isVisibleTextNode(child))
        return false;
    }
    return true;
  }
  const isOptionInsideSelect = element.nodeName === "OPTION" && !!element.closest("select");
  if (!isOptionInsideSelect && !isSlot && !isElementStyleVisibilityVisible(element, style))
    return true;
  return belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element);
}
function belongsToDisplayNoneOrAriaHiddenOrNonSlotted(element) {
  let hidden = cacheIsHidden == null ? void 0 : cacheIsHidden.get(element);
  if (hidden === void 0) {
    hidden = false;
    if (element.parentElement && element.parentElement.shadowRoot && !element.assignedSlot)
      hidden = true;
    if (!hidden) {
      const style = getElementComputedStyle(element);
      hidden = !style || style.display === "none" || getAriaBoolean(element.getAttribute("aria-hidden")) === true;
    }
    if (!hidden) {
      const parent = parentElementOrShadowHost(element);
      if (parent)
        hidden = belongsToDisplayNoneOrAriaHiddenOrNonSlotted(parent);
    }
    cacheIsHidden == null ? void 0 : cacheIsHidden.set(element, hidden);
  }
  return hidden;
}
function getIdRefs(element, ref) {
  if (!ref)
    return [];
  const root = enclosingShadowRootOrDocument(element);
  if (!root)
    return [];
  try {
    const ids = ref.split(" ").filter((id) => !!id);
    const set = /* @__PURE__ */ new Set();
    for (const id of ids) {
      const firstElement = root.querySelector("#" + CSS.escape(id));
      if (firstElement)
        set.add(firstElement);
    }
    return [...set];
  } catch (e) {
    return [];
  }
}
function trimFlatString(s) {
  return s.trim();
}
function asFlatString(s) {
  return s.split("\\xA0").map((chunk) => chunk.replace(/\\r\\n/g, "\\n").replace(/\\s\\s*/g, " ")).join("\\xA0").trim();
}
function queryInAriaOwned(element, selector) {
  const result = [...element.querySelectorAll(selector)];
  for (const owned of getIdRefs(element, element.getAttribute("aria-owns"))) {
    if (owned.matches(selector))
      result.push(owned);
    result.push(...owned.querySelectorAll(selector));
  }
  return result;
}
function getPseudoContent(element, pseudo) {
  const cache = pseudo === "::before" ? cachePseudoContentBefore : cachePseudoContentAfter;
  if (cache == null ? void 0 : cache.has(element))
    return (cache == null ? void 0 : cache.get(element)) || "";
  const pseudoStyle = getElementComputedStyle(element, pseudo);
  const content = getPseudoContentImpl(pseudoStyle);
  if (cache)
    cache.set(element, content);
  return content;
}
function getPseudoContentImpl(pseudoStyle) {
  if (!pseudoStyle || pseudoStyle.display === "none" || pseudoStyle.visibility === "hidden")
    return "";
  const content = pseudoStyle.content;
  if (content[0] === "'" && content[content.length - 1] === "'" || content[0] === '"' && content[content.length - 1] === '"') {
    const unquoted = content.substring(1, content.length - 1);
    const display = pseudoStyle.display || "inline";
    if (display !== "inline")
      return " " + unquoted + " ";
    return unquoted;
  }
  return "";
}
function getAriaLabelledByElements(element) {
  const ref = element.getAttribute("aria-labelledby");
  if (ref === null)
    return null;
  const refs = getIdRefs(element, ref);
  return refs.length ? refs : null;
}
function allowsNameFromContent(role, targetDescendant) {
  const alwaysAllowsNameFromContent = ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"].includes(role);
  const descendantAllowsNameFromContent = targetDescendant && ["", "caption", "code", "contentinfo", "definition", "deletion", "emphasis", "insertion", "list", "listitem", "mark", "none", "paragraph", "presentation", "region", "row", "rowgroup", "section", "strong", "subscript", "superscript", "table", "term", "time"].includes(role);
  return alwaysAllowsNameFromContent || descendantAllowsNameFromContent;
}
function getElementAccessibleName(element, includeHidden) {
  const cache = includeHidden ? cacheAccessibleNameHidden : cacheAccessibleName;
  let accessibleName = cache == null ? void 0 : cache.get(element);
  if (accessibleName === void 0) {
    accessibleName = "";
    const elementProhibitsNaming = ["caption", "code", "definition", "deletion", "emphasis", "generic", "insertion", "mark", "paragraph", "presentation", "strong", "subscript", "suggestion", "superscript", "term", "time"].includes(getAriaRole(element) || "");
    if (!elementProhibitsNaming) {
      accessibleName = asFlatString(getTextAlternativeInternal(element, {
        includeHidden,
        visitedElements: /* @__PURE__ */ new Set(),
        embeddedInTargetElement: "self"
      }));
    }
    cache == null ? void 0 : cache.set(element, accessibleName);
  }
  return accessibleName;
}
function getElementAccessibleDescription(element, includeHidden) {
  const cache = includeHidden ? cacheAccessibleDescriptionHidden : cacheAccessibleDescription;
  let accessibleDescription = cache == null ? void 0 : cache.get(element);
  if (accessibleDescription === void 0) {
    accessibleDescription = "";
    if (element.hasAttribute("aria-describedby")) {
      const describedBy = getIdRefs(element, element.getAttribute("aria-describedby"));
      accessibleDescription = asFlatString(describedBy.map((ref) => getTextAlternativeInternal(ref, {
        includeHidden,
        visitedElements: /* @__PURE__ */ new Set(),
        embeddedInDescribedBy: { element: ref, hidden: isElementHiddenForAria(ref) }
      })).join(" "));
    } else if (element.hasAttribute("aria-description")) {
      accessibleDescription = asFlatString(element.getAttribute("aria-description") || "");
    } else {
      accessibleDescription = asFlatString(element.getAttribute("title") || "");
    }
    cache == null ? void 0 : cache.set(element, accessibleDescription);
  }
  return accessibleDescription;
}
function getTextAlternativeInternal(element, options) {
  var _a, _b, _c, _d;
  if (options.visitedElements.has(element))
    return "";
  const childOptions = {
    ...options,
    embeddedInTargetElement: options.embeddedInTargetElement === "self" ? "descendant" : options.embeddedInTargetElement
  };
  if (!options.includeHidden) {
    const isEmbeddedInHiddenReferenceTraversal = !!((_a = options.embeddedInLabelledBy) == null ? void 0 : _a.hidden) || !!((_b = options.embeddedInDescribedBy) == null ? void 0 : _b.hidden) || !!((_c = options.embeddedInNativeTextAlternative) == null ? void 0 : _c.hidden) || !!((_d = options.embeddedInLabel) == null ? void 0 : _d.hidden);
    if (isElementIgnoredForAria(element) || !isEmbeddedInHiddenReferenceTraversal && isElementHiddenForAria(element)) {
      options.visitedElements.add(element);
      return "";
    }
  }
  const labelledBy = getAriaLabelledByElements(element);
  if (!options.embeddedInLabelledBy) {
    const accessibleName = (labelledBy || []).map((ref) => getTextAlternativeInternal(ref, {
      ...options,
      embeddedInLabelledBy: { element: ref, hidden: isElementHiddenForAria(ref) },
      embeddedInDescribedBy: void 0,
      embeddedInTargetElement: void 0,
      embeddedInLabel: void 0,
      embeddedInNativeTextAlternative: void 0
    })).join(" ");
    if (accessibleName)
      return accessibleName;
  }
  const role = getAriaRole(element) || "";
  const tagName = elementSafeTagName(element);
  if (!!options.embeddedInLabel || !!options.embeddedInLabelledBy || options.embeddedInTargetElement === "descendant") {
    const isOwnLabel = [...element.labels || []].includes(element);
    const isOwnLabelledBy = (labelledBy || []).includes(element);
    if (!isOwnLabel && !isOwnLabelledBy) {
      if (role === "textbox") {
        options.visitedElements.add(element);
        if (tagName === "INPUT" || tagName === "TEXTAREA")
          return element.value;
        return element.textContent || "";
      }
      if (["combobox", "listbox"].includes(role)) {
        options.visitedElements.add(element);
        let selectedOptions;
        if (tagName === "SELECT") {
          selectedOptions = [...element.selectedOptions];
          if (!selectedOptions.length && element.options.length)
            selectedOptions.push(element.options[0]);
        } else {
          const listbox = role === "combobox" ? queryInAriaOwned(element, "*").find((e) => getAriaRole(e) === "listbox") : element;
          selectedOptions = listbox ? queryInAriaOwned(listbox, '[aria-selected="true"]').filter((e) => getAriaRole(e) === "option") : [];
        }
        if (!selectedOptions.length && tagName === "INPUT") {
          return element.value;
        }
        return selectedOptions.map((option) => getTextAlternativeInternal(option, childOptions)).join(" ");
      }
      if (["progressbar", "scrollbar", "slider", "spinbutton", "meter"].includes(role)) {
        options.visitedElements.add(element);
        if (element.hasAttribute("aria-valuetext"))
          return element.getAttribute("aria-valuetext") || "";
        if (element.hasAttribute("aria-valuenow"))
          return element.getAttribute("aria-valuenow") || "";
        return element.getAttribute("value") || "";
      }
      if (["menu"].includes(role)) {
        options.visitedElements.add(element);
        return "";
      }
    }
  }
  const ariaLabel = element.getAttribute("aria-label") || "";
  if (trimFlatString(ariaLabel)) {
    options.visitedElements.add(element);
    return ariaLabel;
  }
  if (!["presentation", "none"].includes(role)) {
    if (tagName === "INPUT" && ["button", "submit", "reset"].includes(element.type)) {
      options.visitedElements.add(element);
      const value = element.value || "";
      if (trimFlatString(value))
        return value;
      if (element.type === "submit")
        return "Submit";
      if (element.type === "reset")
        return "Reset";
      const title = element.getAttribute("title") || "";
      return title;
    }
    if (tagName === "INPUT" && element.type === "image") {
      options.visitedElements.add(element);
      const labels = element.labels || [];
      if (labels.length && !options.embeddedInLabelledBy)
        return getAccessibleNameFromAssociatedLabels(labels, options);
      const alt = element.getAttribute("alt") || "";
      if (trimFlatString(alt))
        return alt;
      const title = element.getAttribute("title") || "";
      if (trimFlatString(title))
        return title;
      return "Submit";
    }
    if (!labelledBy && tagName === "BUTTON") {
      options.visitedElements.add(element);
      const labels = element.labels || [];
      if (labels.length)
        return getAccessibleNameFromAssociatedLabels(labels, options);
    }
    if (!labelledBy && tagName === "OUTPUT") {
      options.visitedElements.add(element);
      const labels = element.labels || [];
      if (labels.length)
        return getAccessibleNameFromAssociatedLabels(labels, options);
      return element.getAttribute("title") || "";
    }
    if (!labelledBy && (tagName === "TEXTAREA" || tagName === "SELECT" || tagName === "INPUT")) {
      options.visitedElements.add(element);
      const labels = element.labels || [];
      if (labels.length)
        return getAccessibleNameFromAssociatedLabels(labels, options);
      const usePlaceholder = tagName === "INPUT" && ["text", "password", "search", "tel", "email", "url"].includes(element.type) || tagName === "TEXTAREA";
      const placeholder = element.getAttribute("placeholder") || "";
      const title = element.getAttribute("title") || "";
      if (!usePlaceholder || title)
        return title;
      return placeholder;
    }
    if (!labelledBy && tagName === "FIELDSET") {
      options.visitedElements.add(element);
      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {
        if (elementSafeTagName(child) === "LEGEND") {
          return getTextAlternativeInternal(child, {
            ...childOptions,
            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }
          });
        }
      }
      const title = element.getAttribute("title") || "";
      return title;
    }
    if (!labelledBy && tagName === "FIGURE") {
      options.visitedElements.add(element);
      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {
        if (elementSafeTagName(child) === "FIGCAPTION") {
          return getTextAlternativeInternal(child, {
            ...childOptions,
            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }
          });
        }
      }
      const title = element.getAttribute("title") || "";
      return title;
    }
    if (tagName === "IMG") {
      options.visitedElements.add(element);
      const alt = element.getAttribute("alt") || "";
      if (trimFlatString(alt))
        return alt;
      const title = element.getAttribute("title") || "";
      return title;
    }
    if (tagName === "TABLE") {
      options.visitedElements.add(element);
      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {
        if (elementSafeTagName(child) === "CAPTION") {
          return getTextAlternativeInternal(child, {
            ...childOptions,
            embeddedInNativeTextAlternative: { element: child, hidden: isElementHiddenForAria(child) }
          });
        }
      }
      const summary = element.getAttribute("summary") || "";
      if (summary)
        return summary;
    }
    if (tagName === "AREA") {
      options.visitedElements.add(element);
      const alt = element.getAttribute("alt") || "";
      if (trimFlatString(alt))
        return alt;
      const title = element.getAttribute("title") || "";
      return title;
    }
    if (tagName === "SVG" || element.ownerSVGElement) {
      options.visitedElements.add(element);
      for (let child = element.firstElementChild; child; child = child.nextElementSibling) {
        if (elementSafeTagName(child) === "TITLE" && child.ownerSVGElement) {
          return getTextAlternativeInternal(child, {
            ...childOptions,
            embeddedInLabelledBy: { element: child, hidden: isElementHiddenForAria(child) }
          });
        }
      }
    }
    if (element.ownerSVGElement && tagName === "A") {
      const title = element.getAttribute("xlink:title") || "";
      if (trimFlatString(title)) {
        options.visitedElements.add(element);
        return title;
      }
    }
  }
  const shouldNameFromContentForSummary = tagName === "SUMMARY" && !["presentation", "none"].includes(role);
  if (allowsNameFromContent(role, options.embeddedInTargetElement === "descendant") || shouldNameFromContentForSummary || !!options.embeddedInLabelledBy || !!options.embeddedInDescribedBy || !!options.embeddedInLabel || !!options.embeddedInNativeTextAlternative) {
    options.visitedElements.add(element);
    const accessibleName = innerAccumulatedElementText(element, childOptions);
    const maybeTrimmedAccessibleName = options.embeddedInTargetElement === "self" ? trimFlatString(accessibleName) : accessibleName;
    if (maybeTrimmedAccessibleName)
      return accessibleName;
  }
  if (!["presentation", "none"].includes(role) || tagName === "IFRAME") {
    options.visitedElements.add(element);
    const title = element.getAttribute("title") || "";
    if (trimFlatString(title))
      return title;
  }
  options.visitedElements.add(element);
  return "";
}
function innerAccumulatedElementText(element, options) {
  const tokens = [];
  const visit = (node, skipSlotted) => {
    var _a;
    if (skipSlotted && node.assignedSlot)
      return;
    if (node.nodeType === 1) {
      const display = ((_a = getElementComputedStyle(node)) == null ? void 0 : _a.display) || "inline";
      let token = getTextAlternativeInternal(node, options);
      if (display !== "inline" || node.nodeName === "BR")
        token = " " + token + " ";
      tokens.push(token);
    } else if (node.nodeType === 3) {
      tokens.push(node.textContent || "");
    }
  };
  tokens.push(getPseudoContent(element, "::before"));
  const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];
  if (assignedNodes.length) {
    for (const child of assignedNodes)
      visit(child, false);
  } else {
    for (let child = element.firstChild; child; child = child.nextSibling)
      visit(child, true);
    if (element.shadowRoot) {
      for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)
        visit(child, true);
    }
    for (const owned of getIdRefs(element, element.getAttribute("aria-owns")))
      visit(owned, true);
  }
  tokens.push(getPseudoContent(element, "::after"));
  return tokens.join("");
}
var kAriaSelectedRoles = ["gridcell", "option", "row", "tab", "rowheader", "columnheader", "treeitem"];
function getAriaSelected(element) {
  if (elementSafeTagName(element) === "OPTION")
    return element.selected;
  if (kAriaSelectedRoles.includes(getAriaRole(element) || ""))
    return getAriaBoolean(element.getAttribute("aria-selected")) === true;
  return false;
}
var kAriaCheckedRoles = ["checkbox", "menuitemcheckbox", "option", "radio", "switch", "menuitemradio", "treeitem"];
function getAriaChecked(element) {
  const result = getChecked(element, true);
  return result === "error" ? false : result;
}
function getChecked(element, allowMixed) {
  const tagName = elementSafeTagName(element);
  if (allowMixed && tagName === "INPUT" && element.indeterminate)
    return "mixed";
  if (tagName === "INPUT" && ["checkbox", "radio"].includes(element.type))
    return element.checked;
  if (kAriaCheckedRoles.includes(getAriaRole(element) || "")) {
    const checked = element.getAttribute("aria-checked");
    if (checked === "true")
      return true;
    if (allowMixed && checked === "mixed")
      return "mixed";
    return false;
  }
  return "error";
}
var kAriaPressedRoles = ["button"];
function getAriaPressed(element) {
  if (kAriaPressedRoles.includes(getAriaRole(element) || "")) {
    const pressed = element.getAttribute("aria-pressed");
    if (pressed === "true")
      return true;
    if (pressed === "mixed")
      return "mixed";
  }
  return false;
}
var kAriaExpandedRoles = ["application", "button", "checkbox", "combobox", "gridcell", "link", "listbox", "menuitem", "row", "rowheader", "tab", "treeitem", "columnheader", "menuitemcheckbox", "menuitemradio", "rowheader", "switch"];
function getAriaExpanded(element) {
  if (elementSafeTagName(element) === "DETAILS")
    return element.open;
  if (kAriaExpandedRoles.includes(getAriaRole(element) || "")) {
    const expanded = element.getAttribute("aria-expanded");
    if (expanded === null)
      return void 0;
    if (expanded === "true")
      return true;
    return false;
  }
  return void 0;
}
var kAriaLevelRoles = ["heading", "listitem", "row", "treeitem"];
function getAriaLevel(element) {
  const native = { "H1": 1, "H2": 2, "H3": 3, "H4": 4, "H5": 5, "H6": 6 }[elementSafeTagName(element)];
  if (native)
    return native;
  if (kAriaLevelRoles.includes(getAriaRole(element) || "")) {
    const attr = element.getAttribute("aria-level");
    const value = attr === null ? Number.NaN : Number(attr);
    if (Number.isInteger(value) && value >= 1)
      return value;
  }
  return 0;
}
var kAriaDisabledRoles = ["application", "button", "composite", "gridcell", "group", "input", "link", "menuitem", "scrollbar", "separator", "tab", "checkbox", "columnheader", "combobox", "grid", "listbox", "menu", "menubar", "menuitemcheckbox", "menuitemradio", "option", "radio", "radiogroup", "row", "rowheader", "searchbox", "select", "slider", "spinbutton", "switch", "tablist", "textbox", "toolbar", "tree", "treegrid", "treeitem"];
function getAriaDisabled(element) {
  return isNativelyDisabled(element) || hasExplicitAriaDisabled(element);
}
function isNativelyDisabled(element) {
  const isNativeFormControl = ["BUTTON", "INPUT", "SELECT", "TEXTAREA", "OPTION", "OPTGROUP"].includes(element.tagName);
  return isNativeFormControl && (element.hasAttribute("disabled") || belongsToDisabledFieldSet(element));
}
function belongsToDisabledFieldSet(element) {
  if (!element)
    return false;
  if (elementSafeTagName(element) === "FIELDSET" && element.hasAttribute("disabled"))
    return true;
  return belongsToDisabledFieldSet(element.parentElement);
}
function hasExplicitAriaDisabled(element) {
  if (!element)
    return false;
  if (kAriaDisabledRoles.includes(getAriaRole(element) || "")) {
    const attribute = (element.getAttribute("aria-disabled") || "").toLowerCase();
    if (attribute === "true")
      return true;
    if (attribute === "false")
      return false;
  }
  return hasExplicitAriaDisabled(parentElementOrShadowHost(element));
}
function getAccessibleNameFromAssociatedLabels(labels, options) {
  return [...labels].map((label) => getTextAlternativeInternal(label, {
    ...options,
    embeddedInLabel: { element: label, hidden: isElementHiddenForAria(label) },
    embeddedInNativeTextAlternative: void 0,
    embeddedInLabelledBy: void 0,
    embeddedInDescribedBy: void 0,
    embeddedInTargetElement: void 0
  })).filter((accessibleName) => !!accessibleName).join(" ");
}
var cacheAccessibleName;
var cacheAccessibleNameHidden;
var cacheAccessibleDescription;
var cacheAccessibleDescriptionHidden;
var cacheIsHidden;
var cachePseudoContentBefore;
var cachePseudoContentAfter;
var cachesCounter = 0;
function beginAriaCaches() {
  ++cachesCounter;
  cacheAccessibleName != null ? cacheAccessibleName : cacheAccessibleName = /* @__PURE__ */ new Map();
  cacheAccessibleNameHidden != null ? cacheAccessibleNameHidden : cacheAccessibleNameHidden = /* @__PURE__ */ new Map();
  cacheAccessibleDescription != null ? cacheAccessibleDescription : cacheAccessibleDescription = /* @__PURE__ */ new Map();
  cacheAccessibleDescriptionHidden != null ? cacheAccessibleDescriptionHidden : cacheAccessibleDescriptionHidden = /* @__PURE__ */ new Map();
  cacheIsHidden != null ? cacheIsHidden : cacheIsHidden = /* @__PURE__ */ new Map();
  cachePseudoContentBefore != null ? cachePseudoContentBefore : cachePseudoContentBefore = /* @__PURE__ */ new Map();
  cachePseudoContentAfter != null ? cachePseudoContentAfter : cachePseudoContentAfter = /* @__PURE__ */ new Map();
}
function endAriaCaches() {
  if (!--cachesCounter) {
    cacheAccessibleName = void 0;
    cacheAccessibleNameHidden = void 0;
    cacheAccessibleDescription = void 0;
    cacheAccessibleDescriptionHidden = void 0;
    cacheIsHidden = void 0;
    cachePseudoContentBefore = void 0;
    cachePseudoContentAfter = void 0;
  }
}
var inputTypeToRole = {
  "button": "button",
  "checkbox": "checkbox",
  "image": "button",
  "number": "spinbutton",
  "radio": "radio",
  "range": "slider",
  "reset": "button",
  "submit": "button"
};

// packages/playwright-core/src/server/injected/selectorUtils.ts
function matchesComponentAttribute(obj, attr) {
  for (const token of attr.jsonPath) {
    if (obj !== void 0 && obj !== null)
      obj = obj[token];
  }
  return matchesAttributePart(obj, attr);
}
function matchesAttributePart(value, attr) {
  const objValue = typeof value === "string" && !attr.caseSensitive ? value.toUpperCase() : value;
  const attrValue = typeof attr.value === "string" && !attr.caseSensitive ? attr.value.toUpperCase() : attr.value;
  if (attr.op === "<truthy>")
    return !!objValue;
  if (attr.op === "=") {
    if (attrValue instanceof RegExp)
      return typeof objValue === "string" && !!objValue.match(attrValue);
    return objValue === attrValue;
  }
  if (typeof objValue !== "string" || typeof attrValue !== "string")
    return false;
  if (attr.op === "*=")
    return objValue.includes(attrValue);
  if (attr.op === "^=")
    return objValue.startsWith(attrValue);
  if (attr.op === "$=")
    return objValue.endsWith(attrValue);
  if (attr.op === "|=")
    return objValue === attrValue || objValue.startsWith(attrValue + "-");
  if (attr.op === "~=")
    return objValue.split(" ").includes(attrValue);
  return false;
}
function shouldSkipForTextMatching(element) {
  const document = element.ownerDocument;
  return element.nodeName === "SCRIPT" || element.nodeName === "NOSCRIPT" || element.nodeName === "STYLE" || document.head && document.head.contains(element);
}
function elementText(cache, root) {
  let value = cache.get(root);
  if (value === void 0) {
    value = { full: "", normalized: "", immediate: [] };
    if (!shouldSkipForTextMatching(root)) {
      let currentImmediate = "";
      if (root instanceof HTMLInputElement && (root.type === "submit" || root.type === "button")) {
        value = { full: root.value, normalized: normalizeWhiteSpace(root.value), immediate: [root.value] };
      } else {
        for (let child = root.firstChild; child; child = child.nextSibling) {
          if (child.nodeType === Node.TEXT_NODE) {
            value.full += child.nodeValue || "";
            currentImmediate += child.nodeValue || "";
          } else {
            if (currentImmediate)
              value.immediate.push(currentImmediate);
            currentImmediate = "";
            if (child.nodeType === Node.ELEMENT_NODE)
              value.full += elementText(cache, child).full;
          }
        }
        if (currentImmediate)
          value.immediate.push(currentImmediate);
        if (root.shadowRoot)
          value.full += elementText(cache, root.shadowRoot).full;
        if (value.full)
          value.normalized = normalizeWhiteSpace(value.full);
      }
    }
    cache.set(root, value);
  }
  return value;
}
function elementMatchesText(cache, element, matcher) {
  if (shouldSkipForTextMatching(element))
    return "none";
  if (!matcher(elementText(cache, element)))
    return "none";
  for (let child = element.firstChild; child; child = child.nextSibling) {
    if (child.nodeType === Node.ELEMENT_NODE && matcher(elementText(cache, child)))
      return "selfAndChildren";
  }
  if (element.shadowRoot && matcher(elementText(cache, element.shadowRoot)))
    return "selfAndChildren";
  return "self";
}
function getElementLabels(textCache, element) {
  const labels = getAriaLabelledByElements(element);
  if (labels)
    return labels.map((label) => elementText(textCache, label));
  const ariaLabel = element.getAttribute("aria-label");
  if (ariaLabel !== null && !!ariaLabel.trim())
    return [{ full: ariaLabel, normalized: normalizeWhiteSpace(ariaLabel), immediate: [ariaLabel] }];
  const isNonHiddenInput = element.nodeName === "INPUT" && element.type !== "hidden";
  if (["BUTTON", "METER", "OUTPUT", "PROGRESS", "SELECT", "TEXTAREA"].includes(element.nodeName) || isNonHiddenInput) {
    const labels2 = element.labels;
    if (labels2)
      return [...labels2].map((label) => elementText(textCache, label));
  }
  return [];
}

// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts
var between = function(num, first, last) {
  return num >= first && num <= last;
};
function digit(code) {
  return between(code, 48, 57);
}
function hexdigit(code) {
  return digit(code) || between(code, 65, 70) || between(code, 97, 102);
}
function uppercaseletter(code) {
  return between(code, 65, 90);
}
function lowercaseletter(code) {
  return between(code, 97, 122);
}
function letter(code) {
  return uppercaseletter(code) || lowercaseletter(code);
}
function nonascii(code) {
  return code >= 128;
}
function namestartchar(code) {
  return letter(code) || nonascii(code) || code === 95;
}
function namechar(code) {
  return namestartchar(code) || digit(code) || code === 45;
}
function nonprintable(code) {
  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
}
function newline(code) {
  return code === 10;
}
function whitespace(code) {
  return newline(code) || code === 9 || code === 32;
}
var maximumallowedcodepoint = 1114111;
var InvalidCharacterError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "InvalidCharacterError";
  }
};
function preprocess(str) {
  const codepoints = [];
  for (let i = 0; i < str.length; i++) {
    let code = str.charCodeAt(i);
    if (code === 13 && str.charCodeAt(i + 1) === 10) {
      code = 10;
      i++;
    }
    if (code === 13 || code === 12)
      code = 10;
    if (code === 0)
      code = 65533;
    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
      const lead = code - 55296;
      const trail = str.charCodeAt(i + 1) - 56320;
      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
      i++;
    }
    codepoints.push(code);
  }
  return codepoints;
}
function stringFromCode(code) {
  if (code <= 65535)
    return String.fromCharCode(code);
  code -= Math.pow(2, 16);
  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
  const trail = code % Math.pow(2, 10) + 56320;
  return String.fromCharCode(lead) + String.fromCharCode(trail);
}
function tokenize(str1) {
  const str = preprocess(str1);
  let i = -1;
  const tokens = [];
  let code;
  let line = 0;
  let column = 0;
  let lastLineLength = 0;
  const incrLineno = function() {
    line += 1;
    lastLineLength = column;
    column = 0;
  };
  const locStart = { line, column };
  const codepoint = function(i2) {
    if (i2 >= str.length)
      return -1;
    return str[i2];
  };
  const next = function(num) {
    if (num === void 0)
      num = 1;
    if (num > 3)
      throw "Spec Error: no more than three codepoints of lookahead.";
    return codepoint(i + num);
  };
  const consume = function(num) {
    if (num === void 0)
      num = 1;
    i += num;
    code = codepoint(i);
    if (newline(code))
      incrLineno();
    else
      column += num;
    return true;
  };
  const reconsume = function() {
    i -= 1;
    if (newline(code)) {
      line -= 1;
      column = lastLineLength;
    } else {
      column -= 1;
    }
    locStart.line = line;
    locStart.column = column;
    return true;
  };
  const eof = function(codepoint2) {
    if (codepoint2 === void 0)
      codepoint2 = code;
    return codepoint2 === -1;
  };
  const donothing = function() {
  };
  const parseerror = function() {
  };
  const consumeAToken = function() {
    consumeComments();
    consume();
    if (whitespace(code)) {
      while (whitespace(next()))
        consume();
      return new WhitespaceToken();
    } else if (code === 34) {
      return consumeAStringToken();
    } else if (code === 35) {
      if (namechar(next()) || areAValidEscape(next(1), next(2))) {
        const token = new HashToken("");
        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
          token.type = "id";
        token.value = consumeAName();
        return token;
      } else {
        return new DelimToken(code);
      }
    } else if (code === 36) {
      if (next() === 61) {
        consume();
        return new SuffixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 39) {
      return consumeAStringToken();
    } else if (code === 40) {
      return new OpenParenToken();
    } else if (code === 41) {
      return new CloseParenToken();
    } else if (code === 42) {
      if (next() === 61) {
        consume();
        return new SubstringMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 43) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 44) {
      return new CommaToken();
    } else if (code === 45) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else if (next(1) === 45 && next(2) === 62) {
        consume(2);
        return new CDCToken();
      } else if (startsWithAnIdentifier()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 46) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 58) {
      return new ColonToken();
    } else if (code === 59) {
      return new SemicolonToken();
    } else if (code === 60) {
      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
        consume(3);
        return new CDOToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 64) {
      if (wouldStartAnIdentifier(next(1), next(2), next(3)))
        return new AtKeywordToken(consumeAName());
      else
        return new DelimToken(code);
    } else if (code === 91) {
      return new OpenSquareToken();
    } else if (code === 92) {
      if (startsWithAValidEscape()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        parseerror();
        return new DelimToken(code);
      }
    } else if (code === 93) {
      return new CloseSquareToken();
    } else if (code === 94) {
      if (next() === 61) {
        consume();
        return new PrefixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 123) {
      return new OpenCurlyToken();
    } else if (code === 124) {
      if (next() === 61) {
        consume();
        return new DashMatchToken();
      } else if (next() === 124) {
        consume();
        return new ColumnToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 125) {
      return new CloseCurlyToken();
    } else if (code === 126) {
      if (next() === 61) {
        consume();
        return new IncludeMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (digit(code)) {
      reconsume();
      return consumeANumericToken();
    } else if (namestartchar(code)) {
      reconsume();
      return consumeAnIdentlikeToken();
    } else if (eof()) {
      return new EOFToken();
    } else {
      return new DelimToken(code);
    }
  };
  const consumeComments = function() {
    while (next(1) === 47 && next(2) === 42) {
      consume(2);
      while (true) {
        consume();
        if (code === 42 && next() === 47) {
          consume();
          break;
        } else if (eof()) {
          parseerror();
          return;
        }
      }
    }
  };
  const consumeANumericToken = function() {
    const num = consumeANumber();
    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
      const token = new DimensionToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      token.unit = consumeAName();
      return token;
    } else if (next() === 37) {
      consume();
      const token = new PercentageToken();
      token.value = num.value;
      token.repr = num.repr;
      return token;
    } else {
      const token = new NumberToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      return token;
    }
  };
  const consumeAnIdentlikeToken = function() {
    const str2 = consumeAName();
    if (str2.toLowerCase() === "url" && next() === 40) {
      consume();
      while (whitespace(next(1)) && whitespace(next(2)))
        consume();
      if (next() === 34 || next() === 39)
        return new FunctionToken(str2);
      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
        return new FunctionToken(str2);
      else
        return consumeAURLToken();
    } else if (next() === 40) {
      consume();
      return new FunctionToken(str2);
    } else {
      return new IdentToken(str2);
    }
  };
  const consumeAStringToken = function(endingCodePoint) {
    if (endingCodePoint === void 0)
      endingCodePoint = code;
    let string = "";
    while (consume()) {
      if (code === endingCodePoint || eof()) {
        return new StringToken(string);
      } else if (newline(code)) {
        parseerror();
        reconsume();
        return new BadStringToken();
      } else if (code === 92) {
        if (eof(next()))
          donothing();
        else if (newline(next()))
          consume();
        else
          string += stringFromCode(consumeEscape());
      } else {
        string += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeAURLToken = function() {
    const token = new URLToken("");
    while (whitespace(next()))
      consume();
    if (eof(next()))
      return token;
    while (consume()) {
      if (code === 41 || eof()) {
        return token;
      } else if (whitespace(code)) {
        while (whitespace(next()))
          consume();
        if (next() === 41 || eof(next())) {
          consume();
          return token;
        } else {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
        parseerror();
        consumeTheRemnantsOfABadURL();
        return new BadURLToken();
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          token.value += stringFromCode(consumeEscape());
        } else {
          parseerror();
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else {
        token.value += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeEscape = function() {
    consume();
    if (hexdigit(code)) {
      const digits = [code];
      for (let total = 0; total < 5; total++) {
        if (hexdigit(next())) {
          consume();
          digits.push(code);
        } else {
          break;
        }
      }
      if (whitespace(next()))
        consume();
      let value = parseInt(digits.map(function(x) {
        return String.fromCharCode(x);
      }).join(""), 16);
      if (value > maximumallowedcodepoint)
        value = 65533;
      return value;
    } else if (eof()) {
      return 65533;
    } else {
      return code;
    }
  };
  const areAValidEscape = function(c1, c2) {
    if (c1 !== 92)
      return false;
    if (newline(c2))
      return false;
    return true;
  };
  const startsWithAValidEscape = function() {
    return areAValidEscape(code, next());
  };
  const wouldStartAnIdentifier = function(c1, c2, c3) {
    if (c1 === 45)
      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
    else if (namestartchar(c1))
      return true;
    else if (c1 === 92)
      return areAValidEscape(c1, c2);
    else
      return false;
  };
  const startsWithAnIdentifier = function() {
    return wouldStartAnIdentifier(code, next(1), next(2));
  };
  const wouldStartANumber = function(c1, c2, c3) {
    if (c1 === 43 || c1 === 45) {
      if (digit(c2))
        return true;
      if (c2 === 46 && digit(c3))
        return true;
      return false;
    } else if (c1 === 46) {
      if (digit(c2))
        return true;
      return false;
    } else if (digit(c1)) {
      return true;
    } else {
      return false;
    }
  };
  const startsWithANumber = function() {
    return wouldStartANumber(code, next(1), next(2));
  };
  const consumeAName = function() {
    let result = "";
    while (consume()) {
      if (namechar(code)) {
        result += stringFromCode(code);
      } else if (startsWithAValidEscape()) {
        result += stringFromCode(consumeEscape());
      } else {
        reconsume();
        return result;
      }
    }
    throw new Error("Internal parse error");
  };
  const consumeANumber = function() {
    let repr = "";
    let type = "integer";
    if (next() === 43 || next() === 45) {
      consume();
      repr += stringFromCode(code);
    }
    while (digit(next())) {
      consume();
      repr += stringFromCode(code);
    }
    if (next(1) === 46 && digit(next(2))) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const c1 = next(1), c2 = next(2), c3 = next(3);
    if ((c1 === 69 || c1 === 101) && digit(c2)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const value = convertAStringToANumber(repr);
    return { type, value, repr };
  };
  const convertAStringToANumber = function(string) {
    return +string;
  };
  const consumeTheRemnantsOfABadURL = function() {
    while (consume()) {
      if (code === 41 || eof()) {
        return;
      } else if (startsWithAValidEscape()) {
        consumeEscape();
        donothing();
      } else {
        donothing();
      }
    }
  };
  let iterationCount = 0;
  while (!eof(next())) {
    tokens.push(consumeAToken());
    iterationCount++;
    if (iterationCount > str.length * 2)
      throw new Error("I'm infinite-looping!");
  }
  return tokens;
}
var CSSParserToken = class {
  constructor() {
    this.tokenType = "";
  }
  toJSON() {
    return { token: this.tokenType };
  }
  toString() {
    return this.tokenType;
  }
  toSource() {
    return "" + this;
  }
};
var BadStringToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "BADSTRING";
  }
};
var BadURLToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "BADURL";
  }
};
var WhitespaceToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "WHITESPACE";
  }
  toString() {
    return "WS";
  }
  toSource() {
    return " ";
  }
};
var CDOToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "CDO";
  }
  toSource() {
    return "<!--";
  }
};
var CDCToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "CDC";
  }
  toSource() {
    return "-->";
  }
};
var ColonToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ":";
  }
};
var SemicolonToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ";";
  }
};
var CommaToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ",";
  }
};
var GroupingToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.value = "";
    this.mirror = "";
  }
};
var OpenCurlyToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "{";
    this.value = "{";
    this.mirror = "}";
  }
};
var CloseCurlyToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "}";
    this.value = "}";
    this.mirror = "{";
  }
};
var OpenSquareToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "[";
    this.value = "[";
    this.mirror = "]";
  }
};
var CloseSquareToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "]";
    this.value = "]";
    this.mirror = "[";
  }
};
var OpenParenToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "(";
    this.value = "(";
    this.mirror = ")";
  }
};
var CloseParenToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = ")";
    this.value = ")";
    this.mirror = "(";
  }
};
var IncludeMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "~=";
  }
};
var DashMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "|=";
  }
};
var PrefixMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "^=";
  }
};
var SuffixMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "$=";
  }
};
var SubstringMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "*=";
  }
};
var ColumnToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "||";
  }
};
var EOFToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "EOF";
  }
  toSource() {
    return "";
  }
};
var DelimToken = class extends CSSParserToken {
  constructor(code) {
    super();
    this.tokenType = "DELIM";
    this.value = "";
    this.value = stringFromCode(code);
  }
  toString() {
    return "DELIM(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
  toSource() {
    if (this.value === "\\\\")
      return "\\\\\\n";
    else
      return this.value;
  }
};
var StringValuedToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.value = "";
  }
  ASCIIMatch(str) {
    return this.value.toLowerCase() === str.toLowerCase();
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
};
var IdentToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "IDENT";
    this.value = val;
  }
  toString() {
    return "IDENT(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value);
  }
};
var FunctionToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "FUNCTION";
    this.value = val;
    this.mirror = ")";
  }
  toString() {
    return "FUNCTION(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value) + "(";
  }
};
var AtKeywordToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "AT-KEYWORD";
    this.value = val;
  }
  toString() {
    return "AT(" + this.value + ")";
  }
  toSource() {
    return "@" + escapeIdent(this.value);
  }
};
var HashToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "HASH";
    this.value = val;
    this.type = "unrestricted";
  }
  toString() {
    return "HASH(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    return json;
  }
  toSource() {
    if (this.type === "id")
      return "#" + escapeIdent(this.value);
    else
      return "#" + escapeHash(this.value);
  }
};
var StringToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "STRING";
    this.value = val;
  }
  toString() {
    return '"' + escapeString(this.value) + '"';
  }
};
var URLToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "URL";
    this.value = val;
  }
  toString() {
    return "URL(" + this.value + ")";
  }
  toSource() {
    return 'url("' + escapeString(this.value) + '")';
  }
};
var NumberToken = class extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "NUMBER";
    this.type = "integer";
    this.repr = "";
  }
  toString() {
    if (this.type === "integer")
      return "INT(" + this.value + ")";
    return "NUMBER(" + this.value + ")";
  }
  toJSON() {
    const json = super.toJSON();
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr;
  }
};
var PercentageToken = class extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "PERCENTAGE";
    this.repr = "";
  }
  toString() {
    return "PERCENTAGE(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr + "%";
  }
};
var DimensionToken = class extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "DIMENSION";
    this.type = "integer";
    this.repr = "";
    this.unit = "";
  }
  toString() {
    return "DIM(" + this.value + "," + this.unit + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    json.unit = this.unit;
    return json;
  }
  toSource() {
    const source = this.repr;
    let unit = escapeIdent(this.unit);
    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
      unit = "\\\\65 " + unit.slice(1, unit.length);
    }
    return source + unit;
  }
};
function escapeIdent(string) {
  string = "" + string;
  let result = "";
  const firstcode = string.charCodeAt(0);
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
      result += "\\\\" + code.toString(16) + " ";
    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
      result += string[i];
    else
      result += "\\\\" + string[i];
  }
  return result;
}
function escapeHash(string) {
  string = "" + string;
  let result = "";
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
      result += string[i];
    else
      result += "\\\\" + code.toString(16) + " ";
  }
  return result;
}
function escapeString(string) {
  string = "" + string;
  let result = "";
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127)
      result += "\\\\" + code.toString(16) + " ";
    else if (code === 34 || code === 92)
      result += "\\\\" + string[i];
    else
      result += string[i];
  }
  return result;
}

// packages/playwright-core/src/utils/isomorphic/cssParser.ts
var InvalidSelectorError = class extends Error {
};
function parseCSS(selector, customNames) {
  let tokens;
  try {
    tokens = tokenize(selector);
    if (!(tokens[tokens.length - 1] instanceof EOFToken))
      tokens.push(new EOFToken());
  } catch (e) {
    const newMessage = e.message + \` while parsing selector "\${selector}"\`;
    const index = (e.stack || "").indexOf(e.message);
    if (index !== -1)
      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
    e.message = newMessage;
    throw e;
  }
  const unsupportedToken = tokens.find((token) => {
    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.
    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }
    // Or this way :xpath( {complex-xpath-goes-here("hello")} )
    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?
    token instanceof URLToken || token instanceof PercentageToken;
  });
  if (unsupportedToken)
    throw new InvalidSelectorError(\`Unsupported token "\${unsupportedToken.toSource()}" while parsing selector "\${selector}"\`);
  let pos = 0;
  const names = /* @__PURE__ */ new Set();
  function unexpected() {
    return new InvalidSelectorError(\`Unexpected token "\${tokens[pos].toSource()}" while parsing selector "\${selector}"\`);
  }
  function skipWhitespace() {
    while (tokens[pos] instanceof WhitespaceToken)
      pos++;
  }
  function isIdent(p = pos) {
    return tokens[p] instanceof IdentToken;
  }
  function isString(p = pos) {
    return tokens[p] instanceof StringToken;
  }
  function isNumber(p = pos) {
    return tokens[p] instanceof NumberToken;
  }
  function isComma(p = pos) {
    return tokens[p] instanceof CommaToken;
  }
  function isOpenParen(p = pos) {
    return tokens[p] instanceof OpenParenToken;
  }
  function isCloseParen(p = pos) {
    return tokens[p] instanceof CloseParenToken;
  }
  function isFunction(p = pos) {
    return tokens[p] instanceof FunctionToken;
  }
  function isStar(p = pos) {
    return tokens[p] instanceof DelimToken && tokens[p].value === "*";
  }
  function isEOF(p = pos) {
    return tokens[p] instanceof EOFToken;
  }
  function isClauseCombinator(p = pos) {
    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);
  }
  function isSelectorClauseEnd(p = pos) {
    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;
  }
  function consumeFunctionArguments() {
    const result2 = [consumeArgument()];
    while (true) {
      skipWhitespace();
      if (!isComma())
        break;
      pos++;
      result2.push(consumeArgument());
    }
    return result2;
  }
  function consumeArgument() {
    skipWhitespace();
    if (isNumber())
      return tokens[pos++].value;
    if (isString())
      return tokens[pos++].value;
    return consumeComplexSelector();
  }
  function consumeComplexSelector() {
    const result2 = { simples: [] };
    skipWhitespace();
    if (isClauseCombinator()) {
      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });
    } else {
      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });
    }
    while (true) {
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
        skipWhitespace();
      } else if (isSelectorClauseEnd()) {
        break;
      }
      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });
    }
    return result2;
  }
  function consumeSimpleSelector() {
    let rawCSSString = "";
    const functions = [];
    while (!isSelectorClauseEnd()) {
      if (isIdent() || isStar()) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof HashToken) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {
        pos++;
        if (isIdent())
          rawCSSString += "." + tokens[pos++].toSource();
        else
          throw unexpected();
      } else if (tokens[pos] instanceof ColonToken) {
        pos++;
        if (isIdent()) {
          if (!customNames.has(tokens[pos].value.toLowerCase())) {
            rawCSSString += ":" + tokens[pos++].toSource();
          } else {
            const name = tokens[pos++].value.toLowerCase();
            functions.push({ name, args: [] });
            names.add(name);
          }
        } else if (isFunction()) {
          const name = tokens[pos++].value.toLowerCase();
          if (!customNames.has(name)) {
            rawCSSString += \`:\${name}(\${consumeBuiltinFunctionArguments()})\`;
          } else {
            functions.push({ name, args: consumeFunctionArguments() });
            names.add(name);
          }
          skipWhitespace();
          if (!isCloseParen())
            throw unexpected();
          pos++;
        } else {
          throw unexpected();
        }
      } else if (tokens[pos] instanceof OpenSquareToken) {
        rawCSSString += "[";
        pos++;
        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())
          rawCSSString += tokens[pos++].toSource();
        if (!(tokens[pos] instanceof CloseSquareToken))
          throw unexpected();
        rawCSSString += "]";
        pos++;
      } else {
        throw unexpected();
      }
    }
    if (!rawCSSString && !functions.length)
      throw unexpected();
    return { css: rawCSSString || void 0, functions };
  }
  function consumeBuiltinFunctionArguments() {
    let s = "";
    let balance = 1;
    while (!isEOF()) {
      if (isOpenParen() || isFunction())
        balance++;
      if (isCloseParen())
        balance--;
      if (!balance)
        break;
      s += tokens[pos++].toSource();
    }
    return s;
  }
  const result = consumeFunctionArguments();
  if (!isEOF())
    throw unexpected();
  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
    throw new InvalidSelectorError(\`Error while parsing selector "\${selector}"\`);
  return { selector: result, names: Array.from(names) };
}

// packages/playwright-core/src/utils/isomorphic/selectorParser.ts
var kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
var kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);
var customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
function parseSelector(selector) {
  const parsedStrings = parseSelectorString(selector);
  const parts = [];
  for (const part of parsedStrings.parts) {
    if (part.name === "css" || part.name === "css:light") {
      if (part.name === "css:light")
        part.body = ":light(" + part.body + ")";
      const parsedCSS = parseCSS(part.body, customCSSNames);
      parts.push({
        name: "css",
        body: parsedCSS.selector,
        source: part.body
      });
      continue;
    }
    if (kNestedSelectorNames.has(part.name)) {
      let innerSelector;
      let distance;
      try {
        const unescaped = JSON.parse("[" + part.body + "]");
        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
          throw new InvalidSelectorError(\`Malformed selector: \${part.name}=\` + part.body);
        innerSelector = unescaped[0];
        if (unescaped.length === 2) {
          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
            throw new InvalidSelectorError(\`Malformed selector: \${part.name}=\` + part.body);
          distance = unescaped[1];
        }
      } catch (e) {
        throw new InvalidSelectorError(\`Malformed selector: \${part.name}=\` + part.body);
      }
      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };
      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
      parts.push(nested);
      continue;
    }
    parts.push({ ...part, source: part.body });
  }
  if (kNestedSelectorNames.has(parts[0].name))
    throw new InvalidSelectorError(\`"\${parts[0].name}" selector cannot be first\`);
  return {
    capture: parsedStrings.capture,
    parts
  };
}
function selectorPartsEqual(list1, list2) {
  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });
}
function stringifySelector(selector, forceEngineName) {
  if (typeof selector === "string")
    return selector;
  return selector.parts.map((p, i) => {
    let includeEngine = true;
    if (!forceEngineName && i !== selector.capture) {
      if (p.name === "css")
        includeEngine = false;
      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
        includeEngine = false;
    }
    const prefix = includeEngine ? p.name + "=" : "";
    return \`\${i === selector.capture ? "*" : ""}\${prefix}\${p.source}\`;
  }).join(" >> ");
}
function visitAllSelectorParts(selector, visitor) {
  const visit = (selector2, nested) => {
    for (const part of selector2.parts) {
      visitor(part, nested);
      if (kNestedSelectorNames.has(part.name))
        visit(part.body.parsed, true);
    }
  };
  visit(selector, false);
}
function parseSelectorString(selector) {
  let index = 0;
  let quote;
  let start = 0;
  const result = { parts: [] };
  const append = () => {
    const part = selector.substring(start, index).trim();
    const eqIndex = part.indexOf("=");
    let name;
    let body;
    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
      name = part.substring(0, eqIndex).trim();
      body = part.substring(eqIndex + 1);
    } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
      name = "text";
      body = part;
    } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
      name = "text";
      body = part;
    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {
      name = "xpath";
      body = part;
    } else {
      name = "css";
      body = part;
    }
    let capture = false;
    if (name[0] === "*") {
      capture = true;
      name = name.substring(1);
    }
    result.parts.push({ name, body });
    if (capture) {
      if (result.capture !== void 0)
        throw new InvalidSelectorError(\`Only one of the selectors can capture using * modifier\`);
      result.capture = result.parts.length - 1;
    }
  };
  if (!selector.includes(">>")) {
    index = selector.length;
    append();
    return result;
  }
  const shouldIgnoreTextSelectorQuote = () => {
    const prefix = selector.substring(start, index);
    const match = prefix.match(/^\\s*text\\s*=(.*)$/);
    return !!match && !!match[1];
  };
  while (index < selector.length) {
    const c = selector[index];
    if (c === "\\\\" && index + 1 < selector.length) {
      index += 2;
    } else if (c === quote) {
      quote = void 0;
      index++;
    } else if (!quote && (c === '"' || c === "'" || c === "\`") && !shouldIgnoreTextSelectorQuote()) {
      quote = c;
      index++;
    } else if (!quote && c === ">" && selector[index + 1] === ">") {
      append();
      index += 2;
      start = index;
    } else {
      index++;
    }
  }
  append();
  return result;
}
function parseAttributeSelector(selector, allowUnquotedStrings) {
  let wp = 0;
  let EOL = selector.length === 0;
  const next = () => selector[wp] || "";
  const eat1 = () => {
    const result2 = next();
    ++wp;
    EOL = wp >= selector.length;
    return result2;
  };
  const syntaxError = (stage) => {
    if (EOL)
      throw new InvalidSelectorError(\`Unexpected end of selector while parsing selector \\\`\${selector}\\\`\`);
    throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - unexpected symbol "\${next()}" at position \${wp}\` + (stage ? " during " + stage : ""));
  };
  function skipSpaces() {
    while (!EOL && /\\s/.test(next()))
      eat1();
  }
  function isCSSNameChar(char) {
    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
  }
  function readIdentifier() {
    let result2 = "";
    skipSpaces();
    while (!EOL && isCSSNameChar(next()))
      result2 += eat1();
    return result2;
  }
  function readQuotedString(quote) {
    let result2 = eat1();
    if (result2 !== quote)
      syntaxError("parsing quoted string");
    while (!EOL && next() !== quote) {
      if (next() === "\\\\")
        eat1();
      result2 += eat1();
    }
    if (next() !== quote)
      syntaxError("parsing quoted string");
    result2 += eat1();
    return result2;
  }
  function readRegularExpression() {
    if (eat1() !== "/")
      syntaxError("parsing regular expression");
    let source = "";
    let inClass = false;
    while (!EOL) {
      if (next() === "\\\\") {
        source += eat1();
        if (EOL)
          syntaxError("parsing regular expression");
      } else if (inClass && next() === "]") {
        inClass = false;
      } else if (!inClass && next() === "[") {
        inClass = true;
      } else if (!inClass && next() === "/") {
        break;
      }
      source += eat1();
    }
    if (eat1() !== "/")
      syntaxError("parsing regular expression");
    let flags = "";
    while (!EOL && next().match(/[dgimsuy]/))
      flags += eat1();
    try {
      return new RegExp(source, flags);
    } catch (e) {
      throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\`: \${e.message}\`);
    }
  }
  function readAttributeToken() {
    let token = "";
    skipSpaces();
    if (next() === \`'\` || next() === \`"\`)
      token = readQuotedString(next()).slice(1, -1);
    else
      token = readIdentifier();
    if (!token)
      syntaxError("parsing property path");
    return token;
  }
  function readOperator() {
    skipSpaces();
    let op = "";
    if (!EOL)
      op += eat1();
    if (!EOL && op !== "=")
      op += eat1();
    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
      syntaxError("parsing operator");
    return op;
  }
  function readAttribute() {
    eat1();
    const jsonPath = [];
    jsonPath.push(readAttributeToken());
    skipSpaces();
    while (next() === ".") {
      eat1();
      jsonPath.push(readAttributeToken());
      skipSpaces();
    }
    if (next() === "]") {
      eat1();
      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };
    }
    const operator = readOperator();
    let value = void 0;
    let caseSensitive = true;
    skipSpaces();
    if (next() === "/") {
      if (operator !== "=")
        throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - cannot use \${operator} in attribute with regular expression\`);
      value = readRegularExpression();
    } else if (next() === \`'\` || next() === \`"\`) {
      value = readQuotedString(next()).slice(1, -1);
      skipSpaces();
      if (next() === "i" || next() === "I") {
        caseSensitive = false;
        eat1();
      } else if (next() === "s" || next() === "S") {
        caseSensitive = true;
        eat1();
      }
    } else {
      value = "";
      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
        value += eat1();
      if (value === "true") {
        value = true;
      } else if (value === "false") {
        value = false;
      } else {
        if (!allowUnquotedStrings) {
          value = +value;
          if (Number.isNaN(value))
            syntaxError("parsing attribute value");
        }
      }
    }
    skipSpaces();
    if (next() !== "]")
      syntaxError("parsing attribute value");
    eat1();
    if (operator !== "=" && typeof value !== "string")
      throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - cannot use \${operator} in attribute with non-string matching value - \${value}\`);
    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };
  }
  const result = {
    name: "",
    attributes: []
  };
  result.name = readIdentifier();
  skipSpaces();
  while (next() === "[") {
    result.attributes.push(readAttribute());
    skipSpaces();
  }
  if (!EOL)
    syntaxError(void 0);
  if (!result.name && !result.attributes.length)
    throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - selector cannot be empty\`);
  return result;
}

// packages/playwright-core/src/server/injected/reactSelectorEngine.ts
function getFunctionComponentName(component) {
  return component.displayName || component.name || "Anonymous";
}
function getComponentName(reactElement) {
  if (reactElement.type) {
    switch (typeof reactElement.type) {
      case "function":
        return getFunctionComponentName(reactElement.type);
      case "string":
        return reactElement.type;
      case "object":
        return reactElement.type.displayName || (reactElement.type.render ? getFunctionComponentName(reactElement.type.render) : "");
    }
  }
  if (reactElement._currentElement) {
    const elementType = reactElement._currentElement.type;
    if (typeof elementType === "string")
      return elementType;
    if (typeof elementType === "function")
      return elementType.displayName || elementType.name || "Anonymous";
  }
  return "";
}
function getComponentKey(reactElement) {
  var _a, _b;
  return (_b = reactElement.key) != null ? _b : (_a = reactElement._currentElement) == null ? void 0 : _a.key;
}
function getChildren(reactElement) {
  if (reactElement.child) {
    const children = [];
    for (let child = reactElement.child; child; child = child.sibling)
      children.push(child);
    return children;
  }
  if (!reactElement._currentElement)
    return [];
  const isKnownElement = (reactElement2) => {
    var _a;
    const elementType = (_a = reactElement2._currentElement) == null ? void 0 : _a.type;
    return typeof elementType === "function" || typeof elementType === "string";
  };
  if (reactElement._renderedComponent) {
    const child = reactElement._renderedComponent;
    return isKnownElement(child) ? [child] : [];
  }
  if (reactElement._renderedChildren)
    return [...Object.values(reactElement._renderedChildren)].filter(isKnownElement);
  return [];
}
function getProps(reactElement) {
  var _a;
  const props = (
    // React 16+
    reactElement.memoizedProps || // React 15
    ((_a = reactElement._currentElement) == null ? void 0 : _a.props)
  );
  if (!props || typeof props === "string")
    return props;
  const result = { ...props };
  delete result.children;
  return result;
}
function buildComponentsTree(reactElement) {
  var _a;
  const treeNode = {
    key: getComponentKey(reactElement),
    name: getComponentName(reactElement),
    children: getChildren(reactElement).map(buildComponentsTree),
    rootElements: [],
    props: getProps(reactElement)
  };
  const rootElement = (
    // React 16+
    // @see https://github.com/baruchvlz/resq/blob/5c15a5e04d3f7174087248f5a158c3d6dcc1ec72/src/utils.js#L29
    reactElement.stateNode || // React 15
    reactElement._hostNode || ((_a = reactElement._renderedComponent) == null ? void 0 : _a._hostNode)
  );
  if (rootElement instanceof Element) {
    treeNode.rootElements.push(rootElement);
  } else {
    for (const child of treeNode.children)
      treeNode.rootElements.push(...child.rootElements);
  }
  return treeNode;
}
function filterComponentsTree(treeNode, searchFn, result = []) {
  if (searchFn(treeNode))
    result.push(treeNode);
  for (const child of treeNode.children)
    filterComponentsTree(child, searchFn, result);
  return result;
}
function findReactRoots(root, roots = []) {
  const document = root.ownerDocument || root;
  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
  do {
    const node = walker.currentNode;
    const reactNode = node;
    const rootKey = Object.keys(reactNode).find((key) => key.startsWith("__reactContainer") && reactNode[key] !== null);
    if (rootKey) {
      roots.push(reactNode[rootKey].stateNode.current);
    } else {
      const legacyRootKey = "_reactRootContainer";
      if (reactNode.hasOwnProperty(legacyRootKey) && reactNode[legacyRootKey] !== null) {
        roots.push(reactNode[legacyRootKey]._internalRoot.current);
      }
    }
    if (node instanceof Element && node.hasAttribute("data-reactroot")) {
      for (const key of Object.keys(node)) {
        if (key.startsWith("__reactInternalInstance") || key.startsWith("__reactFiber"))
          roots.push(node[key]);
      }
    }
    const shadowRoot = node instanceof Element ? node.shadowRoot : null;
    if (shadowRoot)
      findReactRoots(shadowRoot, roots);
  } while (walker.nextNode());
  return roots;
}
var ReactEngine = {
  queryAll(scope, selector) {
    const { name, attributes } = parseAttributeSelector(selector, false);
    const reactRoots = findReactRoots(scope.ownerDocument || scope);
    const trees = reactRoots.map((reactRoot) => buildComponentsTree(reactRoot));
    const treeNodes = trees.map((tree) => filterComponentsTree(tree, (treeNode) => {
      var _a;
      const props = (_a = treeNode.props) != null ? _a : {};
      if (treeNode.key !== void 0)
        props.key = treeNode.key;
      if (name && treeNode.name !== name)
        return false;
      if (treeNode.rootElements.some((domNode) => !isInsideScope(scope, domNode)))
        return false;
      for (const attr of attributes) {
        if (!matchesComponentAttribute(props, attr))
          return false;
      }
      return true;
    })).flat();
    const allRootElements = /* @__PURE__ */ new Set();
    for (const treeNode of treeNodes) {
      for (const domNode of treeNode.rootElements)
        allRootElements.add(domNode);
    }
    return [...allRootElements];
  }
};

// packages/playwright-core/src/server/injected/vueSelectorEngine.ts
function basename(filename, ext) {
  const normalized = filename.replace(/^[a-zA-Z]:/, "").replace(/\\\\/g, "/");
  let result = normalized.substring(normalized.lastIndexOf("/") + 1);
  if (ext && result.endsWith(ext))
    result = result.substring(0, result.length - ext.length);
  return result;
}
function toUpper(_, c) {
  return c ? c.toUpperCase() : "";
}
var classifyRE = /(?:^|[-_/])(\\w)/g;
var classify = (str) => {
  return str && str.replace(classifyRE, toUpper);
};
function buildComponentsTreeVue3(instance) {
  function getComponentTypeName(options) {
    const name = options.name || options._componentTag || options.__playwright_guessedName;
    if (name)
      return name;
    const file = options.__file;
    if (file)
      return classify(basename(file, ".vue"));
  }
  function saveComponentName(instance2, key) {
    instance2.type.__playwright_guessedName = key;
    return key;
  }
  function getInstanceName(instance2) {
    var _a, _b, _c, _d;
    const name = getComponentTypeName(instance2.type || {});
    if (name)
      return name;
    if (instance2.root === instance2)
      return "Root";
    for (const key in (_b = (_a = instance2.parent) == null ? void 0 : _a.type) == null ? void 0 : _b.components) {
      if (((_c = instance2.parent) == null ? void 0 : _c.type.components[key]) === instance2.type)
        return saveComponentName(instance2, key);
    }
    for (const key in (_d = instance2.appContext) == null ? void 0 : _d.components) {
      if (instance2.appContext.components[key] === instance2.type)
        return saveComponentName(instance2, key);
    }
    return "Anonymous Component";
  }
  function isBeingDestroyed(instance2) {
    return instance2._isBeingDestroyed || instance2.isUnmounted;
  }
  function isFragment(instance2) {
    return instance2.subTree.type.toString() === "Symbol(Fragment)";
  }
  function getInternalInstanceChildren(subTree) {
    const list = [];
    if (subTree.component)
      list.push(subTree.component);
    if (subTree.suspense)
      list.push(...getInternalInstanceChildren(subTree.suspense.activeBranch));
    if (Array.isArray(subTree.children)) {
      subTree.children.forEach((childSubTree) => {
        if (childSubTree.component)
          list.push(childSubTree.component);
        else
          list.push(...getInternalInstanceChildren(childSubTree));
      });
    }
    return list.filter((child) => {
      var _a;
      return !isBeingDestroyed(child) && !((_a = child.type.devtools) == null ? void 0 : _a.hide);
    });
  }
  function getRootElementsFromComponentInstance(instance2) {
    if (isFragment(instance2))
      return getFragmentRootElements(instance2.subTree);
    return [instance2.subTree.el];
  }
  function getFragmentRootElements(vnode) {
    if (!vnode.children)
      return [];
    const list = [];
    for (let i = 0, l = vnode.children.length; i < l; i++) {
      const childVnode = vnode.children[i];
      if (childVnode.component)
        list.push(...getRootElementsFromComponentInstance(childVnode.component));
      else if (childVnode.el)
        list.push(childVnode.el);
    }
    return list;
  }
  function buildComponentsTree2(instance2) {
    return {
      name: getInstanceName(instance2),
      children: getInternalInstanceChildren(instance2.subTree).map(buildComponentsTree2),
      rootElements: getRootElementsFromComponentInstance(instance2),
      props: instance2.props
    };
  }
  return buildComponentsTree2(instance);
}
function buildComponentsTreeVue2(instance) {
  function getComponentName2(options) {
    const name = options.displayName || options.name || options._componentTag;
    if (name)
      return name;
    const file = options.__file;
    if (file)
      return classify(basename(file, ".vue"));
  }
  function getInstanceName(instance2) {
    const name = getComponentName2(instance2.$options || instance2.fnOptions || {});
    if (name)
      return name;
    return instance2.$root === instance2 ? "Root" : "Anonymous Component";
  }
  function getInternalInstanceChildren(instance2) {
    if (instance2.$children)
      return instance2.$children;
    if (Array.isArray(instance2.subTree.children))
      return instance2.subTree.children.filter((vnode) => !!vnode.component).map((vnode) => vnode.component);
    return [];
  }
  function buildComponentsTree2(instance2) {
    return {
      name: getInstanceName(instance2),
      children: getInternalInstanceChildren(instance2).map(buildComponentsTree2),
      rootElements: [instance2.$el],
      props: instance2._props
    };
  }
  return buildComponentsTree2(instance);
}
function filterComponentsTree2(treeNode, searchFn, result = []) {
  if (searchFn(treeNode))
    result.push(treeNode);
  for (const child of treeNode.children)
    filterComponentsTree2(child, searchFn, result);
  return result;
}
function findVueRoots(root, roots = []) {
  const document = root.ownerDocument || root;
  const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
  const vue2Roots = /* @__PURE__ */ new Set();
  do {
    const node = walker.currentNode;
    if (node.__vue__)
      vue2Roots.add(node.__vue__.$root);
    if (node.__vue_app__ && node._vnode && node._vnode.component)
      roots.push({ root: node._vnode.component, version: 3 });
    const shadowRoot = node instanceof Element ? node.shadowRoot : null;
    if (shadowRoot)
      findVueRoots(shadowRoot, roots);
  } while (walker.nextNode());
  for (const vue2root of vue2Roots) {
    roots.push({
      version: 2,
      root: vue2root
    });
  }
  return roots;
}
var VueEngine = {
  queryAll(scope, selector) {
    const document = scope.ownerDocument || scope;
    const { name, attributes } = parseAttributeSelector(selector, false);
    const vueRoots = findVueRoots(document);
    const trees = vueRoots.map((vueRoot) => vueRoot.version === 3 ? buildComponentsTreeVue3(vueRoot.root) : buildComponentsTreeVue2(vueRoot.root));
    const treeNodes = trees.map((tree) => filterComponentsTree2(tree, (treeNode) => {
      if (name && treeNode.name !== name)
        return false;
      if (treeNode.rootElements.some((rootElement) => !isInsideScope(scope, rootElement)))
        return false;
      for (const attr of attributes) {
        if (!matchesComponentAttribute(treeNode.props, attr))
          return false;
      }
      return true;
    })).flat();
    const allRootElements = /* @__PURE__ */ new Set();
    for (const treeNode of treeNodes) {
      for (const rootElement of treeNode.rootElements)
        allRootElements.add(rootElement);
    }
    return [...allRootElements];
  }
};

// packages/playwright-core/src/server/injected/roleSelectorEngine.ts
var kSupportedAttributes = ["selected", "checked", "pressed", "expanded", "level", "disabled", "name", "include-hidden"];
kSupportedAttributes.sort();
function validateSupportedRole(attr, roles, role) {
  if (!roles.includes(role))
    throw new Error(\`"\${attr}" attribute is only supported for roles: \${roles.slice().sort().map((role2) => \`"\${role2}"\`).join(", ")}\`);
}
function validateSupportedValues(attr, values) {
  if (attr.op !== "<truthy>" && !values.includes(attr.value))
    throw new Error(\`"\${attr.name}" must be one of \${values.map((v) => JSON.stringify(v)).join(", ")}\`);
}
function validateSupportedOp(attr, ops) {
  if (!ops.includes(attr.op))
    throw new Error(\`"\${attr.name}" does not support "\${attr.op}" matcher\`);
}
function validateAttributes(attrs, role) {
  const options = { role };
  for (const attr of attrs) {
    switch (attr.name) {
      case "checked": {
        validateSupportedRole(attr.name, kAriaCheckedRoles, role);
        validateSupportedValues(attr, [true, false, "mixed"]);
        validateSupportedOp(attr, ["<truthy>", "="]);
        options.checked = attr.op === "<truthy>" ? true : attr.value;
        break;
      }
      case "pressed": {
        validateSupportedRole(attr.name, kAriaPressedRoles, role);
        validateSupportedValues(attr, [true, false, "mixed"]);
        validateSupportedOp(attr, ["<truthy>", "="]);
        options.pressed = attr.op === "<truthy>" ? true : attr.value;
        break;
      }
      case "selected": {
        validateSupportedRole(attr.name, kAriaSelectedRoles, role);
        validateSupportedValues(attr, [true, false]);
        validateSupportedOp(attr, ["<truthy>", "="]);
        options.selected = attr.op === "<truthy>" ? true : attr.value;
        break;
      }
      case "expanded": {
        validateSupportedRole(attr.name, kAriaExpandedRoles, role);
        validateSupportedValues(attr, [true, false]);
        validateSupportedOp(attr, ["<truthy>", "="]);
        options.expanded = attr.op === "<truthy>" ? true : attr.value;
        break;
      }
      case "level": {
        validateSupportedRole(attr.name, kAriaLevelRoles, role);
        if (typeof attr.value === "string")
          attr.value = +attr.value;
        if (attr.op !== "=" || typeof attr.value !== "number" || Number.isNaN(attr.value))
          throw new Error(\`"level" attribute must be compared to a number\`);
        options.level = attr.value;
        break;
      }
      case "disabled": {
        validateSupportedValues(attr, [true, false]);
        validateSupportedOp(attr, ["<truthy>", "="]);
        options.disabled = attr.op === "<truthy>" ? true : attr.value;
        break;
      }
      case "name": {
        if (attr.op === "<truthy>")
          throw new Error(\`"name" attribute must have a value\`);
        if (typeof attr.value !== "string" && !(attr.value instanceof RegExp))
          throw new Error(\`"name" attribute must be a string or a regular expression\`);
        options.name = attr.value;
        options.nameOp = attr.op;
        options.exact = attr.caseSensitive;
        break;
      }
      case "include-hidden": {
        validateSupportedValues(attr, [true, false]);
        validateSupportedOp(attr, ["<truthy>", "="]);
        options.includeHidden = attr.op === "<truthy>" ? true : attr.value;
        break;
      }
      default: {
        throw new Error(\`Unknown attribute "\${attr.name}", must be one of \${kSupportedAttributes.map((a) => \`"\${a}"\`).join(", ")}.\`);
      }
    }
  }
  return options;
}
function queryRole(scope, options, internal) {
  const result = [];
  const match = (element) => {
    if (getAriaRole(element) !== options.role)
      return;
    if (options.selected !== void 0 && getAriaSelected(element) !== options.selected)
      return;
    if (options.checked !== void 0 && getAriaChecked(element) !== options.checked)
      return;
    if (options.pressed !== void 0 && getAriaPressed(element) !== options.pressed)
      return;
    if (options.expanded !== void 0 && getAriaExpanded(element) !== options.expanded)
      return;
    if (options.level !== void 0 && getAriaLevel(element) !== options.level)
      return;
    if (options.disabled !== void 0 && getAriaDisabled(element) !== options.disabled)
      return;
    if (!options.includeHidden) {
      const isHidden = isElementHiddenForAria(element);
      if (isHidden)
        return;
    }
    if (options.name !== void 0) {
      const accessibleName = normalizeWhiteSpace(getElementAccessibleName(element, !!options.includeHidden));
      if (typeof options.name === "string")
        options.name = normalizeWhiteSpace(options.name);
      if (internal && !options.exact && options.nameOp === "=")
        options.nameOp = "*=";
      if (!matchesAttributePart(accessibleName, { name: "", jsonPath: [], op: options.nameOp || "=", value: options.name, caseSensitive: !!options.exact }))
        return;
    }
    result.push(element);
  };
  const query = (root) => {
    const shadows = [];
    if (root.shadowRoot)
      shadows.push(root.shadowRoot);
    for (const element of root.querySelectorAll("*")) {
      match(element);
      if (element.shadowRoot)
        shadows.push(element.shadowRoot);
    }
    shadows.forEach(query);
  };
  query(scope);
  return result;
}
function createRoleEngine(internal) {
  return {
    queryAll: (scope, selector) => {
      const parsed = parseAttributeSelector(selector, true);
      const role = parsed.name.toLowerCase();
      if (!role)
        throw new Error(\`Role must not be empty\`);
      const options = validateAttributes(parsed.attributes, role);
      beginAriaCaches();
      try {
        return queryRole(scope, options, internal);
      } finally {
        endAriaCaches();
      }
    }
  };
}

// packages/playwright-core/src/server/injected/layoutSelectorUtils.ts
function boxRightOf(box1, box2, maxDistance) {
  const distance = box1.left - box2.right;
  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)
    return;
  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);
}
function boxLeftOf(box1, box2, maxDistance) {
  const distance = box2.left - box1.right;
  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)
    return;
  return distance + Math.max(box2.bottom - box1.bottom, 0) + Math.max(box1.top - box2.top, 0);
}
function boxAbove(box1, box2, maxDistance) {
  const distance = box2.top - box1.bottom;
  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)
    return;
  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);
}
function boxBelow(box1, box2, maxDistance) {
  const distance = box1.top - box2.bottom;
  if (distance < 0 || maxDistance !== void 0 && distance > maxDistance)
    return;
  return distance + Math.max(box1.left - box2.left, 0) + Math.max(box2.right - box1.right, 0);
}
function boxNear(box1, box2, maxDistance) {
  const kThreshold = maxDistance === void 0 ? 50 : maxDistance;
  let score = 0;
  if (box1.left - box2.right >= 0)
    score += box1.left - box2.right;
  if (box2.left - box1.right >= 0)
    score += box2.left - box1.right;
  if (box2.top - box1.bottom >= 0)
    score += box2.top - box1.bottom;
  if (box1.top - box2.bottom >= 0)
    score += box1.top - box2.bottom;
  return score > kThreshold ? void 0 : score;
}
var kLayoutSelectorNames = ["left-of", "right-of", "above", "below", "near"];
function layoutSelectorScore(name, element, inner, maxDistance) {
  const box = element.getBoundingClientRect();
  const scorer = { "left-of": boxLeftOf, "right-of": boxRightOf, "above": boxAbove, "below": boxBelow, "near": boxNear }[name];
  let bestScore;
  for (const e of inner) {
    if (e === element)
      continue;
    const score = scorer(box, e.getBoundingClientRect(), maxDistance);
    if (score === void 0)
      continue;
    if (bestScore === void 0 || score < bestScore)
      bestScore = score;
  }
  return bestScore;
}

// packages/playwright-core/src/server/injected/selectorEvaluator.ts
var SelectorEvaluatorImpl = class {
  constructor(extraEngines) {
    this._engines = /* @__PURE__ */ new Map();
    this._cacheQueryCSS = /* @__PURE__ */ new Map();
    this._cacheMatches = /* @__PURE__ */ new Map();
    this._cacheQuery = /* @__PURE__ */ new Map();
    this._cacheMatchesSimple = /* @__PURE__ */ new Map();
    this._cacheMatchesParents = /* @__PURE__ */ new Map();
    this._cacheCallMatches = /* @__PURE__ */ new Map();
    this._cacheCallQuery = /* @__PURE__ */ new Map();
    this._cacheQuerySimple = /* @__PURE__ */ new Map();
    this._cacheText = /* @__PURE__ */ new Map();
    this._retainCacheCounter = 0;
    for (const [name, engine] of extraEngines)
      this._engines.set(name, engine);
    this._engines.set("not", notEngine);
    this._engines.set("is", isEngine);
    this._engines.set("where", isEngine);
    this._engines.set("has", hasEngine);
    this._engines.set("scope", scopeEngine);
    this._engines.set("light", lightEngine);
    this._engines.set("visible", visibleEngine);
    this._engines.set("text", textEngine);
    this._engines.set("text-is", textIsEngine);
    this._engines.set("text-matches", textMatchesEngine);
    this._engines.set("has-text", hasTextEngine);
    this._engines.set("right-of", createLayoutEngine("right-of"));
    this._engines.set("left-of", createLayoutEngine("left-of"));
    this._engines.set("above", createLayoutEngine("above"));
    this._engines.set("below", createLayoutEngine("below"));
    this._engines.set("near", createLayoutEngine("near"));
    this._engines.set("nth-match", nthMatchEngine);
    const allNames = [...this._engines.keys()];
    allNames.sort();
    const parserNames = [...customCSSNames];
    parserNames.sort();
    if (allNames.join("|") !== parserNames.join("|"))
      throw new Error(\`Please keep customCSSNames in sync with evaluator engines: \${allNames.join("|")} vs \${parserNames.join("|")}\`);
  }
  begin() {
    ++this._retainCacheCounter;
  }
  end() {
    --this._retainCacheCounter;
    if (!this._retainCacheCounter) {
      this._cacheQueryCSS.clear();
      this._cacheMatches.clear();
      this._cacheQuery.clear();
      this._cacheMatchesSimple.clear();
      this._cacheMatchesParents.clear();
      this._cacheCallMatches.clear();
      this._cacheCallQuery.clear();
      this._cacheQuerySimple.clear();
      this._cacheText.clear();
    }
  }
  _cached(cache, main, rest, cb) {
    if (!cache.has(main))
      cache.set(main, []);
    const entries = cache.get(main);
    const entry = entries.find((e) => rest.every((value, index) => e.rest[index] === value));
    if (entry)
      return entry.result;
    const result = cb();
    entries.push({ rest, result });
    return result;
  }
  _checkSelector(s) {
    const wellFormed = typeof s === "object" && s && (Array.isArray(s) || "simples" in s && s.simples.length);
    if (!wellFormed)
      throw new Error(\`Malformed selector "\${s}"\`);
    return s;
  }
  matches(element, s, context) {
    const selector = this._checkSelector(s);
    this.begin();
    try {
      return this._cached(this._cacheMatches, element, [selector, context.scope, context.pierceShadow, context.originalScope], () => {
        if (Array.isArray(selector))
          return this._matchesEngine(isEngine, element, selector, context);
        if (this._hasScopeClause(selector))
          context = this._expandContextForScopeMatching(context);
        if (!this._matchesSimple(element, selector.simples[selector.simples.length - 1].selector, context))
          return false;
        return this._matchesParents(element, selector, selector.simples.length - 2, context);
      });
    } finally {
      this.end();
    }
  }
  query(context, s) {
    const selector = this._checkSelector(s);
    this.begin();
    try {
      return this._cached(this._cacheQuery, selector, [context.scope, context.pierceShadow, context.originalScope], () => {
        if (Array.isArray(selector))
          return this._queryEngine(isEngine, context, selector);
        if (this._hasScopeClause(selector))
          context = this._expandContextForScopeMatching(context);
        const previousScoreMap = this._scoreMap;
        this._scoreMap = /* @__PURE__ */ new Map();
        let elements = this._querySimple(context, selector.simples[selector.simples.length - 1].selector);
        elements = elements.filter((element) => this._matchesParents(element, selector, selector.simples.length - 2, context));
        if (this._scoreMap.size) {
          elements.sort((a, b) => {
            const aScore = this._scoreMap.get(a);
            const bScore = this._scoreMap.get(b);
            if (aScore === bScore)
              return 0;
            if (aScore === void 0)
              return 1;
            if (bScore === void 0)
              return -1;
            return aScore - bScore;
          });
        }
        this._scoreMap = previousScoreMap;
        return elements;
      });
    } finally {
      this.end();
    }
  }
  _markScore(element, score) {
    if (this._scoreMap)
      this._scoreMap.set(element, score);
  }
  _hasScopeClause(selector) {
    return selector.simples.some((simple) => simple.selector.functions.some((f) => f.name === "scope"));
  }
  _expandContextForScopeMatching(context) {
    if (context.scope.nodeType !== 1)
      return context;
    const scope = parentElementOrShadowHost(context.scope);
    if (!scope)
      return context;
    return { ...context, scope, originalScope: context.originalScope || context.scope };
  }
  _matchesSimple(element, simple, context) {
    return this._cached(this._cacheMatchesSimple, element, [simple, context.scope, context.pierceShadow, context.originalScope], () => {
      if (element === context.scope)
        return false;
      if (simple.css && !this._matchesCSS(element, simple.css))
        return false;
      for (const func of simple.functions) {
        if (!this._matchesEngine(this._getEngine(func.name), element, func.args, context))
          return false;
      }
      return true;
    });
  }
  _querySimple(context, simple) {
    if (!simple.functions.length)
      return this._queryCSS(context, simple.css || "*");
    return this._cached(this._cacheQuerySimple, simple, [context.scope, context.pierceShadow, context.originalScope], () => {
      let css = simple.css;
      const funcs = simple.functions;
      if (css === "*" && funcs.length)
        css = void 0;
      let elements;
      let firstIndex = -1;
      if (css !== void 0) {
        elements = this._queryCSS(context, css);
      } else {
        firstIndex = funcs.findIndex((func) => this._getEngine(func.name).query !== void 0);
        if (firstIndex === -1)
          firstIndex = 0;
        elements = this._queryEngine(this._getEngine(funcs[firstIndex].name), context, funcs[firstIndex].args);
      }
      for (let i = 0; i < funcs.length; i++) {
        if (i === firstIndex)
          continue;
        const engine = this._getEngine(funcs[i].name);
        if (engine.matches !== void 0)
          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));
      }
      for (let i = 0; i < funcs.length; i++) {
        if (i === firstIndex)
          continue;
        const engine = this._getEngine(funcs[i].name);
        if (engine.matches === void 0)
          elements = elements.filter((e) => this._matchesEngine(engine, e, funcs[i].args, context));
      }
      return elements;
    });
  }
  _matchesParents(element, complex, index, context) {
    if (index < 0)
      return true;
    return this._cached(this._cacheMatchesParents, element, [complex, index, context.scope, context.pierceShadow, context.originalScope], () => {
      const { selector: simple, combinator } = complex.simples[index];
      if (combinator === ">") {
        const parent = parentElementOrShadowHostInContext(element, context);
        if (!parent || !this._matchesSimple(parent, simple, context))
          return false;
        return this._matchesParents(parent, complex, index - 1, context);
      }
      if (combinator === "+") {
        const previousSibling = previousSiblingInContext(element, context);
        if (!previousSibling || !this._matchesSimple(previousSibling, simple, context))
          return false;
        return this._matchesParents(previousSibling, complex, index - 1, context);
      }
      if (combinator === "") {
        let parent = parentElementOrShadowHostInContext(element, context);
        while (parent) {
          if (this._matchesSimple(parent, simple, context)) {
            if (this._matchesParents(parent, complex, index - 1, context))
              return true;
            if (complex.simples[index - 1].combinator === "")
              break;
          }
          parent = parentElementOrShadowHostInContext(parent, context);
        }
        return false;
      }
      if (combinator === "~") {
        let previousSibling = previousSiblingInContext(element, context);
        while (previousSibling) {
          if (this._matchesSimple(previousSibling, simple, context)) {
            if (this._matchesParents(previousSibling, complex, index - 1, context))
              return true;
            if (complex.simples[index - 1].combinator === "~")
              break;
          }
          previousSibling = previousSiblingInContext(previousSibling, context);
        }
        return false;
      }
      if (combinator === ">=") {
        let parent = element;
        while (parent) {
          if (this._matchesSimple(parent, simple, context)) {
            if (this._matchesParents(parent, complex, index - 1, context))
              return true;
            if (complex.simples[index - 1].combinator === "")
              break;
          }
          parent = parentElementOrShadowHostInContext(parent, context);
        }
        return false;
      }
      throw new Error(\`Unsupported combinator "\${combinator}"\`);
    });
  }
  _matchesEngine(engine, element, args, context) {
    if (engine.matches)
      return this._callMatches(engine, element, args, context);
    if (engine.query)
      return this._callQuery(engine, args, context).includes(element);
    throw new Error(\`Selector engine should implement "matches" or "query"\`);
  }
  _queryEngine(engine, context, args) {
    if (engine.query)
      return this._callQuery(engine, args, context);
    if (engine.matches)
      return this._queryCSS(context, "*").filter((element) => this._callMatches(engine, element, args, context));
    throw new Error(\`Selector engine should implement "matches" or "query"\`);
  }
  _callMatches(engine, element, args, context) {
    return this._cached(this._cacheCallMatches, element, [engine, context.scope, context.pierceShadow, context.originalScope, ...args], () => {
      return engine.matches(element, args, context, this);
    });
  }
  _callQuery(engine, args, context) {
    return this._cached(this._cacheCallQuery, engine, [context.scope, context.pierceShadow, context.originalScope, ...args], () => {
      return engine.query(context, args, this);
    });
  }
  _matchesCSS(element, css) {
    return element.matches(css);
  }
  _queryCSS(context, css) {
    return this._cached(this._cacheQueryCSS, css, [context.scope, context.pierceShadow, context.originalScope], () => {
      let result = [];
      function query(root) {
        result = result.concat([...root.querySelectorAll(css)]);
        if (!context.pierceShadow)
          return;
        if (root.shadowRoot)
          query(root.shadowRoot);
        for (const element of root.querySelectorAll("*")) {
          if (element.shadowRoot)
            query(element.shadowRoot);
        }
      }
      query(context.scope);
      return result;
    });
  }
  _getEngine(name) {
    const engine = this._engines.get(name);
    if (!engine)
      throw new Error(\`Unknown selector engine "\${name}"\`);
    return engine;
  }
};
var isEngine = {
  matches(element, args, context, evaluator) {
    if (args.length === 0)
      throw new Error(\`"is" engine expects non-empty selector list\`);
    return args.some((selector) => evaluator.matches(element, selector, context));
  },
  query(context, args, evaluator) {
    if (args.length === 0)
      throw new Error(\`"is" engine expects non-empty selector list\`);
    let elements = [];
    for (const arg of args)
      elements = elements.concat(evaluator.query(context, arg));
    return args.length === 1 ? elements : sortInDOMOrder(elements);
  }
};
var hasEngine = {
  matches(element, args, context, evaluator) {
    if (args.length === 0)
      throw new Error(\`"has" engine expects non-empty selector list\`);
    return evaluator.query({ ...context, scope: element }, args).length > 0;
  }
  // TODO: we can implement efficient "query" by matching "args" and returning
  // all parents/descendants, just have to be careful with the ":scope" matching.
};
var scopeEngine = {
  matches(element, args, context, evaluator) {
    if (args.length !== 0)
      throw new Error(\`"scope" engine expects no arguments\`);
    const actualScope = context.originalScope || context.scope;
    if (actualScope.nodeType === 9)
      return element === actualScope.documentElement;
    return element === actualScope;
  },
  query(context, args, evaluator) {
    if (args.length !== 0)
      throw new Error(\`"scope" engine expects no arguments\`);
    const actualScope = context.originalScope || context.scope;
    if (actualScope.nodeType === 9) {
      const root = actualScope.documentElement;
      return root ? [root] : [];
    }
    if (actualScope.nodeType === 1)
      return [actualScope];
    return [];
  }
};
var notEngine = {
  matches(element, args, context, evaluator) {
    if (args.length === 0)
      throw new Error(\`"not" engine expects non-empty selector list\`);
    return !evaluator.matches(element, args, context);
  }
};
var lightEngine = {
  query(context, args, evaluator) {
    return evaluator.query({ ...context, pierceShadow: false }, args);
  },
  matches(element, args, context, evaluator) {
    return evaluator.matches(element, args, { ...context, pierceShadow: false });
  }
};
var visibleEngine = {
  matches(element, args, context, evaluator) {
    if (args.length)
      throw new Error(\`"visible" engine expects no arguments\`);
    return isElementVisible(element);
  }
};
var textEngine = {
  matches(element, args, context, evaluator) {
    if (args.length !== 1 || typeof args[0] !== "string")
      throw new Error(\`"text" engine expects a single string\`);
    const text = normalizeWhiteSpace(args[0]).toLowerCase();
    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);
    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";
  }
};
var textIsEngine = {
  matches(element, args, context, evaluator) {
    if (args.length !== 1 || typeof args[0] !== "string")
      throw new Error(\`"text-is" engine expects a single string\`);
    const text = normalizeWhiteSpace(args[0]);
    const matcher = (elementText2) => {
      if (!text && !elementText2.immediate.length)
        return true;
      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === text);
    };
    return elementMatchesText(evaluator._cacheText, element, matcher) !== "none";
  }
};
var textMatchesEngine = {
  matches(element, args, context, evaluator) {
    if (args.length === 0 || typeof args[0] !== "string" || args.length > 2 || args.length === 2 && typeof args[1] !== "string")
      throw new Error(\`"text-matches" engine expects a regexp body and optional regexp flags\`);
    const re = new RegExp(args[0], args.length === 2 ? args[1] : void 0);
    const matcher = (elementText2) => re.test(elementText2.full);
    return elementMatchesText(evaluator._cacheText, element, matcher) === "self";
  }
};
var hasTextEngine = {
  matches(element, args, context, evaluator) {
    if (args.length !== 1 || typeof args[0] !== "string")
      throw new Error(\`"has-text" engine expects a single string\`);
    if (shouldSkipForTextMatching(element))
      return false;
    const text = normalizeWhiteSpace(args[0]).toLowerCase();
    const matcher = (elementText2) => elementText2.normalized.toLowerCase().includes(text);
    return matcher(elementText(evaluator._cacheText, element));
  }
};
function createLayoutEngine(name) {
  return {
    matches(element, args, context, evaluator) {
      const maxDistance = args.length && typeof args[args.length - 1] === "number" ? args[args.length - 1] : void 0;
      const queryArgs = maxDistance === void 0 ? args : args.slice(0, args.length - 1);
      if (args.length < 1 + (maxDistance === void 0 ? 0 : 1))
        throw new Error(\`"\${name}" engine expects a selector list and optional maximum distance in pixels\`);
      const inner = evaluator.query(context, queryArgs);
      const score = layoutSelectorScore(name, element, inner, maxDistance);
      if (score === void 0)
        return false;
      evaluator._markScore(element, score);
      return true;
    }
  };
}
var nthMatchEngine = {
  query(context, args, evaluator) {
    let index = args[args.length - 1];
    if (args.length < 2)
      throw new Error(\`"nth-match" engine expects non-empty selector list and an index argument\`);
    if (typeof index !== "number" || index < 1)
      throw new Error(\`"nth-match" engine expects a one-based index as the last argument\`);
    const elements = isEngine.query(context, args.slice(0, args.length - 1), evaluator);
    index--;
    return index < elements.length ? [elements[index]] : [];
  }
};
function parentElementOrShadowHostInContext(element, context) {
  if (element === context.scope)
    return;
  if (!context.pierceShadow)
    return element.parentElement || void 0;
  return parentElementOrShadowHost(element);
}
function previousSiblingInContext(element, context) {
  if (element === context.scope)
    return;
  return element.previousElementSibling || void 0;
}
function sortInDOMOrder(elements) {
  const elementToEntry = /* @__PURE__ */ new Map();
  const roots = [];
  const result = [];
  function append(element) {
    let entry = elementToEntry.get(element);
    if (entry)
      return entry;
    const parent = parentElementOrShadowHost(element);
    if (parent) {
      const parentEntry = append(parent);
      parentEntry.children.push(element);
    } else {
      roots.push(element);
    }
    entry = { children: [], taken: false };
    elementToEntry.set(element, entry);
    return entry;
  }
  for (const e of elements)
    append(e).taken = true;
  function visit(element) {
    const entry = elementToEntry.get(element);
    if (entry.taken)
      result.push(element);
    if (entry.children.length > 1) {
      const set = new Set(entry.children);
      entry.children = [];
      let child = element.firstElementChild;
      while (child && entry.children.length < set.size) {
        if (set.has(child))
          entry.children.push(child);
        child = child.nextElementSibling;
      }
      child = element.shadowRoot ? element.shadowRoot.firstElementChild : null;
      while (child && entry.children.length < set.size) {
        if (set.has(child))
          entry.children.push(child);
        child = child.nextElementSibling;
      }
    }
    entry.children.forEach(visit);
  }
  roots.forEach(visit);
  return result;
}

// packages/playwright-core/src/server/injected/selectorGenerator.ts
var cacheAllowText = /* @__PURE__ */ new Map();
var cacheDisallowText = /* @__PURE__ */ new Map();
var kTextScoreRange = 10;
var kExactPenalty = kTextScoreRange / 2;
var kTestIdScore = 1;
var kOtherTestIdScore = 2;
var kIframeByAttributeScore = 10;
var kBeginPenalizedScore = 50;
var kPlaceholderScore = 100;
var kLabelScore = 120;
var kRoleWithNameScore = 140;
var kAltTextScore = 160;
var kTextScore = 180;
var kTitleScore = 200;
var kTextScoreRegex = 250;
var kPlaceholderScoreExact = kPlaceholderScore + kExactPenalty;
var kLabelScoreExact = kLabelScore + kExactPenalty;
var kRoleWithNameScoreExact = kRoleWithNameScore + kExactPenalty;
var kAltTextScoreExact = kAltTextScore + kExactPenalty;
var kTextScoreExact = kTextScore + kExactPenalty;
var kTitleScoreExact = kTitleScore + kExactPenalty;
var kEndPenalizedScore = 300;
var kCSSIdScore = 500;
var kRoleWithoutNameScore = 510;
var kCSSInputTypeNameScore = 520;
var kCSSTagNameScore = 530;
var kNthScore = 1e4;
var kCSSFallbackScore = 1e7;
var kScoreThresholdForTextExpect = 1e3;
function generateSelector(injectedScript, targetElement, options) {
  var _a;
  injectedScript._evaluator.begin();
  beginAriaCaches();
  try {
    let selectors = [];
    if (options.forTextExpect) {
      let targetTokens = cssFallback(injectedScript, targetElement.ownerDocument.documentElement, options);
      for (let element = targetElement; element; element = parentElementOrShadowHost(element)) {
        const tokens = generateSelectorFor(injectedScript, element, { ...options, noText: true });
        if (!tokens)
          continue;
        const score = combineScores(tokens);
        if (score <= kScoreThresholdForTextExpect) {
          targetTokens = tokens;
          break;
        }
      }
      selectors = [joinTokens(targetTokens)];
    } else {
      if (!targetElement.matches("input,textarea,select") && !targetElement.isContentEditable) {
        const interactiveParent = closestCrossShadow(targetElement, "button,select,input,[role=button],[role=checkbox],[role=radio],a,[role=link]", options.root);
        if (interactiveParent && isElementVisible(interactiveParent))
          targetElement = interactiveParent;
      }
      if (options.multiple) {
        const withText = generateSelectorFor(injectedScript, targetElement, options);
        const withoutText = generateSelectorFor(injectedScript, targetElement, { ...options, noText: true });
        let tokens = [withText, withoutText];
        cacheAllowText.clear();
        cacheDisallowText.clear();
        if (withText && hasCSSIdToken(withText))
          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noCSSId: true }));
        if (withoutText && hasCSSIdToken(withoutText))
          tokens.push(generateSelectorFor(injectedScript, targetElement, { ...options, noText: true, noCSSId: true }));
        tokens = tokens.filter(Boolean);
        if (!tokens.length) {
          const css = cssFallback(injectedScript, targetElement, options);
          tokens.push(css);
          if (hasCSSIdToken(css))
            tokens.push(cssFallback(injectedScript, targetElement, { ...options, noCSSId: true }));
        }
        selectors = [...new Set(tokens.map((t) => joinTokens(t)))];
      } else {
        const targetTokens = generateSelectorFor(injectedScript, targetElement, options) || cssFallback(injectedScript, targetElement, options);
        selectors = [joinTokens(targetTokens)];
      }
    }
    const selector = selectors[0];
    const parsedSelector = injectedScript.parseSelector(selector);
    return {
      selector,
      selectors,
      elements: injectedScript.querySelectorAll(parsedSelector, (_a = options.root) != null ? _a : targetElement.ownerDocument)
    };
  } finally {
    cacheAllowText.clear();
    cacheDisallowText.clear();
    endAriaCaches();
    injectedScript._evaluator.end();
  }
}
function filterRegexTokens(textCandidates) {
  return textCandidates.filter((c) => c[0].selector[0] !== "/");
}
function generateSelectorFor(injectedScript, targetElement, options) {
  if (options.root && !isInsideScope(options.root, targetElement))
    throw new Error(\`Target element must belong to the root's subtree\`);
  if (targetElement === options.root)
    return [{ engine: "css", selector: ":scope", score: 1 }];
  if (targetElement.ownerDocument.documentElement === targetElement)
    return [{ engine: "css", selector: "html", score: 1 }];
  const calculate = (element, allowText) => {
    var _a;
    const allowNthMatch = element === targetElement;
    let textCandidates = allowText ? buildTextCandidates(injectedScript, element, element === targetElement) : [];
    if (element !== targetElement) {
      textCandidates = filterRegexTokens(textCandidates);
    }
    const noTextCandidates = buildNoTextCandidates(injectedScript, element, options).filter((token) => !options.omitInternalEngines || !token.engine.startsWith("internal:")).map((token) => [token]);
    let result = chooseFirstSelector(injectedScript, (_a = options.root) != null ? _a : targetElement.ownerDocument, element, [...textCandidates, ...noTextCandidates], allowNthMatch);
    textCandidates = filterRegexTokens(textCandidates);
    const checkWithText = (textCandidatesToUse) => {
      const allowParentText = allowText && !textCandidatesToUse.length;
      const candidates = [...textCandidatesToUse, ...noTextCandidates].filter((c) => {
        if (!result)
          return true;
        return combineScores(c) < combineScores(result);
      });
      let bestPossibleInParent = candidates[0];
      if (!bestPossibleInParent)
        return;
      for (let parent = parentElementOrShadowHost(element); parent && parent !== options.root; parent = parentElementOrShadowHost(parent)) {
        const parentTokens = calculateCached(parent, allowParentText);
        if (!parentTokens)
          continue;
        if (result && combineScores([...parentTokens, ...bestPossibleInParent]) >= combineScores(result))
          continue;
        bestPossibleInParent = chooseFirstSelector(injectedScript, parent, element, candidates, allowNthMatch);
        if (!bestPossibleInParent)
          return;
        const combined = [...parentTokens, ...bestPossibleInParent];
        if (!result || combineScores(combined) < combineScores(result))
          result = combined;
      }
    };
    checkWithText(textCandidates);
    if (element === targetElement && textCandidates.length)
      checkWithText([]);
    return result;
  };
  const calculateCached = (element, allowText) => {
    const cache = allowText ? cacheAllowText : cacheDisallowText;
    let value = cache.get(element);
    if (value === void 0) {
      value = calculate(element, allowText);
      cache.set(element, value);
    }
    return value;
  };
  return calculate(targetElement, !options.noText);
}
function buildNoTextCandidates(injectedScript, element, options) {
  const candidates = [];
  {
    for (const attr of ["data-testid", "data-test-id", "data-test"]) {
      if (attr !== options.testIdAttributeName && element.getAttribute(attr))
        candidates.push({ engine: "css", selector: \`[\${attr}=\${quoteCSSAttributeValue(element.getAttribute(attr))}]\`, score: kOtherTestIdScore });
    }
    if (!options.noCSSId) {
      const idAttr = element.getAttribute("id");
      if (idAttr && !isGuidLike(idAttr))
        candidates.push({ engine: "css", selector: makeSelectorForId(idAttr), score: kCSSIdScore });
    }
    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore });
  }
  if (element.nodeName === "IFRAME") {
    for (const attribute of ["name", "title"]) {
      if (element.getAttribute(attribute))
        candidates.push({ engine: "css", selector: \`\${cssEscape(element.nodeName.toLowerCase())}[\${attribute}=\${quoteCSSAttributeValue(element.getAttribute(attribute))}]\`, score: kIframeByAttributeScore });
    }
    if (element.getAttribute(options.testIdAttributeName))
      candidates.push({ engine: "css", selector: \`[\${options.testIdAttributeName}=\${quoteCSSAttributeValue(element.getAttribute(options.testIdAttributeName))}]\`, score: kTestIdScore });
    penalizeScoreForLength([candidates]);
    return candidates;
  }
  if (element.getAttribute(options.testIdAttributeName))
    candidates.push({ engine: "internal:testid", selector: \`[\${options.testIdAttributeName}=\${escapeForAttributeSelector(element.getAttribute(options.testIdAttributeName), true)}]\`, score: kTestIdScore });
  if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
    const input = element;
    if (input.placeholder) {
      candidates.push({ engine: "internal:attr", selector: \`[placeholder=\${escapeForAttributeSelector(input.placeholder, true)}]\`, score: kPlaceholderScoreExact });
      for (const alternative of suitableTextAlternatives(input.placeholder))
        candidates.push({ engine: "internal:attr", selector: \`[placeholder=\${escapeForAttributeSelector(alternative.text, false)}]\`, score: kPlaceholderScore - alternative.scoreBouns });
    }
  }
  const labels = getElementLabels(injectedScript._evaluator._cacheText, element);
  for (const label of labels) {
    const labelText = label.normalized;
    candidates.push({ engine: "internal:label", selector: escapeForTextSelector(labelText, true), score: kLabelScoreExact });
    for (const alternative of suitableTextAlternatives(labelText))
      candidates.push({ engine: "internal:label", selector: escapeForTextSelector(alternative.text, false), score: kLabelScore - alternative.scoreBouns });
  }
  const ariaRole = getAriaRole(element);
  if (ariaRole && !["none", "presentation"].includes(ariaRole))
    candidates.push({ engine: "internal:role", selector: ariaRole, score: kRoleWithoutNameScore });
  if (element.getAttribute("name") && ["BUTTON", "FORM", "FIELDSET", "FRAME", "IFRAME", "INPUT", "KEYGEN", "OBJECT", "OUTPUT", "SELECT", "TEXTAREA", "MAP", "META", "PARAM"].includes(element.nodeName))
    candidates.push({ engine: "css", selector: \`\${cssEscape(element.nodeName.toLowerCase())}[name=\${quoteCSSAttributeValue(element.getAttribute("name"))}]\`, score: kCSSInputTypeNameScore });
  if (["INPUT", "TEXTAREA"].includes(element.nodeName) && element.getAttribute("type") !== "hidden") {
    if (element.getAttribute("type"))
      candidates.push({ engine: "css", selector: \`\${cssEscape(element.nodeName.toLowerCase())}[type=\${quoteCSSAttributeValue(element.getAttribute("type"))}]\`, score: kCSSInputTypeNameScore });
  }
  if (["INPUT", "TEXTAREA", "SELECT"].includes(element.nodeName) && element.getAttribute("type") !== "hidden")
    candidates.push({ engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSInputTypeNameScore + 1 });
  penalizeScoreForLength([candidates]);
  return candidates;
}
function buildTextCandidates(injectedScript, element, isTargetNode) {
  if (element.nodeName === "SELECT")
    return [];
  const candidates = [];
  const title = element.getAttribute("title");
  if (title) {
    candidates.push([{ engine: "internal:attr", selector: \`[title=\${escapeForAttributeSelector(title, true)}]\`, score: kTitleScoreExact }]);
    for (const alternative of suitableTextAlternatives(title))
      candidates.push([{ engine: "internal:attr", selector: \`[title=\${escapeForAttributeSelector(alternative.text, false)}]\`, score: kTitleScore - alternative.scoreBouns }]);
  }
  const alt = element.getAttribute("alt");
  if (alt && ["APPLET", "AREA", "IMG", "INPUT"].includes(element.nodeName)) {
    candidates.push([{ engine: "internal:attr", selector: \`[alt=\${escapeForAttributeSelector(alt, true)}]\`, score: kAltTextScoreExact }]);
    for (const alternative of suitableTextAlternatives(alt))
      candidates.push([{ engine: "internal:attr", selector: \`[alt=\${escapeForAttributeSelector(alternative.text, false)}]\`, score: kAltTextScore - alternative.scoreBouns }]);
  }
  const text = elementText(injectedScript._evaluator._cacheText, element).normalized;
  if (text) {
    const alternatives = suitableTextAlternatives(text);
    if (isTargetNode) {
      if (text.length <= 80)
        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(text, true), score: kTextScoreExact }]);
      for (const alternative of alternatives)
        candidates.push([{ engine: "internal:text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);
    }
    const cssToken = { engine: "css", selector: cssEscape(element.nodeName.toLowerCase()), score: kCSSTagNameScore };
    for (const alternative of alternatives)
      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(alternative.text, false), score: kTextScore - alternative.scoreBouns }]);
    if (text.length <= 80) {
      const re = new RegExp("^" + escapeRegExp(text) + "$");
      candidates.push([cssToken, { engine: "internal:has-text", selector: escapeForTextSelector(re, false), score: kTextScoreRegex }]);
    }
  }
  const ariaRole = getAriaRole(element);
  if (ariaRole && !["none", "presentation"].includes(ariaRole)) {
    const ariaName = getElementAccessibleName(element, false);
    if (ariaName) {
      candidates.push([{ engine: "internal:role", selector: \`\${ariaRole}[name=\${escapeForAttributeSelector(ariaName, true)}]\`, score: kRoleWithNameScoreExact }]);
      for (const alternative of suitableTextAlternatives(ariaName))
        candidates.push([{ engine: "internal:role", selector: \`\${ariaRole}[name=\${escapeForAttributeSelector(alternative.text, false)}]\`, score: kRoleWithNameScore - alternative.scoreBouns }]);
    }
  }
  penalizeScoreForLength(candidates);
  return candidates;
}
function makeSelectorForId(id) {
  return /^[a-zA-Z][a-zA-Z0-9\\-\\_]+$/.test(id) ? "#" + id : \`[id="\${cssEscape(id)}"]\`;
}
function hasCSSIdToken(tokens) {
  return tokens.some((token) => token.engine === "css" && (token.selector.startsWith("#") || token.selector.startsWith('[id="')));
}
function cssFallback(injectedScript, targetElement, options) {
  var _a;
  const root = (_a = options.root) != null ? _a : targetElement.ownerDocument;
  const tokens = [];
  function uniqueCSSSelector(prefix) {
    const path = tokens.slice();
    if (prefix)
      path.unshift(prefix);
    const selector = path.join(" > ");
    const parsedSelector = injectedScript.parseSelector(selector);
    const node = injectedScript.querySelector(parsedSelector, root, false);
    return node === targetElement ? selector : void 0;
  }
  function makeStrict(selector) {
    const token = { engine: "css", selector, score: kCSSFallbackScore };
    const parsedSelector = injectedScript.parseSelector(selector);
    const elements = injectedScript.querySelectorAll(parsedSelector, root);
    if (elements.length === 1)
      return [token];
    const nth = { engine: "nth", selector: String(elements.indexOf(targetElement)), score: kNthScore };
    return [token, nth];
  }
  for (let element = targetElement; element && element !== root; element = parentElementOrShadowHost(element)) {
    const nodeName = element.nodeName.toLowerCase();
    let bestTokenForLevel = "";
    if (element.id && !options.noCSSId) {
      const token = makeSelectorForId(element.id);
      const selector = uniqueCSSSelector(token);
      if (selector)
        return makeStrict(selector);
      bestTokenForLevel = token;
    }
    const parent = element.parentNode;
    const classes = [...element.classList];
    for (let i = 0; i < classes.length; ++i) {
      const token = "." + cssEscape(classes.slice(0, i + 1).join("."));
      const selector = uniqueCSSSelector(token);
      if (selector)
        return makeStrict(selector);
      if (!bestTokenForLevel && parent) {
        const sameClassSiblings = parent.querySelectorAll(token);
        if (sameClassSiblings.length === 1)
          bestTokenForLevel = token;
      }
    }
    if (parent) {
      const siblings = [...parent.children];
      const sameTagSiblings = siblings.filter((sibling) => sibling.nodeName.toLowerCase() === nodeName);
      const token = sameTagSiblings.indexOf(element) === 0 ? cssEscape(nodeName) : \`\${cssEscape(nodeName)}:nth-child(\${1 + siblings.indexOf(element)})\`;
      const selector = uniqueCSSSelector(token);
      if (selector)
        return makeStrict(selector);
      if (!bestTokenForLevel)
        bestTokenForLevel = token;
    } else if (!bestTokenForLevel) {
      bestTokenForLevel = cssEscape(nodeName);
    }
    tokens.unshift(bestTokenForLevel);
  }
  return makeStrict(uniqueCSSSelector());
}
function penalizeScoreForLength(groups) {
  for (const group of groups) {
    for (const token of group) {
      if (token.score > kBeginPenalizedScore && token.score < kEndPenalizedScore)
        token.score += Math.min(kTextScoreRange, token.selector.length / 10 | 0);
    }
  }
}
function joinTokens(tokens) {
  const parts = [];
  let lastEngine = "";
  for (const { engine, selector } of tokens) {
    if (parts.length && (lastEngine !== "css" || engine !== "css" || selector.startsWith(":nth-match(")))
      parts.push(">>");
    lastEngine = engine;
    if (engine === "css")
      parts.push(selector);
    else
      parts.push(\`\${engine}=\${selector}\`);
  }
  return parts.join(" ");
}
function combineScores(tokens) {
  let score = 0;
  for (let i = 0; i < tokens.length; i++)
    score += tokens[i].score * (tokens.length - i);
  return score;
}
function chooseFirstSelector(injectedScript, scope, targetElement, selectors, allowNthMatch) {
  const joined = selectors.map((tokens) => ({ tokens, score: combineScores(tokens) }));
  joined.sort((a, b) => a.score - b.score);
  let bestWithIndex = null;
  for (const { tokens } of joined) {
    const parsedSelector = injectedScript.parseSelector(joinTokens(tokens));
    const result = injectedScript.querySelectorAll(parsedSelector, scope);
    if (result[0] === targetElement && result.length === 1) {
      return tokens;
    }
    const index = result.indexOf(targetElement);
    if (!allowNthMatch || bestWithIndex || index === -1 || result.length > 5)
      continue;
    const nth = { engine: "nth", selector: String(index), score: kNthScore };
    bestWithIndex = [...tokens, nth];
  }
  return bestWithIndex;
}
function isGuidLike(id) {
  let lastCharacterType;
  let transitionCount = 0;
  for (let i = 0; i < id.length; ++i) {
    const c = id[i];
    let characterType;
    if (c === "-" || c === "_")
      continue;
    if (c >= "a" && c <= "z")
      characterType = "lower";
    else if (c >= "A" && c <= "Z")
      characterType = "upper";
    else if (c >= "0" && c <= "9")
      characterType = "digit";
    else
      characterType = "other";
    if (characterType === "lower" && lastCharacterType === "upper") {
      lastCharacterType = characterType;
      continue;
    }
    if (lastCharacterType && lastCharacterType !== characterType)
      ++transitionCount;
    lastCharacterType = characterType;
  }
  return transitionCount >= id.length / 4;
}
function trimWordBoundary(text, maxLength) {
  if (text.length <= maxLength)
    return text;
  text = text.substring(0, maxLength);
  const match = text.match(/^(.*)\\b(.+?)$/);
  if (!match)
    return "";
  return match[1].trimEnd();
}
function suitableTextAlternatives(text) {
  let result = [];
  {
    const match = text.match(/^([\\d.,]+)[^.,\\w]/);
    const leadingNumberLength = match ? match[1].length : 0;
    if (leadingNumberLength) {
      const alt = trimWordBoundary(text.substring(leadingNumberLength).trimStart(), 80);
      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });
    }
  }
  {
    const match = text.match(/[^.,\\w]([\\d.,]+)$/);
    const trailingNumberLength = match ? match[1].length : 0;
    if (trailingNumberLength) {
      const alt = trimWordBoundary(text.substring(0, text.length - trailingNumberLength).trimEnd(), 80);
      result.push({ text: alt, scoreBouns: alt.length <= 30 ? 2 : 1 });
    }
  }
  if (text.length <= 30) {
    result.push({ text, scoreBouns: 0 });
  } else {
    result.push({ text: trimWordBoundary(text, 80), scoreBouns: 0 });
    result.push({ text: trimWordBoundary(text, 30), scoreBouns: 1 });
  }
  result = result.filter((r) => r.text);
  if (!result.length)
    result.push({ text: text.substring(0, 80), scoreBouns: 0 });
  return result;
}

// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts
function asLocator(lang, selector, isFrameLocator = false) {
  return asLocators(lang, selector, isFrameLocator)[0];
}
function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
  try {
    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);
  } catch (e) {
    return [selector];
  }
}
function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
  const parts = [...parsed.parts];
  const tokens = [];
  let nextBase = isFrameLocator ? "frame-locator" : "page";
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const base = nextBase;
    nextBase = "locator";
    if (part.name === "nth") {
      if (part.body === "0")
        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
      else if (part.body === "-1")
        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
      else
        tokens.push([factory.generateLocator(base, "nth", part.body)]);
      continue;
    }
    if (part.name === "internal:text") {
      const { exact, text } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "text", text, { exact })]);
      continue;
    }
    if (part.name === "internal:has-text") {
      const { exact, text } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:has-not-text") {
      const { exact, text } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:has") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
      continue;
    }
    if (part.name === "internal:has-not") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
      continue;
    }
    if (part.name === "internal:and") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
      continue;
    }
    if (part.name === "internal:or") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
      continue;
    }
    if (part.name === "internal:chain") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
      continue;
    }
    if (part.name === "internal:label") {
      const { exact, text } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "label", text, { exact })]);
      continue;
    }
    if (part.name === "internal:role") {
      const attrSelector = parseAttributeSelector(part.body, true);
      const options = { attrs: [] };
      for (const attr of attrSelector.attributes) {
        if (attr.name === "name") {
          options.exact = attr.caseSensitive;
          options.name = attr.value;
        } else {
          if (attr.name === "level" && typeof attr.value === "string")
            attr.value = +attr.value;
          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });
        }
      }
      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
      continue;
    }
    if (part.name === "internal:testid") {
      const attrSelector = parseAttributeSelector(part.body, true);
      const { value } = attrSelector.attributes[0];
      tokens.push([factory.generateLocator(base, "test-id", value)]);
      continue;
    }
    if (part.name === "internal:attr") {
      const attrSelector = parseAttributeSelector(part.body, true);
      const { name, value, caseSensitive } = attrSelector.attributes[0];
      const text = value;
      const exact = !!caseSensitive;
      if (name === "placeholder") {
        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);
        continue;
      }
      if (name === "alt") {
        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);
        continue;
      }
      if (name === "title") {
        tokens.push([factory.generateLocator(base, "title", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:control" && part.body === "enter-frame") {
      const lastTokens = tokens[tokens.length - 1];
      const lastPart = parts[index - 1];
      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));
      if (["xpath", "css"].includes(lastPart.name)) {
        transformed.push(
          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),
          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))
        );
      }
      lastTokens.splice(0, lastTokens.length, ...transformed);
      nextBase = "frame-locator";
      continue;
    }
    const nextPart = parts[index + 1];
    const selectorPart = stringifySelector({ parts: [part] });
    const locatorPart = factory.generateLocator(base, "default", selectorPart);
    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
      const { exact, text } = detectExact(nextPart.body);
      if (!exact) {
        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });
        const options = {};
        if (nextPart.name === "internal:has-text")
          options.hasText = text;
        else
          options.hasNotText = text;
        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
        index++;
        continue;
      }
    }
    let locatorPartWithEngine;
    if (["xpath", "css"].includes(part.name)) {
      const selectorPart2 = stringifySelector(
        { parts: [part] },
        /* forceEngineName */
        true
      );
      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);
    }
    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
  }
  return combineTokens(factory, tokens, maxOutputSize);
}
function combineTokens(factory, tokens, maxOutputSize) {
  const currentTokens = tokens.map(() => "");
  const result = [];
  const visit = (index) => {
    if (index === tokens.length) {
      result.push(factory.chainLocators(currentTokens));
      return currentTokens.length < maxOutputSize;
    }
    for (const taken of tokens[index]) {
      currentTokens[index] = taken;
      if (!visit(index + 1))
        return false;
    }
    return true;
  };
  visit(0);
  return result;
}
function detectExact(text) {
  let exact = false;
  const match = text.match(/^\\/(.*)\\/([igm]*)$/);
  if (match)
    return { text: new RegExp(match[1], match[2]) };
  if (text.endsWith('"')) {
    text = JSON.parse(text);
    exact = true;
  } else if (text.endsWith('"s')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = true;
  } else if (text.endsWith('"i')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = false;
  }
  return { exact, text };
}
var JavaScriptLocatorFactory = class {
  constructor(preferredQuote) {
    this.preferredQuote = preferredQuote;
  }
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`locator(\${this.quote(body)}, { hasText: \${this.toHasText(options.hasText)} })\`;
        if (options.hasNotText !== void 0)
          return \`locator(\${this.quote(body)}, { hasNotText: \${this.toHasText(options.hasNotText)} })\`;
        return \`locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`frameLocator(\${this.quote(body)})\`;
      case "frame":
        return \`contentFrame()\`;
      case "nth":
        return \`nth(\${body})\`;
      case "first":
        return \`first()\`;
      case "last":
        return \`last()\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`name: \${this.regexToSourceString(options.name)}\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`name: \${this.quote(options.name)}\`);
          if (options.exact)
            attrs.push(\`exact: true\`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(\`\${name}: \${typeof value === "string" ? this.quote(value) : value}\`);
        const attrString = attrs.length ? \`, { \${attrs.join(", ")} }\` : "";
        return \`getByRole(\${this.quote(body)}\${attrString})\`;
      case "has-text":
        return \`filter({ hasText: \${this.toHasText(body)} })\`;
      case "has-not-text":
        return \`filter({ hasNotText: \${this.toHasText(body)} })\`;
      case "has":
        return \`filter({ has: \${body} })\`;
      case "hasNot":
        return \`filter({ hasNot: \${body} })\`;
      case "and":
        return \`and(\${body})\`;
      case "or":
        return \`or(\${body})\`;
      case "chain":
        return \`locator(\${body})\`;
      case "test-id":
        return \`getByTestId(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact("getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToSourceString(re) {
    return normalizeEscapedRegexQuotes(String(re));
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToSourceString(body)})\`;
    return exact ? \`\${method}(\${this.quote(body)}, { exact: true })\` : \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToSourceString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToSourceString(value);
    return this.quote(value);
  }
  quote(text) {
    var _a;
    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "'");
  }
};
var PythonLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`locator(\${this.quote(body)}, has_text=\${this.toHasText(options.hasText)})\`;
        if (options.hasNotText !== void 0)
          return \`locator(\${this.quote(body)}, has_not_text=\${this.toHasText(options.hasNotText)})\`;
        return \`locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`frame_locator(\${this.quote(body)})\`;
      case "frame":
        return \`content_frame\`;
      case "nth":
        return \`nth(\${body})\`;
      case "first":
        return \`first\`;
      case "last":
        return \`last\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`name=\${this.regexToString(options.name)}\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`name=\${this.quote(options.name)}\`);
          if (options.exact)
            attrs.push(\`exact=True\`);
        }
        for (const { name, value } of options.attrs) {
          let valueString = typeof value === "string" ? this.quote(value) : value;
          if (typeof value === "boolean")
            valueString = value ? "True" : "False";
          attrs.push(\`\${toSnakeCase(name)}=\${valueString}\`);
        }
        const attrString = attrs.length ? \`, \${attrs.join(", ")}\` : "";
        return \`get_by_role(\${this.quote(body)}\${attrString})\`;
      case "has-text":
        return \`filter(has_text=\${this.toHasText(body)})\`;
      case "has-not-text":
        return \`filter(has_not_text=\${this.toHasText(body)})\`;
      case "has":
        return \`filter(has=\${body})\`;
      case "hasNot":
        return \`filter(has_not=\${body})\`;
      case "and":
        return \`and_(\${body})\`;
      case "or":
        return \`or_(\${body})\`;
      case "chain":
        return \`locator(\${body})\`;
      case "test-id":
        return \`get_by_test_id(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact("get_by_text", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("get_by_label", body, !!options.exact);
      case "title":
        return this.toCallWithExact("get_by_title", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
    return \`re.compile(r"\${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, '\\\\"')}"\${suffix})\`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToString(body)})\`;
    if (exact)
      return \`\${method}(\${this.quote(body)}, exact=True)\`;
    return \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToString(body);
    return \`\${this.quote(body)}\`;
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
};
var JavaLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    let clazz;
    switch (base) {
      case "page":
        clazz = "Page";
        break;
      case "frame-locator":
        clazz = "FrameLocator";
        break;
      case "locator":
        clazz = "Locator";
        break;
    }
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`locator(\${this.quote(body)}, new \${clazz}.LocatorOptions().setHasText(\${this.toHasText(options.hasText)}))\`;
        if (options.hasNotText !== void 0)
          return \`locator(\${this.quote(body)}, new \${clazz}.LocatorOptions().setHasNotText(\${this.toHasText(options.hasNotText)}))\`;
        return \`locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`frameLocator(\${this.quote(body)})\`;
      case "frame":
        return \`contentFrame()\`;
      case "nth":
        return \`nth(\${body})\`;
      case "first":
        return \`first()\`;
      case "last":
        return \`last()\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`.setName(\${this.regexToString(options.name)})\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`.setName(\${this.quote(options.name)})\`);
          if (options.exact)
            attrs.push(\`.setExact(true)\`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(\`.set\${toTitleCase(name)}(\${typeof value === "string" ? this.quote(value) : value})\`);
        const attrString = attrs.length ? \`, new \${clazz}.GetByRoleOptions()\${attrs.join("")}\` : "";
        return \`getByRole(AriaRole.\${toSnakeCase(body).toUpperCase()}\${attrString})\`;
      case "has-text":
        return \`filter(new \${clazz}.FilterOptions().setHasText(\${this.toHasText(body)}))\`;
      case "has-not-text":
        return \`filter(new \${clazz}.FilterOptions().setHasNotText(\${this.toHasText(body)}))\`;
      case "has":
        return \`filter(new \${clazz}.FilterOptions().setHas(\${body}))\`;
      case "hasNot":
        return \`filter(new \${clazz}.FilterOptions().setHasNot(\${body}))\`;
      case "and":
        return \`and(\${body})\`;
      case "or":
        return \`or(\${body})\`;
      case "chain":
        return \`locator(\${body})\`;
      case "test-id":
        return \`getByTestId(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
    return \`Pattern.compile(\${this.quote(normalizeEscapedRegexQuotes(body.source))}\${suffix})\`;
  }
  toCallWithExact(clazz, method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToString(body)})\`;
    if (exact)
      return \`\${method}(\${this.quote(body)}, new \${clazz}.\${toTitleCase(method)}Options().setExact(true))\`;
    return \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
};
var CSharpLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`Locator(\${this.quote(body)}, new() { \${this.toHasText(options.hasText)} })\`;
        if (options.hasNotText !== void 0)
          return \`Locator(\${this.quote(body)}, new() { \${this.toHasNotText(options.hasNotText)} })\`;
        return \`Locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`FrameLocator(\${this.quote(body)})\`;
      case "frame":
        return \`ContentFrame\`;
      case "nth":
        return \`Nth(\${body})\`;
      case "first":
        return \`First\`;
      case "last":
        return \`Last\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`NameRegex = \${this.regexToString(options.name)}\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`Name = \${this.quote(options.name)}\`);
          if (options.exact)
            attrs.push(\`Exact = true\`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(\`\${toTitleCase(name)} = \${typeof value === "string" ? this.quote(value) : value}\`);
        const attrString = attrs.length ? \`, new() { \${attrs.join(", ")} }\` : "";
        return \`GetByRole(AriaRole.\${toTitleCase(body)}\${attrString})\`;
      case "has-text":
        return \`Filter(new() { \${this.toHasText(body)} })\`;
      case "has-not-text":
        return \`Filter(new() { \${this.toHasNotText(body)} })\`;
      case "has":
        return \`Filter(new() { Has = \${body} })\`;
      case "hasNot":
        return \`Filter(new() { HasNot = \${body} })\`;
      case "and":
        return \`And(\${body})\`;
      case "or":
        return \`Or(\${body})\`;
      case "chain":
        return \`Locator(\${body})\`;
      case "test-id":
        return \`GetByTestId(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact("GetByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("GetByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("GetByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("GetByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
    return \`new Regex(\${this.quote(normalizeEscapedRegexQuotes(body.source))}\${suffix})\`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToString(body)})\`;
    if (exact)
      return \`\${method}(\${this.quote(body)}, new() { Exact = true })\`;
    return \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return \`HasTextRegex = \${this.regexToString(body)}\`;
    return \`HasText = \${this.quote(body)}\`;
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  toHasNotText(body) {
    if (isRegExp(body))
      return \`HasNotTextRegex = \${this.regexToString(body)}\`;
    return \`HasNotText = \${this.quote(body)}\`;
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
};
var JsonlLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    return JSON.stringify({
      kind,
      body,
      options
    });
  }
  chainLocators(locators) {
    const objects = locators.map((l) => JSON.parse(l));
    for (let i = 0; i < objects.length - 1; ++i)
      objects[i].next = objects[i + 1];
    return JSON.stringify(objects[0]);
  }
};
var generators = {
  javascript: JavaScriptLocatorFactory,
  python: PythonLocatorFactory,
  java: JavaLocatorFactory,
  csharp: CSharpLocatorFactory,
  jsonl: JsonlLocatorFactory
};
function isRegExp(obj) {
  return obj instanceof RegExp;
}

// packages/playwright-core/src/server/injected/highlight.css?inline
var highlight_default = ":host{font-size:13px;font-family:system-ui,Ubuntu,Droid Sans,sans-serif;color:#333}svg{position:absolute;height:0}x-pw-tooltip{backdrop-filter:blur(5px);background-color:#fff;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:none;font-size:12.8px;font-weight:400;left:0;line-height:1.5;max-width:600px;position:absolute;top:0;padding:0;flex-direction:column;overflow:hidden}x-pw-tooltip-line{display:flex;max-width:600px;padding:6px;user-select:none;cursor:pointer}x-pw-tooltip-line.selectable:hover{background-color:#f2f2f2;overflow:hidden}x-pw-tooltip-footer{display:flex;max-width:600px;padding:6px;user-select:none;color:#777}x-pw-dialog{background-color:#fff;pointer-events:auto;border-radius:6px;box-shadow:0 .5rem 1.2rem #0000004d;display:flex;flex-direction:column;position:absolute;width:400px;height:150px;z-index:10;font-size:13px}x-pw-dialog-body{display:flex;flex-direction:column;flex:auto}x-pw-dialog-body label{margin:5px 8px;display:flex;flex-direction:row;align-items:center}x-pw-highlight{position:absolute;top:0;left:0;width:0;height:0}x-pw-action-point{position:absolute;width:20px;height:20px;background:red;border-radius:10px;margin:-10px 0 0 -10px;z-index:2}x-pw-separator{height:1px;margin:6px 9px;background:rgb(148 148 148 / 90%)}x-pw-tool-gripper{height:28px;width:24px;margin:2px 0;cursor:grab}x-pw-tool-gripper:active{cursor:grabbing}x-pw-tool-gripper>x-div{width:16px;height:16px;margin:6px 4px;clip-path:url(#icon-gripper);background-color:#555}x-pw-tools-list>label{display:flex;align-items:center;margin:0 10px;user-select:none}x-pw-tools-list{display:flex;width:100%;border-bottom:1px solid #dddddd}x-pw-tool-item{pointer-events:auto;cursor:pointer;height:28px;width:28px;border-radius:3px}x-pw-tool-item:not(.disabled):hover{background-color:#dbdbdb}x-pw-tool-item.active{background-color:#8acae480}x-pw-tool-item.active:not(.disabled):hover{background-color:#8acae4c4}x-pw-tool-item>x-div{width:16px;height:16px;margin:6px;background-color:#3a3a3a}x-pw-tool-item.disabled>x-div{background-color:#61616180;cursor:default}x-pw-tool-item.record.active{background-color:transparent}x-pw-tool-item.record.active:hover{background-color:#dbdbdb}x-pw-tool-item.record.active>x-div{background-color:#a1260d}x-pw-tool-item.accept>x-div{background-color:#388a34}x-pw-tool-item.record>x-div{clip-path:url(#icon-circle-large-filled)}x-pw-tool-item.pick-locator>x-div{clip-path:url(#icon-inspect)}x-pw-tool-item.text>x-div{clip-path:url(#icon-whole-word)}x-pw-tool-item.visibility>x-div{clip-path:url(#icon-eye)}x-pw-tool-item.value>x-div{clip-path:url(#icon-symbol-constant)}x-pw-tool-item.snapshot>x-div{clip-path:url(#icon-gist)}x-pw-tool-item.accept>x-div{clip-path:url(#icon-check)}x-pw-tool-item.cancel>x-div{clip-path:url(#icon-close)}x-pw-tool-item.succeeded>x-div{clip-path:url(#icon-pass);background-color:#388a34!important}x-pw-overlay{position:absolute;top:0;max-width:min-content;z-index:2147483647;background:transparent;pointer-events:auto}x-pw-overlay x-pw-tools-list{background-color:#fffd;box-shadow:#0000001a 0 5px 5px;border-radius:3px;border-bottom:none}x-pw-overlay x-pw-tool-item{margin:2px}textarea.text-editor{font-family:system-ui,Ubuntu,Droid Sans,sans-serif;flex:auto;border:none;margin:6px 10px;color:#333;outline:1px solid transparent!important;resize:none;padding:0;font-size:13px}textarea.text-editor.does-not-match{outline:1px solid red!important}x-div{display:block}x-spacer{flex:auto}*{box-sizing:border-box}*[hidden]{display:none!important}x-locator-editor{flex:none;width:100%;height:60px;padding:4px;border-bottom:1px solid #dddddd;outline:1px solid transparent}x-locator-editor.does-not-match{outline:1px solid red}.CodeMirror{width:100%!important;height:100%!important}\\n";

// packages/playwright-core/src/server/injected/highlight.ts
var Highlight = class {
  constructor(injectedScript) {
    this._highlightEntries = [];
    this._highlightOptions = {};
    this._language = "javascript";
    this._injectedScript = injectedScript;
    const document = injectedScript.document;
    this._isUnderTest = injectedScript.isUnderTest;
    this._glassPaneElement = document.createElement("x-pw-glass");
    this._glassPaneElement.style.position = "fixed";
    this._glassPaneElement.style.top = "0";
    this._glassPaneElement.style.right = "0";
    this._glassPaneElement.style.bottom = "0";
    this._glassPaneElement.style.left = "0";
    this._glassPaneElement.style.zIndex = "2147483646";
    this._glassPaneElement.style.pointerEvents = "none";
    this._glassPaneElement.style.display = "flex";
    this._glassPaneElement.style.backgroundColor = "transparent";
    for (const eventName of ["click", "auxclick", "dragstart", "input", "keydown", "keyup", "pointerdown", "pointerup", "mousedown", "mouseup", "mouseleave", "focus", "scroll"]) {
      this._glassPaneElement.addEventListener(eventName, (e) => {
        e.stopPropagation();
        e.stopImmediatePropagation();
        if (e.type === "click" && e.button === 0 && this._highlightOptions.tooltipListItemSelected)
          this._highlightOptions.tooltipListItemSelected(void 0);
      });
    }
    this._actionPointElement = document.createElement("x-pw-action-point");
    this._actionPointElement.setAttribute("hidden", "true");
    this._glassPaneShadow = this._glassPaneElement.attachShadow({ mode: this._isUnderTest ? "open" : "closed" });
    if (typeof this._glassPaneShadow.adoptedStyleSheets.push === "function") {
      const sheet = new this._injectedScript.window.CSSStyleSheet();
      sheet.replaceSync(highlight_default);
      this._glassPaneShadow.adoptedStyleSheets.push(sheet);
    } else {
      const styleElement = this._injectedScript.document.createElement("style");
      styleElement.textContent = highlight_default;
      this._glassPaneShadow.appendChild(styleElement);
    }
    this._glassPaneShadow.appendChild(this._actionPointElement);
  }
  install() {
    if (this._injectedScript.document.documentElement && !this._injectedScript.document.documentElement.contains(this._glassPaneElement))
      this._injectedScript.document.documentElement.appendChild(this._glassPaneElement);
  }
  setLanguage(language) {
    this._language = language;
  }
  runHighlightOnRaf(selector) {
    if (this._rafRequest)
      cancelAnimationFrame(this._rafRequest);
    this.updateHighlight(this._injectedScript.querySelectorAll(selector, this._injectedScript.document.documentElement), { tooltipText: asLocator(this._language, stringifySelector(selector)) });
    this._rafRequest = this._injectedScript.builtinRequestAnimationFrame(() => this.runHighlightOnRaf(selector));
  }
  uninstall() {
    if (this._rafRequest)
      cancelAnimationFrame(this._rafRequest);
    this._glassPaneElement.remove();
  }
  showActionPoint(x, y) {
    this._actionPointElement.style.top = y + "px";
    this._actionPointElement.style.left = x + "px";
    this._actionPointElement.hidden = false;
  }
  hideActionPoint() {
    this._actionPointElement.hidden = true;
  }
  clearHighlight() {
    var _a, _b;
    for (const entry of this._highlightEntries) {
      (_a = entry.highlightElement) == null ? void 0 : _a.remove();
      (_b = entry.tooltipElement) == null ? void 0 : _b.remove();
    }
    this._highlightEntries = [];
    this._highlightOptions = {};
    this._glassPaneElement.style.pointerEvents = "none";
  }
  updateHighlight(elements, options) {
    this._innerUpdateHighlight(elements, options);
  }
  maskElements(elements, color) {
    this._innerUpdateHighlight(elements, { color });
  }
  _innerUpdateHighlight(elements, options) {
    let color = options.color;
    if (!color)
      color = elements.length > 1 ? "#f6b26b7f" : "#6fa8dc7f";
    if (this._highlightIsUpToDate(elements, options))
      return;
    this.clearHighlight();
    this._highlightOptions = options;
    this._glassPaneElement.style.pointerEvents = options.tooltipListItemSelected ? "initial" : "none";
    for (let i = 0; i < elements.length; ++i) {
      const highlightElement = this._createHighlightElement();
      this._glassPaneShadow.appendChild(highlightElement);
      let tooltipElement;
      if (options.tooltipList || options.tooltipText || options.tooltipFooter) {
        tooltipElement = this._injectedScript.document.createElement("x-pw-tooltip");
        this._glassPaneShadow.appendChild(tooltipElement);
        tooltipElement.style.top = "0";
        tooltipElement.style.left = "0";
        tooltipElement.style.display = "flex";
        let lines = [];
        if (options.tooltipList) {
          lines = options.tooltipList;
        } else if (options.tooltipText) {
          const suffix = elements.length > 1 ? \` [\${i + 1} of \${elements.length}]\` : "";
          lines = [options.tooltipText + suffix];
        }
        for (let index = 0; index < lines.length; index++) {
          const element = this._injectedScript.document.createElement("x-pw-tooltip-line");
          element.textContent = lines[index];
          tooltipElement.appendChild(element);
          if (options.tooltipListItemSelected) {
            element.classList.add("selectable");
            element.addEventListener("click", () => {
              var _a;
              return (_a = options.tooltipListItemSelected) == null ? void 0 : _a.call(options, index);
            });
          }
        }
        if (options.tooltipFooter) {
          const footer = this._injectedScript.document.createElement("x-pw-tooltip-footer");
          footer.textContent = options.tooltipFooter;
          tooltipElement.appendChild(footer);
        }
      }
      this._highlightEntries.push({ targetElement: elements[i], tooltipElement, highlightElement });
    }
    for (const entry of this._highlightEntries) {
      entry.box = entry.targetElement.getBoundingClientRect();
      if (!entry.tooltipElement)
        continue;
      const { anchorLeft, anchorTop } = this.tooltipPosition(entry.box, entry.tooltipElement);
      entry.tooltipTop = anchorTop;
      entry.tooltipLeft = anchorLeft;
    }
    for (const entry of this._highlightEntries) {
      if (entry.tooltipElement) {
        entry.tooltipElement.style.top = entry.tooltipTop + "px";
        entry.tooltipElement.style.left = entry.tooltipLeft + "px";
      }
      const box = entry.box;
      entry.highlightElement.style.backgroundColor = color;
      entry.highlightElement.style.left = box.x + "px";
      entry.highlightElement.style.top = box.y + "px";
      entry.highlightElement.style.width = box.width + "px";
      entry.highlightElement.style.height = box.height + "px";
      entry.highlightElement.style.display = "block";
      if (this._isUnderTest)
        console.error("Highlight box for test: " + JSON.stringify({ x: box.x, y: box.y, width: box.width, height: box.height }));
    }
  }
  firstBox() {
    var _a;
    return (_a = this._highlightEntries[0]) == null ? void 0 : _a.box;
  }
  tooltipPosition(box, tooltipElement) {
    const tooltipWidth = tooltipElement.offsetWidth;
    const tooltipHeight = tooltipElement.offsetHeight;
    const totalWidth = this._glassPaneElement.offsetWidth;
    const totalHeight = this._glassPaneElement.offsetHeight;
    let anchorLeft = box.left;
    if (anchorLeft + tooltipWidth > totalWidth - 5)
      anchorLeft = totalWidth - tooltipWidth - 5;
    let anchorTop = box.bottom + 5;
    if (anchorTop + tooltipHeight > totalHeight - 5) {
      if (box.top > tooltipHeight + 5) {
        anchorTop = box.top - tooltipHeight - 5;
      } else {
        anchorTop = totalHeight - 5 - tooltipHeight;
      }
    }
    return { anchorLeft, anchorTop };
  }
  _highlightIsUpToDate(elements, options) {
    var _a, _b;
    if (options.tooltipText !== this._highlightOptions.tooltipText)
      return false;
    if (options.tooltipListItemSelected !== this._highlightOptions.tooltipListItemSelected)
      return false;
    if (options.tooltipFooter !== this._highlightOptions.tooltipFooter)
      return false;
    if (((_a = options.tooltipList) == null ? void 0 : _a.length) !== ((_b = this._highlightOptions.tooltipList) == null ? void 0 : _b.length))
      return false;
    if (options.tooltipList && this._highlightOptions.tooltipList) {
      for (let i = 0; i < options.tooltipList.length; i++) {
        if (options.tooltipList[i] !== this._highlightOptions.tooltipList[i])
          return false;
      }
    }
    if (elements.length !== this._highlightEntries.length)
      return false;
    for (let i = 0; i < this._highlightEntries.length; ++i) {
      if (elements[i] !== this._highlightEntries[i].targetElement)
        return false;
      const oldBox = this._highlightEntries[i].box;
      if (!oldBox)
        return false;
      const box = elements[i].getBoundingClientRect();
      if (box.top !== oldBox.top || box.right !== oldBox.right || box.bottom !== oldBox.bottom || box.left !== oldBox.left)
        return false;
    }
    return true;
  }
  _createHighlightElement() {
    return this._injectedScript.document.createElement("x-pw-highlight");
  }
  appendChild(element) {
    this._glassPaneShadow.appendChild(element);
  }
};

// packages/playwright-core/src/server/injected/yaml.ts
function yamlEscapeKeyIfNeeded(str) {
  if (!yamlStringNeedsQuotes(str))
    return str;
  return \`'\` + str.replace(/'/g, \`''\`) + \`'\`;
}
function yamlEscapeValueIfNeeded(str) {
  if (!yamlStringNeedsQuotes(str))
    return str;
  return '"' + str.replace(/[\\\\"\\x00-\\x1f\\x7f-\\x9f]/g, (c) => {
    switch (c) {
      case "\\\\":
        return "\\\\\\\\";
      case '"':
        return '\\\\"';
      case "\\b":
        return "\\\\b";
      case "\\f":
        return "\\\\f";
      case "\\n":
        return "\\\\n";
      case "\\r":
        return "\\\\r";
      case "\t":
        return "\\\\t";
      default:
        const code = c.charCodeAt(0);
        return "\\\\x" + code.toString(16).padStart(2, "0");
    }
  }) + '"';
}
function yamlStringNeedsQuotes(str) {
  if (str.length === 0)
    return true;
  if (/^\\s|\\s$/.test(str))
    return true;
  if (/[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f-\\x9f]/.test(str))
    return true;
  if (/^-\\s/.test(str))
    return true;
  if (/[\\n:](\\s|$)/.test(str))
    return true;
  if (/\\s#/.test(str))
    return true;
  if (/[\\n\\r]/.test(str))
    return true;
  if (/^[&*\\],?!>|@"'#%]/.test(str))
    return true;
  if (/[{}\`]/.test(str))
    return true;
  if (!isNaN(Number(str)) || ["y", "n", "yes", "no", "true", "false", "on", "off", "null"].includes(str.toLowerCase()))
    return true;
  return false;
}

// packages/playwright-core/src/server/injected/ariaSnapshot.ts
function generateAriaTree(rootElement) {
  const visited = /* @__PURE__ */ new Set();
  const visit = (ariaNode, node) => {
    if (visited.has(node))
      return;
    visited.add(node);
    if (node.nodeType === Node.TEXT_NODE && node.nodeValue) {
      const text = node.nodeValue;
      if (text)
        ariaNode.children.push(node.nodeValue || "");
      return;
    }
    if (node.nodeType !== Node.ELEMENT_NODE)
      return;
    const element = node;
    if (isElementHiddenForAria(element))
      return;
    const ariaChildren = [];
    if (element.hasAttribute("aria-owns")) {
      const ids = element.getAttribute("aria-owns").split(/\\s+/);
      for (const id of ids) {
        const ownedElement = rootElement.ownerDocument.getElementById(id);
        if (ownedElement)
          ariaChildren.push(ownedElement);
      }
    }
    const childAriaNode = toAriaNode(element);
    if (childAriaNode)
      ariaNode.children.push(childAriaNode);
    processElement(childAriaNode || ariaNode, element, ariaChildren);
  };
  function processElement(ariaNode, element, ariaChildren = []) {
    var _a;
    const display = ((_a = getElementComputedStyle(element)) == null ? void 0 : _a.display) || "inline";
    const treatAsBlock = display !== "inline" || element.nodeName === "BR" ? " " : "";
    if (treatAsBlock)
      ariaNode.children.push(treatAsBlock);
    ariaNode.children.push(getPseudoContent(element, "::before"));
    const assignedNodes = element.nodeName === "SLOT" ? element.assignedNodes() : [];
    if (assignedNodes.length) {
      for (const child of assignedNodes)
        visit(ariaNode, child);
    } else {
      for (let child = element.firstChild; child; child = child.nextSibling) {
        if (!child.assignedSlot)
          visit(ariaNode, child);
      }
      if (element.shadowRoot) {
        for (let child = element.shadowRoot.firstChild; child; child = child.nextSibling)
          visit(ariaNode, child);
      }
    }
    for (const child of ariaChildren)
      visit(ariaNode, child);
    ariaNode.children.push(getPseudoContent(element, "::after"));
    if (treatAsBlock)
      ariaNode.children.push(treatAsBlock);
    if (ariaNode.children.length === 1 && ariaNode.name === ariaNode.children[0])
      ariaNode.children = [];
  }
  beginAriaCaches();
  const ariaRoot = { role: "fragment", name: "", children: [], element: rootElement };
  try {
    visit(ariaRoot, rootElement);
  } finally {
    endAriaCaches();
  }
  normalizeStringChildren(ariaRoot);
  return ariaRoot;
}
function toAriaNode(element) {
  const role = getAriaRole(element);
  if (!role || role === "presentation" || role === "none")
    return null;
  const name = getElementAccessibleName(element, false) || "";
  const result = { role, name, children: [], element };
  if (kAriaCheckedRoles.includes(role))
    result.checked = getAriaChecked(element);
  if (kAriaDisabledRoles.includes(role))
    result.disabled = getAriaDisabled(element);
  if (kAriaExpandedRoles.includes(role))
    result.expanded = getAriaExpanded(element);
  if (kAriaLevelRoles.includes(role))
    result.level = getAriaLevel(element);
  if (kAriaPressedRoles.includes(role))
    result.pressed = getAriaPressed(element);
  if (kAriaSelectedRoles.includes(role))
    result.selected = getAriaSelected(element);
  if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement)
    result.children = [element.value];
  return result;
}
function renderedAriaTree(rootElement, options) {
  return renderAriaTree(generateAriaTree(rootElement), options);
}
function normalizeStringChildren(rootA11yNode) {
  const flushChildren = (buffer, normalizedChildren) => {
    if (!buffer.length)
      return;
    const text = normalizeWhitespaceWithin(buffer.join("")).trim();
    if (text)
      normalizedChildren.push(text);
    buffer.length = 0;
  };
  const visit = (ariaNode) => {
    const normalizedChildren = [];
    const buffer = [];
    for (const child of ariaNode.children || []) {
      if (typeof child === "string") {
        buffer.push(child);
      } else {
        flushChildren(buffer, normalizedChildren);
        visit(child);
        normalizedChildren.push(child);
      }
    }
    flushChildren(buffer, normalizedChildren);
    ariaNode.children = normalizedChildren.length ? normalizedChildren : [];
    if (ariaNode.children.length === 1 && ariaNode.children[0] === ariaNode.name)
      ariaNode.children = [];
  };
  visit(rootA11yNode);
}
var normalizeWhitespaceWithin = (text) => text.replace(/[\\u200b\\s\\t\\r\\n]+/g, " ");
function matchesText(text, template) {
  if (!template)
    return true;
  if (!text)
    return false;
  if (typeof template === "string")
    return text === template;
  return !!text.match(template);
}
function matchesTextNode(text, template) {
  return matchesText(text, template.text);
}
function matchesName(text, template) {
  return matchesText(text, template.name);
}
function matchesAriaTree(rootElement, template) {
  const root = generateAriaTree(rootElement);
  const matches = matchesNodeDeep(root, template, false);
  return {
    matches,
    received: {
      raw: renderAriaTree(root, { mode: "raw" }),
      regex: renderAriaTree(root, { mode: "regex" })
    }
  };
}
function getAllByAria(rootElement, template) {
  const root = generateAriaTree(rootElement);
  const matches = matchesNodeDeep(root, template, true);
  return matches.map((n) => n.element);
}
function matchesNode(node, template, depth) {
  if (typeof node === "string" && template.kind === "text")
    return matchesTextNode(node, template);
  if (typeof node === "object" && template.kind === "role") {
    if (template.role !== "fragment" && template.role !== node.role)
      return false;
    if (template.checked !== void 0 && template.checked !== node.checked)
      return false;
    if (template.disabled !== void 0 && template.disabled !== node.disabled)
      return false;
    if (template.expanded !== void 0 && template.expanded !== node.expanded)
      return false;
    if (template.level !== void 0 && template.level !== node.level)
      return false;
    if (template.pressed !== void 0 && template.pressed !== node.pressed)
      return false;
    if (template.selected !== void 0 && template.selected !== node.selected)
      return false;
    if (!matchesName(node.name, template))
      return false;
    if (!containsList(node.children || [], template.children || [], depth))
      return false;
    return true;
  }
  return false;
}
function containsList(children, template, depth) {
  if (template.length > children.length)
    return false;
  const cc = children.slice();
  const tt = template.slice();
  for (const t of tt) {
    let c = cc.shift();
    while (c) {
      if (matchesNode(c, t, depth + 1))
        break;
      c = cc.shift();
    }
    if (!c)
      return false;
  }
  return true;
}
function matchesNodeDeep(root, template, collectAll) {
  const results = [];
  const visit = (node) => {
    if (matchesNode(node, template, 0)) {
      results.push(node);
      return !collectAll;
    }
    if (typeof node === "string")
      return false;
    for (const child of node.children || []) {
      if (visit(child))
        return true;
    }
    return false;
  };
  visit(root);
  return results;
}
function renderAriaTree(ariaNode, options) {
  const lines = [];
  const includeText = (options == null ? void 0 : options.mode) === "regex" ? textContributesInfo : () => true;
  const renderString = (options == null ? void 0 : options.mode) === "regex" ? convertToBestGuessRegex : (str) => str;
  const visit = (ariaNode2, parentAriaNode, indent) => {
    if (typeof ariaNode2 === "string") {
      if (parentAriaNode && !includeText(parentAriaNode, ariaNode2))
        return;
      const text = yamlEscapeValueIfNeeded(renderString(ariaNode2));
      if (text)
        lines.push(indent + "- text: " + text);
      return;
    }
    let key = ariaNode2.role;
    if (ariaNode2.name && ariaNode2.name.length <= 900) {
      const name = renderString(ariaNode2.name);
      if (name) {
        const stringifiedName = name.startsWith("/") && name.endsWith("/") ? name : JSON.stringify(name);
        key += " " + stringifiedName;
      }
    }
    if (ariaNode2.checked === "mixed")
      key += \` [checked=mixed]\`;
    if (ariaNode2.checked === true)
      key += \` [checked]\`;
    if (ariaNode2.disabled)
      key += \` [disabled]\`;
    if (ariaNode2.expanded)
      key += \` [expanded]\`;
    if (ariaNode2.level)
      key += \` [level=\${ariaNode2.level}]\`;
    if (ariaNode2.pressed === "mixed")
      key += \` [pressed=mixed]\`;
    if (ariaNode2.pressed === true)
      key += \` [pressed]\`;
    if (ariaNode2.selected === true)
      key += \` [selected]\`;
    const escapedKey = indent + "- " + yamlEscapeKeyIfNeeded(key);
    if (!ariaNode2.children.length) {
      lines.push(escapedKey);
    } else if (ariaNode2.children.length === 1 && typeof ariaNode2.children[0] === "string") {
      const text = includeText(ariaNode2, ariaNode2.children[0]) ? renderString(ariaNode2.children[0]) : null;
      if (text)
        lines.push(escapedKey + ": " + yamlEscapeValueIfNeeded(text));
      else
        lines.push(escapedKey);
    } else {
      lines.push(escapedKey + ":");
      for (const child of ariaNode2.children || [])
        visit(child, ariaNode2, indent + "  ");
    }
  };
  if (ariaNode.role === "fragment") {
    for (const child of ariaNode.children || [])
      visit(child, ariaNode, "");
  } else {
    visit(ariaNode, null, "");
  }
  return lines.join("\\n");
}
function convertToBestGuessRegex(text) {
  const dynamicContent = [
    // 2mb
    { regex: /\\b[\\d,.]+[bkmBKM]+\\b/, replacement: "[\\\\d,.]+[bkmBKM]+" },
    // 2ms, 20s
    { regex: /\\b\\d+[hmsp]+\\b/, replacement: "\\\\d+[hmsp]+" },
    { regex: /\\b[\\d,.]+[hmsp]+\\b/, replacement: "[\\\\d,.]+[hmsp]+" },
    // Do not replace single digits with regex by default.
    // 2+ digits: [Issue 22, 22.3, 2.33, 2,333]
    { regex: /\\b\\d+,\\d+\\b/, replacement: "\\\\d+,\\\\d+" },
    { regex: /\\b\\d+\\.\\d{2,}\\b/, replacement: "\\\\d+\\\\.\\\\d+" },
    { regex: /\\b\\d{2,}\\.\\d+\\b/, replacement: "\\\\d+\\\\.\\\\d+" },
    { regex: /\\b\\d{2,}\\b/, replacement: "\\\\d+" }
  ];
  let pattern = "";
  let lastIndex = 0;
  const combinedRegex = new RegExp(dynamicContent.map((r) => "(" + r.regex.source + ")").join("|"), "g");
  text.replace(combinedRegex, (match, ...args) => {
    const offset = args[args.length - 2];
    const groups = args.slice(0, -2);
    pattern += escapeRegExp(text.slice(lastIndex, offset));
    for (let i = 0; i < groups.length; i++) {
      if (groups[i]) {
        const { replacement } = dynamicContent[i];
        pattern += replacement;
        break;
      }
    }
    lastIndex = offset + match.length;
    return match;
  });
  if (!pattern)
    return text;
  pattern += escapeRegExp(text.slice(lastIndex));
  return String(new RegExp(pattern));
}
function textContributesInfo(node, text) {
  if (!text.length)
    return false;
  if (!node.name)
    return true;
  if (node.name.length > text.length)
    return false;
  const substr = text.length <= 200 && node.name.length <= 200 ? longestCommonSubstring(text, node.name) : "";
  let filtered = text;
  while (substr && filtered.includes(substr))
    filtered = filtered.replace(substr, "");
  return filtered.trim().length / text.length > 0.1;
}

// packages/playwright-core/src/utils/isomorphic/ariaSnapshot.ts
function parseYamlTemplate(fragment) {
  const result = { kind: "role", role: "fragment" };
  populateNode(result, fragment);
  if (result.children && result.children.length === 1)
    return result.children[0];
  return result;
}
function populateNode(node, container) {
  for (const object of container) {
    if (typeof object === "string") {
      const childNode = KeyParser.parse(object);
      node.children = node.children || [];
      node.children.push(childNode);
      continue;
    }
    for (const key of Object.keys(object)) {
      node.children = node.children || [];
      const value = object[key];
      if (key === "text") {
        node.children.push({
          kind: "text",
          text: valueOrRegex(value)
        });
        continue;
      }
      const childNode = KeyParser.parse(key);
      if (childNode.kind === "text") {
        node.children.push({
          kind: "text",
          text: valueOrRegex(value)
        });
        continue;
      }
      if (typeof value === "string") {
        node.children.push({
          ...childNode,
          children: [{
            kind: "text",
            text: valueOrRegex(value)
          }]
        });
        continue;
      }
      node.children.push(childNode);
      populateNode(childNode, value);
    }
  }
}
function normalizeWhitespace(text) {
  return text.replace(/[\\r\\n\\s\\t]+/g, " ").trim();
}
function valueOrRegex(value) {
  return value.startsWith("/") && value.endsWith("/") ? new RegExp(value.slice(1, -1)) : normalizeWhitespace(value);
}
var KeyParser = class _KeyParser {
  static parse(input) {
    return new _KeyParser(input)._parse();
  }
  constructor(input) {
    this._input = input;
    this._pos = 0;
    this._length = input.length;
  }
  _peek() {
    return this._input[this._pos] || "";
  }
  _next() {
    if (this._pos < this._length)
      return this._input[this._pos++];
    return null;
  }
  _eof() {
    return this._pos >= this._length;
  }
  _isWhitespace() {
    return !this._eof() && /\\s/.test(this._peek());
  }
  _skipWhitespace() {
    while (this._isWhitespace())
      this._pos++;
  }
  _readIdentifier(type) {
    if (this._eof())
      this._throwError(\`Unexpected end of input when expecting \${type}\`);
    const start = this._pos;
    while (!this._eof() && /[a-zA-Z]/.test(this._peek()))
      this._pos++;
    return this._input.slice(start, this._pos);
  }
  _readString() {
    let result = "";
    let escaped = false;
    while (!this._eof()) {
      const ch = this._next();
      if (escaped) {
        result += ch;
        escaped = false;
      } else if (ch === "\\\\") {
        escaped = true;
      } else if (ch === '"') {
        return result;
      } else {
        result += ch;
      }
    }
    this._throwError("Unterminated string");
  }
  _throwError(message, pos) {
    throw new AriaKeyError(message, this._input, pos || this._pos);
  }
  _readRegex() {
    let result = "";
    let escaped = false;
    let insideClass = false;
    while (!this._eof()) {
      const ch = this._next();
      if (escaped) {
        result += ch;
        escaped = false;
      } else if (ch === "\\\\") {
        escaped = true;
        result += ch;
      } else if (ch === "/" && !insideClass) {
        return result;
      } else if (ch === "[") {
        insideClass = true;
        result += ch;
      } else if (ch === "]" && insideClass) {
        result += ch;
        insideClass = false;
      } else {
        result += ch;
      }
    }
    this._throwError("Unterminated regex");
  }
  _readStringOrRegex() {
    const ch = this._peek();
    if (ch === '"') {
      this._next();
      return this._readString();
    }
    if (ch === "/") {
      this._next();
      return new RegExp(this._readRegex());
    }
    return null;
  }
  _readAttributes(result) {
    let errorPos = this._pos;
    while (true) {
      this._skipWhitespace();
      if (this._peek() === "[") {
        this._next();
        this._skipWhitespace();
        errorPos = this._pos;
        const flagName = this._readIdentifier("attribute");
        this._skipWhitespace();
        let flagValue = "";
        if (this._peek() === "=") {
          this._next();
          this._skipWhitespace();
          errorPos = this._pos;
          while (this._peek() !== "]" && !this._isWhitespace() && !this._eof())
            flagValue += this._next();
        }
        this._skipWhitespace();
        if (this._peek() !== "]")
          this._throwError("Expected ]");
        this._next();
        this._applyAttribute(result, flagName, flagValue || "true", errorPos);
      } else {
        break;
      }
    }
  }
  _parse() {
    this._skipWhitespace();
    const role = this._readIdentifier("role");
    this._skipWhitespace();
    const name = this._readStringOrRegex() || "";
    const result = { kind: "role", role, name };
    this._readAttributes(result);
    this._skipWhitespace();
    if (!this._eof())
      this._throwError("Unexpected input");
    return result;
  }
  _applyAttribute(node, key, value, errorPos) {
    if (key === "checked") {
      this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "checked" attribute must be a boolean or "mixed"', errorPos);
      node.checked = value === "true" ? true : value === "false" ? false : "mixed";
      return;
    }
    if (key === "disabled") {
      this._assert(value === "true" || value === "false", 'Value of "disabled" attribute must be a boolean', errorPos);
      node.disabled = value === "true";
      return;
    }
    if (key === "expanded") {
      this._assert(value === "true" || value === "false", 'Value of "expanded" attribute must be a boolean', errorPos);
      node.expanded = value === "true";
      return;
    }
    if (key === "level") {
      this._assert(!isNaN(Number(value)), 'Value of "level" attribute must be a number', errorPos);
      node.level = Number(value);
      return;
    }
    if (key === "pressed") {
      this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "pressed" attribute must be a boolean or "mixed"', errorPos);
      node.pressed = value === "true" ? true : value === "false" ? false : "mixed";
      return;
    }
    if (key === "selected") {
      this._assert(value === "true" || value === "false", 'Value of "selected" attribute must be a boolean', errorPos);
      node.selected = value === "true";
      return;
    }
    this._assert(false, \`Unsupported attribute [\${key}]\`, errorPos);
  }
  _assert(value, message, valuePos) {
    if (!value)
      this._throwError(message || "Assertion error", valuePos);
  }
};
var AriaKeyError = class extends Error {
  constructor(message, input, pos) {
    super(message + ":\\n\\n" + input + "\\n" + " ".repeat(pos) + "^\\n");
    this.shortMessage = message;
    this.pos = pos;
    this.stack = void 0;
  }
};

// packages/playwright-core/src/server/injected/injectedScript.ts
var InjectedScript = class {
  // eslint-disable-next-line no-restricted-globals
  constructor(window, isUnderTest, sdkLanguage, testIdAttributeNameForStrictErrorAndConsoleCodegen, stableRafCount, browserName, customEngines) {
    this.onGlobalListenersRemoved = /* @__PURE__ */ new Set();
    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = "data-testid";
    // Recorder must use any external dependencies through InjectedScript.
    // Otherwise it will end up with a copy of all modules it uses, and any
    // module-level globals will be duplicated, which leads to subtle bugs.
    this.utils = {
      asLocator,
      cacheNormalizedWhitespaces,
      elementText,
      getAriaRole,
      getElementAccessibleDescription,
      getElementAccessibleName,
      isElementVisible,
      isInsideScope,
      normalizeWhiteSpace,
      parseYamlTemplate
    };
    this.window = window;
    this.document = window.document;
    this.isUnderTest = isUnderTest;
    this._sdkLanguage = sdkLanguage;
    this._testIdAttributeNameForStrictErrorAndConsoleCodegen = testIdAttributeNameForStrictErrorAndConsoleCodegen;
    this._evaluator = new SelectorEvaluatorImpl(/* @__PURE__ */ new Map());
    this._engines = /* @__PURE__ */ new Map();
    this._engines.set("xpath", XPathEngine);
    this._engines.set("xpath:light", XPathEngine);
    this._engines.set("_react", ReactEngine);
    this._engines.set("_vue", VueEngine);
    this._engines.set("role", createRoleEngine(false));
    this._engines.set("text", this._createTextEngine(true, false));
    this._engines.set("text:light", this._createTextEngine(false, false));
    this._engines.set("id", this._createAttributeEngine("id", true));
    this._engines.set("id:light", this._createAttributeEngine("id", false));
    this._engines.set("data-testid", this._createAttributeEngine("data-testid", true));
    this._engines.set("data-testid:light", this._createAttributeEngine("data-testid", false));
    this._engines.set("data-test-id", this._createAttributeEngine("data-test-id", true));
    this._engines.set("data-test-id:light", this._createAttributeEngine("data-test-id", false));
    this._engines.set("data-test", this._createAttributeEngine("data-test", true));
    this._engines.set("data-test:light", this._createAttributeEngine("data-test", false));
    this._engines.set("css", this._createCSSEngine());
    this._engines.set("nth", { queryAll: () => [] });
    this._engines.set("visible", this._createVisibleEngine());
    this._engines.set("internal:control", this._createControlEngine());
    this._engines.set("internal:has", this._createHasEngine());
    this._engines.set("internal:has-not", this._createHasNotEngine());
    this._engines.set("internal:and", { queryAll: () => [] });
    this._engines.set("internal:or", { queryAll: () => [] });
    this._engines.set("internal:chain", this._createInternalChainEngine());
    this._engines.set("internal:label", this._createInternalLabelEngine());
    this._engines.set("internal:text", this._createTextEngine(true, true));
    this._engines.set("internal:has-text", this._createInternalHasTextEngine());
    this._engines.set("internal:has-not-text", this._createInternalHasNotTextEngine());
    this._engines.set("internal:attr", this._createNamedAttributeEngine());
    this._engines.set("internal:testid", this._createNamedAttributeEngine());
    this._engines.set("internal:role", createRoleEngine(true));
    for (const { name, engine } of customEngines)
      this._engines.set(name, engine);
    this._stableRafCount = stableRafCount;
    this._browserName = browserName;
    setBrowserName(browserName);
    this._setupGlobalListenersRemovalDetection();
    this._setupHitTargetInterceptors();
    if (isUnderTest)
      this.window.__injectedScript = this;
  }
  builtinSetTimeout(callback, timeout) {
    var _a;
    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)
      return this.window.__pwClock.builtin.setTimeout(callback, timeout);
    return this.window.setTimeout(callback, timeout);
  }
  builtinClearTimeout(timeout) {
    var _a;
    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)
      return this.window.__pwClock.builtin.clearTimeout(timeout);
    return this.window.clearTimeout(timeout);
  }
  builtinRequestAnimationFrame(callback) {
    var _a;
    if ((_a = this.window.__pwClock) == null ? void 0 : _a.builtin)
      return this.window.__pwClock.builtin.requestAnimationFrame(callback);
    return this.window.requestAnimationFrame(callback);
  }
  eval(expression) {
    return this.window.eval(expression);
  }
  testIdAttributeNameForStrictErrorAndConsoleCodegen() {
    return this._testIdAttributeNameForStrictErrorAndConsoleCodegen;
  }
  parseSelector(selector) {
    const result = parseSelector(selector);
    visitAllSelectorParts(result, (part) => {
      if (!this._engines.has(part.name))
        throw this.createStacklessError(\`Unknown engine "\${part.name}" while parsing selector \${selector}\`);
    });
    return result;
  }
  generateSelector(targetElement, options) {
    return generateSelector(this, targetElement, options);
  }
  generateSelectorSimple(targetElement, options) {
    return generateSelector(this, targetElement, { ...options, testIdAttributeName: this._testIdAttributeNameForStrictErrorAndConsoleCodegen }).selector;
  }
  querySelector(selector, root, strict) {
    const result = this.querySelectorAll(selector, root);
    if (strict && result.length > 1)
      throw this.strictModeViolationError(selector, result);
    return result[0];
  }
  _queryNth(elements, part) {
    const list = [...elements];
    let nth = +part.body;
    if (nth === -1)
      nth = list.length - 1;
    return new Set(list.slice(nth, nth + 1));
  }
  _queryLayoutSelector(elements, part, originalRoot) {
    const name = part.name;
    const body = part.body;
    const result = [];
    const inner = this.querySelectorAll(body.parsed, originalRoot);
    for (const element of elements) {
      const score = layoutSelectorScore(name, element, inner, body.distance);
      if (score !== void 0)
        result.push({ element, score });
    }
    result.sort((a, b) => a.score - b.score);
    return new Set(result.map((r) => r.element));
  }
  ariaSnapshot(node, options) {
    if (node.nodeType !== Node.ELEMENT_NODE)
      throw this.createStacklessError("Can only capture aria snapshot of Element nodes.");
    return renderedAriaTree(node, options);
  }
  getAllByAria(document, template) {
    return getAllByAria(document.documentElement, template);
  }
  querySelectorAll(selector, root) {
    if (selector.capture !== void 0) {
      if (selector.parts.some((part) => part.name === "nth"))
        throw this.createStacklessError(\`Can't query n-th element in a request with the capture.\`);
      const withHas = { parts: selector.parts.slice(0, selector.capture + 1) };
      if (selector.capture < selector.parts.length - 1) {
        const parsed = { parts: selector.parts.slice(selector.capture + 1) };
        const has = { name: "internal:has", body: { parsed }, source: stringifySelector(parsed) };
        withHas.parts.push(has);
      }
      return this.querySelectorAll(withHas, root);
    }
    if (!root["querySelectorAll"])
      throw this.createStacklessError("Node is not queryable.");
    if (selector.capture !== void 0) {
      throw this.createStacklessError("Internal error: there should not be a capture in the selector.");
    }
    if (root.nodeType === 11 && selector.parts.length === 1 && selector.parts[0].name === "css" && selector.parts[0].source === ":scope")
      return [root];
    this._evaluator.begin();
    try {
      let roots = /* @__PURE__ */ new Set([root]);
      for (const part of selector.parts) {
        if (part.name === "nth") {
          roots = this._queryNth(roots, part);
        } else if (part.name === "internal:and") {
          const andElements = this.querySelectorAll(part.body.parsed, root);
          roots = new Set(andElements.filter((e) => roots.has(e)));
        } else if (part.name === "internal:or") {
          const orElements = this.querySelectorAll(part.body.parsed, root);
          roots = new Set(sortInDOMOrder(/* @__PURE__ */ new Set([...roots, ...orElements])));
        } else if (kLayoutSelectorNames.includes(part.name)) {
          roots = this._queryLayoutSelector(roots, part, root);
        } else {
          const next = /* @__PURE__ */ new Set();
          for (const root2 of roots) {
            const all = this._queryEngineAll(part, root2);
            for (const one of all)
              next.add(one);
          }
          roots = next;
        }
      }
      return [...roots];
    } finally {
      this._evaluator.end();
    }
  }
  _queryEngineAll(part, root) {
    const result = this._engines.get(part.name).queryAll(root, part.body);
    for (const element of result) {
      if (!("nodeName" in element))
        throw this.createStacklessError(\`Expected a Node but got \${Object.prototype.toString.call(element)}\`);
    }
    return result;
  }
  _createAttributeEngine(attribute, shadow) {
    const toCSS = (selector) => {
      const css = \`[\${attribute}=\${JSON.stringify(selector)}]\`;
      return [{ simples: [{ selector: { css, functions: [] }, combinator: "" }] }];
    };
    return {
      queryAll: (root, selector) => {
        return this._evaluator.query({ scope: root, pierceShadow: shadow }, toCSS(selector));
      }
    };
  }
  _createCSSEngine() {
    return {
      queryAll: (root, body) => {
        return this._evaluator.query({ scope: root, pierceShadow: true }, body);
      }
    };
  }
  _createTextEngine(shadow, internal) {
    const queryAll = (root, selector) => {
      const { matcher, kind } = createTextMatcher(selector, internal);
      const result = [];
      let lastDidNotMatchSelf = null;
      const appendElement = (element) => {
        if (kind === "lax" && lastDidNotMatchSelf && lastDidNotMatchSelf.contains(element))
          return false;
        const matches = elementMatchesText(this._evaluator._cacheText, element, matcher);
        if (matches === "none")
          lastDidNotMatchSelf = element;
        if (matches === "self" || matches === "selfAndChildren" && kind === "strict" && !internal)
          result.push(element);
      };
      if (root.nodeType === Node.ELEMENT_NODE)
        appendElement(root);
      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: shadow }, "*");
      for (const element of elements)
        appendElement(element);
      return result;
    };
    return { queryAll };
  }
  _createInternalHasTextEngine() {
    return {
      queryAll: (root, selector) => {
        if (root.nodeType !== 1)
          return [];
        const element = root;
        const text = elementText(this._evaluator._cacheText, element);
        const { matcher } = createTextMatcher(selector, true);
        return matcher(text) ? [element] : [];
      }
    };
  }
  _createInternalHasNotTextEngine() {
    return {
      queryAll: (root, selector) => {
        if (root.nodeType !== 1)
          return [];
        const element = root;
        const text = elementText(this._evaluator._cacheText, element);
        const { matcher } = createTextMatcher(selector, true);
        return matcher(text) ? [] : [element];
      }
    };
  }
  _createInternalLabelEngine() {
    return {
      queryAll: (root, selector) => {
        const { matcher } = createTextMatcher(selector, true);
        const allElements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, "*");
        return allElements.filter((element) => {
          return getElementLabels(this._evaluator._cacheText, element).some((label) => matcher(label));
        });
      }
    };
  }
  _createNamedAttributeEngine() {
    const queryAll = (root, selector) => {
      const parsed = parseAttributeSelector(selector, true);
      if (parsed.name || parsed.attributes.length !== 1)
        throw new Error("Malformed attribute selector: " + selector);
      const { name, value, caseSensitive } = parsed.attributes[0];
      const lowerCaseValue = caseSensitive ? null : value.toLowerCase();
      let matcher;
      if (value instanceof RegExp)
        matcher = (s) => !!s.match(value);
      else if (caseSensitive)
        matcher = (s) => s === value;
      else
        matcher = (s) => s.toLowerCase().includes(lowerCaseValue);
      const elements = this._evaluator._queryCSS({ scope: root, pierceShadow: true }, \`[\${name}]\`);
      return elements.filter((e) => matcher(e.getAttribute(name)));
    };
    return { queryAll };
  }
  _createControlEngine() {
    return {
      queryAll(root, body) {
        if (body === "enter-frame")
          return [];
        if (body === "return-empty")
          return [];
        if (body === "component") {
          if (root.nodeType !== 1)
            return [];
          return [root.childElementCount === 1 ? root.firstElementChild : root];
        }
        throw new Error(\`Internal error, unknown internal:control selector \${body}\`);
      }
    };
  }
  _createHasEngine() {
    const queryAll = (root, body) => {
      if (root.nodeType !== 1)
        return [];
      const has = !!this.querySelector(body.parsed, root, false);
      return has ? [root] : [];
    };
    return { queryAll };
  }
  _createHasNotEngine() {
    const queryAll = (root, body) => {
      if (root.nodeType !== 1)
        return [];
      const has = !!this.querySelector(body.parsed, root, false);
      return has ? [] : [root];
    };
    return { queryAll };
  }
  _createVisibleEngine() {
    const queryAll = (root, body) => {
      if (root.nodeType !== 1)
        return [];
      return isElementVisible(root) === Boolean(body) ? [root] : [];
    };
    return { queryAll };
  }
  _createInternalChainEngine() {
    const queryAll = (root, body) => {
      return this.querySelectorAll(body.parsed, root);
    };
    return { queryAll };
  }
  extend(source, params) {
    const constrFunction = this.window.eval(\`
    (() => {
      const module = {};
      \${source}
      return module.exports.default();
    })()\`);
    return new constrFunction(this, params);
  }
  async viewportRatio(element) {
    return await new Promise((resolve) => {
      const observer = new IntersectionObserver((entries) => {
        resolve(entries[0].intersectionRatio);
        observer.disconnect();
      });
      observer.observe(element);
      this.builtinRequestAnimationFrame(() => {
      });
    });
  }
  getElementBorderWidth(node) {
    if (node.nodeType !== Node.ELEMENT_NODE || !node.ownerDocument || !node.ownerDocument.defaultView)
      return { left: 0, top: 0 };
    const style = node.ownerDocument.defaultView.getComputedStyle(node);
    return { left: parseInt(style.borderLeftWidth || "", 10), top: parseInt(style.borderTopWidth || "", 10) };
  }
  describeIFrameStyle(iframe) {
    if (!iframe.ownerDocument || !iframe.ownerDocument.defaultView)
      return "error:notconnected";
    const defaultView = iframe.ownerDocument.defaultView;
    for (let e = iframe; e; e = parentElementOrShadowHost(e)) {
      if (defaultView.getComputedStyle(e).transform !== "none")
        return "transformed";
    }
    const iframeStyle = defaultView.getComputedStyle(iframe);
    return {
      left: parseInt(iframeStyle.borderLeftWidth || "", 10) + parseInt(iframeStyle.paddingLeft || "", 10),
      top: parseInt(iframeStyle.borderTopWidth || "", 10) + parseInt(iframeStyle.paddingTop || "", 10)
    };
  }
  retarget(node, behavior) {
    let element = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
    if (!element)
      return null;
    if (behavior === "none")
      return element;
    if (!element.matches("input, textarea, select") && !element.isContentEditable) {
      if (behavior === "button-link")
        element = element.closest("button, [role=button], a, [role=link]") || element;
      else
        element = element.closest("button, [role=button], [role=checkbox], [role=radio]") || element;
    }
    if (behavior === "follow-label") {
      if (!element.matches("a, input, textarea, button, select, [role=link], [role=button], [role=checkbox], [role=radio]") && !element.isContentEditable) {
        element = element.closest("label") || element;
      }
      if (element.nodeName === "LABEL")
        element = element.control || element;
    }
    return element;
  }
  async checkElementStates(node, states) {
    if (states.includes("stable")) {
      const stableResult = await this._checkElementIsStable(node);
      if (stableResult === false)
        return { missingState: "stable" };
      if (stableResult === "error:notconnected")
        return stableResult;
    }
    for (const state of states) {
      if (state !== "stable") {
        const result = this.elementState(node, state);
        if (result === false)
          return { missingState: state };
        if (result === "error:notconnected")
          return result;
      }
    }
  }
  async _checkElementIsStable(node) {
    const continuePolling = Symbol("continuePolling");
    let lastRect;
    let stableRafCounter = 0;
    let lastTime = 0;
    const check = () => {
      const element = this.retarget(node, "no-follow-label");
      if (!element)
        return "error:notconnected";
      const time = performance.now();
      if (this._stableRafCount > 1 && time - lastTime < 15)
        return continuePolling;
      lastTime = time;
      const clientRect = element.getBoundingClientRect();
      const rect = { x: clientRect.top, y: clientRect.left, width: clientRect.width, height: clientRect.height };
      if (lastRect) {
        const samePosition = rect.x === lastRect.x && rect.y === lastRect.y && rect.width === lastRect.width && rect.height === lastRect.height;
        if (!samePosition)
          return false;
        if (++stableRafCounter >= this._stableRafCount)
          return true;
      }
      lastRect = rect;
      return continuePolling;
    };
    let fulfill;
    let reject;
    const result = new Promise((f, r) => {
      fulfill = f;
      reject = r;
    });
    const raf = () => {
      try {
        const success = check();
        if (success !== continuePolling)
          fulfill(success);
        else
          this.builtinRequestAnimationFrame(raf);
      } catch (e) {
        reject(e);
      }
    };
    this.builtinRequestAnimationFrame(raf);
    return result;
  }
  elementState(node, state) {
    const element = this.retarget(node, ["stable", "visible", "hidden"].includes(state) ? "none" : "follow-label");
    if (!element || !element.isConnected) {
      if (state === "hidden")
        return true;
      return "error:notconnected";
    }
    if (state === "visible")
      return isElementVisible(element);
    if (state === "hidden")
      return !isElementVisible(element);
    const disabled = getAriaDisabled(element);
    if (state === "disabled")
      return disabled;
    if (state === "enabled")
      return !disabled;
    const editable = !(["INPUT", "TEXTAREA", "SELECT"].includes(element.nodeName) && element.hasAttribute("readonly"));
    if (state === "editable")
      return !disabled && editable;
    if (state === "checked" || state === "unchecked") {
      const need = state === "checked";
      const checked = getChecked(element, false);
      if (checked === "error")
        throw this.createStacklessError("Not a checkbox or radio button");
      return need === checked;
    }
    throw this.createStacklessError(\`Unexpected element state "\${state}"\`);
  }
  selectOptions(node, optionsToSelect) {
    const element = this.retarget(node, "follow-label");
    if (!element)
      return "error:notconnected";
    if (element.nodeName.toLowerCase() !== "select")
      throw this.createStacklessError("Element is not a <select> element");
    const select = element;
    const options = [...select.options];
    const selectedOptions = [];
    let remainingOptionsToSelect = optionsToSelect.slice();
    for (let index = 0; index < options.length; index++) {
      const option = options[index];
      const filter = (optionToSelect) => {
        if (optionToSelect instanceof Node)
          return option === optionToSelect;
        let matches = true;
        if (optionToSelect.valueOrLabel !== void 0)
          matches = matches && (optionToSelect.valueOrLabel === option.value || optionToSelect.valueOrLabel === option.label);
        if (optionToSelect.value !== void 0)
          matches = matches && optionToSelect.value === option.value;
        if (optionToSelect.label !== void 0)
          matches = matches && optionToSelect.label === option.label;
        if (optionToSelect.index !== void 0)
          matches = matches && optionToSelect.index === index;
        return matches;
      };
      if (!remainingOptionsToSelect.some(filter))
        continue;
      selectedOptions.push(option);
      if (select.multiple) {
        remainingOptionsToSelect = remainingOptionsToSelect.filter((o) => !filter(o));
      } else {
        remainingOptionsToSelect = [];
        break;
      }
    }
    if (remainingOptionsToSelect.length)
      return "error:optionsnotfound";
    select.value = void 0;
    selectedOptions.forEach((option) => option.selected = true);
    select.dispatchEvent(new Event("input", { bubbles: true, composed: true }));
    select.dispatchEvent(new Event("change", { bubbles: true }));
    return selectedOptions.map((option) => option.value);
  }
  fill(node, value) {
    const element = this.retarget(node, "follow-label");
    if (!element)
      return "error:notconnected";
    if (element.nodeName.toLowerCase() === "input") {
      const input = element;
      const type = input.type.toLowerCase();
      const kInputTypesToSetValue = /* @__PURE__ */ new Set(["color", "date", "time", "datetime-local", "month", "range", "week"]);
      const kInputTypesToTypeInto = /* @__PURE__ */ new Set(["", "email", "number", "password", "search", "tel", "text", "url"]);
      if (!kInputTypesToTypeInto.has(type) && !kInputTypesToSetValue.has(type))
        throw this.createStacklessError(\`Input of type "\${type}" cannot be filled\`);
      if (type === "number") {
        value = value.trim();
        if (isNaN(Number(value)))
          throw this.createStacklessError("Cannot type text into input[type=number]");
      }
      if (kInputTypesToSetValue.has(type)) {
        value = value.trim();
        input.focus();
        input.value = value;
        if (input.value !== value)
          throw this.createStacklessError("Malformed value");
        element.dispatchEvent(new Event("input", { bubbles: true, composed: true }));
        element.dispatchEvent(new Event("change", { bubbles: true }));
        return "done";
      }
    } else if (element.nodeName.toLowerCase() === "textarea") {
    } else if (!element.isContentEditable) {
      throw this.createStacklessError("Element is not an <input>, <textarea> or [contenteditable] element");
    }
    this.selectText(element);
    return "needsinput";
  }
  selectText(node) {
    const element = this.retarget(node, "follow-label");
    if (!element)
      return "error:notconnected";
    if (element.nodeName.toLowerCase() === "input") {
      const input = element;
      input.select();
      input.focus();
      return "done";
    }
    if (element.nodeName.toLowerCase() === "textarea") {
      const textarea = element;
      textarea.selectionStart = 0;
      textarea.selectionEnd = textarea.value.length;
      textarea.focus();
      return "done";
    }
    const range = element.ownerDocument.createRange();
    range.selectNodeContents(element);
    const selection = element.ownerDocument.defaultView.getSelection();
    if (selection) {
      selection.removeAllRanges();
      selection.addRange(range);
    }
    element.focus();
    return "done";
  }
  _activelyFocused(node) {
    const activeElement = node.getRootNode().activeElement;
    const isFocused = activeElement === node && !!node.ownerDocument && node.ownerDocument.hasFocus();
    return { activeElement, isFocused };
  }
  focusNode(node, resetSelectionIfNotFocused) {
    if (!node.isConnected)
      return "error:notconnected";
    if (node.nodeType !== Node.ELEMENT_NODE)
      throw this.createStacklessError("Node is not an element");
    const { activeElement, isFocused: wasFocused } = this._activelyFocused(node);
    if (node.isContentEditable && !wasFocused && activeElement && activeElement.blur) {
      activeElement.blur();
    }
    node.focus();
    node.focus();
    if (resetSelectionIfNotFocused && !wasFocused && node.nodeName.toLowerCase() === "input") {
      try {
        const input = node;
        input.setSelectionRange(0, 0);
      } catch (e) {
      }
    }
    return "done";
  }
  blurNode(node) {
    if (!node.isConnected)
      return "error:notconnected";
    if (node.nodeType !== Node.ELEMENT_NODE)
      throw this.createStacklessError("Node is not an element");
    node.blur();
    return "done";
  }
  setInputFiles(node, payloads) {
    if (node.nodeType !== Node.ELEMENT_NODE)
      return "Node is not of type HTMLElement";
    const element = node;
    if (element.nodeName !== "INPUT")
      return "Not an <input> element";
    const input = element;
    const type = (input.getAttribute("type") || "").toLowerCase();
    if (type !== "file")
      return "Not an input[type=file] element";
    const files = payloads.map((file) => {
      const bytes = Uint8Array.from(atob(file.buffer), (c) => c.charCodeAt(0));
      return new File([bytes], file.name, { type: file.mimeType, lastModified: file.lastModifiedMs });
    });
    const dt = new DataTransfer();
    for (const file of files)
      dt.items.add(file);
    input.files = dt.files;
    input.dispatchEvent(new Event("input", { bubbles: true, composed: true }));
    input.dispatchEvent(new Event("change", { bubbles: true }));
  }
  expectHitTarget(hitPoint, targetElement) {
    const roots = [];
    let parentElement = targetElement;
    while (parentElement) {
      const root = enclosingShadowRootOrDocument(parentElement);
      if (!root)
        break;
      roots.push(root);
      if (root.nodeType === 9)
        break;
      parentElement = root.host;
    }
    let hitElement;
    for (let index = roots.length - 1; index >= 0; index--) {
      const root = roots[index];
      const elements = root.elementsFromPoint(hitPoint.x, hitPoint.y);
      const singleElement = root.elementFromPoint(hitPoint.x, hitPoint.y);
      if (singleElement && elements[0] && parentElementOrShadowHost(singleElement) === elements[0]) {
        const style = this.window.getComputedStyle(singleElement);
        if ((style == null ? void 0 : style.display) === "contents") {
          elements.unshift(singleElement);
        }
      }
      if (elements[0] && elements[0].shadowRoot === root && elements[1] === singleElement) {
        elements.shift();
      }
      const innerElement = elements[0];
      if (!innerElement)
        break;
      hitElement = innerElement;
      if (index && innerElement !== roots[index - 1].host)
        break;
    }
    const hitParents = [];
    while (hitElement && hitElement !== targetElement) {
      hitParents.push(hitElement);
      hitElement = parentElementOrShadowHost(hitElement);
    }
    if (hitElement === targetElement)
      return "done";
    const hitTargetDescription = this.previewNode(hitParents[0] || this.document.documentElement);
    let rootHitTargetDescription;
    let element = targetElement;
    while (element) {
      const index = hitParents.indexOf(element);
      if (index !== -1) {
        if (index > 1)
          rootHitTargetDescription = this.previewNode(hitParents[index - 1]);
        break;
      }
      element = parentElementOrShadowHost(element);
    }
    if (rootHitTargetDescription)
      return { hitTargetDescription: \`\${hitTargetDescription} from \${rootHitTargetDescription} subtree\` };
    return { hitTargetDescription };
  }
  // Life of a pointer action, for example click.
  //
  // 0. Retry items 1 and 2 while action fails due to navigation or element being detached.
  //   1. Resolve selector to an element.
  //   2. Retry the following steps until the element is detached or frame navigates away.
  //     2a. Wait for the element to be stable (not moving), visible and enabled.
  //     2b. Scroll element into view. Scrolling alternates between:
  //         - Built-in protocol scrolling.
  //         - Anchoring to the top/left, bottom/right and center/center.
  //         This is to scroll elements from under sticky headers/footers.
  //     2c. Click point is calculated, either based on explicitly specified position,
  //         or some visible point of the element based on protocol content quads.
  //     2d. Click point relative to page viewport is converted relative to the target iframe
  //         for the next hit-point check.
  //     2e. (injected) Hit target at the click point must be a descendant of the target element.
  //         This prevents mis-clicking in edge cases like <iframe> overlaying the target.
  //     2f. (injected) Events specific for click (or some other action type) are intercepted on
  //         the Window with capture:true. See 2i for details.
  //         Note: this step is skipped for drag&drop (see inline comments for the reason).
  //     2g. Necessary keyboard modifiers are pressed.
  //     2h. Click event is issued (mousemove + mousedown + mouseup).
  //     2i. (injected) For each event, we check that hit target at the event point
  //         is a descendant of the target element.
  //         This guarantees no race between issuing the event and handling it in the page,
  //         for example due to layout shift.
  //         When hit target check fails, we block all future events in the page.
  //     2j. Keyboard modifiers are restored.
  //     2k. (injected) Event interceptor is removed.
  //     2l. All navigations triggered between 2g-2k are awaited to be either committed or canceled.
  //     2m. If failed, wait for increasing amount of time before the next retry.
  setupHitTargetInterceptor(node, action, hitPoint, blockAllEvents) {
    const element = this.retarget(node, "button-link");
    if (!element || !element.isConnected)
      return "error:notconnected";
    if (hitPoint) {
      const preliminaryResult = this.expectHitTarget(hitPoint, element);
      if (preliminaryResult !== "done")
        return preliminaryResult.hitTargetDescription;
    }
    if (action === "drag")
      return { stop: () => "done" };
    const events = {
      "hover": kHoverHitTargetInterceptorEvents,
      "tap": kTapHitTargetInterceptorEvents,
      "mouse": kMouseHitTargetInterceptorEvents
    }[action];
    let result;
    const listener = (event) => {
      if (!events.has(event.type))
        return;
      if (!event.isTrusted)
        return;
      const point = !!this.window.TouchEvent && event instanceof this.window.TouchEvent ? event.touches[0] : event;
      if (result === void 0 && point)
        result = this.expectHitTarget({ x: point.clientX, y: point.clientY }, element);
      if (blockAllEvents || result !== "done" && result !== void 0) {
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
      }
    };
    const stop = () => {
      if (this._hitTargetInterceptor === listener)
        this._hitTargetInterceptor = void 0;
      return result || "done";
    };
    this._hitTargetInterceptor = listener;
    return { stop };
  }
  dispatchEvent(node, type, eventInit) {
    let event;
    eventInit = { bubbles: true, cancelable: true, composed: true, ...eventInit };
    switch (eventType.get(type)) {
      case "mouse":
        event = new MouseEvent(type, eventInit);
        break;
      case "keyboard":
        event = new KeyboardEvent(type, eventInit);
        break;
      case "touch":
        event = new TouchEvent(type, eventInit);
        break;
      case "pointer":
        event = new PointerEvent(type, eventInit);
        break;
      case "focus":
        event = new FocusEvent(type, eventInit);
        break;
      case "drag":
        event = new DragEvent(type, eventInit);
        break;
      case "wheel":
        event = new WheelEvent(type, eventInit);
        break;
      case "deviceorientation":
        try {
          event = new DeviceOrientationEvent(type, eventInit);
        } catch {
          const { bubbles, cancelable, alpha, beta, gamma, absolute } = eventInit;
          event = this.document.createEvent("DeviceOrientationEvent");
          event.initDeviceOrientationEvent(type, bubbles, cancelable, alpha, beta, gamma, absolute);
        }
        break;
      case "devicemotion":
        try {
          event = new DeviceMotionEvent(type, eventInit);
        } catch {
          const { bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval } = eventInit;
          event = this.document.createEvent("DeviceMotionEvent");
          event.initDeviceMotionEvent(type, bubbles, cancelable, acceleration, accelerationIncludingGravity, rotationRate, interval);
        }
        break;
      default:
        event = new Event(type, eventInit);
        break;
    }
    node.dispatchEvent(event);
  }
  previewNode(node) {
    if (node.nodeType === Node.TEXT_NODE)
      return oneLine(\`#text=\${node.nodeValue || ""}\`);
    if (node.nodeType !== Node.ELEMENT_NODE)
      return oneLine(\`<\${node.nodeName.toLowerCase()} />\`);
    const element = node;
    const attrs = [];
    for (let i = 0; i < element.attributes.length; i++) {
      const { name, value } = element.attributes[i];
      if (name === "style")
        continue;
      if (!value && booleanAttributes.has(name))
        attrs.push(\` \${name}\`);
      else
        attrs.push(\` \${name}="\${value}"\`);
    }
    attrs.sort((a, b) => a.length - b.length);
    const attrText = trimStringWithEllipsis(attrs.join(""), 500);
    if (autoClosingTags.has(element.nodeName))
      return oneLine(\`<\${element.nodeName.toLowerCase()}\${attrText}/>\`);
    const children = element.childNodes;
    let onlyText = false;
    if (children.length <= 5) {
      onlyText = true;
      for (let i = 0; i < children.length; i++)
        onlyText = onlyText && children[i].nodeType === Node.TEXT_NODE;
    }
    const text = onlyText ? element.textContent || "" : children.length ? "\\u2026" : "";
    return oneLine(\`<\${element.nodeName.toLowerCase()}\${attrText}>\${trimStringWithEllipsis(text, 50)}</\${element.nodeName.toLowerCase()}>\`);
  }
  strictModeViolationError(selector, matches) {
    const infos = matches.slice(0, 10).map((m) => ({
      preview: this.previewNode(m),
      selector: this.generateSelectorSimple(m)
    }));
    const lines = infos.map((info, i) => \`
    \${i + 1}) \${info.preview} aka \${asLocator(this._sdkLanguage, info.selector)}\`);
    if (infos.length < matches.length)
      lines.push("\\n    ...");
    return this.createStacklessError(\`strict mode violation: \${asLocator(this._sdkLanguage, stringifySelector(selector))} resolved to \${matches.length} elements:\${lines.join("")}
\`);
  }
  createStacklessError(message) {
    if (this._browserName === "firefox") {
      const error2 = new Error("Error: " + message);
      error2.stack = "";
      return error2;
    }
    const error = new Error(message);
    delete error.stack;
    return error;
  }
  createHighlight() {
    return new Highlight(this);
  }
  maskSelectors(selectors, color) {
    if (this._highlight)
      this.hideHighlight();
    this._highlight = new Highlight(this);
    this._highlight.install();
    const elements = [];
    for (const selector of selectors)
      elements.push(this.querySelectorAll(selector, this.document.documentElement));
    this._highlight.maskElements(elements.flat(), color);
  }
  highlight(selector) {
    if (!this._highlight) {
      this._highlight = new Highlight(this);
      this._highlight.install();
    }
    this._highlight.runHighlightOnRaf(selector);
  }
  hideHighlight() {
    if (this._highlight) {
      this._highlight.uninstall();
      delete this._highlight;
    }
  }
  markTargetElements(markedElements, callId) {
    var _a, _b;
    if (((_a = this._markedElements) == null ? void 0 : _a.callId) !== callId)
      this._markedElements = void 0;
    const previous = ((_b = this._markedElements) == null ? void 0 : _b.elements) || /* @__PURE__ */ new Set();
    const unmarkEvent = new CustomEvent("__playwright_unmark_target__", {
      bubbles: true,
      cancelable: true,
      detail: callId,
      composed: true
    });
    for (const element of previous) {
      if (!markedElements.has(element))
        element.dispatchEvent(unmarkEvent);
    }
    const markEvent = new CustomEvent("__playwright_mark_target__", {
      bubbles: true,
      cancelable: true,
      detail: callId,
      composed: true
    });
    for (const element of markedElements) {
      if (!previous.has(element))
        element.dispatchEvent(markEvent);
    }
    this._markedElements = { callId, elements: markedElements };
  }
  _setupGlobalListenersRemovalDetection() {
    const customEventName = "__playwright_global_listeners_check__";
    let seenEvent = false;
    const handleCustomEvent = () => seenEvent = true;
    this.window.addEventListener(customEventName, handleCustomEvent);
    new MutationObserver((entries) => {
      const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(this.document.documentElement));
      if (!newDocumentElement)
        return;
      seenEvent = false;
      this.window.dispatchEvent(new CustomEvent(customEventName));
      if (seenEvent)
        return;
      this.window.addEventListener(customEventName, handleCustomEvent);
      for (const callback of this.onGlobalListenersRemoved)
        callback();
    }).observe(this.document, { childList: true });
  }
  _setupHitTargetInterceptors() {
    const listener = (event) => {
      var _a;
      return (_a = this._hitTargetInterceptor) == null ? void 0 : _a.call(this, event);
    };
    const addHitTargetInterceptorListeners = () => {
      for (const event of kAllHitTargetInterceptorEvents)
        this.window.addEventListener(event, listener, { capture: true, passive: false });
    };
    addHitTargetInterceptorListeners();
    this.onGlobalListenersRemoved.add(addHitTargetInterceptorListeners);
  }
  async expect(element, options, elements) {
    const isArray = options.expression === "to.have.count" || options.expression.endsWith(".array");
    if (isArray)
      return this.expectArray(elements, options);
    if (!element) {
      if (!options.isNot && options.expression === "to.be.hidden")
        return { matches: true };
      if (options.isNot && options.expression === "to.be.visible")
        return { matches: false };
      if (!options.isNot && options.expression === "to.be.detached")
        return { matches: true };
      if (options.isNot && options.expression === "to.be.attached")
        return { matches: false };
      if (options.isNot && options.expression === "to.be.in.viewport")
        return { matches: false };
      return { matches: options.isNot, missingReceived: true };
    }
    return await this.expectSingleElement(element, options);
  }
  async expectSingleElement(element, options) {
    var _a, _b;
    const expression = options.expression;
    {
      let elementState;
      if (expression === "to.have.attribute") {
        elementState = element.hasAttribute(options.expressionArg);
      } else if (expression === "to.be.checked") {
        elementState = this.elementState(element, "checked");
      } else if (expression === "to.be.unchecked") {
        elementState = this.elementState(element, "unchecked");
      } else if (expression === "to.be.disabled") {
        elementState = this.elementState(element, "disabled");
      } else if (expression === "to.be.editable") {
        elementState = this.elementState(element, "editable");
      } else if (expression === "to.be.readonly") {
        elementState = !this.elementState(element, "editable");
      } else if (expression === "to.be.empty") {
        if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA")
          elementState = !element.value;
        else
          elementState = !((_a = element.textContent) == null ? void 0 : _a.trim());
      } else if (expression === "to.be.enabled") {
        elementState = this.elementState(element, "enabled");
      } else if (expression === "to.be.focused") {
        elementState = this._activelyFocused(element).isFocused;
      } else if (expression === "to.be.hidden") {
        elementState = this.elementState(element, "hidden");
      } else if (expression === "to.be.visible") {
        elementState = this.elementState(element, "visible");
      } else if (expression === "to.be.attached") {
        elementState = true;
      } else if (expression === "to.be.detached") {
        elementState = false;
      }
      if (elementState !== void 0) {
        if (elementState === "error:notcheckbox")
          throw this.createStacklessError("Element is not a checkbox");
        if (elementState === "error:notconnected")
          throw this.createStacklessError("Element is not connected");
        return { received: elementState, matches: elementState };
      }
    }
    {
      if (expression === "to.have.property") {
        let target = element;
        const properties = options.expressionArg.split(".");
        for (let i = 0; i < properties.length - 1; i++) {
          if (typeof target !== "object" || !(properties[i] in target))
            return { received: void 0, matches: false };
          target = target[properties[i]];
        }
        const received = target[properties[properties.length - 1]];
        const matches = deepEquals(received, options.expectedValue);
        return { received, matches };
      }
    }
    {
      if (expression === "to.be.in.viewport") {
        const ratio = await this.viewportRatio(element);
        return { received: \`viewport ratio \${ratio}\`, matches: ratio > 0 && ratio > ((_b = options.expectedNumber) != null ? _b : 0) - 1e-9 };
      }
    }
    {
      if (expression === "to.have.values") {
        element = this.retarget(element, "follow-label");
        if (element.nodeName !== "SELECT" || !element.multiple)
          throw this.createStacklessError("Not a select element with a multiple attribute");
        const received = [...element.selectedOptions].map((o) => o.value);
        if (received.length !== options.expectedText.length)
          return { received, matches: false };
        return { received, matches: received.map((r, i) => new ExpectedTextMatcher(options.expectedText[i]).matches(r)).every(Boolean) };
      }
    }
    {
      if (expression === "to.match.aria") {
        const result = matchesAriaTree(element, options.expectedValue);
        return {
          received: result.received,
          matches: !!result.matches.length
        };
      }
    }
    {
      let received;
      if (expression === "to.have.attribute.value") {
        const value = element.getAttribute(options.expressionArg);
        if (value === null)
          return { received: null, matches: false };
        received = value;
      } else if (expression === "to.have.class") {
        received = element.classList.toString();
      } else if (expression === "to.have.css") {
        received = this.window.getComputedStyle(element).getPropertyValue(options.expressionArg);
      } else if (expression === "to.have.id") {
        received = element.id;
      } else if (expression === "to.have.text") {
        received = options.useInnerText ? element.innerText : elementText(/* @__PURE__ */ new Map(), element).full;
      } else if (expression === "to.have.accessible.name") {
        received = getElementAccessibleName(
          element,
          false
          /* includeHidden */
        );
      } else if (expression === "to.have.accessible.description") {
        received = getElementAccessibleDescription(
          element,
          false
          /* includeHidden */
        );
      } else if (expression === "to.have.role") {
        received = getAriaRole(element) || "";
      } else if (expression === "to.have.title") {
        received = this.document.title;
      } else if (expression === "to.have.url") {
        received = this.document.location.href;
      } else if (expression === "to.have.value") {
        element = this.retarget(element, "follow-label");
        if (element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")
          throw this.createStacklessError("Not an input element");
        received = element.value;
      }
      if (received !== void 0 && options.expectedText) {
        const matcher = new ExpectedTextMatcher(options.expectedText[0]);
        return { received, matches: matcher.matches(received) };
      }
    }
    throw this.createStacklessError("Unknown expect matcher: " + expression);
  }
  expectArray(elements, options) {
    const expression = options.expression;
    if (expression === "to.have.count") {
      const received2 = elements.length;
      const matches = received2 === options.expectedNumber;
      return { received: received2, matches };
    }
    let received;
    if (expression === "to.have.text.array" || expression === "to.contain.text.array")
      received = elements.map((e) => options.useInnerText ? e.innerText : elementText(/* @__PURE__ */ new Map(), e).full);
    else if (expression === "to.have.class.array")
      received = elements.map((e) => e.classList.toString());
    if (received && options.expectedText) {
      const lengthShouldMatch = expression !== "to.contain.text.array";
      const matchesLength = received.length === options.expectedText.length || !lengthShouldMatch;
      if (!matchesLength)
        return { received, matches: false };
      const matchers = options.expectedText.map((e) => new ExpectedTextMatcher(e));
      let mIndex = 0, rIndex = 0;
      while (mIndex < matchers.length && rIndex < received.length) {
        if (matchers[mIndex].matches(received[rIndex]))
          ++mIndex;
        ++rIndex;
      }
      return { received, matches: mIndex === matchers.length };
    }
    throw this.createStacklessError("Unknown expect matcher: " + expression);
  }
};
var autoClosingTags = /* @__PURE__ */ new Set(["AREA", "BASE", "BR", "COL", "COMMAND", "EMBED", "HR", "IMG", "INPUT", "KEYGEN", "LINK", "MENUITEM", "META", "PARAM", "SOURCE", "TRACK", "WBR"]);
var booleanAttributes = /* @__PURE__ */ new Set(["checked", "selected", "disabled", "readonly", "multiple"]);
function oneLine(s) {
  return s.replace(/\\n/g, "\\u21B5").replace(/\\t/g, "\\u21C6");
}
var eventType = /* @__PURE__ */ new Map([
  ["auxclick", "mouse"],
  ["click", "mouse"],
  ["dblclick", "mouse"],
  ["mousedown", "mouse"],
  ["mouseeenter", "mouse"],
  ["mouseleave", "mouse"],
  ["mousemove", "mouse"],
  ["mouseout", "mouse"],
  ["mouseover", "mouse"],
  ["mouseup", "mouse"],
  ["mouseleave", "mouse"],
  ["mousewheel", "mouse"],
  ["keydown", "keyboard"],
  ["keyup", "keyboard"],
  ["keypress", "keyboard"],
  ["textInput", "keyboard"],
  ["touchstart", "touch"],
  ["touchmove", "touch"],
  ["touchend", "touch"],
  ["touchcancel", "touch"],
  ["pointerover", "pointer"],
  ["pointerout", "pointer"],
  ["pointerenter", "pointer"],
  ["pointerleave", "pointer"],
  ["pointerdown", "pointer"],
  ["pointerup", "pointer"],
  ["pointermove", "pointer"],
  ["pointercancel", "pointer"],
  ["gotpointercapture", "pointer"],
  ["lostpointercapture", "pointer"],
  ["focus", "focus"],
  ["blur", "focus"],
  ["drag", "drag"],
  ["dragstart", "drag"],
  ["dragend", "drag"],
  ["dragover", "drag"],
  ["dragenter", "drag"],
  ["dragleave", "drag"],
  ["dragexit", "drag"],
  ["drop", "drag"],
  ["wheel", "wheel"],
  ["deviceorientation", "deviceorientation"],
  ["deviceorientationabsolute", "deviceorientation"],
  ["devicemotion", "devicemotion"]
]);
var kHoverHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["mousemove"]);
var kTapHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["pointerdown", "pointerup", "touchstart", "touchend", "touchcancel"]);
var kMouseHitTargetInterceptorEvents = /* @__PURE__ */ new Set(["mousedown", "mouseup", "pointerdown", "pointerup", "click", "auxclick", "dblclick", "contextmenu"]);
var kAllHitTargetInterceptorEvents = /* @__PURE__ */ new Set([...kHoverHitTargetInterceptorEvents, ...kTapHitTargetInterceptorEvents, ...kMouseHitTargetInterceptorEvents]);
function cssUnquote(s) {
  s = s.substring(1, s.length - 1);
  if (!s.includes("\\\\"))
    return s;
  const r = [];
  let i = 0;
  while (i < s.length) {
    if (s[i] === "\\\\" && i + 1 < s.length)
      i++;
    r.push(s[i++]);
  }
  return r.join("");
}
function createTextMatcher(selector, internal) {
  if (selector[0] === "/" && selector.lastIndexOf("/") > 0) {
    const lastSlash = selector.lastIndexOf("/");
    const re = new RegExp(selector.substring(1, lastSlash), selector.substring(lastSlash + 1));
    return { matcher: (elementText2) => re.test(elementText2.full), kind: "regex" };
  }
  const unquote = internal ? JSON.parse.bind(JSON) : cssUnquote;
  let strict = false;
  if (selector.length > 1 && selector[0] === '"' && selector[selector.length - 1] === '"') {
    selector = unquote(selector);
    strict = true;
  } else if (internal && selector.length > 1 && selector[0] === '"' && selector[selector.length - 2] === '"' && selector[selector.length - 1] === "i") {
    selector = unquote(selector.substring(0, selector.length - 1));
    strict = false;
  } else if (internal && selector.length > 1 && selector[0] === '"' && selector[selector.length - 2] === '"' && selector[selector.length - 1] === "s") {
    selector = unquote(selector.substring(0, selector.length - 1));
    strict = true;
  } else if (selector.length > 1 && selector[0] === "'" && selector[selector.length - 1] === "'") {
    selector = unquote(selector);
    strict = true;
  }
  selector = normalizeWhiteSpace(selector);
  if (strict) {
    if (internal)
      return { kind: "strict", matcher: (elementText2) => elementText2.normalized === selector };
    const strictTextNodeMatcher = (elementText2) => {
      if (!selector && !elementText2.immediate.length)
        return true;
      return elementText2.immediate.some((s) => normalizeWhiteSpace(s) === selector);
    };
    return { matcher: strictTextNodeMatcher, kind: "strict" };
  }
  selector = selector.toLowerCase();
  return { kind: "lax", matcher: (elementText2) => elementText2.normalized.toLowerCase().includes(selector) };
}
var ExpectedTextMatcher = class {
  constructor(expected) {
    this._normalizeWhiteSpace = expected.normalizeWhiteSpace;
    this._ignoreCase = expected.ignoreCase;
    this._string = expected.matchSubstring ? void 0 : this.normalize(expected.string);
    this._substring = expected.matchSubstring ? this.normalize(expected.string) : void 0;
    if (expected.regexSource) {
      const flags = new Set((expected.regexFlags || "").split(""));
      if (expected.ignoreCase === false)
        flags.delete("i");
      if (expected.ignoreCase === true)
        flags.add("i");
      this._regex = new RegExp(expected.regexSource, [...flags].join(""));
    }
  }
  matches(text) {
    if (!this._regex)
      text = this.normalize(text);
    if (this._string !== void 0)
      return text === this._string;
    if (this._substring !== void 0)
      return text.includes(this._substring);
    if (this._regex)
      return !!this._regex.test(text);
    return false;
  }
  normalize(s) {
    if (!s)
      return s;
    if (this._normalizeWhiteSpace)
      s = normalizeWhiteSpace(s);
    if (this._ignoreCase)
      s = s.toLocaleLowerCase();
    return s;
  }
};
function deepEquals(a, b) {
  if (a === b)
    return true;
  if (a && b && typeof a === "object" && typeof b === "object") {
    if (a.constructor !== b.constructor)
      return false;
    if (Array.isArray(a)) {
      if (a.length !== b.length)
        return false;
      for (let i = 0; i < a.length; ++i) {
        if (!deepEquals(a[i], b[i]))
          return false;
      }
      return true;
    }
    if (a instanceof RegExp)
      return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf)
      return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString)
      return a.toString() === b.toString();
    const keys = Object.keys(a);
    if (keys.length !== Object.keys(b).length)
      return false;
    for (let i = 0; i < keys.length; ++i) {
      if (!b.hasOwnProperty(keys[i]))
        return false;
    }
    for (const key of keys) {
      if (!deepEquals(a[key], b[key]))
        return false;
    }
    return true;
  }
  if (typeof a === "number" && typeof b === "number")
    return isNaN(a) && isNaN(b);
  return false;
}
`;
});

// node_modules/playwright-core/lib/generated/utilityScriptSource.js
var require_utilityScriptSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/utilityScript.ts
var utilityScript_exports = {};
__export(utilityScript_exports, {
  UtilityScript: () => UtilityScript
});
module.exports = __toCommonJS(utilityScript_exports);

// packages/playwright-core/src/server/isomorphic/utilityScriptSerializers.ts
function source() {
  function isRegExp(obj) {
    try {
      return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
    } catch (error) {
      return false;
    }
  }
  function isDate(obj) {
    try {
      return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
    } catch (error) {
      return false;
    }
  }
  function isURL(obj) {
    try {
      return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
    } catch (error) {
      return false;
    }
  }
  function isError(obj) {
    var _a;
    try {
      return obj instanceof Error || obj && ((_a = Object.getPrototypeOf(obj)) == null ? void 0 : _a.name) === "Error";
    } catch (error) {
      return false;
    }
  }
  function parseEvaluationResultValue2(value, handles = [], refs = /* @__PURE__ */ new Map()) {
    if (Object.is(value, void 0))
      return void 0;
    if (typeof value === "object" && value) {
      if ("ref" in value)
        return refs.get(value.ref);
      if ("v" in value) {
        if (value.v === "undefined")
          return void 0;
        if (value.v === "null")
          return null;
        if (value.v === "NaN")
          return NaN;
        if (value.v === "Infinity")
          return Infinity;
        if (value.v === "-Infinity")
          return -Infinity;
        if (value.v === "-0")
          return -0;
        return void 0;
      }
      if ("d" in value)
        return new Date(value.d);
      if ("u" in value)
        return new URL(value.u);
      if ("bi" in value)
        return BigInt(value.bi);
      if ("e" in value) {
        const error = new Error(value.e.m);
        error.name = value.e.n;
        error.stack = value.e.s;
        return error;
      }
      if ("r" in value)
        return new RegExp(value.r.p, value.r.f);
      if ("a" in value) {
        const result2 = [];
        refs.set(value.id, result2);
        for (const a of value.a)
          result2.push(parseEvaluationResultValue2(a, handles, refs));
        return result2;
      }
      if ("o" in value) {
        const result2 = {};
        refs.set(value.id, result2);
        for (const { k, v } of value.o)
          result2[k] = parseEvaluationResultValue2(v, handles, refs);
        return result2;
      }
      if ("h" in value)
        return handles[value.h];
    }
    return value;
  }
  function serializeAsCallArgument2(value, handleSerializer) {
    return serialize(value, handleSerializer, { visited: /* @__PURE__ */ new Map(), lastId: 0 });
  }
  function serialize(value, handleSerializer, visitorInfo) {
    if (value && typeof value === "object") {
      if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)
        return "ref: <Window>";
      if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)
        return "ref: <Document>";
      if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)
        return "ref: <Node>";
    }
    return innerSerialize(value, handleSerializer, visitorInfo);
  }
  function innerSerialize(value, handleSerializer, visitorInfo) {
    var _a;
    const result2 = handleSerializer(value);
    if ("fallThrough" in result2)
      value = result2.fallThrough;
    else
      return result2;
    if (typeof value === "symbol")
      return { v: "undefined" };
    if (Object.is(value, void 0))
      return { v: "undefined" };
    if (Object.is(value, null))
      return { v: "null" };
    if (Object.is(value, NaN))
      return { v: "NaN" };
    if (Object.is(value, Infinity))
      return { v: "Infinity" };
    if (Object.is(value, -Infinity))
      return { v: "-Infinity" };
    if (Object.is(value, -0))
      return { v: "-0" };
    if (typeof value === "boolean")
      return value;
    if (typeof value === "number")
      return value;
    if (typeof value === "string")
      return value;
    if (typeof value === "bigint")
      return { bi: value.toString() };
    if (isError(value)) {
      let stack;
      if ((_a = value.stack) == null ? void 0 : _a.startsWith(value.name + ": " + value.message)) {
        stack = value.stack;
      } else {
        stack = \`\${value.name}: \${value.message}
\${value.stack}\`;
      }
      return { e: { n: value.name, m: value.message, s: stack } };
    }
    if (isDate(value))
      return { d: value.toJSON() };
    if (isURL(value))
      return { u: value.toJSON() };
    if (isRegExp(value))
      return { r: { p: value.source, f: value.flags } };
    const id = visitorInfo.visited.get(value);
    if (id)
      return { ref: id };
    if (Array.isArray(value)) {
      const a = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (let i = 0; i < value.length; ++i)
        a.push(serialize(value[i], handleSerializer, visitorInfo));
      return { a, id: id2 };
    }
    if (typeof value === "object") {
      const o = [];
      const id2 = ++visitorInfo.lastId;
      visitorInfo.visited.set(value, id2);
      for (const name of Object.keys(value)) {
        let item;
        try {
          item = value[name];
        } catch (e) {
          continue;
        }
        if (name === "toJSON" && typeof item === "function")
          o.push({ k: name, v: { o: [], id: 0 } });
        else
          o.push({ k: name, v: serialize(item, handleSerializer, visitorInfo) });
      }
      let jsonWrapper;
      try {
        if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")
          jsonWrapper = { value: value.toJSON() };
      } catch (e) {
      }
      if (jsonWrapper)
        return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
      return { o, id: id2 };
    }
  }
  return { parseEvaluationResultValue: parseEvaluationResultValue2, serializeAsCallArgument: serializeAsCallArgument2 };
}
var result = source();
var parseEvaluationResultValue = result.parseEvaluationResultValue;
var serializeAsCallArgument = result.serializeAsCallArgument;

// packages/playwright-core/src/server/injected/utilityScript.ts
var UtilityScript = class {
  constructor(isUnderTest) {
    this.serializeAsCallArgument = serializeAsCallArgument;
    this.parseEvaluationResultValue = parseEvaluationResultValue;
    if (isUnderTest)
      this._setBuiltins();
  }
  evaluate(isFunction, returnByValue, expression, argCount, ...argsAndHandles) {
    const args = argsAndHandles.slice(0, argCount);
    const handles = argsAndHandles.slice(argCount);
    const parameters = [];
    for (let i = 0; i < args.length; i++)
      parameters[i] = this.parseEvaluationResultValue(args[i], handles);
    let result2 = globalThis.eval(expression);
    if (isFunction === true) {
      result2 = result2(...parameters);
    } else if (isFunction === false) {
      result2 = result2;
    } else {
      if (typeof result2 === "function")
        result2 = result2(...parameters);
    }
    return returnByValue ? this._promiseAwareJsonValueNoThrow(result2) : result2;
  }
  jsonValue(returnByValue, value) {
    if (Object.is(value, void 0))
      return void 0;
    return serializeAsCallArgument(value, (value2) => ({ fallThrough: value2 }));
  }
  _promiseAwareJsonValueNoThrow(value) {
    const safeJson = (value2) => {
      try {
        return this.jsonValue(true, value2);
      } catch (e) {
        return void 0;
      }
    };
    if (value && typeof value === "object" && typeof value.then === "function") {
      return (async () => {
        const promiseValue = await value;
        return safeJson(promiseValue);
      })();
    }
    return safeJson(value);
  }
  _setBuiltins() {
    var _a, _b;
    const window = globalThis;
    window.builtinSetTimeout = (callback, timeout) => {
      var _a2;
      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)
        return window.__pwClock.builtin.setTimeout(callback, timeout);
      return setTimeout(callback, timeout);
    };
    window.builtinClearTimeout = (id) => {
      var _a2;
      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)
        return window.__pwClock.builtin.clearTimeout(id);
      return clearTimeout(id);
    };
    window.builtinSetInterval = (callback, timeout) => {
      var _a2;
      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)
        return window.__pwClock.builtin.setInterval(callback, timeout);
      return setInterval(callback, timeout);
    };
    window.builtinClearInterval = (id) => {
      var _a2;
      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)
        return window.__pwClock.builtin.clearInterval(id);
      return clearInterval(id);
    };
    window.builtinRequestAnimationFrame = (callback) => {
      var _a2;
      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)
        return window.__pwClock.builtin.requestAnimationFrame(callback);
      return requestAnimationFrame(callback);
    };
    window.builtinCancelAnimationFrame = (id) => {
      var _a2;
      if ((_a2 = window.__pwClock) == null ? void 0 : _a2.builtin)
        return window.__pwClock.builtin.cancelAnimationFrame(id);
      return cancelAnimationFrame(id);
    };
    window.builtinDate = ((_a = window.__pwClock) == null ? void 0 : _a.builtin.Date) || Date;
    window.builtinPerformance = ((_b = window.__pwClock) == null ? void 0 : _b.builtin.performance) || performance;
  }
};
`;
});

// node_modules/playwright-core/lib/server/isomorphic/utilityScriptSerializers.js
var require_utilityScriptSerializers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.serializeAsCallArgument = exports.parseEvaluationResultValue = undefined;
  exports.source = source;
  function source() {
    function isRegExp(obj) {
      try {
        return obj instanceof RegExp || Object.prototype.toString.call(obj) === "[object RegExp]";
      } catch (error) {
        return false;
      }
    }
    function isDate(obj) {
      try {
        return obj instanceof Date || Object.prototype.toString.call(obj) === "[object Date]";
      } catch (error) {
        return false;
      }
    }
    function isURL(obj) {
      try {
        return obj instanceof URL || Object.prototype.toString.call(obj) === "[object URL]";
      } catch (error) {
        return false;
      }
    }
    function isError(obj) {
      try {
        var _Object$getPrototypeO;
        return obj instanceof Error || obj && ((_Object$getPrototypeO = Object.getPrototypeOf(obj)) === null || _Object$getPrototypeO === undefined ? undefined : _Object$getPrototypeO.name) === "Error";
      } catch (error) {
        return false;
      }
    }
    function parseEvaluationResultValue2(value, handles = [], refs = new Map) {
      if (Object.is(value, undefined))
        return;
      if (typeof value === "object" && value) {
        if ("ref" in value)
          return refs.get(value.ref);
        if ("v" in value) {
          if (value.v === "undefined")
            return;
          if (value.v === "null")
            return null;
          if (value.v === "NaN")
            return NaN;
          if (value.v === "Infinity")
            return Infinity;
          if (value.v === "-Infinity")
            return -Infinity;
          if (value.v === "-0")
            return -0;
          return;
        }
        if ("d" in value)
          return new Date(value.d);
        if ("u" in value)
          return new URL(value.u);
        if ("bi" in value)
          return BigInt(value.bi);
        if ("e" in value) {
          const error = new Error(value.e.m);
          error.name = value.e.n;
          error.stack = value.e.s;
          return error;
        }
        if ("r" in value)
          return new RegExp(value.r.p, value.r.f);
        if ("a" in value) {
          const result2 = [];
          refs.set(value.id, result2);
          for (const a of value.a)
            result2.push(parseEvaluationResultValue2(a, handles, refs));
          return result2;
        }
        if ("o" in value) {
          const result2 = {};
          refs.set(value.id, result2);
          for (const {
            k,
            v
          } of value.o)
            result2[k] = parseEvaluationResultValue2(v, handles, refs);
          return result2;
        }
        if ("h" in value)
          return handles[value.h];
      }
      return value;
    }
    function serializeAsCallArgument2(value, handleSerializer) {
      return serialize(value, handleSerializer, {
        visited: new Map,
        lastId: 0
      });
    }
    function serialize(value, handleSerializer, visitorInfo) {
      if (value && typeof value === "object") {
        if (typeof globalThis.Window === "function" && value instanceof globalThis.Window)
          return "ref: <Window>";
        if (typeof globalThis.Document === "function" && value instanceof globalThis.Document)
          return "ref: <Document>";
        if (typeof globalThis.Node === "function" && value instanceof globalThis.Node)
          return "ref: <Node>";
      }
      return innerSerialize(value, handleSerializer, visitorInfo);
    }
    function innerSerialize(value, handleSerializer, visitorInfo) {
      const result2 = handleSerializer(value);
      if ("fallThrough" in result2)
        value = result2.fallThrough;
      else
        return result2;
      if (typeof value === "symbol")
        return {
          v: "undefined"
        };
      if (Object.is(value, undefined))
        return {
          v: "undefined"
        };
      if (Object.is(value, null))
        return {
          v: "null"
        };
      if (Object.is(value, NaN))
        return {
          v: "NaN"
        };
      if (Object.is(value, Infinity))
        return {
          v: "Infinity"
        };
      if (Object.is(value, -Infinity))
        return {
          v: "-Infinity"
        };
      if (Object.is(value, -0))
        return {
          v: "-0"
        };
      if (typeof value === "boolean")
        return value;
      if (typeof value === "number")
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "bigint")
        return {
          bi: value.toString()
        };
      if (isError(value)) {
        var _value$stack;
        let stack;
        if ((_value$stack = value.stack) !== null && _value$stack !== undefined && _value$stack.startsWith(value.name + ": " + value.message)) {
          stack = value.stack;
        } else {
          stack = `${value.name}: ${value.message}
${value.stack}`;
        }
        return {
          e: {
            n: value.name,
            m: value.message,
            s: stack
          }
        };
      }
      if (isDate(value))
        return {
          d: value.toJSON()
        };
      if (isURL(value))
        return {
          u: value.toJSON()
        };
      if (isRegExp(value))
        return {
          r: {
            p: value.source,
            f: value.flags
          }
        };
      const id = visitorInfo.visited.get(value);
      if (id)
        return {
          ref: id
        };
      if (Array.isArray(value)) {
        const a = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (let i = 0;i < value.length; ++i)
          a.push(serialize(value[i], handleSerializer, visitorInfo));
        return {
          a,
          id: id2
        };
      }
      if (typeof value === "object") {
        const o = [];
        const id2 = ++visitorInfo.lastId;
        visitorInfo.visited.set(value, id2);
        for (const name of Object.keys(value)) {
          let item;
          try {
            item = value[name];
          } catch (e) {
            continue;
          }
          if (name === "toJSON" && typeof item === "function")
            o.push({
              k: name,
              v: {
                o: [],
                id: 0
              }
            });
          else
            o.push({
              k: name,
              v: serialize(item, handleSerializer, visitorInfo)
            });
        }
        let jsonWrapper;
        try {
          if (o.length === 0 && value.toJSON && typeof value.toJSON === "function")
            jsonWrapper = {
              value: value.toJSON()
            };
        } catch (e) {
        }
        if (jsonWrapper)
          return innerSerialize(jsonWrapper.value, handleSerializer, visitorInfo);
        return {
          o,
          id: id2
        };
      }
    }
    return {
      parseEvaluationResultValue: parseEvaluationResultValue2,
      serializeAsCallArgument: serializeAsCallArgument2
    };
  }
  var result = source();
  var parseEvaluationResultValue = exports.parseEvaluationResultValue = result.parseEvaluationResultValue;
  var serializeAsCallArgument = exports.serializeAsCallArgument = result.serializeAsCallArgument;
});

// node_modules/playwright-core/lib/server/javascript.js
var require_javascript = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaScriptErrorInEvaluate = exports.JSHandle = exports.ExecutionContext = undefined;
  exports.evaluate = evaluate;
  exports.evaluateExpression = evaluateExpression;
  exports.isJavaScriptErrorInEvaluate = isJavaScriptErrorInEvaluate;
  exports.normalizeEvaluationExpression = normalizeEvaluationExpression;
  exports.parseUnserializableValue = parseUnserializableValue;
  exports.sparseArrayToString = sparseArrayToString;
  var utilityScriptSource = _interopRequireWildcard(require_utilityScriptSource());
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _instrumentation = require_instrumentation();
  var _manualPromise = require_manualPromise();
  var _utils = require_utils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class ExecutionContext extends _instrumentation.SdkObject {
    constructor(parent, delegate, worldNameForTest) {
      super(parent, "execution-context");
      this._delegate = undefined;
      this._utilityScriptPromise = undefined;
      this._contextDestroyedScope = new _manualPromise.LongStandingScope;
      this.worldNameForTest = undefined;
      this.worldNameForTest = worldNameForTest;
      this._delegate = delegate;
    }
    contextDestroyed(reason) {
      this._contextDestroyedScope.close(new Error(reason));
    }
    async _raceAgainstContextDestroyed(promise) {
      return this._contextDestroyedScope.race(promise);
    }
    rawEvaluateJSON(expression) {
      return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateJSON(expression));
    }
    rawEvaluateHandle(expression) {
      return this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(expression));
    }
    evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      return this._raceAgainstContextDestroyed(this._delegate.evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds));
    }
    getProperties(context, objectId) {
      return this._raceAgainstContextDestroyed(this._delegate.getProperties(context, objectId));
    }
    createHandle(remoteObject) {
      return this._delegate.createHandle(this, remoteObject);
    }
    releaseHandle(objectId) {
      return this._delegate.releaseHandle(objectId);
    }
    adoptIfNeeded(handle) {
      return null;
    }
    utilityScript() {
      if (!this._utilityScriptPromise) {
        const source = `
      (() => {
        const module = {};
        ${utilityScriptSource.source}
        return new (module.exports.UtilityScript())(${(0, _utils.isUnderTest)()});
      })();`;
        this._utilityScriptPromise = this._raceAgainstContextDestroyed(this._delegate.rawEvaluateHandle(source).then((objectId) => new JSHandle(this, "object", "UtilityScript", objectId)));
      }
      return this._utilityScriptPromise;
    }
    async doSlowMo() {
    }
  }
  exports.ExecutionContext = ExecutionContext;

  class JSHandle extends _instrumentation.SdkObject {
    constructor(context, type, preview, objectId, value) {
      super(context, "handle");
      this.__jshandle = true;
      this._context = undefined;
      this._disposed = false;
      this._objectId = undefined;
      this._value = undefined;
      this._objectType = undefined;
      this._preview = undefined;
      this._previewCallback = undefined;
      this._context = context;
      this._objectId = objectId;
      this._value = value;
      this._objectType = type;
      this._preview = this._objectId ? preview || `JSHandle@${this._objectType}` : String(value);
      if (this._objectId && globalThis.leakedJSHandles)
        globalThis.leakedJSHandles.set(this, new Error("Leaked JSHandle"));
    }
    async evaluate(pageFunction, arg) {
      return evaluate(this._context, true, pageFunction, this, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return evaluate(this._context, false, pageFunction, this, arg);
    }
    async evaluateExpression(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: true
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async evaluateExpressionHandle(expression, options, arg) {
      const value = await evaluateExpression(this._context, expression, {
        ...options,
        returnByValue: false
      }, this, arg);
      await this._context.doSlowMo();
      return value;
    }
    async getProperty(propertyName) {
      const objectHandle = await this.evaluateHandle((object, propertyName2) => {
        const result2 = {
          __proto__: null
        };
        result2[propertyName2] = object[propertyName2];
        return result2;
      }, propertyName);
      const properties = await objectHandle.getProperties();
      const result = properties.get(propertyName);
      objectHandle.dispose();
      return result;
    }
    async getProperties() {
      if (!this._objectId)
        return new Map;
      return this._context.getProperties(this._context, this._objectId);
    }
    rawValue() {
      return this._value;
    }
    async jsonValue() {
      if (!this._objectId)
        return this._value;
      const utilityScript = await this._context.utilityScript();
      const script = `(utilityScript, ...args) => utilityScript.jsonValue(...args)`;
      return this._context.evaluateWithArguments(script, true, utilityScript, [true], [this._objectId]);
    }
    asElement() {
      return null;
    }
    dispose() {
      if (this._disposed)
        return;
      this._disposed = true;
      if (this._objectId) {
        this._context.releaseHandle(this._objectId).catch((e) => {
        });
        if (globalThis.leakedJSHandles)
          globalThis.leakedJSHandles.delete(this);
      }
    }
    toString() {
      return this._preview;
    }
    _setPreviewCallback(callback) {
      this._previewCallback = callback;
    }
    preview() {
      return this._preview;
    }
    worldNameForTest() {
      return this._context.worldNameForTest;
    }
    _setPreview(preview) {
      this._preview = preview;
      if (this._previewCallback)
        this._previewCallback(preview);
    }
  }
  exports.JSHandle = JSHandle;
  async function evaluate(context, returnByValue, pageFunction, ...args) {
    return evaluateExpression(context, String(pageFunction), {
      returnByValue,
      isFunction: typeof pageFunction === "function"
    }, ...args);
  }
  async function evaluateExpression(context, expression, options, ...args) {
    const utilityScript = await context.utilityScript();
    expression = normalizeEvaluationExpression(expression, options.isFunction);
    const handles = [];
    const toDispose = [];
    const pushHandle = (handle) => {
      handles.push(handle);
      return handles.length - 1;
    };
    args = args.map((arg) => (0, _utilityScriptSerializers.serializeAsCallArgument)(arg, (handle) => {
      if (handle instanceof JSHandle) {
        if (!handle._objectId)
          return {
            fallThrough: handle._value
          };
        if (handle._disposed)
          throw new JavaScriptErrorInEvaluate("JSHandle is disposed!");
        const adopted = context.adoptIfNeeded(handle);
        if (adopted === null)
          return {
            h: pushHandle(Promise.resolve(handle))
          };
        toDispose.push(adopted);
        return {
          h: pushHandle(adopted)
        };
      }
      return {
        fallThrough: handle
      };
    }));
    const utilityScriptObjectIds = [];
    for (const handle of await Promise.all(handles)) {
      if (handle._context !== context)
        throw new JavaScriptErrorInEvaluate("JSHandles can be evaluated only in the context they were created!");
      utilityScriptObjectIds.push(handle._objectId);
    }
    const utilityScriptValues = [options.isFunction, options.returnByValue, expression, args.length, ...args];
    const script = `(utilityScript, ...args) => utilityScript.evaluate(...args)`;
    try {
      return await context.evaluateWithArguments(script, options.returnByValue || false, utilityScript, utilityScriptValues, utilityScriptObjectIds);
    } finally {
      toDispose.map((handlePromise) => handlePromise.then((handle) => handle.dispose()));
    }
  }
  function parseUnserializableValue(unserializableValue) {
    if (unserializableValue === "NaN")
      return NaN;
    if (unserializableValue === "Infinity")
      return Infinity;
    if (unserializableValue === "-Infinity")
      return -Infinity;
    if (unserializableValue === "-0")
      return -0;
  }
  function normalizeEvaluationExpression(expression, isFunction) {
    expression = expression.trim();
    if (isFunction) {
      try {
        new Function("(" + expression + ")");
      } catch (e1) {
        if (expression.startsWith("async "))
          expression = "async function " + expression.substring("async ".length);
        else
          expression = "function " + expression;
        try {
          new Function("(" + expression + ")");
        } catch (e2) {
          throw new Error("Passed function is not well-serializable!");
        }
      }
    }
    if (/^(async)?\s*function(\s|\()/.test(expression))
      expression = "(" + expression + ")";
    return expression;
  }

  class JavaScriptErrorInEvaluate extends Error {
  }
  exports.JavaScriptErrorInEvaluate = JavaScriptErrorInEvaluate;
  function isJavaScriptErrorInEvaluate(error) {
    return error instanceof JavaScriptErrorInEvaluate;
  }
  function sparseArrayToString(entries) {
    const arrayEntries = [];
    for (const {
      name,
      value
    } of entries) {
      const index = +name;
      if (isNaN(index) || index < 0)
        continue;
      arrayEntries.push({
        index,
        value
      });
    }
    arrayEntries.sort((a, b) => a.index - b.index);
    let lastIndex = -1;
    const tokens = [];
    for (const {
      index,
      value
    } of arrayEntries) {
      const emptyItems = index - lastIndex - 1;
      if (emptyItems === 1)
        tokens.push(`empty`);
      else if (emptyItems > 1)
        tokens.push(`empty x ${emptyItems}`);
      tokens.push(String(value));
      lastIndex = index;
    }
    return "[" + tokens.join(", ") + "]";
  }
});

// node_modules/playwright-core/lib/server/progress.js
var require_progress = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ProgressController = undefined;
  var _errors = require_errors();
  var _utils = require_utils();
  var _manualPromise = require_manualPromise();

  class ProgressController {
    constructor(metadata, sdkObject) {
      this._forceAbortPromise = new _manualPromise.ManualPromise;
      this._cleanups = [];
      this._logName = "api";
      this._state = "before";
      this._deadline = 0;
      this._timeout = 0;
      this.metadata = undefined;
      this.instrumentation = undefined;
      this.sdkObject = undefined;
      this.metadata = metadata;
      this.sdkObject = sdkObject;
      this.instrumentation = sdkObject.instrumentation;
      this._forceAbortPromise.catch((e) => null);
    }
    setLogName(logName) {
      this._logName = logName;
    }
    abort(error) {
      this._forceAbortPromise.reject(error);
    }
    async run(task, timeout) {
      var _this$sdkObject$attri;
      if (timeout) {
        this._timeout = timeout;
        this._deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      }
      (0, _utils.assert)(this._state === "before");
      this._state = "running";
      (_this$sdkObject$attri = this.sdkObject.attribution.context) === null || _this$sdkObject$attri === undefined || _this$sdkObject$attri._activeProgressControllers.add(this);
      const progress2 = {
        log: (message) => {
          if (this._state === "running")
            this.metadata.log.push(message);
          this.instrumentation.onCallLog(this.sdkObject, this.metadata, this._logName, message);
        },
        timeUntilDeadline: () => this._deadline ? this._deadline - (0, _utils.monotonicTime)() : 2147483647,
        isRunning: () => this._state === "running",
        cleanupWhenAborted: (cleanup) => {
          if (this._state === "running")
            this._cleanups.push(cleanup);
          else
            runCleanup(cleanup);
        },
        throwIfAborted: () => {
          if (this._state === "aborted")
            throw new AbortedError;
        },
        metadata: this.metadata
      };
      const timeoutError = new _errors.TimeoutError(`Timeout ${this._timeout}ms exceeded.`);
      const timer = setTimeout(() => this._forceAbortPromise.reject(timeoutError), progress2.timeUntilDeadline());
      try {
        const promise = task(progress2);
        const result = await Promise.race([promise, this._forceAbortPromise]);
        this._state = "finished";
        return result;
      } catch (e) {
        this._state = "aborted";
        await Promise.all(this._cleanups.splice(0).map(runCleanup));
        throw e;
      } finally {
        var _this$sdkObject$attri2;
        (_this$sdkObject$attri2 = this.sdkObject.attribution.context) === null || _this$sdkObject$attri2 === undefined || _this$sdkObject$attri2._activeProgressControllers.delete(this);
        clearTimeout(timer);
      }
    }
  }
  exports.ProgressController = ProgressController;
  async function runCleanup(cleanup) {
    try {
      await cleanup();
    } catch (e) {
    }
  }

  class AbortedError extends Error {
  }
});

// node_modules/playwright-core/lib/server/fileUploadUtils.js
var require_fileUploadUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.prepareFilesForUpload = prepareFilesForUpload;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _utils = require_utils();
  var _utilsBundle = require_utilsBundle();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  async function filesExceedUploadLimit(files) {
    const sizes = await Promise.all(files.map(async (file) => (await _fs.default.promises.stat(file)).size));
    return sizes.reduce((total, size) => total + size, 0) >= _utils.fileUploadSizeLimit;
  }
  async function prepareFilesForUpload(frame, params) {
    var _fileBuffers;
    const {
      payloads,
      streams,
      directoryStream
    } = params;
    let {
      localPaths,
      localDirectory
    } = params;
    if ([payloads, localPaths, localDirectory, streams, directoryStream].filter(Boolean).length !== 1)
      throw new Error("Exactly one of payloads, localPaths and streams must be provided");
    if (streams)
      localPaths = streams.map((c) => c.path());
    if (directoryStream)
      localDirectory = directoryStream.path();
    if (localPaths) {
      for (const p of localPaths)
        (0, _utils.assert)(_path.default.isAbsolute(p) && _path.default.resolve(p) === p, "Paths provided to localPaths must be absolute and fully resolved.");
    }
    let fileBuffers = payloads;
    if (!frame._page._browserContext._browser._isCollocatedWithServer) {
      if (localPaths) {
        if (await filesExceedUploadLimit(localPaths))
          throw new Error("Cannot transfer files larger than 50Mb to a browser not co-located with the server");
        fileBuffers = await Promise.all(localPaths.map(async (item) => {
          return {
            name: _path.default.basename(item),
            buffer: await _fs.default.promises.readFile(item),
            lastModifiedMs: (await _fs.default.promises.stat(item)).mtimeMs
          };
        }));
        localPaths = undefined;
      }
    }
    const filePayloads = (_fileBuffers = fileBuffers) === null || _fileBuffers === undefined ? undefined : _fileBuffers.map((payload) => ({
      name: payload.name,
      mimeType: payload.mimeType || _utilsBundle.mime.getType(payload.name) || "application/octet-stream",
      buffer: payload.buffer.toString("base64"),
      lastModifiedMs: payload.lastModifiedMs
    }));
    return {
      localPaths,
      localDirectory,
      filePayloads
    };
  }
});

// node_modules/playwright-core/lib/server/dom.js
var require_dom = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NonRecoverableDOMError = exports.FrameExecutionContext = exports.ElementHandle = undefined;
  exports.assertDone = assertDone;
  exports.isNonRecoverableDOMError = isNonRecoverableDOMError;
  exports.kUnableToAdoptErrorMessage = undefined;
  exports.throwRetargetableDOMError = throwRetargetableDOMError;
  var _fs = _interopRequireDefault(__require("fs"));
  var injectedScriptSource = _interopRequireWildcard(require_injectedScriptSource());
  var _protocolError = require_protocolError();
  var js = _interopRequireWildcard(require_javascript());
  var _progress = require_progress();
  var _utils = require_utils();
  var _fileUploadUtils = require_fileUploadUtils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class NonRecoverableDOMError extends Error {
  }
  exports.NonRecoverableDOMError = NonRecoverableDOMError;
  function isNonRecoverableDOMError(error) {
    return error instanceof NonRecoverableDOMError;
  }

  class FrameExecutionContext extends js.ExecutionContext {
    constructor(delegate, frame, world) {
      super(frame, delegate, world || "content-script");
      this.frame = undefined;
      this._injectedScriptPromise = undefined;
      this.world = undefined;
      this.frame = frame;
      this.world = world;
    }
    adoptIfNeeded(handle) {
      if (handle instanceof ElementHandle && handle._context !== this)
        return this.frame._page._delegate.adoptElementHandle(handle, this);
      return null;
    }
    async evaluate(pageFunction, arg) {
      return js.evaluate(this, true, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg) {
      return js.evaluate(this, false, pageFunction, arg);
    }
    async evaluateExpression(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: true
      }, arg);
    }
    async evaluateExpressionHandle(expression, options, arg) {
      return js.evaluateExpression(this, expression, {
        ...options,
        returnByValue: false
      }, arg);
    }
    createHandle(remoteObject) {
      if (this.frame._page._delegate.isElementHandle(remoteObject))
        return new ElementHandle(this, remoteObject.objectId);
      return super.createHandle(remoteObject);
    }
    injectedScript() {
      if (!this._injectedScriptPromise) {
        const custom = [];
        const selectorsRegistry = this.frame._page.context().selectors();
        for (const [name, {
          source: source2
        }] of selectorsRegistry._engines)
          custom.push(`{ name: '${name}', engine: (${source2}) }`);
        const sdkLanguage = this.frame.attribution.playwright.options.sdkLanguage;
        const source = `
        (() => {
        const module = {};
        ${injectedScriptSource.source}
        return new (module.exports.InjectedScript())(
          globalThis,
          ${(0, _utils.isUnderTest)()},
          "${sdkLanguage}",
          ${JSON.stringify(selectorsRegistry.testIdAttributeName())},
          ${this.frame._page._delegate.rafCountForStablePosition()},
          "${this.frame._page._browserContext._browser.options.name}",
          [${custom.join(`,
`)}]
        );
        })();
      `;
        this._injectedScriptPromise = this.rawEvaluateHandle(source).then((objectId) => new js.JSHandle(this, "object", "InjectedScript", objectId));
      }
      return this._injectedScriptPromise;
    }
  }
  exports.FrameExecutionContext = FrameExecutionContext;

  class ElementHandle extends js.JSHandle {
    constructor(context, objectId) {
      super(context, "node", undefined, objectId);
      this.__elementhandle = true;
      this._page = undefined;
      this._frame = undefined;
      this._page = context.frame._page;
      this._frame = context.frame;
      this._initializePreview().catch((e) => {
      });
    }
    async _initializePreview() {
      const utility = await this._context.injectedScript();
      this._setPreview(await utility.evaluate((injected, e) => "JSHandle@" + injected.previewNode(e), this));
    }
    asElement() {
      return this;
    }
    async evaluateInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluate(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return "error:notconnected";
      }
    }
    async evaluateHandleInUtility(pageFunction, arg) {
      try {
        const utility = await this._frame._utilityContext();
        return await utility.evaluateHandle(pageFunction, [await utility.injectedScript(), this, arg]);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return "error:notconnected";
      }
    }
    async ownerFrame() {
      const frameId = await this._page._delegate.getOwnerFrame(this);
      if (!frameId)
        return null;
      const frame = this._page._frameManager.frame(frameId);
      if (frame)
        return frame;
      for (const page of this._page._browserContext.pages()) {
        const frame2 = page._frameManager.frame(frameId);
        if (frame2)
          return frame2;
      }
      return null;
    }
    async isIframeElement() {
      return this.evaluateInUtility(([injected, node]) => node && (node.nodeName === "IFRAME" || node.nodeName === "FRAME"), {});
    }
    async contentFrame() {
      const isFrameElement = throwRetargetableDOMError(await this.isIframeElement());
      if (!isFrameElement)
        return null;
      return this._page._delegate.getContentFrame(this);
    }
    async getAttribute(metadata, name) {
      return this._frame.getAttribute(metadata, ":scope", name, {}, this);
    }
    async inputValue(metadata) {
      return this._frame.inputValue(metadata, ":scope", {}, this);
    }
    async textContent(metadata) {
      return this._frame.textContent(metadata, ":scope", {}, this);
    }
    async innerText(metadata) {
      return this._frame.innerText(metadata, ":scope", {}, this);
    }
    async innerHTML(metadata) {
      return this._frame.innerHTML(metadata, ":scope", {}, this);
    }
    async dispatchEvent(metadata, type, eventInit = {}) {
      return this._frame.dispatchEvent(metadata, ":scope", type, eventInit, {}, this);
    }
    async _scrollRectIntoViewIfNeeded(rect) {
      return await this._page._delegate.scrollRectIntoViewIfNeeded(this, rect);
    }
    async _waitAndScrollIntoViewIfNeeded(progress2, waitForVisible) {
      const result = await this._retryAction(progress2, "scroll into view", async () => {
        progress2.log(`  waiting for element to be stable`);
        const waitResult = await this.evaluateInUtility(async ([injected, node, {
          waitForVisible: waitForVisible2
        }]) => {
          return await injected.checkElementStates(node, waitForVisible2 ? ["visible", "stable"] : ["stable"]);
        }, {
          waitForVisible
        });
        if (waitResult)
          return waitResult;
        return await this._scrollRectIntoViewIfNeeded();
      }, {});
      assertDone(throwRetargetableDOMError(result));
    }
    async scrollIntoViewIfNeeded(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._waitAndScrollIntoViewIfNeeded(progress2, false), this._page._timeoutSettings.timeout(options));
    }
    async _clickablePoint() {
      const intersectQuadWithViewport = (quad) => {
        return quad.map((point) => ({
          x: Math.min(Math.max(point.x, 0), metrics.width),
          y: Math.min(Math.max(point.y, 0), metrics.height)
        }));
      };
      const computeQuadArea = (quad) => {
        let area = 0;
        for (let i = 0;i < quad.length; ++i) {
          const p1 = quad[i];
          const p2 = quad[(i + 1) % quad.length];
          area += (p1.x * p2.y - p2.x * p1.y) / 2;
        }
        return Math.abs(area);
      };
      const [quads, metrics] = await Promise.all([this._page._delegate.getContentQuads(this), this._page.mainFrame()._utilityContext().then((utility) => utility.evaluate(() => ({
        width: innerWidth,
        height: innerHeight
      })))]);
      if (quads === "error:notconnected")
        return quads;
      if (!quads || !quads.length)
        return "error:notvisible";
      const filtered = quads.map((quad) => intersectQuadWithViewport(quad)).filter((quad) => computeQuadArea(quad) > 0.99);
      if (!filtered.length)
        return "error:notinviewport";
      if (this._page._browserContext._browser.options.name === "firefox") {
        for (const quad of filtered) {
          const integerPoint = findIntegerPointInsideQuad(quad);
          if (integerPoint)
            return integerPoint;
        }
      }
      return quadMiddlePoint(filtered[0]);
    }
    async _offsetPoint(offset) {
      const [box, border] = await Promise.all([this.boundingBox(), this.evaluateInUtility(([injected, node]) => injected.getElementBorderWidth(node), {}).catch((e) => {
      })]);
      if (!box || !border)
        return "error:notvisible";
      if (border === "error:notconnected")
        return border;
      return {
        x: box.x + border.left + offset.x,
        y: box.y + border.top + offset.y
      };
    }
    async _retryAction(progress2, actionName, action, options) {
      let retry = 0;
      const waitTime = [0, 20, 100, 100, 500];
      while (progress2.isRunning()) {
        if (retry) {
          progress2.log(`retrying ${actionName} action${options.trial ? " (trial run)" : ""}`);
          const timeout = waitTime[Math.min(retry - 1, waitTime.length - 1)];
          if (timeout) {
            progress2.log(`  waiting ${timeout}ms`);
            const result2 = await this.evaluateInUtility(([injected, node, timeout2]) => new Promise((f) => setTimeout(f, timeout2)), timeout);
            if (result2 === "error:notconnected")
              return result2;
          }
        } else {
          progress2.log(`attempting ${actionName} action${options.trial ? " (trial run)" : ""}`);
        }
        if (!options.skipActionPreChecks && !options.force)
          await this._frame._page.performActionPreChecks(progress2);
        const result = await action(retry);
        ++retry;
        if (result === "error:notvisible") {
          if (options.force)
            throw new NonRecoverableDOMError("Element is not visible");
          progress2.log("  element is not visible");
          continue;
        }
        if (result === "error:notinviewport") {
          if (options.force)
            throw new NonRecoverableDOMError("Element is outside of the viewport");
          progress2.log("  element is outside of the viewport");
          continue;
        }
        if (result === "error:optionsnotfound") {
          progress2.log("  did not find some options");
          continue;
        }
        if (typeof result === "object" && "hitTargetDescription" in result) {
          progress2.log(`  ${result.hitTargetDescription} intercepts pointer events`);
          continue;
        }
        if (typeof result === "object" && "missingState" in result) {
          progress2.log(`  element is not ${result.missingState}`);
          continue;
        }
        return result;
      }
      return "done";
    }
    async _retryPointerAction(progress2, actionName, waitForEnabled, action, options) {
      const skipActionPreChecks = actionName === "move and up";
      return await this._retryAction(progress2, actionName, async (retry) => {
        const scrollOptions = [undefined, {
          block: "end",
          inline: "end"
        }, {
          block: "center",
          inline: "center"
        }, {
          block: "start",
          inline: "start"
        }];
        const forceScrollOptions = scrollOptions[retry % scrollOptions.length];
        return await this._performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options);
      }, {
        ...options,
        skipActionPreChecks
      });
    }
    async _performPointerAction(progress2, actionName, waitForEnabled, action, forceScrollOptions, options) {
      const {
        force = false,
        position
      } = options;
      const doScrollIntoView = async () => {
        if (forceScrollOptions) {
          return await this.evaluateInUtility(([injected, node, options2]) => {
            if (node.nodeType === 1)
              node.scrollIntoView(options2);
            return "done";
          }, forceScrollOptions);
        }
        return await this._scrollRectIntoViewIfNeeded(position ? {
          x: position.x,
          y: position.y,
          width: 0,
          height: 0
        } : undefined);
      };
      if (this._frame.parentFrame()) {
        progress2.throwIfAborted();
        await doScrollIntoView().catch(() => {
        });
      }
      if (options.__testHookBeforeStable)
        await options.__testHookBeforeStable();
      if (!force) {
        const elementStates = waitForEnabled ? ["visible", "enabled", "stable"] : ["visible", "stable"];
        progress2.log(`  waiting for element to be ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
        const result = await this.evaluateInUtility(async ([injected, node, {
          elementStates: elementStates2
        }]) => {
          return await injected.checkElementStates(node, elementStates2);
        }, {
          elementStates
        });
        if (result)
          return result;
        progress2.log(`  element is ${waitForEnabled ? "visible, enabled and stable" : "visible and stable"}`);
      }
      if (options.__testHookAfterStable)
        await options.__testHookAfterStable();
      progress2.log("  scrolling into view if needed");
      progress2.throwIfAborted();
      const scrolled = await doScrollIntoView();
      if (scrolled !== "done")
        return scrolled;
      progress2.log("  done scrolling");
      const maybePoint = position ? await this._offsetPoint(position) : await this._clickablePoint();
      if (typeof maybePoint === "string")
        return maybePoint;
      const point = roundPoint(maybePoint);
      progress2.metadata.point = point;
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      let hitTargetInterceptionHandle;
      if (force) {
        progress2.log(`  forcing action`);
      } else {
        if (options.__testHookBeforeHitTarget)
          await options.__testHookBeforeHitTarget();
        const frameCheckResult = await this._checkFrameIsHitTarget(point);
        if (frameCheckResult === "error:notconnected" || "hitTargetDescription" in frameCheckResult)
          return frameCheckResult;
        const hitPoint = frameCheckResult.framePoint;
        const actionType = actionName === "move and up" ? "drag" : actionName === "hover" || actionName === "tap" ? actionName : "mouse";
        const handle = await this.evaluateHandleInUtility(([injected, node, {
          actionType: actionType2,
          hitPoint: hitPoint2,
          trial
        }]) => injected.setupHitTargetInterceptor(node, actionType2, hitPoint2, trial), {
          actionType,
          hitPoint,
          trial: !!options.trial
        });
        if (handle === "error:notconnected")
          return handle;
        if (!handle._objectId) {
          const error = handle.rawValue();
          if (error === "error:notconnected")
            return error;
          return {
            hitTargetDescription: error
          };
        }
        hitTargetInterceptionHandle = handle;
        progress2.cleanupWhenAborted(() => {
          hitTargetInterceptionHandle.evaluate((h) => h.stop()).catch((e) => {
          });
          hitTargetInterceptionHandle.dispose();
        });
      }
      const actionResult = await this._page._frameManager.waitForSignalsCreatedBy(progress2, options.waitAfter === true, async () => {
        if (options.__testHookBeforePointerAction)
          await options.__testHookBeforePointerAction();
        progress2.throwIfAborted();
        let restoreModifiers;
        if (options && options.modifiers)
          restoreModifiers = await this._page.keyboard.ensureModifiers(options.modifiers);
        progress2.log(`  performing ${actionName} action`);
        await action(point);
        if (restoreModifiers)
          await this._page.keyboard.ensureModifiers(restoreModifiers);
        if (hitTargetInterceptionHandle) {
          const stopHitTargetInterception = this._frame.raceAgainstEvaluationStallingEvents(() => {
            return hitTargetInterceptionHandle.evaluate((h) => h.stop());
          }).catch((e) => "done").finally(() => {
            var _hitTargetInterceptio;
            (_hitTargetInterceptio = hitTargetInterceptionHandle) === null || _hitTargetInterceptio === undefined || _hitTargetInterceptio.dispose();
          });
          if (options.waitAfter !== false) {
            const hitTargetResult = await stopHitTargetInterception;
            if (hitTargetResult !== "done")
              return hitTargetResult;
          }
        }
        progress2.log(`  ${options.trial ? "trial " : ""}${actionName} action done`);
        progress2.log("  waiting for scheduled navigations to finish");
        if (options.__testHookAfterPointerAction)
          await options.__testHookAfterPointerAction();
        return "done";
      });
      if (actionResult !== "done")
        return actionResult;
      progress2.log("  navigations have finished");
      return "done";
    }
    async _markAsTargetElement(metadata) {
      if (!metadata.id)
        return;
      await this.evaluateInUtility(([injected, node, callId]) => {
        if (node.nodeType === 1)
          injected.markTargetElements(new Set([node]), callId);
      }, metadata.id);
    }
    async hover(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._hover(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _hover(progress2, options) {
      return this._retryPointerAction(progress2, "hover", false, (point) => this._page.mouse.move(point.x, point.y), {
        ...options,
        waitAfter: "disabled"
      });
    }
    async click(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._click(progress2, {
          ...options,
          waitAfter: !options.noWaitAfter
        });
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _click(progress2, options) {
      return this._retryPointerAction(progress2, "click", true, (point) => this._page.mouse.click(point.x, point.y, options), options);
    }
    async dblclick(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._dblclick(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _dblclick(progress2, options) {
      return this._retryPointerAction(progress2, "dblclick", true, (point) => this._page.mouse.dblclick(point.x, point.y, options), {
        ...options,
        waitAfter: "disabled"
      });
    }
    async tap(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._tap(progress2, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    _tap(progress2, options) {
      return this._retryPointerAction(progress2, "tap", true, (point) => this._page.touchscreen.tap(point.x, point.y), {
        ...options,
        waitAfter: "disabled"
      });
    }
    async selectOption(metadata, elements, values, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._selectOption(progress2, elements, values, options);
        return throwRetargetableDOMError(result);
      }, this._page._timeoutSettings.timeout(options));
    }
    async _selectOption(progress2, elements, values, options) {
      let resultingOptions = [];
      await this._retryAction(progress2, "select option", async () => {
        await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
        if (!options.force)
          progress2.log(`  waiting for element to be visible and enabled`);
        const optionsToSelect = [...elements, ...values];
        const result = await this.evaluateInUtility(async ([injected, node, {
          optionsToSelect: optionsToSelect2,
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible", "enabled"]);
            if (checkResult)
              return checkResult;
          }
          return injected.selectOptions(node, optionsToSelect2);
        }, {
          optionsToSelect,
          force: options.force
        });
        if (Array.isArray(result)) {
          progress2.log("  selected specified option(s)");
          resultingOptions = result;
          return "done";
        }
        return result;
      }, options);
      return resultingOptions;
    }
    async fill(metadata, value, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._fill(progress2, value, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _fill(progress2, value, options) {
      progress2.log(`  fill("${value}")`);
      return await this._retryAction(progress2, "fill", async () => {
        await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
        if (!options.force)
          progress2.log("  waiting for element to be visible, enabled and editable");
        const result = await this.evaluateInUtility(async ([injected, node, {
          value: value2,
          force
        }]) => {
          if (!force) {
            const checkResult = await injected.checkElementStates(node, ["visible", "enabled", "editable"]);
            if (checkResult)
              return checkResult;
          }
          return injected.fill(node, value2);
        }, {
          value,
          force: options.force
        });
        progress2.throwIfAborted();
        if (result === "needsinput") {
          if (value)
            await this._page.keyboard.insertText(value);
          else
            await this._page.keyboard.press("Delete");
          return "done";
        } else {
          return result;
        }
      }, options);
    }
    async selectText(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._retryAction(progress2, "selectText", async () => {
          if (!options.force)
            progress2.log("  waiting for element to be visible");
          return await this.evaluateInUtility(async ([injected, node, {
            force
          }]) => {
            if (!force) {
              const checkResult = await injected.checkElementStates(node, ["visible"]);
              if (checkResult)
                return checkResult;
            }
            return injected.selectText(node);
          }, {
            force: options.force
          });
        }, options);
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this._frame, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._setInputFiles(progress2, inputFileItems);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(params));
    }
    async _setInputFiles(progress2, items) {
      const {
        filePayloads,
        localPaths,
        localDirectory
      } = items;
      const multiple = filePayloads && filePayloads.length > 1 || localPaths && localPaths.length > 1;
      const result = await this.evaluateHandleInUtility(([injected, node, {
        multiple: multiple2,
        directoryUpload
      }]) => {
        const element = injected.retarget(node, "follow-label");
        if (!element)
          return;
        if (element.tagName !== "INPUT")
          throw injected.createStacklessError("Node is not an HTMLInputElement");
        const inputElement = element;
        if (multiple2 && !inputElement.multiple && !inputElement.webkitdirectory)
          throw injected.createStacklessError("Non-multiple file input can only accept single file");
        if (directoryUpload && !inputElement.webkitdirectory)
          throw injected.createStacklessError("File input does not support directories, pass individual files instead");
        if (!directoryUpload && inputElement.webkitdirectory)
          throw injected.createStacklessError("[webkitdirectory] input requires passing a path to a directory");
        return inputElement;
      }, {
        multiple,
        directoryUpload: !!localDirectory
      });
      if (result === "error:notconnected" || !result.asElement())
        return "error:notconnected";
      const retargeted = result.asElement();
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      progress2.throwIfAborted();
      if (localPaths || localDirectory) {
        const localPathsOrDirectory = localDirectory ? [localDirectory] : localPaths;
        await Promise.all(localPathsOrDirectory.map((localPath) => _fs.default.promises.access(localPath, _fs.default.constants.F_OK)));
        const waitForInputEvent = localDirectory ? this.evaluate((node) => new Promise((fulfill) => {
          node.addEventListener("input", fulfill, {
            once: true
          });
        })).catch(() => {
        }) : Promise.resolve();
        await this._page._delegate.setInputFilePaths(retargeted, localPathsOrDirectory);
        await waitForInputEvent;
      } else {
        await this._page._delegate.setInputFiles(retargeted, filePayloads);
      }
      return "done";
    }
    async focus(metadata) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._focus(progress2);
        return assertDone(throwRetargetableDOMError(result));
      }, 0);
    }
    async _focus(progress2, resetSelectionIfNotFocused) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node, resetSelectionIfNotFocused2]) => injected.focusNode(node, resetSelectionIfNotFocused2), resetSelectionIfNotFocused);
    }
    async _blur(progress2) {
      progress2.throwIfAborted();
      return await this.evaluateInUtility(([injected, node]) => injected.blurNode(node), {});
    }
    async type(metadata, text, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._type(progress2, text, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _type(progress2, text, options) {
      progress2.log(`elementHandle.type("${text}")`);
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      const result = await this._focus(progress2, true);
      if (result !== "done")
        return result;
      progress2.throwIfAborted();
      await this._page.keyboard.type(text, options);
      return "done";
    }
    async press(metadata, key, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this._markAsTargetElement(metadata);
        const result = await this._press(progress2, key, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _press(progress2, key, options) {
      progress2.log(`elementHandle.press("${key}")`);
      await this.instrumentation.onBeforeInputAction(this, progress2.metadata);
      return this._page._frameManager.waitForSignalsCreatedBy(progress2, !options.noWaitAfter, async () => {
        const result = await this._focus(progress2, true);
        if (result !== "done")
          return result;
        progress2.throwIfAborted();
        await this._page.keyboard.press(key, options);
        return "done";
      });
    }
    async check(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, true, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const result = await this._setChecked(progress2, false, options);
        return assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async _setChecked(progress2, state, options) {
      const isChecked = async () => {
        const result2 = await this.evaluateInUtility(([injected, node]) => injected.elementState(node, "checked"), {});
        return throwRetargetableDOMError(result2);
      };
      await this._markAsTargetElement(progress2.metadata);
      if (await isChecked() === state)
        return "done";
      const result = await this._click(progress2, {
        ...options,
        waitAfter: "disabled"
      });
      if (result !== "done")
        return result;
      if (options.trial)
        return "done";
      if (await isChecked() !== state)
        throw new NonRecoverableDOMError("Clicking the checkbox did not change its state");
      return "done";
    }
    async boundingBox() {
      return this._page._delegate.getBoundingBox(this);
    }
    async ariaSnapshot() {
      return await this.evaluateInUtility(([injected, element]) => injected.ariaSnapshot(element), {});
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._page._screenshotter.screenshotElement(progress2, this, options), this._page._timeoutSettings.timeout(options));
    }
    async querySelector(selector, options) {
      return this._frame.selectors.query(selector, options, this);
    }
    async querySelectorAll(selector) {
      return this._frame.selectors.queryAll(selector, this);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg) {
      return this._frame.evalOnSelector(selector, strict, expression, isFunction, arg, this);
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg) {
      return this._frame.evalOnSelectorAll(selector, expression, isFunction, arg, this);
    }
    async isVisible(metadata) {
      return this._frame.isVisible(metadata, ":scope", {}, this);
    }
    async isHidden(metadata) {
      return this._frame.isHidden(metadata, ":scope", {}, this);
    }
    async isEnabled(metadata) {
      return this._frame.isEnabled(metadata, ":scope", {}, this);
    }
    async isDisabled(metadata) {
      return this._frame.isDisabled(metadata, ":scope", {}, this);
    }
    async isEditable(metadata) {
      return this._frame.isEditable(metadata, ":scope", {}, this);
    }
    async isChecked(metadata) {
      return this._frame.isChecked(metadata, ":scope", {}, this);
    }
    async waitForElementState(metadata, state, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        const actionName = `wait for ${state}`;
        const result = await this._retryAction(progress2, actionName, async () => {
          return await this.evaluateInUtility(async ([injected, node, state2]) => {
            return await injected.checkElementStates(node, [state2]) || "done";
          }, state);
        }, {});
        assertDone(throwRetargetableDOMError(result));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelector(metadata, selector, options = {}) {
      return this._frame.waitForSelector(metadata, selector, options, this);
    }
    async _adoptTo(context) {
      if (this._context !== context) {
        const adopted = await this._page._delegate.adoptElementHandle(this, context);
        this.dispose();
        return adopted;
      }
      return this;
    }
    async _checkFrameIsHitTarget(point) {
      let frame = this._frame;
      const data = [];
      while (frame.parentFrame()) {
        const frameElement = await frame.frameElement();
        const box = await frameElement.boundingBox();
        const style = await frameElement.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
        if (!box || style === "error:notconnected")
          return "error:notconnected";
        if (style === "transformed") {
          return {
            framePoint: undefined
          };
        }
        const pointInFrame = {
          x: point.x - box.x - style.left,
          y: point.y - box.y - style.top
        };
        data.push({
          frame,
          frameElement,
          pointInFrame
        });
        frame = frame.parentFrame();
      }
      data.push({
        frame,
        frameElement: null,
        pointInFrame: point
      });
      for (let i = data.length - 1;i > 0; i--) {
        const element = data[i - 1].frameElement;
        const point2 = data[i].pointInFrame;
        const hitTargetResult = await element.evaluateInUtility(([injected, element2, hitPoint]) => {
          return injected.expectHitTarget(hitPoint, element2);
        }, point2);
        if (hitTargetResult !== "done")
          return hitTargetResult;
      }
      return {
        framePoint: data[0].pointInFrame
      };
    }
  }
  exports.ElementHandle = ElementHandle;
  function throwRetargetableDOMError(result) {
    if (result === "error:notconnected")
      throw new Error("Element is not attached to the DOM");
    return result;
  }
  function assertDone(result) {
  }
  function roundPoint(point) {
    return {
      x: (point.x * 100 | 0) / 100,
      y: (point.y * 100 | 0) / 100
    };
  }
  function quadMiddlePoint(quad) {
    const result = {
      x: 0,
      y: 0
    };
    for (const point of quad) {
      result.x += point.x / 4;
      result.y += point.y / 4;
    }
    return result;
  }
  function triangleArea(p1, p2, p3) {
    return Math.abs(p1.x * (p2.y - p3.y) + p2.x * (p3.y - p1.y) + p3.x * (p1.y - p2.y)) / 2;
  }
  function isPointInsideQuad(point, quad) {
    const area1 = triangleArea(point, quad[0], quad[1]) + triangleArea(point, quad[1], quad[2]) + triangleArea(point, quad[2], quad[3]) + triangleArea(point, quad[3], quad[0]);
    const area2 = triangleArea(quad[0], quad[1], quad[2]) + triangleArea(quad[1], quad[2], quad[3]);
    if (Math.abs(area1 - area2) > 0.1)
      return false;
    return point.x < Math.max(quad[0].x, quad[1].x, quad[2].x, quad[3].x) && point.y < Math.max(quad[0].y, quad[1].y, quad[2].y, quad[3].y);
  }
  function findIntegerPointInsideQuad(quad) {
    const point = quadMiddlePoint(quad);
    point.x = Math.floor(point.x);
    point.y = Math.floor(point.y);
    if (isPointInsideQuad(point, quad))
      return point;
    point.x += 1;
    if (isPointInsideQuad(point, quad))
      return point;
    point.y += 1;
    if (isPointInsideQuad(point, quad))
      return point;
    point.x -= 1;
    if (isPointInsideQuad(point, quad))
      return point;
  }
  var kUnableToAdoptErrorMessage = exports.kUnableToAdoptErrorMessage = "Unable to adopt element handle from a different document";
});

// node_modules/playwright-core/lib/server/types.js
var require_types = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kLifecycleEvents = undefined;
  var kLifecycleEvents = exports.kLifecycleEvents = new Set(["load", "domcontentloaded", "networkidle", "commit"]);
});

// node_modules/playwright-core/lib/server/frameSelectors.js
var require_frameSelectors = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FrameSelectors = undefined;
  var _selectorParser = require_selectorParser();
  var _utils = require_utils();

  class FrameSelectors {
    constructor(frame) {
      this.frame = undefined;
      this.frame = frame;
    }
    _parseSelector(selector, options) {
      const strict = typeof (options === null || options === undefined ? undefined : options.strict) === "boolean" ? options.strict : !!this.frame._page.context()._options.strictSelectors;
      return this.frame._page.context().selectors().parseSelector(selector, strict);
    }
    async query(selector, options, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, options, scope);
      if (!resolved)
        return null;
      const handle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelector(info.parsed, scope2 || document, info.strict);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const elementHandle = handle.asElement();
      if (!elementHandle) {
        handle.dispose();
        return null;
      }
      return adoptIfNeeded(elementHandle, await resolved.frame._mainContext());
    }
    async queryArrayInMainWorld(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {
        mainWorld: true
      }, scope);
      if (!resolved)
        throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
    }
    async queryCount(selector) {
      const resolved = await this.resolveInjectedForSelector(selector);
      if (!resolved)
        throw new Error(`Failed to find frame for selector "${selector}"`);
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.querySelectorAll(info.parsed, document).length;
      }, {
        info: resolved.info
      });
    }
    async queryAll(selector, scope) {
      const resolved = await this.resolveInjectedForSelector(selector, {}, scope);
      if (!resolved)
        return [];
      const arrayHandle = await resolved.injected.evaluateHandle((injected, {
        info,
        scope: scope2
      }) => {
        return injected.querySelectorAll(info.parsed, scope2 || document);
      }, {
        info: resolved.info,
        scope: resolved.scope
      });
      const properties = await arrayHandle.getProperties();
      arrayHandle.dispose();
      const targetContext = await resolved.frame._mainContext();
      const result = [];
      for (const property of properties.values()) {
        const elementHandle = property.asElement();
        if (elementHandle)
          result.push(adoptIfNeeded(elementHandle, targetContext));
        else
          property.dispose();
      }
      return Promise.all(result);
    }
    async resolveFrameForSelector(selector, options = {}, scope) {
      let frame = this.frame;
      const frameChunks = (0, _selectorParser.splitSelectorByFrame)(selector);
      for (const chunk of frameChunks) {
        (0, _selectorParser.visitAllSelectorParts)(chunk, (part, nested) => {
          if (nested && part.name === "internal:control" && part.body === "enter-frame") {
            const locator = (0, _utils.asLocator)(this.frame._page.attribution.playwright.options.sdkLanguage, selector);
            throw new _selectorParser.InvalidSelectorError(`Frame locators are not allowed inside composite locators, while querying "${locator}"`);
          }
        });
      }
      for (let i = 0;i < frameChunks.length - 1; ++i) {
        const info = this._parseSelector(frameChunks[i], options);
        const context = await frame._context(info.world);
        const injectedScript = await context.injectedScript();
        const handle = await injectedScript.evaluateHandle((injected, {
          info: info2,
          scope: scope2,
          selectorString
        }) => {
          const element2 = injected.querySelector(info2.parsed, scope2 || document, info2.strict);
          if (element2 && element2.nodeName !== "IFRAME" && element2.nodeName !== "FRAME")
            throw injected.createStacklessError(`Selector "${selectorString}" resolved to ${injected.previewNode(element2)}, <iframe> was expected`);
          return element2;
        }, {
          info,
          scope: i === 0 ? scope : undefined,
          selectorString: (0, _selectorParser.stringifySelector)(info.parsed)
        });
        const element = handle.asElement();
        if (!element)
          return null;
        const maybeFrame = await frame._page._delegate.getContentFrame(element);
        element.dispose();
        if (!maybeFrame)
          return null;
        frame = maybeFrame;
      }
      if (frame !== this.frame)
        scope = undefined;
      return {
        frame,
        info: frame.selectors._parseSelector(frameChunks[frameChunks.length - 1], options),
        scope
      };
    }
    async resolveInjectedForSelector(selector, options, scope) {
      const resolved = await this.resolveFrameForSelector(selector, options, scope);
      if (!resolved)
        return;
      const context = await resolved.frame._context(options !== null && options !== undefined && options.mainWorld ? "main" : resolved.info.world);
      const injected = await context.injectedScript();
      return {
        injected,
        info: resolved.info,
        frame: resolved.frame,
        scope: resolved.scope
      };
    }
  }
  exports.FrameSelectors = FrameSelectors;
  async function adoptIfNeeded(handle, context) {
    if (handle._context === context)
      return handle;
    const adopted = await handle._page._delegate.adoptElementHandle(handle, context);
    handle.dispose();
    return adopted;
  }
});

// node_modules/playwright-core/lib/server/frames.js
var require_frames = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NavigationAbortedError = exports.FrameManager = exports.Frame = undefined;
  var dom = _interopRequireWildcard(require_dom());
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var js = _interopRequireWildcard(require_javascript());
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var types = _interopRequireWildcard(require_types());
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _utils = require_utils();
  var _manualPromise = require_manualPromise();
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _protocolError = require_protocolError();
  var _selectorParser = require_selectorParser();
  var _frameSelectors = require_frameSelectors();
  var _errors = require_errors();
  var _fileUploadUtils = require_fileUploadUtils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class NavigationAbortedError extends Error {
    constructor(documentId, message) {
      super(message);
      this.documentId = undefined;
      this.documentId = documentId;
    }
  }
  exports.NavigationAbortedError = NavigationAbortedError;
  var kDummyFrameId = "<dummy>";

  class FrameManager {
    constructor(page) {
      this._page = undefined;
      this._frames = new Map;
      this._mainFrame = undefined;
      this._consoleMessageTags = new Map;
      this._signalBarriers = new Set;
      this._webSockets = new Map;
      this._openedDialogs = new Set;
      this._closeAllOpeningDialogs = false;
      this._page = page;
      this._mainFrame = undefined;
    }
    createDummyMainFrameIfNeeded() {
      if (!this._mainFrame)
        this.frameAttached(kDummyFrameId, null);
    }
    dispose() {
      for (const frame of this._frames.values()) {
        frame._stopNetworkIdleTimer();
        frame._invalidateNonStallingEvaluations("Target crashed");
      }
    }
    mainFrame() {
      return this._mainFrame;
    }
    frames() {
      const frames = [];
      collect(this._mainFrame);
      return frames;
      function collect(frame) {
        frames.push(frame);
        for (const subframe of frame.childFrames())
          collect(subframe);
      }
    }
    frame(frameId) {
      return this._frames.get(frameId) || null;
    }
    frameAttached(frameId, parentFrameId) {
      const parentFrame = parentFrameId ? this._frames.get(parentFrameId) : null;
      if (!parentFrame) {
        if (this._mainFrame) {
          this._frames.delete(this._mainFrame._id);
          this._mainFrame._id = frameId;
        } else {
          (0, _utils.assert)(!this._frames.has(frameId));
          this._mainFrame = new Frame(this._page, frameId, parentFrame);
        }
        this._frames.set(frameId, this._mainFrame);
        return this._mainFrame;
      } else {
        (0, _utils.assert)(!this._frames.has(frameId));
        const frame = new Frame(this._page, frameId, parentFrame);
        this._frames.set(frameId, frame);
        this._page.emit(_page.Page.Events.FrameAttached, frame);
        return frame;
      }
    }
    async waitForSignalsCreatedBy(progress2, waitAfter, action) {
      if (!waitAfter)
        return action();
      const barrier = new SignalBarrier(progress2);
      this._signalBarriers.add(barrier);
      if (progress2)
        progress2.cleanupWhenAborted(() => this._signalBarriers.delete(barrier));
      const result = await action();
      await this._page._delegate.inputActionEpilogue();
      await barrier.waitFor();
      this._signalBarriers.delete(barrier);
      await new Promise((0, _utils.makeWaitForNextTask)());
      return result;
    }
    frameWillPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers)
        barrier.retain();
    }
    frameDidPotentiallyRequestNavigation() {
      for (const barrier of this._signalBarriers)
        barrier.release();
    }
    frameRequestedNavigation(frameId, documentId) {
      const frame = this._frames.get(frameId);
      if (!frame)
        return;
      for (const barrier of this._signalBarriers)
        barrier.addFrameNavigation(frame);
      if (frame.pendingDocument() && frame.pendingDocument().documentId === documentId) {
        return;
      }
      const request = documentId ? Array.from(frame._inflightRequests).find((request2) => request2._documentId === documentId) : undefined;
      frame.setPendingDocument({
        documentId,
        request
      });
    }
    frameCommittedNewDocumentNavigation(frameId, url, name, documentId, initial) {
      const frame = this._frames.get(frameId);
      this.removeChildFramesRecursively(frame);
      this.clearWebSockets(frame);
      frame._url = url;
      frame._name = name;
      let keepPending;
      const pendingDocument = frame.pendingDocument();
      if (pendingDocument) {
        if (pendingDocument.documentId === undefined) {
          pendingDocument.documentId = documentId;
        }
        if (pendingDocument.documentId === documentId) {
          frame._currentDocument = pendingDocument;
        } else {
          keepPending = pendingDocument;
          frame._currentDocument = {
            documentId,
            request: undefined
          };
        }
        frame.setPendingDocument(undefined);
      } else {
        frame._currentDocument = {
          documentId,
          request: undefined
        };
      }
      frame._onClearLifecycle();
      const navigationEvent = {
        url,
        name,
        newDocument: frame._currentDocument,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame, navigationEvent);
      if (!initial) {
        _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
        this._page.frameNavigatedToNewDocument(frame);
      }
      frame.setPendingDocument(keepPending);
    }
    frameCommittedSameDocumentNavigation(frameId, url) {
      const frame = this._frames.get(frameId);
      if (!frame)
        return;
      const pending = frame.pendingDocument();
      if (pending && pending.documentId === undefined && pending.request === undefined) {
        frame.setPendingDocument(undefined);
      }
      frame._url = url;
      const navigationEvent = {
        url,
        name: frame._name,
        isPublic: true
      };
      this._fireInternalFrameNavigation(frame, navigationEvent);
      _debugLogger.debugLogger.log("api", `  navigated to "${url}"`);
    }
    frameAbortedNavigation(frameId, errorText, documentId) {
      const frame = this._frames.get(frameId);
      if (!frame || !frame.pendingDocument())
        return;
      if (documentId !== undefined && frame.pendingDocument().documentId !== documentId)
        return;
      const navigationEvent = {
        url: frame._url,
        name: frame._name,
        newDocument: frame.pendingDocument(),
        error: new NavigationAbortedError(documentId, errorText),
        isPublic: !(documentId && frame._redirectedNavigations.has(documentId))
      };
      frame.setPendingDocument(undefined);
      this._fireInternalFrameNavigation(frame, navigationEvent);
    }
    frameDetached(frameId) {
      const frame = this._frames.get(frameId);
      if (frame) {
        this._removeFramesRecursively(frame);
        this._page.mainFrame()._recalculateNetworkIdle();
      }
    }
    frameLifecycleEvent(frameId, event) {
      const frame = this._frames.get(frameId);
      if (frame)
        frame._onLifecycleEvent(event);
    }
    requestStarted(request, route) {
      const frame = request.frame();
      this._inflightRequestStarted(request);
      if (request._documentId)
        frame.setPendingDocument({
          documentId: request._documentId,
          request
        });
      if (request._isFavicon) {
        route === null || route === undefined || route.continue({
          isFallback: true
        }).catch(() => {
        });
        return;
      }
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_page$_serverRe, _this$_page, _this$_page$_clientRe, _this$_page2, _this$_page$_browserC, _this$_page$_browserC2;
        const r = new network.Route(request, route);
        if ((_this$_page$_serverRe = (_this$_page = this._page)._serverRequestInterceptor) !== null && _this$_page$_serverRe !== undefined && _this$_page$_serverRe.call(_this$_page, r, request))
          return;
        if ((_this$_page$_clientRe = (_this$_page2 = this._page)._clientRequestInterceptor) !== null && _this$_page$_clientRe !== undefined && _this$_page$_clientRe.call(_this$_page2, r, request))
          return;
        if ((_this$_page$_browserC = (_this$_page$_browserC2 = this._page._browserContext)._requestInterceptor) !== null && _this$_page$_browserC !== undefined && _this$_page$_browserC.call(_this$_page$_browserC2, r, request))
          return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    requestReceivedResponse(response) {
      if (response.request()._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Response, response);
    }
    reportRequestFinished(request, response) {
      this._inflightRequestFinished(request);
      if (request._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, canceled) {
      const frame = request.frame();
      this._inflightRequestFinished(request);
      if (frame.pendingDocument() && frame.pendingDocument().request === request) {
        let errorText = request.failure().errorText;
        if (canceled)
          errorText += "; maybe frame was detached?";
        this.frameAbortedNavigation(frame._id, errorText, frame.pendingDocument().documentId);
      }
      if (request._isFavicon)
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    dialogDidOpen(dialog) {
      for (const frame of this._frames.values())
        frame._invalidateNonStallingEvaluations("JavaScript dialog interrupted evaluation");
      if (this._closeAllOpeningDialogs)
        dialog.close().then(() => {
        });
      else
        this._openedDialogs.add(dialog);
    }
    dialogWillClose(dialog) {
      this._openedDialogs.delete(dialog);
    }
    async closeOpenDialogs() {
      await Promise.all([...this._openedDialogs].map((dialog) => dialog.close())).catch(() => {
      });
      this._openedDialogs.clear();
    }
    setCloseAllOpeningDialogs(closeDialogs) {
      this._closeAllOpeningDialogs = closeDialogs;
    }
    removeChildFramesRecursively(frame) {
      for (const child of frame.childFrames())
        this._removeFramesRecursively(child);
    }
    _removeFramesRecursively(frame) {
      this.removeChildFramesRecursively(frame);
      frame._onDetached();
      this._frames.delete(frame._id);
      if (!this._page.isClosed())
        this._page.emit(_page.Page.Events.FrameDetached, frame);
    }
    _inflightRequestFinished(request) {
      const frame = request.frame();
      if (request._isFavicon)
        return;
      if (!frame._inflightRequests.has(request))
        return;
      frame._inflightRequests.delete(request);
      if (frame._inflightRequests.size === 0)
        frame._startNetworkIdleTimer();
    }
    _inflightRequestStarted(request) {
      const frame = request.frame();
      if (request._isFavicon)
        return;
      frame._inflightRequests.add(request);
      if (frame._inflightRequests.size === 1)
        frame._stopNetworkIdleTimer();
    }
    interceptConsoleMessage(message) {
      if (message.type() !== "debug")
        return false;
      const tag = message.text();
      const handler = this._consoleMessageTags.get(tag);
      if (!handler)
        return false;
      this._consoleMessageTags.delete(tag);
      handler();
      return true;
    }
    clearWebSockets(frame) {
      if (frame.parentFrame())
        return;
      this._webSockets.clear();
    }
    onWebSocketCreated(requestId, url) {
      const ws = new network.WebSocket(this._page, url);
      this._webSockets.set(requestId, ws);
    }
    onWebSocketRequest(requestId) {
      const ws = this._webSockets.get(requestId);
      if (ws && ws.markAsNotified())
        this._page.emit(_page.Page.Events.WebSocket, ws);
    }
    onWebSocketResponse(requestId, status, statusText) {
      const ws = this._webSockets.get(requestId);
      if (status < 400)
        return;
      if (ws)
        ws.error(`${statusText}: ${status}`);
    }
    onWebSocketFrameSent(requestId, opcode, data) {
      const ws = this._webSockets.get(requestId);
      if (ws)
        ws.frameSent(opcode, data);
    }
    webSocketFrameReceived(requestId, opcode, data) {
      const ws = this._webSockets.get(requestId);
      if (ws)
        ws.frameReceived(opcode, data);
    }
    webSocketClosed(requestId) {
      const ws = this._webSockets.get(requestId);
      if (ws)
        ws.closed();
      this._webSockets.delete(requestId);
    }
    webSocketError(requestId, errorMessage) {
      const ws = this._webSockets.get(requestId);
      if (ws)
        ws.error(errorMessage);
    }
    _fireInternalFrameNavigation(frame, event) {
      frame.emit(Frame.Events.InternalNavigation, event);
    }
  }
  exports.FrameManager = FrameManager;

  class Frame extends _instrumentation.SdkObject {
    constructor(page, id, parentFrame) {
      super(page, "frame");
      this._id = undefined;
      this._firedLifecycleEvents = new Set;
      this._firedNetworkIdleSelf = false;
      this._currentDocument = undefined;
      this._pendingDocument = undefined;
      this._page = undefined;
      this._parentFrame = undefined;
      this._url = "";
      this._contextData = new Map;
      this._childFrames = new Set;
      this._name = "";
      this._inflightRequests = new Set;
      this._networkIdleTimer = undefined;
      this._setContentCounter = 0;
      this._detachedScope = new _utils.LongStandingScope;
      this._raceAgainstEvaluationStallingEventsPromises = new Set;
      this._redirectedNavigations = new Map;
      this.selectors = undefined;
      this.attribution.frame = this;
      this._id = id;
      this._page = page;
      this._parentFrame = parentFrame;
      this._currentDocument = {
        documentId: undefined,
        request: undefined
      };
      this.selectors = new _frameSelectors.FrameSelectors(this);
      this._contextData.set("main", {
        contextPromise: new _manualPromise.ManualPromise,
        context: null
      });
      this._contextData.set("utility", {
        contextPromise: new _manualPromise.ManualPromise,
        context: null
      });
      this._setContext("main", null);
      this._setContext("utility", null);
      if (this._parentFrame)
        this._parentFrame._childFrames.add(this);
      this._firedLifecycleEvents.add("commit");
      if (id !== kDummyFrameId)
        this._startNetworkIdleTimer();
    }
    isDetached() {
      return this._detachedScope.isClosed();
    }
    _onLifecycleEvent(event) {
      if (this._firedLifecycleEvents.has(event))
        return;
      this._firedLifecycleEvents.add(event);
      this.emit(Frame.Events.AddLifecycle, event);
      if (this === this._page.mainFrame() && this._url !== "about:blank")
        _debugLogger.debugLogger.log("api", `  "${event}" event fired`);
      this._page.mainFrame()._recalculateNetworkIdle();
    }
    _onClearLifecycle() {
      for (const event of this._firedLifecycleEvents)
        this.emit(Frame.Events.RemoveLifecycle, event);
      this._firedLifecycleEvents.clear();
      this._inflightRequests = new Set(Array.from(this._inflightRequests).filter((request) => request === this._currentDocument.request));
      this._stopNetworkIdleTimer();
      if (this._inflightRequests.size === 0)
        this._startNetworkIdleTimer();
      this._page.mainFrame()._recalculateNetworkIdle(this);
      this._onLifecycleEvent("commit");
    }
    setPendingDocument(documentInfo) {
      this._pendingDocument = documentInfo;
      if (documentInfo)
        this._invalidateNonStallingEvaluations("Navigation interrupted the evaluation");
    }
    pendingDocument() {
      return this._pendingDocument;
    }
    _invalidateNonStallingEvaluations(message) {
      if (!this._raceAgainstEvaluationStallingEventsPromises.size)
        return;
      const error = new Error(message);
      for (const promise of this._raceAgainstEvaluationStallingEventsPromises)
        promise.reject(error);
    }
    async raceAgainstEvaluationStallingEvents(cb) {
      if (this._pendingDocument)
        throw new Error("Frame is currently attempting a navigation");
      if (this._page._frameManager._openedDialogs.size)
        throw new Error("Open JavaScript dialog prevents evaluation");
      const promise = new _manualPromise.ManualPromise;
      this._raceAgainstEvaluationStallingEventsPromises.add(promise);
      try {
        return await Promise.race([cb(), promise]);
      } finally {
        this._raceAgainstEvaluationStallingEventsPromises.delete(promise);
      }
    }
    nonStallingRawEvaluateInExistingMainContext(expression) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        const context = this._existingMainContext();
        if (!context)
          throw new Error("Frame does not yet have a main execution context");
        return context.rawEvaluateJSON(expression);
      });
    }
    nonStallingEvaluateInExistingContext(expression, world) {
      return this.raceAgainstEvaluationStallingEvents(() => {
        var _this$_contextData$ge;
        const context = (_this$_contextData$ge = this._contextData.get(world)) === null || _this$_contextData$ge === undefined ? undefined : _this$_contextData$ge.context;
        if (!context)
          throw new Error("Frame does not yet have the execution context");
        return context.evaluateExpression(expression, {
          isFunction: false
        });
      });
    }
    _recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle) {
      let isNetworkIdle = this._firedNetworkIdleSelf;
      for (const child of this._childFrames) {
        child._recalculateNetworkIdle(frameThatAllowsRemovingNetworkIdle);
        if (!child._firedLifecycleEvents.has("networkidle"))
          isNetworkIdle = false;
      }
      if (isNetworkIdle && !this._firedLifecycleEvents.has("networkidle")) {
        this._firedLifecycleEvents.add("networkidle");
        this.emit(Frame.Events.AddLifecycle, "networkidle");
        if (this === this._page.mainFrame() && this._url !== "about:blank")
          _debugLogger.debugLogger.log("api", `  "networkidle" event fired`);
      }
      if (frameThatAllowsRemovingNetworkIdle !== this && this._firedLifecycleEvents.has("networkidle") && !isNetworkIdle) {
        this._firedLifecycleEvents.delete("networkidle");
        this.emit(Frame.Events.RemoveLifecycle, "networkidle");
      }
    }
    async raceNavigationAction(progress2, options, action) {
      return _utils.LongStandingScope.raceMultiple([this._detachedScope, this._page.openScope], action().catch((e) => {
        if (e instanceof NavigationAbortedError && e.documentId) {
          const data = this._redirectedNavigations.get(e.documentId);
          if (data) {
            progress2.log(`waiting for redirected navigation to "${data.url}"`);
            return data.gotoPromise;
          }
        }
        throw e;
      }));
    }
    redirectNavigation(url, documentId, referer) {
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const data = {
        url,
        gotoPromise: controller.run((progress2) => this._gotoAction(progress2, url, {
          referer
        }), 0)
      };
      this._redirectedNavigations.set(documentId, data);
      data.gotoPromise.finally(() => this._redirectedNavigations.delete(documentId));
    }
    async goto(metadata, url, options = {}) {
      const constructedNavigationURL = (0, _utils.constructURLBasedOnBaseURL)(this._page._browserContext._options.baseURL, url);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._goto(progress2, constructedNavigationURL, options), this._page._timeoutSettings.navigationTimeout(options));
    }
    async _goto(progress2, url, options) {
      return this.raceNavigationAction(progress2, options, async () => this._gotoAction(progress2, url, options));
    }
    async _gotoAction(progress2, url, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      progress2.log(`navigating to "${url}", waiting until "${waitUntil}"`);
      const headers = this._page.extraHTTPHeaders() || [];
      const refererHeader = headers.find((h) => h.name.toLowerCase() === "referer");
      let referer = refererHeader ? refererHeader.value : undefined;
      if (options.referer !== undefined) {
        if (referer !== undefined && referer !== options.referer)
          throw new Error('"referer" is already specified as extra HTTP header');
        referer = options.referer;
      }
      url = _helper.helper.completeUserURL(url);
      const navigationEvents = [];
      const collectNavigations = (arg) => navigationEvents.push(arg);
      this.on(Frame.Events.InternalNavigation, collectNavigations);
      const navigateResult = await this._page._delegate.navigateFrame(this, url, referer).finally(() => this.off(Frame.Events.InternalNavigation, collectNavigations));
      let event;
      if (navigateResult.newDocumentId) {
        const predicate = (event2) => {
          return event2.newDocument && (event2.newDocument.documentId === navigateResult.newDocumentId || !event2.error);
        };
        const events = navigationEvents.filter(predicate);
        if (events.length)
          event = events[0];
        else
          event = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, predicate).promise;
        if (event.newDocument.documentId !== navigateResult.newDocumentId) {
          throw new NavigationAbortedError(navigateResult.newDocumentId, `Navigation to "${url}" is interrupted by another navigation to "${event.url}"`);
        }
        if (event.error)
          throw event.error;
      } else {
        const predicate = (e) => !e.newDocument;
        const events = navigationEvents.filter(predicate);
        if (events.length)
          event = events[0];
        else
          event = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, predicate).promise;
      }
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request = event.newDocument ? event.newDocument.request : undefined;
      const response = request ? request._finalRequest().response() : null;
      return response;
    }
    async _waitForNavigation(progress2, requiresNewDocument, options) {
      const waitUntil = verifyLifecycle("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      progress2.log(`waiting for navigation until "${waitUntil}"`);
      const navigationEvent = await _helper.helper.waitForEvent(progress2, this, Frame.Events.InternalNavigation, (event) => {
        if (event.error)
          return true;
        if (requiresNewDocument && !event.newDocument)
          return false;
        progress2.log(`  navigated to "${this._url}"`);
        return true;
      }).promise;
      if (navigationEvent.error)
        throw navigationEvent.error;
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
      const request = navigationEvent.newDocument ? navigationEvent.newDocument.request : undefined;
      return request ? request._finalRequest().response() : null;
    }
    async _waitForLoadState(progress2, state) {
      const waitUntil = verifyLifecycle("state", state);
      if (!this._firedLifecycleEvents.has(waitUntil))
        await _helper.helper.waitForEvent(progress2, this, Frame.Events.AddLifecycle, (e) => e === waitUntil).promise;
    }
    async frameElement() {
      return this._page._delegate.getFrameElement(this);
    }
    _context(world) {
      return this._contextData.get(world).contextPromise.then((contextOrDestroyedReason) => {
        if (contextOrDestroyedReason instanceof js.ExecutionContext)
          return contextOrDestroyedReason;
        throw new Error(contextOrDestroyedReason.destroyedReason);
      });
    }
    _mainContext() {
      return this._context("main");
    }
    _existingMainContext() {
      var _this$_contextData$ge2;
      return ((_this$_contextData$ge2 = this._contextData.get("main")) === null || _this$_contextData$ge2 === undefined ? undefined : _this$_contextData$ge2.context) || null;
    }
    _utilityContext() {
      return this._context("utility");
    }
    async evaluateExpression(expression, options = {}, arg) {
      var _options$world;
      const context = await this._context((_options$world = options.world) !== null && _options$world !== undefined ? _options$world : "main");
      const value = await context.evaluateExpression(expression, options, arg);
      return value;
    }
    async evaluateExpressionHandle(expression, options = {}, arg) {
      var _options$world2;
      const context = await this._context((_options$world2 = options.world) !== null && _options$world2 !== undefined ? _options$world2 : "main");
      const value = await context.evaluateExpressionHandle(expression, options, arg);
      return value;
    }
    async querySelector(selector, options) {
      _debugLogger.debugLogger.log("api", `    finding element using the selector "${selector}"`);
      return this.selectors.query(selector, options);
    }
    async waitForSelector(metadata, selector, options, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      if (options.visibility)
        throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible")
        throw new Error("options.waitFor is not supported, did you mean options.state?");
      const {
        state = "visible"
      } = options;
      if (!["attached", "detached", "visible", "hidden"].includes(state))
        throw new Error(`state: expected one of (attached|detached|visible|hidden)`);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}${state === "attached" ? "" : " to be " + state}`);
        return await this.waitForSelectorInternal(progress2, selector, true, options, scope);
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForSelectorInternal(progress2, selector, performActionPreChecks, options, scope) {
      const {
        state = "visible"
      } = options;
      const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performActionPreChecks)
          await this._page.performActionPreChecks(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        progress2.throwIfAborted();
        if (!resolved) {
          if (state === "hidden" || state === "detached")
            return null;
          return continuePolling;
        }
        const result = await resolved.injected.evaluateHandle((injected, {
          info,
          root
        }) => {
          if (root && !root.isConnected)
            throw injected.createStacklessError("Element is not attached to the DOM");
          const elements = injected.querySelectorAll(info.parsed, root || document);
          const element2 = elements[0];
          const visible2 = element2 ? injected.utils.isElementVisible(element2) : false;
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict)
              throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${visible2 ? "visible" : "hidden"} ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            element: element2,
            visible: visible2,
            attached: !!element2
          };
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : undefined
        });
        const {
          log,
          visible,
          attached
        } = await result.evaluate((r) => ({
          log: r.log,
          visible: r.visible,
          attached: r.attached
        }));
        if (log)
          progress2.log(log);
        const success = {
          attached,
          detached: !attached,
          visible,
          hidden: !visible
        }[state];
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        if (options.omitReturnValue) {
          result.dispose();
          return null;
        }
        const element = state === "attached" || state === "visible" ? await result.evaluateHandle((r) => r.element) : null;
        result.dispose();
        if (!element)
          return null;
        if (options.__testHookBeforeAdoptNode)
          await options.__testHookBeforeAdoptNode();
        try {
          return await element._adoptTo(await resolved.frame._mainContext());
        } catch (e) {
          return continuePolling;
        }
      });
      return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
    }
    async dispatchEvent(metadata, selector, type, eventInit = {}, options = {}, scope) {
      await this._callOnElementOnceMatches(metadata, selector, (injectedScript, element, data) => {
        injectedScript.dispatchEvent(element, data.type, data.eventInit);
      }, {
        type,
        eventInit
      }, {
        mainWorld: true,
        ...options
      }, scope);
    }
    async evalOnSelector(selector, strict, expression, isFunction, arg, scope) {
      const handle = await this.selectors.query(selector, {
        strict
      }, scope);
      if (!handle)
        throw new Error(`Failed to find element matching selector "${selector}"`);
      const result = await handle.evaluateExpression(expression, {
        isFunction
      }, arg);
      handle.dispose();
      return result;
    }
    async evalOnSelectorAll(selector, expression, isFunction, arg, scope) {
      const arrayHandle = await this.selectors.queryArrayInMainWorld(selector, scope);
      const result = await arrayHandle.evaluateExpression(expression, {
        isFunction
      }, arg);
      arrayHandle.dispose();
      return result;
    }
    async maskSelectors(selectors, color) {
      const context = await this._utilityContext();
      const injectedScript = await context.injectedScript();
      await injectedScript.evaluate((injected, {
        parsed,
        color: color2
      }) => {
        injected.maskSelectors(parsed, color2);
      }, {
        parsed: selectors,
        color
      });
    }
    async querySelectorAll(selector) {
      return this.selectors.queryAll(selector);
    }
    async queryCount(selector) {
      return await this.selectors.queryCount(selector);
    }
    async content() {
      try {
        const context = await this._utilityContext();
        return await context.evaluate(() => {
          let retVal = "";
          if (document.doctype)
            retVal = new XMLSerializer().serializeToString(document.doctype);
          if (document.documentElement)
            retVal += document.documentElement.outerHTML;
          return retVal;
        });
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        throw new Error(`Unable to retrieve content because the page is navigating and changing the content.`);
      }
    }
    async setContent(metadata, html, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        await this.raceNavigationAction(progress2, options, async () => {
          const waitUntil = options.waitUntil === undefined ? "load" : options.waitUntil;
          progress2.log(`setting frame content, waiting until "${waitUntil}"`);
          const tag = `--playwright--set--content--${this._id}--${++this._setContentCounter}--`;
          const context = await this._utilityContext();
          const lifecyclePromise = new Promise((resolve, reject) => {
            this._page._frameManager._consoleMessageTags.set(tag, () => {
              this._onClearLifecycle();
              this._waitForLoadState(progress2, waitUntil).then(resolve).catch(reject);
            });
          });
          const contentPromise = context.evaluate(({
            html: html2,
            tag: tag2
          }) => {
            document.open();
            console.debug(tag2);
            document.write(html2);
            document.close();
          }, {
            html,
            tag
          });
          await Promise.all([contentPromise, lifecyclePromise]);
          return null;
        });
      }, this._page._timeoutSettings.navigationTimeout(options));
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    origin() {
      var _network$parsedURL;
      if (!this._url.startsWith("http"))
        return;
      return (_network$parsedURL = network.parsedURL(this._url)) === null || _network$parsedURL === undefined ? undefined : _network$parsedURL.origin;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    async addScriptTag(params) {
      const {
        url = null,
        content = null,
        type = ""
      } = params;
      if (!url && !content)
        throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null)
          return (await context.evaluateHandle(addScriptUrl, {
            url,
            type
          })).asElement();
        const result = (await context.evaluateHandle(addScriptContent, {
          content,
          type
        })).asElement();
        if (this._page._delegate.cspErrorsAsynchronousForInlineScripts)
          await context.evaluate(() => true);
        return result;
      });
      async function addScriptUrl(params2) {
        const script = document.createElement("script");
        script.src = params2.url;
        if (params2.type)
          script.type = params2.type;
        const promise = new Promise((res, rej) => {
          script.onload = res;
          script.onerror = (e) => rej(typeof e === "string" ? new Error(e) : new Error(`Failed to load script at ${script.src}`));
        });
        document.head.appendChild(script);
        await promise;
        return script;
      }
      function addScriptContent(params2) {
        const script = document.createElement("script");
        script.type = params2.type || "text/javascript";
        script.text = params2.content;
        let error = null;
        script.onerror = (e) => error = e;
        document.head.appendChild(script);
        if (error)
          throw error;
        return script;
      }
    }
    async addStyleTag(params) {
      const {
        url = null,
        content = null
      } = params;
      if (!url && !content)
        throw new Error("Provide an object with a `url`, `path` or `content` property");
      const context = await this._mainContext();
      return this._raceWithCSPError(async () => {
        if (url !== null)
          return (await context.evaluateHandle(addStyleUrl, url)).asElement();
        return (await context.evaluateHandle(addStyleContent, content)).asElement();
      });
      async function addStyleUrl(url2) {
        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = url2;
        const promise = new Promise((res, rej) => {
          link.onload = res;
          link.onerror = rej;
        });
        document.head.appendChild(link);
        await promise;
        return link;
      }
      async function addStyleContent(content2) {
        const style = document.createElement("style");
        style.type = "text/css";
        style.appendChild(document.createTextNode(content2));
        const promise = new Promise((res, rej) => {
          style.onload = res;
          style.onerror = rej;
        });
        document.head.appendChild(style);
        await promise;
        return style;
      }
    }
    async _raceWithCSPError(func) {
      const listeners = [];
      let result;
      let error;
      let cspMessage;
      const actionPromise = func().then((r) => result = r).catch((e) => error = e);
      const errorPromise = new Promise((resolve) => {
        listeners.push(_eventsHelper.eventsHelper.addEventListener(this._page._browserContext, _browserContext.BrowserContext.Events.Console, (message) => {
          if (message.page() !== this._page || message.type() !== "error")
            return;
          if (message.text().includes("Content-Security-Policy") || message.text().includes("Content Security Policy")) {
            cspMessage = message;
            resolve();
          }
        }));
      });
      await Promise.race([actionPromise, errorPromise]);
      _eventsHelper.eventsHelper.removeEventListeners(listeners);
      if (cspMessage)
        throw new Error(cspMessage.text());
      if (error)
        throw error;
      return result;
    }
    async retryWithProgressAndTimeouts(progress2, timeouts, action) {
      const continuePolling = Symbol("continuePolling");
      timeouts = [0, ...timeouts];
      let timeoutIndex = 0;
      while (progress2.isRunning()) {
        const timeout = timeouts[Math.min(timeoutIndex++, timeouts.length - 1)];
        if (timeout) {
          const actionPromise = new Promise((f) => setTimeout(f, timeout));
          await _utils.LongStandingScope.raceMultiple([this._page.openScope, this._detachedScope], actionPromise);
        }
        progress2.throwIfAborted();
        try {
          const result = await action(continuePolling);
          if (result === continuePolling)
            continue;
          return result;
        } catch (e) {
          if (this._isErrorThatCannotBeRetried(e))
            throw e;
          continue;
        }
      }
      progress2.throwIfAborted();
      return;
    }
    _isErrorThatCannotBeRetried(e) {
      if (js.isJavaScriptErrorInEvaluate(e) || (0, _protocolError.isSessionClosedError)(e))
        return true;
      if (dom.isNonRecoverableDOMError(e) || (0, _selectorParser.isInvalidSelectorError)(e))
        return true;
      if (this.isDetached())
        return true;
      return false;
    }
    async _retryWithProgressIfNotConnected(progress2, selector, strict, performActionPreChecks, action) {
      progress2.log(`waiting for ${this._asLocator(selector)}`);
      return this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
        if (performActionPreChecks)
          await this._page.performActionPreChecks(progress2);
        const resolved = await this.selectors.resolveInjectedForSelector(selector, {
          strict
        });
        progress2.throwIfAborted();
        if (!resolved)
          return continuePolling;
        const result = await resolved.injected.evaluateHandle((injected, {
          info,
          callId
        }) => {
          const elements = injected.querySelectorAll(info.parsed, document);
          if (callId)
            injected.markTargetElements(new Set(elements), callId);
          const element2 = elements[0];
          let log2 = "";
          if (elements.length > 1) {
            if (info.strict)
              throw injected.strictModeViolationError(info.parsed, elements);
            log2 = `  locator resolved to ${elements.length} elements. Proceeding with the first one: ${injected.previewNode(elements[0])}`;
          } else if (element2) {
            log2 = `  locator resolved to ${injected.previewNode(element2)}`;
          }
          return {
            log: log2,
            success: !!element2,
            element: element2
          };
        }, {
          info: resolved.info,
          callId: progress2.metadata.id
        });
        const {
          log,
          success
        } = await result.evaluate((r) => ({
          log: r.log,
          success: r.success
        }));
        if (log)
          progress2.log(log);
        if (!success) {
          result.dispose();
          return continuePolling;
        }
        const element = await result.evaluateHandle((r) => r.element);
        result.dispose();
        try {
          const result2 = await action(element);
          if (result2 === "error:notconnected") {
            progress2.log("element was detached from the DOM, retrying");
            return continuePolling;
          }
          return result2;
        } finally {
          element === null || element === undefined || element.dispose();
        }
      });
    }
    async rafrafTimeoutScreenshotElementWithProgress(progress2, selector, timeout, options) {
      return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, async (handle) => {
        await handle._frame.rafrafTimeout(timeout);
        return await this._page._screenshotter.screenshotElement(progress2, handle, options);
      });
    }
    async click(metadata, selector, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._click(progress2, {
          ...options,
          waitAfter: !options.noWaitAfter
        })));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dblclick(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._dblclick(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async dragAndDrop(metadata, source, target, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, source, options.strict, !options.force, async (handle) => {
          return handle._retryPointerAction(progress2, "move and down", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.down();
          }, {
            ...options,
            waitAfter: "disabled",
            position: options.sourcePosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, target, options.strict, false, async (handle) => {
          return handle._retryPointerAction(progress2, "move and up", false, async (point) => {
            await this._page.mouse.move(point.x, point.y);
            await this._page.mouse.up();
          }, {
            ...options,
            waitAfter: "disabled",
            position: options.targetPosition,
            timeout: progress2.timeUntilDeadline()
          });
        }));
      }, this._page._timeoutSettings.timeout(options));
    }
    async tap(metadata, selector, options) {
      if (!this._page._browserContext._options.hasTouch)
        throw new Error("The page does not support tap. Use hasTouch context option to enable touch support.");
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._tap(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async fill(metadata, selector, value, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._fill(progress2, value, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async focus(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._focus(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async blur(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      await controller.run(async (progress2) => {
        dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._blur(progress2)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async textContent(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.textContent, undefined, options, scope);
    }
    async innerText(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, element) => {
        if (element.namespaceURI !== "http://www.w3.org/1999/xhtml")
          throw injectedScript.createStacklessError("Node is not an HTMLElement");
        return element.innerText;
      }, undefined, options, scope);
    }
    async innerHTML(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element) => element.innerHTML, undefined, options, scope);
    }
    async getAttribute(metadata, selector, name, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => element.getAttribute(data.name), {
        name
      }, options, scope);
    }
    async inputValue(metadata, selector, options = {}, scope) {
      return this._callOnElementOnceMatches(metadata, selector, (injectedScript, node) => {
        const element = injectedScript.retarget(node, "follow-label");
        if (!element || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA" && element.nodeName !== "SELECT")
          throw injectedScript.createStacklessError("Node is not an <input>, <textarea> or <select> element");
        return element.value;
      }, undefined, options, scope);
    }
    async highlight(selector) {
      const resolved = await this.selectors.resolveInjectedForSelector(selector);
      if (!resolved)
        return;
      return await resolved.injected.evaluate((injected, {
        info
      }) => {
        return injected.highlight(info.parsed);
      }, {
        info: resolved.info
      });
    }
    async hideHighlight() {
      return this.raceAgainstEvaluationStallingEvents(async () => {
        const context = await this._utilityContext();
        const injectedScript = await context.injectedScript();
        return await injectedScript.evaluate((injected) => {
          return injected.hideHighlight();
        });
      });
    }
    async _elementState(metadata, selector, state, options = {}, scope) {
      const result = await this._callOnElementOnceMatches(metadata, selector, (injected, element, data) => {
        return injected.elementState(element, data.state);
      }, {
        state
      }, options, scope);
      return dom.throwRetargetableDOMError(result);
    }
    async isVisible(metadata, selector, options = {}, scope) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`  checking visibility of ${this._asLocator(selector)}`);
        return await this.isVisibleInternal(selector, options, scope);
      }, this._page._timeoutSettings.timeout({}));
    }
    async isVisibleInternal(selector, options = {}, scope) {
      try {
        const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
        if (!resolved)
          return false;
        return await resolved.injected.evaluate((injected, {
          info,
          root
        }) => {
          const element = injected.querySelector(info.parsed, root || document, info.strict);
          const state = element ? injected.elementState(element, "visible") : false;
          return state === "error:notconnected" ? false : state;
        }, {
          info: resolved.info,
          root: resolved.frame === this ? scope : undefined
        });
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e) || (0, _protocolError.isSessionClosedError)(e))
          throw e;
        return false;
      }
    }
    async isHidden(metadata, selector, options = {}, scope) {
      return !await this.isVisible(metadata, selector, options, scope);
    }
    async isDisabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "disabled", options, scope);
    }
    async isEnabled(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "enabled", options, scope);
    }
    async isEditable(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "editable", options, scope);
    }
    async isChecked(metadata, selector, options = {}, scope) {
      return this._elementState(metadata, selector, "checked", options, scope);
    }
    async hover(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._hover(progress2, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async selectOption(metadata, selector, elements, values, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._selectOption(progress2, elements, values, options));
      }, this._page._timeoutSettings.timeout(options));
    }
    async setInputFiles(metadata, selector, params) {
      const inputFileItems = await (0, _fileUploadUtils.prepareFilesForUpload)(this, params);
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, params.strict, true, (handle) => handle._setInputFiles(progress2, inputFileItems)));
      }, this._page._timeoutSettings.timeout(params));
    }
    async type(metadata, selector, text, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._type(progress2, text, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async press(metadata, selector, key, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, true, (handle) => handle._press(progress2, key, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async check(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, true, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async uncheck(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return dom.assertDone(await this._retryWithProgressIfNotConnected(progress2, selector, options.strict, !options.force, (handle) => handle._setChecked(progress2, false, options)));
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForTimeout(metadata, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async () => {
        await new Promise((resolve) => setTimeout(resolve, timeout));
      });
    }
    async ariaSnapshot(metadata, selector, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        return await this._retryWithProgressIfNotConnected(progress2, selector, true, true, (handle) => handle.ariaSnapshot());
      }, this._page._timeoutSettings.timeout(options));
    }
    async expect(metadata, selector, options) {
      const result = await this._expectImpl(metadata, selector, options);
      if (result.matches === options.isNot)
        metadata.error = {
          error: {
            name: "Expect",
            message: "Expect failed"
          }
        };
      return result;
    }
    async _expectImpl(metadata, selector, options) {
      const lastIntermediateResult = {
        isSet: false
      };
      try {
        let timeout = this._page._timeoutSettings.timeout(options);
        const start = timeout > 0 ? (0, _utils.monotonicTime)() : 0;
        await new _progress.ProgressController(metadata, this).run(async (progress2) => {
          progress2.log(`${metadata.apiName}${timeout ? ` with timeout ${timeout}ms` : ""}`);
          progress2.log(`waiting for ${this._asLocator(selector)}`);
          await this._page.performActionPreChecks(progress2);
        }, timeout);
        try {
          const resultOneShot = await new _progress.ProgressController(metadata, this).run(async (progress2) => {
            return await this._expectInternal(progress2, selector, options, lastIntermediateResult);
          });
          if (resultOneShot.matches !== options.isNot)
            return resultOneShot;
        } catch (e) {
          if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
            throw e;
        }
        if (timeout > 0) {
          const elapsed = (0, _utils.monotonicTime)() - start;
          timeout -= elapsed;
        }
        if (timeout < 0)
          return {
            matches: options.isNot,
            log: (0, _utils.compressCallLog)(metadata.log),
            timedOut: true,
            received: lastIntermediateResult.received
          };
        return await new _progress.ProgressController(metadata, this).run(async (progress2) => {
          return await this.retryWithProgressAndTimeouts(progress2, [100, 250, 500, 1000], async (continuePolling) => {
            await this._page.performActionPreChecks(progress2);
            const {
              matches,
              received
            } = await this._expectInternal(progress2, selector, options, lastIntermediateResult);
            if (matches === options.isNot) {
              return continuePolling;
            }
            return {
              matches,
              received
            };
          });
        }, timeout);
      } catch (e) {
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
          throw e;
        const result = {
          matches: options.isNot,
          log: (0, _utils.compressCallLog)(metadata.log)
        };
        if (lastIntermediateResult.isSet)
          result.received = lastIntermediateResult.received;
        if (e instanceof _errors.TimeoutError)
          result.timedOut = true;
        return result;
      }
    }
    async _expectInternal(progress2, selector, options, lastIntermediateResult) {
      var _info$world;
      const selectorInFrame = await this.selectors.resolveFrameForSelector(selector, {
        strict: true
      });
      progress2.throwIfAborted();
      const {
        frame,
        info
      } = selectorInFrame || {
        frame: this,
        info: undefined
      };
      const world = options.expression === "to.have.property" ? "main" : (_info$world = info === null || info === undefined ? undefined : info.world) !== null && _info$world !== undefined ? _info$world : "utility";
      const context = await frame._context(world);
      const injected = await context.injectedScript();
      progress2.throwIfAborted();
      const {
        log,
        matches,
        received,
        missingReceived
      } = await injected.evaluate(async (injected2, {
        info: info2,
        options: options2,
        callId
      }) => {
        const elements = info2 ? injected2.querySelectorAll(info2.parsed, document) : [];
        if (callId)
          injected2.markTargetElements(new Set(elements), callId);
        const isArray = options2.expression === "to.have.count" || options2.expression.endsWith(".array");
        let log2 = "";
        if (isArray)
          log2 = `  locator resolved to ${elements.length} element${elements.length === 1 ? "" : "s"}`;
        else if (elements.length > 1)
          throw injected2.strictModeViolationError(info2.parsed, elements);
        else if (elements.length)
          log2 = `  locator resolved to ${injected2.previewNode(elements[0])}`;
        return {
          log: log2,
          ...await injected2.expect(elements[0], options2, elements)
        };
      }, {
        info,
        options,
        callId: progress2.metadata.id
      });
      if (log)
        progress2.log(log);
      if (matches === options.isNot) {
        lastIntermediateResult.received = missingReceived ? "<element(s) not found>" : received;
        lastIntermediateResult.isSet = true;
        if (!missingReceived && !Array.isArray(received))
          progress2.log(`  unexpected value "${renderUnexpectedValue(options.expression, received)}"`);
      }
      return {
        matches,
        received
      };
    }
    async _waitForFunctionExpression(metadata, expression, isFunction, arg, options, world = "main") {
      const controller = new _progress.ProgressController(metadata, this);
      if (typeof options.pollingInterval === "number")
        (0, _utils.assert)(options.pollingInterval > 0, "Cannot poll with non-positive interval: " + options.pollingInterval);
      expression = js.normalizeEvaluationExpression(expression, isFunction);
      return controller.run(async (progress2) => {
        return this.retryWithProgressAndTimeouts(progress2, [100], async () => {
          const context = world === "main" ? await this._mainContext() : await this._utilityContext();
          const injectedScript = await context.injectedScript();
          const handle = await injectedScript.evaluateHandle((injected, {
            expression: expression2,
            isFunction: isFunction2,
            polling,
            arg: arg2
          }) => {
            const predicate = () => {
              let result2 = globalThis.eval(expression2);
              if (isFunction2 === true) {
                result2 = result2(arg2);
              } else if (isFunction2 === false) {
                result2 = result2;
              } else {
                if (typeof result2 === "function")
                  result2 = result2(arg2);
              }
              return result2;
            };
            let fulfill;
            let reject;
            let aborted = false;
            const result = new Promise((f, r) => {
              fulfill = f;
              reject = r;
            });
            const next = () => {
              if (aborted)
                return;
              try {
                const success = predicate();
                if (success) {
                  fulfill(success);
                  return;
                }
                if (typeof polling !== "number")
                  injected.builtinRequestAnimationFrame(next);
                else
                  injected.builtinSetTimeout(next, polling);
              } catch (e) {
                reject(e);
              }
            };
            next();
            return {
              result,
              abort: () => aborted = true
            };
          }, {
            expression,
            isFunction,
            polling: options.pollingInterval,
            arg
          });
          progress2.cleanupWhenAborted(() => handle.evaluate((h) => h.abort()).catch(() => {
          }));
          return handle.evaluateHandle((h) => h.result);
        });
      }, this._page._timeoutSettings.timeout(options));
    }
    async waitForFunctionValueInUtility(progress2, pageFunction) {
      const expression = `() => {
      const result = (${pageFunction})();
      if (!result)
        return result;
      return JSON.stringify(result);
    }`;
      const handle = await this._waitForFunctionExpression((0, _instrumentation.serverSideCallMetadata)(), expression, true, undefined, {
        timeout: progress2.timeUntilDeadline()
      }, "utility");
      return JSON.parse(handle.rawValue());
    }
    async title() {
      const context = await this._utilityContext();
      return context.evaluate(() => document.title);
    }
    async rafrafTimeout(timeout) {
      if (timeout === 0)
        return;
      const context = await this._utilityContext();
      await Promise.all([
        context.evaluate(() => new Promise((x) => {
          requestAnimationFrame(() => {
            requestAnimationFrame(x);
          });
        })),
        new Promise((fulfill) => setTimeout(fulfill, timeout))
      ]);
    }
    _onDetached() {
      this._stopNetworkIdleTimer();
      this._detachedScope.close(new Error("Frame was detached"));
      for (const data of this._contextData.values()) {
        if (data.context)
          data.context.contextDestroyed("Frame was detached");
        data.contextPromise.resolve({
          destroyedReason: "Frame was detached"
        });
      }
      if (this._parentFrame)
        this._parentFrame._childFrames.delete(this);
      this._parentFrame = null;
    }
    async _callOnElementOnceMatches(metadata, selector, body, taskData, options = {}, scope) {
      const callbackText = body.toString();
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run(async (progress2) => {
        progress2.log(`waiting for ${this._asLocator(selector)}`);
        const promise = this.retryWithProgressAndTimeouts(progress2, [0, 20, 50, 100, 100, 500], async (continuePolling) => {
          const resolved = await this.selectors.resolveInjectedForSelector(selector, options, scope);
          progress2.throwIfAborted();
          if (!resolved)
            return continuePolling;
          const {
            log,
            success,
            value
          } = await resolved.injected.evaluate((injected, {
            info,
            callbackText: callbackText2,
            taskData: taskData2,
            callId,
            root
          }) => {
            const callback = injected.eval(callbackText2);
            const element = injected.querySelector(info.parsed, root || document, info.strict);
            if (!element)
              return {
                success: false
              };
            const log2 = `  locator resolved to ${injected.previewNode(element)}`;
            if (callId)
              injected.markTargetElements(new Set([element]), callId);
            return {
              log: log2,
              success: true,
              value: callback(injected, element, taskData2)
            };
          }, {
            info: resolved.info,
            callbackText,
            taskData,
            callId: progress2.metadata.id,
            root: resolved.frame === this ? scope : undefined
          });
          if (log)
            progress2.log(log);
          if (!success)
            return continuePolling;
          return value;
        });
        return scope ? scope._context._raceAgainstContextDestroyed(promise) : promise;
      }, this._page._timeoutSettings.timeout(options));
    }
    _setContext(world, context) {
      const data = this._contextData.get(world);
      data.context = context;
      if (context)
        data.contextPromise.resolve(context);
      else
        data.contextPromise = new _manualPromise.ManualPromise;
    }
    _contextCreated(world, context) {
      const data = this._contextData.get(world);
      if (data.context) {
        data.context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
        this._setContext(world, null);
      }
      this._setContext(world, context);
    }
    _contextDestroyed(context) {
      if (this._detachedScope.isClosed())
        return;
      context.contextDestroyed("Execution context was destroyed, most likely because of a navigation");
      for (const [world, data] of this._contextData) {
        if (data.context === context)
          this._setContext(world, null);
      }
    }
    _startNetworkIdleTimer() {
      (0, _utils.assert)(!this._networkIdleTimer);
      if (this._firedLifecycleEvents.has("networkidle") || this._detachedScope.isClosed())
        return;
      this._networkIdleTimer = setTimeout(() => {
        this._firedNetworkIdleSelf = true;
        this._page.mainFrame()._recalculateNetworkIdle();
      }, 500);
    }
    _stopNetworkIdleTimer() {
      if (this._networkIdleTimer)
        clearTimeout(this._networkIdleTimer);
      this._networkIdleTimer = undefined;
      this._firedNetworkIdleSelf = false;
    }
    async extendInjectedScript(source, arg) {
      const context = await this._context("main");
      const injectedScriptHandle = await context.injectedScript();
      return injectedScriptHandle.evaluateHandle((injectedScript, {
        source: source2,
        arg: arg2
      }) => {
        return injectedScript.extend(source2, arg2);
      }, {
        source,
        arg
      });
    }
    async resetStorageForCurrentOriginBestEffort(newStorage) {
      const context = await this._utilityContext();
      await context.evaluate(async ({
        ls
      }) => {
        sessionStorage.clear();
        localStorage.clear();
        for (const entry of ls || [])
          localStorage[entry.name] = entry.value;
        const registrations = navigator.serviceWorker ? await navigator.serviceWorker.getRegistrations() : [];
        await Promise.all(registrations.map(async (r) => {
          if (!r.installing && !r.waiting && !r.active)
            r.unregister().catch(() => {
            });
          else
            await r.unregister().catch(() => {
            });
        }));
        for (const db of await ((_indexedDB$databases = (_indexedDB = indexedDB).databases) === null || _indexedDB$databases === undefined ? undefined : _indexedDB$databases.call(_indexedDB)) || []) {
          var _indexedDB$databases, _indexedDB;
          if (db.name)
            indexedDB.deleteDatabase(db.name);
        }
      }, {
        ls: newStorage === null || newStorage === undefined ? undefined : newStorage.localStorage
      }).catch(() => {
      });
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)(this._page.attribution.playwright.options.sdkLanguage, selector);
    }
  }
  exports.Frame = Frame;
  Frame.Events = {
    InternalNavigation: "internalnavigation",
    AddLifecycle: "addlifecycle",
    RemoveLifecycle: "removelifecycle"
  };

  class SignalBarrier {
    constructor(progress2) {
      this._progress = undefined;
      this._protectCount = 0;
      this._promise = new _manualPromise.ManualPromise;
      this._progress = progress2;
      this.retain();
    }
    waitFor() {
      this.release();
      return this._promise;
    }
    async addFrameNavigation(frame) {
      if (frame.parentFrame())
        return;
      this.retain();
      const waiter = _helper.helper.waitForEvent(null, frame, Frame.Events.InternalNavigation, (e) => {
        if (!e.isPublic)
          return false;
        if (!e.error && this._progress)
          this._progress.log(`  navigated to "${frame._url}"`);
        return true;
      });
      await _utils.LongStandingScope.raceMultiple([frame._page.openScope, frame._detachedScope], waiter.promise).catch(() => {
      });
      waiter.dispose();
      this.release();
    }
    retain() {
      ++this._protectCount;
    }
    release() {
      --this._protectCount;
      if (!this._protectCount)
        this._promise.resolve();
    }
  }
  function verifyLifecycle(name, waitUntil) {
    if (waitUntil === "networkidle0")
      waitUntil = "networkidle";
    if (!types.kLifecycleEvents.has(waitUntil))
      throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  }
  function renderUnexpectedValue(expression, received) {
    if (expression === "to.be.checked")
      return received ? "checked" : "unchecked";
    if (expression === "to.be.unchecked")
      return received ? "unchecked" : "checked";
    if (expression === "to.be.visible")
      return received ? "visible" : "hidden";
    if (expression === "to.be.hidden")
      return received ? "hidden" : "visible";
    if (expression === "to.be.enabled")
      return received ? "enabled" : "disabled";
    if (expression === "to.be.disabled")
      return received ? "disabled" : "enabled";
    if (expression === "to.be.editable")
      return received ? "editable" : "readonly";
    if (expression === "to.be.readonly")
      return received ? "readonly" : "editable";
    if (expression === "to.be.empty")
      return received ? "empty" : "not empty";
    if (expression === "to.be.focused")
      return received ? "focused" : "not focused";
    if (expression === "to.match.aria")
      return received ? received.raw : received;
    return received;
  }
});

// node_modules/playwright-core/lib/server/usKeyboardLayout.js
var require_usKeyboardLayout = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keypadLocation = exports.USKeyboardLayout = undefined;
  var keypadLocation = exports.keypadLocation = 3;
  var USKeyboardLayout = exports.USKeyboardLayout = {
    Escape: {
      keyCode: 27,
      key: "Escape"
    },
    F1: {
      keyCode: 112,
      key: "F1"
    },
    F2: {
      keyCode: 113,
      key: "F2"
    },
    F3: {
      keyCode: 114,
      key: "F3"
    },
    F4: {
      keyCode: 115,
      key: "F4"
    },
    F5: {
      keyCode: 116,
      key: "F5"
    },
    F6: {
      keyCode: 117,
      key: "F6"
    },
    F7: {
      keyCode: 118,
      key: "F7"
    },
    F8: {
      keyCode: 119,
      key: "F8"
    },
    F9: {
      keyCode: 120,
      key: "F9"
    },
    F10: {
      keyCode: 121,
      key: "F10"
    },
    F11: {
      keyCode: 122,
      key: "F11"
    },
    F12: {
      keyCode: 123,
      key: "F12"
    },
    Backquote: {
      keyCode: 192,
      shiftKey: "~",
      key: "`"
    },
    Digit1: {
      keyCode: 49,
      shiftKey: "!",
      key: "1"
    },
    Digit2: {
      keyCode: 50,
      shiftKey: "@",
      key: "2"
    },
    Digit3: {
      keyCode: 51,
      shiftKey: "#",
      key: "3"
    },
    Digit4: {
      keyCode: 52,
      shiftKey: "$",
      key: "4"
    },
    Digit5: {
      keyCode: 53,
      shiftKey: "%",
      key: "5"
    },
    Digit6: {
      keyCode: 54,
      shiftKey: "^",
      key: "6"
    },
    Digit7: {
      keyCode: 55,
      shiftKey: "&",
      key: "7"
    },
    Digit8: {
      keyCode: 56,
      shiftKey: "*",
      key: "8"
    },
    Digit9: {
      keyCode: 57,
      shiftKey: "(",
      key: "9"
    },
    Digit0: {
      keyCode: 48,
      shiftKey: ")",
      key: "0"
    },
    Minus: {
      keyCode: 189,
      shiftKey: "_",
      key: "-"
    },
    Equal: {
      keyCode: 187,
      shiftKey: "+",
      key: "="
    },
    Backslash: {
      keyCode: 220,
      shiftKey: "|",
      key: "\\"
    },
    Backspace: {
      keyCode: 8,
      key: "Backspace"
    },
    Tab: {
      keyCode: 9,
      key: "Tab"
    },
    KeyQ: {
      keyCode: 81,
      shiftKey: "Q",
      key: "q"
    },
    KeyW: {
      keyCode: 87,
      shiftKey: "W",
      key: "w"
    },
    KeyE: {
      keyCode: 69,
      shiftKey: "E",
      key: "e"
    },
    KeyR: {
      keyCode: 82,
      shiftKey: "R",
      key: "r"
    },
    KeyT: {
      keyCode: 84,
      shiftKey: "T",
      key: "t"
    },
    KeyY: {
      keyCode: 89,
      shiftKey: "Y",
      key: "y"
    },
    KeyU: {
      keyCode: 85,
      shiftKey: "U",
      key: "u"
    },
    KeyI: {
      keyCode: 73,
      shiftKey: "I",
      key: "i"
    },
    KeyO: {
      keyCode: 79,
      shiftKey: "O",
      key: "o"
    },
    KeyP: {
      keyCode: 80,
      shiftKey: "P",
      key: "p"
    },
    BracketLeft: {
      keyCode: 219,
      shiftKey: "{",
      key: "["
    },
    BracketRight: {
      keyCode: 221,
      shiftKey: "}",
      key: "]"
    },
    CapsLock: {
      keyCode: 20,
      key: "CapsLock"
    },
    KeyA: {
      keyCode: 65,
      shiftKey: "A",
      key: "a"
    },
    KeyS: {
      keyCode: 83,
      shiftKey: "S",
      key: "s"
    },
    KeyD: {
      keyCode: 68,
      shiftKey: "D",
      key: "d"
    },
    KeyF: {
      keyCode: 70,
      shiftKey: "F",
      key: "f"
    },
    KeyG: {
      keyCode: 71,
      shiftKey: "G",
      key: "g"
    },
    KeyH: {
      keyCode: 72,
      shiftKey: "H",
      key: "h"
    },
    KeyJ: {
      keyCode: 74,
      shiftKey: "J",
      key: "j"
    },
    KeyK: {
      keyCode: 75,
      shiftKey: "K",
      key: "k"
    },
    KeyL: {
      keyCode: 76,
      shiftKey: "L",
      key: "l"
    },
    Semicolon: {
      keyCode: 186,
      shiftKey: ":",
      key: ";"
    },
    Quote: {
      keyCode: 222,
      shiftKey: '"',
      key: "'"
    },
    Enter: {
      keyCode: 13,
      key: "Enter",
      text: "\r"
    },
    ShiftLeft: {
      keyCode: 160,
      keyCodeWithoutLocation: 16,
      key: "Shift",
      location: 1
    },
    KeyZ: {
      keyCode: 90,
      shiftKey: "Z",
      key: "z"
    },
    KeyX: {
      keyCode: 88,
      shiftKey: "X",
      key: "x"
    },
    KeyC: {
      keyCode: 67,
      shiftKey: "C",
      key: "c"
    },
    KeyV: {
      keyCode: 86,
      shiftKey: "V",
      key: "v"
    },
    KeyB: {
      keyCode: 66,
      shiftKey: "B",
      key: "b"
    },
    KeyN: {
      keyCode: 78,
      shiftKey: "N",
      key: "n"
    },
    KeyM: {
      keyCode: 77,
      shiftKey: "M",
      key: "m"
    },
    Comma: {
      keyCode: 188,
      shiftKey: "<",
      key: ","
    },
    Period: {
      keyCode: 190,
      shiftKey: ">",
      key: "."
    },
    Slash: {
      keyCode: 191,
      shiftKey: "?",
      key: "/"
    },
    ShiftRight: {
      keyCode: 161,
      keyCodeWithoutLocation: 16,
      key: "Shift",
      location: 2
    },
    ControlLeft: {
      keyCode: 162,
      keyCodeWithoutLocation: 17,
      key: "Control",
      location: 1
    },
    MetaLeft: {
      keyCode: 91,
      key: "Meta",
      location: 1
    },
    AltLeft: {
      keyCode: 164,
      keyCodeWithoutLocation: 18,
      key: "Alt",
      location: 1
    },
    Space: {
      keyCode: 32,
      key: " "
    },
    AltRight: {
      keyCode: 165,
      keyCodeWithoutLocation: 18,
      key: "Alt",
      location: 2
    },
    AltGraph: {
      keyCode: 225,
      key: "AltGraph"
    },
    MetaRight: {
      keyCode: 92,
      key: "Meta",
      location: 2
    },
    ContextMenu: {
      keyCode: 93,
      key: "ContextMenu"
    },
    ControlRight: {
      keyCode: 163,
      keyCodeWithoutLocation: 17,
      key: "Control",
      location: 2
    },
    PrintScreen: {
      keyCode: 44,
      key: "PrintScreen"
    },
    ScrollLock: {
      keyCode: 145,
      key: "ScrollLock"
    },
    Pause: {
      keyCode: 19,
      key: "Pause"
    },
    PageUp: {
      keyCode: 33,
      key: "PageUp"
    },
    PageDown: {
      keyCode: 34,
      key: "PageDown"
    },
    Insert: {
      keyCode: 45,
      key: "Insert"
    },
    Delete: {
      keyCode: 46,
      key: "Delete"
    },
    Home: {
      keyCode: 36,
      key: "Home"
    },
    End: {
      keyCode: 35,
      key: "End"
    },
    ArrowLeft: {
      keyCode: 37,
      key: "ArrowLeft"
    },
    ArrowUp: {
      keyCode: 38,
      key: "ArrowUp"
    },
    ArrowRight: {
      keyCode: 39,
      key: "ArrowRight"
    },
    ArrowDown: {
      keyCode: 40,
      key: "ArrowDown"
    },
    NumLock: {
      keyCode: 144,
      key: "NumLock"
    },
    NumpadDivide: {
      keyCode: 111,
      key: "/",
      location: 3
    },
    NumpadMultiply: {
      keyCode: 106,
      key: "*",
      location: 3
    },
    NumpadSubtract: {
      keyCode: 109,
      key: "-",
      location: 3
    },
    Numpad7: {
      keyCode: 36,
      shiftKeyCode: 103,
      key: "Home",
      shiftKey: "7",
      location: 3
    },
    Numpad8: {
      keyCode: 38,
      shiftKeyCode: 104,
      key: "ArrowUp",
      shiftKey: "8",
      location: 3
    },
    Numpad9: {
      keyCode: 33,
      shiftKeyCode: 105,
      key: "PageUp",
      shiftKey: "9",
      location: 3
    },
    Numpad4: {
      keyCode: 37,
      shiftKeyCode: 100,
      key: "ArrowLeft",
      shiftKey: "4",
      location: 3
    },
    Numpad5: {
      keyCode: 12,
      shiftKeyCode: 101,
      key: "Clear",
      shiftKey: "5",
      location: 3
    },
    Numpad6: {
      keyCode: 39,
      shiftKeyCode: 102,
      key: "ArrowRight",
      shiftKey: "6",
      location: 3
    },
    NumpadAdd: {
      keyCode: 107,
      key: "+",
      location: 3
    },
    Numpad1: {
      keyCode: 35,
      shiftKeyCode: 97,
      key: "End",
      shiftKey: "1",
      location: 3
    },
    Numpad2: {
      keyCode: 40,
      shiftKeyCode: 98,
      key: "ArrowDown",
      shiftKey: "2",
      location: 3
    },
    Numpad3: {
      keyCode: 34,
      shiftKeyCode: 99,
      key: "PageDown",
      shiftKey: "3",
      location: 3
    },
    Numpad0: {
      keyCode: 45,
      shiftKeyCode: 96,
      key: "Insert",
      shiftKey: "0",
      location: 3
    },
    NumpadDecimal: {
      keyCode: 46,
      shiftKeyCode: 110,
      key: "\x00",
      shiftKey: ".",
      location: 3
    },
    NumpadEnter: {
      keyCode: 13,
      key: "Enter",
      text: "\r",
      location: 3
    }
  };
});

// node_modules/playwright-core/lib/server/input.js
var require_input = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.keypadLocation = exports.Touchscreen = exports.Mouse = exports.Keyboard = undefined;
  exports.resolveSmartModifier = resolveSmartModifier;
  exports.resolveSmartModifierString = resolveSmartModifierString;
  var _utils = require_utils();
  var keyboardLayout = _interopRequireWildcard(require_usKeyboardLayout());
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var keypadLocation = exports.keypadLocation = keyboardLayout.keypadLocation;
  var kModifiers = ["Alt", "Control", "Meta", "Shift"];

  class Keyboard {
    constructor(raw) {
      this._pressedModifiers = new Set;
      this._pressedKeys = new Set;
      this._raw = undefined;
      this._raw = raw;
    }
    async down(key) {
      const description = this._keyDescriptionForString(key);
      const autoRepeat = this._pressedKeys.has(description.code);
      this._pressedKeys.add(description.code);
      if (kModifiers.includes(description.key))
        this._pressedModifiers.add(description.key);
      const text = description.text;
      await this._raw.keydown(this._pressedModifiers, description.code, description.keyCode, description.keyCodeWithoutLocation, description.key, description.location, autoRepeat, text);
    }
    _keyDescriptionForString(str) {
      const keyString = resolveSmartModifierString(str);
      let description = usKeyboardLayout.get(keyString);
      (0, _utils.assert)(description, `Unknown key: "${keyString}"`);
      const shift = this._pressedModifiers.has("Shift");
      description = shift && description.shifted ? description.shifted : description;
      if (this._pressedModifiers.size > 1 || !this._pressedModifiers.has("Shift") && this._pressedModifiers.size === 1)
        return {
          ...description,
          text: ""
        };
      return description;
    }
    async up(key) {
      const description = this._keyDescriptionForString(key);
      if (kModifiers.includes(description.key))
        this._pressedModifiers.delete(description.key);
      this._pressedKeys.delete(description.code);
      await this._raw.keyup(this._pressedModifiers, description.code, description.keyCode, description.keyCodeWithoutLocation, description.key, description.location);
    }
    async insertText(text) {
      await this._raw.sendText(text);
    }
    async type(text, options) {
      const delay = options && options.delay || undefined;
      for (const char of text) {
        if (usKeyboardLayout.has(char)) {
          await this.press(char, {
            delay
          });
        } else {
          if (delay)
            await new Promise((f) => setTimeout(f, delay));
          await this.insertText(char);
        }
      }
    }
    async press(key, options = {}) {
      function split(keyString) {
        const keys = [];
        let building = "";
        for (const char of keyString) {
          if (char === "+" && building) {
            keys.push(building);
            building = "";
          } else {
            building += char;
          }
        }
        keys.push(building);
        return keys;
      }
      const tokens = split(key);
      key = tokens[tokens.length - 1];
      for (let i = 0;i < tokens.length - 1; ++i)
        await this.down(tokens[i]);
      await this.down(key);
      if (options.delay)
        await new Promise((f) => setTimeout(f, options.delay));
      await this.up(key);
      for (let i = tokens.length - 2;i >= 0; --i)
        await this.up(tokens[i]);
    }
    async ensureModifiers(mm) {
      const modifiers = mm.map(resolveSmartModifier);
      for (const modifier of modifiers) {
        if (!kModifiers.includes(modifier))
          throw new Error("Unknown modifier " + modifier);
      }
      const restore = Array.from(this._pressedModifiers);
      for (const key of kModifiers) {
        const needDown = modifiers.includes(key);
        const isDown = this._pressedModifiers.has(key);
        if (needDown && !isDown)
          await this.down(key);
        else if (!needDown && isDown)
          await this.up(key);
      }
      return restore;
    }
    _modifiers() {
      return this._pressedModifiers;
    }
  }
  exports.Keyboard = Keyboard;
  function resolveSmartModifierString(key) {
    if (key === "ControlOrMeta")
      return process.platform === "darwin" ? "Meta" : "Control";
    return key;
  }
  function resolveSmartModifier(m) {
    return resolveSmartModifierString(m);
  }

  class Mouse {
    constructor(raw, page) {
      this._keyboard = undefined;
      this._x = 0;
      this._y = 0;
      this._lastButton = "none";
      this._buttons = new Set;
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
      this._keyboard = this._page.keyboard;
    }
    async move(x, y, options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      const {
        steps = 1
      } = options;
      const fromX = this._x;
      const fromY = this._y;
      this._x = x;
      this._y = y;
      for (let i = 1;i <= steps; i++) {
        const middleX = fromX + (x - fromX) * (i / steps);
        const middleY = fromY + (y - fromY) * (i / steps);
        await this._raw.move(middleX, middleY, this._lastButton, this._buttons, this._keyboard._modifiers(), !!options.forClick);
      }
    }
    async down(options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = button;
      this._buttons.add(button);
      await this._raw.down(this._x, this._y, this._lastButton, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async up(options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x: this._x,
          y: this._y
        };
      const {
        button = "left",
        clickCount = 1
      } = options;
      this._lastButton = "none";
      this._buttons.delete(button);
      await this._raw.up(this._x, this._y, button, this._buttons, this._keyboard._modifiers(), clickCount);
    }
    async click(x, y, options = {}, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      const {
        delay = null,
        clickCount = 1
      } = options;
      if (delay) {
        this.move(x, y, {
          forClick: true
        });
        for (let cc = 1;cc <= clickCount; ++cc) {
          await this.down({
            ...options,
            clickCount: cc
          });
          await new Promise((f) => setTimeout(f, delay));
          await this.up({
            ...options,
            clickCount: cc
          });
          if (cc < clickCount)
            await new Promise((f) => setTimeout(f, delay));
        }
      } else {
        const promises = [];
        promises.push(this.move(x, y, {
          forClick: true
        }));
        for (let cc = 1;cc <= clickCount; ++cc) {
          promises.push(this.down({
            ...options,
            clickCount: cc
          }));
          promises.push(this.up({
            ...options,
            clickCount: cc
          }));
        }
        await Promise.all(promises);
      }
    }
    async dblclick(x, y, options = {}) {
      await this.click(x, y, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._raw.wheel(this._x, this._y, this._buttons, this._keyboard._modifiers(), deltaX, deltaY);
    }
  }
  exports.Mouse = Mouse;
  var aliases = new Map([["ShiftLeft", ["Shift"]], ["ControlLeft", ["Control"]], ["AltLeft", ["Alt"]], ["MetaLeft", ["Meta"]], ["Enter", [`
`, "\r"]]]);
  var usKeyboardLayout = buildLayoutClosure(keyboardLayout.USKeyboardLayout);
  function buildLayoutClosure(layout) {
    const result = new Map;
    for (const code in layout) {
      const definition = layout[code];
      const description = {
        key: definition.key || "",
        keyCode: definition.keyCode || 0,
        keyCodeWithoutLocation: definition.keyCodeWithoutLocation || definition.keyCode || 0,
        code,
        text: definition.text || "",
        location: definition.location || 0
      };
      if (definition.key.length === 1)
        description.text = description.key;
      let shiftedDescription;
      if (definition.shiftKey) {
        (0, _utils.assert)(definition.shiftKey.length === 1);
        shiftedDescription = {
          ...description
        };
        shiftedDescription.key = definition.shiftKey;
        shiftedDescription.text = definition.shiftKey;
        if (definition.shiftKeyCode)
          shiftedDescription.keyCode = definition.shiftKeyCode;
      }
      result.set(code, {
        ...description,
        shifted: shiftedDescription
      });
      if (aliases.has(code)) {
        for (const alias of aliases.get(code))
          result.set(alias, description);
      }
      if (definition.location)
        continue;
      if (description.key.length === 1)
        result.set(description.key, description);
      if (shiftedDescription)
        result.set(shiftedDescription.key, {
          ...shiftedDescription,
          shifted: undefined
        });
    }
    return result;
  }

  class Touchscreen {
    constructor(raw, page) {
      this._raw = undefined;
      this._page = undefined;
      this._raw = raw;
      this._page = page;
    }
    async tap(x, y, metadata) {
      if (metadata)
        metadata.point = {
          x,
          y
        };
      if (!this._page._browserContext._options.hasTouch)
        throw new Error("hasTouch must be enabled on the browser context before using the touchscreen.");
      await this._raw.tap(x, y, this._page.keyboard._modifiers());
    }
  }
  exports.Touchscreen = Touchscreen;
});

// node_modules/playwright-core/lib/server/screenshotter.js
var require_screenshotter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Screenshotter = undefined;
  exports.validateScreenshotOptions = validateScreenshotOptions;
  var _helper = require_helper();
  var _utils = require_utils();
  var _multimap = require_multimap();
  function inPagePrepareForScreenshots(screenshotStyle, hideCaret, disableAnimations, syncAnimations) {
    if (syncAnimations) {
      const style = document.createElement("style");
      style.textContent = "body {}";
      document.head.appendChild(style);
      document.documentElement.getBoundingClientRect();
      style.remove();
    }
    if (!screenshotStyle && !hideCaret && !disableAnimations)
      return;
    const collectRoots = (root, roots2 = []) => {
      roots2.push(root);
      const walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT);
      do {
        const node = walker.currentNode;
        const shadowRoot = node instanceof Element ? node.shadowRoot : null;
        if (shadowRoot)
          collectRoots(shadowRoot, roots2);
      } while (walker.nextNode());
      return roots2;
    };
    const roots = collectRoots(document);
    const cleanupCallbacks = [];
    if (screenshotStyle) {
      for (const root of roots) {
        const styleTag = document.createElement("style");
        styleTag.textContent = screenshotStyle;
        if (root === document)
          document.documentElement.append(styleTag);
        else
          root.append(styleTag);
        cleanupCallbacks.push(() => {
          styleTag.remove();
        });
      }
    }
    if (hideCaret) {
      const elements = new Map;
      for (const root of roots) {
        root.querySelectorAll("input,textarea,[contenteditable]").forEach((element) => {
          elements.set(element, {
            value: element.style.getPropertyValue("caret-color"),
            priority: element.style.getPropertyPriority("caret-color")
          });
          element.style.setProperty("caret-color", "transparent", "important");
        });
      }
      cleanupCallbacks.push(() => {
        for (const [element, value] of elements)
          element.style.setProperty("caret-color", value.value, value.priority);
      });
    }
    if (disableAnimations) {
      const infiniteAnimationsToResume = new Set;
      const handleAnimations = (root) => {
        for (const animation of root.getAnimations()) {
          if (!animation.effect || animation.playbackRate === 0 || infiniteAnimationsToResume.has(animation))
            continue;
          const endTime = animation.effect.getComputedTiming().endTime;
          if (Number.isFinite(endTime)) {
            try {
              animation.finish();
            } catch (e) {
            }
          } else {
            try {
              animation.cancel();
              infiniteAnimationsToResume.add(animation);
            } catch (e) {
            }
          }
        }
      };
      for (const root of roots) {
        const handleRootAnimations = handleAnimations.bind(null, root);
        handleRootAnimations();
        root.addEventListener("transitionrun", handleRootAnimations);
        root.addEventListener("animationstart", handleRootAnimations);
        cleanupCallbacks.push(() => {
          root.removeEventListener("transitionrun", handleRootAnimations);
          root.removeEventListener("animationstart", handleRootAnimations);
        });
      }
      cleanupCallbacks.push(() => {
        for (const animation of infiniteAnimationsToResume) {
          try {
            animation.play();
          } catch (e) {
          }
        }
      });
    }
    window.__pwCleanupScreenshot = () => {
      for (const cleanupCallback of cleanupCallbacks)
        cleanupCallback();
      delete window.__pwCleanupScreenshot;
    };
  }

  class Screenshotter {
    constructor(page) {
      this._queue = new TaskQueue;
      this._page = undefined;
      this._page = page;
      this._queue = new TaskQueue;
    }
    async _originalViewportSize(progress2) {
      const originalViewportSize = this._page.viewportSize();
      let viewportSize = originalViewportSize;
      if (!viewportSize)
        viewportSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          width: window.innerWidth,
          height: window.innerHeight
        }));
      return {
        viewportSize,
        originalViewportSize
      };
    }
    async _fullPageSize(progress2) {
      const fullPageSize = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => {
        if (!document.body || !document.documentElement)
          return null;
        return {
          width: Math.max(document.body.scrollWidth, document.documentElement.scrollWidth, document.body.offsetWidth, document.documentElement.offsetWidth, document.body.clientWidth, document.documentElement.clientWidth),
          height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight)
        };
      });
      return fullPageSize;
    }
    async screenshotPage(progress2, options) {
      const format = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking page screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, this._page.mainFrame(), options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        if (options.fullPage) {
          const fullPageSize = await this._fullPageSize(progress2);
          let documentRect = {
            x: 0,
            y: 0,
            width: fullPageSize.width,
            height: fullPageSize.height
          };
          const fitsViewport = fullPageSize.width <= viewportSize.width && fullPageSize.height <= viewportSize.height;
          if (options.clip)
            documentRect = trimClipToSize(options.clip, documentRect);
          const buffer2 = await this._screenshot(progress2, format, documentRect, undefined, fitsViewport, options);
          progress2.throwIfAborted();
          await this._restorePageAfterScreenshot();
          return buffer2;
        }
        const viewportRect = options.clip ? trimClipToSize(options.clip, viewportSize) : {
          x: 0,
          y: 0,
          ...viewportSize
        };
        const buffer = await this._screenshot(progress2, format, undefined, viewportRect, true, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer;
      });
    }
    async screenshotElement(progress2, handle, options) {
      const format = validateScreenshotOptions(options);
      return this._queue.postTask(async () => {
        progress2.log("taking element screenshot");
        const {
          viewportSize
        } = await this._originalViewportSize(progress2);
        await this._preparePageForScreenshot(progress2, handle._frame, options.style, options.caret !== "initial", options.animations === "disabled");
        progress2.throwIfAborted();
        await handle._waitAndScrollIntoViewIfNeeded(progress2, true);
        progress2.throwIfAborted();
        const boundingBox = await handle.boundingBox();
        (0, _utils.assert)(boundingBox, "Node is either not visible or not an HTMLElement");
        (0, _utils.assert)(boundingBox.width !== 0, "Node has 0 width.");
        (0, _utils.assert)(boundingBox.height !== 0, "Node has 0 height.");
        const fitsViewport = boundingBox.width <= viewportSize.width && boundingBox.height <= viewportSize.height;
        progress2.throwIfAborted();
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        const documentRect = {
          ...boundingBox
        };
        documentRect.x += scrollOffset.x;
        documentRect.y += scrollOffset.y;
        const buffer = await this._screenshot(progress2, format, _helper.helper.enclosingIntRect(documentRect), undefined, fitsViewport, options);
        progress2.throwIfAborted();
        await this._restorePageAfterScreenshot();
        return buffer;
      });
    }
    async _preparePageForScreenshot(progress2, frame, screenshotStyle, hideCaret, disableAnimations) {
      if (disableAnimations)
        progress2.log("  disabled all CSS animations");
      const syncAnimations = this._page._delegate.shouldToggleStyleSheetToSyncAnimations();
      await this._page.safeNonStallingEvaluateInAllFrames("(" + inPagePrepareForScreenshots.toString() + `)(${JSON.stringify(screenshotStyle)}, ${hideCaret}, ${disableAnimations}, ${syncAnimations})`, "utility");
      if (!process.env.PW_TEST_SCREENSHOT_NO_FONTS_READY) {
        progress2.log("waiting for fonts to load...");
        await frame.nonStallingEvaluateInExistingContext("document.fonts.ready", "utility").catch(() => {
        });
        progress2.log("fonts loaded");
      }
      progress2.cleanupWhenAborted(() => this._restorePageAfterScreenshot());
    }
    async _restorePageAfterScreenshot() {
      await this._page.safeNonStallingEvaluateInAllFrames("window.__pwCleanupScreenshot && window.__pwCleanupScreenshot()", "utility");
    }
    async _maskElements(progress2, options) {
      const framesToParsedSelectors = new _multimap.MultiMap;
      const cleanup = async () => {
        await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
          await frame.hideHighlight();
        }));
      };
      if (!options.mask || !options.mask.length)
        return cleanup;
      await Promise.all((options.mask || []).map(async ({
        frame,
        selector
      }) => {
        const pair = await frame.selectors.resolveFrameForSelector(selector);
        if (pair)
          framesToParsedSelectors.set(pair.frame, pair.info.parsed);
      }));
      progress2.throwIfAborted();
      await Promise.all([...framesToParsedSelectors.keys()].map(async (frame) => {
        await frame.maskSelectors(framesToParsedSelectors.get(frame), options.maskColor || "#F0F");
      }));
      progress2.cleanupWhenAborted(cleanup);
      return cleanup;
    }
    async _screenshot(progress2, format, documentRect, viewportRect, fitsViewport, options) {
      var _options$quality;
      if (options.__testHookBeforeScreenshot)
        await options.__testHookBeforeScreenshot();
      progress2.throwIfAborted();
      const shouldSetDefaultBackground = options.omitBackground && format === "png";
      if (shouldSetDefaultBackground) {
        await this._page._delegate.setBackgroundColor({
          r: 0,
          g: 0,
          b: 0,
          a: 0
        });
        progress2.cleanupWhenAborted(() => this._page._delegate.setBackgroundColor());
      }
      progress2.throwIfAborted();
      const cleanupHighlight = await this._maskElements(progress2, options);
      progress2.throwIfAborted();
      const quality = format === "jpeg" ? (_options$quality = options.quality) !== null && _options$quality !== undefined ? _options$quality : 80 : undefined;
      const buffer = await this._page._delegate.takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, options.scale || "device");
      progress2.throwIfAborted();
      await cleanupHighlight();
      progress2.throwIfAborted();
      if (shouldSetDefaultBackground)
        await this._page._delegate.setBackgroundColor();
      progress2.throwIfAborted();
      if (options.__testHookAfterScreenshot)
        await options.__testHookAfterScreenshot();
      return buffer;
    }
  }
  exports.Screenshotter = Screenshotter;

  class TaskQueue {
    constructor() {
      this._chain = undefined;
      this._chain = Promise.resolve();
    }
    postTask(task) {
      const result = this._chain.then(task);
      this._chain = result.catch(() => {
      });
      return result;
    }
  }
  function trimClipToSize(clip, size) {
    const p1 = {
      x: Math.max(0, Math.min(clip.x, size.width)),
      y: Math.max(0, Math.min(clip.y, size.height))
    };
    const p2 = {
      x: Math.max(0, Math.min(clip.x + clip.width, size.width)),
      y: Math.max(0, Math.min(clip.y + clip.height, size.height))
    };
    const result = {
      x: p1.x,
      y: p1.y,
      width: p2.x - p1.x,
      height: p2.y - p1.y
    };
    (0, _utils.assert)(result.width && result.height, "Clipped area is either empty or outside the resulting image");
    return result;
  }
  function validateScreenshotOptions(options) {
    let format = null;
    if (options.type) {
      (0, _utils.assert)(options.type === "png" || options.type === "jpeg", "Unknown options.type value: " + options.type);
      format = options.type;
    }
    if (!format)
      format = "png";
    if (options.quality !== undefined) {
      (0, _utils.assert)(format === "jpeg", "options.quality is unsupported for the " + format + " screenshots");
      (0, _utils.assert)(typeof options.quality === "number", "Expected options.quality to be a number but found " + typeof options.quality);
      (0, _utils.assert)(Number.isInteger(options.quality), "Expected options.quality to be an integer");
      (0, _utils.assert)(options.quality >= 0 && options.quality <= 100, "Expected options.quality to be between 0 and 100 (inclusive), got " + options.quality);
    }
    if (options.clip) {
      (0, _utils.assert)(typeof options.clip.x === "number", "Expected options.clip.x to be a number but found " + typeof options.clip.x);
      (0, _utils.assert)(typeof options.clip.y === "number", "Expected options.clip.y to be a number but found " + typeof options.clip.y);
      (0, _utils.assert)(typeof options.clip.width === "number", "Expected options.clip.width to be a number but found " + typeof options.clip.width);
      (0, _utils.assert)(typeof options.clip.height === "number", "Expected options.clip.height to be a number but found " + typeof options.clip.height);
      (0, _utils.assert)(options.clip.width !== 0, "Expected options.clip.width not to be 0.");
      (0, _utils.assert)(options.clip.height !== 0, "Expected options.clip.height not to be 0.");
    }
    return format;
  }
});

// node_modules/playwright-core/lib/server/console.js
var require_console = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConsoleMessage = undefined;

  class ConsoleMessage {
    constructor(page, type, text, args, location2) {
      this._type = undefined;
      this._text = undefined;
      this._args = undefined;
      this._location = undefined;
      this._page = undefined;
      this._page = page;
      this._type = type;
      this._text = text;
      this._args = args;
      this._location = location2 || {
        url: "",
        lineNumber: 0,
        columnNumber: 0
      };
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    text() {
      if (this._text === undefined)
        this._text = this._args.map((arg) => arg.preview()).join(" ");
      return this._text;
    }
    args() {
      return this._args;
    }
    location() {
      return this._location;
    }
  }
  exports.ConsoleMessage = ConsoleMessage;
});

// node_modules/playwright-core/lib/server/accessibility.js
var require_accessibility = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Accessibility = undefined;

  class Accessibility {
    constructor(getAXTree) {
      this._getAXTree = undefined;
      this._getAXTree = getAXTree;
    }
    async snapshot(options = {}) {
      const {
        interestingOnly = true,
        root = null
      } = options;
      const {
        tree,
        needle
      } = await this._getAXTree(root || undefined);
      if (!interestingOnly) {
        if (root)
          return needle && serializeTree(needle)[0];
        return serializeTree(tree)[0];
      }
      const interestingNodes = new Set;
      collectInterestingNodes(interestingNodes, tree, false);
      if (root && (!needle || !interestingNodes.has(needle)))
        return null;
      return serializeTree(needle || tree, interestingNodes)[0];
    }
  }
  exports.Accessibility = Accessibility;
  function collectInterestingNodes(collection, node, insideControl) {
    if (node.isInteresting(insideControl))
      collection.add(node);
    if (node.isLeafNode())
      return;
    insideControl = insideControl || node.isControl();
    for (const child of node.children())
      collectInterestingNodes(collection, child, insideControl);
  }
  function serializeTree(node, whitelistedNodes) {
    const children = [];
    for (const child of node.children())
      children.push(...serializeTree(child, whitelistedNodes));
    if (whitelistedNodes && !whitelistedNodes.has(node))
      return children;
    const serializedNode = node.serialize();
    if (children.length)
      serializedNode.children = children;
    return [serializedNode];
  }
});

// node_modules/playwright-core/lib/server/fileChooser.js
var require_fileChooser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileChooser = undefined;

  class FileChooser {
    constructor(page, elementHandle, isMultiple) {
      this._page = undefined;
      this._elementHandle = undefined;
      this._isMultiple = undefined;
      this._page = page;
      this._elementHandle = elementHandle;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
  }
  exports.FileChooser = FileChooser;
});

// node_modules/playwright-core/lib/server/page.js
var require_page = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Worker = exports.PageBinding = exports.Page = exports.InitScript = undefined;
  var frames = _interopRequireWildcard(require_frames());
  var input = _interopRequireWildcard(require_input());
  var js = _interopRequireWildcard(require_javascript());
  var _screenshotter = require_screenshotter();
  var _timeoutSettings = require_timeoutSettings();
  var _browserContext = require_browserContext();
  var _console = require_console();
  var accessibility = _interopRequireWildcard(require_accessibility());
  var _fileChooser = require_fileChooser();
  var _progress = require_progress();
  var _utils = require_utils();
  var _manualPromise = require_manualPromise();
  var _debugLogger = require_debugLogger();
  var _comparators = require_comparators();
  var _instrumentation = require_instrumentation();
  var _selectorParser = require_selectorParser();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _errors = require_errors();
  var _helper = require_helper();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class Page extends _instrumentation.SdkObject {
    constructor(delegate, browserContext) {
      super(browserContext, "page");
      this._closedState = "open";
      this._closedPromise = new _manualPromise.ManualPromise;
      this._initialized = false;
      this._eventsToEmitAfterInitialized = [];
      this._crashed = false;
      this.openScope = new _utils.LongStandingScope;
      this._browserContext = undefined;
      this.keyboard = undefined;
      this.mouse = undefined;
      this.touchscreen = undefined;
      this._timeoutSettings = undefined;
      this._delegate = undefined;
      this._emulatedSize = undefined;
      this._extraHTTPHeaders = undefined;
      this._emulatedMedia = {};
      this._interceptFileChooser = false;
      this._pageBindings = new Map;
      this.initScripts = [];
      this._screenshotter = undefined;
      this._frameManager = undefined;
      this.accessibility = undefined;
      this._workers = new Map;
      this.pdf = undefined;
      this.coverage = undefined;
      this._clientRequestInterceptor = undefined;
      this._serverRequestInterceptor = undefined;
      this._ownedContext = undefined;
      this._pageIsError = undefined;
      this._video = null;
      this._opener = undefined;
      this._isServerSideOnly = false;
      this._locatorHandlers = new Map;
      this._lastLocatorHandlerUid = 0;
      this._locatorHandlerRunningCounter = 0;
      this._frameThrottler = new FrameThrottler(10, 35, 200);
      this._closeReason = undefined;
      this.attribution.page = this;
      this._delegate = delegate;
      this._browserContext = browserContext;
      this.accessibility = new accessibility.Accessibility(delegate.getAccessibilityTree.bind(delegate));
      this.keyboard = new input.Keyboard(delegate.rawKeyboard);
      this.mouse = new input.Mouse(delegate.rawMouse, this);
      this.touchscreen = new input.Touchscreen(delegate.rawTouchscreen, this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(browserContext._timeoutSettings);
      this._screenshotter = new _screenshotter.Screenshotter(this);
      this._frameManager = new frames.FrameManager(this);
      if (delegate.pdf)
        this.pdf = delegate.pdf.bind(delegate);
      this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    async initOpener(opener) {
      if (!opener)
        return;
      const openerPage = await opener.pageOrError();
      if (openerPage instanceof Page && !openerPage.isClosed())
        this._opener = openerPage;
    }
    reportAsNew(error = undefined, contextEvent = _browserContext.BrowserContext.Events.Page) {
      if (error) {
        if (this._browserContext.isClosingOrClosed())
          return;
        this._setIsError(error);
      }
      this._initialized = true;
      this.emitOnContext(contextEvent, this);
      for (const {
        event,
        args
      } of this._eventsToEmitAfterInitialized)
        this._browserContext.emit(event, ...args);
      this._eventsToEmitAfterInitialized = [];
      if (this.isClosed())
        this.emit(Page.Events.Close);
      else
        this.instrumentation.onPageOpen(this);
    }
    initializedOrUndefined() {
      return this._initialized ? this : undefined;
    }
    emitOnContext(event, ...args) {
      if (this._isServerSideOnly)
        return;
      this._browserContext.emit(event, ...args);
    }
    emitOnContextOnceInitialized(event, ...args) {
      if (this._isServerSideOnly)
        return;
      if (this._initialized)
        this._browserContext.emit(event, ...args);
      else
        this._eventsToEmitAfterInitialized.push({
          event,
          args
        });
    }
    async resetForReuse(metadata) {
      this.setDefaultNavigationTimeout(undefined);
      this.setDefaultTimeout(undefined);
      this._locatorHandlers.clear();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      await this.setClientRequestInterceptor(undefined);
      await this._setServerRequestInterceptor(undefined);
      await this.setFileChooserIntercepted(false);
      await this.mainFrame().goto(metadata, "about:blank");
      this._emulatedSize = undefined;
      this._emulatedMedia = {};
      this._extraHTTPHeaders = undefined;
      this._interceptFileChooser = false;
      await Promise.all([this._delegate.updateEmulatedViewportSize(), this._delegate.updateEmulateMedia(), this._delegate.updateFileChooserInterception()]);
      await this._delegate.resetForReuse();
    }
    _didClose() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      (0, _utils.assert)(this._closedState !== "closed", "Page closed twice");
      this._closedState = "closed";
      this.emit(Page.Events.Close);
      this._closedPromise.resolve();
      this.instrumentation.onPageClose(this);
      this.openScope.close(new _errors.TargetClosedError);
    }
    _didCrash() {
      this._frameManager.dispose();
      this._frameThrottler.dispose();
      this.emit(Page.Events.Crash);
      this._crashed = true;
      this.instrumentation.onPageClose(this);
      this.openScope.close(new Error("Page crashed"));
    }
    async _onFileChooserOpened(handle) {
      let multiple;
      try {
        multiple = await handle.evaluate((element) => !!element.multiple);
      } catch (e) {
        return;
      }
      if (!this.listenerCount(Page.Events.FileChooser)) {
        handle.dispose();
        return;
      }
      const fileChooser = new _fileChooser.FileChooser(this, handle, multiple);
      this.emit(Page.Events.FileChooser, fileChooser);
    }
    context() {
      return this._browserContext;
    }
    opener() {
      return this._opener;
    }
    mainFrame() {
      return this._frameManager.mainFrame();
    }
    frames() {
      return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered`);
      if (this._browserContext._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered in the browser context`);
      const binding = new PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this._delegate.addInitScript(binding.initScript);
      await Promise.all(this.frames().map((frame) => frame.evaluateExpression(binding.initScript.source).catch((e) => {
      })));
    }
    async _removeExposedBindings() {
      for (const [key, binding] of this._pageBindings) {
        if (!binding.internal)
          this._pageBindings.delete(key);
      }
    }
    setExtraHTTPHeaders(headers) {
      this._extraHTTPHeaders = headers;
      return this._delegate.updateExtraHTTPHeaders();
    }
    extraHTTPHeaders() {
      return this._extraHTTPHeaders;
    }
    async _onBindingCalled(payload, context) {
      if (this._closedState === "closed")
        return;
      await PageBinding.dispatch(this, payload, context);
    }
    _addConsoleMessage(type, args, location2, text) {
      const message = new _console.ConsoleMessage(this, type, text, args, location2);
      const intercepted = this._frameManager.interceptConsoleMessage(message);
      if (intercepted) {
        args.forEach((arg) => arg.dispose());
        return;
      }
      this.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.Console, message);
    }
    async reload(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        const [response] = await Promise.all([
          this.mainFrame()._waitForNavigation(progress2, true, options),
          this._delegate.reload()
        ]);
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goBack(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result = await this._delegate.goBack();
        if (!result)
          return null;
        const response = await waitPromise;
        if (error)
          throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    async goForward(metadata, options) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this.mainFrame().raceNavigationAction(progress2, options, async () => {
        let error;
        const waitPromise = this.mainFrame()._waitForNavigation(progress2, false, options).catch((e) => {
          error = e;
          return null;
        });
        const result = await this._delegate.goForward();
        if (!result)
          return null;
        const response = await waitPromise;
        if (error)
          throw error;
        return response;
      }), this._timeoutSettings.navigationTimeout(options));
    }
    requestGC() {
      return this._delegate.requestGC();
    }
    registerLocatorHandler(selector, noWaitAfter) {
      const uid = ++this._lastLocatorHandlerUid;
      this._locatorHandlers.set(uid, {
        selector,
        noWaitAfter
      });
      return uid;
    }
    resolveLocatorHandler(uid, remove) {
      const handler = this._locatorHandlers.get(uid);
      if (remove)
        this._locatorHandlers.delete(uid);
      if (handler) {
        var _handler$resolved;
        (_handler$resolved = handler.resolved) === null || _handler$resolved === undefined || _handler$resolved.resolve();
        handler.resolved = undefined;
      }
    }
    unregisterLocatorHandler(uid) {
      this._locatorHandlers.delete(uid);
    }
    async performActionPreChecks(progress2) {
      await this._performWaitForNavigationCheck(progress2);
      progress2.throwIfAborted();
      await this._performLocatorHandlersCheckpoint(progress2);
      progress2.throwIfAborted();
      await this._performWaitForNavigationCheck(progress2);
    }
    async _performWaitForNavigationCheck(progress2) {
      var _mainFrame$pendingDoc;
      if (process.env.PLAYWRIGHT_SKIP_NAVIGATION_CHECK)
        return;
      const mainFrame = this._frameManager.mainFrame();
      if (!mainFrame || !mainFrame.pendingDocument())
        return;
      const url = (_mainFrame$pendingDoc = mainFrame.pendingDocument()) === null || _mainFrame$pendingDoc === undefined || (_mainFrame$pendingDoc = _mainFrame$pendingDoc.request) === null || _mainFrame$pendingDoc === undefined ? undefined : _mainFrame$pendingDoc.url();
      const toUrl = url ? `" ${(0, _utils.trimStringWithEllipsis)(url, 200)}"` : "";
      progress2.log(`  waiting for${toUrl} navigation to finish...`);
      await _helper.helper.waitForEvent(progress2, mainFrame, frames.Frame.Events.InternalNavigation, (e) => {
        if (!e.isPublic)
          return false;
        if (!e.error)
          progress2.log(`  navigated to "${(0, _utils.trimStringWithEllipsis)(mainFrame.url(), 200)}"`);
        return true;
      }).promise;
    }
    async _performLocatorHandlersCheckpoint(progress2) {
      if (this._locatorHandlerRunningCounter)
        return;
      for (const [uid, handler] of this._locatorHandlers) {
        if (!handler.resolved) {
          if (await this.mainFrame().isVisibleInternal(handler.selector, {
            strict: true
          })) {
            handler.resolved = new _manualPromise.ManualPromise;
            this.emit(Page.Events.LocatorHandlerTriggered, uid);
          }
        }
        if (handler.resolved) {
          ++this._locatorHandlerRunningCounter;
          progress2.log(`  found ${(0, _utils.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)}, intercepting action to run the handler`);
          const promise = handler.resolved.then(async () => {
            progress2.throwIfAborted();
            if (!handler.noWaitAfter) {
              progress2.log(`  locator handler has finished, waiting for ${(0, _utils.asLocator)(this.attribution.playwright.options.sdkLanguage, handler.selector)} to be hidden`);
              await this.mainFrame().waitForSelectorInternal(progress2, handler.selector, false, {
                state: "hidden"
              });
            } else {
              progress2.log(`  locator handler has finished`);
            }
          });
          await this.openScope.race(promise).finally(() => --this._locatorHandlerRunningCounter);
          progress2.throwIfAborted();
          progress2.log(`  interception handler has finished, continuing`);
        }
      }
    }
    async emulateMedia(options) {
      if (options.media !== undefined)
        this._emulatedMedia.media = options.media;
      if (options.colorScheme !== undefined)
        this._emulatedMedia.colorScheme = options.colorScheme;
      if (options.reducedMotion !== undefined)
        this._emulatedMedia.reducedMotion = options.reducedMotion;
      if (options.forcedColors !== undefined)
        this._emulatedMedia.forcedColors = options.forcedColors;
      await this._delegate.updateEmulateMedia();
    }
    emulatedMedia() {
      var _contextOptions$color, _contextOptions$reduc, _contextOptions$force;
      const contextOptions = this._browserContext._options;
      return {
        media: this._emulatedMedia.media || "no-override",
        colorScheme: this._emulatedMedia.colorScheme !== undefined ? this._emulatedMedia.colorScheme : (_contextOptions$color = contextOptions.colorScheme) !== null && _contextOptions$color !== undefined ? _contextOptions$color : "light",
        reducedMotion: this._emulatedMedia.reducedMotion !== undefined ? this._emulatedMedia.reducedMotion : (_contextOptions$reduc = contextOptions.reducedMotion) !== null && _contextOptions$reduc !== undefined ? _contextOptions$reduc : "no-preference",
        forcedColors: this._emulatedMedia.forcedColors !== undefined ? this._emulatedMedia.forcedColors : (_contextOptions$force = contextOptions.forcedColors) !== null && _contextOptions$force !== undefined ? _contextOptions$force : "none"
      };
    }
    async setViewportSize(viewportSize) {
      this._emulatedSize = {
        viewport: {
          ...viewportSize
        },
        screen: {
          ...viewportSize
        }
      };
      await this._delegate.updateEmulatedViewportSize();
    }
    viewportSize() {
      var _this$emulatedSize;
      return ((_this$emulatedSize = this.emulatedSize()) === null || _this$emulatedSize === undefined ? undefined : _this$emulatedSize.viewport) || null;
    }
    emulatedSize() {
      if (this._emulatedSize)
        return this._emulatedSize;
      const contextOptions = this._browserContext._options;
      return contextOptions.viewport ? {
        viewport: contextOptions.viewport,
        screen: contextOptions.screen || contextOptions.viewport
      } : null;
    }
    async bringToFront() {
      await this._delegate.bringToFront();
    }
    async addInitScript(source) {
      const initScript = new InitScript(source);
      this.initScripts.push(initScript);
      await this._delegate.addInitScript(initScript);
    }
    async _removeInitScripts() {
      this.initScripts = this.initScripts.filter((script) => script.internal);
      await this._delegate.removeNonInternalInitScripts();
    }
    needsRequestInterception() {
      return !!this._clientRequestInterceptor || !!this._serverRequestInterceptor || !!this._browserContext._requestInterceptor;
    }
    async setClientRequestInterceptor(handler) {
      this._clientRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async _setServerRequestInterceptor(handler) {
      this._serverRequestInterceptor = handler;
      await this._delegate.updateRequestInterception();
    }
    async expectScreenshot(metadata, options = {}) {
      const locator = options.locator;
      const rafrafScreenshot = locator ? async (progress2, timeout) => {
        return await locator.frame.rafrafTimeoutScreenshotElementWithProgress(progress2, locator.selector, timeout, options || {});
      } : async (progress2, timeout) => {
        await this.performActionPreChecks(progress2);
        await this.mainFrame().rafrafTimeout(timeout);
        return await this._screenshotter.screenshotPage(progress2, options || {});
      };
      const comparator = (0, _comparators.getComparator)("image/png");
      const controller = new _progress.ProgressController(metadata, this);
      if (!options.expected && options.isNot)
        return {
          errorMessage: '"not" matcher requires expected result'
        };
      try {
        const format = (0, _screenshotter.validateScreenshotOptions)(options || {});
        if (format !== "png")
          throw new Error("Only PNG screenshots are supported");
      } catch (error) {
        return {
          errorMessage: error.message
        };
      }
      let intermediateResult = undefined;
      const areEqualScreenshots = (actual, expected, previous) => {
        const comparatorResult = actual && expected ? comparator(actual, expected, options) : undefined;
        if (comparatorResult !== undefined && !!comparatorResult === !!options.isNot)
          return true;
        if (comparatorResult)
          intermediateResult = {
            errorMessage: comparatorResult.errorMessage,
            diff: comparatorResult.diff,
            actual,
            previous
          };
        return false;
      };
      const callTimeout = this._timeoutSettings.timeout(options);
      return controller.run(async (progress2) => {
        let actual;
        let previous;
        const pollIntervals = [0, 100, 250, 500];
        progress2.log(`${metadata.apiName}${callTimeout ? ` with timeout ${callTimeout}ms` : ""}`);
        if (options.expected)
          progress2.log(`  verifying given screenshot expectation`);
        else
          progress2.log(`  generating new stable screenshot expectation`);
        let isFirstIteration = true;
        while (true) {
          var _pollIntervals$shift;
          progress2.throwIfAborted();
          if (this.isClosed())
            throw new Error("The page has closed");
          const screenshotTimeout = (_pollIntervals$shift = pollIntervals.shift()) !== null && _pollIntervals$shift !== undefined ? _pollIntervals$shift : 1000;
          if (screenshotTimeout)
            progress2.log(`waiting ${screenshotTimeout}ms before taking screenshot`);
          previous = actual;
          actual = await rafrafScreenshot(progress2, screenshotTimeout).catch((e) => {
            progress2.log(`failed to take screenshot - ` + e.message);
            return;
          });
          if (!actual)
            continue;
          const expectation = options.expected && isFirstIteration ? options.expected : previous;
          if (areEqualScreenshots(actual, expectation, previous))
            break;
          if (intermediateResult)
            progress2.log(intermediateResult.errorMessage);
          isFirstIteration = false;
        }
        if (!isFirstIteration)
          progress2.log(`captured a stable screenshot`);
        if (!options.expected)
          return {
            actual
          };
        if (isFirstIteration) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        if (areEqualScreenshots(actual, options.expected, undefined)) {
          progress2.log(`screenshot matched expectation`);
          return {};
        }
        throw new Error(intermediateResult.errorMessage);
      }, callTimeout).catch((e) => {
        var _intermediateResult;
        if (js.isJavaScriptErrorInEvaluate(e) || (0, _selectorParser.isInvalidSelectorError)(e))
          throw e;
        let errorMessage = e.message;
        if (e instanceof _errors.TimeoutError && (_intermediateResult = intermediateResult) !== null && _intermediateResult !== undefined && _intermediateResult.previous)
          errorMessage = `Failed to take two consecutive stable screenshots.`;
        return {
          log: (0, _utils.compressCallLog)(e.message ? [...metadata.log, e.message] : metadata.log),
          ...intermediateResult,
          errorMessage,
          timedOut: e instanceof _errors.TimeoutError
        };
      });
    }
    async screenshot(metadata, options = {}) {
      const controller = new _progress.ProgressController(metadata, this);
      return controller.run((progress2) => this._screenshotter.screenshotPage(progress2, options), this._timeoutSettings.timeout(options));
    }
    async close(metadata, options = {}) {
      if (this._closedState === "closed")
        return;
      if (options.reason)
        this._closeReason = options.reason;
      const runBeforeUnload = !!options.runBeforeUnload;
      if (this._closedState !== "closing") {
        this._closedState = "closing";
        await this._delegate.closePage(runBeforeUnload).catch((e) => _debugLogger.debugLogger.log("error", e));
      }
      if (!runBeforeUnload)
        await this._closedPromise;
      if (this._ownedContext)
        await this._ownedContext.close(options);
    }
    _setIsError(error) {
      this._pageIsError = error;
      this._frameManager.createDummyMainFrameIfNeeded();
    }
    isClosed() {
      return this._closedState === "closed";
    }
    hasCrashed() {
      return this._crashed;
    }
    isClosedOrClosingOrCrashed() {
      return this._closedState !== "open" || this._crashed;
    }
    _addWorker(workerId, worker) {
      this._workers.set(workerId, worker);
      this.emit(Page.Events.Worker, worker);
    }
    _removeWorker(workerId) {
      const worker = this._workers.get(workerId);
      if (!worker)
        return;
      worker.didClose();
      this._workers.delete(workerId);
    }
    _clearWorkers() {
      for (const [workerId, worker] of this._workers) {
        worker.didClose();
        this._workers.delete(workerId);
      }
    }
    async setFileChooserIntercepted(enabled) {
      this._interceptFileChooser = enabled;
      await this._delegate.updateFileChooserInterception();
    }
    fileChooserIntercepted() {
      return this._interceptFileChooser;
    }
    frameNavigatedToNewDocument(frame) {
      this.emit(Page.Events.InternalFrameNavigatedToNewDocument, frame);
      const origin = frame.origin();
      if (origin)
        this._browserContext.addVisitedOrigin(origin);
    }
    allInitScripts() {
      const bindings = [...this._browserContext._pageBindings.values(), ...this._pageBindings.values()];
      return [...bindings.map((binding) => binding.initScript), ...this._browserContext.initScripts, ...this.initScripts];
    }
    getBinding(name) {
      return this._pageBindings.get(name) || this._browserContext._pageBindings.get(name);
    }
    setScreencastOptions(options) {
      this._delegate.setScreencastOptions(options).catch((e) => _debugLogger.debugLogger.log("error", e));
      this._frameThrottler.setThrottlingEnabled(!!options);
    }
    throttleScreencastFrameAck(ack) {
      this._frameThrottler.ack(ack);
    }
    temporarilyDisableTracingScreencastThrottling() {
      this._frameThrottler.recharge();
    }
    async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
      await Promise.all(this.frames().map(async (frame) => {
        try {
          await frame.nonStallingEvaluateInExistingContext(expression, world);
        } catch (e) {
          if (options.throwOnJSErrors && js.isJavaScriptErrorInEvaluate(e))
            throw e;
        }
      }));
    }
    async hideHighlight() {
      await Promise.all(this.frames().map((frame) => frame.hideHighlight().catch(() => {
      })));
    }
    markAsServerSideOnly() {
      this._isServerSideOnly = true;
    }
  }
  exports.Page = Page;
  Page.Events = {
    Close: "close",
    Crash: "crash",
    Download: "download",
    FileChooser: "filechooser",
    FrameAttached: "frameattached",
    FrameDetached: "framedetached",
    InternalFrameNavigatedToNewDocument: "internalframenavigatedtonewdocument",
    LocatorHandlerTriggered: "locatorhandlertriggered",
    ScreencastFrame: "screencastframe",
    Video: "video",
    WebSocket: "websocket",
    Worker: "worker"
  };

  class Worker extends _instrumentation.SdkObject {
    constructor(parent, url) {
      super(parent, "worker");
      this._url = undefined;
      this._executionContextPromise = undefined;
      this._executionContextCallback = undefined;
      this._existingExecutionContext = null;
      this.openScope = new _utils.LongStandingScope;
      this._url = url;
      this._executionContextCallback = () => {
      };
      this._executionContextPromise = new Promise((x) => this._executionContextCallback = x);
    }
    _createExecutionContext(delegate) {
      this._existingExecutionContext = new js.ExecutionContext(this, delegate, "worker");
      this._executionContextCallback(this._existingExecutionContext);
    }
    url() {
      return this._url;
    }
    didClose() {
      if (this._existingExecutionContext)
        this._existingExecutionContext.contextDestroyed("Worker was closed");
      this.emit(Worker.Events.Close, this);
      this.openScope.close(new Error("Worker closed"));
    }
    async evaluateExpression(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: true,
        isFunction
      }, arg);
    }
    async evaluateExpressionHandle(expression, isFunction, arg) {
      return js.evaluateExpression(await this._executionContextPromise, expression, {
        returnByValue: false,
        isFunction
      }, arg);
    }
  }
  exports.Worker = Worker;
  Worker.Events = {
    Close: "close"
  };

  class PageBinding {
    constructor(name, playwrightFunction, needsHandle) {
      this.name = undefined;
      this.playwrightFunction = undefined;
      this.initScript = undefined;
      this.needsHandle = undefined;
      this.internal = undefined;
      this.name = name;
      this.playwrightFunction = playwrightFunction;
      this.initScript = new InitScript(`(${addPageBinding.toString()})(${JSON.stringify(PageBinding.kPlaywrightBinding)}, ${JSON.stringify(name)}, ${needsHandle}, (${_utilityScriptSerializers.source})())`, true);
      this.needsHandle = needsHandle;
      this.internal = name.startsWith("__pw");
    }
    static async dispatch(page, payload, context) {
      const {
        name,
        seq,
        serializedArgs
      } = JSON.parse(payload);
      try {
        (0, _utils.assert)(context.world);
        const binding = page.getBinding(name);
        if (!binding)
          throw new Error(`Function "${name}" is not exposed`);
        let result;
        if (binding.needsHandle) {
          const handle = await context.evaluateHandle(takeHandle, {
            name,
            seq
          }).catch((e) => null);
          result = await binding.playwrightFunction({
            frame: context.frame,
            page,
            context: page._browserContext
          }, handle);
        } else {
          if (!Array.isArray(serializedArgs))
            throw new Error(`serializedArgs is not an array. This can happen when Array.prototype.toJSON is defined incorrectly`);
          const args = serializedArgs.map((a) => (0, _utilityScriptSerializers.parseEvaluationResultValue)(a));
          result = await binding.playwrightFunction({
            frame: context.frame,
            page,
            context: page._browserContext
          }, ...args);
        }
        context.evaluate(deliverResult, {
          name,
          seq,
          result
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      } catch (error) {
        context.evaluate(deliverResult, {
          name,
          seq,
          error
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      }
      function takeHandle(arg) {
        const handle = globalThis[arg.name]["handles"].get(arg.seq);
        globalThis[arg.name]["handles"].delete(arg.seq);
        return handle;
      }
      function deliverResult(arg) {
        const callbacks = globalThis[arg.name]["callbacks"];
        if ("error" in arg)
          callbacks.get(arg.seq).reject(arg.error);
        else
          callbacks.get(arg.seq).resolve(arg.result);
        callbacks.delete(arg.seq);
      }
    }
  }
  exports.PageBinding = PageBinding;
  PageBinding.kPlaywrightBinding = "__playwright__binding__";
  function addPageBinding(playwrightBinding, bindingName, needsHandle, utilityScriptSerializers) {
    const binding = globalThis[playwrightBinding];
    globalThis[bindingName] = (...args) => {
      const me = globalThis[bindingName];
      if (needsHandle && args.slice(1).some((arg) => arg !== undefined))
        throw new Error(`exposeBindingHandle supports a single argument, ${args.length} received`);
      let callbacks = me["callbacks"];
      if (!callbacks) {
        callbacks = new Map;
        me["callbacks"] = callbacks;
      }
      const seq = (me["lastSeq"] || 0) + 1;
      me["lastSeq"] = seq;
      let handles = me["handles"];
      if (!handles) {
        handles = new Map;
        me["handles"] = handles;
      }
      const promise = new Promise((resolve, reject) => callbacks.set(seq, {
        resolve,
        reject
      }));
      let payload;
      if (needsHandle) {
        handles.set(seq, args[0]);
        payload = {
          name: bindingName,
          seq
        };
      } else {
        const serializedArgs = [];
        for (let i = 0;i < args.length; i++) {
          serializedArgs[i] = utilityScriptSerializers.serializeAsCallArgument(args[i], (v) => {
            return {
              fallThrough: v
            };
          });
        }
        payload = {
          name: bindingName,
          seq,
          serializedArgs
        };
      }
      binding(JSON.stringify(payload));
      return promise;
    };
    globalThis[bindingName].__installed = true;
  }

  class InitScript {
    constructor(source, internal) {
      this.source = undefined;
      this.internal = undefined;
      const guid = (0, _utils.createGuid)();
      this.source = `(() => {
      globalThis.__pwInitScripts = globalThis.__pwInitScripts || {};
      const hasInitScript = globalThis.__pwInitScripts[${JSON.stringify(guid)}];
      if (hasInitScript)
        return;
      globalThis.__pwInitScripts[${JSON.stringify(guid)}] = true;
      ${source}
    })();`;
      this.internal = !!internal;
    }
  }
  exports.InitScript = InitScript;

  class FrameThrottler {
    constructor(nonThrottledFrames, defaultInterval, throttlingInterval) {
      this._acks = [];
      this._defaultInterval = undefined;
      this._throttlingInterval = undefined;
      this._nonThrottledFrames = undefined;
      this._budget = undefined;
      this._throttlingEnabled = false;
      this._timeoutId = undefined;
      this._nonThrottledFrames = nonThrottledFrames;
      this._budget = nonThrottledFrames;
      this._defaultInterval = defaultInterval;
      this._throttlingInterval = throttlingInterval;
      this._tick();
    }
    dispose() {
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._timeoutId = undefined;
      }
    }
    setThrottlingEnabled(enabled) {
      this._throttlingEnabled = enabled;
    }
    recharge() {
      for (const ack of this._acks)
        ack();
      this._acks = [];
      this._budget = this._nonThrottledFrames;
      if (this._timeoutId) {
        clearTimeout(this._timeoutId);
        this._tick();
      }
    }
    ack(ack) {
      if (!this._timeoutId) {
        ack();
        return;
      }
      this._acks.push(ack);
    }
    _tick() {
      const ack = this._acks.shift();
      if (ack) {
        --this._budget;
        ack();
      }
      if (this._throttlingEnabled && this._budget <= 0) {
        this._timeoutId = setTimeout(() => this._tick(), this._throttlingInterval);
      } else {
        this._timeoutId = setTimeout(() => this._tick(), this._defaultInterval);
      }
    }
  }
});

// node_modules/playwright-core/lib/protocol/debug.js
var require_debug2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.slowMoActions = exports.pausesBeforeInputActions = exports.commandsWithTracingSnapshots = undefined;
  var slowMoActions = exports.slowMoActions = new Set(["Page.goBack", "Page.goForward", "Page.reload", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.fill", "Frame.focus", "Frame.goto", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
  var commandsWithTracingSnapshots = exports.commandsWithTracingSnapshots = new Set(["EventTarget.waitForEventInfo", "BrowserContext.waitForEventInfo", "Page.waitForEventInfo", "WebSocket.waitForEventInfo", "ElectronApplication.waitForEventInfo", "AndroidDevice.waitForEventInfo", "Page.emulateMedia", "Page.goBack", "Page.goForward", "Page.reload", "Page.expectScreenshot", "Page.screenshot", "Page.setViewportSize", "Page.keyboardDown", "Page.keyboardUp", "Page.keyboardInsertText", "Page.keyboardType", "Page.keyboardPress", "Page.mouseMove", "Page.mouseDown", "Page.mouseUp", "Page.mouseClick", "Page.mouseWheel", "Page.touchscreenTap", "Frame.evalOnSelector", "Frame.evalOnSelectorAll", "Frame.addScriptTag", "Frame.addStyleTag", "Frame.blur", "Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.dispatchEvent", "Frame.evaluateExpression", "Frame.evaluateExpressionHandle", "Frame.fill", "Frame.focus", "Frame.getAttribute", "Frame.goto", "Frame.hover", "Frame.innerHTML", "Frame.innerText", "Frame.inputValue", "Frame.isChecked", "Frame.isDisabled", "Frame.isEnabled", "Frame.isHidden", "Frame.isVisible", "Frame.isEditable", "Frame.press", "Frame.selectOption", "Frame.setContent", "Frame.setInputFiles", "Frame.tap", "Frame.textContent", "Frame.type", "Frame.uncheck", "Frame.waitForTimeout", "Frame.waitForFunction", "Frame.waitForSelector", "Frame.expect", "JSHandle.evaluateExpression", "ElementHandle.evaluateExpression", "JSHandle.evaluateExpressionHandle", "ElementHandle.evaluateExpressionHandle", "ElementHandle.evalOnSelector", "ElementHandle.evalOnSelectorAll", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.dispatchEvent", "ElementHandle.fill", "ElementHandle.focus", "ElementHandle.hover", "ElementHandle.innerHTML", "ElementHandle.innerText", "ElementHandle.inputValue", "ElementHandle.isChecked", "ElementHandle.isDisabled", "ElementHandle.isEditable", "ElementHandle.isEnabled", "ElementHandle.isHidden", "ElementHandle.isVisible", "ElementHandle.press", "ElementHandle.screenshot", "ElementHandle.scrollIntoViewIfNeeded", "ElementHandle.selectOption", "ElementHandle.selectText", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.textContent", "ElementHandle.type", "ElementHandle.uncheck", "ElementHandle.waitForElementState", "ElementHandle.waitForSelector"]);
  var pausesBeforeInputActions = exports.pausesBeforeInputActions = new Set(["Frame.check", "Frame.click", "Frame.dragAndDrop", "Frame.dblclick", "Frame.fill", "Frame.hover", "Frame.press", "Frame.selectOption", "Frame.setInputFiles", "Frame.tap", "Frame.type", "Frame.uncheck", "ElementHandle.check", "ElementHandle.click", "ElementHandle.dblclick", "ElementHandle.fill", "ElementHandle.hover", "ElementHandle.press", "ElementHandle.selectOption", "ElementHandle.setInputFiles", "ElementHandle.tap", "ElementHandle.type", "ElementHandle.uncheck"]);
});

// node_modules/playwright-core/lib/server/debugger.js
var require_debugger = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Debugger = undefined;
  exports.shouldSlowMo = shouldSlowMo;
  var _events = __require("events");
  var _utils = require_utils();
  var _browserContext = require_browserContext();
  var _debug = require_debug2();
  var symbol = Symbol("Debugger");

  class Debugger extends _events.EventEmitter {
    constructor(context) {
      super();
      this._pauseOnNextStatement = false;
      this._pausedCallsMetadata = new Map;
      this._enabled = undefined;
      this._context = undefined;
      this._muted = false;
      this._slowMo = undefined;
      this._context = context;
      this._context[symbol] = this;
      this._enabled = (0, _utils.debugMode)() === "inspector";
      if (this._enabled)
        this.pauseOnNextStatement();
      context.instrumentation.addListener(this, context);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        this._context.instrumentation.removeListener(this);
      });
      this._slowMo = this._context._browser.options.slowMo;
    }
    async setMuted(muted) {
      this._muted = muted;
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._muted)
        return;
      if (shouldPauseOnCall(sdkObject, metadata) || this._pauseOnNextStatement && shouldPauseBeforeStep(metadata))
        await this.pause(sdkObject, metadata);
    }
    async _doSlowMo() {
      await new Promise((f) => setTimeout(f, this._slowMo));
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._slowMo && shouldSlowMo(metadata))
        await this._doSlowMo();
    }
    async onBeforeInputAction(sdkObject, metadata) {
      if (this._muted)
        return;
      if (this._enabled && this._pauseOnNextStatement)
        await this.pause(sdkObject, metadata);
    }
    async pause(sdkObject, metadata) {
      if (this._muted)
        return;
      this._enabled = true;
      metadata.pauseStartTime = (0, _utils.monotonicTime)();
      const result = new Promise((resolve) => {
        this._pausedCallsMetadata.set(metadata, {
          resolve,
          sdkObject
        });
      });
      this.emit(Debugger.Events.PausedStateChanged);
      return result;
    }
    resume(step) {
      if (!this.isPaused())
        return;
      this._pauseOnNextStatement = step;
      const endTime = (0, _utils.monotonicTime)();
      for (const [metadata, {
        resolve
      }] of this._pausedCallsMetadata) {
        metadata.pauseEndTime = endTime;
        resolve();
      }
      this._pausedCallsMetadata.clear();
      this.emit(Debugger.Events.PausedStateChanged);
    }
    pauseOnNextStatement() {
      this._pauseOnNextStatement = true;
    }
    isPaused(metadata) {
      if (metadata)
        return this._pausedCallsMetadata.has(metadata);
      return !!this._pausedCallsMetadata.size;
    }
    pausedDetails() {
      const result = [];
      for (const [metadata, {
        sdkObject
      }] of this._pausedCallsMetadata)
        result.push({
          metadata,
          sdkObject
        });
      return result;
    }
  }
  exports.Debugger = Debugger;
  Debugger.Events = {
    PausedStateChanged: "pausedstatechanged"
  };
  function shouldPauseOnCall(sdkObject, metadata) {
    var _sdkObject$attributio;
    if (sdkObject.attribution.playwright.options.isServer)
      return false;
    if (!((_sdkObject$attributio = sdkObject.attribution.browser) !== null && _sdkObject$attributio !== undefined && _sdkObject$attributio.options.headful) && !(0, _utils.isUnderTest)())
      return false;
    return metadata.method === "pause";
  }
  function shouldPauseBeforeStep(metadata) {
    if (!metadata.apiName)
      return false;
    if (metadata.method === "close")
      return true;
    if (metadata.method === "waitForSelector" || metadata.method === "waitForEventInfo")
      return false;
    const step = metadata.type + "." + metadata.method;
    return _debug.commandsWithTracingSnapshots.has(step) && !_debug.pausesBeforeInputActions.has(metadata.type + "." + metadata.method);
  }
  function shouldSlowMo(metadata) {
    return _debug.slowMoActions.has(metadata.type + "." + metadata.method);
  }
});

// node_modules/playwright-core/lib/server/artifact.js
var require_artifact = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Artifact = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _utils = require_utils();
  var _manualPromise = require_manualPromise();
  var _instrumentation = require_instrumentation();
  var _errors = require_errors();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class Artifact extends _instrumentation.SdkObject {
    constructor(parent, localPath, unaccessibleErrorMessage, cancelCallback) {
      super(parent, "artifact");
      this._localPath = undefined;
      this._unaccessibleErrorMessage = undefined;
      this._cancelCallback = undefined;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._saveCallbacks = [];
      this._finished = false;
      this._deleted = false;
      this._failureError = undefined;
      this._localPath = localPath;
      this._unaccessibleErrorMessage = unaccessibleErrorMessage;
      this._cancelCallback = cancelCallback;
    }
    finishedPromise() {
      return this._finishedPromise;
    }
    localPath() {
      return this._localPath;
    }
    async localPathAfterFinished() {
      if (this._unaccessibleErrorMessage)
        throw new Error(this._unaccessibleErrorMessage);
      await this._finishedPromise;
      if (this._failureError)
        throw this._failureError;
      return this._localPath;
    }
    saveAs(saveCallback) {
      if (this._unaccessibleErrorMessage)
        throw new Error(this._unaccessibleErrorMessage);
      if (this._deleted)
        throw new Error(`File already deleted. Save before deleting.`);
      if (this._failureError)
        throw this._failureError;
      if (this._finished) {
        saveCallback(this._localPath).catch(() => {
        });
        return;
      }
      this._saveCallbacks.push(saveCallback);
    }
    async failureError() {
      var _this$_failureError;
      if (this._unaccessibleErrorMessage)
        return this._unaccessibleErrorMessage;
      await this._finishedPromise;
      return ((_this$_failureError = this._failureError) === null || _this$_failureError === undefined ? undefined : _this$_failureError.message) || null;
    }
    async cancel() {
      (0, _utils.assert)(this._cancelCallback !== undefined);
      return this._cancelCallback();
    }
    async delete() {
      if (this._unaccessibleErrorMessage)
        return;
      const fileName = await this.localPathAfterFinished();
      if (this._deleted)
        return;
      this._deleted = true;
      if (fileName)
        await _fs.default.promises.unlink(fileName).catch((e) => {
        });
    }
    async deleteOnContextClose() {
      if (this._deleted)
        return;
      this._deleted = true;
      if (!this._unaccessibleErrorMessage)
        await _fs.default.promises.unlink(this._localPath).catch((e) => {
        });
      await this.reportFinished(new _errors.TargetClosedError);
    }
    async reportFinished(error) {
      if (this._finished)
        return;
      this._finished = true;
      this._failureError = error;
      if (error) {
        for (const callback of this._saveCallbacks)
          await callback("", error);
      } else {
        for (const callback of this._saveCallbacks)
          await callback(this._localPath);
      }
      this._saveCallbacks = [];
      this._finishedPromise.resolve();
    }
  }
  exports.Artifact = Artifact;
});

// node_modules/playwright-core/lib/server/har/harTracer.js
var require_harTracer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarTracer = undefined;
  var _browserContext = require_browserContext();
  var _fetch = require_fetch();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils();
  var _eventsHelper = require_eventsHelper();
  var _utilsBundle = require_utilsBundle();
  var _manualPromise = require_manualPromise();
  var _frames = require_frames();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var FALLBACK_HTTP_VERSION = "HTTP/1.1";

  class HarTracer {
    constructor(context, page, delegate, options) {
      this._context = undefined;
      this._barrierPromises = new Set;
      this._delegate = undefined;
      this._options = undefined;
      this._pageEntries = new Map;
      this._eventListeners = [];
      this._started = false;
      this._entrySymbol = undefined;
      this._baseURL = undefined;
      this._page = undefined;
      this._context = context;
      this._page = page;
      this._delegate = delegate;
      this._options = options;
      if (options.slimMode) {
        options.omitSecurityDetails = true;
        options.omitCookies = true;
        options.omitTiming = true;
        options.omitServerIP = true;
        options.omitSizes = true;
        options.omitPages = true;
      }
      this._entrySymbol = Symbol("requestHarEntry");
      this._baseURL = context instanceof _fetch.APIRequestContext ? context._defaultOptions().baseURL : context._options.baseURL;
    }
    start(options) {
      if (this._started)
        return;
      this._options.omitScripts = options.omitScripts;
      this._started = true;
      const apiRequest = this._context instanceof _fetch.APIRequestContext ? this._context : this._context.fetchRequest;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.Request, (event) => this._onAPIRequest(event)), _eventsHelper.eventsHelper.addEventListener(apiRequest, _fetch.APIRequestContext.Events.RequestFinished, (event) => this._onAPIRequestFinished(event))];
      if (this._context instanceof _browserContext.BrowserContext) {
        this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, (page) => this._createPageEntryIfNeeded(page)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Request, (request) => this._onRequest(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFinished, ({
          request,
          response
        }) => this._onRequestFinished(request, response).catch(() => {
        })), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFailed, (request) => this._onRequestFailed(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Response, (response) => this._onResponse(response)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestAborted, (request) => this._onRequestAborted(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestFulfilled, (request) => this._onRequestFulfilled(request)), _eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.RequestContinued, (request) => this._onRequestContinued(request)));
      }
    }
    _shouldIncludeEntryWithUrl(urlString) {
      return !this._options.urlFilter || (0, _utils.urlMatches)(this._baseURL, urlString, this._options.urlFilter);
    }
    _entryForRequest(request) {
      return request[this._entrySymbol];
    }
    _createPageEntryIfNeeded(page) {
      if (!page)
        return;
      if (this._options.omitPages)
        return;
      if (this._page && page !== this._page)
        return;
      let pageEntry = this._pageEntries.get(page);
      if (!pageEntry) {
        const date = new Date;
        pageEntry = {
          startedDateTime: date.toISOString(),
          id: page.guid,
          title: "",
          pageTimings: this._options.omitTiming ? {} : {
            onContentLoad: -1,
            onLoad: -1
          }
        };
        pageEntry[startedDateSymbol] = date;
        page.mainFrame().on(_frames.Frame.Events.AddLifecycle, (event) => {
          if (event === "load")
            this._onLoad(page, pageEntry);
          if (event === "domcontentloaded")
            this._onDOMContentLoaded(page, pageEntry);
        });
        this._pageEntries.set(page, pageEntry);
      }
      return pageEntry;
    }
    _onDOMContentLoaded(page, pageEntry) {
      const promise = page.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          domContentLoaded: performance.timing.domContentLoadedEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming)
          pageEntry.pageTimings.onContentLoad = result.domContentLoaded;
      }).catch(() => {
      });
      this._addBarrier(page, promise);
    }
    _onLoad(page, pageEntry) {
      const promise = page.mainFrame().evaluateExpression(String(() => {
        return {
          title: document.title,
          loaded: performance.timing.loadEventStart
        };
      }), {
        isFunction: true,
        world: "utility"
      }).then((result) => {
        pageEntry.title = result.title;
        if (!this._options.omitTiming)
          pageEntry.pageTimings.onLoad = result.loaded;
      }).catch(() => {
      });
      this._addBarrier(page, promise);
    }
    _addBarrier(target, promise) {
      if (!target)
        return null;
      if (!this._options.waitForContentOnStop)
        return;
      const race = target.openScope.safeRace(promise);
      this._barrierPromises.add(race);
      race.then(() => this._barrierPromises.delete(race));
    }
    _onAPIRequest(event) {
      var _event$postData;
      if (!this._shouldIncludeEntryWithUrl(event.url.toString()))
        return;
      const harEntry = createHarEntry(event.method, event.url, undefined, this._options);
      harEntry._apiRequest = true;
      if (!this._options.omitCookies)
        harEntry.request.cookies = event.cookies;
      harEntry.request.headers = Object.entries(event.headers).map(([name, value]) => ({
        name,
        value
      }));
      harEntry.request.postData = this._postDataForBuffer(event.postData || null, event.headers["content-type"], this._options.content);
      if (!this._options.omitSizes)
        harEntry.request.bodySize = ((_event$postData = event.postData) === null || _event$postData === undefined ? undefined : _event$postData.length) || 0;
      event[this._entrySymbol] = harEntry;
      if (this._started)
        this._delegate.onEntryStarted(harEntry);
    }
    _onAPIRequestFinished(event) {
      var _event$body$length, _event$body;
      const harEntry = this._entryForRequest(event.requestEvent);
      if (!harEntry)
        return;
      harEntry.response.status = event.statusCode;
      harEntry.response.statusText = event.statusMessage;
      harEntry.response.httpVersion = event.httpVersion;
      harEntry.response.redirectURL = event.headers.location || "";
      if (!this._options.omitServerIP) {
        harEntry.serverIPAddress = event.serverIPAddress;
        harEntry._serverPort = event.serverPort;
      }
      if (!this._options.omitTiming) {
        harEntry.timings = event.timings;
        this._computeHarEntryTotalTime(harEntry);
      }
      if (!this._options.omitSecurityDetails)
        harEntry._securityDetails = event.securityDetails;
      for (let i = 0;i < event.rawHeaders.length; i += 2) {
        harEntry.response.headers.push({
          name: event.rawHeaders[i],
          value: event.rawHeaders[i + 1]
        });
      }
      harEntry.response.cookies = this._options.omitCookies ? [] : event.cookies.map((c) => {
        return {
          ...c,
          expires: c.expires === -1 ? undefined : safeDateToISOString(c.expires)
        };
      });
      const content = harEntry.response.content;
      const contentType = event.headers["content-type"];
      if (contentType)
        content.mimeType = contentType;
      this._storeResponseContent(event.body, content, "other");
      if (!this._options.omitSizes)
        harEntry.response.bodySize = (_event$body$length = (_event$body = event.body) === null || _event$body === undefined ? undefined : _event$body.length) !== null && _event$body$length !== undefined ? _event$body$length : 0;
      if (this._started)
        this._delegate.onEntryFinished(harEntry);
    }
    _onRequest(request) {
      var _request$frame, _request$frame2;
      if (!this._shouldIncludeEntryWithUrl(request.url()))
        return;
      const page = (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page;
      if (this._page && page !== this._page)
        return;
      const url = network.parsedURL(request.url());
      if (!url)
        return;
      const pageEntry = this._createPageEntryIfNeeded(page);
      const harEntry = createHarEntry(request.method(), url, (_request$frame2 = request.frame()) === null || _request$frame2 === undefined ? undefined : _request$frame2.guid, this._options);
      if (pageEntry)
        harEntry.pageref = pageEntry.id;
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      if (!this._options.omitSizes)
        harEntry.request.bodySize = request.bodySize();
      if (request.redirectedFrom()) {
        const fromEntry = this._entryForRequest(request.redirectedFrom());
        if (fromEntry)
          fromEntry.response.redirectURL = request.url();
      }
      request[this._entrySymbol] = harEntry;
      (0, _utils.assert)(this._started);
      this._delegate.onEntryStarted(harEntry);
    }
    _recordRequestHeadersAndCookies(harEntry, headers) {
      if (!this._options.omitCookies) {
        harEntry.request.cookies = [];
        for (const header of headers.filter((header2) => header2.name.toLowerCase() === "cookie"))
          harEntry.request.cookies.push(...header.value.split(";").map(parseCookie));
      }
      harEntry.request.headers = headers;
    }
    _recordRequestOverrides(harEntry, request) {
      if (!request._hasOverrides() || !this._options.recordRequestOverrides)
        return;
      harEntry.request.method = request.method();
      harEntry.request.url = request.url();
      harEntry.request.postData = this._postDataForRequest(request, this._options.content);
      this._recordRequestHeadersAndCookies(harEntry, request.headers());
    }
    async _onRequestFinished(request, response) {
      var _request$frame3;
      if (!response)
        return;
      const harEntry = this._entryForRequest(request);
      if (!harEntry)
        return;
      const page = (_request$frame3 = request.frame()) === null || _request$frame3 === undefined ? undefined : _request$frame3._page;
      if (!this._options.omitServerIP) {
        this._addBarrier(page || request.serviceWorker(), response.serverAddr().then((server) => {
          if (server !== null && server !== undefined && server.ipAddress)
            harEntry.serverIPAddress = server.ipAddress;
          if (server !== null && server !== undefined && server.port)
            harEntry._serverPort = server.port;
        }));
      }
      if (!this._options.omitSecurityDetails) {
        this._addBarrier(page || request.serviceWorker(), response.securityDetails().then((details) => {
          if (details)
            harEntry._securityDetails = details;
        }));
      }
      const httpVersion = response.httpVersion();
      harEntry.request.httpVersion = httpVersion;
      harEntry.response.httpVersion = httpVersion;
      const compressionCalculationBarrier = this._options.omitSizes ? undefined : {
        _encodedBodySize: -1,
        _decodedBodySize: -1,
        barrier: new _manualPromise.ManualPromise,
        _check: function() {
          if (this._encodedBodySize !== -1 && this._decodedBodySize !== -1) {
            harEntry.response.content.compression = Math.max(0, this._decodedBodySize - this._encodedBodySize);
            this.barrier.resolve();
          }
        },
        setEncodedBodySize: function(encodedBodySize) {
          this._encodedBodySize = encodedBodySize;
          this._check();
        },
        setDecodedBodySize: function(decodedBodySize) {
          this._decodedBodySize = decodedBodySize;
          this._check();
        }
      };
      if (compressionCalculationBarrier)
        this._addBarrier(page || request.serviceWorker(), compressionCalculationBarrier.barrier);
      const promise = response.body().then((buffer) => {
        if (this._options.omitScripts && request.resourceType() === "script") {
          compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(0);
          return;
        }
        const content = harEntry.response.content;
        compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(buffer.length);
        this._storeResponseContent(buffer, content, request.resourceType());
      }).catch(() => {
        compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setDecodedBodySize(0);
      }).then(() => {
        if (this._started)
          this._delegate.onEntryFinished(harEntry);
      });
      this._addBarrier(page || request.serviceWorker(), promise);
      const timing = response.timing();
      harEntry.timings.receive = response.request()._responseEndTiming !== -1 ? _helper.helper.millisToRoundishMillis(response.request()._responseEndTiming - timing.responseStart) : -1;
      this._computeHarEntryTotalTime(harEntry);
      if (!this._options.omitSizes) {
        this._addBarrier(page || request.serviceWorker(), response.sizes().then((sizes) => {
          harEntry.response.bodySize = sizes.responseBodySize;
          harEntry.response.headersSize = sizes.responseHeadersSize;
          harEntry.response._transferSize = sizes.transferSize;
          harEntry.request.headersSize = sizes.requestHeadersSize;
          compressionCalculationBarrier === null || compressionCalculationBarrier === undefined || compressionCalculationBarrier.setEncodedBodySize(sizes.responseBodySize);
        }));
      }
    }
    async _onRequestFailed(request) {
      const harEntry = this._entryForRequest(request);
      if (!harEntry)
        return;
      if (request._failureText !== null)
        harEntry.response._failureText = request._failureText;
      this._recordRequestOverrides(harEntry, request);
      if (this._started)
        this._delegate.onEntryFinished(harEntry);
    }
    _onRequestAborted(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasAborted = true;
    }
    _onRequestFulfilled(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasFulfilled = true;
    }
    _onRequestContinued(request) {
      const harEntry = this._entryForRequest(request);
      if (harEntry)
        harEntry._wasContinued = true;
    }
    _storeResponseContent(buffer, content, resourceType) {
      if (!buffer) {
        content.size = 0;
        return;
      }
      if (!this._options.omitSizes)
        content.size = buffer.length;
      if (this._options.content === "embed") {
        if ((0, _utils.isTextualMimeType)(content.mimeType) && resourceType !== "font") {
          content.text = buffer.toString();
        } else {
          content.text = buffer.toString("base64");
          content.encoding = "base64";
        }
      } else if (this._options.content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(buffer) + "." + (_utilsBundle.mime.getExtension(content.mimeType) || "dat");
        if (this._options.includeTraceInfo)
          content._sha1 = sha1;
        else
          content._file = sha1;
        if (this._started)
          this._delegate.onContentBlob(sha1, buffer);
      }
    }
    _onResponse(response) {
      var _response$frame;
      const harEntry = this._entryForRequest(response.request());
      if (!harEntry)
        return;
      const page = (_response$frame = response.frame()) === null || _response$frame === undefined ? undefined : _response$frame._page;
      const pageEntry = this._createPageEntryIfNeeded(page);
      const request = response.request();
      harEntry.response = {
        status: response.status(),
        statusText: response.statusText(),
        httpVersion: response.httpVersion(),
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: this._options.omitSizes ? undefined : -1
      };
      if (!this._options.omitTiming) {
        const startDateTime = pageEntry ? pageEntry[startedDateSymbol].valueOf() : 0;
        const timing = response.timing();
        if (pageEntry && startDateTime > timing.startTime)
          pageEntry.startedDateTime = new Date(timing.startTime).toISOString();
        const dns = timing.domainLookupEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.domainLookupEnd - timing.domainLookupStart) : -1;
        const connect = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.connectStart) : -1;
        const ssl = timing.connectEnd !== -1 ? _helper.helper.millisToRoundishMillis(timing.connectEnd - timing.secureConnectionStart) : -1;
        const wait = timing.responseStart !== -1 ? _helper.helper.millisToRoundishMillis(timing.responseStart - timing.requestStart) : -1;
        const receive = -1;
        harEntry.timings = {
          dns,
          connect,
          ssl,
          send: 0,
          wait,
          receive
        };
        this._computeHarEntryTotalTime(harEntry);
      }
      this._recordRequestOverrides(harEntry, request);
      this._addBarrier(page || request.serviceWorker(), request.rawRequestHeaders().then((headers) => {
        this._recordRequestHeadersAndCookies(harEntry, headers);
      }));
      this._recordResponseHeaders(harEntry, response.headers());
      this._addBarrier(page || request.serviceWorker(), response.rawResponseHeaders().then((headers) => {
        this._recordResponseHeaders(harEntry, headers);
      }));
    }
    _recordResponseHeaders(harEntry, headers) {
      if (!this._options.omitCookies) {
        harEntry.response.cookies = headers.filter((header) => header.name.toLowerCase() === "set-cookie").map((header) => parseCookie(header.value));
      }
      harEntry.response.headers = headers;
      const contentType = headers.find((header) => header.name.toLowerCase() === "content-type");
      if (contentType)
        harEntry.response.content.mimeType = contentType.value;
    }
    _computeHarEntryTotalTime(harEntry) {
      harEntry.time = [harEntry.timings.dns, harEntry.timings.connect, harEntry.timings.ssl, harEntry.timings.wait, harEntry.timings.receive].reduce((pre, cur) => (cur || -1) > 0 ? cur + pre : pre, 0);
    }
    async flush() {
      await Promise.all(this._barrierPromises);
    }
    stop() {
      this._started = false;
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._barrierPromises.clear();
      const context = this._context instanceof _browserContext.BrowserContext ? this._context : undefined;
      const log = {
        version: "1.2",
        creator: {
          name: "Playwright",
          version: (0, _utils.getPlaywrightVersion)()
        },
        browser: {
          name: (context === null || context === undefined ? undefined : context._browser.options.name) || "",
          version: (context === null || context === undefined ? undefined : context._browser.version()) || ""
        },
        pages: this._pageEntries.size ? Array.from(this._pageEntries.values()) : undefined,
        entries: []
      };
      if (!this._options.omitTiming) {
        for (const pageEntry of log.pages || []) {
          const startDateTime = pageEntry[startedDateSymbol].valueOf();
          if (typeof pageEntry.pageTimings.onContentLoad === "number" && pageEntry.pageTimings.onContentLoad >= 0)
            pageEntry.pageTimings.onContentLoad -= startDateTime;
          else
            pageEntry.pageTimings.onContentLoad = -1;
          if (typeof pageEntry.pageTimings.onLoad === "number" && pageEntry.pageTimings.onLoad >= 0)
            pageEntry.pageTimings.onLoad -= startDateTime;
          else
            pageEntry.pageTimings.onLoad = -1;
        }
      }
      this._pageEntries.clear();
      return log;
    }
    _postDataForRequest(request, content) {
      const postData = request.postDataBuffer();
      if (!postData)
        return;
      const contentType = request.headerValue("content-type");
      return this._postDataForBuffer(postData, contentType, content);
    }
    _postDataForBuffer(postData, contentType, content) {
      var _contentType;
      if (!postData)
        return;
      (_contentType = contentType) !== null && _contentType !== undefined || (contentType = "application/octet-stream");
      const result = {
        mimeType: contentType,
        text: "",
        params: []
      };
      if (content === "embed" && contentType !== "application/octet-stream")
        result.text = postData.toString();
      if (content === "attach") {
        const sha1 = (0, _utils.calculateSha1)(postData) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
        if (this._options.includeTraceInfo)
          result._sha1 = sha1;
        else
          result._file = sha1;
        this._delegate.onContentBlob(sha1, postData);
      }
      if (contentType === "application/x-www-form-urlencoded") {
        const parsed = new URLSearchParams(postData.toString());
        for (const [name, value] of parsed.entries())
          result.params.push({
            name,
            value
          });
      }
      return result;
    }
  }
  exports.HarTracer = HarTracer;
  function createHarEntry(method, url, frameref, options) {
    const harEntry = {
      _frameref: options.includeTraceInfo ? frameref : undefined,
      _monotonicTime: options.includeTraceInfo ? (0, _utils.monotonicTime)() : undefined,
      startedDateTime: new Date().toISOString(),
      time: -1,
      request: {
        method,
        url: url.toString(),
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        queryString: [...url.searchParams].map((e) => ({
          name: e[0],
          value: e[1]
        })),
        headersSize: -1,
        bodySize: -1
      },
      response: {
        status: -1,
        statusText: "",
        httpVersion: FALLBACK_HTTP_VERSION,
        cookies: [],
        headers: [],
        content: {
          size: -1,
          mimeType: "x-unknown"
        },
        headersSize: -1,
        bodySize: -1,
        redirectURL: "",
        _transferSize: options.omitSizes ? undefined : -1
      },
      cache: {},
      timings: {
        send: -1,
        wait: -1,
        receive: -1
      }
    };
    return harEntry;
  }
  function parseCookie(c) {
    const cookie = {
      name: "",
      value: ""
    };
    let first = true;
    for (const pair of c.split(/; */)) {
      const indexOfEquals = pair.indexOf("=");
      const name = indexOfEquals !== -1 ? pair.substr(0, indexOfEquals).trim() : pair.trim();
      const value = indexOfEquals !== -1 ? pair.substr(indexOfEquals + 1, pair.length).trim() : "";
      if (first) {
        first = false;
        cookie.name = name;
        cookie.value = value;
        continue;
      }
      if (name === "Domain")
        cookie.domain = value;
      if (name === "Expires")
        cookie.expires = safeDateToISOString(value);
      if (name === "HttpOnly")
        cookie.httpOnly = true;
      if (name === "Max-Age")
        cookie.expires = safeDateToISOString(Date.now() + +value * 1000);
      if (name === "Path")
        cookie.path = value;
      if (name === "SameSite")
        cookie.sameSite = value;
      if (name === "Secure")
        cookie.secure = true;
    }
    return cookie;
  }
  function safeDateToISOString(value) {
    try {
      return new Date(value).toISOString();
    } catch (e) {
    }
  }
  var startedDateSymbol = Symbol("startedDate");
});

// node_modules/playwright-core/lib/server/trace/recorder/snapshotterInjected.js
var require_snapshotterInjected = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.frameSnapshotStreamer = frameSnapshotStreamer;
  function frameSnapshotStreamer(snapshotStreamer, removeNoScript) {
    if (window[snapshotStreamer])
      return;
    const kShadowAttribute = "__playwright_shadow_root_";
    const kValueAttribute = "__playwright_value_";
    const kCheckedAttribute = "__playwright_checked_";
    const kSelectedAttribute = "__playwright_selected_";
    const kScrollTopAttribute = "__playwright_scroll_top_";
    const kScrollLeftAttribute = "__playwright_scroll_left_";
    const kStyleSheetAttribute = "__playwright_style_sheet_";
    const kTargetAttribute = "__playwright_target__";
    const kCustomElementsAttribute = "__playwright_custom_elements__";
    const kCurrentSrcAttribute = "__playwright_current_src__";
    const kBoundingRectAttribute = "__playwright_bounding_rect__";
    const kSnapshotFrameId = Symbol("__playwright_snapshot_frameid_");
    const kCachedData = Symbol("__playwright_snapshot_cache_");
    const kEndOfList = Symbol("__playwright_end_of_list_");
    function resetCachedData(obj) {
      delete obj[kCachedData];
    }
    function ensureCachedData(obj) {
      if (!obj[kCachedData])
        obj[kCachedData] = {};
      return obj[kCachedData];
    }
    function removeHash(url) {
      try {
        const u = new URL(url);
        u.hash = "";
        return u.toString();
      } catch (e) {
        return url;
      }
    }

    class Streamer {
      constructor() {
        this._lastSnapshotNumber = 0;
        this._staleStyleSheets = new Set;
        this._readingStyleSheet = false;
        this._fakeBase = undefined;
        this._observer = undefined;
        const invalidateCSSGroupingRule = (rule) => {
          if (rule.parentStyleSheet)
            this._invalidateStyleSheet(rule.parentStyleSheet);
        };
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "insertRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "deleteRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "addRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "removeRule", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "rules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeGetter(window.CSSStyleSheet.prototype, "cssRules", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSStyleSheet.prototype, "replaceSync", (sheet) => this._invalidateStyleSheet(sheet));
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "insertRule", invalidateCSSGroupingRule);
        this._interceptNativeMethod(window.CSSGroupingRule.prototype, "deleteRule", invalidateCSSGroupingRule);
        this._interceptNativeGetter(window.CSSGroupingRule.prototype, "cssRules", invalidateCSSGroupingRule);
        this._interceptNativeAsyncMethod(window.CSSStyleSheet.prototype, "replace", (sheet) => this._invalidateStyleSheet(sheet));
        this._fakeBase = document.createElement("base");
        this._observer = new MutationObserver((list) => this._handleMutations(list));
        const observerConfig = {
          attributes: true,
          subtree: true
        };
        this._observer.observe(document, observerConfig);
        this._refreshListenersWhenNeeded();
      }
      _refreshListenersWhenNeeded() {
        this._refreshListeners();
        const customEventName = "__playwright_snapshotter_global_listeners_check__";
        let seenEvent = false;
        const handleCustomEvent = () => seenEvent = true;
        window.addEventListener(customEventName, handleCustomEvent);
        const observer = new MutationObserver((entries) => {
          const newDocumentElement = entries.some((entry) => Array.from(entry.addedNodes).includes(document.documentElement));
          if (newDocumentElement) {
            seenEvent = false;
            window.dispatchEvent(new CustomEvent(customEventName));
            if (!seenEvent) {
              window.addEventListener(customEventName, handleCustomEvent);
              this._refreshListeners();
            }
          }
        });
        observer.observe(document, {
          childList: true
        });
      }
      _refreshListeners() {
        document.addEventListener("__playwright_mark_target__", (event) => {
          if (!event.detail)
            return;
          const callId = event.detail;
          event.composedPath()[0].__playwright_target__ = callId;
        });
        document.addEventListener("__playwright_unmark_target__", (event) => {
          if (!event.detail)
            return;
          const callId = event.detail;
          if (event.composedPath()[0].__playwright_target__ === callId)
            delete event.composedPath()[0].__playwright_target__;
        });
      }
      _interceptNativeMethod(obj, method, cb) {
        const native = obj[method];
        if (!native)
          return;
        obj[method] = function(...args) {
          const result = native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeAsyncMethod(obj, method, cb) {
        const native = obj[method];
        if (!native)
          return;
        obj[method] = async function(...args) {
          const result = await native.call(this, ...args);
          cb(this, result);
          return result;
        };
      }
      _interceptNativeGetter(obj, prop, cb) {
        const descriptor = Object.getOwnPropertyDescriptor(obj, prop);
        Object.defineProperty(obj, prop, {
          ...descriptor,
          get: function() {
            const result = descriptor.get.call(this);
            cb(this, result);
            return result;
          }
        });
      }
      _handleMutations(list) {
        for (const mutation of list)
          ensureCachedData(mutation.target).attributesCached = undefined;
      }
      _invalidateStyleSheet(sheet) {
        if (this._readingStyleSheet)
          return;
        this._staleStyleSheets.add(sheet);
      }
      _updateStyleElementStyleSheetTextIfNeeded(sheet, forceText) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet) || forceText && data.cssText === undefined) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
          } catch (e) {
            data.cssText = "";
          }
        }
        return data.cssText;
      }
      _updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber) {
        const data = ensureCachedData(sheet);
        if (this._staleStyleSheets.has(sheet)) {
          this._staleStyleSheets.delete(sheet);
          try {
            data.cssText = this._getSheetText(sheet);
            data.cssRef = snapshotNumber;
            return data.cssText;
          } catch (e) {
          }
        }
        return data.cssRef === undefined ? undefined : snapshotNumber - data.cssRef;
      }
      markIframe(iframeElement, frameId) {
        iframeElement[kSnapshotFrameId] = frameId;
      }
      reset() {
        this._staleStyleSheets.clear();
        const visitNode = (node) => {
          resetCachedData(node);
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node;
            if (element.shadowRoot)
              visitNode(element.shadowRoot);
          }
          for (let child = node.firstChild;child; child = child.nextSibling)
            visitNode(child);
        };
        visitNode(document.documentElement);
        visitNode(this._fakeBase);
      }
      __sanitizeMetaAttribute(name, value, httpEquiv) {
        if (name === "charset")
          return "utf-8";
        if (httpEquiv.toLowerCase() !== "content-type" || name !== "content")
          return value;
        const [type, ...params] = value.split(";");
        if (type !== "text/html" || params.length <= 0)
          return value;
        const charsetParamIdx = params.findIndex((param) => param.trim().startsWith("charset="));
        if (charsetParamIdx > -1)
          params[charsetParamIdx] = "charset=utf-8";
        return `${type}; ${params.join("; ")}`;
      }
      _sanitizeUrl(url) {
        if (url.startsWith("javascript:") || url.startsWith("vbscript:"))
          return "";
        return url;
      }
      _sanitizeSrcSet(srcset) {
        return srcset.split(",").map((src) => {
          src = src.trim();
          const spaceIndex = src.lastIndexOf(" ");
          if (spaceIndex === -1)
            return this._sanitizeUrl(src);
          return this._sanitizeUrl(src.substring(0, spaceIndex).trim()) + src.substring(spaceIndex);
        }).join(", ");
      }
      _resolveUrl(base, url) {
        if (url === "")
          return "";
        try {
          return new URL(url, base).href;
        } catch (e) {
          return url;
        }
      }
      _getSheetBase(sheet) {
        let rootSheet = sheet;
        while (rootSheet.parentStyleSheet)
          rootSheet = rootSheet.parentStyleSheet;
        if (rootSheet.ownerNode)
          return rootSheet.ownerNode.baseURI;
        return document.baseURI;
      }
      _getSheetText(sheet) {
        this._readingStyleSheet = true;
        try {
          const rules = [];
          for (const rule of sheet.cssRules)
            rules.push(rule.cssText);
          return rules.join(`
`);
        } finally {
          this._readingStyleSheet = false;
        }
      }
      captureSnapshot() {
        const timestamp = performance.now();
        const snapshotNumber = ++this._lastSnapshotNumber;
        let nodeCounter = 0;
        let shadowDomNesting = 0;
        let headNesting = 0;
        this._handleMutations(this._observer.takeRecords());
        const definedCustomElements = new Set;
        const visitNode = (node) => {
          const nodeType = node.nodeType;
          const nodeName = nodeType === Node.DOCUMENT_FRAGMENT_NODE ? "template" : node.nodeName;
          if (nodeType !== Node.ELEMENT_NODE && nodeType !== Node.DOCUMENT_FRAGMENT_NODE && nodeType !== Node.TEXT_NODE)
            return;
          if (nodeName === "SCRIPT")
            return;
          if (nodeName === "LINK" && nodeType === Node.ELEMENT_NODE) {
            var _getAttribute;
            const rel = (_getAttribute = node.getAttribute("rel")) === null || _getAttribute === undefined ? undefined : _getAttribute.toLowerCase();
            if (rel === "preload" || rel === "prefetch")
              return;
          }
          if (removeNoScript && nodeName === "NOSCRIPT")
            return;
          if (nodeName === "META" && node.httpEquiv.toLowerCase() === "content-security-policy")
            return;
          if ((nodeName === "IFRAME" || nodeName === "FRAME") && headNesting)
            return;
          const data = ensureCachedData(node);
          const values = [];
          let equals = !!data.cached;
          let extraNodes = 0;
          const expectValue = (value) => {
            equals = equals && data.cached[values.length] === value;
            values.push(value);
          };
          const checkAndReturn = (n) => {
            data.attributesCached = true;
            if (equals)
              return {
                equals: true,
                n: [[snapshotNumber - data.ref[0], data.ref[1]]]
              };
            nodeCounter += extraNodes;
            data.ref = [snapshotNumber, nodeCounter++];
            data.cached = values;
            return {
              equals: false,
              n
            };
          };
          if (nodeType === Node.TEXT_NODE) {
            const value = node.nodeValue || "";
            expectValue(value);
            return checkAndReturn(value);
          }
          if (nodeName === "STYLE") {
            const sheet = node.sheet;
            let cssText;
            if (sheet)
              cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet);
            cssText = cssText || node.textContent || "";
            expectValue(cssText);
            extraNodes++;
            return checkAndReturn([nodeName, {}, cssText]);
          }
          const attrs = {};
          const result2 = [nodeName, attrs];
          const visitChild = (child) => {
            const snapshot = visitNode(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          const visitChildStyleSheet = (child) => {
            const snapshot = visitStyleSheet(child);
            if (snapshot) {
              result2.push(snapshot.n);
              expectValue(child);
              equals = equals && snapshot.equals;
            }
          };
          if (nodeType === Node.DOCUMENT_FRAGMENT_NODE)
            attrs[kShadowAttribute] = "open";
          if (nodeType === Node.ELEMENT_NODE) {
            var _window$customElement;
            const element = node;
            if (element.localName.includes("-") && (_window$customElement = window.customElements) !== null && _window$customElement !== undefined && _window$customElement.get(element.localName))
              definedCustomElements.add(element.localName);
            if (nodeName === "INPUT" || nodeName === "TEXTAREA") {
              const value = element.value;
              expectValue(kValueAttribute);
              expectValue(value);
              attrs[kValueAttribute] = value;
            }
            if (nodeName === "INPUT" && ["checkbox", "radio"].includes(element.type)) {
              const value = element.checked ? "true" : "false";
              expectValue(kCheckedAttribute);
              expectValue(value);
              attrs[kCheckedAttribute] = value;
            }
            if (nodeName === "OPTION") {
              const value = element.selected ? "true" : "false";
              expectValue(kSelectedAttribute);
              expectValue(value);
              attrs[kSelectedAttribute] = value;
            }
            if (nodeName === "CANVAS") {
              const boundingRect = element.getBoundingClientRect();
              const value = JSON.stringify({
                left: boundingRect.left / window.innerWidth,
                top: boundingRect.top / window.innerHeight,
                right: boundingRect.right / window.innerWidth,
                bottom: boundingRect.bottom / window.innerHeight
              });
              expectValue(kBoundingRectAttribute);
              expectValue(value);
              attrs[kBoundingRectAttribute] = value;
            }
            if (element.scrollTop) {
              expectValue(kScrollTopAttribute);
              expectValue(element.scrollTop);
              attrs[kScrollTopAttribute] = "" + element.scrollTop;
            }
            if (element.scrollLeft) {
              expectValue(kScrollLeftAttribute);
              expectValue(element.scrollLeft);
              attrs[kScrollLeftAttribute] = "" + element.scrollLeft;
            }
            if (element.shadowRoot) {
              ++shadowDomNesting;
              visitChild(element.shadowRoot);
              --shadowDomNesting;
            }
            if ("__playwright_target__" in element) {
              expectValue(kTargetAttribute);
              expectValue(element["__playwright_target__"]);
              attrs[kTargetAttribute] = element["__playwright_target__"];
            }
          }
          if (nodeName === "HEAD") {
            ++headNesting;
            this._fakeBase.setAttribute("href", document.baseURI);
            visitChild(this._fakeBase);
          }
          for (let child = node.firstChild;child; child = child.nextSibling)
            visitChild(child);
          if (nodeName === "HEAD")
            --headNesting;
          expectValue(kEndOfList);
          let documentOrShadowRoot = null;
          if (node.ownerDocument.documentElement === node)
            documentOrShadowRoot = node.ownerDocument;
          else if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
            documentOrShadowRoot = node;
          if (documentOrShadowRoot) {
            for (const sheet of documentOrShadowRoot.adoptedStyleSheets || [])
              visitChildStyleSheet(sheet);
            expectValue(kEndOfList);
          }
          if (nodeName === "IFRAME" || nodeName === "FRAME") {
            const element = node;
            const frameId = element[kSnapshotFrameId];
            const name = "src";
            const value = frameId ? `/snapshot/${frameId}` : "";
            expectValue(name);
            expectValue(value);
            attrs[name] = value;
          }
          if (nodeName === "BODY" && definedCustomElements.size) {
            const value = [...definedCustomElements].join(",");
            expectValue(kCustomElementsAttribute);
            expectValue(value);
            attrs[kCustomElementsAttribute] = value;
          }
          if (nodeName === "IMG" || nodeName === "PICTURE") {
            const value = nodeName === "PICTURE" ? "" : this._sanitizeUrl(node.currentSrc);
            expectValue(kCurrentSrcAttribute);
            expectValue(value);
            attrs[kCurrentSrcAttribute] = value;
          }
          if (equals && data.attributesCached && !shadowDomNesting)
            return checkAndReturn(result2);
          if (nodeType === Node.ELEMENT_NODE) {
            const element = node;
            for (let i = 0;i < element.attributes.length; i++) {
              const name = element.attributes[i].name;
              if (nodeName === "LINK" && name === "integrity")
                continue;
              if (nodeName === "IFRAME" && (name === "src" || name === "srcdoc" || name === "sandbox"))
                continue;
              if (nodeName === "FRAME" && name === "src")
                continue;
              let value = element.attributes[i].value;
              if (nodeName === "META")
                value = this.__sanitizeMetaAttribute(name, value, node.httpEquiv);
              else if (name === "src" && nodeName === "IMG")
                value = this._sanitizeUrl(value);
              else if (name === "srcset" && nodeName === "IMG")
                value = this._sanitizeSrcSet(value);
              else if (name === "srcset" && nodeName === "SOURCE")
                value = this._sanitizeSrcSet(value);
              else if (name === "href" && nodeName === "LINK")
                value = this._sanitizeUrl(value);
              else if (name.startsWith("on"))
                value = "";
              expectValue(name);
              expectValue(value);
              attrs[name] = value;
            }
            expectValue(kEndOfList);
          }
          if (result2.length === 2 && !Object.keys(attrs).length)
            result2.pop();
          return checkAndReturn(result2);
        };
        const visitStyleSheet = (sheet) => {
          const data = ensureCachedData(sheet);
          const oldCSSText = data.cssText;
          const cssText = this._updateStyleElementStyleSheetTextIfNeeded(sheet, true);
          if (cssText === oldCSSText)
            return {
              equals: true,
              n: [[snapshotNumber - data.ref[0], data.ref[1]]]
            };
          data.ref = [snapshotNumber, nodeCounter++];
          return {
            equals: false,
            n: ["template", {
              [kStyleSheetAttribute]: cssText
            }]
          };
        };
        let html;
        if (document.documentElement) {
          const {
            n
          } = visitNode(document.documentElement);
          html = n;
        } else {
          html = ["html"];
        }
        const result = {
          html,
          doctype: document.doctype ? document.doctype.name : undefined,
          resourceOverrides: [],
          viewport: {
            width: window.innerWidth,
            height: window.innerHeight
          },
          url: location.href,
          wallTime: Date.now(),
          collectionTime: 0
        };
        for (const sheet of this._staleStyleSheets) {
          if (sheet.href === null)
            continue;
          const content = this._updateLinkStyleSheetTextIfNeeded(sheet, snapshotNumber);
          if (content === undefined) {
            continue;
          }
          const base = this._getSheetBase(sheet);
          const url = removeHash(this._resolveUrl(base, sheet.href));
          result.resourceOverrides.push({
            url,
            content,
            contentType: "text/css"
          });
        }
        result.collectionTime = performance.now() - timestamp;
        return result;
      }
    }
    window[snapshotStreamer] = new Streamer;
  }
});

// node_modules/playwright-core/lib/server/trace/recorder/snapshotter.js
var require_snapshotter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Snapshotter = undefined;
  var _browserContext = require_browserContext();
  var _page = require_page();
  var _eventsHelper = require_eventsHelper();
  var _debugLogger = require_debugLogger();
  var _snapshotterInjected = require_snapshotterInjected();
  var _utils = require_utils();
  var _utilsBundle = require_utilsBundle();

  class Snapshotter {
    constructor(context, delegate) {
      this._context = undefined;
      this._delegate = undefined;
      this._eventListeners = [];
      this._snapshotStreamer = undefined;
      this._initialized = false;
      this._started = false;
      this._context = context;
      this._delegate = delegate;
      const guid = (0, _utils.createGuid)();
      this._snapshotStreamer = "__playwright_snapshot_streamer_" + guid;
    }
    started() {
      return this._started;
    }
    async start() {
      this._started = true;
      if (!this._initialized) {
        this._initialized = true;
        await this._initialize();
      }
      await this.reset();
    }
    async reset() {
      if (this._started)
        await this._runInAllFrames(`window["${this._snapshotStreamer}"].reset()`);
    }
    async stop() {
      this._started = false;
    }
    resetForReuse() {
      this._initialized = false;
    }
    async _initialize() {
      for (const page of this._context.pages())
        this._onPage(page);
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._onPage.bind(this))];
      const {
        javaScriptEnabled
      } = this._context._options;
      const initScript = `(${_snapshotterInjected.frameSnapshotStreamer})("${this._snapshotStreamer}", ${javaScriptEnabled || javaScriptEnabled === undefined})`;
      await this._context.addInitScript(initScript);
      await this._runInAllFrames(initScript);
    }
    async _runInAllFrames(expression) {
      const frames = [];
      for (const page of this._context.pages())
        frames.push(...page.frames());
      await Promise.all(frames.map((frame) => {
        return frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger.debugLogger.log("error", e));
      }));
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async captureSnapshot(page, callId, snapshotName) {
      const expression = `window["${this._snapshotStreamer}"].captureSnapshot(${JSON.stringify(snapshotName)})`;
      const snapshots = page.frames().map(async (frame) => {
        const data = await frame.nonStallingRawEvaluateInExistingMainContext(expression).catch((e) => _debugLogger.debugLogger.log("error", e));
        if (!data || !this._started)
          return;
        const snapshot = {
          callId,
          snapshotName,
          pageId: page.guid,
          frameId: frame.guid,
          frameUrl: data.url,
          doctype: data.doctype,
          html: data.html,
          viewport: data.viewport,
          timestamp: (0, _utils.monotonicTime)(),
          wallTime: data.wallTime,
          collectionTime: data.collectionTime,
          resourceOverrides: [],
          isMainFrame: page.mainFrame() === frame
        };
        for (const {
          url,
          content,
          contentType
        } of data.resourceOverrides) {
          if (typeof content === "string") {
            const buffer = Buffer.from(content);
            const sha1 = (0, _utils.calculateSha1)(buffer) + "." + (_utilsBundle.mime.getExtension(contentType) || "dat");
            this._delegate.onSnapshotterBlob({
              sha1,
              buffer
            });
            snapshot.resourceOverrides.push({
              url,
              sha1
            });
          } else {
            snapshot.resourceOverrides.push({
              url,
              ref: content
            });
          }
        }
        this._delegate.onFrameSnapshot(snapshot);
      });
      await Promise.all(snapshots);
    }
    _onPage(page) {
      for (const frame of page.frames())
        this._annotateFrameHierarchy(frame);
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(page, _page.Page.Events.FrameAttached, (frame) => this._annotateFrameHierarchy(frame)));
    }
    async _annotateFrameHierarchy(frame) {
      try {
        const frameElement = await frame.frameElement();
        const parent = frame.parentFrame();
        if (!parent)
          return;
        const context = await parent._mainContext();
        await (context === null || context === undefined ? undefined : context.evaluate(({
          snapshotStreamer,
          frameElement: frameElement2,
          frameId
        }) => {
          window[snapshotStreamer].markIframe(frameElement2, frameId);
        }, {
          snapshotStreamer: this._snapshotStreamer,
          frameElement,
          frameId: frame.guid
        }));
        frameElement.dispose();
      } catch (e) {
      }
    }
  }
  exports.Snapshotter = Snapshotter;
});

// node_modules/playwright-core/lib/server/trace/recorder/tracing.js
var require_tracing = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tracing = undefined;
  exports.shouldCaptureSnapshot = shouldCaptureSnapshot;
  var _fs = _interopRequireDefault(__require("fs"));
  var _os = _interopRequireDefault(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _debug = require_debug2();
  var _utils = require_utils();
  var _artifact = require_artifact();
  var _browserContext = require_browserContext();
  var _instrumentation = require_instrumentation();
  var _page = require_page();
  var _harTracer = require_harTracer();
  var _snapshotter = require_snapshotter();
  var _dispatcher = require_dispatcher();
  var _errors = require_errors();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var version2 = 7;
  var kScreencastOptions = {
    width: 800,
    height: 600,
    quality: 90
  };

  class Tracing extends _instrumentation.SdkObject {
    constructor(context, tracesDir) {
      super(context, "tracing");
      this._fs = new _utils.SerializedFS;
      this._snapshotter = undefined;
      this._harTracer = undefined;
      this._screencastListeners = [];
      this._eventListeners = [];
      this._context = undefined;
      this._state = undefined;
      this._isStopping = false;
      this._precreatedTracesDir = undefined;
      this._tracesTmpDir = undefined;
      this._allResources = new Set;
      this._contextCreatedEvent = undefined;
      this._pendingHarEntries = new Set;
      this._context = context;
      this._precreatedTracesDir = tracesDir;
      this._harTracer = new _harTracer.HarTracer(context, null, this, {
        content: "attach",
        includeTraceInfo: true,
        recordRequestOverrides: false,
        waitForContentOnStop: false
      });
      const testIdAttributeName = "selectors" in context ? context.selectors().testIdAttributeName() : undefined;
      this._contextCreatedEvent = {
        version: version2,
        type: "context-options",
        origin: "library",
        browserName: "",
        options: {},
        platform: process.platform,
        wallTime: 0,
        monotonicTime: 0,
        sdkLanguage: context.attribution.playwright.options.sdkLanguage,
        testIdAttributeName
      };
      if (context instanceof _browserContext.BrowserContext) {
        this._snapshotter = new _snapshotter.Snapshotter(context, this);
        (0, _utils.assert)(tracesDir, "tracesDir must be specified for BrowserContext");
        this._contextCreatedEvent.browserName = context._browser.options.name;
        this._contextCreatedEvent.channel = context._browser.options.channel;
        this._contextCreatedEvent.options = context._options;
      }
    }
    async resetForReuse() {
      var _this$_snapshotter;
      await this.stopChunk({
        mode: "discard"
      }).catch(() => {
      });
      await this.stop();
      (_this$_snapshotter = this._snapshotter) === null || _this$_snapshotter === undefined || _this$_snapshotter.resetForReuse();
    }
    async start(options) {
      if (this._isStopping)
        throw new Error("Cannot start tracing while stopping");
      if (this._state)
        throw new Error("Tracing has been already started");
      this._contextCreatedEvent.sdkLanguage = this._context.attribution.playwright.options.sdkLanguage;
      const traceName = options.name || (0, _utils.createGuid)();
      const tracesDir = this._createTracesDirIfNeeded();
      this._state = {
        options,
        traceName,
        tracesDir,
        traceFile: _path.default.join(tracesDir, traceName + ".trace"),
        networkFile: _path.default.join(tracesDir, traceName + ".network"),
        resourcesDir: _path.default.join(tracesDir, "resources"),
        chunkOrdinal: 0,
        traceSha1s: new Set,
        networkSha1s: new Set,
        recording: false,
        callIds: new Set,
        groupStack: []
      };
      this._fs.mkdir(this._state.resourcesDir);
      this._fs.writeFile(this._state.networkFile, "");
      if (options.snapshots)
        this._harTracer.start({
          omitScripts: !options.live
        });
    }
    async startChunk(options = {}) {
      var _this$_snapshotter2;
      if (this._state && this._state.recording)
        await this.stopChunk({
          mode: "discard"
        });
      if (!this._state)
        throw new Error("Must start tracing before starting a new chunk");
      if (this._isStopping)
        throw new Error("Cannot start a trace chunk while stopping");
      this._state.recording = true;
      this._state.callIds.clear();
      if (options.name && options.name !== this._state.traceName)
        this._changeTraceName(this._state, options.name);
      else
        this._allocateNewTraceFile(this._state);
      this._fs.mkdir(_path.default.dirname(this._state.traceFile));
      const event = {
        ...this._contextCreatedEvent,
        title: options.title,
        wallTime: Date.now(),
        monotonicTime: (0, _utils.monotonicTime)()
      };
      this._appendTraceEvent(event);
      this._context.instrumentation.addListener(this, this._context);
      this._eventListeners.push(_utils.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Console, this._onConsoleMessage.bind(this)), _utils.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.PageError, this._onPageError.bind(this)));
      if (this._state.options.screenshots)
        this._startScreencast();
      if (this._state.options.snapshots)
        await ((_this$_snapshotter2 = this._snapshotter) === null || _this$_snapshotter2 === undefined ? undefined : _this$_snapshotter2.start());
      return {
        traceName: this._state.traceName
      };
    }
    _currentGroupId() {
      var _this$_state;
      return (_this$_state = this._state) !== null && _this$_state !== undefined && _this$_state.groupStack.length ? this._state.groupStack[this._state.groupStack.length - 1] : undefined;
    }
    async group(name, location2, metadata) {
      var _ref;
      if (!this._state)
        return;
      const stackFrames = [];
      const {
        file,
        line,
        column
      } = (_ref = location2 !== null && location2 !== undefined ? location2 : metadata.location) !== null && _ref !== undefined ? _ref : {};
      if (file) {
        stackFrames.push({
          file,
          line: line !== null && line !== undefined ? line : 0,
          column: column !== null && column !== undefined ? column : 0
        });
      }
      const event = {
        type: "before",
        callId: metadata.id,
        startTime: metadata.startTime,
        apiName: name,
        class: "Tracing",
        method: "tracingGroup",
        params: {},
        stepId: metadata.stepId,
        stack: stackFrames
      };
      if (this._currentGroupId())
        event.parentId = this._currentGroupId();
      this._state.groupStack.push(event.callId);
      this._appendTraceEvent(event);
    }
    groupEnd() {
      if (!this._state)
        return;
      const callId = this._state.groupStack.pop();
      if (!callId)
        return;
      const event = {
        type: "after",
        callId,
        endTime: (0, _utils.monotonicTime)()
      };
      this._appendTraceEvent(event);
    }
    _startScreencast() {
      if (!(this._context instanceof _browserContext.BrowserContext))
        return;
      for (const page of this._context.pages())
        this._startScreencastInPage(page);
      this._screencastListeners.push(_utils.eventsHelper.addEventListener(this._context, _browserContext.BrowserContext.Events.Page, this._startScreencastInPage.bind(this)));
    }
    _stopScreencast() {
      _utils.eventsHelper.removeEventListeners(this._screencastListeners);
      if (!(this._context instanceof _browserContext.BrowserContext))
        return;
      for (const page of this._context.pages())
        page.setScreencastOptions(null);
    }
    _allocateNewTraceFile(state) {
      const suffix = state.chunkOrdinal ? `-chunk${state.chunkOrdinal}` : ``;
      state.chunkOrdinal++;
      state.traceFile = _path.default.join(state.tracesDir, `${state.traceName}${suffix}.trace`);
    }
    _changeTraceName(state, name) {
      state.traceName = name;
      state.chunkOrdinal = 0;
      this._allocateNewTraceFile(state);
      const newNetworkFile = _path.default.join(state.tracesDir, name + ".network");
      this._fs.copyFile(state.networkFile, newNetworkFile);
      state.networkFile = newNetworkFile;
    }
    async stop() {
      if (!this._state)
        return;
      if (this._isStopping)
        throw new Error(`Tracing is already stopping`);
      if (this._state.recording)
        throw new Error(`Must stop trace file before stopping tracing`);
      this._closeAllGroups();
      this._harTracer.stop();
      this.flushHarEntries();
      await this._fs.syncAndGetError();
      this._state = undefined;
    }
    async deleteTmpTracesDir() {
      if (this._tracesTmpDir)
        await (0, _utils.removeFolders)([this._tracesTmpDir]);
    }
    _createTracesDirIfNeeded() {
      if (this._precreatedTracesDir)
        return this._precreatedTracesDir;
      this._tracesTmpDir = _fs.default.mkdtempSync(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      return this._tracesTmpDir;
    }
    abort() {
      var _this$_snapshotter3;
      (_this$_snapshotter3 = this._snapshotter) === null || _this$_snapshotter3 === undefined || _this$_snapshotter3.dispose();
      this._harTracer.stop();
    }
    async flush() {
      this.abort();
      await this._fs.syncAndGetError();
    }
    _closeAllGroups() {
      while (this._currentGroupId())
        this.groupEnd();
    }
    async stopChunk(params) {
      var _this$_snapshotter4;
      if (this._isStopping)
        throw new Error(`Tracing is already stopping`);
      this._isStopping = true;
      if (!this._state || !this._state.recording) {
        this._isStopping = false;
        if (params.mode !== "discard")
          throw new Error(`Must start tracing before stopping`);
        return {};
      }
      this._closeAllGroups();
      this._context.instrumentation.removeListener(this);
      _utils.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._state.options.screenshots)
        this._stopScreencast();
      if (this._state.options.snapshots)
        await ((_this$_snapshotter4 = this._snapshotter) === null || _this$_snapshotter4 === undefined ? undefined : _this$_snapshotter4.stop());
      this.flushHarEntries();
      const newNetworkFile = _path.default.join(this._state.tracesDir, this._state.traceName + `-pwnetcopy-${this._state.chunkOrdinal}.network`);
      const entries = [];
      entries.push({
        name: "trace.trace",
        value: this._state.traceFile
      });
      entries.push({
        name: "trace.network",
        value: newNetworkFile
      });
      for (const sha1 of new Set([...this._state.traceSha1s, ...this._state.networkSha1s]))
        entries.push({
          name: _path.default.join("resources", sha1),
          value: _path.default.join(this._state.resourcesDir, sha1)
        });
      this._state.traceSha1s = new Set;
      if (params.mode === "discard") {
        this._isStopping = false;
        this._state.recording = false;
        return {};
      }
      this._fs.copyFile(this._state.networkFile, newNetworkFile);
      const zipFileName = this._state.traceFile + ".zip";
      if (params.mode === "archive")
        this._fs.zip(entries, zipFileName);
      const error = await this._fs.syncAndGetError();
      this._isStopping = false;
      if (this._state)
        this._state.recording = false;
      if (error) {
        if (this._context instanceof _browserContext.BrowserContext && !this._context._browser.isConnected())
          return {};
        throw error;
      }
      if (params.mode === "entries")
        return {
          entries
        };
      const artifact = new _artifact.Artifact(this._context, zipFileName);
      artifact.reportFinished();
      return {
        artifact
      };
    }
    async _captureSnapshot(snapshotName, sdkObject, metadata) {
      if (!this._snapshotter)
        return;
      if (!sdkObject.attribution.page)
        return;
      if (!this._snapshotter.started())
        return;
      if (!shouldCaptureSnapshot(metadata))
        return;
      await this._snapshotter.captureSnapshot(sdkObject.attribution.page, metadata.id, snapshotName).catch(() => {
      });
    }
    onBeforeCall(sdkObject, metadata) {
      var _sdkObject$attributio, _this$_state2;
      const event = createBeforeActionTraceEvent(metadata, this._currentGroupId());
      if (!event)
        return Promise.resolve();
      (_sdkObject$attributio = sdkObject.attribution.page) === null || _sdkObject$attributio === undefined || _sdkObject$attributio.temporarilyDisableTracingScreencastThrottling();
      event.beforeSnapshot = `before@${metadata.id}`;
      (_this$_state2 = this._state) === null || _this$_state2 === undefined || _this$_state2.callIds.add(metadata.id);
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.beforeSnapshot, sdkObject, metadata);
    }
    onBeforeInputAction(sdkObject, metadata) {
      var _this$_state3, _sdkObject$attributio2;
      if (!((_this$_state3 = this._state) !== null && _this$_state3 !== undefined && _this$_state3.callIds.has(metadata.id)))
        return Promise.resolve();
      const event = createInputActionTraceEvent(metadata);
      if (!event)
        return Promise.resolve();
      (_sdkObject$attributio2 = sdkObject.attribution.page) === null || _sdkObject$attributio2 === undefined || _sdkObject$attributio2.temporarilyDisableTracingScreencastThrottling();
      event.inputSnapshot = `input@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.inputSnapshot, sdkObject, metadata);
    }
    onCallLog(sdkObject, metadata, logName, message) {
      if (metadata.isServerSide || metadata.internal)
        return;
      if (logName !== "api")
        return;
      const event = createActionLogTraceEvent(metadata, message);
      if (event)
        this._appendTraceEvent(event);
    }
    async onAfterCall(sdkObject, metadata) {
      var _this$_state4, _this$_state5, _sdkObject$attributio3;
      if (!((_this$_state4 = this._state) !== null && _this$_state4 !== undefined && _this$_state4.callIds.has(metadata.id)))
        return;
      (_this$_state5 = this._state) === null || _this$_state5 === undefined || _this$_state5.callIds.delete(metadata.id);
      const event = createAfterActionTraceEvent(metadata);
      if (!event)
        return;
      (_sdkObject$attributio3 = sdkObject.attribution.page) === null || _sdkObject$attributio3 === undefined || _sdkObject$attributio3.temporarilyDisableTracingScreencastThrottling();
      event.afterSnapshot = `after@${metadata.id}`;
      this._appendTraceEvent(event);
      return this._captureSnapshot(event.afterSnapshot, sdkObject, metadata);
    }
    onEntryStarted(entry) {
      this._pendingHarEntries.add(entry);
    }
    onEntryFinished(entry) {
      this._pendingHarEntries.delete(entry);
      const event = {
        type: "resource-snapshot",
        snapshot: entry
      };
      const visited = visitTraceEvent(event, this._state.networkSha1s);
      this._fs.appendFile(this._state.networkFile, JSON.stringify(visited) + `
`, true);
    }
    flushHarEntries() {
      const harLines = [];
      for (const entry of this._pendingHarEntries) {
        const event = {
          type: "resource-snapshot",
          snapshot: entry
        };
        const visited = visitTraceEvent(event, this._state.networkSha1s);
        harLines.push(JSON.stringify(visited));
      }
      this._pendingHarEntries.clear();
      if (harLines.length)
        this._fs.appendFile(this._state.networkFile, harLines.join(`
`) + `
`, true);
    }
    onContentBlob(sha1, buffer) {
      this._appendResource(sha1, buffer);
    }
    onSnapshotterBlob(blob) {
      this._appendResource(blob.sha1, blob.buffer);
    }
    onFrameSnapshot(snapshot) {
      this._appendTraceEvent({
        type: "frame-snapshot",
        snapshot
      });
    }
    _onConsoleMessage(message) {
      var _message$page;
      const event = {
        type: "console",
        messageType: message.type(),
        text: message.text(),
        args: message.args().map((a) => ({
          preview: a.toString(),
          value: a.rawValue()
        })),
        location: message.location(),
        time: (0, _utils.monotonicTime)(),
        pageId: (_message$page = message.page()) === null || _message$page === undefined ? undefined : _message$page.guid
      };
      this._appendTraceEvent(event);
    }
    onDialog(dialog) {
      const event = {
        type: "event",
        time: (0, _utils.monotonicTime)(),
        class: "BrowserContext",
        method: "dialog",
        params: {
          pageId: dialog.page().guid,
          type: dialog.type(),
          message: dialog.message(),
          defaultValue: dialog.defaultValue()
        }
      };
      this._appendTraceEvent(event);
    }
    onDownload(page, download) {
      const event = {
        type: "event",
        time: (0, _utils.monotonicTime)(),
        class: "BrowserContext",
        method: "download",
        params: {
          pageId: page.guid,
          url: download.url,
          suggestedFilename: download.suggestedFilename()
        }
      };
      this._appendTraceEvent(event);
    }
    onPageOpen(page) {
      var _page$opener;
      const event = {
        type: "event",
        time: (0, _utils.monotonicTime)(),
        class: "BrowserContext",
        method: "page",
        params: {
          pageId: page.guid,
          openerPageId: (_page$opener = page.opener()) === null || _page$opener === undefined ? undefined : _page$opener.guid
        }
      };
      this._appendTraceEvent(event);
    }
    onPageClose(page) {
      const event = {
        type: "event",
        time: (0, _utils.monotonicTime)(),
        class: "BrowserContext",
        method: "pageClosed",
        params: {
          pageId: page.guid
        }
      };
      this._appendTraceEvent(event);
    }
    _onPageError(error, page) {
      const event = {
        type: "event",
        time: (0, _utils.monotonicTime)(),
        class: "BrowserContext",
        method: "pageError",
        params: {
          error: (0, _errors.serializeError)(error)
        },
        pageId: page.guid
      };
      this._appendTraceEvent(event);
    }
    _startScreencastInPage(page) {
      page.setScreencastOptions(kScreencastOptions);
      const prefix = page.guid;
      this._screencastListeners.push(_utils.eventsHelper.addEventListener(page, _page.Page.Events.ScreencastFrame, (params) => {
        const suffix = params.timestamp || Date.now();
        const sha1 = `${prefix}-${suffix}.jpeg`;
        const event = {
          type: "screencast-frame",
          pageId: page.guid,
          sha1,
          width: params.width,
          height: params.height,
          timestamp: (0, _utils.monotonicTime)(),
          frameSwapWallTime: params.frameSwapWallTime
        };
        this._appendResource(sha1, params.buffer);
        this._appendTraceEvent(event);
      }));
    }
    _appendTraceEvent(event) {
      const visited = visitTraceEvent(event, this._state.traceSha1s);
      const flush = this._state.options.live || event.type !== "event" && event.type !== "console" && event.type !== "log";
      this._fs.appendFile(this._state.traceFile, JSON.stringify(visited) + `
`, flush);
    }
    _appendResource(sha1, buffer) {
      if (this._allResources.has(sha1))
        return;
      this._allResources.add(sha1);
      const resourcePath = _path.default.join(this._state.resourcesDir, sha1);
      this._fs.writeFile(resourcePath, buffer, true);
    }
  }
  exports.Tracing = Tracing;
  function visitTraceEvent(object, sha1s) {
    if (Array.isArray(object))
      return object.map((o) => visitTraceEvent(o, sha1s));
    if (object instanceof _dispatcher.Dispatcher)
      return `<${object._type}>`;
    if (object instanceof Buffer)
      return `<Buffer>`;
    if (object instanceof Date)
      return object;
    if (typeof object === "object") {
      const result = {};
      for (const key in object) {
        if (key === "sha1" || key === "_sha1" || key.endsWith("Sha1")) {
          const sha1 = object[key];
          if (sha1)
            sha1s.add(sha1);
        }
        result[key] = visitTraceEvent(object[key], sha1s);
      }
      return result;
    }
    return object;
  }
  function shouldCaptureSnapshot(metadata) {
    return _debug.commandsWithTracingSnapshots.has(metadata.type + "." + metadata.method);
  }
  function createBeforeActionTraceEvent(metadata, parentId) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    const event = {
      type: "before",
      callId: metadata.id,
      startTime: metadata.startTime,
      apiName: metadata.apiName || metadata.type + "." + metadata.method,
      class: metadata.type,
      method: metadata.method,
      params: metadata.params,
      stepId: metadata.stepId,
      pageId: metadata.pageId
    };
    if (parentId)
      event.parentId = parentId;
    return event;
  }
  function createInputActionTraceEvent(metadata) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "input",
      callId: metadata.id,
      point: metadata.point
    };
  }
  function createActionLogTraceEvent(metadata, message) {
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "log",
      callId: metadata.id,
      time: (0, _utils.monotonicTime)(),
      message
    };
  }
  function createAfterActionTraceEvent(metadata) {
    var _metadata$error;
    if (metadata.internal || metadata.method.startsWith("tracing"))
      return null;
    return {
      type: "after",
      callId: metadata.id,
      endTime: metadata.endTime,
      error: (_metadata$error = metadata.error) === null || _metadata$error === undefined ? undefined : _metadata$error.error,
      result: metadata.result,
      point: metadata.point
    };
  }
});

// node_modules/playwright-core/lib/server/har/harRecorder.js
var require_harRecorder = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarRecorder = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _artifact = require_artifact();
  var _harTracer = require_harTracer();
  var _zipBundle = require_zipBundle();
  var _manualPromise = require_manualPromise();
  var _utils = require_utils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class HarRecorder {
    constructor(context, page, options) {
      this._artifact = undefined;
      this._isFlushed = false;
      this._tracer = undefined;
      this._entries = [];
      this._zipFile = null;
      this._writtenZipEntries = new Set;
      this._artifact = new _artifact.Artifact(context, _path.default.join(context._browser.options.artifactsDir, `${(0, _utils.createGuid)()}.har`));
      const urlFilterRe = options.urlRegexSource !== undefined && options.urlRegexFlags !== undefined ? new RegExp(options.urlRegexSource, options.urlRegexFlags) : undefined;
      const expectsZip = options.path.endsWith(".zip");
      const content = options.content || (expectsZip ? "attach" : "embed");
      this._tracer = new _harTracer.HarTracer(context, page, this, {
        content,
        slimMode: options.mode === "minimal",
        includeTraceInfo: false,
        recordRequestOverrides: true,
        waitForContentOnStop: true,
        urlFilter: urlFilterRe !== null && urlFilterRe !== undefined ? urlFilterRe : options.urlGlob
      });
      this._zipFile = content === "attach" || expectsZip ? new _zipBundle.yazl.ZipFile : null;
      this._tracer.start({
        omitScripts: false
      });
    }
    onEntryStarted(entry) {
      this._entries.push(entry);
    }
    onEntryFinished(entry) {
    }
    onContentBlob(sha1, buffer) {
      if (!this._zipFile || this._writtenZipEntries.has(sha1))
        return;
      this._writtenZipEntries.add(sha1);
      this._zipFile.addBuffer(buffer, sha1);
    }
    async flush() {
      if (this._isFlushed)
        return;
      this._isFlushed = true;
      await this._tracer.flush();
      const log = this._tracer.stop();
      log.entries = this._entries;
      const harFileContent = jsonStringify({
        log
      });
      if (this._zipFile) {
        const result = new _manualPromise.ManualPromise;
        this._zipFile.on("error", (error) => result.reject(error));
        this._zipFile.addBuffer(Buffer.from(harFileContent, "utf-8"), "har.har");
        this._zipFile.end();
        this._zipFile.outputStream.pipe(_fs.default.createWriteStream(this._artifact.localPath())).on("close", () => {
          result.resolve();
        });
        await result;
      } else {
        await _fs.default.promises.writeFile(this._artifact.localPath(), harFileContent);
      }
    }
    async export() {
      await this.flush();
      this._artifact.reportFinished();
      return this._artifact;
    }
  }
  exports.HarRecorder = HarRecorder;
  function jsonStringify(object) {
    const tokens = [];
    innerJsonStringify(object, tokens, "", false, undefined);
    return tokens.join("");
  }
  function innerJsonStringify(object, tokens, indent, flat, parentKey) {
    if (typeof object !== "object" || object === null) {
      tokens.push(JSON.stringify(object));
      return;
    }
    const isArray = Array.isArray(object);
    if (!isArray && object.constructor.name !== "Object") {
      tokens.push(JSON.stringify(object));
      return;
    }
    const entries = isArray ? object : Object.entries(object).filter((e) => e[1] !== undefined);
    if (!entries.length) {
      tokens.push(isArray ? `[]` : `{}`);
      return;
    }
    const childIndent = `${indent}  `;
    let brackets;
    if (isArray)
      brackets = flat ? {
        open: "[",
        close: "]"
      } : {
        open: `[
${childIndent}`,
        close: `
${indent}]`
      };
    else
      brackets = flat ? {
        open: "{ ",
        close: " }"
      } : {
        open: `{
${childIndent}`,
        close: `
${indent}}`
      };
    tokens.push(brackets.open);
    for (let i = 0;i < entries.length; ++i) {
      const entry = entries[i];
      if (i)
        tokens.push(flat ? `, ` : `,
${childIndent}`);
      if (!isArray)
        tokens.push(`${JSON.stringify(entry[0])}: `);
      const key = isArray ? undefined : entry[0];
      const flatten = flat || key === "timings" || parentKey === "headers";
      innerJsonStringify(isArray ? entry : entry[1], tokens, childIndent, flatten, key);
    }
    tokens.push(brackets.close);
  }
});

// node_modules/playwright-core/lib/generated/consoleApiSource.js
var require_consoleApiSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/consoleApi.ts
var consoleApi_exports = {};
__export(consoleApi_exports, {
  default: () => consoleApi_default
});
module.exports = __toCommonJS(consoleApi_exports);

// packages/playwright-core/src/utils/isomorphic/stringUtils.ts
function escapeWithQuotes(text, char = "'") {
  const stringified = JSON.stringify(text);
  const escapedText = stringified.substring(1, stringified.length - 1).replace(/\\\\"/g, '"');
  if (char === "'")
    return char + escapedText.replace(/[']/g, "\\\\'") + char;
  if (char === '"')
    return char + escapedText.replace(/["]/g, '\\\\"') + char;
  if (char === "\`")
    return char + escapedText.replace(/[\`]/g, "\`") + char;
  throw new Error("Invalid escape char");
}
function toTitleCase(name) {
  return name.charAt(0).toUpperCase() + name.substring(1);
}
function toSnakeCase(name) {
  return name.replace(/([a-z0-9])([A-Z])/g, "$1_$2").replace(/([A-Z])([A-Z][a-z])/g, "$1_$2").toLowerCase();
}
function normalizeEscapedRegexQuotes(source) {
  return source.replace(/(^|[^\\\\])(\\\\\\\\)*\\\\(['"\`])/g, "$1$2$3");
}
function escapeRegexForSelector(re) {
  if (re.unicode || re.unicodeSets)
    return String(re);
  return String(re).replace(/(^|[^\\\\])(\\\\\\\\)*(["'\`])/g, "$1$2\\\\$3").replace(/>>/g, "\\\\>\\\\>");
}
function escapeForTextSelector(text, exact) {
  if (typeof text !== "string")
    return escapeRegexForSelector(text);
  return \`\${JSON.stringify(text)}\${exact ? "s" : "i"}\`;
}
function escapeForAttributeSelector(value, exact) {
  if (typeof value !== "string")
    return escapeRegexForSelector(value);
  return \`"\${value.replace(/\\\\/g, "\\\\\\\\").replace(/["]/g, '\\\\"')}"\${exact ? "s" : "i"}\`;
}

// packages/playwright-core/src/utils/isomorphic/locatorUtils.ts
function getByAttributeTextSelector(attrName, text, options) {
  return \`internal:attr=[\${attrName}=\${escapeForAttributeSelector(text, (options == null ? void 0 : options.exact) || false)}]\`;
}
function getByTestIdSelector(testIdAttributeName, testId) {
  return \`internal:testid=[\${testIdAttributeName}=\${escapeForAttributeSelector(testId, true)}]\`;
}
function getByLabelSelector(text, options) {
  return "internal:label=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));
}
function getByAltTextSelector(text, options) {
  return getByAttributeTextSelector("alt", text, options);
}
function getByTitleSelector(text, options) {
  return getByAttributeTextSelector("title", text, options);
}
function getByPlaceholderSelector(text, options) {
  return getByAttributeTextSelector("placeholder", text, options);
}
function getByTextSelector(text, options) {
  return "internal:text=" + escapeForTextSelector(text, !!(options == null ? void 0 : options.exact));
}
function getByRoleSelector(role, options = {}) {
  const props = [];
  if (options.checked !== void 0)
    props.push(["checked", String(options.checked)]);
  if (options.disabled !== void 0)
    props.push(["disabled", String(options.disabled)]);
  if (options.selected !== void 0)
    props.push(["selected", String(options.selected)]);
  if (options.expanded !== void 0)
    props.push(["expanded", String(options.expanded)]);
  if (options.includeHidden !== void 0)
    props.push(["include-hidden", String(options.includeHidden)]);
  if (options.level !== void 0)
    props.push(["level", String(options.level)]);
  if (options.name !== void 0)
    props.push(["name", escapeForAttributeSelector(options.name, !!options.exact)]);
  if (options.pressed !== void 0)
    props.push(["pressed", String(options.pressed)]);
  return \`internal:role=\${role}\${props.map(([n, v]) => \`[\${n}=\${v}]\`).join("")}\`;
}

// packages/playwright-core/src/utils/isomorphic/cssTokenizer.ts
var between = function(num, first, last) {
  return num >= first && num <= last;
};
function digit(code) {
  return between(code, 48, 57);
}
function hexdigit(code) {
  return digit(code) || between(code, 65, 70) || between(code, 97, 102);
}
function uppercaseletter(code) {
  return between(code, 65, 90);
}
function lowercaseletter(code) {
  return between(code, 97, 122);
}
function letter(code) {
  return uppercaseletter(code) || lowercaseletter(code);
}
function nonascii(code) {
  return code >= 128;
}
function namestartchar(code) {
  return letter(code) || nonascii(code) || code === 95;
}
function namechar(code) {
  return namestartchar(code) || digit(code) || code === 45;
}
function nonprintable(code) {
  return between(code, 0, 8) || code === 11 || between(code, 14, 31) || code === 127;
}
function newline(code) {
  return code === 10;
}
function whitespace(code) {
  return newline(code) || code === 9 || code === 32;
}
var maximumallowedcodepoint = 1114111;
var InvalidCharacterError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "InvalidCharacterError";
  }
};
function preprocess(str) {
  const codepoints = [];
  for (let i = 0; i < str.length; i++) {
    let code = str.charCodeAt(i);
    if (code === 13 && str.charCodeAt(i + 1) === 10) {
      code = 10;
      i++;
    }
    if (code === 13 || code === 12)
      code = 10;
    if (code === 0)
      code = 65533;
    if (between(code, 55296, 56319) && between(str.charCodeAt(i + 1), 56320, 57343)) {
      const lead = code - 55296;
      const trail = str.charCodeAt(i + 1) - 56320;
      code = Math.pow(2, 16) + lead * Math.pow(2, 10) + trail;
      i++;
    }
    codepoints.push(code);
  }
  return codepoints;
}
function stringFromCode(code) {
  if (code <= 65535)
    return String.fromCharCode(code);
  code -= Math.pow(2, 16);
  const lead = Math.floor(code / Math.pow(2, 10)) + 55296;
  const trail = code % Math.pow(2, 10) + 56320;
  return String.fromCharCode(lead) + String.fromCharCode(trail);
}
function tokenize(str1) {
  const str = preprocess(str1);
  let i = -1;
  const tokens = [];
  let code;
  let line = 0;
  let column = 0;
  let lastLineLength = 0;
  const incrLineno = function() {
    line += 1;
    lastLineLength = column;
    column = 0;
  };
  const locStart = { line, column };
  const codepoint = function(i2) {
    if (i2 >= str.length)
      return -1;
    return str[i2];
  };
  const next = function(num) {
    if (num === void 0)
      num = 1;
    if (num > 3)
      throw "Spec Error: no more than three codepoints of lookahead.";
    return codepoint(i + num);
  };
  const consume = function(num) {
    if (num === void 0)
      num = 1;
    i += num;
    code = codepoint(i);
    if (newline(code))
      incrLineno();
    else
      column += num;
    return true;
  };
  const reconsume = function() {
    i -= 1;
    if (newline(code)) {
      line -= 1;
      column = lastLineLength;
    } else {
      column -= 1;
    }
    locStart.line = line;
    locStart.column = column;
    return true;
  };
  const eof = function(codepoint2) {
    if (codepoint2 === void 0)
      codepoint2 = code;
    return codepoint2 === -1;
  };
  const donothing = function() {
  };
  const parseerror = function() {
  };
  const consumeAToken = function() {
    consumeComments();
    consume();
    if (whitespace(code)) {
      while (whitespace(next()))
        consume();
      return new WhitespaceToken();
    } else if (code === 34) {
      return consumeAStringToken();
    } else if (code === 35) {
      if (namechar(next()) || areAValidEscape(next(1), next(2))) {
        const token = new HashToken("");
        if (wouldStartAnIdentifier(next(1), next(2), next(3)))
          token.type = "id";
        token.value = consumeAName();
        return token;
      } else {
        return new DelimToken(code);
      }
    } else if (code === 36) {
      if (next() === 61) {
        consume();
        return new SuffixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 39) {
      return consumeAStringToken();
    } else if (code === 40) {
      return new OpenParenToken();
    } else if (code === 41) {
      return new CloseParenToken();
    } else if (code === 42) {
      if (next() === 61) {
        consume();
        return new SubstringMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 43) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 44) {
      return new CommaToken();
    } else if (code === 45) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else if (next(1) === 45 && next(2) === 62) {
        consume(2);
        return new CDCToken();
      } else if (startsWithAnIdentifier()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 46) {
      if (startsWithANumber()) {
        reconsume();
        return consumeANumericToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 58) {
      return new ColonToken();
    } else if (code === 59) {
      return new SemicolonToken();
    } else if (code === 60) {
      if (next(1) === 33 && next(2) === 45 && next(3) === 45) {
        consume(3);
        return new CDOToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 64) {
      if (wouldStartAnIdentifier(next(1), next(2), next(3)))
        return new AtKeywordToken(consumeAName());
      else
        return new DelimToken(code);
    } else if (code === 91) {
      return new OpenSquareToken();
    } else if (code === 92) {
      if (startsWithAValidEscape()) {
        reconsume();
        return consumeAnIdentlikeToken();
      } else {
        parseerror();
        return new DelimToken(code);
      }
    } else if (code === 93) {
      return new CloseSquareToken();
    } else if (code === 94) {
      if (next() === 61) {
        consume();
        return new PrefixMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 123) {
      return new OpenCurlyToken();
    } else if (code === 124) {
      if (next() === 61) {
        consume();
        return new DashMatchToken();
      } else if (next() === 124) {
        consume();
        return new ColumnToken();
      } else {
        return new DelimToken(code);
      }
    } else if (code === 125) {
      return new CloseCurlyToken();
    } else if (code === 126) {
      if (next() === 61) {
        consume();
        return new IncludeMatchToken();
      } else {
        return new DelimToken(code);
      }
    } else if (digit(code)) {
      reconsume();
      return consumeANumericToken();
    } else if (namestartchar(code)) {
      reconsume();
      return consumeAnIdentlikeToken();
    } else if (eof()) {
      return new EOFToken();
    } else {
      return new DelimToken(code);
    }
  };
  const consumeComments = function() {
    while (next(1) === 47 && next(2) === 42) {
      consume(2);
      while (true) {
        consume();
        if (code === 42 && next() === 47) {
          consume();
          break;
        } else if (eof()) {
          parseerror();
          return;
        }
      }
    }
  };
  const consumeANumericToken = function() {
    const num = consumeANumber();
    if (wouldStartAnIdentifier(next(1), next(2), next(3))) {
      const token = new DimensionToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      token.unit = consumeAName();
      return token;
    } else if (next() === 37) {
      consume();
      const token = new PercentageToken();
      token.value = num.value;
      token.repr = num.repr;
      return token;
    } else {
      const token = new NumberToken();
      token.value = num.value;
      token.repr = num.repr;
      token.type = num.type;
      return token;
    }
  };
  const consumeAnIdentlikeToken = function() {
    const str2 = consumeAName();
    if (str2.toLowerCase() === "url" && next() === 40) {
      consume();
      while (whitespace(next(1)) && whitespace(next(2)))
        consume();
      if (next() === 34 || next() === 39)
        return new FunctionToken(str2);
      else if (whitespace(next()) && (next(2) === 34 || next(2) === 39))
        return new FunctionToken(str2);
      else
        return consumeAURLToken();
    } else if (next() === 40) {
      consume();
      return new FunctionToken(str2);
    } else {
      return new IdentToken(str2);
    }
  };
  const consumeAStringToken = function(endingCodePoint) {
    if (endingCodePoint === void 0)
      endingCodePoint = code;
    let string = "";
    while (consume()) {
      if (code === endingCodePoint || eof()) {
        return new StringToken(string);
      } else if (newline(code)) {
        parseerror();
        reconsume();
        return new BadStringToken();
      } else if (code === 92) {
        if (eof(next()))
          donothing();
        else if (newline(next()))
          consume();
        else
          string += stringFromCode(consumeEscape());
      } else {
        string += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeAURLToken = function() {
    const token = new URLToken("");
    while (whitespace(next()))
      consume();
    if (eof(next()))
      return token;
    while (consume()) {
      if (code === 41 || eof()) {
        return token;
      } else if (whitespace(code)) {
        while (whitespace(next()))
          consume();
        if (next() === 41 || eof(next())) {
          consume();
          return token;
        } else {
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else if (code === 34 || code === 39 || code === 40 || nonprintable(code)) {
        parseerror();
        consumeTheRemnantsOfABadURL();
        return new BadURLToken();
      } else if (code === 92) {
        if (startsWithAValidEscape()) {
          token.value += stringFromCode(consumeEscape());
        } else {
          parseerror();
          consumeTheRemnantsOfABadURL();
          return new BadURLToken();
        }
      } else {
        token.value += stringFromCode(code);
      }
    }
    throw new Error("Internal error");
  };
  const consumeEscape = function() {
    consume();
    if (hexdigit(code)) {
      const digits = [code];
      for (let total = 0; total < 5; total++) {
        if (hexdigit(next())) {
          consume();
          digits.push(code);
        } else {
          break;
        }
      }
      if (whitespace(next()))
        consume();
      let value = parseInt(digits.map(function(x) {
        return String.fromCharCode(x);
      }).join(""), 16);
      if (value > maximumallowedcodepoint)
        value = 65533;
      return value;
    } else if (eof()) {
      return 65533;
    } else {
      return code;
    }
  };
  const areAValidEscape = function(c1, c2) {
    if (c1 !== 92)
      return false;
    if (newline(c2))
      return false;
    return true;
  };
  const startsWithAValidEscape = function() {
    return areAValidEscape(code, next());
  };
  const wouldStartAnIdentifier = function(c1, c2, c3) {
    if (c1 === 45)
      return namestartchar(c2) || c2 === 45 || areAValidEscape(c2, c3);
    else if (namestartchar(c1))
      return true;
    else if (c1 === 92)
      return areAValidEscape(c1, c2);
    else
      return false;
  };
  const startsWithAnIdentifier = function() {
    return wouldStartAnIdentifier(code, next(1), next(2));
  };
  const wouldStartANumber = function(c1, c2, c3) {
    if (c1 === 43 || c1 === 45) {
      if (digit(c2))
        return true;
      if (c2 === 46 && digit(c3))
        return true;
      return false;
    } else if (c1 === 46) {
      if (digit(c2))
        return true;
      return false;
    } else if (digit(c1)) {
      return true;
    } else {
      return false;
    }
  };
  const startsWithANumber = function() {
    return wouldStartANumber(code, next(1), next(2));
  };
  const consumeAName = function() {
    let result = "";
    while (consume()) {
      if (namechar(code)) {
        result += stringFromCode(code);
      } else if (startsWithAValidEscape()) {
        result += stringFromCode(consumeEscape());
      } else {
        reconsume();
        return result;
      }
    }
    throw new Error("Internal parse error");
  };
  const consumeANumber = function() {
    let repr = "";
    let type = "integer";
    if (next() === 43 || next() === 45) {
      consume();
      repr += stringFromCode(code);
    }
    while (digit(next())) {
      consume();
      repr += stringFromCode(code);
    }
    if (next(1) === 46 && digit(next(2))) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const c1 = next(1), c2 = next(2), c3 = next(3);
    if ((c1 === 69 || c1 === 101) && digit(c2)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    } else if ((c1 === 69 || c1 === 101) && (c2 === 43 || c2 === 45) && digit(c3)) {
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      consume();
      repr += stringFromCode(code);
      type = "number";
      while (digit(next())) {
        consume();
        repr += stringFromCode(code);
      }
    }
    const value = convertAStringToANumber(repr);
    return { type, value, repr };
  };
  const convertAStringToANumber = function(string) {
    return +string;
  };
  const consumeTheRemnantsOfABadURL = function() {
    while (consume()) {
      if (code === 41 || eof()) {
        return;
      } else if (startsWithAValidEscape()) {
        consumeEscape();
        donothing();
      } else {
        donothing();
      }
    }
  };
  let iterationCount = 0;
  while (!eof(next())) {
    tokens.push(consumeAToken());
    iterationCount++;
    if (iterationCount > str.length * 2)
      throw new Error("I'm infinite-looping!");
  }
  return tokens;
}
var CSSParserToken = class {
  constructor() {
    this.tokenType = "";
  }
  toJSON() {
    return { token: this.tokenType };
  }
  toString() {
    return this.tokenType;
  }
  toSource() {
    return "" + this;
  }
};
var BadStringToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "BADSTRING";
  }
};
var BadURLToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "BADURL";
  }
};
var WhitespaceToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "WHITESPACE";
  }
  toString() {
    return "WS";
  }
  toSource() {
    return " ";
  }
};
var CDOToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "CDO";
  }
  toSource() {
    return "<!--";
  }
};
var CDCToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "CDC";
  }
  toSource() {
    return "-->";
  }
};
var ColonToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ":";
  }
};
var SemicolonToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ";";
  }
};
var CommaToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = ",";
  }
};
var GroupingToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.value = "";
    this.mirror = "";
  }
};
var OpenCurlyToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "{";
    this.value = "{";
    this.mirror = "}";
  }
};
var CloseCurlyToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "}";
    this.value = "}";
    this.mirror = "{";
  }
};
var OpenSquareToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "[";
    this.value = "[";
    this.mirror = "]";
  }
};
var CloseSquareToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "]";
    this.value = "]";
    this.mirror = "[";
  }
};
var OpenParenToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = "(";
    this.value = "(";
    this.mirror = ")";
  }
};
var CloseParenToken = class extends GroupingToken {
  constructor() {
    super();
    this.tokenType = ")";
    this.value = ")";
    this.mirror = "(";
  }
};
var IncludeMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "~=";
  }
};
var DashMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "|=";
  }
};
var PrefixMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "^=";
  }
};
var SuffixMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "$=";
  }
};
var SubstringMatchToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "*=";
  }
};
var ColumnToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "||";
  }
};
var EOFToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.tokenType = "EOF";
  }
  toSource() {
    return "";
  }
};
var DelimToken = class extends CSSParserToken {
  constructor(code) {
    super();
    this.tokenType = "DELIM";
    this.value = "";
    this.value = stringFromCode(code);
  }
  toString() {
    return "DELIM(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
  toSource() {
    if (this.value === "\\\\")
      return "\\\\\\n";
    else
      return this.value;
  }
};
var StringValuedToken = class extends CSSParserToken {
  constructor() {
    super(...arguments);
    this.value = "";
  }
  ASCIIMatch(str) {
    return this.value.toLowerCase() === str.toLowerCase();
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    return json;
  }
};
var IdentToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "IDENT";
    this.value = val;
  }
  toString() {
    return "IDENT(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value);
  }
};
var FunctionToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "FUNCTION";
    this.value = val;
    this.mirror = ")";
  }
  toString() {
    return "FUNCTION(" + this.value + ")";
  }
  toSource() {
    return escapeIdent(this.value) + "(";
  }
};
var AtKeywordToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "AT-KEYWORD";
    this.value = val;
  }
  toString() {
    return "AT(" + this.value + ")";
  }
  toSource() {
    return "@" + escapeIdent(this.value);
  }
};
var HashToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "HASH";
    this.value = val;
    this.type = "unrestricted";
  }
  toString() {
    return "HASH(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    return json;
  }
  toSource() {
    if (this.type === "id")
      return "#" + escapeIdent(this.value);
    else
      return "#" + escapeHash(this.value);
  }
};
var StringToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "STRING";
    this.value = val;
  }
  toString() {
    return '"' + escapeString(this.value) + '"';
  }
};
var URLToken = class extends StringValuedToken {
  constructor(val) {
    super();
    this.tokenType = "URL";
    this.value = val;
  }
  toString() {
    return "URL(" + this.value + ")";
  }
  toSource() {
    return 'url("' + escapeString(this.value) + '")';
  }
};
var NumberToken = class extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "NUMBER";
    this.type = "integer";
    this.repr = "";
  }
  toString() {
    if (this.type === "integer")
      return "INT(" + this.value + ")";
    return "NUMBER(" + this.value + ")";
  }
  toJSON() {
    const json = super.toJSON();
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr;
  }
};
var PercentageToken = class extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "PERCENTAGE";
    this.repr = "";
  }
  toString() {
    return "PERCENTAGE(" + this.value + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.repr = this.repr;
    return json;
  }
  toSource() {
    return this.repr + "%";
  }
};
var DimensionToken = class extends CSSParserToken {
  constructor() {
    super();
    this.tokenType = "DIMENSION";
    this.type = "integer";
    this.repr = "";
    this.unit = "";
  }
  toString() {
    return "DIM(" + this.value + "," + this.unit + ")";
  }
  toJSON() {
    const json = this.constructor.prototype.constructor.prototype.toJSON.call(this);
    json.value = this.value;
    json.type = this.type;
    json.repr = this.repr;
    json.unit = this.unit;
    return json;
  }
  toSource() {
    const source = this.repr;
    let unit = escapeIdent(this.unit);
    if (unit[0].toLowerCase() === "e" && (unit[1] === "-" || between(unit.charCodeAt(1), 48, 57))) {
      unit = "\\\\65 " + unit.slice(1, unit.length);
    }
    return source + unit;
  }
};
function escapeIdent(string) {
  string = "" + string;
  let result = "";
  const firstcode = string.charCodeAt(0);
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127 || i === 0 && between(code, 48, 57) || i === 1 && between(code, 48, 57) && firstcode === 45)
      result += "\\\\" + code.toString(16) + " ";
    else if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
      result += string[i];
    else
      result += "\\\\" + string[i];
  }
  return result;
}
function escapeHash(string) {
  string = "" + string;
  let result = "";
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (code >= 128 || code === 45 || code === 95 || between(code, 48, 57) || between(code, 65, 90) || between(code, 97, 122))
      result += string[i];
    else
      result += "\\\\" + code.toString(16) + " ";
  }
  return result;
}
function escapeString(string) {
  string = "" + string;
  let result = "";
  for (let i = 0; i < string.length; i++) {
    const code = string.charCodeAt(i);
    if (code === 0)
      throw new InvalidCharacterError("Invalid character: the input contains U+0000.");
    if (between(code, 1, 31) || code === 127)
      result += "\\\\" + code.toString(16) + " ";
    else if (code === 34 || code === 92)
      result += "\\\\" + string[i];
    else
      result += string[i];
  }
  return result;
}

// packages/playwright-core/src/utils/isomorphic/cssParser.ts
var InvalidSelectorError = class extends Error {
};
function parseCSS(selector, customNames) {
  let tokens;
  try {
    tokens = tokenize(selector);
    if (!(tokens[tokens.length - 1] instanceof EOFToken))
      tokens.push(new EOFToken());
  } catch (e) {
    const newMessage = e.message + \` while parsing selector "\${selector}"\`;
    const index = (e.stack || "").indexOf(e.message);
    if (index !== -1)
      e.stack = e.stack.substring(0, index) + newMessage + e.stack.substring(index + e.message.length);
    e.message = newMessage;
    throw e;
  }
  const unsupportedToken = tokens.find((token) => {
    return token instanceof AtKeywordToken || token instanceof BadStringToken || token instanceof BadURLToken || token instanceof ColumnToken || token instanceof CDOToken || token instanceof CDCToken || token instanceof SemicolonToken || // TODO: Consider using these for something, e.g. to escape complex strings.
    // For example :xpath{ (//div/bar[@attr="foo"])[2]/baz }
    // Or this way :xpath( {complex-xpath-goes-here("hello")} )
    token instanceof OpenCurlyToken || token instanceof CloseCurlyToken || // TODO: Consider treating these as strings?
    token instanceof URLToken || token instanceof PercentageToken;
  });
  if (unsupportedToken)
    throw new InvalidSelectorError(\`Unsupported token "\${unsupportedToken.toSource()}" while parsing selector "\${selector}"\`);
  let pos = 0;
  const names = /* @__PURE__ */ new Set();
  function unexpected() {
    return new InvalidSelectorError(\`Unexpected token "\${tokens[pos].toSource()}" while parsing selector "\${selector}"\`);
  }
  function skipWhitespace() {
    while (tokens[pos] instanceof WhitespaceToken)
      pos++;
  }
  function isIdent(p = pos) {
    return tokens[p] instanceof IdentToken;
  }
  function isString(p = pos) {
    return tokens[p] instanceof StringToken;
  }
  function isNumber(p = pos) {
    return tokens[p] instanceof NumberToken;
  }
  function isComma(p = pos) {
    return tokens[p] instanceof CommaToken;
  }
  function isOpenParen(p = pos) {
    return tokens[p] instanceof OpenParenToken;
  }
  function isCloseParen(p = pos) {
    return tokens[p] instanceof CloseParenToken;
  }
  function isFunction(p = pos) {
    return tokens[p] instanceof FunctionToken;
  }
  function isStar(p = pos) {
    return tokens[p] instanceof DelimToken && tokens[p].value === "*";
  }
  function isEOF(p = pos) {
    return tokens[p] instanceof EOFToken;
  }
  function isClauseCombinator(p = pos) {
    return tokens[p] instanceof DelimToken && [">", "+", "~"].includes(tokens[p].value);
  }
  function isSelectorClauseEnd(p = pos) {
    return isComma(p) || isCloseParen(p) || isEOF(p) || isClauseCombinator(p) || tokens[p] instanceof WhitespaceToken;
  }
  function consumeFunctionArguments() {
    const result2 = [consumeArgument()];
    while (true) {
      skipWhitespace();
      if (!isComma())
        break;
      pos++;
      result2.push(consumeArgument());
    }
    return result2;
  }
  function consumeArgument() {
    skipWhitespace();
    if (isNumber())
      return tokens[pos++].value;
    if (isString())
      return tokens[pos++].value;
    return consumeComplexSelector();
  }
  function consumeComplexSelector() {
    const result2 = { simples: [] };
    skipWhitespace();
    if (isClauseCombinator()) {
      result2.simples.push({ selector: { functions: [{ name: "scope", args: [] }] }, combinator: "" });
    } else {
      result2.simples.push({ selector: consumeSimpleSelector(), combinator: "" });
    }
    while (true) {
      skipWhitespace();
      if (isClauseCombinator()) {
        result2.simples[result2.simples.length - 1].combinator = tokens[pos++].value;
        skipWhitespace();
      } else if (isSelectorClauseEnd()) {
        break;
      }
      result2.simples.push({ combinator: "", selector: consumeSimpleSelector() });
    }
    return result2;
  }
  function consumeSimpleSelector() {
    let rawCSSString = "";
    const functions = [];
    while (!isSelectorClauseEnd()) {
      if (isIdent() || isStar()) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof HashToken) {
        rawCSSString += tokens[pos++].toSource();
      } else if (tokens[pos] instanceof DelimToken && tokens[pos].value === ".") {
        pos++;
        if (isIdent())
          rawCSSString += "." + tokens[pos++].toSource();
        else
          throw unexpected();
      } else if (tokens[pos] instanceof ColonToken) {
        pos++;
        if (isIdent()) {
          if (!customNames.has(tokens[pos].value.toLowerCase())) {
            rawCSSString += ":" + tokens[pos++].toSource();
          } else {
            const name = tokens[pos++].value.toLowerCase();
            functions.push({ name, args: [] });
            names.add(name);
          }
        } else if (isFunction()) {
          const name = tokens[pos++].value.toLowerCase();
          if (!customNames.has(name)) {
            rawCSSString += \`:\${name}(\${consumeBuiltinFunctionArguments()})\`;
          } else {
            functions.push({ name, args: consumeFunctionArguments() });
            names.add(name);
          }
          skipWhitespace();
          if (!isCloseParen())
            throw unexpected();
          pos++;
        } else {
          throw unexpected();
        }
      } else if (tokens[pos] instanceof OpenSquareToken) {
        rawCSSString += "[";
        pos++;
        while (!(tokens[pos] instanceof CloseSquareToken) && !isEOF())
          rawCSSString += tokens[pos++].toSource();
        if (!(tokens[pos] instanceof CloseSquareToken))
          throw unexpected();
        rawCSSString += "]";
        pos++;
      } else {
        throw unexpected();
      }
    }
    if (!rawCSSString && !functions.length)
      throw unexpected();
    return { css: rawCSSString || void 0, functions };
  }
  function consumeBuiltinFunctionArguments() {
    let s = "";
    let balance = 1;
    while (!isEOF()) {
      if (isOpenParen() || isFunction())
        balance++;
      if (isCloseParen())
        balance--;
      if (!balance)
        break;
      s += tokens[pos++].toSource();
    }
    return s;
  }
  const result = consumeFunctionArguments();
  if (!isEOF())
    throw unexpected();
  if (result.some((arg) => typeof arg !== "object" || !("simples" in arg)))
    throw new InvalidSelectorError(\`Error while parsing selector "\${selector}"\`);
  return { selector: result, names: Array.from(names) };
}

// packages/playwright-core/src/utils/isomorphic/selectorParser.ts
var kNestedSelectorNames = /* @__PURE__ */ new Set(["internal:has", "internal:has-not", "internal:and", "internal:or", "internal:chain", "left-of", "right-of", "above", "below", "near"]);
var kNestedSelectorNamesWithDistance = /* @__PURE__ */ new Set(["left-of", "right-of", "above", "below", "near"]);
var customCSSNames = /* @__PURE__ */ new Set(["not", "is", "where", "has", "scope", "light", "visible", "text", "text-matches", "text-is", "has-text", "above", "below", "right-of", "left-of", "near", "nth-match"]);
function parseSelector(selector) {
  const parsedStrings = parseSelectorString(selector);
  const parts = [];
  for (const part of parsedStrings.parts) {
    if (part.name === "css" || part.name === "css:light") {
      if (part.name === "css:light")
        part.body = ":light(" + part.body + ")";
      const parsedCSS = parseCSS(part.body, customCSSNames);
      parts.push({
        name: "css",
        body: parsedCSS.selector,
        source: part.body
      });
      continue;
    }
    if (kNestedSelectorNames.has(part.name)) {
      let innerSelector;
      let distance;
      try {
        const unescaped = JSON.parse("[" + part.body + "]");
        if (!Array.isArray(unescaped) || unescaped.length < 1 || unescaped.length > 2 || typeof unescaped[0] !== "string")
          throw new InvalidSelectorError(\`Malformed selector: \${part.name}=\` + part.body);
        innerSelector = unescaped[0];
        if (unescaped.length === 2) {
          if (typeof unescaped[1] !== "number" || !kNestedSelectorNamesWithDistance.has(part.name))
            throw new InvalidSelectorError(\`Malformed selector: \${part.name}=\` + part.body);
          distance = unescaped[1];
        }
      } catch (e) {
        throw new InvalidSelectorError(\`Malformed selector: \${part.name}=\` + part.body);
      }
      const nested = { name: part.name, source: part.body, body: { parsed: parseSelector(innerSelector), distance } };
      const lastFrame = [...nested.body.parsed.parts].reverse().find((part2) => part2.name === "internal:control" && part2.body === "enter-frame");
      const lastFrameIndex = lastFrame ? nested.body.parsed.parts.indexOf(lastFrame) : -1;
      if (lastFrameIndex !== -1 && selectorPartsEqual(nested.body.parsed.parts.slice(0, lastFrameIndex + 1), parts.slice(0, lastFrameIndex + 1)))
        nested.body.parsed.parts.splice(0, lastFrameIndex + 1);
      parts.push(nested);
      continue;
    }
    parts.push({ ...part, source: part.body });
  }
  if (kNestedSelectorNames.has(parts[0].name))
    throw new InvalidSelectorError(\`"\${parts[0].name}" selector cannot be first\`);
  return {
    capture: parsedStrings.capture,
    parts
  };
}
function selectorPartsEqual(list1, list2) {
  return stringifySelector({ parts: list1 }) === stringifySelector({ parts: list2 });
}
function stringifySelector(selector, forceEngineName) {
  if (typeof selector === "string")
    return selector;
  return selector.parts.map((p, i) => {
    let includeEngine = true;
    if (!forceEngineName && i !== selector.capture) {
      if (p.name === "css")
        includeEngine = false;
      else if (p.name === "xpath" && p.source.startsWith("//") || p.source.startsWith(".."))
        includeEngine = false;
    }
    const prefix = includeEngine ? p.name + "=" : "";
    return \`\${i === selector.capture ? "*" : ""}\${prefix}\${p.source}\`;
  }).join(" >> ");
}
function parseSelectorString(selector) {
  let index = 0;
  let quote;
  let start = 0;
  const result = { parts: [] };
  const append = () => {
    const part = selector.substring(start, index).trim();
    const eqIndex = part.indexOf("=");
    let name;
    let body;
    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {
      name = part.substring(0, eqIndex).trim();
      body = part.substring(eqIndex + 1);
    } else if (part.length > 1 && part[0] === '"' && part[part.length - 1] === '"') {
      name = "text";
      body = part;
    } else if (part.length > 1 && part[0] === "'" && part[part.length - 1] === "'") {
      name = "text";
      body = part;
    } else if (/^\\(*\\/\\//.test(part) || part.startsWith("..")) {
      name = "xpath";
      body = part;
    } else {
      name = "css";
      body = part;
    }
    let capture = false;
    if (name[0] === "*") {
      capture = true;
      name = name.substring(1);
    }
    result.parts.push({ name, body });
    if (capture) {
      if (result.capture !== void 0)
        throw new InvalidSelectorError(\`Only one of the selectors can capture using * modifier\`);
      result.capture = result.parts.length - 1;
    }
  };
  if (!selector.includes(">>")) {
    index = selector.length;
    append();
    return result;
  }
  const shouldIgnoreTextSelectorQuote = () => {
    const prefix = selector.substring(start, index);
    const match = prefix.match(/^\\s*text\\s*=(.*)$/);
    return !!match && !!match[1];
  };
  while (index < selector.length) {
    const c = selector[index];
    if (c === "\\\\" && index + 1 < selector.length) {
      index += 2;
    } else if (c === quote) {
      quote = void 0;
      index++;
    } else if (!quote && (c === '"' || c === "'" || c === "\`") && !shouldIgnoreTextSelectorQuote()) {
      quote = c;
      index++;
    } else if (!quote && c === ">" && selector[index + 1] === ">") {
      append();
      index += 2;
      start = index;
    } else {
      index++;
    }
  }
  append();
  return result;
}
function parseAttributeSelector(selector, allowUnquotedStrings) {
  let wp = 0;
  let EOL = selector.length === 0;
  const next = () => selector[wp] || "";
  const eat1 = () => {
    const result2 = next();
    ++wp;
    EOL = wp >= selector.length;
    return result2;
  };
  const syntaxError = (stage) => {
    if (EOL)
      throw new InvalidSelectorError(\`Unexpected end of selector while parsing selector \\\`\${selector}\\\`\`);
    throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - unexpected symbol "\${next()}" at position \${wp}\` + (stage ? " during " + stage : ""));
  };
  function skipSpaces() {
    while (!EOL && /\\s/.test(next()))
      eat1();
  }
  function isCSSNameChar(char) {
    return char >= "\\x80" || char >= "0" && char <= "9" || char >= "A" && char <= "Z" || char >= "a" && char <= "z" || char >= "0" && char <= "9" || char === "_" || char === "-";
  }
  function readIdentifier() {
    let result2 = "";
    skipSpaces();
    while (!EOL && isCSSNameChar(next()))
      result2 += eat1();
    return result2;
  }
  function readQuotedString(quote) {
    let result2 = eat1();
    if (result2 !== quote)
      syntaxError("parsing quoted string");
    while (!EOL && next() !== quote) {
      if (next() === "\\\\")
        eat1();
      result2 += eat1();
    }
    if (next() !== quote)
      syntaxError("parsing quoted string");
    result2 += eat1();
    return result2;
  }
  function readRegularExpression() {
    if (eat1() !== "/")
      syntaxError("parsing regular expression");
    let source = "";
    let inClass = false;
    while (!EOL) {
      if (next() === "\\\\") {
        source += eat1();
        if (EOL)
          syntaxError("parsing regular expression");
      } else if (inClass && next() === "]") {
        inClass = false;
      } else if (!inClass && next() === "[") {
        inClass = true;
      } else if (!inClass && next() === "/") {
        break;
      }
      source += eat1();
    }
    if (eat1() !== "/")
      syntaxError("parsing regular expression");
    let flags = "";
    while (!EOL && next().match(/[dgimsuy]/))
      flags += eat1();
    try {
      return new RegExp(source, flags);
    } catch (e) {
      throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\`: \${e.message}\`);
    }
  }
  function readAttributeToken() {
    let token = "";
    skipSpaces();
    if (next() === \`'\` || next() === \`"\`)
      token = readQuotedString(next()).slice(1, -1);
    else
      token = readIdentifier();
    if (!token)
      syntaxError("parsing property path");
    return token;
  }
  function readOperator() {
    skipSpaces();
    let op = "";
    if (!EOL)
      op += eat1();
    if (!EOL && op !== "=")
      op += eat1();
    if (!["=", "*=", "^=", "$=", "|=", "~="].includes(op))
      syntaxError("parsing operator");
    return op;
  }
  function readAttribute() {
    eat1();
    const jsonPath = [];
    jsonPath.push(readAttributeToken());
    skipSpaces();
    while (next() === ".") {
      eat1();
      jsonPath.push(readAttributeToken());
      skipSpaces();
    }
    if (next() === "]") {
      eat1();
      return { name: jsonPath.join("."), jsonPath, op: "<truthy>", value: null, caseSensitive: false };
    }
    const operator = readOperator();
    let value = void 0;
    let caseSensitive = true;
    skipSpaces();
    if (next() === "/") {
      if (operator !== "=")
        throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - cannot use \${operator} in attribute with regular expression\`);
      value = readRegularExpression();
    } else if (next() === \`'\` || next() === \`"\`) {
      value = readQuotedString(next()).slice(1, -1);
      skipSpaces();
      if (next() === "i" || next() === "I") {
        caseSensitive = false;
        eat1();
      } else if (next() === "s" || next() === "S") {
        caseSensitive = true;
        eat1();
      }
    } else {
      value = "";
      while (!EOL && (isCSSNameChar(next()) || next() === "+" || next() === "."))
        value += eat1();
      if (value === "true") {
        value = true;
      } else if (value === "false") {
        value = false;
      } else {
        if (!allowUnquotedStrings) {
          value = +value;
          if (Number.isNaN(value))
            syntaxError("parsing attribute value");
        }
      }
    }
    skipSpaces();
    if (next() !== "]")
      syntaxError("parsing attribute value");
    eat1();
    if (operator !== "=" && typeof value !== "string")
      throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - cannot use \${operator} in attribute with non-string matching value - \${value}\`);
    return { name: jsonPath.join("."), jsonPath, op: operator, value, caseSensitive };
  }
  const result = {
    name: "",
    attributes: []
  };
  result.name = readIdentifier();
  skipSpaces();
  while (next() === "[") {
    result.attributes.push(readAttribute());
    skipSpaces();
  }
  if (!EOL)
    syntaxError(void 0);
  if (!result.name && !result.attributes.length)
    throw new InvalidSelectorError(\`Error while parsing selector \\\`\${selector}\\\` - selector cannot be empty\`);
  return result;
}

// packages/playwright-core/src/utils/isomorphic/locatorGenerators.ts
function asLocator(lang, selector, isFrameLocator = false) {
  return asLocators(lang, selector, isFrameLocator)[0];
}
function asLocators(lang, selector, isFrameLocator = false, maxOutputSize = 20, preferredQuote) {
  try {
    return innerAsLocators(new generators[lang](preferredQuote), parseSelector(selector), isFrameLocator, maxOutputSize);
  } catch (e) {
    return [selector];
  }
}
function innerAsLocators(factory, parsed, isFrameLocator = false, maxOutputSize = 20) {
  const parts = [...parsed.parts];
  const tokens = [];
  let nextBase = isFrameLocator ? "frame-locator" : "page";
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const base = nextBase;
    nextBase = "locator";
    if (part.name === "nth") {
      if (part.body === "0")
        tokens.push([factory.generateLocator(base, "first", ""), factory.generateLocator(base, "nth", "0")]);
      else if (part.body === "-1")
        tokens.push([factory.generateLocator(base, "last", ""), factory.generateLocator(base, "nth", "-1")]);
      else
        tokens.push([factory.generateLocator(base, "nth", part.body)]);
      continue;
    }
    if (part.name === "internal:text") {
      const { exact, text } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "text", text, { exact })]);
      continue;
    }
    if (part.name === "internal:has-text") {
      const { exact, text } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-text", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:has-not-text") {
      const { exact, text } = detectExact(part.body);
      if (!exact) {
        tokens.push([factory.generateLocator(base, "has-not-text", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:has") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "has", inner)));
      continue;
    }
    if (part.name === "internal:has-not") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "hasNot", inner)));
      continue;
    }
    if (part.name === "internal:and") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "and", inner)));
      continue;
    }
    if (part.name === "internal:or") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "or", inner)));
      continue;
    }
    if (part.name === "internal:chain") {
      const inners = innerAsLocators(factory, part.body.parsed, false, maxOutputSize);
      tokens.push(inners.map((inner) => factory.generateLocator(base, "chain", inner)));
      continue;
    }
    if (part.name === "internal:label") {
      const { exact, text } = detectExact(part.body);
      tokens.push([factory.generateLocator(base, "label", text, { exact })]);
      continue;
    }
    if (part.name === "internal:role") {
      const attrSelector = parseAttributeSelector(part.body, true);
      const options = { attrs: [] };
      for (const attr of attrSelector.attributes) {
        if (attr.name === "name") {
          options.exact = attr.caseSensitive;
          options.name = attr.value;
        } else {
          if (attr.name === "level" && typeof attr.value === "string")
            attr.value = +attr.value;
          options.attrs.push({ name: attr.name === "include-hidden" ? "includeHidden" : attr.name, value: attr.value });
        }
      }
      tokens.push([factory.generateLocator(base, "role", attrSelector.name, options)]);
      continue;
    }
    if (part.name === "internal:testid") {
      const attrSelector = parseAttributeSelector(part.body, true);
      const { value } = attrSelector.attributes[0];
      tokens.push([factory.generateLocator(base, "test-id", value)]);
      continue;
    }
    if (part.name === "internal:attr") {
      const attrSelector = parseAttributeSelector(part.body, true);
      const { name, value, caseSensitive } = attrSelector.attributes[0];
      const text = value;
      const exact = !!caseSensitive;
      if (name === "placeholder") {
        tokens.push([factory.generateLocator(base, "placeholder", text, { exact })]);
        continue;
      }
      if (name === "alt") {
        tokens.push([factory.generateLocator(base, "alt", text, { exact })]);
        continue;
      }
      if (name === "title") {
        tokens.push([factory.generateLocator(base, "title", text, { exact })]);
        continue;
      }
    }
    if (part.name === "internal:control" && part.body === "enter-frame") {
      const lastTokens = tokens[tokens.length - 1];
      const lastPart = parts[index - 1];
      const transformed = lastTokens.map((token) => factory.chainLocators([token, factory.generateLocator(base, "frame", "")]));
      if (["xpath", "css"].includes(lastPart.name)) {
        transformed.push(
          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] })),
          factory.generateLocator(base, "frame-locator", stringifySelector({ parts: [lastPart] }, true))
        );
      }
      lastTokens.splice(0, lastTokens.length, ...transformed);
      nextBase = "frame-locator";
      continue;
    }
    const nextPart = parts[index + 1];
    const selectorPart = stringifySelector({ parts: [part] });
    const locatorPart = factory.generateLocator(base, "default", selectorPart);
    if (nextPart && ["internal:has-text", "internal:has-not-text"].includes(nextPart.name)) {
      const { exact, text } = detectExact(nextPart.body);
      if (!exact) {
        const nextLocatorPart = factory.generateLocator("locator", nextPart.name === "internal:has-text" ? "has-text" : "has-not-text", text, { exact });
        const options = {};
        if (nextPart.name === "internal:has-text")
          options.hasText = text;
        else
          options.hasNotText = text;
        const combinedPart = factory.generateLocator(base, "default", selectorPart, options);
        tokens.push([factory.chainLocators([locatorPart, nextLocatorPart]), combinedPart]);
        index++;
        continue;
      }
    }
    let locatorPartWithEngine;
    if (["xpath", "css"].includes(part.name)) {
      const selectorPart2 = stringifySelector(
        { parts: [part] },
        /* forceEngineName */
        true
      );
      locatorPartWithEngine = factory.generateLocator(base, "default", selectorPart2);
    }
    tokens.push([locatorPart, locatorPartWithEngine].filter(Boolean));
  }
  return combineTokens(factory, tokens, maxOutputSize);
}
function combineTokens(factory, tokens, maxOutputSize) {
  const currentTokens = tokens.map(() => "");
  const result = [];
  const visit = (index) => {
    if (index === tokens.length) {
      result.push(factory.chainLocators(currentTokens));
      return currentTokens.length < maxOutputSize;
    }
    for (const taken of tokens[index]) {
      currentTokens[index] = taken;
      if (!visit(index + 1))
        return false;
    }
    return true;
  };
  visit(0);
  return result;
}
function detectExact(text) {
  let exact = false;
  const match = text.match(/^\\/(.*)\\/([igm]*)$/);
  if (match)
    return { text: new RegExp(match[1], match[2]) };
  if (text.endsWith('"')) {
    text = JSON.parse(text);
    exact = true;
  } else if (text.endsWith('"s')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = true;
  } else if (text.endsWith('"i')) {
    text = JSON.parse(text.substring(0, text.length - 1));
    exact = false;
  }
  return { exact, text };
}
var JavaScriptLocatorFactory = class {
  constructor(preferredQuote) {
    this.preferredQuote = preferredQuote;
  }
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`locator(\${this.quote(body)}, { hasText: \${this.toHasText(options.hasText)} })\`;
        if (options.hasNotText !== void 0)
          return \`locator(\${this.quote(body)}, { hasNotText: \${this.toHasText(options.hasNotText)} })\`;
        return \`locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`frameLocator(\${this.quote(body)})\`;
      case "frame":
        return \`contentFrame()\`;
      case "nth":
        return \`nth(\${body})\`;
      case "first":
        return \`first()\`;
      case "last":
        return \`last()\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`name: \${this.regexToSourceString(options.name)}\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`name: \${this.quote(options.name)}\`);
          if (options.exact)
            attrs.push(\`exact: true\`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(\`\${name}: \${typeof value === "string" ? this.quote(value) : value}\`);
        const attrString = attrs.length ? \`, { \${attrs.join(", ")} }\` : "";
        return \`getByRole(\${this.quote(body)}\${attrString})\`;
      case "has-text":
        return \`filter({ hasText: \${this.toHasText(body)} })\`;
      case "has-not-text":
        return \`filter({ hasNotText: \${this.toHasText(body)} })\`;
      case "has":
        return \`filter({ has: \${body} })\`;
      case "hasNot":
        return \`filter({ hasNot: \${body} })\`;
      case "and":
        return \`and(\${body})\`;
      case "or":
        return \`or(\${body})\`;
      case "chain":
        return \`locator(\${body})\`;
      case "test-id":
        return \`getByTestId(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact("getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToSourceString(re) {
    return normalizeEscapedRegexQuotes(String(re));
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToSourceString(body)})\`;
    return exact ? \`\${method}(\${this.quote(body)}, { exact: true })\` : \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToSourceString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToSourceString(value);
    return this.quote(value);
  }
  quote(text) {
    var _a;
    return escapeWithQuotes(text, (_a = this.preferredQuote) != null ? _a : "'");
  }
};
var PythonLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`locator(\${this.quote(body)}, has_text=\${this.toHasText(options.hasText)})\`;
        if (options.hasNotText !== void 0)
          return \`locator(\${this.quote(body)}, has_not_text=\${this.toHasText(options.hasNotText)})\`;
        return \`locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`frame_locator(\${this.quote(body)})\`;
      case "frame":
        return \`content_frame\`;
      case "nth":
        return \`nth(\${body})\`;
      case "first":
        return \`first\`;
      case "last":
        return \`last\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`name=\${this.regexToString(options.name)}\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`name=\${this.quote(options.name)}\`);
          if (options.exact)
            attrs.push(\`exact=True\`);
        }
        for (const { name, value } of options.attrs) {
          let valueString = typeof value === "string" ? this.quote(value) : value;
          if (typeof value === "boolean")
            valueString = value ? "True" : "False";
          attrs.push(\`\${toSnakeCase(name)}=\${valueString}\`);
        }
        const attrString = attrs.length ? \`, \${attrs.join(", ")}\` : "";
        return \`get_by_role(\${this.quote(body)}\${attrString})\`;
      case "has-text":
        return \`filter(has_text=\${this.toHasText(body)})\`;
      case "has-not-text":
        return \`filter(has_not_text=\${this.toHasText(body)})\`;
      case "has":
        return \`filter(has=\${body})\`;
      case "hasNot":
        return \`filter(has_not=\${body})\`;
      case "and":
        return \`and_(\${body})\`;
      case "or":
        return \`or_(\${body})\`;
      case "chain":
        return \`locator(\${body})\`;
      case "test-id":
        return \`get_by_test_id(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact("get_by_text", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("get_by_alt_text", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("get_by_placeholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("get_by_label", body, !!options.exact);
      case "title":
        return this.toCallWithExact("get_by_title", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", re.IGNORECASE" : "";
    return \`re.compile(r"\${normalizeEscapedRegexQuotes(body.source).replace(/\\\\\\//, "/").replace(/"/g, '\\\\"')}"\${suffix})\`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToString(body)})\`;
    if (exact)
      return \`\${method}(\${this.quote(body)}, exact=True)\`;
    return \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToString(body);
    return \`\${this.quote(body)}\`;
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
};
var JavaLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    let clazz;
    switch (base) {
      case "page":
        clazz = "Page";
        break;
      case "frame-locator":
        clazz = "FrameLocator";
        break;
      case "locator":
        clazz = "Locator";
        break;
    }
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`locator(\${this.quote(body)}, new \${clazz}.LocatorOptions().setHasText(\${this.toHasText(options.hasText)}))\`;
        if (options.hasNotText !== void 0)
          return \`locator(\${this.quote(body)}, new \${clazz}.LocatorOptions().setHasNotText(\${this.toHasText(options.hasNotText)}))\`;
        return \`locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`frameLocator(\${this.quote(body)})\`;
      case "frame":
        return \`contentFrame()\`;
      case "nth":
        return \`nth(\${body})\`;
      case "first":
        return \`first()\`;
      case "last":
        return \`last()\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`.setName(\${this.regexToString(options.name)})\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`.setName(\${this.quote(options.name)})\`);
          if (options.exact)
            attrs.push(\`.setExact(true)\`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(\`.set\${toTitleCase(name)}(\${typeof value === "string" ? this.quote(value) : value})\`);
        const attrString = attrs.length ? \`, new \${clazz}.GetByRoleOptions()\${attrs.join("")}\` : "";
        return \`getByRole(AriaRole.\${toSnakeCase(body).toUpperCase()}\${attrString})\`;
      case "has-text":
        return \`filter(new \${clazz}.FilterOptions().setHasText(\${this.toHasText(body)}))\`;
      case "has-not-text":
        return \`filter(new \${clazz}.FilterOptions().setHasNotText(\${this.toHasText(body)}))\`;
      case "has":
        return \`filter(new \${clazz}.FilterOptions().setHas(\${body}))\`;
      case "hasNot":
        return \`filter(new \${clazz}.FilterOptions().setHasNot(\${body}))\`;
      case "and":
        return \`and(\${body})\`;
      case "or":
        return \`or(\${body})\`;
      case "chain":
        return \`locator(\${body})\`;
      case "test-id":
        return \`getByTestId(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact(clazz, "getByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact(clazz, "getByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact(clazz, "getByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact(clazz, "getByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact(clazz, "getByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", Pattern.CASE_INSENSITIVE" : "";
    return \`Pattern.compile(\${this.quote(normalizeEscapedRegexQuotes(body.source))}\${suffix})\`;
  }
  toCallWithExact(clazz, method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToString(body)})\`;
    if (exact)
      return \`\${method}(\${this.quote(body)}, new \${clazz}.\${toTitleCase(method)}Options().setExact(true))\`;
    return \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return this.regexToString(body);
    return this.quote(body);
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
};
var CSharpLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    switch (kind) {
      case "default":
        if (options.hasText !== void 0)
          return \`Locator(\${this.quote(body)}, new() { \${this.toHasText(options.hasText)} })\`;
        if (options.hasNotText !== void 0)
          return \`Locator(\${this.quote(body)}, new() { \${this.toHasNotText(options.hasNotText)} })\`;
        return \`Locator(\${this.quote(body)})\`;
      case "frame-locator":
        return \`FrameLocator(\${this.quote(body)})\`;
      case "frame":
        return \`ContentFrame\`;
      case "nth":
        return \`Nth(\${body})\`;
      case "first":
        return \`First\`;
      case "last":
        return \`Last\`;
      case "role":
        const attrs = [];
        if (isRegExp(options.name)) {
          attrs.push(\`NameRegex = \${this.regexToString(options.name)}\`);
        } else if (typeof options.name === "string") {
          attrs.push(\`Name = \${this.quote(options.name)}\`);
          if (options.exact)
            attrs.push(\`Exact = true\`);
        }
        for (const { name, value } of options.attrs)
          attrs.push(\`\${toTitleCase(name)} = \${typeof value === "string" ? this.quote(value) : value}\`);
        const attrString = attrs.length ? \`, new() { \${attrs.join(", ")} }\` : "";
        return \`GetByRole(AriaRole.\${toTitleCase(body)}\${attrString})\`;
      case "has-text":
        return \`Filter(new() { \${this.toHasText(body)} })\`;
      case "has-not-text":
        return \`Filter(new() { \${this.toHasNotText(body)} })\`;
      case "has":
        return \`Filter(new() { Has = \${body} })\`;
      case "hasNot":
        return \`Filter(new() { HasNot = \${body} })\`;
      case "and":
        return \`And(\${body})\`;
      case "or":
        return \`Or(\${body})\`;
      case "chain":
        return \`Locator(\${body})\`;
      case "test-id":
        return \`GetByTestId(\${this.toTestIdValue(body)})\`;
      case "text":
        return this.toCallWithExact("GetByText", body, !!options.exact);
      case "alt":
        return this.toCallWithExact("GetByAltText", body, !!options.exact);
      case "placeholder":
        return this.toCallWithExact("GetByPlaceholder", body, !!options.exact);
      case "label":
        return this.toCallWithExact("GetByLabel", body, !!options.exact);
      case "title":
        return this.toCallWithExact("GetByTitle", body, !!options.exact);
      default:
        throw new Error("Unknown selector kind " + kind);
    }
  }
  chainLocators(locators) {
    return locators.join(".");
  }
  regexToString(body) {
    const suffix = body.flags.includes("i") ? ", RegexOptions.IgnoreCase" : "";
    return \`new Regex(\${this.quote(normalizeEscapedRegexQuotes(body.source))}\${suffix})\`;
  }
  toCallWithExact(method, body, exact) {
    if (isRegExp(body))
      return \`\${method}(\${this.regexToString(body)})\`;
    if (exact)
      return \`\${method}(\${this.quote(body)}, new() { Exact = true })\`;
    return \`\${method}(\${this.quote(body)})\`;
  }
  toHasText(body) {
    if (isRegExp(body))
      return \`HasTextRegex = \${this.regexToString(body)}\`;
    return \`HasText = \${this.quote(body)}\`;
  }
  toTestIdValue(value) {
    if (isRegExp(value))
      return this.regexToString(value);
    return this.quote(value);
  }
  toHasNotText(body) {
    if (isRegExp(body))
      return \`HasNotTextRegex = \${this.regexToString(body)}\`;
    return \`HasNotText = \${this.quote(body)}\`;
  }
  quote(text) {
    return escapeWithQuotes(text, '"');
  }
};
var JsonlLocatorFactory = class {
  generateLocator(base, kind, body, options = {}) {
    return JSON.stringify({
      kind,
      body,
      options
    });
  }
  chainLocators(locators) {
    const objects = locators.map((l) => JSON.parse(l));
    for (let i = 0; i < objects.length - 1; ++i)
      objects[i].next = objects[i + 1];
    return JSON.stringify(objects[0]);
  }
};
var generators = {
  javascript: JavaScriptLocatorFactory,
  python: PythonLocatorFactory,
  java: JavaLocatorFactory,
  csharp: CSharpLocatorFactory,
  jsonl: JsonlLocatorFactory
};
function isRegExp(obj) {
  return obj instanceof RegExp;
}

// packages/playwright-core/src/server/injected/consoleApi.ts
var selectorSymbol = Symbol("selector");
var _Locator = class _Locator {
  constructor(injectedScript, selector, options) {
    if (options == null ? void 0 : options.hasText)
      selector += \` >> internal:has-text=\${escapeForTextSelector(options.hasText, false)}\`;
    if (options == null ? void 0 : options.hasNotText)
      selector += \` >> internal:has-not-text=\${escapeForTextSelector(options.hasNotText, false)}\`;
    if (options == null ? void 0 : options.has)
      selector += \` >> internal:has=\` + JSON.stringify(options.has[selectorSymbol]);
    if (options == null ? void 0 : options.hasNot)
      selector += \` >> internal:has-not=\` + JSON.stringify(options.hasNot[selectorSymbol]);
    this[selectorSymbol] = selector;
    if (selector) {
      const parsed = injectedScript.parseSelector(selector);
      this.element = injectedScript.querySelector(parsed, injectedScript.document, false);
      this.elements = injectedScript.querySelectorAll(parsed, injectedScript.document);
    }
    const selectorBase = selector;
    const self = this;
    self.locator = (selector2, options2) => {
      return new _Locator(injectedScript, selectorBase ? selectorBase + " >> " + selector2 : selector2, options2);
    };
    self.getByTestId = (testId) => self.locator(getByTestIdSelector(injectedScript.testIdAttributeNameForStrictErrorAndConsoleCodegen(), testId));
    self.getByAltText = (text, options2) => self.locator(getByAltTextSelector(text, options2));
    self.getByLabel = (text, options2) => self.locator(getByLabelSelector(text, options2));
    self.getByPlaceholder = (text, options2) => self.locator(getByPlaceholderSelector(text, options2));
    self.getByText = (text, options2) => self.locator(getByTextSelector(text, options2));
    self.getByTitle = (text, options2) => self.locator(getByTitleSelector(text, options2));
    self.getByRole = (role, options2 = {}) => self.locator(getByRoleSelector(role, options2));
    self.filter = (options2) => new _Locator(injectedScript, selector, options2);
    self.first = () => self.locator("nth=0");
    self.last = () => self.locator("nth=-1");
    self.nth = (index) => self.locator(\`nth=\${index}\`);
    self.and = (locator) => new _Locator(injectedScript, selectorBase + \` >> internal:and=\` + JSON.stringify(locator[selectorSymbol]));
    self.or = (locator) => new _Locator(injectedScript, selectorBase + \` >> internal:or=\` + JSON.stringify(locator[selectorSymbol]));
  }
};
selectorSymbol;
var Locator = _Locator;
var ConsoleAPI = class {
  constructor(injectedScript) {
    this._injectedScript = injectedScript;
    if (this._injectedScript.window.playwright)
      return;
    this._injectedScript.window.playwright = {
      $: (selector, strict) => this._querySelector(selector, !!strict),
      $$: (selector) => this._querySelectorAll(selector),
      inspect: (selector) => this._inspect(selector),
      selector: (element) => this._selector(element),
      generateLocator: (element, language) => this._generateLocator(element, language),
      ariaSnapshot: (element) => {
        const snapshot = this._injectedScript.ariaSnapshot(element || this._injectedScript.document.body);
        console.log(snapshot);
      },
      resume: () => this._resume(),
      ...new Locator(injectedScript, "")
    };
    delete this._injectedScript.window.playwright.filter;
    delete this._injectedScript.window.playwright.first;
    delete this._injectedScript.window.playwright.last;
    delete this._injectedScript.window.playwright.nth;
    delete this._injectedScript.window.playwright.and;
    delete this._injectedScript.window.playwright.or;
  }
  _querySelector(selector, strict) {
    if (typeof selector !== "string")
      throw new Error(\`Usage: playwright.query('Playwright >> selector').\`);
    const parsed = this._injectedScript.parseSelector(selector);
    return this._injectedScript.querySelector(parsed, this._injectedScript.document, strict);
  }
  _querySelectorAll(selector) {
    if (typeof selector !== "string")
      throw new Error(\`Usage: playwright.$$('Playwright >> selector').\`);
    const parsed = this._injectedScript.parseSelector(selector);
    return this._injectedScript.querySelectorAll(parsed, this._injectedScript.document);
  }
  _inspect(selector) {
    if (typeof selector !== "string")
      throw new Error(\`Usage: playwright.inspect('Playwright >> selector').\`);
    this._injectedScript.window.inspect(this._querySelector(selector, false));
  }
  _selector(element) {
    if (!(element instanceof Element))
      throw new Error(\`Usage: playwright.selector(element).\`);
    return this._injectedScript.generateSelectorSimple(element);
  }
  _generateLocator(element, language) {
    if (!(element instanceof Element))
      throw new Error(\`Usage: playwright.locator(element).\`);
    const selector = this._injectedScript.generateSelectorSimple(element);
    return asLocator(language || "javascript", selector);
  }
  _resume() {
    this._injectedScript.window.__pw_resume().catch(() => {
    });
  }
};
var consoleApi_default = ConsoleAPI;
`;
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorParser.js
var require_locatorParser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.locatorOrSelectorAsSelector = locatorOrSelectorAsSelector;
  var _stringUtils = require_stringUtils();
  var _locatorGenerators = require_locatorGenerators();
  var _selectorParser = require_selectorParser();
  function parseLocator(locator, testIdAttributeName) {
    locator = locator.replace(/AriaRole\s*\.\s*([\w]+)/g, (_, group) => group.toLowerCase()).replace(/(get_by_role|getByRole)\s*\(\s*(?:["'`])([^'"`]+)['"`]/g, (_, group1, group2) => `${group1}(${group2.toLowerCase()}`);
    const params = [];
    let template = "";
    for (let i = 0;i < locator.length; ++i) {
      const quote = locator[i];
      if (quote !== '"' && quote !== "'" && quote !== "`" && quote !== "/") {
        template += quote;
        continue;
      }
      const isRegexEscaping = locator[i - 1] === "r" || locator[i] === "/";
      ++i;
      let text = "";
      while (i < locator.length) {
        if (locator[i] === "\\") {
          if (isRegexEscaping) {
            if (locator[i + 1] !== quote)
              text += locator[i];
            ++i;
            text += locator[i];
          } else {
            ++i;
            if (locator[i] === "n")
              text += `
`;
            else if (locator[i] === "r")
              text += "\r";
            else if (locator[i] === "t")
              text += "\t";
            else
              text += locator[i];
          }
          ++i;
          continue;
        }
        if (locator[i] !== quote) {
          text += locator[i++];
          continue;
        }
        break;
      }
      params.push({
        quote,
        text
      });
      template += (quote === "/" ? "r" : "") + "$" + params.length;
    }
    template = template.toLowerCase().replace(/get_by_alt_text/g, "getbyalttext").replace(/get_by_test_id/g, "getbytestid").replace(/get_by_([\w]+)/g, "getby$1").replace(/has_not_text/g, "hasnottext").replace(/has_text/g, "hastext").replace(/has_not/g, "hasnot").replace(/frame_locator/g, "framelocator").replace(/content_frame/g, "contentframe").replace(/[{}\s]/g, "").replace(/new\(\)/g, "").replace(/new[\w]+\.[\w]+options\(\)/g, "").replace(/\.set/g, ",set").replace(/\.or_\(/g, "or(").replace(/\.and_\(/g, "and(").replace(/:/g, "=").replace(/,re\.ignorecase/g, "i").replace(/,pattern.case_insensitive/g, "i").replace(/,regexoptions.ignorecase/g, "i").replace(/re.compile\(([^)]+)\)/g, "$1").replace(/pattern.compile\(([^)]+)\)/g, "r$1").replace(/newregex\(([^)]+)\)/g, "r$1").replace(/string=/g, "=").replace(/regex=/g, "=").replace(/,,/g, ",");
    const preferredQuote = params.map((p) => p.quote).filter((quote) => "'\"`".includes(quote))[0];
    return {
      selector: transform(template, params, testIdAttributeName),
      preferredQuote
    };
  }
  function countParams(template) {
    return [...template.matchAll(/\$\d+/g)].length;
  }
  function shiftParams(template, sub) {
    return template.replace(/\$(\d+)/g, (_, ordinal) => `$${ordinal - sub}`);
  }
  function transform(template, params, testIdAttributeName) {
    while (true) {
      const hasMatch = template.match(/filter\(,?(has=|hasnot=|sethas\(|sethasnot\()/);
      if (!hasMatch)
        break;
      const start = hasMatch.index + hasMatch[0].length;
      let balance = 0;
      let end = start;
      for (;end < template.length; end++) {
        if (template[end] === "(")
          balance++;
        else if (template[end] === ")")
          balance--;
        if (balance < 0)
          break;
      }
      let prefix = template.substring(0, start);
      let extraSymbol = 0;
      if (["sethas(", "sethasnot("].includes(hasMatch[1])) {
        extraSymbol = 1;
        prefix = prefix.replace(/sethas\($/, "has=").replace(/sethasnot\($/, "hasnot=");
      }
      const paramsCountBeforeHas = countParams(template.substring(0, start));
      const hasTemplate = shiftParams(template.substring(start, end), paramsCountBeforeHas);
      const paramsCountInHas = countParams(hasTemplate);
      const hasParams = params.slice(paramsCountBeforeHas, paramsCountBeforeHas + paramsCountInHas);
      const hasSelector = JSON.stringify(transform(hasTemplate, hasParams, testIdAttributeName));
      template = prefix.replace(/=$/, "2=") + `$${paramsCountBeforeHas + 1}` + shiftParams(template.substring(end + extraSymbol), paramsCountInHas - 1);
      const paramsBeforeHas = params.slice(0, paramsCountBeforeHas);
      const paramsAfterHas = params.slice(paramsCountBeforeHas + paramsCountInHas);
      params = paramsBeforeHas.concat([{
        quote: '"',
        text: hasSelector
      }]).concat(paramsAfterHas);
    }
    template = template.replace(/\,set([\w]+)\(([^)]+)\)/g, (_, group1, group2) => "," + group1.toLowerCase() + "=" + group2.toLowerCase()).replace(/framelocator\(([^)]+)\)/g, "$1.internal:control=enter-frame").replace(/contentframe(\(\))?/g, "internal:control=enter-frame").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+),hasnottext=([^),]+)\)/g, "locator($1).internal:has-not-text=$2").replace(/locator\(([^)]+),hastext=([^),]+)\)/g, "locator($1).internal:has-text=$2").replace(/locator\(([^)]+)\)/g, "$1").replace(/getbyrole\(([^)]+)\)/g, "internal:role=$1").replace(/getbytext\(([^)]+)\)/g, "internal:text=$1").replace(/getbylabel\(([^)]+)\)/g, "internal:label=$1").replace(/getbytestid\(([^)]+)\)/g, `internal:testid=[${testIdAttributeName}=$1]`).replace(/getby(placeholder|alt|title)(?:text)?\(([^)]+)\)/g, "internal:attr=[$1=$2]").replace(/first(\(\))?/g, "nth=0").replace(/last(\(\))?/g, "nth=-1").replace(/nth\(([^)]+)\)/g, "nth=$1").replace(/filter\(,?hastext=([^)]+)\)/g, "internal:has-text=$1").replace(/filter\(,?hasnottext=([^)]+)\)/g, "internal:has-not-text=$1").replace(/filter\(,?has2=([^)]+)\)/g, "internal:has=$1").replace(/filter\(,?hasnot2=([^)]+)\)/g, "internal:has-not=$1").replace(/,exact=false/g, "").replace(/,exact=true/g, "s").replace(/\,/g, "][");
    const parts = template.split(".");
    for (let index = 0;index < parts.length - 1; index++) {
      if (parts[index] === "internal:control=enter-frame" && parts[index + 1].startsWith("nth=")) {
        const [nth] = parts.splice(index, 1);
        parts.splice(index + 1, 0, nth);
      }
    }
    return parts.map((t) => {
      if (!t.startsWith("internal:") || t === "internal:control")
        return t.replace(/\$(\d+)/g, (_, ordinal) => {
          const param = params[+ordinal - 1];
          return param.text;
        });
      t = t.includes("[") ? t.replace(/\]/, "") + "]" : t;
      t = t.replace(/(?:r)\$(\d+)(i)?/g, (_, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:attr") || t.startsWith("internal:testid") || t.startsWith("internal:role"))
          return (0, _stringUtils.escapeForAttributeSelector)(new RegExp(param.text), false) + (suffix || "");
        return (0, _stringUtils.escapeForTextSelector)(new RegExp(param.text, suffix), false);
      }).replace(/\$(\d+)(i|s)?/g, (_, ordinal, suffix) => {
        const param = params[+ordinal - 1];
        if (t.startsWith("internal:has=") || t.startsWith("internal:has-not="))
          return param.text;
        if (t.startsWith("internal:testid"))
          return (0, _stringUtils.escapeForAttributeSelector)(param.text, true);
        if (t.startsWith("internal:attr") || t.startsWith("internal:role"))
          return (0, _stringUtils.escapeForAttributeSelector)(param.text, suffix === "s");
        return (0, _stringUtils.escapeForTextSelector)(param.text, suffix === "s");
      });
      return t;
    }).join(" >> ");
  }
  function locatorOrSelectorAsSelector(language, locator, testIdAttributeName) {
    try {
      (0, _selectorParser.parseSelector)(locator);
      return locator;
    } catch (e) {
    }
    try {
      const {
        selector,
        preferredQuote
      } = parseLocator(locator, testIdAttributeName);
      const locators = (0, _locatorGenerators.asLocators)(language, selector, undefined, undefined, preferredQuote);
      const digest = digestForComparison(language, locator);
      if (locators.some((candidate) => digestForComparison(language, candidate) === digest))
        return selector;
    } catch (e) {
    }
    return "";
  }
  function digestForComparison(language, locator) {
    locator = locator.replace(/\s/g, "");
    if (language === "javascript")
      locator = locator.replace(/\\?["`]/g, "'");
    return locator;
  }
});

// node_modules/playwright-core/lib/generated/pollingRecorderSource.js
var require_pollingRecorderSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/recorder/pollingRecorder.ts
var pollingRecorder_exports = {};
__export(pollingRecorder_exports, {
  PollingRecorder: () => PollingRecorder,
  default: () => pollingRecorder_default
});
module.exports = __toCommonJS(pollingRecorder_exports);

// packages/playwright-core/src/server/injected/recorder/clipPaths.ts
var svgJson = { "tagName": "svg", "children": [{ "tagName": "defs", "children": [{ "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gripper" }, "children": [{ "tagName": "path", "attrs": { "d": "M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-circle-large-filled" }, "children": [{ "tagName": "path", "attrs": { "d": "M8 1a6.8 6.8 0 0 1 1.86.253 6.899 6.899 0 0 1 3.083 1.805 6.903 6.903 0 0 1 1.804 3.083C14.916 6.738 15 7.357 15 8s-.084 1.262-.253 1.86a6.9 6.9 0 0 1-.704 1.674 7.157 7.157 0 0 1-2.516 2.509 6.966 6.966 0 0 1-1.668.71A6.984 6.984 0 0 1 8 15a6.984 6.984 0 0 1-1.86-.246 7.098 7.098 0 0 1-1.674-.711 7.3 7.3 0 0 1-1.415-1.094 7.295 7.295 0 0 1-1.094-1.415 7.098 7.098 0 0 1-.71-1.675A6.985 6.985 0 0 1 1 8c0-.643.082-1.262.246-1.86a6.968 6.968 0 0 1 .711-1.667 7.156 7.156 0 0 1 2.509-2.516 6.895 6.895 0 0 1 1.675-.704A6.808 6.808 0 0 1 8 1z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-inspect" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 3l1-1h12l1 1v6h-1V3H2v8h5v1H2l-1-1V3zm14.707 9.707L9 6v9.414l2.707-2.707h4zM10 13V8.414l3.293 3.293h-2L10 13z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-whole-word" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M0 11H1V13H15V11H16V14H15H1H0V11Z" } }, { "tagName": "path", "attrs": { "d": "M6.84048 11H5.95963V10.1406H5.93814C5.555 10.7995 4.99104 11.1289 4.24625 11.1289C3.69839 11.1289 3.26871 10.9839 2.95718 10.6938C2.64924 10.4038 2.49527 10.0189 2.49527 9.53906C2.49527 8.51139 3.10041 7.91341 4.3107 7.74512L5.95963 7.51416C5.95963 6.57959 5.58186 6.1123 4.82632 6.1123C4.16389 6.1123 3.56591 6.33789 3.03238 6.78906V5.88672C3.57307 5.54297 4.19612 5.37109 4.90152 5.37109C6.19416 5.37109 6.84048 6.05501 6.84048 7.42285V11ZM5.95963 8.21777L4.63297 8.40039C4.22476 8.45768 3.91682 8.55973 3.70914 8.70654C3.50145 8.84977 3.39761 9.10579 3.39761 9.47461C3.39761 9.74316 3.4925 9.96338 3.68228 10.1353C3.87564 10.3035 4.13166 10.3877 4.45035 10.3877C4.8872 10.3877 5.24706 10.2355 5.52994 9.93115C5.8164 9.62321 5.95963 9.2347 5.95963 8.76562V8.21777Z" } }, { "tagName": "path", "attrs": { "d": "M9.3475 10.2051H9.32601V11H8.44515V2.85742H9.32601V6.4668H9.3475C9.78076 5.73633 10.4146 5.37109 11.2489 5.37109C11.9543 5.37109 12.5057 5.61816 12.9032 6.1123C13.3042 6.60286 13.5047 7.26172 13.5047 8.08887C13.5047 9.00911 13.2809 9.74674 12.8333 10.3018C12.3857 10.8532 11.7734 11.1289 10.9964 11.1289C10.2695 11.1289 9.71989 10.821 9.3475 10.2051ZM9.32601 7.98682V8.75488C9.32601 9.20964 9.47282 9.59635 9.76644 9.91504C10.0636 10.2301 10.4396 10.3877 10.8944 10.3877C11.4279 10.3877 11.8451 10.1836 12.1458 9.77539C12.4502 9.36719 12.6024 8.79964 12.6024 8.07275C12.6024 7.46045 12.4609 6.98063 12.1781 6.6333C11.8952 6.28597 11.512 6.1123 11.0286 6.1123C10.5166 6.1123 10.1048 6.29134 9.7933 6.64941C9.48177 7.00391 9.32601 7.44971 9.32601 7.98682Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-eye" }, "children": [{ "tagName": "path", "attrs": { "d": "M7.99993 6.00316C9.47266 6.00316 10.6666 7.19708 10.6666 8.66981C10.6666 10.1426 9.47266 11.3365 7.99993 11.3365C6.52715 11.3365 5.33324 10.1426 5.33324 8.66981C5.33324 7.19708 6.52715 6.00316 7.99993 6.00316ZM7.99993 7.00315C7.07946 7.00315 6.33324 7.74935 6.33324 8.66981C6.33324 9.59028 7.07946 10.3365 7.99993 10.3365C8.9204 10.3365 9.6666 9.59028 9.6666 8.66981C9.6666 7.74935 8.9204 7.00315 7.99993 7.00315ZM7.99993 3.66675C11.0756 3.66675 13.7307 5.76675 14.4673 8.70968C14.5344 8.97755 14.3716 9.24908 14.1037 9.31615C13.8358 9.38315 13.5643 9.22041 13.4973 8.95248C12.8713 6.45205 10.6141 4.66675 7.99993 4.66675C5.38454 4.66675 3.12664 6.45359 2.50182 8.95555C2.43491 9.22341 2.16348 9.38635 1.89557 9.31948C1.62766 9.25255 1.46471 8.98115 1.53162 8.71321C2.26701 5.76856 4.9229 3.66675 7.99993 3.66675Z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-symbol-constant" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M4 6h8v1H4V6zm8 3H4v1h8V9z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M1 4l1-1h12l1 1v8l-1 1H2l-1-1V4zm1 0v8h12V4H2z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-check" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-close" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8 8.707l3.646 3.647.708-.707L8.707 8l3.647-3.646-.707-.708L8 7.293 4.354 3.646l-.707.708L7.293 8l-3.646 3.646.707.708L8 8.707z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-pass" }, "children": [{ "tagName": "path", "attrs": { "d": "M6.27 10.87h.71l4.56-4.56-.71-.71-4.2 4.21-1.92-1.92L4 8.6l2.27 2.27z" } }, { "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M8.6 1c1.6.1 3.1.9 4.2 2 1.3 1.4 2 3.1 2 5.1 0 1.6-.6 3.1-1.6 4.4-1 1.2-2.4 2.1-4 2.4-1.6.3-3.2.1-4.6-.7-1.4-.8-2.5-2-3.1-3.5C.9 9.2.8 7.5 1.3 6c.5-1.6 1.4-2.9 2.8-3.8C5.4 1.3 7 .9 8.6 1zm.5 12.9c1.3-.3 2.5-1 3.4-2.1.8-1.1 1.3-2.4 1.2-3.8 0-1.6-.6-3.2-1.7-4.3-1-1-2.2-1.6-3.6-1.7-1.3-.1-2.7.2-3.8 1-1.1.8-1.9 1.9-2.3 3.3-.4 1.3-.4 2.7.2 4 .6 1.3 1.5 2.3 2.7 3 1.2.7 2.6.9 3.9.6z" } }] }, { "tagName": "clipPath", "attrs": { "width": "16", "height": "16", "viewBox": "0 0 16 16", "fill": "currentColor", "id": "icon-gist" }, "children": [{ "tagName": "path", "attrs": { "fill-rule": "evenodd", "clip-rule": "evenodd", "d": "M10.57 1.14l3.28 3.3.15.36v9.7l-.5.5h-11l-.5-.5v-13l.5-.5h7.72l.35.14zM10 5h3l-3-3v3zM3 2v12h10V6H9.5L9 5.5V2H3zm2.062 7.533l1.817-1.828L6.17 7 4 9.179v.707l2.171 2.174.707-.707-1.816-1.82zM8.8 7.714l.7-.709 2.189 2.175v.709L9.5 12.062l-.705-.709 1.831-1.82L8.8 7.714z" } }] }] }] };
var clipPaths_default = svgJson;

// packages/playwright-core/src/server/injected/recorder/recorder.ts
var NoneTool = class {
  cursor() {
    return "default";
  }
};
var InspectTool = class {
  constructor(recorder, assertVisibility) {
    this._hoveredModel = null;
    this._hoveredElement = null;
    this._hoveredSelectors = null;
    this._recorder = recorder;
    this._assertVisibility = assertVisibility;
  }
  cursor() {
    return "pointer";
  }
  cleanup() {
    this._hoveredModel = null;
    this._hoveredElement = null;
    this._hoveredSelectors = null;
  }
  onClick(event) {
    var _a;
    consumeEvent(event);
    if (event.button !== 0)
      return;
    if ((_a = this._hoveredModel) == null ? void 0 : _a.selector)
      this._commit(this._hoveredModel.selector, this._hoveredModel);
  }
  onContextMenu(event) {
    if (this._hoveredModel && !this._hoveredModel.tooltipListItemSelected && this._hoveredSelectors && this._hoveredSelectors.length > 1) {
      consumeEvent(event);
      const selectors = this._hoveredSelectors;
      const hoveredModel = this._hoveredModel;
      this._hoveredModel.tooltipFooter = void 0;
      this._hoveredModel.tooltipList = selectors.map((selector) => this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, selector));
      this._hoveredModel.tooltipListItemSelected = (index) => {
        if (index === void 0)
          this._reset(true);
        else
          this._commit(selectors[index], hoveredModel);
      };
      this._recorder.updateHighlight(this._hoveredModel, true);
    }
  }
  onPointerDown(event) {
    consumeEvent(event);
  }
  onPointerUp(event) {
    consumeEvent(event);
  }
  onMouseDown(event) {
    consumeEvent(event);
  }
  onMouseUp(event) {
    consumeEvent(event);
  }
  onMouseMove(event) {
    var _a;
    consumeEvent(event);
    let target = this._recorder.deepEventTarget(event);
    if (!target.isConnected)
      target = null;
    if (this._hoveredElement === target)
      return;
    this._hoveredElement = target;
    let model = null;
    let selectors = [];
    if (this._hoveredElement) {
      const generated = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName, multiple: false });
      selectors = generated.selectors;
      model = {
        selector: generated.selector,
        elements: generated.elements,
        tooltipText: this._recorder.injectedScript.utils.asLocator(this._recorder.state.language, generated.selector),
        tooltipFooter: selectors.length > 1 ? \`Click to select, right-click for more options\` : void 0,
        color: this._assertVisibility ? "#8acae480" : void 0
      };
    }
    if (((_a = this._hoveredModel) == null ? void 0 : _a.selector) === (model == null ? void 0 : model.selector))
      return;
    this._hoveredModel = model;
    this._hoveredSelectors = selectors;
    this._recorder.updateHighlight(model, true);
  }
  onMouseEnter(event) {
    consumeEvent(event);
  }
  onMouseLeave(event) {
    consumeEvent(event);
    const window = this._recorder.injectedScript.window;
    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE)
      this._reset(true);
  }
  onKeyDown(event) {
    var _a;
    consumeEvent(event);
    if (event.key === "Escape") {
      if ((_a = this._hoveredModel) == null ? void 0 : _a.tooltipListItemSelected)
        this._reset(true);
      else if (this._assertVisibility)
        this._recorder.setMode("recording");
    }
  }
  onKeyUp(event) {
    consumeEvent(event);
  }
  onScroll(event) {
    this._reset(false);
  }
  _commit(selector, model) {
    var _a;
    if (this._assertVisibility) {
      this._recorder.recordAction({
        name: "assertVisible",
        selector,
        signals: []
      });
      this._recorder.setMode("recording");
      (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingVisibility");
    } else {
      this._recorder.elementPicked(selector, model);
    }
  }
  _reset(userGesture) {
    this._hoveredElement = null;
    this._hoveredModel = null;
    this._hoveredSelectors = null;
    this._recorder.updateHighlight(null, userGesture);
  }
};
var RecordActionTool = class {
  constructor(recorder) {
    this._performingActions = /* @__PURE__ */ new Set();
    this._hoveredModel = null;
    this._hoveredElement = null;
    this._activeModel = null;
    this._expectProgrammaticKeyUp = false;
    this._recorder = recorder;
  }
  cursor() {
    return "pointer";
  }
  cleanup() {
    this._hoveredModel = null;
    this._hoveredElement = null;
    this._activeModel = null;
    this._expectProgrammaticKeyUp = false;
  }
  onClick(event) {
    if (isRangeInput(this._hoveredElement))
      return;
    if (event.button === 2 && event.type === "auxclick")
      return;
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (this._actionInProgress(event))
      return;
    if (this._consumedDueToNoModel(event, this._hoveredModel))
      return;
    const checkbox = asCheckbox(this._recorder.deepEventTarget(event));
    if (checkbox) {
      this._performAction({
        name: checkbox.checked ? "check" : "uncheck",
        selector: this._hoveredModel.selector,
        signals: []
      });
      return;
    }
    this._cancelPendingClickAction();
    if (event.detail === 1) {
      this._pendingClickAction = {
        action: {
          name: "click",
          selector: this._hoveredModel.selector,
          position: positionForEvent(event),
          signals: [],
          button: buttonForEvent(event),
          modifiers: modifiersForEvent(event),
          clickCount: event.detail
        },
        timeout: this._recorder.injectedScript.builtinSetTimeout(() => this._commitPendingClickAction(), 200)
      };
    }
  }
  onDblClick(event) {
    if (isRangeInput(this._hoveredElement))
      return;
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (this._actionInProgress(event))
      return;
    if (this._consumedDueToNoModel(event, this._hoveredModel))
      return;
    this._cancelPendingClickAction();
    this._performAction({
      name: "click",
      selector: this._hoveredModel.selector,
      position: positionForEvent(event),
      signals: [],
      button: buttonForEvent(event),
      modifiers: modifiersForEvent(event),
      clickCount: event.detail
    });
  }
  _commitPendingClickAction() {
    if (this._pendingClickAction)
      this._performAction(this._pendingClickAction.action);
    this._cancelPendingClickAction();
  }
  _cancelPendingClickAction() {
    if (this._pendingClickAction)
      clearTimeout(this._pendingClickAction.timeout);
    this._pendingClickAction = void 0;
  }
  onContextMenu(event) {
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (this._actionInProgress(event))
      return;
    if (this._consumedDueToNoModel(event, this._hoveredModel))
      return;
    this._performAction({
      name: "click",
      selector: this._hoveredModel.selector,
      position: positionForEvent(event),
      signals: [],
      button: "right",
      modifiers: 0,
      clickCount: 0
    });
  }
  onPointerDown(event) {
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (!this._performingActions.size)
      consumeEvent(event);
  }
  onPointerUp(event) {
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (!this._performingActions.size)
      consumeEvent(event);
  }
  onMouseDown(event) {
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (!this._performingActions.size)
      consumeEvent(event);
    this._activeModel = this._hoveredModel;
  }
  onMouseUp(event) {
    if (this._shouldIgnoreMouseEvent(event))
      return;
    if (!this._performingActions.size)
      consumeEvent(event);
  }
  onMouseMove(event) {
    const target = this._recorder.deepEventTarget(event);
    if (this._hoveredElement === target)
      return;
    this._hoveredElement = target;
    this._updateModelForHoveredElement();
  }
  onMouseLeave(event) {
    const window = this._recorder.injectedScript.window;
    if (window.top !== window && this._recorder.deepEventTarget(event).nodeType === Node.DOCUMENT_NODE) {
      this._hoveredElement = null;
      this._updateModelForHoveredElement();
    }
  }
  onFocus(event) {
    this._onFocus(true);
  }
  onInput(event) {
    const target = this._recorder.deepEventTarget(event);
    if (target.nodeName === "INPUT" && target.type.toLowerCase() === "file") {
      this._recorder.recordAction({
        name: "setInputFiles",
        selector: this._activeModel.selector,
        signals: [],
        files: [...target.files || []].map((file) => file.name)
      });
      return;
    }
    if (isRangeInput(target)) {
      this._recorder.recordAction({
        name: "fill",
        // must use hoveredModel instead of activeModel for it to work in webkit
        selector: this._hoveredModel.selector,
        signals: [],
        text: target.value
      });
      return;
    }
    if (["INPUT", "TEXTAREA"].includes(target.nodeName) || target.isContentEditable) {
      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {
        return;
      }
      if (this._consumedDueWrongTarget(event))
        return;
      this._recorder.recordAction({
        name: "fill",
        selector: this._activeModel.selector,
        signals: [],
        text: target.isContentEditable ? target.innerText : target.value
      });
    }
    if (target.nodeName === "SELECT") {
      const selectElement = target;
      if (this._actionInProgress(event))
        return;
      this._performAction({
        name: "select",
        selector: this._activeModel.selector,
        options: [...selectElement.selectedOptions].map((option) => option.value),
        signals: []
      });
    }
  }
  onKeyDown(event) {
    if (!this._shouldGenerateKeyPressFor(event))
      return;
    if (this._actionInProgress(event)) {
      this._expectProgrammaticKeyUp = true;
      return;
    }
    if (this._consumedDueWrongTarget(event))
      return;
    if (event.key === " ") {
      const checkbox = asCheckbox(this._recorder.deepEventTarget(event));
      if (checkbox) {
        this._performAction({
          name: checkbox.checked ? "uncheck" : "check",
          selector: this._activeModel.selector,
          signals: []
        });
        return;
      }
    }
    this._performAction({
      name: "press",
      selector: this._activeModel.selector,
      signals: [],
      key: event.key,
      modifiers: modifiersForEvent(event)
    });
  }
  onKeyUp(event) {
    if (!this._shouldGenerateKeyPressFor(event))
      return;
    if (!this._expectProgrammaticKeyUp) {
      consumeEvent(event);
      return;
    }
    this._expectProgrammaticKeyUp = false;
  }
  onScroll(event) {
    this._hoveredModel = null;
    this._hoveredElement = null;
    this._recorder.updateHighlight(null, false);
  }
  _onFocus(userGesture) {
    const activeElement = deepActiveElement(this._recorder.document);
    if (userGesture && activeElement === this._recorder.document.body)
      return;
    const result = activeElement ? this._recorder.injectedScript.generateSelector(activeElement, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;
    this._activeModel = result && result.selector ? result : null;
    if (userGesture) {
      this._hoveredElement = activeElement;
      this._updateModelForHoveredElement();
    }
  }
  _shouldIgnoreMouseEvent(event) {
    const target = this._recorder.deepEventTarget(event);
    const nodeName = target.nodeName;
    if (nodeName === "SELECT" || nodeName === "OPTION")
      return true;
    if (nodeName === "INPUT" && ["date", "range"].includes(target.type))
      return true;
    return false;
  }
  _actionInProgress(event) {
    const isKeyEvent = event instanceof KeyboardEvent;
    const isMouseOrPointerEvent = event instanceof MouseEvent || event instanceof PointerEvent;
    for (const action of this._performingActions) {
      if (isKeyEvent && action.name === "press" && event.key === action.key)
        return true;
      if (isMouseOrPointerEvent && (action.name === "click" || action.name === "check" || action.name === "uncheck"))
        return true;
    }
    consumeEvent(event);
    return false;
  }
  _consumedDueToNoModel(event, model) {
    if (model)
      return false;
    consumeEvent(event);
    return true;
  }
  _consumedDueWrongTarget(event) {
    if (this._activeModel && this._activeModel.elements[0] === this._recorder.deepEventTarget(event))
      return false;
    consumeEvent(event);
    return true;
  }
  _performAction(action) {
    this._hoveredElement = null;
    this._hoveredModel = null;
    this._activeModel = null;
    this._recorder.updateHighlight(null, false);
    this._performingActions.add(action);
    void this._recorder.performAction(action).then(() => {
      this._performingActions.delete(action);
      this._onFocus(false);
      if (this._recorder.injectedScript.isUnderTest) {
        console.error("Action performed for test: " + JSON.stringify({
          // eslint-disable-line no-console
          hovered: this._hoveredModel ? this._hoveredModel.selector : null,
          active: this._activeModel ? this._activeModel.selector : null
        }));
      }
    });
  }
  _shouldGenerateKeyPressFor(event) {
    if (event.key === "Enter" && (this._recorder.deepEventTarget(event).nodeName === "TEXTAREA" || this._recorder.deepEventTarget(event).isContentEditable))
      return false;
    if (["Backspace", "Delete", "AltGraph"].includes(event.key))
      return false;
    if (event.key === "@" && event.code === "KeyL")
      return false;
    if (navigator.platform.includes("Mac")) {
      if (event.key === "v" && event.metaKey)
        return false;
    } else {
      if (event.key === "v" && event.ctrlKey)
        return false;
      if (event.key === "Insert" && event.shiftKey)
        return false;
    }
    if (["Shift", "Control", "Meta", "Alt", "Process"].includes(event.key))
      return false;
    const hasModifier = event.ctrlKey || event.altKey || event.metaKey;
    if (event.key.length === 1 && !hasModifier)
      return !!asCheckbox(this._recorder.deepEventTarget(event));
    return true;
  }
  _updateModelForHoveredElement() {
    if (this._performingActions.size)
      return;
    if (!this._hoveredElement || !this._hoveredElement.isConnected) {
      this._hoveredModel = null;
      this._hoveredElement = null;
      this._recorder.updateHighlight(null, true);
      return;
    }
    const { selector, elements } = this._recorder.injectedScript.generateSelector(this._hoveredElement, { testIdAttributeName: this._recorder.state.testIdAttributeName });
    if (this._hoveredModel && this._hoveredModel.selector === selector)
      return;
    this._hoveredModel = selector ? { selector, elements, color: "#dc6f6f7f" } : null;
    this._recorder.updateHighlight(this._hoveredModel, true);
  }
};
var TextAssertionTool = class {
  constructor(recorder, kind) {
    this._hoverHighlight = null;
    this._action = null;
    this._textCache = /* @__PURE__ */ new Map();
    this._recorder = recorder;
    this._kind = kind;
    this._dialog = new Dialog(recorder);
  }
  cursor() {
    return "pointer";
  }
  cleanup() {
    this._dialog.close();
    this._hoverHighlight = null;
  }
  onClick(event) {
    consumeEvent(event);
    if (this._kind === "value") {
      this._commitAssertValue();
    } else {
      if (!this._dialog.isShowing())
        this._showDialog();
    }
  }
  onMouseDown(event) {
    const target = this._recorder.deepEventTarget(event);
    if (this._elementHasValue(target))
      event.preventDefault();
  }
  onPointerUp(event) {
    var _a;
    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];
    if (this._kind === "value" && target && (target.nodeName === "INPUT" || target.nodeName === "SELECT") && target.disabled) {
      this._commitAssertValue();
    }
  }
  onMouseMove(event) {
    var _a;
    if (this._dialog.isShowing())
      return;
    const target = this._recorder.deepEventTarget(event);
    if (((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]) === target)
      return;
    if (this._kind === "text" || this._kind === "snapshot")
      this._hoverHighlight = this._recorder.injectedScript.utils.elementText(this._textCache, target).full ? { elements: [target], selector: "" } : null;
    else
      this._hoverHighlight = this._elementHasValue(target) ? this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName }) : null;
    if (this._hoverHighlight)
      this._hoverHighlight.color = "#8acae480";
    this._recorder.updateHighlight(this._hoverHighlight, true);
  }
  onKeyDown(event) {
    if (event.key === "Escape")
      this._recorder.setMode("recording");
    consumeEvent(event);
  }
  onScroll(event) {
    this._recorder.updateHighlight(this._hoverHighlight, false);
  }
  _elementHasValue(element) {
    return element.nodeName === "TEXTAREA" || element.nodeName === "SELECT" || element.nodeName === "INPUT" && !["button", "image", "reset", "submit"].includes(element.type);
  }
  _generateAction() {
    var _a;
    this._textCache.clear();
    const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];
    if (!target)
      return null;
    if (this._kind === "value") {
      if (!this._elementHasValue(target))
        return null;
      const { selector } = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName });
      if (target.nodeName === "INPUT" && ["checkbox", "radio"].includes(target.type.toLowerCase())) {
        return {
          name: "assertChecked",
          selector,
          signals: [],
          // Interestingly, inputElement.checked is reversed inside this event handler.
          checked: !target.checked
        };
      } else {
        return {
          name: "assertValue",
          selector,
          signals: [],
          value: target.value
        };
      }
    } else if (this._kind === "snapshot") {
      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });
      this._hoverHighlight.color = "#8acae480";
      this._recorder.updateHighlight(this._hoverHighlight, true);
      return {
        name: "assertSnapshot",
        selector: this._hoverHighlight.selector,
        signals: [],
        snapshot: this._recorder.injectedScript.ariaSnapshot(target, { mode: "regex" })
      };
    } else {
      this._hoverHighlight = this._recorder.injectedScript.generateSelector(target, { testIdAttributeName: this._recorder.state.testIdAttributeName, forTextExpect: true });
      this._hoverHighlight.color = "#8acae480";
      this._recorder.updateHighlight(this._hoverHighlight, true);
      return {
        name: "assertText",
        selector: this._hoverHighlight.selector,
        signals: [],
        text: this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized,
        substring: true
      };
    }
  }
  _renderValue(action) {
    if ((action == null ? void 0 : action.name) === "assertText")
      return this._recorder.injectedScript.utils.normalizeWhiteSpace(action.text);
    if ((action == null ? void 0 : action.name) === "assertChecked")
      return String(action.checked);
    if ((action == null ? void 0 : action.name) === "assertValue")
      return action.value;
    if ((action == null ? void 0 : action.name) === "assertSnapshot")
      return action.snapshot;
    return "";
  }
  _commit() {
    if (!this._action || !this._dialog.isShowing())
      return;
    this._dialog.close();
    this._recorder.recordAction(this._action);
    this._recorder.setMode("recording");
  }
  _showDialog() {
    var _a, _b, _c, _d;
    if (!((_a = this._hoverHighlight) == null ? void 0 : _a.elements[0]))
      return;
    this._action = this._generateAction();
    if (((_b = this._action) == null ? void 0 : _b.name) === "assertText") {
      this._showTextDialog(this._action);
    } else if (((_c = this._action) == null ? void 0 : _c.name) === "assertSnapshot") {
      this._recorder.recordAction(this._action);
      this._recorder.setMode("recording");
      (_d = this._recorder.overlay) == null ? void 0 : _d.flashToolSucceeded("assertingSnapshot");
    }
  }
  _showTextDialog(action) {
    const textElement = this._recorder.document.createElement("textarea");
    textElement.setAttribute("spellcheck", "false");
    textElement.value = this._renderValue(action);
    textElement.classList.add("text-editor");
    const updateAndValidate = () => {
      var _a;
      const newValue = this._recorder.injectedScript.utils.normalizeWhiteSpace(textElement.value);
      const target = (_a = this._hoverHighlight) == null ? void 0 : _a.elements[0];
      if (!target)
        return;
      action.text = newValue;
      const targetText = this._recorder.injectedScript.utils.elementText(this._textCache, target).normalized;
      const matches = newValue && targetText.includes(newValue);
      textElement.classList.toggle("does-not-match", !matches);
    };
    textElement.addEventListener("input", updateAndValidate);
    const label = "Assert that element contains text";
    const dialogElement = this._dialog.show({
      label,
      body: textElement,
      onCommit: () => this._commit()
    });
    const position = this._recorder.highlight.tooltipPosition(this._recorder.highlight.firstBox(), dialogElement);
    this._dialog.moveTo(position.anchorTop, position.anchorLeft);
    textElement.focus();
  }
  _commitAssertValue() {
    var _a;
    if (this._kind !== "value")
      return;
    const action = this._generateAction();
    if (!action)
      return;
    this._recorder.recordAction(action);
    this._recorder.setMode("recording");
    (_a = this._recorder.overlay) == null ? void 0 : _a.flashToolSucceeded("assertingValue");
  }
};
var Overlay = class {
  constructor(recorder) {
    this._listeners = [];
    this._offsetX = 0;
    this._measure = { width: 0, height: 0 };
    this._recorder = recorder;
    const document = this._recorder.document;
    this._overlayElement = document.createElement("x-pw-overlay");
    const toolsListElement = document.createElement("x-pw-tools-list");
    this._overlayElement.appendChild(toolsListElement);
    this._dragHandle = document.createElement("x-pw-tool-gripper");
    this._dragHandle.appendChild(document.createElement("x-div"));
    toolsListElement.appendChild(this._dragHandle);
    this._recordToggle = this._recorder.document.createElement("x-pw-tool-item");
    this._recordToggle.title = "Record";
    this._recordToggle.classList.add("record");
    this._recordToggle.appendChild(this._recorder.document.createElement("x-div"));
    toolsListElement.appendChild(this._recordToggle);
    this._pickLocatorToggle = this._recorder.document.createElement("x-pw-tool-item");
    this._pickLocatorToggle.title = "Pick locator";
    this._pickLocatorToggle.classList.add("pick-locator");
    this._pickLocatorToggle.appendChild(this._recorder.document.createElement("x-div"));
    toolsListElement.appendChild(this._pickLocatorToggle);
    this._assertVisibilityToggle = this._recorder.document.createElement("x-pw-tool-item");
    this._assertVisibilityToggle.title = "Assert visibility";
    this._assertVisibilityToggle.classList.add("visibility");
    this._assertVisibilityToggle.appendChild(this._recorder.document.createElement("x-div"));
    toolsListElement.appendChild(this._assertVisibilityToggle);
    this._assertTextToggle = this._recorder.document.createElement("x-pw-tool-item");
    this._assertTextToggle.title = "Assert text";
    this._assertTextToggle.classList.add("text");
    this._assertTextToggle.appendChild(this._recorder.document.createElement("x-div"));
    toolsListElement.appendChild(this._assertTextToggle);
    this._assertValuesToggle = this._recorder.document.createElement("x-pw-tool-item");
    this._assertValuesToggle.title = "Assert value";
    this._assertValuesToggle.classList.add("value");
    this._assertValuesToggle.appendChild(this._recorder.document.createElement("x-div"));
    toolsListElement.appendChild(this._assertValuesToggle);
    this._assertSnapshotToggle = this._recorder.document.createElement("x-pw-tool-item");
    this._assertSnapshotToggle.title = "Assert snapshot";
    this._assertSnapshotToggle.classList.add("snapshot");
    this._assertSnapshotToggle.appendChild(this._recorder.document.createElement("x-div"));
    toolsListElement.appendChild(this._assertSnapshotToggle);
    this._updateVisualPosition();
    this._refreshListeners();
  }
  _refreshListeners() {
    removeEventListeners(this._listeners);
    this._listeners = [
      addEventListener(this._dragHandle, "mousedown", (event) => {
        this._dragState = { offsetX: this._offsetX, dragStart: { x: event.clientX, y: 0 } };
      }),
      addEventListener(this._recordToggle, "click", () => {
        this._recorder.setMode(this._recorder.state.mode === "none" || this._recorder.state.mode === "standby" || this._recorder.state.mode === "inspecting" ? "recording" : "standby");
      }),
      addEventListener(this._pickLocatorToggle, "click", () => {
        const newMode = {
          "inspecting": "standby",
          "none": "inspecting",
          "standby": "inspecting",
          "recording": "recording-inspecting",
          "recording-inspecting": "recording",
          "assertingText": "recording-inspecting",
          "assertingVisibility": "recording-inspecting",
          "assertingValue": "recording-inspecting",
          "assertingSnapshot": "recording-inspecting"
        };
        this._recorder.setMode(newMode[this._recorder.state.mode]);
      }),
      addEventListener(this._assertVisibilityToggle, "click", () => {
        if (!this._assertVisibilityToggle.classList.contains("disabled"))
          this._recorder.setMode(this._recorder.state.mode === "assertingVisibility" ? "recording" : "assertingVisibility");
      }),
      addEventListener(this._assertTextToggle, "click", () => {
        if (!this._assertTextToggle.classList.contains("disabled"))
          this._recorder.setMode(this._recorder.state.mode === "assertingText" ? "recording" : "assertingText");
      }),
      addEventListener(this._assertValuesToggle, "click", () => {
        if (!this._assertValuesToggle.classList.contains("disabled"))
          this._recorder.setMode(this._recorder.state.mode === "assertingValue" ? "recording" : "assertingValue");
      }),
      addEventListener(this._assertSnapshotToggle, "click", () => {
        if (!this._assertSnapshotToggle.classList.contains("disabled"))
          this._recorder.setMode(this._recorder.state.mode === "assertingSnapshot" ? "recording" : "assertingSnapshot");
      })
    ];
  }
  install() {
    this._recorder.highlight.appendChild(this._overlayElement);
    this._refreshListeners();
    this._updateVisualPosition();
  }
  contains(element) {
    return this._recorder.injectedScript.utils.isInsideScope(this._overlayElement, element);
  }
  setUIState(state) {
    this._recordToggle.classList.toggle("active", state.mode === "recording" || state.mode === "assertingText" || state.mode === "assertingVisibility" || state.mode === "assertingValue" || state.mode === "recording-inspecting");
    this._pickLocatorToggle.classList.toggle("active", state.mode === "inspecting" || state.mode === "recording-inspecting");
    this._assertVisibilityToggle.classList.toggle("active", state.mode === "assertingVisibility");
    this._assertVisibilityToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");
    this._assertTextToggle.classList.toggle("active", state.mode === "assertingText");
    this._assertTextToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");
    this._assertValuesToggle.classList.toggle("active", state.mode === "assertingValue");
    this._assertValuesToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");
    this._assertSnapshotToggle.classList.toggle("active", state.mode === "assertingSnapshot");
    this._assertSnapshotToggle.classList.toggle("disabled", state.mode === "none" || state.mode === "standby" || state.mode === "inspecting");
    if (this._offsetX !== state.overlay.offsetX) {
      this._offsetX = state.overlay.offsetX;
      this._updateVisualPosition();
    }
    if (state.mode === "none")
      this._hideOverlay();
    else
      this._showOverlay();
  }
  flashToolSucceeded(tool) {
    let element;
    if (tool === "assertingVisibility")
      element = this._assertVisibilityToggle;
    else if (tool === "assertingSnapshot")
      element = this._assertSnapshotToggle;
    else
      element = this._assertValuesToggle;
    element.classList.add("succeeded");
    this._recorder.injectedScript.builtinSetTimeout(() => element.classList.remove("succeeded"), 2e3);
  }
  _hideOverlay() {
    this._overlayElement.setAttribute("hidden", "true");
  }
  _showOverlay() {
    if (!this._overlayElement.hasAttribute("hidden"))
      return;
    this._overlayElement.removeAttribute("hidden");
    this._updateVisualPosition();
  }
  _updateVisualPosition() {
    this._measure = this._overlayElement.getBoundingClientRect();
    this._overlayElement.style.left = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 + this._offsetX + "px";
  }
  onMouseMove(event) {
    if (!event.buttons) {
      this._dragState = void 0;
      return false;
    }
    if (this._dragState) {
      this._offsetX = this._dragState.offsetX + event.clientX - this._dragState.dragStart.x;
      const halfGapSize = (this._recorder.injectedScript.window.innerWidth - this._measure.width) / 2 - 10;
      this._offsetX = Math.max(-halfGapSize, Math.min(halfGapSize, this._offsetX));
      this._updateVisualPosition();
      this._recorder.setOverlayState({ offsetX: this._offsetX });
      consumeEvent(event);
      return true;
    }
    return false;
  }
  onMouseUp(event) {
    if (this._dragState) {
      consumeEvent(event);
      return true;
    }
    return false;
  }
  onClick(event) {
    if (this._dragState) {
      this._dragState = void 0;
      consumeEvent(event);
      return true;
    }
    return false;
  }
  onDblClick(event) {
    return false;
  }
};
var Recorder = class {
  constructor(injectedScript) {
    this._listeners = [];
    this._lastHighlightedSelector = void 0;
    this._lastHighlightedAriaTemplateJSON = "undefined";
    this.state = {
      mode: "none",
      testIdAttributeName: "data-testid",
      language: "javascript",
      overlay: { offsetX: 0 }
    };
    this._delegate = {};
    this.document = injectedScript.document;
    this.injectedScript = injectedScript;
    this.highlight = injectedScript.createHighlight();
    this._tools = {
      "none": new NoneTool(),
      "standby": new NoneTool(),
      "inspecting": new InspectTool(this, false),
      "recording": new RecordActionTool(this),
      "recording-inspecting": new InspectTool(this, false),
      "assertingText": new TextAssertionTool(this, "text"),
      "assertingVisibility": new InspectTool(this, true),
      "assertingValue": new TextAssertionTool(this, "value"),
      "assertingSnapshot": new TextAssertionTool(this, "snapshot")
    };
    this._currentTool = this._tools.none;
    if (injectedScript.window.top === injectedScript.window) {
      this.overlay = new Overlay(this);
      this.overlay.setUIState(this.state);
    }
    this._stylesheet = new injectedScript.window.CSSStyleSheet();
    this._stylesheet.replaceSync(\`
      body[data-pw-cursor=pointer] *, body[data-pw-cursor=pointer] *::after { cursor: pointer !important; }
      body[data-pw-cursor=text] *, body[data-pw-cursor=text] *::after { cursor: text !important; }
    \`);
    this.installListeners();
    injectedScript.utils.cacheNormalizedWhitespaces();
    if (injectedScript.isUnderTest)
      console.error("Recorder script ready for test");
  }
  installListeners() {
    var _a;
    removeEventListeners(this._listeners);
    this._listeners = [
      addEventListener(this.document, "click", (event) => this._onClick(event), true),
      addEventListener(this.document, "auxclick", (event) => this._onClick(event), true),
      addEventListener(this.document, "dblclick", (event) => this._onDblClick(event), true),
      addEventListener(this.document, "contextmenu", (event) => this._onContextMenu(event), true),
      addEventListener(this.document, "dragstart", (event) => this._onDragStart(event), true),
      addEventListener(this.document, "input", (event) => this._onInput(event), true),
      addEventListener(this.document, "keydown", (event) => this._onKeyDown(event), true),
      addEventListener(this.document, "keyup", (event) => this._onKeyUp(event), true),
      addEventListener(this.document, "pointerdown", (event) => this._onPointerDown(event), true),
      addEventListener(this.document, "pointerup", (event) => this._onPointerUp(event), true),
      addEventListener(this.document, "mousedown", (event) => this._onMouseDown(event), true),
      addEventListener(this.document, "mouseup", (event) => this._onMouseUp(event), true),
      addEventListener(this.document, "mousemove", (event) => this._onMouseMove(event), true),
      addEventListener(this.document, "mouseleave", (event) => this._onMouseLeave(event), true),
      addEventListener(this.document, "mouseenter", (event) => this._onMouseEnter(event), true),
      addEventListener(this.document, "focus", (event) => this._onFocus(event), true),
      addEventListener(this.document, "scroll", (event) => this._onScroll(event), true)
    ];
    this.highlight.install();
    let recreationInterval;
    const recreate = () => {
      this.highlight.install();
      recreationInterval = this.injectedScript.builtinSetTimeout(recreate, 500);
    };
    recreationInterval = this.injectedScript.builtinSetTimeout(recreate, 500);
    this._listeners.push(() => this.injectedScript.builtinClearTimeout(recreationInterval));
    this.highlight.appendChild(createSvgElement(this.document, clipPaths_default));
    (_a = this.overlay) == null ? void 0 : _a.install();
    this.document.adoptedStyleSheets.push(this._stylesheet);
  }
  _switchCurrentTool() {
    var _a, _b, _c;
    const newTool = this._tools[this.state.mode];
    if (newTool === this._currentTool)
      return;
    (_b = (_a = this._currentTool).cleanup) == null ? void 0 : _b.call(_a);
    this.clearHighlight();
    this._currentTool = newTool;
    (_c = this.injectedScript.document.body) == null ? void 0 : _c.setAttribute("data-pw-cursor", newTool.cursor());
  }
  setUIState(state, delegate) {
    var _a;
    this._delegate = delegate;
    if (state.actionPoint && this.state.actionPoint && state.actionPoint.x === this.state.actionPoint.x && state.actionPoint.y === this.state.actionPoint.y) {
    } else if (!state.actionPoint && !this.state.actionPoint) {
    } else {
      if (state.actionPoint)
        this.highlight.showActionPoint(state.actionPoint.x, state.actionPoint.y);
      else
        this.highlight.hideActionPoint();
    }
    this.state = state;
    this.highlight.setLanguage(state.language);
    this._switchCurrentTool();
    (_a = this.overlay) == null ? void 0 : _a.setUIState(state);
    let highlight = "noop";
    if (state.actionSelector !== this._lastHighlightedSelector) {
      this._lastHighlightedSelector = state.actionSelector;
      const model = state.actionSelector ? querySelector(this.injectedScript, state.actionSelector, this.document) : null;
      highlight = (model == null ? void 0 : model.elements.length) ? model : "clear";
    }
    const ariaTemplateJSON = JSON.stringify(state.ariaTemplate);
    if (this._lastHighlightedAriaTemplateJSON !== ariaTemplateJSON) {
      this._lastHighlightedAriaTemplateJSON = ariaTemplateJSON;
      const template = state.ariaTemplate ? this.injectedScript.utils.parseYamlTemplate(state.ariaTemplate) : void 0;
      const elements = template ? this.injectedScript.getAllByAria(this.document, template) : [];
      if (elements.length)
        highlight = { elements };
      else
        highlight = "clear";
    }
    if (highlight === "clear")
      this.clearHighlight();
    else if (highlight !== "noop")
      this.updateHighlight(highlight, false);
  }
  clearHighlight() {
    this.updateHighlight(null, false);
  }
  _onClick(event) {
    var _a, _b, _c;
    if (!event.isTrusted)
      return;
    if ((_a = this.overlay) == null ? void 0 : _a.onClick(event))
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_c = (_b = this._currentTool).onClick) == null ? void 0 : _c.call(_b, event);
  }
  _onDblClick(event) {
    var _a, _b, _c;
    if (!event.isTrusted)
      return;
    if ((_a = this.overlay) == null ? void 0 : _a.onDblClick(event))
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_c = (_b = this._currentTool).onDblClick) == null ? void 0 : _c.call(_b, event);
  }
  _onContextMenu(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onContextMenu) == null ? void 0 : _b.call(_a, event);
  }
  _onDragStart(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onDragStart) == null ? void 0 : _b.call(_a, event);
  }
  _onPointerDown(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onPointerDown) == null ? void 0 : _b.call(_a, event);
  }
  _onPointerUp(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onPointerUp) == null ? void 0 : _b.call(_a, event);
  }
  _onMouseDown(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onMouseDown) == null ? void 0 : _b.call(_a, event);
  }
  _onMouseUp(event) {
    var _a, _b, _c;
    if (!event.isTrusted)
      return;
    if ((_a = this.overlay) == null ? void 0 : _a.onMouseUp(event))
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_c = (_b = this._currentTool).onMouseUp) == null ? void 0 : _c.call(_b, event);
  }
  _onMouseMove(event) {
    var _a, _b, _c;
    if (!event.isTrusted)
      return;
    if ((_a = this.overlay) == null ? void 0 : _a.onMouseMove(event))
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_c = (_b = this._currentTool).onMouseMove) == null ? void 0 : _c.call(_b, event);
  }
  _onMouseEnter(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onMouseEnter) == null ? void 0 : _b.call(_a, event);
  }
  _onMouseLeave(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onMouseLeave) == null ? void 0 : _b.call(_a, event);
  }
  _onFocus(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onFocus) == null ? void 0 : _b.call(_a, event);
  }
  _onScroll(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    this._lastHighlightedSelector = void 0;
    this._lastHighlightedAriaTemplateJSON = "undefined";
    this.highlight.hideActionPoint();
    (_b = (_a = this._currentTool).onScroll) == null ? void 0 : _b.call(_a, event);
  }
  _onInput(event) {
    var _a, _b;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onInput) == null ? void 0 : _b.call(_a, event);
  }
  _onKeyDown(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onKeyDown) == null ? void 0 : _b.call(_a, event);
  }
  _onKeyUp(event) {
    var _a, _b;
    if (!event.isTrusted)
      return;
    if (this._ignoreOverlayEvent(event))
      return;
    (_b = (_a = this._currentTool).onKeyUp) == null ? void 0 : _b.call(_a, event);
  }
  updateHighlight(model, userGesture) {
    var _a, _b;
    let tooltipText = model == null ? void 0 : model.tooltipText;
    if (tooltipText === void 0 && !(model == null ? void 0 : model.tooltipList) && (model == null ? void 0 : model.selector))
      tooltipText = this.injectedScript.utils.asLocator(this.state.language, model.selector);
    this.highlight.updateHighlight((model == null ? void 0 : model.elements) || [], { ...model, tooltipText });
    if (userGesture)
      (_b = (_a = this._delegate).highlightUpdated) == null ? void 0 : _b.call(_a);
  }
  _ignoreOverlayEvent(event) {
    return event.composedPath().some((e) => {
      const nodeName = e.nodeName || "";
      return nodeName.toLowerCase() === "x-pw-glass";
    });
  }
  deepEventTarget(event) {
    var _a;
    for (const element of event.composedPath()) {
      if (!((_a = this.overlay) == null ? void 0 : _a.contains(element)))
        return element;
    }
    return event.composedPath()[0];
  }
  setMode(mode) {
    var _a, _b;
    void ((_b = (_a = this._delegate).setMode) == null ? void 0 : _b.call(_a, mode));
  }
  async performAction(action) {
    var _a, _b;
    await ((_b = (_a = this._delegate).performAction) == null ? void 0 : _b.call(_a, action).catch(() => {
    }));
  }
  recordAction(action) {
    var _a, _b;
    void ((_b = (_a = this._delegate).recordAction) == null ? void 0 : _b.call(_a, action));
  }
  setOverlayState(state) {
    var _a, _b;
    void ((_b = (_a = this._delegate).setOverlayState) == null ? void 0 : _b.call(_a, state));
  }
  elementPicked(selector, model) {
    var _a, _b;
    const ariaSnapshot = this.injectedScript.ariaSnapshot(model.elements[0]);
    void ((_b = (_a = this._delegate).elementPicked) == null ? void 0 : _b.call(_a, { selector, ariaSnapshot }));
  }
};
var Dialog = class {
  constructor(recorder) {
    this._dialogElement = null;
    this._recorder = recorder;
  }
  isShowing() {
    return !!this._dialogElement;
  }
  show(options) {
    const acceptButton = this._recorder.document.createElement("x-pw-tool-item");
    acceptButton.title = "Accept";
    acceptButton.classList.add("accept");
    acceptButton.appendChild(this._recorder.document.createElement("x-div"));
    acceptButton.addEventListener("click", () => options.onCommit());
    const cancelButton = this._recorder.document.createElement("x-pw-tool-item");
    cancelButton.title = "Close";
    cancelButton.classList.add("cancel");
    cancelButton.appendChild(this._recorder.document.createElement("x-div"));
    cancelButton.addEventListener("click", () => {
      var _a;
      this.close();
      (_a = options.onCancel) == null ? void 0 : _a.call(options);
    });
    this._dialogElement = this._recorder.document.createElement("x-pw-dialog");
    this._keyboardListener = (event) => {
      var _a;
      if (event.key === "Escape") {
        this.close();
        (_a = options.onCancel) == null ? void 0 : _a.call(options);
        return;
      }
      if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {
        if (this._dialogElement)
          options.onCommit();
        return;
      }
    };
    this._recorder.document.addEventListener("keydown", this._keyboardListener, true);
    const toolbarElement = this._recorder.document.createElement("x-pw-tools-list");
    const labelElement = this._recorder.document.createElement("label");
    labelElement.textContent = options.label;
    toolbarElement.appendChild(labelElement);
    toolbarElement.appendChild(this._recorder.document.createElement("x-spacer"));
    toolbarElement.appendChild(acceptButton);
    toolbarElement.appendChild(cancelButton);
    this._dialogElement.appendChild(toolbarElement);
    const bodyElement = this._recorder.document.createElement("x-pw-dialog-body");
    bodyElement.appendChild(options.body);
    this._dialogElement.appendChild(bodyElement);
    this._recorder.highlight.appendChild(this._dialogElement);
    return this._dialogElement;
  }
  moveTo(top, left) {
    if (!this._dialogElement)
      return;
    this._dialogElement.style.top = top + "px";
    this._dialogElement.style.left = left + "px";
  }
  close() {
    if (!this._dialogElement)
      return;
    this._dialogElement.remove();
    this._recorder.document.removeEventListener("keydown", this._keyboardListener);
    this._dialogElement = null;
  }
};
function deepActiveElement(document) {
  let activeElement = document.activeElement;
  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement)
    activeElement = activeElement.shadowRoot.activeElement;
  return activeElement;
}
function modifiersForEvent(event) {
  return (event.altKey ? 1 : 0) | (event.ctrlKey ? 2 : 0) | (event.metaKey ? 4 : 0) | (event.shiftKey ? 8 : 0);
}
function buttonForEvent(event) {
  switch (event.which) {
    case 1:
      return "left";
    case 2:
      return "middle";
    case 3:
      return "right";
  }
  return "left";
}
function positionForEvent(event) {
  const targetElement = event.target;
  if (targetElement.nodeName !== "CANVAS")
    return;
  return {
    x: event.offsetX,
    y: event.offsetY
  };
}
function consumeEvent(e) {
  e.preventDefault();
  e.stopPropagation();
  e.stopImmediatePropagation();
}
function asCheckbox(node) {
  if (!node || node.nodeName !== "INPUT")
    return null;
  const inputElement = node;
  return ["checkbox", "radio"].includes(inputElement.type) ? inputElement : null;
}
function isRangeInput(node) {
  if (!node || node.nodeName !== "INPUT")
    return false;
  const inputElement = node;
  return inputElement.type.toLowerCase() === "range";
}
function addEventListener(target, eventName, listener, useCapture) {
  target.addEventListener(eventName, listener, useCapture);
  const remove = () => {
    target.removeEventListener(eventName, listener, useCapture);
  };
  return remove;
}
function removeEventListeners(listeners) {
  for (const listener of listeners)
    listener();
  listeners.splice(0, listeners.length);
}
function querySelector(injectedScript, selector, ownerDocument) {
  try {
    const parsedSelector = injectedScript.parseSelector(selector);
    return {
      selector,
      elements: injectedScript.querySelectorAll(parsedSelector, ownerDocument)
    };
  } catch (e) {
    return {
      selector,
      elements: []
    };
  }
}
function createSvgElement(doc, { tagName, attrs, children }) {
  const elem = doc.createElementNS("http://www.w3.org/2000/svg", tagName);
  if (attrs) {
    for (const [k, v] of Object.entries(attrs))
      elem.setAttribute(k, v);
  }
  if (children) {
    for (const c of children)
      elem.appendChild(createSvgElement(doc, c));
  }
  return elem;
}

// packages/playwright-core/src/server/injected/recorder/pollingRecorder.ts
var PollingRecorder = class {
  constructor(injectedScript) {
    this._recorder = new Recorder(injectedScript);
    this._embedder = injectedScript.window;
    injectedScript.onGlobalListenersRemoved.add(() => this._recorder.installListeners());
    const refreshOverlay = () => {
      this._pollRecorderMode().catch((e) => console.log(e));
    };
    this._embedder.__pw_refreshOverlay = refreshOverlay;
    refreshOverlay();
  }
  async _pollRecorderMode() {
    const pollPeriod = 1e3;
    if (this._pollRecorderModeTimer)
      clearTimeout(this._pollRecorderModeTimer);
    const state = await this._embedder.__pw_recorderState().catch(() => {
    });
    if (!state) {
      this._pollRecorderModeTimer = this._recorder.injectedScript.builtinSetTimeout(() => this._pollRecorderMode(), pollPeriod);
      return;
    }
    const win = this._recorder.document.defaultView;
    if (win.top !== win) {
      state.actionPoint = void 0;
    }
    this._recorder.setUIState(state, this);
    this._pollRecorderModeTimer = this._recorder.injectedScript.builtinSetTimeout(() => this._pollRecorderMode(), pollPeriod);
  }
  async performAction(action) {
    await this._embedder.__pw_recorderPerformAction(action);
  }
  async recordAction(action) {
    await this._embedder.__pw_recorderRecordAction(action);
  }
  async elementPicked(elementInfo) {
    await this._embedder.__pw_recorderElementPicked(elementInfo);
  }
  async setMode(mode) {
    await this._embedder.__pw_recorderSetMode(mode);
  }
  async setOverlayState(state) {
    await this._embedder.__pw_recorderSetOverlayState(state);
  }
};
var pollingRecorder_default = PollingRecorder;
`;
});

// node_modules/playwright-core/lib/server/codegen/language.js
var require_language = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fromKeyboardModifiers = fromKeyboardModifiers;
  exports.generateCode = generateCode;
  exports.sanitizeDeviceOptions = sanitizeDeviceOptions;
  exports.toClickOptionsForSourceCode = toClickOptionsForSourceCode;
  exports.toKeyboardModifiers = toKeyboardModifiers;
  exports.toSignalMap = toSignalMap;
  function generateCode(actions, languageGenerator, options) {
    const header = languageGenerator.generateHeader(options);
    const footer = languageGenerator.generateFooter(options.saveStorage);
    const actionTexts = actions.map((a) => languageGenerator.generateAction(a)).filter(Boolean);
    const text = [header, ...actionTexts, footer].join(`
`);
    return {
      header,
      footer,
      actionTexts,
      text
    };
  }
  function sanitizeDeviceOptions(device, options) {
    const cleanedOptions = {};
    for (const property in options) {
      if (JSON.stringify(device[property]) !== JSON.stringify(options[property]))
        cleanedOptions[property] = options[property];
    }
    return cleanedOptions;
  }
  function toSignalMap(action) {
    let popup;
    let download;
    let dialog;
    for (const signal of action.signals) {
      if (signal.name === "popup")
        popup = signal;
      else if (signal.name === "download")
        download = signal;
      else if (signal.name === "dialog")
        dialog = signal;
    }
    return {
      popup,
      download,
      dialog
    };
  }
  function toKeyboardModifiers(modifiers) {
    const result = [];
    if (modifiers & 1)
      result.push("Alt");
    if (modifiers & 2)
      result.push("ControlOrMeta");
    if (modifiers & 4)
      result.push("ControlOrMeta");
    if (modifiers & 8)
      result.push("Shift");
    return result;
  }
  function fromKeyboardModifiers(modifiers) {
    let result = 0;
    if (!modifiers)
      return result;
    if (modifiers.includes("Alt"))
      result |= 1;
    if (modifiers.includes("Control"))
      result |= 2;
    if (modifiers.includes("ControlOrMeta"))
      result |= 2;
    if (modifiers.includes("Meta"))
      result |= 4;
    if (modifiers.includes("Shift"))
      result |= 8;
    return result;
  }
  function toClickOptionsForSourceCode(action) {
    const modifiers = toKeyboardModifiers(action.modifiers);
    const options = {};
    if (action.button !== "left")
      options.button = action.button;
    if (modifiers.length)
      options.modifiers = modifiers;
    if (action.clickCount > 2)
      options.clickCount = action.clickCount;
    if (action.position)
      options.position = action.position;
    return options;
  }
});

// node_modules/playwright-core/lib/server/deviceDescriptorsSource.json
var require_deviceDescriptorsSource = __commonJS((exports, module) => {
  module.exports = {
    "Blackberry PlayBook": {
      userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.2 Safari/536.2+",
      viewport: {
        width: 600,
        height: 1024
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Blackberry PlayBook landscape": {
      userAgent: "Mozilla/5.0 (PlayBook; U; RIM Tablet OS 2.1.0; en-US) AppleWebKit/536.2+ (KHTML like Gecko) Version/18.2 Safari/536.2+",
      viewport: {
        width: 1024,
        height: 600
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "BlackBerry Z30": {
      userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.2 Mobile Safari/537.10+",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "BlackBerry Z30 landscape": {
      userAgent: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/18.2 Mobile Safari/537.10+",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note 3": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.2 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note 3 landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SM-N900T Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.2 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note II": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.2 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy Note II landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.1; en-us; GT-N7100 Build/JRO03C) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.2 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S III": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.2 Mobile Safari/534.30",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S III landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.0; en-us; GT-I9300 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/18.2 Mobile Safari/534.30",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Galaxy S5": {
      userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S8": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 740
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S8 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; SM-G950U Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 740,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S9+": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 320,
        height: 658
      },
      deviceScaleFactor: 4.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy S9+ landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; SM-G965U Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 658,
        height: 320
      },
      deviceScaleFactor: 4.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy Tab S4": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      viewport: {
        width: 712,
        height: 1138
      },
      deviceScaleFactor: 2.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Galaxy Tab S4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.1.0; SM-T837A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      viewport: {
        width: 1138,
        height: 712
      },
      deviceScaleFactor: 2.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "iPad (gen 5)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 5) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 6)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 6) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 7)": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 810,
        height: 1080
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad (gen 7) landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1080,
        height: 810
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Mini": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 768,
        height: 1024
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Mini landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1024,
        height: 768
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Pro 11": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 834,
        height: 1194
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPad Pro 11 landscape": {
      userAgent: "Mozilla/5.0 (iPad; CPU OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 1194,
        height: 834
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 6 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 7 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 667
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 667,
        height: 375
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 414,
        height: 736
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 8 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 736,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone SE": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.2 Mobile/14E304 Safari/602.1",
      viewport: {
        width: 320,
        height: 568
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone SE landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Version/18.2 Mobile/14E304 Safari/602.1",
      viewport: {
        width: 568,
        height: 320
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone X": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 375,
        height: 812
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone X landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/18.2 Mobile/15A372 Safari/604.1",
      viewport: {
        width: 812,
        height: 375
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone XR": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 414,
        height: 896
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone XR landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      viewport: {
        width: 896,
        height: 414
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 414,
        height: 715
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 800,
        height: 364
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 635
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 724,
        height: 325
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 414,
        height: 715
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 11 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 12_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 414,
        height: 896
      },
      viewport: {
        width: 808,
        height: 364
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 378
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Mini": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 629
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 12 Mini landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 712,
        height: 325
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 342
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 342
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Mini": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 375,
        height: 629
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 13 Mini landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 375,
        height: 812
      },
      viewport: {
        width: 712,
        height: 327
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 390,
        height: 664
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 390,
        height: 844
      },
      viewport: {
        width: 750,
        height: 340
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 428,
        height: 746
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 428,
        height: 926
      },
      viewport: {
        width: 832,
        height: 378
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 393,
        height: 660
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 734,
        height: 343
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 430,
        height: 740
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 14 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 814,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 393,
        height: 659
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 734,
        height: 343
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 Plus": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 430,
        height: 739
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 Plus landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 814,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 Pro": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 393,
        height: 659
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 Pro landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 393,
        height: 852
      },
      viewport: {
        width: 734,
        height: 343
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 Pro Max": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 430,
        height: 739
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "iPhone 15 Pro Max landscape": {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 17_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Mobile/15E148 Safari/604.1",
      screen: {
        width: 430,
        height: 932
      },
      viewport: {
        width: 814,
        height: 380
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Kindle Fire HDX": {
      userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
      viewport: {
        width: 800,
        height: 1280
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Kindle Fire HDX landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; en-us; KFAPWI Build/JDQ39) AppleWebKit/535.19 (KHTML, like Gecko) Silk/3.13 Safari/535.19 Silk-Accelerated=true",
      viewport: {
        width: 1280,
        height: 800
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "LG Optimus L70": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 384,
        height: 640
      },
      deviceScaleFactor: 1.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "LG Optimus L70 landscape": {
      userAgent: "Mozilla/5.0 (Linux; U; Android 4.4.2; en-us; LGMS323 Build/KOT49I.MS32310c) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 384
      },
      deviceScaleFactor: 1.25,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 550": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 550 landscape": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 550) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 950": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 4,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Microsoft Lumia 950 landscape": {
      userAgent: "Mozilla/5.0 (Windows Phone 10.0; Android 4.2.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36 Edge/14.14263",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 4,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 10": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      viewport: {
        width: 800,
        height: 1280
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 10 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 10 Build/MOB31T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      viewport: {
        width: 1280,
        height: 800
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 4": {
      userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 384,
        height: 640
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 384
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5X": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 5X landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 5X Build/OPR4.170623.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.1.1; Nexus 6 Build/N6F26U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6P": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 412,
        height: 732
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 6P landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Nexus 6P Build/OPP3.170518.006) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 732,
        height: 412
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 7": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      viewport: {
        width: 600,
        height: 960
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nexus 7 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 7 Build/MOB30X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      viewport: {
        width: 960,
        height: 600
      },
      deviceScaleFactor: 2,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia Lumia 520": {
      userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
      viewport: {
        width: 320,
        height: 533
      },
      deviceScaleFactor: 1.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia Lumia 520 landscape": {
      userAgent: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 520)",
      viewport: {
        width: 533,
        height: 320
      },
      deviceScaleFactor: 1.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Nokia N9": {
      userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
      viewport: {
        width: 480,
        height: 854
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Nokia N9 landscape": {
      userAgent: "Mozilla/5.0 (MeeGo; NokiaN9) AppleWebKit/534.13 (KHTML, like Gecko) NokiaBrowser/8.5.0 Mobile Safari/534.13",
      viewport: {
        width: 854,
        height: 480
      },
      deviceScaleFactor: 1,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "webkit"
    },
    "Pixel 2": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 411,
        height: 731
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 731,
        height: 411
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 XL": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 411,
        height: 823
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 2 XL landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 823,
        height: 411
      },
      deviceScaleFactor: 3.5,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 3": {
      userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 393,
        height: 786
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 3 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 9; Pixel 3 Build/PQ1A.181105.017.A1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 786,
        height: 393
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4": {
      userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 353,
        height: 745
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 10; Pixel 4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 745,
        height: 353
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4a (5G)": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      screen: {
        width: 412,
        height: 892
      },
      viewport: {
        width: 412,
        height: 765
      },
      deviceScaleFactor: 2.63,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 4a (5G) landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 4a (5G)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      screen: {
        height: 892,
        width: 412
      },
      viewport: {
        width: 840,
        height: 312
      },
      deviceScaleFactor: 2.63,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 5": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      screen: {
        width: 393,
        height: 851
      },
      viewport: {
        width: 393,
        height: 727
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 5 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 11; Pixel 5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      screen: {
        width: 851,
        height: 393
      },
      viewport: {
        width: 802,
        height: 293
      },
      deviceScaleFactor: 2.75,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 7": {
      userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      screen: {
        width: 412,
        height: 915
      },
      viewport: {
        width: 412,
        height: 839
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Pixel 7 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 14; Pixel 7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      screen: {
        width: 915,
        height: 412
      },
      viewport: {
        width: 863,
        height: 360
      },
      deviceScaleFactor: 2.625,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Moto G4": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 360,
        height: 640
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Moto G4 landscape": {
      userAgent: "Mozilla/5.0 (Linux; Android 7.0; Moto G (4)) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Mobile Safari/537.36",
      viewport: {
        width: 640,
        height: 360
      },
      deviceScaleFactor: 3,
      isMobile: true,
      hasTouch: true,
      defaultBrowserType: "chromium"
    },
    "Desktop Chrome HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Edge HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36 Edg/131.0.6778.33",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Firefox HiDPI": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "firefox"
    },
    "Desktop Safari": {
      userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Safari/605.1.15",
      screen: {
        width: 1792,
        height: 1120
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 2,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "webkit"
    },
    "Desktop Chrome": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Edge": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.33 Safari/537.36 Edg/131.0.6778.33",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "chromium"
    },
    "Desktop Firefox": {
      userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0",
      screen: {
        width: 1920,
        height: 1080
      },
      viewport: {
        width: 1280,
        height: 720
      },
      deviceScaleFactor: 1,
      isMobile: false,
      hasTouch: false,
      defaultBrowserType: "firefox"
    }
  };
});

// node_modules/playwright-core/lib/server/deviceDescriptors.js
var require_deviceDescriptors = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deviceDescriptors = undefined;
  var _deviceDescriptorsSource = _interopRequireDefault(require_deviceDescriptorsSource());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var deviceDescriptors = exports.deviceDescriptors = _deviceDescriptorsSource.default;
});

// node_modules/playwright-core/lib/server/codegen/javascript.js
var require_javascript2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaScriptLanguageGenerator = exports.JavaScriptFormatter = undefined;
  exports.quoteMultiline = quoteMultiline;
  var _language = require_language();
  var _deviceDescriptors = require_deviceDescriptors();
  var _utils = require_utils();

  class JavaScriptLanguageGenerator {
    constructor(isTest) {
      this.id = undefined;
      this.groupName = "Node.js";
      this.name = undefined;
      this.highlighter = "javascript";
      this._isTest = undefined;
      this.id = isTest ? "playwright-test" : "javascript";
      this.name = isTest ? "Test Runner" : "Library";
      this._isTest = isTest;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isTest && (action.name === "openPage" || action.name === "closePage"))
        return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new JavaScriptFormatter(2);
      if (action.name === "openPage") {
        formatter.add(`const ${pageAlias} = await context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`await ${pageAlias}.goto(${quote(action.url)});`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.contentFrame()`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.once('dialog', dialog => {
    console.log(\`Dialog message: \${dialog.message()}\`);
    dialog.dismiss().catch(() => {});
  });`);
      }
      if (signals.popup)
        formatter.add(`const ${signals.popup.popupAlias}Promise = ${pageAlias}.waitForEvent('popup');`);
      if (signals.download)
        formatter.add(`const download${signals.download.downloadAlias}Promise = ${pageAlias}.waitForEvent('download');`);
      formatter.add(wrapWithStep(actionInContext.description, this._generateActionCall(subject, actionInContext)));
      if (signals.popup)
        formatter.add(`const ${signals.popup.popupAlias} = await ${signals.popup.popupAlias}Promise;`);
      if (signals.download)
        formatter.add(`const download${signals.download.downloadAlias} = await download${signals.download.downloadAlias}Promise;`);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          const optionsString = formatOptions(options, false);
          return `await ${subject}.${this._asLocator(action.selector)}.${method}(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.check();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.uncheck();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.setInputFiles(${formatObject(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.goto(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.selectOption(${formatObject(action.options.length === 1 ? action.options[0] : action.options)});`;
        case "assertText":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "toContainText" : "toHaveText"}(${quote(action.text)});`;
        case "assertChecked":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".not"}.toBeChecked();`;
        case "assertVisible":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toBeVisible();`;
        case "assertValue": {
          const assertion = action.value ? `toHaveValue(${quote(action.value)})` : `toBeEmpty()`;
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
        case "assertSnapshot":
          return `${this._isTest ? "" : "// "}await expect(${subject}.${this._asLocator(action.selector)}).toMatchAriaSnapshot(${quoteMultiline(action.snapshot)});`;
      }
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)("javascript", selector);
    }
    generateHeader(options) {
      if (this._isTest)
        return this.generateTestHeader(options);
      return this.generateStandaloneHeader(options);
    }
    generateFooter(saveStorage) {
      if (this._isTest)
        return this.generateTestFooter(saveStorage);
      return this.generateStandaloneFooter(saveStorage);
    }
    generateTestHeader(options) {
      const formatter = new JavaScriptFormatter;
      const useText = formatContextOptions(options.contextOptions, options.deviceName, this._isTest);
      formatter.add(`
      import { test, expect${options.deviceName ? ", devices" : ""} } from '@playwright/test';
${useText ? `
test.use(` + useText + `);
` : ""}
      test('test', async ({ page }) => {`);
      if (options.contextOptions.recordHar)
        formatter.add(`  await page.routeFromHAR(${quote(options.contextOptions.recordHar.path)});`);
      return formatter.format();
    }
    generateTestFooter(saveStorage) {
      return `});`;
    }
    generateStandaloneHeader(options) {
      const formatter = new JavaScriptFormatter;
      formatter.add(`
      const { ${options.browserName}${options.deviceName ? ", devices" : ""} } = require('playwright');

      (async () => {
        const browser = await ${options.browserName}.launch(${formatObjectOrVoid(options.launchOptions)});
        const context = await browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName, false)});`);
      if (options.contextOptions.recordHar)
        formatter.add(`        await context.routeFromHAR(${quote(options.contextOptions.recordHar.path)});`);
      return formatter.format();
    }
    generateStandaloneFooter(saveStorage) {
      const storageStateLine = saveStorage ? `
  await context.storageState({ path: ${quote(saveStorage)} });` : "";
      return `
  // ---------------------${storageStateLine}
  await context.close();
  await browser.close();
})();`;
    }
  }
  exports.JavaScriptLanguageGenerator = JavaScriptLanguageGenerator;
  function formatOptions(value, hasArguments) {
    const keys = Object.keys(value);
    if (!keys.length)
      return "";
    return (hasArguments ? ", " : "") + formatObject(value);
  }
  function formatObject(value, indent = "  ") {
    if (typeof value === "string")
      return quote(value);
    if (Array.isArray(value))
      return `[${value.map((o) => formatObject(o)).join(", ")}]`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
      if (!keys.length)
        return "{}";
      const tokens = [];
      for (const key of keys)
        tokens.push(`${key}: ${formatObject(value[key])}`);
      return `{
${indent}${tokens.join(`,
${indent}`)}
}`;
    }
    return String(value);
  }
  function formatObjectOrVoid(value, indent = "  ") {
    const result = formatObject(value, indent);
    return result === "{}" ? "" : result;
  }
  function formatContextOptions(options, deviceName, isTest) {
    const device = deviceName && _deviceDescriptors.deviceDescriptors[deviceName];
    options = {
      ...options,
      recordHar: undefined
    };
    if (!device)
      return formatObjectOrVoid(options);
    let serializedObject = formatObjectOrVoid((0, _language.sanitizeDeviceOptions)(device, options));
    if (!serializedObject)
      serializedObject = `{
}`;
    const lines = serializedObject.split(`
`);
    lines.splice(1, 0, `...devices[${quote(deviceName)}],`);
    return lines.join(`
`);
  }

  class JavaScriptFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(2);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      const trim = isMultilineString(text) ? (line) => line : (line) => line.trim();
      this._lines = text.trim().split(`
`).map(trim).concat(this._lines);
    }
    add(text) {
      const trim = isMultilineString(text) ? (line) => line : (line) => line.trim();
      this._lines.push(...text.trim().split(`
`).map(trim));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "")
          return line;
        if (line.startsWith("}") || line.startsWith("]"))
          spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if|try).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        const callCarryOver = line.startsWith(".set");
        line = spaces + extraSpaces + (callCarryOver ? this._baseIndent : "") + line;
        if (line.endsWith("{") || line.endsWith("["))
          spaces += this._baseIndent;
        return this._baseOffset + line;
      }).join(`
`);
    }
  }
  exports.JavaScriptFormatter = JavaScriptFormatter;
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, "'");
  }
  function wrapWithStep(description, body) {
    return description ? `await test.step(\`${description}\`, async () => {
${body}
});` : body;
  }
  function quoteMultiline(text, indent = "  ") {
    const escape = (text2) => text2.replace(/\\/g, "\\\\").replace(/`/g, "\\`").replace(/\$\{/g, "\\${");
    const lines = text.split(`
`);
    if (lines.length === 1)
      return "`" + escape(text) + "`";
    return "`\n" + lines.map((line) => indent + escape(line).replace(/\${/g, "\\${")).join(`
`) + `
${indent}\``;
  }
  function isMultilineString(text) {
    var _text$match;
    return (_text$match = text.match(/`[\S\s]*`/)) === null || _text$match === undefined ? undefined : _text$match[0].includes(`
`);
  }
});

// node_modules/playwright-core/lib/server/codegen/java.js
var require_java = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JavaLanguageGenerator = undefined;
  var _language = require_language();
  var _deviceDescriptors = require_deviceDescriptors();
  var _javascript = require_javascript2();
  var _utils = require_utils();

  class JavaLanguageGenerator {
    constructor(mode) {
      this.id = undefined;
      this.groupName = "Java";
      this.name = undefined;
      this.highlighter = "java";
      this._mode = undefined;
      if (mode === "library") {
        this.name = "Library";
        this.id = "java";
      } else if (mode === "junit") {
        this.name = "JUnit";
        this.id = "java-junit";
      } else {
        throw new Error(`Unknown Java language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      const pageAlias = actionInContext.frame.pageAlias;
      const offset = this._mode === "junit" ? 4 : 6;
      const formatter = new _javascript.JavaScriptFormatter(offset);
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
        return "";
      if (action.name === "openPage") {
        formatter.add(`Page ${pageAlias} = context.newPage();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`${pageAlias}.navigate(${quote(action.url)});`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector, false)}.contentFrame()`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`  ${pageAlias}.onceDialog(dialog -> {
        System.out.println(String.format("Dialog message: %s", dialog.message()));
        dialog.dismiss();
      });`);
      }
      let code = this._generateActionCall(subject, actionInContext, !!actionInContext.frame.framePath.length);
      if (signals.popup) {
        code = `Page ${signals.popup.popupAlias} = ${pageAlias}.waitForPopup(() -> {
        ${code}
      });`;
      }
      if (signals.download) {
        code = `Download download${signals.download.downloadAlias} = ${pageAlias}.waitForDownload(() -> {
        ${code}
      });`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext, inFrameLocator) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close();`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          const optionsText = formatClickOptions(options);
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.${method}(${optionsText});`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.check();`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.uncheck();`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.fill(${quote(action.text)});`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.setInputFiles(${formatPath(action.files.length === 1 ? action.files[0] : action.files)});`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.press(${quote(shortcut)});`;
        }
        case "navigate":
          return `${subject}.navigate(${quote(action.url)});`;
        case "select":
          return `${subject}.${this._asLocator(action.selector, inFrameLocator)}.selectOption(${formatSelectOption(action.options.length === 1 ? action.options[0] : action.options)});`;
        case "assertText":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${action.substring ? "containsText" : "hasText"}(${quote(action.text)});`;
        case "assertChecked":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)})${action.checked ? "" : ".not()"}.isChecked();`;
        case "assertVisible":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).isVisible();`;
        case "assertValue": {
          const assertion = action.value ? `hasValue(${quote(action.value)})` : `isEmpty()`;
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).${assertion};`;
        }
        case "assertSnapshot":
          return `assertThat(${subject}.${this._asLocator(action.selector, inFrameLocator)}).matchesAriaSnapshot(${quote(action.snapshot)});`;
      }
    }
    _asLocator(selector, inFrameLocator) {
      return (0, _utils.asLocator)("java", selector, inFrameLocator);
    }
    generateHeader(options) {
      const formatter = new _javascript.JavaScriptFormatter;
      if (this._mode === "junit") {
        formatter.add(`
      import com.microsoft.playwright.junit.UsePlaywright;
      import com.microsoft.playwright.Page;
      import com.microsoft.playwright.options.*;

      import org.junit.jupiter.api.*;
      import static com.microsoft.playwright.assertions.PlaywrightAssertions.*;

      @UsePlaywright
      public class TestExample {
        @Test
        void test(Page page) {`);
        return formatter.format();
      }
      formatter.add(`
    import com.microsoft.playwright.*;
    import com.microsoft.playwright.options.*;
    import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;
    import java.util.*;

    public class Example {
      public static void main(String[] args) {
        try (Playwright playwright = Playwright.create()) {
          Browser browser = playwright.${options.browserName}().launch(${formatLaunchOptions(options.launchOptions)});
          BrowserContext context = browser.newContext(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      if (options.contextOptions.recordHar)
        formatter.add(`          context.routeFromHAR(${quote(options.contextOptions.recordHar.path)});`);
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const storageStateLine = saveStorage ? `
      context.storageState(new BrowserContext.StorageStateOptions().setPath(${quote(saveStorage)}));
` : "";
      if (this._mode === "junit") {
        return `${storageStateLine}  }
}`;
      }
      return `${storageStateLine}    }
  }
}`;
    }
  }
  exports.JavaLanguageGenerator = JavaLanguageGenerator;
  function formatPath(files) {
    if (Array.isArray(files)) {
      if (files.length === 0)
        return "new Path[0]";
      return `new Path[] {${files.map((s) => "Paths.get(" + quote(s) + ")").join(", ")}}`;
    }
    return `Paths.get(${quote(files)})`;
  }
  function formatSelectOption(options) {
    if (Array.isArray(options)) {
      if (options.length === 0)
        return "new String[0]";
      return `new String[] {${options.map((s) => quote(s)).join(", ")}}`;
    }
    return quote(options);
  }
  function formatLaunchOptions(options) {
    const lines = [];
    if (!Object.keys(options).filter((key) => options[key] !== undefined).length)
      return "";
    lines.push("new BrowserType.LaunchOptions()");
    if (options.channel)
      lines.push(`  .setChannel(${quote(options.channel)})`);
    if (typeof options.headless === "boolean")
      lines.push(`  .setHeadless(false)`);
    return lines.join(`
`);
  }
  function formatContextOptions(contextOptions, deviceName) {
    const lines = [];
    if (!Object.keys(contextOptions).length && !deviceName)
      return "";
    const device = deviceName ? _deviceDescriptors.deviceDescriptors[deviceName] : {};
    const options = {
      ...device,
      ...contextOptions
    };
    lines.push("new Browser.NewContextOptions()");
    if (options.acceptDownloads)
      lines.push(`  .setAcceptDownloads(true)`);
    if (options.bypassCSP)
      lines.push(`  .setBypassCSP(true)`);
    if (options.colorScheme)
      lines.push(`  .setColorScheme(ColorScheme.${options.colorScheme.toUpperCase()})`);
    if (options.deviceScaleFactor)
      lines.push(`  .setDeviceScaleFactor(${options.deviceScaleFactor})`);
    if (options.geolocation)
      lines.push(`  .setGeolocation(${options.geolocation.latitude}, ${options.geolocation.longitude})`);
    if (options.hasTouch)
      lines.push(`  .setHasTouch(${options.hasTouch})`);
    if (options.isMobile)
      lines.push(`  .setIsMobile(${options.isMobile})`);
    if (options.locale)
      lines.push(`  .setLocale(${quote(options.locale)})`);
    if (options.proxy)
      lines.push(`  .setProxy(new Proxy(${quote(options.proxy.server)}))`);
    if (options.serviceWorkers)
      lines.push(`  .setServiceWorkers(ServiceWorkerPolicy.${options.serviceWorkers.toUpperCase()})`);
    if (options.storageState)
      lines.push(`  .setStorageStatePath(Paths.get(${quote(options.storageState)}))`);
    if (options.timezoneId)
      lines.push(`  .setTimezoneId(${quote(options.timezoneId)})`);
    if (options.userAgent)
      lines.push(`  .setUserAgent(${quote(options.userAgent)})`);
    if (options.viewport)
      lines.push(`  .setViewportSize(${options.viewport.width}, ${options.viewport.height})`);
    return lines.join(`
`);
  }
  function formatClickOptions(options) {
    const lines = [];
    if (options.button)
      lines.push(`  .setButton(MouseButton.${options.button.toUpperCase()})`);
    if (options.modifiers)
      lines.push(`  .setModifiers(Arrays.asList(${options.modifiers.map((m) => `KeyboardModifier.${m.toUpperCase()}`).join(", ")}))`);
    if (options.clickCount)
      lines.push(`  .setClickCount(${options.clickCount})`);
    if (options.position)
      lines.push(`  .setPosition(${options.position.x}, ${options.position.y})`);
    if (!lines.length)
      return "";
    lines.unshift(`new Locator.ClickOptions()`);
    return lines.join(`
`);
  }
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, '"');
  }
});

// node_modules/playwright-core/lib/server/codegen/jsonl.js
var require_jsonl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonlLanguageGenerator = undefined;
  var _utils = require_utils();

  class JsonlLanguageGenerator {
    constructor() {
      this.id = "jsonl";
      this.groupName = "";
      this.name = "JSONL";
      this.highlighter = "javascript";
    }
    generateAction(actionInContext) {
      const locator = actionInContext.action.selector ? JSON.parse((0, _utils.asLocator)("jsonl", actionInContext.action.selector)) : undefined;
      const entry = {
        ...actionInContext.action,
        pageAlias: actionInContext.frame.pageAlias,
        locator
      };
      return JSON.stringify(entry);
    }
    generateHeader(options) {
      return JSON.stringify(options);
    }
    generateFooter(saveStorage) {
      return "";
    }
  }
  exports.JsonlLanguageGenerator = JsonlLanguageGenerator;
});

// node_modules/playwright-core/lib/server/codegen/csharp.js
var require_csharp = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CSharpLanguageGenerator = undefined;
  var _language = require_language();
  var _utils = require_utils();
  var _deviceDescriptors = require_deviceDescriptors();

  class CSharpLanguageGenerator {
    constructor(mode) {
      this.id = undefined;
      this.groupName = ".NET C#";
      this.name = undefined;
      this.highlighter = "csharp";
      this._mode = undefined;
      if (mode === "library") {
        this.name = "Library";
        this.id = "csharp";
      } else if (mode === "mstest") {
        this.name = "MSTest";
        this.id = "csharp-mstest";
      } else if (mode === "nunit") {
        this.name = "NUnit";
        this.id = "csharp-nunit";
      } else {
        throw new Error(`Unknown C# language mode: ${mode}`);
      }
      this._mode = mode;
    }
    generateAction(actionInContext) {
      const action = this._generateActionInner(actionInContext);
      if (action)
        return action;
      return "";
    }
    _generateActionInner(actionInContext) {
      const action = actionInContext.action;
      if (this._mode !== "library" && (action.name === "openPage" || action.name === "closePage"))
        return "";
      let pageAlias = actionInContext.frame.pageAlias;
      if (this._mode !== "library")
        pageAlias = pageAlias.replace("page", "Page");
      const formatter = new CSharpFormatter(this._mode === "library" ? 0 : 8);
      if (action.name === "openPage") {
        formatter.add(`var ${pageAlias} = await context.NewPageAsync();`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`await ${pageAlias}.GotoAsync(${quote(action.url)});`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.ContentFrame`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog) {
        formatter.add(`    void ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler(object sender, IDialog dialog)
      {
          Console.WriteLine($"Dialog message: {dialog.Message}");
          dialog.DismissAsync();
          ${pageAlias}.Dialog -= ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;
      }
      ${pageAlias}.Dialog += ${pageAlias}_Dialog${signals.dialog.dialogAlias}_EventHandler;`);
      }
      const lines = [];
      lines.push(this._generateActionCall(subject, actionInContext));
      if (signals.download) {
        lines.unshift(`var download${signals.download.downloadAlias} = await ${pageAlias}.RunAndWaitForDownloadAsync(async () =>
{`);
        lines.push(`});`);
      }
      if (signals.popup) {
        lines.unshift(`var ${signals.popup.popupAlias} = await ${pageAlias}.RunAndWaitForPopupAsync(async () =>
{`);
        lines.push(`});`);
      }
      for (const line of lines)
        formatter.add(line);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `await ${subject}.CloseAsync();`;
        case "click": {
          let method = "Click";
          if (action.clickCount === 2)
            method = "DblClick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          if (!Object.entries(options).length)
            return `await ${subject}.${this._asLocator(action.selector)}.${method}Async();`;
          const optionsString = formatObject(options, "    ", "Locator" + method + "Options");
          return `await ${subject}.${this._asLocator(action.selector)}.${method}Async(${optionsString});`;
        }
        case "check":
          return `await ${subject}.${this._asLocator(action.selector)}.CheckAsync();`;
        case "uncheck":
          return `await ${subject}.${this._asLocator(action.selector)}.UncheckAsync();`;
        case "fill":
          return `await ${subject}.${this._asLocator(action.selector)}.FillAsync(${quote(action.text)});`;
        case "setInputFiles":
          return `await ${subject}.${this._asLocator(action.selector)}.SetInputFilesAsync(${formatObject(action.files)});`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `await ${subject}.${this._asLocator(action.selector)}.PressAsync(${quote(shortcut)});`;
        }
        case "navigate":
          return `await ${subject}.GotoAsync(${quote(action.url)});`;
        case "select":
          return `await ${subject}.${this._asLocator(action.selector)}.SelectOptionAsync(${formatObject(action.options)});`;
        case "assertText":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "ToContainTextAsync" : "ToHaveTextAsync"}(${quote(action.text)});`;
        case "assertChecked":
          return `await Expect(${subject}.${this._asLocator(action.selector)})${action.checked ? "" : ".Not"}.ToBeCheckedAsync();`;
        case "assertVisible":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).ToBeVisibleAsync();`;
        case "assertValue": {
          const assertion = action.value ? `ToHaveValueAsync(${quote(action.value)})` : `ToBeEmptyAsync()`;
          return `await Expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
        case "assertSnapshot":
          return `await Expect(${subject}.${this._asLocator(action.selector)}).ToMatchAriaSnapshotAsync(${quote(action.snapshot)});`;
      }
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)("csharp", selector);
    }
    generateHeader(options) {
      if (this._mode === "library")
        return this.generateStandaloneHeader(options);
      return this.generateTestRunnerHeader(options);
    }
    generateStandaloneHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright;
      using System;
      using System.Threading.Tasks;

      using var playwright = await Playwright.CreateAsync();
      await using var browser = await playwright.${toPascal(options.browserName)}.LaunchAsync(${formatObject(options.launchOptions, "    ", "BrowserTypeLaunchOptions")});
      var context = await browser.NewContextAsync(${formatContextOptions(options.contextOptions, options.deviceName)});`);
      if (options.contextOptions.recordHar)
        formatter.add(`      await context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)});`);
      formatter.newLine();
      return formatter.format();
    }
    generateTestRunnerHeader(options) {
      const formatter = new CSharpFormatter(0);
      formatter.add(`
      using Microsoft.Playwright.${this._mode === "nunit" ? "NUnit" : "MSTest"};
      using Microsoft.Playwright;

      ${this._mode === "nunit" ? `[Parallelizable(ParallelScope.Self)]
      [TestFixture]` : "[TestClass]"}
      public class Tests : PageTest
      {`);
      const formattedContextOptions = formatContextOptions(options.contextOptions, options.deviceName);
      if (formattedContextOptions) {
        formatter.add(`public override BrowserNewContextOptions ContextOptions()
      {
          return ${formattedContextOptions};
      }`);
        formatter.newLine();
      }
      formatter.add(`    [${this._mode === "nunit" ? "Test" : "TestMethod"}]
    public async Task MyTest()
    {`);
      if (options.contextOptions.recordHar)
        formatter.add(`    await context.RouteFromHARAsync(${quote(options.contextOptions.recordHar.path)});`);
      return formatter.format();
    }
    generateFooter(saveStorage) {
      const offset = this._mode === "library" ? "" : "        ";
      let storageStateLine = saveStorage ? `
${offset}await context.StorageStateAsync(new BrowserContextStorageStateOptions
${offset}{
${offset}    Path = ${quote(saveStorage)}
${offset}});
` : "";
      if (this._mode !== "library")
        storageStateLine += `    }
}
`;
      return storageStateLine;
    }
  }
  exports.CSharpLanguageGenerator = CSharpLanguageGenerator;
  function formatObject(value, indent = "    ", name = "") {
    if (typeof value === "string") {
      if (["permissions", "colorScheme", "modifiers", "button", "recordHarContent", "recordHarMode", "serviceWorkers"].includes(name))
        return `${getClassName(name)}.${toPascal(value)}`;
      return quote(value);
    }
    if (Array.isArray(value))
      return `new[] { ${value.map((o) => formatObject(o, indent, name)).join(", ")} }`;
    if (typeof value === "object") {
      const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
      if (!keys.length)
        return name ? `new ${getClassName(name)}` : "";
      const tokens = [];
      for (const key of keys) {
        const property = getPropertyName(key);
        tokens.push(`${property} = ${formatObject(value[key], indent, key)},`);
      }
      if (name)
        return `new ${getClassName(name)}
{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
      return `{
${indent}${tokens.join(`
${indent}`)}
${indent}}`;
    }
    if (name === "latitude" || name === "longitude")
      return String(value) + "m";
    return String(value);
  }
  function getClassName(value) {
    switch (value) {
      case "viewport":
        return "ViewportSize";
      case "proxy":
        return "ProxySettings";
      case "permissions":
        return "ContextPermission";
      case "modifiers":
        return "KeyboardModifier";
      case "button":
        return "MouseButton";
      case "recordHarMode":
        return "HarMode";
      case "recordHarContent":
        return "HarContentPolicy";
      case "serviceWorkers":
        return "ServiceWorkerPolicy";
      default:
        return toPascal(value);
    }
  }
  function getPropertyName(key) {
    switch (key) {
      case "storageState":
        return "StorageStatePath";
      case "viewport":
        return "ViewportSize";
      default:
        return toPascal(key);
    }
  }
  function toPascal(value) {
    return value[0].toUpperCase() + value.slice(1);
  }
  function formatContextOptions(contextOptions, deviceName) {
    let options = {
      ...contextOptions
    };
    delete options.recordHar;
    const device = deviceName && _deviceDescriptors.deviceDescriptors[deviceName];
    if (!device) {
      if (!Object.entries(options).length)
        return "";
      return formatObject(options, "    ", "BrowserNewContextOptions");
    }
    options = (0, _language.sanitizeDeviceOptions)(device, options);
    if (!Object.entries(options).length)
      return `playwright.Devices[${quote(deviceName)}]`;
    return formatObject(options, "    ", `BrowserNewContextOptions(playwright.Devices[${quote(deviceName)}])`);
  }

  class CSharpFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split(`
`).map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split(`
`).map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      let previousLine = "";
      return this._lines.map((line) => {
        if (line === "")
          return line;
        if (line.startsWith("}") || line.startsWith("]") || line.includes("});") || line === ");")
          spaces = spaces.substring(this._baseIndent.length);
        const extraSpaces = /^(for|while|if).*\(.*\)$/.test(previousLine) ? this._baseIndent : "";
        previousLine = line;
        line = spaces + extraSpaces + line;
        if (line.endsWith("{") || line.endsWith("[") || line.endsWith("("))
          spaces += this._baseIndent;
        if (line.endsWith("));"))
          spaces = spaces.substring(this._baseIndent.length);
        return this._baseOffset + line;
      }).join(`
`);
    }
  }
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, '"');
  }
});

// node_modules/playwright-core/lib/server/codegen/python.js
var require_python = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PythonLanguageGenerator = undefined;
  var _language = require_language();
  var _utils = require_utils();
  var _deviceDescriptors = require_deviceDescriptors();

  class PythonLanguageGenerator {
    constructor(isAsync, isPyTest) {
      this.id = undefined;
      this.groupName = "Python";
      this.name = undefined;
      this.highlighter = "python";
      this._awaitPrefix = undefined;
      this._asyncPrefix = undefined;
      this._isAsync = undefined;
      this._isPyTest = undefined;
      this.id = isPyTest ? "python-pytest" : isAsync ? "python-async" : "python";
      this.name = isPyTest ? "Pytest" : isAsync ? "Library Async" : "Library";
      this._isAsync = isAsync;
      this._isPyTest = isPyTest;
      this._awaitPrefix = isAsync ? "await " : "";
      this._asyncPrefix = isAsync ? "async " : "";
    }
    generateAction(actionInContext) {
      const action = actionInContext.action;
      if (this._isPyTest && (action.name === "openPage" || action.name === "closePage"))
        return "";
      const pageAlias = actionInContext.frame.pageAlias;
      const formatter = new PythonFormatter(4);
      if (action.name === "openPage") {
        formatter.add(`${pageAlias} = ${this._awaitPrefix}context.new_page()`);
        if (action.url && action.url !== "about:blank" && action.url !== "chrome://newtab/")
          formatter.add(`${this._awaitPrefix}${pageAlias}.goto(${quote(action.url)})`);
        return formatter.format();
      }
      const locators = actionInContext.frame.framePath.map((selector) => `.${this._asLocator(selector)}.content_frame`);
      const subject = `${pageAlias}${locators.join("")}`;
      const signals = (0, _language.toSignalMap)(action);
      if (signals.dialog)
        formatter.add(`  ${pageAlias}.once("dialog", lambda dialog: dialog.dismiss())`);
      let code = `${this._awaitPrefix}${this._generateActionCall(subject, actionInContext)}`;
      if (signals.popup) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_popup() as ${signals.popup.popupAlias}_info {
        ${code}
      }
      ${signals.popup.popupAlias} = ${this._awaitPrefix}${signals.popup.popupAlias}_info.value`;
      }
      if (signals.download) {
        code = `${this._asyncPrefix}with ${pageAlias}.expect_download() as download${signals.download.downloadAlias}_info {
        ${code}
      }
      download${signals.download.downloadAlias} = ${this._awaitPrefix}download${signals.download.downloadAlias}_info.value`;
      }
      formatter.add(code);
      return formatter.format();
    }
    _generateActionCall(subject, actionInContext) {
      const action = actionInContext.action;
      switch (action.name) {
        case "openPage":
          throw Error("Not reached");
        case "closePage":
          return `${subject}.close()`;
        case "click": {
          let method = "click";
          if (action.clickCount === 2)
            method = "dblclick";
          const options = (0, _language.toClickOptionsForSourceCode)(action);
          const optionsString = formatOptions(options, false);
          return `${subject}.${this._asLocator(action.selector)}.${method}(${optionsString})`;
        }
        case "check":
          return `${subject}.${this._asLocator(action.selector)}.check()`;
        case "uncheck":
          return `${subject}.${this._asLocator(action.selector)}.uncheck()`;
        case "fill":
          return `${subject}.${this._asLocator(action.selector)}.fill(${quote(action.text)})`;
        case "setInputFiles":
          return `${subject}.${this._asLocator(action.selector)}.set_input_files(${formatValue(action.files.length === 1 ? action.files[0] : action.files)})`;
        case "press": {
          const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
          const shortcut = [...modifiers, action.key].join("+");
          return `${subject}.${this._asLocator(action.selector)}.press(${quote(shortcut)})`;
        }
        case "navigate":
          return `${subject}.goto(${quote(action.url)})`;
        case "select":
          return `${subject}.${this._asLocator(action.selector)}.select_option(${formatValue(action.options.length === 1 ? action.options[0] : action.options)})`;
        case "assertText":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.substring ? "to_contain_text" : "to_have_text"}(${quote(action.text)})`;
        case "assertChecked":
          return `expect(${subject}.${this._asLocator(action.selector)}).${action.checked ? "to_be_checked()" : "not_to_be_checked()"}`;
        case "assertVisible":
          return `expect(${subject}.${this._asLocator(action.selector)}).to_be_visible()`;
        case "assertValue": {
          const assertion = action.value ? `to_have_value(${quote(action.value)})` : `to_be_empty()`;
          return `expect(${subject}.${this._asLocator(action.selector)}).${assertion};`;
        }
        case "assertSnapshot":
          return `expect(${subject}.${this._asLocator(action.selector)}).to_match_aria_snapshot(${quote(action.snapshot)})`;
      }
    }
    _asLocator(selector) {
      return (0, _utils.asLocator)("python", selector);
    }
    generateHeader(options) {
      const formatter = new PythonFormatter;
      if (this._isPyTest) {
        const contextOptions = formatContextOptions(options.contextOptions, options.deviceName, true);
        const fixture = contextOptions ? `

@pytest.fixture(scope="session")
def browser_context_args(browser_context_args, playwright) {
    return {${contextOptions}}
}
` : "";
        formatter.add(`${options.deviceName ? `import pytest
` : ""}import re
from playwright.sync_api import Page, expect
${fixture}

def test_example(page: Page) -> None {`);
        if (options.contextOptions.recordHar)
          formatter.add(`    page.route_from_har(${quote(options.contextOptions.recordHar.path)})`);
      } else if (this._isAsync) {
        formatter.add(`
import asyncio
import re
from playwright.async_api import Playwright, async_playwright, expect


async def run(playwright: Playwright) -> None {
    browser = await playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = await browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
        if (options.contextOptions.recordHar)
          formatter.add(`    await page.route_from_har(${quote(options.contextOptions.recordHar.path)})`);
      } else {
        formatter.add(`
import re
from playwright.sync_api import Playwright, sync_playwright, expect


def run(playwright: Playwright) -> None {
    browser = playwright.${options.browserName}.launch(${formatOptions(options.launchOptions, false)})
    context = browser.new_context(${formatContextOptions(options.contextOptions, options.deviceName)})`);
        if (options.contextOptions.recordHar)
          formatter.add(`    context.route_from_har(${quote(options.contextOptions.recordHar.path)})`);
      }
      return formatter.format();
    }
    generateFooter(saveStorage) {
      if (this._isPyTest) {
        return "";
      } else if (this._isAsync) {
        const storageStateLine = saveStorage ? `
    await context.storage_state(path=${quote(saveStorage)})` : "";
        return `
    # ---------------------${storageStateLine}
    await context.close()
    await browser.close()


async def main() -> None:
    async with async_playwright() as playwright:
        await run(playwright)


asyncio.run(main())
`;
      } else {
        const storageStateLine = saveStorage ? `
    context.storage_state(path=${quote(saveStorage)})` : "";
        return `
    # ---------------------${storageStateLine}
    context.close()
    browser.close()


with sync_playwright() as playwright:
    run(playwright)
`;
      }
    }
  }
  exports.PythonLanguageGenerator = PythonLanguageGenerator;
  function formatValue(value) {
    if (value === false)
      return "False";
    if (value === true)
      return "True";
    if (value === undefined)
      return "None";
    if (Array.isArray(value))
      return `[${value.map(formatValue).join(", ")}]`;
    if (typeof value === "string")
      return quote(value);
    if (typeof value === "object")
      return JSON.stringify(value);
    return String(value);
  }
  function formatOptions(value, hasArguments, asDict) {
    const keys = Object.keys(value).filter((key) => value[key] !== undefined).sort();
    if (!keys.length)
      return "";
    return (hasArguments ? ", " : "") + keys.map((key) => {
      if (asDict)
        return `"${(0, _utils.toSnakeCase)(key)}": ${formatValue(value[key])}`;
      return `${(0, _utils.toSnakeCase)(key)}=${formatValue(value[key])}`;
    }).join(", ");
  }
  function formatContextOptions(options, deviceName, asDict) {
    options = {
      ...options,
      recordHar: undefined
    };
    const device = deviceName && _deviceDescriptors.deviceDescriptors[deviceName];
    if (!device)
      return formatOptions(options, false, asDict);
    return `**playwright.devices[${quote(deviceName)}]` + formatOptions((0, _language.sanitizeDeviceOptions)(device, options), true, asDict);
  }

  class PythonFormatter {
    constructor(offset = 0) {
      this._baseIndent = undefined;
      this._baseOffset = undefined;
      this._lines = [];
      this._baseIndent = " ".repeat(4);
      this._baseOffset = " ".repeat(offset);
    }
    prepend(text) {
      this._lines = text.trim().split(`
`).map((line) => line.trim()).concat(this._lines);
    }
    add(text) {
      this._lines.push(...text.trim().split(`
`).map((line) => line.trim()));
    }
    newLine() {
      this._lines.push("");
    }
    format() {
      let spaces = "";
      const lines = [];
      this._lines.forEach((line) => {
        if (line === "")
          return lines.push(line);
        if (line === "}") {
          spaces = spaces.substring(this._baseIndent.length);
          return;
        }
        line = spaces + line;
        if (line.endsWith("{")) {
          spaces += this._baseIndent;
          line = line.substring(0, line.length - 1).trimEnd() + ":";
        }
        return lines.push(this._baseOffset + line);
      });
      return lines.join(`
`);
    }
  }
  function quote(text) {
    return (0, _utils.escapeWithQuotes)(text, '"');
  }
});

// node_modules/playwright-core/lib/server/codegen/languages.js
var require_languages = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.languageSet = languageSet;
  var _java = require_java();
  var _javascript = require_javascript2();
  var _jsonl = require_jsonl();
  var _csharp = require_csharp();
  var _python = require_python();
  function languageSet() {
    return new Set([new _java.JavaLanguageGenerator("junit"), new _java.JavaLanguageGenerator("library"), new _javascript.JavaScriptLanguageGenerator(false), new _javascript.JavaScriptLanguageGenerator(true), new _python.PythonLanguageGenerator(false, true), new _python.PythonLanguageGenerator(false, false), new _python.PythonLanguageGenerator(true, false), new _csharp.CSharpLanguageGenerator("mstest"), new _csharp.CSharpLanguageGenerator("nunit"), new _csharp.CSharpLanguageGenerator("library"), new _jsonl.JsonlLanguageGenerator]);
  }
});

// node_modules/playwright-core/lib/server/recorder/throttledFile.js
var require_throttledFile = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ThrottledFile = undefined;
  var fs = _interopRequireWildcard(__require("fs"));
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class ThrottledFile {
    constructor(file) {
      this._file = undefined;
      this._timer = undefined;
      this._text = undefined;
      this._file = file;
    }
    setContent(text) {
      this._text = text;
      if (!this._timer)
        this._timer = setTimeout(() => this.flush(), 250);
    }
    flush() {
      if (this._timer) {
        clearTimeout(this._timer);
        this._timer = undefined;
      }
      if (this._text)
        fs.writeFileSync(this._file, this._text);
      this._text = undefined;
    }
  }
  exports.ThrottledFile = ThrottledFile;
});

// node_modules/playwright-core/lib/utils/isomorphic/recorderUtils.js
var require_recorderUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.buildFullSelector = buildFullSelector;
  exports.toKeyboardModifiers = toKeyboardModifiers;
  exports.traceParamsForAction = traceParamsForAction;
  function buildFullSelector(framePath, selector) {
    return [...framePath, selector].join(" >> internal:control=enter-frame >> ");
  }
  var kDefaultTimeout = 5000;
  function traceParamsForAction(actionInContext) {
    const {
      action
    } = actionInContext;
    switch (action.name) {
      case "navigate": {
        const params = {
          url: action.url
        };
        return {
          method: "goto",
          apiName: "page.goto",
          params
        };
      }
      case "openPage":
      case "closePage":
        throw new Error("Not reached");
    }
    const selector = buildFullSelector(actionInContext.frame.framePath, action.selector);
    switch (action.name) {
      case "click": {
        const params = {
          selector,
          strict: true,
          modifiers: toKeyboardModifiers(action.modifiers),
          button: action.button,
          clickCount: action.clickCount,
          position: action.position
        };
        return {
          method: "click",
          apiName: "locator.click",
          params
        };
      }
      case "press": {
        const params = {
          selector,
          strict: true,
          key: [...toKeyboardModifiers(action.modifiers), action.key].join("+")
        };
        return {
          method: "press",
          apiName: "locator.press",
          params
        };
      }
      case "fill": {
        const params = {
          selector,
          strict: true,
          value: action.text
        };
        return {
          method: "fill",
          apiName: "locator.fill",
          params
        };
      }
      case "setInputFiles": {
        const params = {
          selector,
          strict: true,
          localPaths: action.files
        };
        return {
          method: "setInputFiles",
          apiName: "locator.setInputFiles",
          params
        };
      }
      case "check": {
        const params = {
          selector,
          strict: true
        };
        return {
          method: "check",
          apiName: "locator.check",
          params
        };
      }
      case "uncheck": {
        const params = {
          selector,
          strict: true
        };
        return {
          method: "uncheck",
          apiName: "locator.uncheck",
          params
        };
      }
      case "select": {
        const params = {
          selector,
          strict: true,
          options: action.options.map((option) => ({
            value: option
          }))
        };
        return {
          method: "selectOption",
          apiName: "locator.selectOption",
          params
        };
      }
      case "assertChecked": {
        const params = {
          selector: action.selector,
          expression: "to.be.checked",
          isNot: !action.checked,
          timeout: kDefaultTimeout
        };
        return {
          method: "expect",
          apiName: "expect.toBeChecked",
          params
        };
      }
      case "assertText": {
        const params = {
          selector,
          expression: "to.have.text",
          expectedText: [],
          isNot: false,
          timeout: kDefaultTimeout
        };
        return {
          method: "expect",
          apiName: "expect.toContainText",
          params
        };
      }
      case "assertValue": {
        const params = {
          selector,
          expression: "to.have.value",
          expectedValue: undefined,
          isNot: false,
          timeout: kDefaultTimeout
        };
        return {
          method: "expect",
          apiName: "expect.toHaveValue",
          params
        };
      }
      case "assertVisible": {
        const params = {
          selector,
          expression: "to.be.visible",
          isNot: false,
          timeout: kDefaultTimeout
        };
        return {
          method: "expect",
          apiName: "expect.toBeVisible",
          params
        };
      }
      case "assertSnapshot": {
        const params = {
          selector,
          expression: "to.match.snapshot",
          expectedText: [],
          isNot: false,
          timeout: kDefaultTimeout
        };
        return {
          method: "expect",
          apiName: "expect.toMatchAriaSnapshot",
          params
        };
      }
    }
  }
  function toKeyboardModifiers(modifiers) {
    const result = [];
    if (modifiers & 1)
      result.push("Alt");
    if (modifiers & 2)
      result.push("ControlOrMeta");
    if (modifiers & 4)
      result.push("ControlOrMeta");
    if (modifiers & 8)
      result.push("Shift");
    return result;
  }
});

// node_modules/playwright-core/lib/server/recorder/recorderUtils.js
var require_recorderUtils2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.callMetadataForAction = callMetadataForAction;
  exports.collapseActions = collapseActions;
  exports.frameForAction = frameForAction;
  exports.mainFrameForAction = mainFrameForAction;
  exports.metadataToCallLog = metadataToCallLog;
  var _utils = require_utils();
  var _recorderUtils = require_recorderUtils();
  function metadataToCallLog(metadata, status) {
    var _metadata$params, _metadata$params2, _metadata$error;
    let title = metadata.apiName || metadata.method;
    if (metadata.method === "waitForEventInfo")
      title += `(${metadata.params.info.event})`;
    title = title.replace("object.expect", "expect");
    if (metadata.error)
      status = "error";
    const params = {
      url: (_metadata$params = metadata.params) === null || _metadata$params === undefined ? undefined : _metadata$params.url,
      selector: (_metadata$params2 = metadata.params) === null || _metadata$params2 === undefined ? undefined : _metadata$params2.selector
    };
    let duration = metadata.endTime ? metadata.endTime - metadata.startTime : undefined;
    if (typeof duration === "number" && metadata.pauseStartTime && metadata.pauseEndTime) {
      duration -= metadata.pauseEndTime - metadata.pauseStartTime;
      duration = Math.max(duration, 0);
    }
    const callLog = {
      id: metadata.id,
      messages: metadata.log,
      title,
      status,
      error: (_metadata$error = metadata.error) === null || _metadata$error === undefined || (_metadata$error = _metadata$error.error) === null || _metadata$error === undefined ? undefined : _metadata$error.message,
      params,
      duration
    };
    return callLog;
  }
  function mainFrameForAction(pageAliases, actionInContext) {
    var _find;
    const pageAlias = actionInContext.frame.pageAlias;
    const page = (_find = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)) === null || _find === undefined ? undefined : _find[0];
    if (!page)
      throw new Error(`Internal error: page ${pageAlias} not found in [${[...pageAliases.values()]}]`);
    return page.mainFrame();
  }
  async function frameForAction(pageAliases, actionInContext, action) {
    var _find2;
    const pageAlias = actionInContext.frame.pageAlias;
    const page = (_find2 = [...pageAliases.entries()].find(([, alias]) => pageAlias === alias)) === null || _find2 === undefined ? undefined : _find2[0];
    if (!page)
      throw new Error("Internal error: page not found");
    const fullSelector = (0, _recorderUtils.buildFullSelector)(actionInContext.frame.framePath, action.selector);
    const result = await page.mainFrame().selectors.resolveFrameForSelector(fullSelector);
    if (!result)
      throw new Error("Internal error: frame not found");
    return result.frame;
  }
  function callMetadataForAction(pageAliases, actionInContext) {
    const mainFrame = mainFrameForAction(pageAliases, actionInContext);
    const {
      method,
      apiName,
      params
    } = (0, _recorderUtils.traceParamsForAction)(actionInContext);
    const callMetadata = {
      id: `call@${(0, _utils.createGuid)()}`,
      apiName,
      objectId: mainFrame.guid,
      pageId: mainFrame._page.guid,
      frameId: mainFrame.guid,
      startTime: actionInContext.startTime,
      endTime: 0,
      type: "Frame",
      method,
      params,
      log: []
    };
    return {
      callMetadata,
      mainFrame
    };
  }
  function collapseActions(actions) {
    const result = [];
    for (const action of actions) {
      const lastAction = result[result.length - 1];
      const isSameAction = lastAction && lastAction.action.name === action.action.name && lastAction.frame.pageAlias === action.frame.pageAlias && lastAction.frame.framePath.join("|") === action.frame.framePath.join("|");
      const isSameSelector = lastAction && "selector" in lastAction.action && "selector" in action.action && action.action.selector === lastAction.action.selector;
      const shouldMerge = isSameAction && (action.action.name === "navigate" || action.action.name === "fill" && isSameSelector);
      if (!shouldMerge) {
        result.push(action);
        continue;
      }
      const startTime = result[result.length - 1].startTime;
      result[result.length - 1] = action;
      result[result.length - 1].startTime = startTime;
    }
    return result;
  }
});

// node_modules/playwright-core/lib/server/recorder/recorderRunner.js
var require_recorderRunner = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.performAction = performAction;
  exports.toClickOptions = toClickOptions;
  var _utils = require_utils();
  var _language = require_language();
  var _recorderUtils = require_recorderUtils2();
  var _recorderUtils2 = require_recorderUtils();
  async function performAction(callMetadata, pageAliases, actionInContext) {
    const mainFrame = (0, _recorderUtils.mainFrameForAction)(pageAliases, actionInContext);
    const {
      action
    } = actionInContext;
    const kActionTimeout = 5000;
    if (action.name === "navigate") {
      await mainFrame.goto(callMetadata, action.url, {
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "openPage")
      throw Error("Not reached");
    if (action.name === "closePage") {
      await mainFrame._page.close(callMetadata);
      return;
    }
    const selector = (0, _recorderUtils2.buildFullSelector)(actionInContext.frame.framePath, action.selector);
    if (action.name === "click") {
      const options = toClickOptions(action);
      await mainFrame.click(callMetadata, selector, {
        ...options,
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "press") {
      const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
      const shortcut = [...modifiers, action.key].join("+");
      await mainFrame.press(callMetadata, selector, shortcut, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "fill") {
      await mainFrame.fill(callMetadata, selector, action.text, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "setInputFiles") {
      await mainFrame.setInputFiles(callMetadata, selector, {
        selector,
        payloads: [],
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "check") {
      await mainFrame.check(callMetadata, selector, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "uncheck") {
      await mainFrame.uncheck(callMetadata, selector, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "select") {
      const values = action.options.map((value) => ({
        value
      }));
      await mainFrame.selectOption(callMetadata, selector, [], values, {
        timeout: kActionTimeout,
        strict: true
      });
      return;
    }
    if (action.name === "assertChecked") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.be.checked",
        isNot: !action.checked,
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "assertText") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.have.text",
        expectedText: (0, _utils.serializeExpectedTextValues)([action.text], {
          matchSubstring: true,
          normalizeWhiteSpace: true
        }),
        isNot: false,
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "assertValue") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.have.value",
        expectedValue: action.value,
        isNot: false,
        timeout: kActionTimeout
      });
      return;
    }
    if (action.name === "assertVisible") {
      await mainFrame.expect(callMetadata, selector, {
        selector,
        expression: "to.be.visible",
        isNot: false,
        timeout: kActionTimeout
      });
      return;
    }
    throw new Error("Internal error: unexpected action " + action.name);
  }
  function toClickOptions(action) {
    const modifiers = (0, _language.toKeyboardModifiers)(action.modifiers);
    const options = {};
    if (action.button !== "left")
      options.button = action.button;
    if (modifiers.length)
      options.modifiers = modifiers;
    if (action.clickCount > 1)
      options.clickCount = action.clickCount;
    if (action.position)
      options.position = action.position;
    return options;
  }
});

// node_modules/playwright-core/lib/server/recorder/recorderCollection.js
var require_recorderCollection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RecorderCollection = undefined;
  var _events = __require("events");
  var _time = require_time();
  var _recorderUtils = require_recorderUtils2();
  var _errors = require_errors();
  var _recorderRunner = require_recorderRunner();
  var _debug = require_debug();

  class RecorderCollection extends _events.EventEmitter {
    constructor(pageAliases) {
      super();
      this._actions = [];
      this._enabled = false;
      this._pageAliases = undefined;
      this._pageAliases = pageAliases;
    }
    restart() {
      this._actions = [];
      this.emit("change", []);
    }
    setEnabled(enabled) {
      this._enabled = enabled;
    }
    async performAction(actionInContext) {
      await this._addAction(actionInContext, async (callMetadata) => {
        await (0, _recorderRunner.performAction)(callMetadata, this._pageAliases, actionInContext);
      });
    }
    addRecordedAction(actionInContext) {
      if (["openPage", "closePage"].includes(actionInContext.action.name)) {
        this._actions.push(actionInContext);
        this._fireChange();
        return;
      }
      this._addAction(actionInContext).catch(() => {
      });
    }
    async _addAction(actionInContext, callback) {
      if (!this._enabled)
        return;
      if (actionInContext.action.name === "openPage" || actionInContext.action.name === "closePage") {
        this._actions.push(actionInContext);
        this._fireChange();
        return;
      }
      const {
        callMetadata,
        mainFrame
      } = (0, _recorderUtils.callMetadataForAction)(this._pageAliases, actionInContext);
      await mainFrame.instrumentation.onBeforeCall(mainFrame, callMetadata);
      this._actions.push(actionInContext);
      this._fireChange();
      const error = await (callback === null || callback === undefined ? undefined : callback(callMetadata).catch((e) => e));
      callMetadata.endTime = (0, _time.monotonicTime)();
      actionInContext.endTime = callMetadata.endTime;
      callMetadata.error = error ? (0, _errors.serializeError)(error) : undefined;
      mainFrame.instrumentation.onAfterCall(mainFrame, callMetadata).then(() => {
        this._fireChange();
      }).catch(() => {
      });
    }
    signal(pageAlias, frame, signal) {
      if (!this._enabled)
        return;
      if (signal.name === "navigation" && frame._page.mainFrame() === frame) {
        const timestamp = (0, _time.monotonicTime)();
        const lastAction = this._actions[this._actions.length - 1];
        const signalThreshold = (0, _debug.isUnderTest)() ? 500 : 5000;
        let generateGoto = false;
        if (!lastAction)
          generateGoto = true;
        else if (lastAction.action.name !== "click" && lastAction.action.name !== "press")
          generateGoto = true;
        else if (timestamp - lastAction.startTime > signalThreshold)
          generateGoto = true;
        if (generateGoto) {
          this.addRecordedAction({
            frame: {
              pageAlias,
              framePath: []
            },
            action: {
              name: "navigate",
              url: frame.url(),
              signals: []
            },
            startTime: timestamp,
            endTime: timestamp
          });
        }
        return;
      }
      if (this._actions.length) {
        this._actions[this._actions.length - 1].action.signals.push(signal);
        this._fireChange();
        return;
      }
    }
    _fireChange() {
      if (!this._enabled)
        return;
      this.emit("change", (0, _recorderUtils.collapseActions)(this._actions));
    }
  }
  exports.RecorderCollection = RecorderCollection;
});

// node_modules/playwright-core/lib/server/recorder/contextRecorder.js
var require_contextRecorder = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ContextRecorder = undefined;
  exports.generateFrameSelector = generateFrameSelector;
  var _events = __require("events");
  var recorderSource = _interopRequireWildcard(require_pollingRecorderSource());
  var _utils = require_utils();
  var _timeoutRunner = require_timeoutRunner();
  var _browserContext = require_browserContext();
  var _languages = require_languages();
  var _frames = require_frames();
  var _page = require_page();
  var _throttledFile = require_throttledFile();
  var _recorderCollection = require_recorderCollection();
  var _language = require_language();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class ContextRecorder extends _events.EventEmitter {
    constructor(codegenMode, context, params, delegate) {
      super();
      this._collection = undefined;
      this._pageAliases = new Map;
      this._lastPopupOrdinal = 0;
      this._lastDialogOrdinal = -1;
      this._lastDownloadOrdinal = -1;
      this._context = undefined;
      this._params = undefined;
      this._delegate = undefined;
      this._recorderSources = undefined;
      this._throttledOutputFile = null;
      this._orderedLanguages = [];
      this._listeners = [];
      this._codegenMode = undefined;
      this._codegenMode = codegenMode;
      this._context = context;
      this._params = params;
      this._delegate = delegate;
      this._recorderSources = [];
      const language = params.language || context.attribution.playwright.options.sdkLanguage;
      this.setOutput(language, params.outputFile);
      const languageGeneratorOptions = {
        browserName: context._browser.options.name,
        launchOptions: {
          headless: false,
          ...params.launchOptions,
          tracesDir: undefined
        },
        contextOptions: {
          ...params.contextOptions
        },
        deviceName: params.device,
        saveStorage: params.saveStorage
      };
      this._collection = new _recorderCollection.RecorderCollection(this._pageAliases);
      this._collection.on("change", (actions) => {
        this._recorderSources = [];
        for (const languageGenerator of this._orderedLanguages) {
          var _this$_throttledOutpu;
          const {
            header,
            footer,
            actionTexts,
            text
          } = (0, _language.generateCode)(actions, languageGenerator, languageGeneratorOptions);
          const source = {
            isRecorded: true,
            label: languageGenerator.name,
            group: languageGenerator.groupName,
            id: languageGenerator.id,
            text,
            header,
            footer,
            actions: actionTexts,
            language: languageGenerator.highlighter,
            highlight: []
          };
          source.revealLine = text.split(`
`).length - 1;
          this._recorderSources.push(source);
          if (languageGenerator === this._orderedLanguages[0])
            (_this$_throttledOutpu = this._throttledOutputFile) === null || _this$_throttledOutpu === undefined || _this$_throttledOutpu.setContent(source.text);
        }
        this.emit(ContextRecorder.Events.Change, {
          sources: this._recorderSources,
          actions
        });
      });
      context.on(_browserContext.BrowserContext.Events.BeforeClose, () => {
        var _this$_throttledOutpu2;
        (_this$_throttledOutpu2 = this._throttledOutputFile) === null || _this$_throttledOutpu2 === undefined || _this$_throttledOutpu2.flush();
      });
      this._listeners.push(_utils.eventsHelper.addEventListener(process, "exit", () => {
        var _this$_throttledOutpu3;
        (_this$_throttledOutpu3 = this._throttledOutputFile) === null || _this$_throttledOutpu3 === undefined || _this$_throttledOutpu3.flush();
      }));
      this.setEnabled(true);
    }
    setOutput(codegenId, outputFile) {
      var _this$_collection;
      const languages = (0, _languages.languageSet)();
      const primaryLanguage = [...languages].find((l) => l.id === codegenId);
      if (!primaryLanguage)
        throw new Error(`
===============================
Unsupported language: '${codegenId}'
===============================
`);
      languages.delete(primaryLanguage);
      this._orderedLanguages = [primaryLanguage, ...languages];
      this._throttledOutputFile = outputFile ? new _throttledFile.ThrottledFile(outputFile) : null;
      (_this$_collection = this._collection) === null || _this$_collection === undefined || _this$_collection.restart();
    }
    languageName(id) {
      for (const lang of this._orderedLanguages) {
        if (!id || lang.id === id)
          return lang.highlighter;
      }
      return "javascript";
    }
    async install() {
      this._context.on(_browserContext.BrowserContext.Events.Page, (page) => this._onPage(page));
      for (const page of this._context.pages())
        this._onPage(page);
      this._context.on(_browserContext.BrowserContext.Events.Dialog, (dialog) => this._onDialog(dialog.page()));
      await this._context.exposeBinding("__pw_recorderPerformAction", false, (source, action) => this._performAction(source.frame, action));
      await this._context.exposeBinding("__pw_recorderRecordAction", false, (source, action) => this._recordAction(source.frame, action));
      await this._context.extendInjectedScript(recorderSource.source);
    }
    setEnabled(enabled) {
      this._collection.setEnabled(enabled);
      if (this._codegenMode === "trace-events") {
        if (enabled)
          this._context.tracing.startChunk({
            name: "trace",
            title: "trace"
          }).catch(() => {
          });
        else
          this._context.tracing.stopChunk({
            mode: "discard"
          }).catch(() => {
          });
      }
    }
    dispose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
    }
    async _onPage(page) {
      const frame = page.mainFrame();
      page.on("close", () => {
        this._collection.addRecordedAction({
          frame: this._describeMainFrame(page),
          action: {
            name: "closePage",
            signals: []
          },
          startTime: (0, _utils.monotonicTime)()
        });
        this._pageAliases.delete(page);
      });
      frame.on(_frames.Frame.Events.InternalNavigation, (event) => {
        if (event.isPublic)
          this._onFrameNavigated(frame, page);
      });
      page.on(_page.Page.Events.Download, () => this._onDownload(page));
      const suffix = this._pageAliases.size ? String(++this._lastPopupOrdinal) : "";
      const pageAlias = "page" + suffix;
      this._pageAliases.set(page, pageAlias);
      if (page.opener()) {
        this._onPopup(page.opener(), page);
      } else {
        this._collection.addRecordedAction({
          frame: this._describeMainFrame(page),
          action: {
            name: "openPage",
            url: page.mainFrame().url(),
            signals: []
          },
          startTime: (0, _utils.monotonicTime)()
        });
      }
    }
    clearScript() {
      this._collection.restart();
      if (this._params.mode === "recording") {
        for (const page of this._context.pages())
          this._onFrameNavigated(page.mainFrame(), page);
      }
    }
    _describeMainFrame(page) {
      return {
        pageAlias: this._pageAliases.get(page),
        framePath: []
      };
    }
    async _describeFrame(frame) {
      return {
        pageAlias: this._pageAliases.get(frame._page),
        framePath: await generateFrameSelector(frame)
      };
    }
    testIdAttributeName() {
      return this._params.testIdAttributeName || this._context.selectors().testIdAttributeName() || "data-testid";
    }
    async _createActionInContext(frame, action) {
      var _this$_delegate$rewri, _this$_delegate;
      const frameDescription = await this._describeFrame(frame);
      const actionInContext = {
        frame: frameDescription,
        action,
        description: undefined,
        startTime: (0, _utils.monotonicTime)()
      };
      await ((_this$_delegate$rewri = (_this$_delegate = this._delegate).rewriteActionInContext) === null || _this$_delegate$rewri === undefined ? undefined : _this$_delegate$rewri.call(_this$_delegate, this._pageAliases, actionInContext));
      return actionInContext;
    }
    async _performAction(frame, action) {
      await this._collection.performAction(await this._createActionInContext(frame, action));
    }
    async _recordAction(frame, action) {
      this._collection.addRecordedAction(await this._createActionInContext(frame, action));
    }
    _onFrameNavigated(frame, page) {
      const pageAlias = this._pageAliases.get(page);
      this._collection.signal(pageAlias, frame, {
        name: "navigation",
        url: frame.url()
      });
    }
    _onPopup(page, popup) {
      const pageAlias = this._pageAliases.get(page);
      const popupAlias = this._pageAliases.get(popup);
      this._collection.signal(pageAlias, page.mainFrame(), {
        name: "popup",
        popupAlias
      });
    }
    _onDownload(page) {
      const pageAlias = this._pageAliases.get(page);
      ++this._lastDownloadOrdinal;
      this._collection.signal(pageAlias, page.mainFrame(), {
        name: "download",
        downloadAlias: this._lastDownloadOrdinal ? String(this._lastDownloadOrdinal) : ""
      });
    }
    _onDialog(page) {
      const pageAlias = this._pageAliases.get(page);
      ++this._lastDialogOrdinal;
      this._collection.signal(pageAlias, page.mainFrame(), {
        name: "dialog",
        dialogAlias: this._lastDialogOrdinal ? String(this._lastDialogOrdinal) : ""
      });
    }
  }
  exports.ContextRecorder = ContextRecorder;
  ContextRecorder.Events = {
    Change: "change"
  };
  async function generateFrameSelector(frame) {
    const selectorPromises = [];
    while (frame) {
      const parent = frame.parentFrame();
      if (!parent)
        break;
      selectorPromises.push(generateFrameSelectorInParent(parent, frame));
      frame = parent;
    }
    const result = await Promise.all(selectorPromises);
    return result.reverse();
  }
  async function generateFrameSelectorInParent(parent, frame) {
    const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
      try {
        const frameElement = await frame.frameElement();
        if (!frameElement || !parent)
          return;
        const utility = await parent._utilityContext();
        const injected = await utility.injectedScript();
        const selector = await injected.evaluate((injected2, element) => {
          return injected2.generateSelectorSimple(element);
        }, frameElement);
        return selector;
      } catch (e) {
        return e.toString();
      }
    }, (0, _utils.monotonicTime)() + 2000);
    if (!result.timedOut && result.result)
      return result.result;
    if (frame.name())
      return `iframe[name=${(0, _utils.quoteCSSAttributeValue)(frame.name())}]`;
    return `iframe[src=${(0, _utils.quoteCSSAttributeValue)(frame.url())}]`;
  }
});

// node_modules/playwright-core/lib/server/recorder.js
var require_recorder = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Recorder = undefined;
  var fs = _interopRequireWildcard(__require("fs"));
  var consoleApiSource = _interopRequireWildcard(require_consoleApiSource());
  var _utils = require_utils();
  var _locatorParser = require_locatorParser();
  var _browserContext = require_browserContext();
  var _debugger = require_debugger();
  var _contextRecorder = require_contextRecorder();
  var _recorderUtils = require_recorderUtils2();
  var _recorderUtils2 = require_recorderUtils();
  var _selectorParser = require_selectorParser();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var recorderSymbol = Symbol("recorderSymbol");

  class Recorder {
    static async showInspector(context, params, recorderAppFactory) {
      if ((0, _utils.isUnderTest)())
        params.language = process.env.TEST_INSPECTOR_LANGUAGE;
      return await Recorder.show("actions", context, recorderAppFactory, params);
    }
    static showInspectorNoReply(context, recorderAppFactory) {
      Recorder.showInspector(context, {}, recorderAppFactory).catch(() => {
      });
    }
    static show(codegenMode, context, recorderAppFactory, params) {
      let recorderPromise = context[recorderSymbol];
      if (!recorderPromise) {
        recorderPromise = Recorder._create(codegenMode, context, recorderAppFactory, params);
        context[recorderSymbol] = recorderPromise;
      }
      return recorderPromise;
    }
    static async _create(codegenMode, context, recorderAppFactory, params = {}) {
      const recorder = new Recorder(codegenMode, context, params);
      const recorderApp = await recorderAppFactory(recorder);
      await recorder._install(recorderApp);
      return recorder;
    }
    constructor(codegenMode, context, params) {
      this.handleSIGINT = undefined;
      this._context = undefined;
      this._mode = undefined;
      this._highlightedElement = {};
      this._overlayState = {
        offsetX: 0
      };
      this._recorderApp = null;
      this._currentCallsMetadata = new Map;
      this._recorderSources = [];
      this._userSources = new Map;
      this._debugger = undefined;
      this._contextRecorder = undefined;
      this._omitCallTracking = false;
      this._currentLanguage = undefined;
      this._mode = params.mode || "none";
      this.handleSIGINT = params.handleSIGINT;
      this._contextRecorder = new _contextRecorder.ContextRecorder(codegenMode, context, params, {});
      this._context = context;
      this._omitCallTracking = !!params.omitCallTracking;
      this._debugger = context.debugger();
      context.instrumentation.addListener(this, context);
      this._currentLanguage = this._contextRecorder.languageName();
      if ((0, _utils.isUnderTest)()) {
        this._overlayState.offsetX = 200;
      }
    }
    async _install(recorderApp) {
      this._recorderApp = recorderApp;
      recorderApp.once("close", () => {
        this._debugger.resume(false);
        this._recorderApp = null;
      });
      recorderApp.on("event", (data) => {
        if (data.event === "setMode") {
          this.setMode(data.params.mode);
          return;
        }
        if (data.event === "highlightRequested") {
          if (data.params.selector)
            this.setHighlightedSelector(this._currentLanguage, data.params.selector);
          if (data.params.ariaTemplate)
            this.setHighlightedAriaTemplate(data.params.ariaTemplate);
          return;
        }
        if (data.event === "step") {
          this._debugger.resume(true);
          return;
        }
        if (data.event === "fileChanged") {
          this._currentLanguage = this._contextRecorder.languageName(data.params.file);
          this._refreshOverlay();
          return;
        }
        if (data.event === "resume") {
          this._debugger.resume(false);
          return;
        }
        if (data.event === "pause") {
          this._debugger.pauseOnNextStatement();
          return;
        }
        if (data.event === "clear") {
          this._contextRecorder.clearScript();
          return;
        }
      });
      await Promise.all([recorderApp.setMode(this._mode), recorderApp.setPaused(this._debugger.isPaused()), this._pushAllSources()]);
      this._context.once(_browserContext.BrowserContext.Events.Close, () => {
        var _this$_recorderApp;
        this._contextRecorder.dispose();
        this._context.instrumentation.removeListener(this);
        (_this$_recorderApp = this._recorderApp) === null || _this$_recorderApp === undefined || _this$_recorderApp.close().catch(() => {
        });
      });
      this._contextRecorder.on(_contextRecorder.ContextRecorder.Events.Change, (data) => {
        this._recorderSources = data.sources;
        recorderApp.setActions(data.actions, data.sources);
        recorderApp.setRunningFile(undefined);
        this._pushAllSources();
      });
      await this._context.exposeBinding("__pw_recorderState", false, async (source) => {
        let actionSelector;
        let actionPoint;
        const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);
        if (!hasActiveScreenshotCommand) {
          actionSelector = await this._scopeHighlightedSelectorToFrame(source.frame);
          for (const [metadata, sdkObject] of this._currentCallsMetadata) {
            if (source.page === sdkObject.attribution.page) {
              actionPoint = metadata.point || actionPoint;
              actionSelector = actionSelector || metadata.params.selector;
            }
          }
        }
        const uiState = {
          mode: this._mode,
          actionPoint,
          actionSelector,
          ariaTemplate: this._highlightedElement.ariaTemplate,
          language: this._currentLanguage,
          testIdAttributeName: this._contextRecorder.testIdAttributeName(),
          overlay: this._overlayState
        };
        return uiState;
      });
      await this._context.exposeBinding("__pw_recorderElementPicked", false, async ({
        frame
      }, elementInfo) => {
        var _this$_recorderApp2;
        const selectorChain = await (0, _contextRecorder.generateFrameSelector)(frame);
        await ((_this$_recorderApp2 = this._recorderApp) === null || _this$_recorderApp2 === undefined ? undefined : _this$_recorderApp2.elementPicked({
          selector: (0, _recorderUtils2.buildFullSelector)(selectorChain, elementInfo.selector),
          ariaSnapshot: elementInfo.ariaSnapshot
        }, true));
      });
      await this._context.exposeBinding("__pw_recorderSetMode", false, async ({
        frame
      }, mode) => {
        if (frame.parentFrame())
          return;
        this.setMode(mode);
      });
      await this._context.exposeBinding("__pw_recorderSetOverlayState", false, async ({
        frame
      }, state) => {
        if (frame.parentFrame())
          return;
        this._overlayState = state;
      });
      await this._context.exposeBinding("__pw_resume", false, () => {
        this._debugger.resume(false);
      });
      await this._context.extendInjectedScript(consoleApiSource.source);
      await this._contextRecorder.install();
      if (this._debugger.isPaused())
        this._pausedStateChanged();
      this._debugger.on(_debugger.Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());
      this._context.recorderAppForTest = this._recorderApp;
    }
    _pausedStateChanged() {
      var _this$_recorderApp3;
      for (const {
        metadata,
        sdkObject
      } of this._debugger.pausedDetails()) {
        if (!this._currentCallsMetadata.has(metadata))
          this.onBeforeCall(sdkObject, metadata);
      }
      (_this$_recorderApp3 = this._recorderApp) === null || _this$_recorderApp3 === undefined || _this$_recorderApp3.setPaused(this._debugger.isPaused());
      this._updateUserSources();
      this.updateCallLog([...this._currentCallsMetadata.keys()]);
    }
    setMode(mode) {
      var _this$_recorderApp4;
      if (this._mode === mode)
        return;
      this._highlightedElement = {};
      this._mode = mode;
      (_this$_recorderApp4 = this._recorderApp) === null || _this$_recorderApp4 === undefined || _this$_recorderApp4.setMode(this._mode);
      this._contextRecorder.setEnabled(this._isRecording());
      this._debugger.setMuted(this._isRecording());
      if (this._mode !== "none" && this._mode !== "standby" && this._context.pages().length === 1)
        this._context.pages()[0].bringToFront().catch(() => {
        });
      this._refreshOverlay();
    }
    resume() {
      this._debugger.resume(false);
    }
    mode() {
      return this._mode;
    }
    setHighlightedSelector(language, selector) {
      this._highlightedElement = {
        selector: (0, _locatorParser.locatorOrSelectorAsSelector)(language, selector, this._context.selectors().testIdAttributeName())
      };
      this._refreshOverlay();
    }
    setHighlightedAriaTemplate(ariaTemplate) {
      this._highlightedElement = {
        ariaTemplate
      };
      this._refreshOverlay();
    }
    hideHighlightedSelector() {
      this._highlightedElement = {};
      this._refreshOverlay();
    }
    async _scopeHighlightedSelectorToFrame(frame) {
      if (!this._highlightedElement.selector)
        return;
      try {
        const mainFrame = frame._page.mainFrame();
        const resolved = await mainFrame.selectors.resolveFrameForSelector(this._highlightedElement.selector);
        if (!resolved)
          return "";
        if ((resolved === null || resolved === undefined ? undefined : resolved.frame) === mainFrame)
          return (0, _selectorParser.stringifySelector)(resolved.info.parsed);
        if ((resolved === null || resolved === undefined ? undefined : resolved.frame) === frame)
          return (0, _selectorParser.stringifySelector)(resolved.info.parsed);
        return "";
      } catch {
        return "";
      }
    }
    setOutput(codegenId, outputFile) {
      this._contextRecorder.setOutput(codegenId, outputFile);
    }
    _refreshOverlay() {
      for (const page of this._context.pages()) {
        for (const frame of page.frames())
          frame.evaluateExpression("window.__pw_refreshOverlay()").catch(() => {
          });
      }
    }
    async onBeforeCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._isRecording())
        return;
      this._currentCallsMetadata.set(metadata, sdkObject);
      this._updateUserSources();
      this.updateCallLog([metadata]);
      if (isScreenshotCommand(metadata))
        this.hideHighlightedSelector();
      else if (metadata.params && metadata.params.selector)
        this._highlightedElement = {
          selector: metadata.params.selector
        };
    }
    async onAfterCall(sdkObject, metadata) {
      if (this._omitCallTracking || this._isRecording())
        return;
      if (!metadata.error)
        this._currentCallsMetadata.delete(metadata);
      this._updateUserSources();
      this.updateCallLog([metadata]);
    }
    _updateUserSources() {
      var _this$_recorderApp5;
      for (const source of this._userSources.values()) {
        source.highlight = [];
        source.revealLine = undefined;
      }
      let fileToSelect = undefined;
      for (const metadata of this._currentCallsMetadata.keys()) {
        if (!metadata.location)
          continue;
        const {
          file,
          line
        } = metadata.location;
        let source = this._userSources.get(file);
        if (!source) {
          source = {
            isRecorded: false,
            label: file,
            id: file,
            text: this._readSource(file),
            highlight: [],
            language: languageForFile(file)
          };
          this._userSources.set(file, source);
        }
        if (line) {
          const paused = this._debugger.isPaused(metadata);
          source.highlight.push({
            line,
            type: metadata.error ? "error" : paused ? "paused" : "running"
          });
          source.revealLine = line;
          fileToSelect = source.id;
        }
      }
      this._pushAllSources();
      if (fileToSelect)
        (_this$_recorderApp5 = this._recorderApp) === null || _this$_recorderApp5 === undefined || _this$_recorderApp5.setRunningFile(fileToSelect);
    }
    _pushAllSources() {
      var _this$_recorderApp6;
      (_this$_recorderApp6 = this._recorderApp) === null || _this$_recorderApp6 === undefined || _this$_recorderApp6.setSources([...this._recorderSources, ...this._userSources.values()]);
    }
    async onBeforeInputAction(sdkObject, metadata) {
    }
    async onCallLog(sdkObject, metadata, logName, message) {
      this.updateCallLog([metadata]);
    }
    updateCallLog(metadatas) {
      var _this$_recorderApp7;
      if (this._isRecording())
        return;
      const logs = [];
      for (const metadata of metadatas) {
        if (!metadata.method || metadata.internal)
          continue;
        let status = "done";
        if (this._currentCallsMetadata.has(metadata))
          status = "in-progress";
        if (this._debugger.isPaused(metadata))
          status = "paused";
        logs.push((0, _recorderUtils.metadataToCallLog)(metadata, status));
      }
      (_this$_recorderApp7 = this._recorderApp) === null || _this$_recorderApp7 === undefined || _this$_recorderApp7.updateCallLogs(logs);
    }
    _isRecording() {
      return ["recording", "assertingText", "assertingVisibility", "assertingValue", "assertingSnapshot"].includes(this._mode);
    }
    _readSource(fileName) {
      try {
        return fs.readFileSync(fileName, "utf-8");
      } catch (e) {
        return "// No source available";
      }
    }
  }
  exports.Recorder = Recorder;
  function isScreenshotCommand(metadata) {
    return metadata.method.toLowerCase().includes("screenshot");
  }
  function languageForFile(file) {
    if (file.endsWith(".py"))
      return "python";
    if (file.endsWith(".java"))
      return "java";
    if (file.endsWith(".cs"))
      return "csharp";
    return "javascript";
  }
});

// node_modules/playwright-core/lib/generated/clockSource.js
var require_clockSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/clock.ts
var clock_exports = {};
__export(clock_exports, {
  ClockController: () => ClockController,
  createClock: () => createClock,
  inject: () => inject,
  install: () => install
});
module.exports = __toCommonJS(clock_exports);
var ClockController = class {
  constructor(embedder) {
    this._duringTick = false;
    this._timers = /* @__PURE__ */ new Map();
    this._uniqueTimerId = idCounterStart;
    this.disposables = [];
    this._log = [];
    this._now = { time: asWallTime(0), isFixedTime: false, ticks: 0, origin: asWallTime(-1) };
    this._embedder = embedder;
  }
  uninstall() {
    this.disposables.forEach((dispose) => dispose());
    this.disposables.length = 0;
  }
  now() {
    this._replayLogOnce();
    return this._now.time;
  }
  install(time) {
    this._replayLogOnce();
    this._innerSetTime(asWallTime(time));
  }
  setSystemTime(time) {
    this._replayLogOnce();
    this._innerSetTime(asWallTime(time));
  }
  setFixedTime(time) {
    this._replayLogOnce();
    this._innerSetFixedTime(asWallTime(time));
  }
  performanceNow() {
    this._replayLogOnce();
    return this._now.ticks;
  }
  _innerSetTime(time) {
    this._now.time = time;
    this._now.isFixedTime = false;
    if (this._now.origin < 0)
      this._now.origin = this._now.time;
  }
  _innerSetFixedTime(time) {
    this._innerSetTime(time);
    this._now.isFixedTime = true;
  }
  _advanceNow(to) {
    if (!this._now.isFixedTime)
      this._now.time = asWallTime(this._now.time + to - this._now.ticks);
    this._now.ticks = to;
  }
  async log(type, time, param) {
    this._log.push({ type, time, param });
  }
  async runFor(ticks) {
    this._replayLogOnce();
    if (ticks < 0)
      throw new TypeError("Negative ticks are not supported");
    await this._runTo(shiftTicks(this._now.ticks, ticks));
  }
  async _runTo(to) {
    to = Math.ceil(to);
    if (this._now.ticks > to)
      return;
    let firstException;
    while (true) {
      const result = await this._callFirstTimer(to);
      if (!result.timerFound)
        break;
      firstException = firstException || result.error;
    }
    this._advanceNow(to);
    if (firstException)
      throw firstException;
  }
  async pauseAt(time) {
    this._replayLogOnce();
    this._innerPause();
    const toConsume = time - this._now.time;
    await this._innerFastForwardTo(shiftTicks(this._now.ticks, toConsume));
    return toConsume;
  }
  _innerPause() {
    this._realTime = void 0;
    this._updateRealTimeTimer();
  }
  resume() {
    this._replayLogOnce();
    this._innerResume();
  }
  _innerResume() {
    const now = this._embedder.performanceNow();
    this._realTime = { startTicks: now, lastSyncTicks: now };
    this._updateRealTimeTimer();
  }
  _updateRealTimeTimer() {
    var _a;
    if (!this._realTime) {
      (_a = this._currentRealTimeTimer) == null ? void 0 : _a.dispose();
      this._currentRealTimeTimer = void 0;
      return;
    }
    const firstTimer = this._firstTimer();
    const callAt = Math.min(firstTimer ? firstTimer.callAt : this._now.ticks + maxTimeout, this._now.ticks + 100);
    if (this._currentRealTimeTimer && this._currentRealTimeTimer.callAt < callAt)
      return;
    if (this._currentRealTimeTimer) {
      this._currentRealTimeTimer.dispose();
      this._currentRealTimeTimer = void 0;
    }
    this._currentRealTimeTimer = {
      callAt,
      dispose: this._embedder.setTimeout(() => {
        const now = this._embedder.performanceNow();
        this._currentRealTimeTimer = void 0;
        const sinceLastSync = now - this._realTime.lastSyncTicks;
        this._realTime.lastSyncTicks = now;
        void this._runTo(shiftTicks(this._now.ticks, sinceLastSync)).catch((e) => console.error(e)).then(() => this._updateRealTimeTimer());
      }, callAt - this._now.ticks)
    };
  }
  async fastForward(ticks) {
    this._replayLogOnce();
    await this._innerFastForwardTo(shiftTicks(this._now.ticks, ticks | 0));
  }
  async _innerFastForwardTo(to) {
    if (to < this._now.ticks)
      throw new Error("Cannot fast-forward to the past");
    for (const timer of this._timers.values()) {
      if (to > timer.callAt)
        timer.callAt = to;
    }
    await this._runTo(to);
  }
  addTimer(options) {
    this._replayLogOnce();
    if (options.type === "AnimationFrame" /* AnimationFrame */ && !options.func)
      throw new Error("Callback must be provided to requestAnimationFrame calls");
    if (options.type === "IdleCallback" /* IdleCallback */ && !options.func)
      throw new Error("Callback must be provided to requestIdleCallback calls");
    if (["Timeout" /* Timeout */, "Interval" /* Interval */].includes(options.type) && !options.func && options.delay === void 0)
      throw new Error("Callback must be provided to timer calls");
    let delay = options.delay ? +options.delay : 0;
    if (!Number.isFinite(delay))
      delay = 0;
    delay = delay > maxTimeout ? 1 : delay;
    delay = Math.max(0, delay);
    const timer = {
      type: options.type,
      func: options.func,
      args: options.args || [],
      delay,
      callAt: shiftTicks(this._now.ticks, delay || (this._duringTick ? 1 : 0)),
      createdAt: this._now.ticks,
      id: this._uniqueTimerId++,
      error: new Error()
    };
    this._timers.set(timer.id, timer);
    if (this._realTime)
      this._updateRealTimeTimer();
    return timer.id;
  }
  countTimers() {
    return this._timers.size;
  }
  _firstTimer(beforeTick) {
    let firstTimer = null;
    for (const timer of this._timers.values()) {
      const isInRange = beforeTick === void 0 || timer.callAt <= beforeTick;
      if (isInRange && (!firstTimer || compareTimers(firstTimer, timer) === 1))
        firstTimer = timer;
    }
    return firstTimer;
  }
  _takeFirstTimer(beforeTick) {
    const timer = this._firstTimer(beforeTick);
    if (!timer)
      return null;
    this._advanceNow(timer.callAt);
    if (timer.type === "Interval" /* Interval */)
      timer.callAt = shiftTicks(timer.callAt, timer.delay);
    else
      this._timers.delete(timer.id);
    return timer;
  }
  async _callFirstTimer(beforeTick) {
    const timer = this._takeFirstTimer(beforeTick);
    if (!timer)
      return { timerFound: false };
    this._duringTick = true;
    try {
      if (typeof timer.func !== "function") {
        let error2;
        try {
          (() => {
            globalThis.eval(timer.func);
          })();
        } catch (e) {
          error2 = e;
        }
        await new Promise((f) => this._embedder.setTimeout(f));
        return { timerFound: true, error: error2 };
      }
      let args = timer.args;
      if (timer.type === "AnimationFrame" /* AnimationFrame */)
        args = [this._now.ticks];
      else if (timer.type === "IdleCallback" /* IdleCallback */)
        args = [{ didTimeout: false, timeRemaining: () => 0 }];
      let error;
      try {
        timer.func.apply(null, args);
      } catch (e) {
        error = e;
      }
      await new Promise((f) => this._embedder.setTimeout(f));
      return { timerFound: true, error };
    } finally {
      this._duringTick = false;
    }
  }
  getTimeToNextFrame() {
    return 16 - this._now.ticks % 16;
  }
  clearTimer(timerId, type) {
    this._replayLogOnce();
    if (!timerId) {
      return;
    }
    const id = Number(timerId);
    if (Number.isNaN(id) || id < idCounterStart) {
      const handlerName = getClearHandler(type);
      new Error(\`Clock: \${handlerName} was invoked to clear a native timer instead of one created by the clock library.\`);
    }
    const timer = this._timers.get(id);
    if (timer) {
      if (timer.type === type || timer.type === "Timeout" && type === "Interval" || timer.type === "Interval" && type === "Timeout") {
        this._timers.delete(id);
      } else {
        const clear = getClearHandler(type);
        const schedule = getScheduleHandler(timer.type);
        throw new Error(
          \`Cannot clear timer: timer created with \${schedule}() but cleared with \${clear}()\`
        );
      }
    }
  }
  _replayLogOnce() {
    if (!this._log.length)
      return;
    let lastLogTime = -1;
    let isPaused = false;
    for (const { type, time, param } of this._log) {
      if (!isPaused && lastLogTime !== -1)
        this._advanceNow(shiftTicks(this._now.ticks, time - lastLogTime));
      lastLogTime = time;
      if (type === "install") {
        this._innerSetTime(asWallTime(param));
      } else if (type === "fastForward" || type === "runFor") {
        this._advanceNow(shiftTicks(this._now.ticks, param));
      } else if (type === "pauseAt") {
        isPaused = true;
        this._innerPause();
        this._innerSetTime(asWallTime(param));
      } else if (type === "resume") {
        this._innerResume();
        isPaused = false;
      } else if (type === "setFixedTime") {
        this._innerSetFixedTime(asWallTime(param));
      } else if (type === "setSystemTime") {
        this._innerSetTime(asWallTime(param));
      }
    }
    if (!isPaused && lastLogTime > 0)
      this._advanceNow(shiftTicks(this._now.ticks, this._embedder.dateNow() - lastLogTime));
    this._log.length = 0;
  }
};
function mirrorDateProperties(target, source) {
  for (const prop in source) {
    if (source.hasOwnProperty(prop))
      target[prop] = source[prop];
  }
  target.toString = () => source.toString();
  target.prototype = source.prototype;
  target.parse = source.parse;
  target.UTC = source.UTC;
  target.prototype.toUTCString = source.prototype.toUTCString;
  target.isFake = true;
  return target;
}
function createDate(clock, NativeDate) {
  function ClockDate(year, month, date, hour, minute, second, ms) {
    if (!(this instanceof ClockDate))
      return new NativeDate(clock.now()).toString();
    switch (arguments.length) {
      case 0:
        return new NativeDate(clock.now());
      case 1:
        return new NativeDate(year);
      case 2:
        return new NativeDate(year, month);
      case 3:
        return new NativeDate(year, month, date);
      case 4:
        return new NativeDate(year, month, date, hour);
      case 5:
        return new NativeDate(year, month, date, hour, minute);
      case 6:
        return new NativeDate(
          year,
          month,
          date,
          hour,
          minute,
          second
        );
      default:
        return new NativeDate(
          year,
          month,
          date,
          hour,
          minute,
          second,
          ms
        );
    }
  }
  ClockDate.now = () => clock.now();
  return mirrorDateProperties(ClockDate, NativeDate);
}
function createIntl(clock, NativeIntl) {
  const ClockIntl = {};
  for (const key of Object.getOwnPropertyNames(NativeIntl))
    ClockIntl[key] = NativeIntl[key];
  ClockIntl.DateTimeFormat = function(...args) {
    const realFormatter = new NativeIntl.DateTimeFormat(...args);
    const formatter = {
      formatRange: realFormatter.formatRange.bind(realFormatter),
      formatRangeToParts: realFormatter.formatRangeToParts.bind(realFormatter),
      resolvedOptions: realFormatter.resolvedOptions.bind(realFormatter),
      format: (date) => realFormatter.format(date || clock.now()),
      formatToParts: (date) => realFormatter.formatToParts(date || clock.now())
    };
    return formatter;
  };
  ClockIntl.DateTimeFormat.prototype = Object.create(
    NativeIntl.DateTimeFormat.prototype
  );
  ClockIntl.DateTimeFormat.supportedLocalesOf = NativeIntl.DateTimeFormat.supportedLocalesOf;
  return ClockIntl;
}
function compareTimers(a, b) {
  if (a.callAt < b.callAt)
    return -1;
  if (a.callAt > b.callAt)
    return 1;
  if (a.type === "Immediate" /* Immediate */ && b.type !== "Immediate" /* Immediate */)
    return -1;
  if (a.type !== "Immediate" /* Immediate */ && b.type === "Immediate" /* Immediate */)
    return 1;
  if (a.createdAt < b.createdAt)
    return -1;
  if (a.createdAt > b.createdAt)
    return 1;
  if (a.id < b.id)
    return -1;
  if (a.id > b.id)
    return 1;
}
var maxTimeout = Math.pow(2, 31) - 1;
var idCounterStart = 1e12;
function platformOriginals(globalObject) {
  const raw = {
    setTimeout: globalObject.setTimeout,
    clearTimeout: globalObject.clearTimeout,
    setInterval: globalObject.setInterval,
    clearInterval: globalObject.clearInterval,
    requestAnimationFrame: globalObject.requestAnimationFrame ? globalObject.requestAnimationFrame : void 0,
    cancelAnimationFrame: globalObject.cancelAnimationFrame ? globalObject.cancelAnimationFrame : void 0,
    requestIdleCallback: globalObject.requestIdleCallback ? globalObject.requestIdleCallback : void 0,
    cancelIdleCallback: globalObject.cancelIdleCallback ? globalObject.cancelIdleCallback : void 0,
    Date: globalObject.Date,
    performance: globalObject.performance,
    Intl: globalObject.Intl
  };
  const bound = { ...raw };
  for (const key of Object.keys(bound)) {
    if (key !== "Date" && typeof bound[key] === "function")
      bound[key] = bound[key].bind(globalObject);
  }
  return { raw, bound };
}
function getScheduleHandler(type) {
  if (type === "IdleCallback" || type === "AnimationFrame")
    return \`request\${type}\`;
  return \`set\${type}\`;
}
function createApi(clock, originals) {
  return {
    setTimeout: (func, timeout, ...args) => {
      const delay = timeout ? +timeout : timeout;
      return clock.addTimer({
        type: "Timeout" /* Timeout */,
        func,
        args,
        delay
      });
    },
    clearTimeout: (timerId) => {
      if (timerId)
        clock.clearTimer(timerId, "Timeout" /* Timeout */);
    },
    setInterval: (func, timeout, ...args) => {
      const delay = timeout ? +timeout : timeout;
      return clock.addTimer({
        type: "Interval" /* Interval */,
        func,
        args,
        delay
      });
    },
    clearInterval: (timerId) => {
      if (timerId)
        return clock.clearTimer(timerId, "Interval" /* Interval */);
    },
    requestAnimationFrame: (callback) => {
      return clock.addTimer({
        type: "AnimationFrame" /* AnimationFrame */,
        func: callback,
        delay: clock.getTimeToNextFrame()
      });
    },
    cancelAnimationFrame: (timerId) => {
      if (timerId)
        return clock.clearTimer(timerId, "AnimationFrame" /* AnimationFrame */);
    },
    requestIdleCallback: (callback, options) => {
      let timeToNextIdlePeriod = 0;
      if (clock.countTimers() > 0)
        timeToNextIdlePeriod = 50;
      return clock.addTimer({
        type: "IdleCallback" /* IdleCallback */,
        func: callback,
        delay: (options == null ? void 0 : options.timeout) ? Math.min(options == null ? void 0 : options.timeout, timeToNextIdlePeriod) : timeToNextIdlePeriod
      });
    },
    cancelIdleCallback: (timerId) => {
      if (timerId)
        return clock.clearTimer(timerId, "IdleCallback" /* IdleCallback */);
    },
    Intl: originals.Intl ? createIntl(clock, originals.Intl) : void 0,
    Date: createDate(clock, originals.Date),
    performance: originals.performance ? fakePerformance(clock, originals.performance) : void 0
  };
}
function getClearHandler(type) {
  if (type === "IdleCallback" || type === "AnimationFrame")
    return \`cancel\${type}\`;
  return \`clear\${type}\`;
}
function fakePerformance(clock, performance) {
  const result = {
    now: () => clock.performanceNow()
  };
  result.__defineGetter__("timeOrigin", () => clock._now.origin || 0);
  for (const key of Object.keys(performance.__proto__)) {
    if (key === "now" || key === "timeOrigin")
      continue;
    if (key === "getEntries" || key === "getEntriesByName" || key === "getEntriesByType")
      result[key] = () => [];
    else
      result[key] = () => {
      };
  }
  return result;
}
function createClock(globalObject) {
  const originals = platformOriginals(globalObject);
  const embedder = {
    dateNow: () => originals.raw.Date.now(),
    performanceNow: () => Math.ceil(originals.raw.performance.now()),
    setTimeout: (task, timeout) => {
      const timerId = originals.bound.setTimeout(task, timeout);
      return () => originals.bound.clearTimeout(timerId);
    },
    setInterval: (task, delay) => {
      const intervalId = originals.bound.setInterval(task, delay);
      return () => originals.bound.clearInterval(intervalId);
    }
  };
  const clock = new ClockController(embedder);
  const api = createApi(clock, originals.bound);
  return { clock, api, originals: originals.raw };
}
function install(globalObject, config = {}) {
  var _a, _b;
  if ((_a = globalObject.Date) == null ? void 0 : _a.isFake) {
    throw new TypeError(\`Can't install fake timers twice on the same global object.\`);
  }
  const { clock, api, originals } = createClock(globalObject);
  const toFake = ((_b = config.toFake) == null ? void 0 : _b.length) ? config.toFake : Object.keys(originals);
  for (const method of toFake) {
    if (method === "Date") {
      globalObject.Date = mirrorDateProperties(api.Date, globalObject.Date);
    } else if (method === "Intl") {
      globalObject.Intl = api[method];
    } else if (method === "performance") {
      globalObject.performance = api[method];
      const kEventTimeStamp = Symbol("playwrightEventTimeStamp");
      Object.defineProperty(Event.prototype, "timeStamp", {
        get() {
          var _a2;
          if (!this[kEventTimeStamp])
            this[kEventTimeStamp] = (_a2 = api.performance) == null ? void 0 : _a2.now();
          return this[kEventTimeStamp];
        }
      });
    } else {
      globalObject[method] = (...args) => {
        return api[method].apply(api, args);
      };
    }
    clock.disposables.push(() => {
      globalObject[method] = originals[method];
    });
  }
  return { clock, api, originals };
}
function inject(globalObject) {
  const builtin = platformOriginals(globalObject).bound;
  const { clock: controller } = install(globalObject);
  controller.resume();
  return {
    controller,
    builtin
  };
}
function asWallTime(n) {
  return n;
}
function shiftTicks(ticks, ms) {
  return ticks + ms;
}
`;
});

// node_modules/playwright-core/lib/server/clock.js
var require_clock = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Clock = undefined;
  var clockSource = _interopRequireWildcard(require_clockSource());
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class Clock {
    constructor(browserContext) {
      this._browserContext = undefined;
      this._scriptInstalled = false;
      this._browserContext = browserContext;
    }
    markAsUninstalled() {
      this._scriptInstalled = false;
    }
    async fastForward(ticks) {
      await this._installIfNeeded();
      const ticksMillis = parseTicks(ticks);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('fastForward', ${Date.now()}, ${ticksMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.fastForward(${ticksMillis})`);
    }
    async install(time) {
      await this._installIfNeeded();
      const timeMillis = time !== undefined ? parseTime(time) : Date.now();
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('install', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.install(${timeMillis})`);
    }
    async pauseAt(ticks) {
      await this._installIfNeeded();
      const timeMillis = parseTime(ticks);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('pauseAt', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.pauseAt(${timeMillis})`);
    }
    async resume() {
      await this._installIfNeeded();
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('resume', ${Date.now()})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.resume()`);
    }
    async setFixedTime(time) {
      await this._installIfNeeded();
      const timeMillis = parseTime(time);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setFixedTime', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.setFixedTime(${timeMillis})`);
    }
    async setSystemTime(time) {
      await this._installIfNeeded();
      const timeMillis = parseTime(time);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('setSystemTime', ${Date.now()}, ${timeMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.setSystemTime(${timeMillis})`);
    }
    async runFor(ticks) {
      await this._installIfNeeded();
      const ticksMillis = parseTicks(ticks);
      await this._browserContext.addInitScript(`globalThis.__pwClock.controller.log('runFor', ${Date.now()}, ${ticksMillis})`);
      await this._evaluateInFrames(`globalThis.__pwClock.controller.runFor(${ticksMillis})`);
    }
    async _installIfNeeded() {
      if (this._scriptInstalled)
        return;
      this._scriptInstalled = true;
      const script = `(() => {
      const module = {};
      ${clockSource.source}
      globalThis.__pwClock = (module.exports.inject())(globalThis);
    })();`;
      await this._browserContext.addInitScript(script);
      await this._evaluateInFrames(script);
    }
    async _evaluateInFrames(script) {
      await this._browserContext.safeNonStallingEvaluateInAllFrames(script, "main", {
        throwOnJSErrors: true
      });
    }
  }
  exports.Clock = Clock;
  function parseTicks(value) {
    if (typeof value === "number")
      return value;
    if (!value)
      return 0;
    const str = value;
    const strings = str.split(":");
    const l = strings.length;
    let i = l;
    let ms = 0;
    let parsed;
    if (l > 3 || !/^(\d\d:){0,2}\d\d?$/.test(str)) {
      throw new Error(`Clock only understands numbers, 'mm:ss' and 'hh:mm:ss'`);
    }
    while (i--) {
      parsed = parseInt(strings[i], 10);
      if (parsed >= 60)
        throw new Error(`Invalid time ${str}`);
      ms += parsed * Math.pow(60, l - i - 1);
    }
    return ms * 1000;
  }
  function parseTime(epoch) {
    if (!epoch)
      return 0;
    if (typeof epoch === "number")
      return epoch;
    const parsed = new Date(epoch);
    if (!isFinite(parsed.getTime()))
      throw new Error(`Invalid date: ${epoch}`);
    return parsed.getTime();
  }
});

// node_modules/playwright-core/lib/server/chromium/appIcon.png
var exports_appIcon = {};
__export(exports_appIcon, {
  default: () => appIcon_default
});
var appIcon_default = "./appIcon-cqr4n4ty.png";
var init_appIcon = () => {
};

// node_modules/playwright-core/lib/server/launchApp.js
var require_launchApp = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.launchApp = launchApp;
  exports.syncLocalStorageWithSettings = syncLocalStorageWithSettings;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _registry = require_registry();
  var _utils = require_utils();
  var _instrumentation = require_instrumentation();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  async function launchApp(browserType, options) {
    var _options$persistentCo, _options$persistentCo2, _options$persistentCo3, _options$persistentCo4, _options$persistentCo5, _options$persistentCo6, _options$persistentCo7, _options$persistentCo8, _options$persistentCo9, _options$persistentCo10, _options$persistentCo11;
    const args = [...(_options$persistentCo = (_options$persistentCo2 = options.persistentContextOptions) === null || _options$persistentCo2 === undefined ? undefined : _options$persistentCo2.args) !== null && _options$persistentCo !== undefined ? _options$persistentCo : []];
    if (browserType.name() === "chromium") {
      args.push("--app=data:text/html,", `--window-size=${options.windowSize.width},${options.windowSize.height}`, ...options.windowPosition ? [`--window-position=${options.windowPosition.x},${options.windowPosition.y}`] : [], "--test-type=");
    }
    const context = await browserType.launchPersistentContext((0, _instrumentation.serverSideCallMetadata)(), "", {
      ignoreDefaultArgs: ["--enable-automation"],
      ...options === null || options === undefined ? undefined : options.persistentContextOptions,
      channel: (_options$persistentCo3 = (_options$persistentCo4 = options.persistentContextOptions) === null || _options$persistentCo4 === undefined ? undefined : _options$persistentCo4.channel) !== null && _options$persistentCo3 !== undefined ? _options$persistentCo3 : !((_options$persistentCo5 = options.persistentContextOptions) !== null && _options$persistentCo5 !== undefined && _options$persistentCo5.executablePath) ? (0, _registry.findChromiumChannel)(options.sdkLanguage) : undefined,
      noDefaultViewport: (_options$persistentCo6 = (_options$persistentCo7 = options.persistentContextOptions) === null || _options$persistentCo7 === undefined ? undefined : _options$persistentCo7.noDefaultViewport) !== null && _options$persistentCo6 !== undefined ? _options$persistentCo6 : true,
      acceptDownloads: (_options$persistentCo8 = options === null || options === undefined || (_options$persistentCo9 = options.persistentContextOptions) === null || _options$persistentCo9 === undefined ? undefined : _options$persistentCo9.acceptDownloads) !== null && _options$persistentCo8 !== undefined ? _options$persistentCo8 : (0, _utils.isUnderTest)() ? "accept" : "internal-browser-default",
      colorScheme: (_options$persistentCo10 = options === null || options === undefined || (_options$persistentCo11 = options.persistentContextOptions) === null || _options$persistentCo11 === undefined ? undefined : _options$persistentCo11.colorScheme) !== null && _options$persistentCo10 !== undefined ? _options$persistentCo10 : "no-override",
      args
    });
    const [page] = context.pages();
    if (browserType.name() === "chromium" && process.platform === "darwin") {
      context.on("page", async (newPage) => {
        if (newPage.mainFrame().url() === "chrome://new-tab-page/") {
          await page.bringToFront();
          await newPage.close((0, _instrumentation.serverSideCallMetadata)());
        }
      });
    }
    if (browserType.name() === "chromium")
      await installAppIcon(page);
    return {
      context,
      page
    };
  }
  async function installAppIcon(page) {
    const icon = await _fs.default.promises.readFile(__require.resolve("/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/server/chromium/appIcon.png"));
    const crPage = page._delegate;
    await crPage._mainFrameSession._client.send("Browser.setDockTile", {
      image: icon.toString("base64")
    });
  }
  async function syncLocalStorageWithSettings(page, appName) {
    if ((0, _utils.isUnderTest)())
      return;
    const settingsFile = _path.default.join(_registry.registryDirectory, ".settings", `${appName}.json`);
    await page.exposeBinding("_saveSerializedSettings", false, (_, settings2) => {
      _fs.default.mkdirSync(_path.default.dirname(settingsFile), {
        recursive: true
      });
      _fs.default.writeFileSync(settingsFile, settings2);
    });
    const settings = await _fs.default.promises.readFile(settingsFile, "utf-8").catch(() => "{}");
    await page.addInitScript(`(${String((settings2) => {
      if (location && location.protocol === "data:")
        return;
      if (window.top !== window)
        return;
      Object.entries(settings2).map(([k, v]) => localStorage[k] = v);
      window.saveSettings = () => {
        window._saveSerializedSettings(JSON.stringify({
          ...localStorage
        }));
      };
    })})(${settings});
  `);
  }
});

// node_modules/playwright-core/lib/server/download.js
var require_download = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Download = undefined;
  var _path = _interopRequireDefault(__require("path"));
  var _page = require_page();
  var _utils = require_utils();
  var _artifact = require_artifact();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class Download {
    constructor(page, downloadsPath, uuid2, url, suggestedFilename) {
      this.artifact = undefined;
      this.url = undefined;
      this._page = undefined;
      this._suggestedFilename = undefined;
      const unaccessibleErrorMessage = page._browserContext._options.acceptDownloads === "deny" ? "Pass { acceptDownloads: true } when you are creating your browser context." : undefined;
      this.artifact = new _artifact.Artifact(page, _path.default.join(downloadsPath, uuid2), unaccessibleErrorMessage, () => {
        return this._page._browserContext.cancelDownload(uuid2);
      });
      this._page = page;
      this.url = url;
      this._suggestedFilename = suggestedFilename;
      page._browserContext._downloads.add(this);
      if (suggestedFilename !== undefined)
        this._fireDownloadEvent();
    }
    page() {
      return this._page;
    }
    _filenameSuggested(suggestedFilename) {
      (0, _utils.assert)(this._suggestedFilename === undefined);
      this._suggestedFilename = suggestedFilename;
      this._fireDownloadEvent();
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    _fireDownloadEvent() {
      this._page.instrumentation.onDownload(this._page, this);
      this._page.emit(_page.Page.Events.Download, this);
    }
  }
  exports.Download = Download;
});

// node_modules/playwright-core/lib/common/socksProxy.js
var require_socksProxy = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocksProxyHandler = exports.SocksProxy = undefined;
  exports.parsePattern = parsePattern;
  var _events = _interopRequireDefault(__require("events"));
  var _net = _interopRequireDefault(__require("net"));
  var _debugLogger = require_debugLogger();
  var _happyEyeballs = require_happy_eyeballs();
  var _utils = require_utils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var SocksAuth = /* @__PURE__ */ function(SocksAuth2) {
    SocksAuth2[SocksAuth2["NO_AUTHENTICATION_REQUIRED"] = 0] = "NO_AUTHENTICATION_REQUIRED";
    SocksAuth2[SocksAuth2["GSSAPI"] = 1] = "GSSAPI";
    SocksAuth2[SocksAuth2["USERNAME_PASSWORD"] = 2] = "USERNAME_PASSWORD";
    SocksAuth2[SocksAuth2["NO_ACCEPTABLE_METHODS"] = 255] = "NO_ACCEPTABLE_METHODS";
    return SocksAuth2;
  }(SocksAuth || {});
  var SocksAddressType = /* @__PURE__ */ function(SocksAddressType2) {
    SocksAddressType2[SocksAddressType2["IPv4"] = 1] = "IPv4";
    SocksAddressType2[SocksAddressType2["FqName"] = 3] = "FqName";
    SocksAddressType2[SocksAddressType2["IPv6"] = 4] = "IPv6";
    return SocksAddressType2;
  }(SocksAddressType || {});
  var SocksCommand = /* @__PURE__ */ function(SocksCommand2) {
    SocksCommand2[SocksCommand2["CONNECT"] = 1] = "CONNECT";
    SocksCommand2[SocksCommand2["BIND"] = 2] = "BIND";
    SocksCommand2[SocksCommand2["UDP_ASSOCIATE"] = 3] = "UDP_ASSOCIATE";
    return SocksCommand2;
  }(SocksCommand || {});
  var SocksReply = /* @__PURE__ */ function(SocksReply2) {
    SocksReply2[SocksReply2["Succeeded"] = 0] = "Succeeded";
    SocksReply2[SocksReply2["GeneralServerFailure"] = 1] = "GeneralServerFailure";
    SocksReply2[SocksReply2["NotAllowedByRuleSet"] = 2] = "NotAllowedByRuleSet";
    SocksReply2[SocksReply2["NetworkUnreachable"] = 3] = "NetworkUnreachable";
    SocksReply2[SocksReply2["HostUnreachable"] = 4] = "HostUnreachable";
    SocksReply2[SocksReply2["ConnectionRefused"] = 5] = "ConnectionRefused";
    SocksReply2[SocksReply2["TtlExpired"] = 6] = "TtlExpired";
    SocksReply2[SocksReply2["CommandNotSupported"] = 7] = "CommandNotSupported";
    SocksReply2[SocksReply2["AddressTypeNotSupported"] = 8] = "AddressTypeNotSupported";
    return SocksReply2;
  }(SocksReply || {});

  class SocksConnection {
    constructor(uid, socket, client) {
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      this._fenceCallback = undefined;
      this._socket = undefined;
      this._boundOnData = undefined;
      this._uid = undefined;
      this._client = undefined;
      this._uid = uid;
      this._socket = socket;
      this._client = client;
      this._boundOnData = this._onData.bind(this);
      socket.on("data", this._boundOnData);
      socket.on("close", () => this._onClose());
      socket.on("end", () => this._onClose());
      socket.on("error", () => this._onClose());
      this._run().catch(() => this._socket.end());
    }
    async _run() {
      (0, _utils.assert)(await this._authenticate());
      const {
        command,
        host,
        port
      } = await this._parseRequest();
      if (command !== SocksCommand.CONNECT) {
        this._writeBytes(Buffer.from([
          5,
          SocksReply.CommandNotSupported,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0
        ]));
        return;
      }
      this._socket.off("data", this._boundOnData);
      this._client.onSocketRequested({
        uid: this._uid,
        host,
        port
      });
    }
    async _authenticate() {
      const version2 = await this._readByte();
      (0, _utils.assert)(version2 === 5, "The VER field must be set to x05 for this version of the protocol, was " + version2);
      const nMethods = await this._readByte();
      (0, _utils.assert)(nMethods, "No authentication methods specified");
      const methods = await this._readBytes(nMethods);
      for (const method of methods) {
        if (method === 0) {
          this._writeBytes(Buffer.from([version2, method]));
          return true;
        }
      }
      this._writeBytes(Buffer.from([version2, SocksAuth.NO_ACCEPTABLE_METHODS]));
      return false;
    }
    async _parseRequest() {
      const version2 = await this._readByte();
      (0, _utils.assert)(version2 === 5, "The VER field must be set to x05 for this version of the protocol, was " + version2);
      const command = await this._readByte();
      await this._readByte();
      const addressType = await this._readByte();
      let host = "";
      switch (addressType) {
        case SocksAddressType.IPv4:
          host = (await this._readBytes(4)).join(".");
          break;
        case SocksAddressType.FqName:
          const length = await this._readByte();
          host = (await this._readBytes(length)).toString();
          break;
        case SocksAddressType.IPv6:
          const bytes = await this._readBytes(16);
          const tokens = [];
          for (let i = 0;i < 8; ++i)
            tokens.push(bytes.readUInt16BE(i * 2).toString(16));
          host = tokens.join(":");
          break;
      }
      const port = (await this._readBytes(2)).readUInt16BE(0);
      this._buffer = Buffer.from([]);
      this._offset = 0;
      this._fence = 0;
      return {
        command,
        host,
        port
      };
    }
    async _readByte() {
      const buffer = await this._readBytes(1);
      return buffer[0];
    }
    async _readBytes(length) {
      this._fence = this._offset + length;
      if (!this._buffer || this._buffer.length < this._fence)
        await new Promise((f) => this._fenceCallback = f);
      this._offset += length;
      return this._buffer.slice(this._offset - length, this._offset);
    }
    _writeBytes(buffer) {
      if (this._socket.writable)
        this._socket.write(buffer);
    }
    _onClose() {
      this._client.onSocketClosed({
        uid: this._uid
      });
    }
    _onData(buffer) {
      this._buffer = Buffer.concat([this._buffer, buffer]);
      if (this._fenceCallback && this._buffer.length >= this._fence) {
        const callback = this._fenceCallback;
        this._fenceCallback = undefined;
        callback();
      }
    }
    socketConnected(host, port) {
      this._writeBytes(Buffer.from([
        5,
        SocksReply.Succeeded,
        0,
        ...ipToSocksAddress(host),
        port >> 8,
        port & 255
      ]));
      this._socket.on("data", (data) => this._client.onSocketData({
        uid: this._uid,
        data
      }));
    }
    socketFailed(errorCode) {
      const buffer = Buffer.from([
        5,
        0,
        0,
        ...ipToSocksAddress("0.0.0.0"),
        0,
        0
      ]);
      switch (errorCode) {
        case "ENOENT":
        case "ENOTFOUND":
        case "ETIMEDOUT":
        case "EHOSTUNREACH":
          buffer[1] = SocksReply.HostUnreachable;
          break;
        case "ENETUNREACH":
          buffer[1] = SocksReply.NetworkUnreachable;
          break;
        case "ECONNREFUSED":
          buffer[1] = SocksReply.ConnectionRefused;
          break;
        case "ERULESET":
          buffer[1] = SocksReply.NotAllowedByRuleSet;
          break;
      }
      this._writeBytes(buffer);
      this._socket.end();
    }
    sendData(data) {
      this._socket.write(data);
    }
    end() {
      this._socket.end();
    }
    error(error) {
      this._socket.destroy(new Error(error));
    }
  }
  function hexToNumber(hex) {
    return [...hex].reduce((value, digit) => {
      const code = digit.charCodeAt(0);
      if (code >= 48 && code <= 57)
        return value + code;
      if (code >= 97 && code <= 102)
        return value + (code - 97) + 10;
      if (code >= 65 && code <= 70)
        return value + (code - 65) + 10;
      throw new Error("Invalid IPv6 token " + hex);
    }, 0);
  }
  function ipToSocksAddress(address) {
    if (_net.default.isIPv4(address)) {
      return [
        1,
        ...address.split(".", 4).map((t) => +t & 255)
      ];
    }
    if (_net.default.isIPv6(address)) {
      const result = [4];
      const tokens = address.split(":", 8);
      while (tokens.length < 8)
        tokens.unshift("");
      for (const token of tokens) {
        const value = hexToNumber(token);
        result.push(value >> 8 & 255, value & 255);
      }
      return result;
    }
    throw new Error("Only IPv4 and IPv6 addresses are supported");
  }
  function starMatchToRegex(pattern) {
    const source = pattern.split("*").map((s) => {
      return s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }).join(".*");
    return new RegExp("^" + source + "$");
  }
  function parsePattern(pattern) {
    if (!pattern)
      return () => false;
    const matchers = pattern.split(",").map((token) => {
      const match = token.match(/^(.*?)(?::(\d+))?$/);
      if (!match)
        throw new Error(`Unsupported token "${token}" in pattern "${pattern}"`);
      const tokenPort = match[2] ? +match[2] : undefined;
      const portMatches = (port) => tokenPort === undefined || tokenPort === port;
      let tokenHost = match[1];
      if (tokenHost === "<loopback>") {
        return (host, port) => {
          if (!portMatches(port))
            return false;
          return host === "localhost" || host.endsWith(".localhost") || host === "127.0.0.1" || host === "[::1]";
        };
      }
      if (tokenHost === "*")
        return (host, port) => portMatches(port);
      if (_net.default.isIPv4(tokenHost) || _net.default.isIPv6(tokenHost))
        return (host, port) => host === tokenHost && portMatches(port);
      if (tokenHost[0] === ".")
        tokenHost = "*" + tokenHost;
      const tokenRegex = starMatchToRegex(tokenHost);
      return (host, port) => {
        if (!portMatches(port))
          return false;
        if (_net.default.isIPv4(host) || _net.default.isIPv6(host))
          return false;
        return !!host.match(tokenRegex);
      };
    });
    return (host, port) => matchers.some((matcher) => matcher(host, port));
  }

  class SocksProxy extends _events.default {
    constructor() {
      super();
      this._server = undefined;
      this._connections = new Map;
      this._sockets = new Set;
      this._closed = false;
      this._port = undefined;
      this._patternMatcher = () => false;
      this._directSockets = new Map;
      this._server = new _net.default.Server((socket) => {
        const uid = (0, _utils.createGuid)();
        const connection = new SocksConnection(uid, socket, this);
        this._connections.set(uid, connection);
      });
      this._server.on("connection", (socket) => {
        if (this._closed) {
          socket.destroy();
          return;
        }
        this._sockets.add(socket);
        socket.once("close", () => this._sockets.delete(socket));
      });
    }
    setPattern(pattern) {
      try {
        this._patternMatcher = parsePattern(pattern);
      } catch (e) {
        this._patternMatcher = () => false;
      }
    }
    async _handleDirect(request) {
      try {
        var _this$_connections$ge4;
        const socket = await (0, _happyEyeballs.createSocket)(request.host, request.port);
        socket.on("data", (data) => {
          var _this$_connections$ge;
          return (_this$_connections$ge = this._connections.get(request.uid)) === null || _this$_connections$ge === undefined ? undefined : _this$_connections$ge.sendData(data);
        });
        socket.on("error", (error) => {
          var _this$_connections$ge2;
          (_this$_connections$ge2 = this._connections.get(request.uid)) === null || _this$_connections$ge2 === undefined || _this$_connections$ge2.error(error.message);
          this._directSockets.delete(request.uid);
        });
        socket.on("end", () => {
          var _this$_connections$ge3;
          (_this$_connections$ge3 = this._connections.get(request.uid)) === null || _this$_connections$ge3 === undefined || _this$_connections$ge3.end();
          this._directSockets.delete(request.uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._directSockets.set(request.uid, socket);
        (_this$_connections$ge4 = this._connections.get(request.uid)) === null || _this$_connections$ge4 === undefined || _this$_connections$ge4.socketConnected(localAddress, localPort);
      } catch (error) {
        var _this$_connections$ge5;
        (_this$_connections$ge5 = this._connections.get(request.uid)) === null || _this$_connections$ge5 === undefined || _this$_connections$ge5.socketFailed(error.code);
      }
    }
    port() {
      return this._port;
    }
    async listen(port, hostname) {
      return new Promise((f) => {
        this._server.listen(port, hostname, () => {
          const port2 = this._server.address().port;
          this._port = port2;
          f(port2);
        });
      });
    }
    async close() {
      if (this._closed)
        return;
      this._closed = true;
      for (const socket of this._sockets)
        socket.destroy();
      this._sockets.clear();
      await new Promise((f) => this._server.close(f));
    }
    onSocketRequested(payload) {
      if (!this._patternMatcher(payload.host, payload.port)) {
        this._handleDirect(payload);
        return;
      }
      this.emit(SocksProxy.Events.SocksRequested, payload);
    }
    onSocketData(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.write(payload.data);
        return;
      }
      this.emit(SocksProxy.Events.SocksData, payload);
    }
    onSocketClosed(payload) {
      const direct = this._directSockets.get(payload.uid);
      if (direct) {
        direct.destroy();
        this._directSockets.delete(payload.uid);
        return;
      }
      this.emit(SocksProxy.Events.SocksClosed, payload);
    }
    socketConnected({
      uid,
      host,
      port
    }) {
      var _this$_connections$ge6;
      (_this$_connections$ge6 = this._connections.get(uid)) === null || _this$_connections$ge6 === undefined || _this$_connections$ge6.socketConnected(host, port);
    }
    socketFailed({
      uid,
      errorCode
    }) {
      var _this$_connections$ge7;
      (_this$_connections$ge7 = this._connections.get(uid)) === null || _this$_connections$ge7 === undefined || _this$_connections$ge7.socketFailed(errorCode);
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_connections$ge8;
      (_this$_connections$ge8 = this._connections.get(uid)) === null || _this$_connections$ge8 === undefined || _this$_connections$ge8.sendData(data);
    }
    sendSocketEnd({
      uid
    }) {
      var _this$_connections$ge9;
      (_this$_connections$ge9 = this._connections.get(uid)) === null || _this$_connections$ge9 === undefined || _this$_connections$ge9.end();
    }
    sendSocketError({
      uid,
      error
    }) {
      var _this$_connections$ge10;
      (_this$_connections$ge10 = this._connections.get(uid)) === null || _this$_connections$ge10 === undefined || _this$_connections$ge10.error(error);
    }
  }
  exports.SocksProxy = SocksProxy;
  SocksProxy.Events = {
    SocksRequested: "socksRequested",
    SocksData: "socksData",
    SocksClosed: "socksClosed"
  };

  class SocksProxyHandler extends _events.default {
    constructor(pattern, redirectPortForTest) {
      super();
      this._sockets = new Map;
      this._patternMatcher = () => false;
      this._redirectPortForTest = undefined;
      this._patternMatcher = parsePattern(pattern);
      this._redirectPortForTest = redirectPortForTest;
    }
    cleanup() {
      for (const uid of this._sockets.keys())
        this.socketClosed({
          uid
        });
    }
    async socketRequested({
      uid,
      host,
      port
    }) {
      _debugLogger.debugLogger.log("socks", `[${uid}] => request ${host}:${port}`);
      if (!this._patternMatcher(host, port)) {
        const payload = {
          uid,
          errorCode: "ERULESET"
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= pattern error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
        return;
      }
      if (host === "local.playwright")
        host = "localhost";
      try {
        if (this._redirectPortForTest)
          port = this._redirectPortForTest;
        const socket = await (0, _happyEyeballs.createSocket)(host, port);
        socket.on("data", (data) => {
          const payload2 = {
            uid,
            data
          };
          this.emit(SocksProxyHandler.Events.SocksData, payload2);
        });
        socket.on("error", (error) => {
          const payload2 = {
            uid,
            error: error.message
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket error ${payload2.error}`);
          this.emit(SocksProxyHandler.Events.SocksError, payload2);
          this._sockets.delete(uid);
        });
        socket.on("end", () => {
          const payload2 = {
            uid
          };
          _debugLogger.debugLogger.log("socks", `[${uid}] <= network socket closed`);
          this.emit(SocksProxyHandler.Events.SocksEnd, payload2);
          this._sockets.delete(uid);
        });
        const localAddress = socket.localAddress;
        const localPort = socket.localPort;
        this._sockets.set(uid, socket);
        const payload = {
          uid,
          host: localAddress,
          port: localPort
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connected to network ${payload.host}:${payload.port}`);
        this.emit(SocksProxyHandler.Events.SocksConnected, payload);
      } catch (error) {
        const payload = {
          uid,
          errorCode: error.code
        };
        _debugLogger.debugLogger.log("socks", `[${uid}] <= connect error ${payload.errorCode}`);
        this.emit(SocksProxyHandler.Events.SocksFailed, payload);
      }
    }
    sendSocketData({
      uid,
      data
    }) {
      var _this$_sockets$get;
      (_this$_sockets$get = this._sockets.get(uid)) === null || _this$_sockets$get === undefined || _this$_sockets$get.write(data);
    }
    socketClosed({
      uid
    }) {
      var _this$_sockets$get2;
      _debugLogger.debugLogger.log("socks", `[${uid}] <= browser socket closed`);
      (_this$_sockets$get2 = this._sockets.get(uid)) === null || _this$_sockets$get2 === undefined || _this$_sockets$get2.destroy();
      this._sockets.delete(uid);
    }
  }
  exports.SocksProxyHandler = SocksProxyHandler;
  SocksProxyHandler.Events = {
    SocksConnected: "socksConnected",
    SocksData: "socksData",
    SocksError: "socksError",
    SocksFailed: "socksFailed",
    SocksEnd: "socksEnd"
  };
});

// node_modules/playwright-core/lib/server/socksClientCertificatesInterceptor.js
var require_socksClientCertificatesInterceptor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ClientCertificatesProxy = undefined;
  exports.getMatchingTLSOptionsForOrigin = getMatchingTLSOptionsForOrigin;
  exports.rewriteOpenSSLErrorIfNeeded = rewriteOpenSSLErrorIfNeeded;
  var _net = _interopRequireDefault(__require("net"));
  var _http = _interopRequireDefault(__require("http2"));
  var _tls = _interopRequireDefault(__require("tls"));
  var _stream = _interopRequireDefault(__require("stream"));
  var _happyEyeballs = require_happy_eyeballs();
  var _utils = require_utils();
  var _socksProxy = require_socksProxy();
  var _debugLogger = require_debugLogger();
  var _fetch = require_fetch();
  var _events = __require("events");
  var _browserContext = require_browserContext();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var dummyServerTlsOptions = undefined;
  function loadDummyServerCertsIfNeeded() {
    if (dummyServerTlsOptions)
      return;
    const {
      cert,
      key
    } = (0, _utils.generateSelfSignedCertificate)();
    dummyServerTlsOptions = {
      key,
      cert
    };
  }

  class ALPNCache {
    constructor() {
      this._cache = new Map;
    }
    get(host, port, success) {
      const cacheKey = `${host}:${port}`;
      {
        const result2 = this._cache.get(cacheKey);
        if (result2) {
          result2.then(success);
          return;
        }
      }
      const result = new _utils.ManualPromise;
      this._cache.set(cacheKey, result);
      result.then(success);
      (0, _happyEyeballs.createTLSSocket)({
        host,
        port,
        servername: _net.default.isIP(host) ? undefined : host,
        ALPNProtocols: ["h2", "http/1.1"],
        rejectUnauthorized: false
      }).then((socket) => {
        result.resolve(socket.alpnProtocol || "http/1.1");
        socket.end();
      }).catch((error) => {
        _debugLogger.debugLogger.log("client-certificates", `ALPN error: ${error.message}`);
        result.resolve("http/1.1");
      });
    }
  }

  class SocksProxyConnection {
    constructor(socksProxy, uid, host, port) {
      this.socksProxy = undefined;
      this.uid = undefined;
      this.host = undefined;
      this.port = undefined;
      this.firstPackageReceived = false;
      this.target = undefined;
      this.internal = undefined;
      this.internalTLS = undefined;
      this._targetCloseEventListener = undefined;
      this._dummyServer = undefined;
      this._closed = false;
      this.socksProxy = socksProxy;
      this.uid = uid;
      this.host = host;
      this.port = port;
      this._targetCloseEventListener = () => {
        var _this$internalTLS, _this$_dummyServer;
        this.socksProxy._socksProxy.sendSocketEnd({
          uid: this.uid
        });
        (_this$internalTLS = this.internalTLS) === null || _this$internalTLS === undefined || _this$internalTLS.destroy();
        (_this$_dummyServer = this._dummyServer) === null || _this$_dummyServer === undefined || _this$_dummyServer.close();
      };
    }
    async connect() {
      if (this.socksProxy.proxyAgentFromOptions)
        this.target = await this.socksProxy.proxyAgentFromOptions.connect(new _events.EventEmitter, {
          host: rewriteToLocalhostIfNeeded(this.host),
          port: this.port,
          secureEndpoint: false
        });
      else
        this.target = await (0, _happyEyeballs.createSocket)(rewriteToLocalhostIfNeeded(this.host), this.port);
      this.target.once("close", this._targetCloseEventListener);
      this.target.once("error", (error) => this.socksProxy._socksProxy.sendSocketError({
        uid: this.uid,
        error: error.message
      }));
      if (this._closed) {
        this.target.destroy();
        return;
      }
      this.socksProxy._socksProxy.socketConnected({
        uid: this.uid,
        host: this.target.localAddress,
        port: this.target.localPort
      });
    }
    onClose() {
      var _this$internalTLS2, _this$_dummyServer2;
      this.target.destroy();
      (_this$internalTLS2 = this.internalTLS) === null || _this$internalTLS2 === undefined || _this$internalTLS2.destroy();
      (_this$_dummyServer2 = this._dummyServer) === null || _this$_dummyServer2 === undefined || _this$_dummyServer2.close();
      this._closed = true;
    }
    onData(data) {
      if (!this.firstPackageReceived) {
        this.firstPackageReceived = true;
        if (data[0] === 22)
          this._attachTLSListeners();
        else
          this.target.on("data", (data2) => this.socksProxy._socksProxy.sendSocketData({
            uid: this.uid,
            data: data2
          }));
      }
      if (this.internal)
        this.internal.push(data);
      else
        this.target.write(data);
    }
    _attachTLSListeners() {
      this.internal = new _stream.default.Duplex({
        read: () => {
        },
        write: (data, encoding, callback) => {
          this.socksProxy._socksProxy.sendSocketData({
            uid: this.uid,
            data
          });
          callback();
        }
      });
      this.socksProxy.alpnCache.get(rewriteToLocalhostIfNeeded(this.host), this.port, (alpnProtocolChosenByServer) => {
        _debugLogger.debugLogger.log("client-certificates", `Proxy->Target ${this.host}:${this.port} chooses ALPN ${alpnProtocolChosenByServer}`);
        if (this._closed)
          return;
        this._dummyServer = _tls.default.createServer({
          ...dummyServerTlsOptions,
          ALPNProtocols: alpnProtocolChosenByServer === "h2" ? ["h2", "http/1.1"] : ["http/1.1"]
        });
        this._dummyServer.emit("connection", this.internal);
        this._dummyServer.once("secureConnection", (internalTLS) => {
          this.internalTLS = internalTLS;
          _debugLogger.debugLogger.log("client-certificates", `Browser->Proxy ${this.host}:${this.port} chooses ALPN ${internalTLS.alpnProtocol}`);
          let targetTLS = undefined;
          const handleError = (error) => {
            _debugLogger.debugLogger.log("client-certificates", `error when connecting to target: ${error.message.replaceAll(`
`, " ")}`);
            const responseBody = (0, _utils.escapeHTML)("Playwright client-certificate error: " + error.message).replaceAll(`
`, " <br>");
            if ((internalTLS === null || internalTLS === undefined ? undefined : internalTLS.alpnProtocol) === "h2") {
              if ("performServerHandshake" in _http.default) {
                this.target.removeListener("close", this._targetCloseEventListener);
                const session = _http.default.performServerHandshake(internalTLS);
                session.on("error", () => {
                  this.target.destroy();
                  this._targetCloseEventListener();
                });
                session.once("stream", (stream) => {
                  stream.respond({
                    "content-type": "text/html",
                    [_http.default.constants.HTTP2_HEADER_STATUS]: 503
                  });
                  const cleanup = () => {
                    session.close();
                    this.target.destroy();
                    this._targetCloseEventListener();
                  };
                  stream.end(responseBody, cleanup);
                  stream.once("error", cleanup);
                });
              } else {
                this.target.destroy();
              }
            } else {
              internalTLS.end(["HTTP/1.1 503 Internal Server Error", "Content-Type: text/html; charset=utf-8", "Content-Length: " + Buffer.byteLength(responseBody), "", responseBody].join(`\r
`));
              this.target.destroy();
            }
          };
          if (this._closed) {
            internalTLS.destroy();
            return;
          }
          targetTLS = _tls.default.connect({
            socket: this.target,
            host: this.host,
            port: this.port,
            rejectUnauthorized: !this.socksProxy.ignoreHTTPSErrors,
            ALPNProtocols: [internalTLS.alpnProtocol || "http/1.1"],
            servername: !_net.default.isIP(this.host) ? this.host : undefined,
            secureContext: this.socksProxy.secureContextMap.get(new URL(`https://${this.host}:${this.port}`).origin)
          });
          targetTLS.once("secureConnect", () => {
            internalTLS.pipe(targetTLS);
            targetTLS.pipe(internalTLS);
          });
          internalTLS.once("error", () => this.target.destroy());
          targetTLS.once("error", handleError);
        });
      });
    }
  }

  class ClientCertificatesProxy {
    constructor(contextOptions) {
      this._socksProxy = undefined;
      this._connections = new Map;
      this.ignoreHTTPSErrors = undefined;
      this.secureContextMap = new Map;
      this.alpnCache = undefined;
      this.proxyAgentFromOptions = undefined;
      (0, _browserContext.verifyClientCertificates)(contextOptions.clientCertificates);
      this.alpnCache = new ALPNCache;
      this.ignoreHTTPSErrors = contextOptions.ignoreHTTPSErrors;
      this.proxyAgentFromOptions = contextOptions.proxy ? (0, _fetch.createProxyAgent)(contextOptions.proxy) : undefined;
      this._initSecureContexts(contextOptions.clientCertificates);
      this._socksProxy = new _socksProxy.SocksProxy;
      this._socksProxy.setPattern("*");
      this._socksProxy.addListener(_socksProxy.SocksProxy.Events.SocksRequested, async (payload) => {
        try {
          const connection = new SocksProxyConnection(this, payload.uid, payload.host, payload.port);
          await connection.connect();
          this._connections.set(payload.uid, connection);
        } catch (error) {
          this._socksProxy.socketFailed({
            uid: payload.uid,
            errorCode: error.code
          });
        }
      });
      this._socksProxy.addListener(_socksProxy.SocksProxy.Events.SocksData, async (payload) => {
        var _this$_connections$ge;
        (_this$_connections$ge = this._connections.get(payload.uid)) === null || _this$_connections$ge === undefined || _this$_connections$ge.onData(payload.data);
      });
      this._socksProxy.addListener(_socksProxy.SocksProxy.Events.SocksClosed, (payload) => {
        var _this$_connections$ge2;
        (_this$_connections$ge2 = this._connections.get(payload.uid)) === null || _this$_connections$ge2 === undefined || _this$_connections$ge2.onClose();
        this._connections.delete(payload.uid);
      });
      loadDummyServerCertsIfNeeded();
    }
    _initSecureContexts(clientCertificates) {
      const origin2certs = new Map;
      for (const cert of clientCertificates || []) {
        const origin = normalizeOrigin(cert.origin);
        const certs = origin2certs.get(origin) || [];
        certs.push(cert);
        origin2certs.set(origin, certs);
      }
      for (const [origin, certs] of origin2certs) {
        try {
          this.secureContextMap.set(origin, _tls.default.createSecureContext(convertClientCertificatesToTLSOptions(certs)));
        } catch (error) {
          error = rewriteOpenSSLErrorIfNeeded(error);
          throw (0, _utils.rewriteErrorMessage)(error, `Failed to load client certificate: ${error.message}`);
        }
      }
    }
    async listen() {
      const port = await this._socksProxy.listen(0, "127.0.0.1");
      return {
        server: `socks5://127.0.0.1:${port}`
      };
    }
    async close() {
      await this._socksProxy.close();
    }
  }
  exports.ClientCertificatesProxy = ClientCertificatesProxy;
  function normalizeOrigin(origin) {
    try {
      return new URL(origin).origin;
    } catch (error) {
      return origin;
    }
  }
  function convertClientCertificatesToTLSOptions(clientCertificates) {
    if (!clientCertificates || !clientCertificates.length)
      return;
    const tlsOptions = {
      pfx: [],
      key: [],
      cert: []
    };
    for (const cert of clientCertificates) {
      if (cert.cert)
        tlsOptions.cert.push(cert.cert);
      if (cert.key)
        tlsOptions.key.push({
          pem: cert.key,
          passphrase: cert.passphrase
        });
      if (cert.pfx)
        tlsOptions.pfx.push({
          buf: cert.pfx,
          passphrase: cert.passphrase
        });
    }
    return tlsOptions;
  }
  function getMatchingTLSOptionsForOrigin(clientCertificates, origin) {
    const matchingCerts = clientCertificates === null || clientCertificates === undefined ? undefined : clientCertificates.filter((c) => normalizeOrigin(c.origin) === origin);
    return convertClientCertificatesToTLSOptions(matchingCerts);
  }
  function rewriteToLocalhostIfNeeded(host) {
    return host === "local.playwright" ? "localhost" : host;
  }
  function rewriteOpenSSLErrorIfNeeded(error) {
    if (error.message !== "unsupported" && error.code !== "ERR_CRYPTO_UNSUPPORTED_OPERATION")
      return error;
    return (0, _utils.rewriteErrorMessage)(error, ["Unsupported TLS certificate.", "Most likely, the security algorithm of the given certificate was deprecated by OpenSSL.", "For more details, see https://github.com/openssl/openssl/blob/master/README-PROVIDERS.md#the-legacy-provider", "You could probably modernize the certificate by following the steps at https://github.com/nodejs/node/issues/40672#issuecomment-1243648223"].join(`
`));
  }
});

// node_modules/playwright-core/lib/server/browser.js
var require_browser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Browser = undefined;
  var _browserContext = require_browserContext();
  var _page = require_page();
  var _download = require_download();
  var _instrumentation = require_instrumentation();
  var _artifact = require_artifact();
  var _socksClientCertificatesInterceptor = require_socksClientCertificatesInterceptor();

  class Browser extends _instrumentation.SdkObject {
    constructor(parent, options) {
      super(parent, "browser");
      this.options = undefined;
      this._downloads = new Map;
      this._defaultContext = null;
      this._startedClosing = false;
      this._idToVideo = new Map;
      this._contextForReuse = undefined;
      this._closeReason = undefined;
      this._isCollocatedWithServer = true;
      this.attribution.browser = this;
      this.options = options;
      this.instrumentation.onBrowserOpen(this);
    }
    async newContext(metadata, options) {
      var _options$clientCertif;
      (0, _browserContext.validateBrowserContextOptions)(options, this.options);
      let clientCertificatesProxy;
      if ((_options$clientCertif = options.clientCertificates) !== null && _options$clientCertif !== undefined && _options$clientCertif.length) {
        clientCertificatesProxy = new _socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
        options = {
          ...options
        };
        options.proxyOverride = await clientCertificatesProxy.listen();
        options.internalIgnoreHTTPSErrors = true;
      }
      let context;
      try {
        context = await this.doCreateNewContext(options);
      } catch (error) {
        var _clientCertificatesPr;
        await ((_clientCertificatesPr = clientCertificatesProxy) === null || _clientCertificatesPr === undefined ? undefined : _clientCertificatesPr.close());
        throw error;
      }
      context._clientCertificatesProxy = clientCertificatesProxy;
      if (options.storageState)
        await context.setStorageState(metadata, options.storageState);
      return context;
    }
    async newContextForReuse(params, metadata) {
      const hash = _browserContext.BrowserContext.reusableContextHash(params);
      if (!this._contextForReuse || hash !== this._contextForReuse.hash || !this._contextForReuse.context.canResetForReuse()) {
        if (this._contextForReuse)
          await this._contextForReuse.context.close({
            reason: "Context reused"
          });
        this._contextForReuse = {
          context: await this.newContext(metadata, params),
          hash
        };
        return {
          context: this._contextForReuse.context,
          needsReset: false
        };
      }
      await this._contextForReuse.context.stopPendingOperations("Context recreated");
      return {
        context: this._contextForReuse.context,
        needsReset: true
      };
    }
    async stopPendingOperations(reason) {
      var _this$_contextForReus;
      await ((_this$_contextForReus = this._contextForReuse) === null || _this$_contextForReus === undefined || (_this$_contextForReus = _this$_contextForReus.context) === null || _this$_contextForReus === undefined ? undefined : _this$_contextForReus.stopPendingOperations(reason));
    }
    _downloadCreated(page, uuid2, url, suggestedFilename) {
      const download = new _download.Download(page, this.options.downloadsPath || "", uuid2, url, suggestedFilename);
      this._downloads.set(uuid2, download);
    }
    _downloadFilenameSuggested(uuid2, suggestedFilename) {
      const download = this._downloads.get(uuid2);
      if (!download)
        return;
      download._filenameSuggested(suggestedFilename);
    }
    _downloadFinished(uuid2, error) {
      const download = this._downloads.get(uuid2);
      if (!download)
        return;
      download.artifact.reportFinished(error ? new Error(error) : undefined);
      this._downloads.delete(uuid2);
    }
    _videoStarted(context, videoId, path, pageOrError) {
      const artifact = new _artifact.Artifact(context, path);
      this._idToVideo.set(videoId, {
        context,
        artifact
      });
      pageOrError.then((page) => {
        if (page instanceof _page.Page) {
          page._video = artifact;
          page.emitOnContext(_browserContext.BrowserContext.Events.VideoStarted, artifact);
          page.emit(_page.Page.Events.Video, artifact);
        }
      });
    }
    _takeVideo(videoId) {
      const video = this._idToVideo.get(videoId);
      this._idToVideo.delete(videoId);
      return video === null || video === undefined ? undefined : video.artifact;
    }
    _didClose() {
      for (const context of this.contexts())
        context._browserClosed();
      if (this._defaultContext)
        this._defaultContext._browserClosed();
      this.emit(Browser.Events.Disconnected);
      this.instrumentation.onBrowserClose(this);
    }
    async close(options) {
      if (!this._startedClosing) {
        if (options.reason)
          this._closeReason = options.reason;
        this._startedClosing = true;
        await this.options.browserProcess.close();
      }
      if (this.isConnected())
        await new Promise((x) => this.once(Browser.Events.Disconnected, x));
    }
    async killForTests() {
      await this.options.browserProcess.kill();
    }
  }
  exports.Browser = Browser;
  Browser.Events = {
    Disconnected: "disconnected"
  };
});

// node_modules/playwright-core/lib/server/chromium/crConnection.js
var require_crConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.ConnectionEvents = exports.CRSession = exports.CRConnection = exports.CDPSession = undefined;
  var _utils = require_utils();
  var _events = __require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var ConnectionEvents = exports.ConnectionEvents = {
    Disconnected: Symbol("ConnectionEvents.Disconnected")
  };
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;

  class CRConnection extends _events.EventEmitter {
    constructor(transport, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = 0;
      this._transport = undefined;
      this._sessions = new Map;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this.rootSession = undefined;
      this._closed = false;
      this.setMaxListeners(0);
      this._transport = transport;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.rootSession = new CRSession(this, null, "");
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    _rawSend(sessionId, method, params) {
      const id = ++this._lastId;
      const message = {
        id,
        method,
        params
      };
      if (sessionId)
        message.sessionId = sessionId;
      this._protocolLogger("send", message);
      this._transport.send(message);
      return id;
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      const session = this._sessions.get(message.sessionId || "");
      if (session)
        session._onMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    async createBrowserSession() {
      const {
        sessionId
      } = await this.rootSession.send("Target.attachToBrowserTarget");
      return new CDPSession(this.rootSession, sessionId);
    }
  }
  exports.CRConnection = CRConnection;

  class CRSession extends _events.EventEmitter {
    constructor(connection, parentSession, sessionId, eventListener) {
      super();
      this._connection = undefined;
      this._eventListener = undefined;
      this._callbacks = new Map;
      this._sessionId = undefined;
      this._parentSession = undefined;
      this._crashed = false;
      this._closed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this._connection = connection;
      this._parentSession = parentSession;
      this._sessionId = sessionId;
      this._eventListener = eventListener;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    _markAsCrashed() {
      this._crashed = true;
    }
    createChildSession(sessionId, eventListener) {
      const session = new CRSession(this._connection, this, sessionId, eventListener);
      this._connection._sessions.set(sessionId, session);
      return session;
    }
    async send(method, params) {
      if (this._crashed || this._closed || this._connection._closed || this._connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this._connection._browserDisconnectedLogs);
      const id = this._connection._rawSend(this._sessionId, method, params);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    _sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    _onMessage(object) {
      var _object$error;
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && ((_object$error = object.error) === null || _object$error === undefined ? undefined : _object$error.code) === -32001) {
      } else {
        var _object$error2;
        (0, _utils.assert)(!object.id, (object === null || object === undefined || (_object$error2 = object.error) === null || _object$error2 === undefined ? undefined : _object$error2.message) || undefined);
        Promise.resolve().then(() => {
          if (this._eventListener)
            this._eventListener(object.method, object.params);
          this.emit(object.method, object.params);
        });
      }
    }
    async detach() {
      if (this._closed)
        throw new Error(`Session already detached. Most likely the page has been closed.`);
      if (!this._parentSession)
        throw new Error("Root session cannot be closed");
      await this._sendMayFail("Runtime.runIfWaitingForDebugger");
      await this._parentSession.send("Target.detachFromTarget", {
        sessionId: this._sessionId
      });
      this.dispose();
    }
    dispose() {
      this._closed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.setMessage(`Internal server error, session closed.`);
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  exports.CRSession = CRSession;

  class CDPSession extends _events.EventEmitter {
    constructor(parentSession, sessionId) {
      super();
      this.guid = undefined;
      this._session = undefined;
      this._listeners = [];
      this.guid = `cdp-session@${sessionId}`;
      this._session = parentSession.createChildSession(sessionId, (method, params) => this.emit(CDPSession.Events.Event, {
        method,
        params
      }));
      this._listeners = [_utils.eventsHelper.addEventListener(parentSession, "Target.detachedFromTarget", (event) => {
        if (event.sessionId === sessionId)
          this._onClose();
      })];
    }
    async send(method, params) {
      return await this._session.send(method, params);
    }
    async detach() {
      return await this._session.detach();
    }
    async attachToTarget(targetId) {
      const {
        sessionId
      } = await this.send("Target.attachToTarget", {
        targetId,
        flatten: true
      });
      return new CDPSession(this._session, sessionId);
    }
    _onClose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._session.dispose();
      this.emit(CDPSession.Events.Closed);
    }
  }
  exports.CDPSession = CDPSession;
  CDPSession.Events = {
    Event: "event",
    Closed: "close"
  };
});

// node_modules/playwright-core/lib/server/dialog.js
var require_dialog = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Dialog = undefined;
  var _utils = require_utils();
  var _instrumentation = require_instrumentation();

  class Dialog extends _instrumentation.SdkObject {
    constructor(page, type, message, onHandle, defaultValue) {
      super(page, "dialog");
      this._page = undefined;
      this._type = undefined;
      this._message = undefined;
      this._onHandle = undefined;
      this._handled = false;
      this._defaultValue = undefined;
      this._page = page;
      this._type = type;
      this._message = message;
      this._onHandle = onHandle;
      this._defaultValue = defaultValue || "";
      this._page._frameManager.dialogDidOpen(this);
      this.instrumentation.onDialog(this);
    }
    page() {
      return this._page;
    }
    type() {
      return this._type;
    }
    message() {
      return this._message;
    }
    defaultValue() {
      return this._defaultValue;
    }
    async accept(promptText) {
      (0, _utils.assert)(!this._handled, "Cannot accept dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(true, promptText);
    }
    async dismiss() {
      (0, _utils.assert)(!this._handled, "Cannot dismiss dialog which is already handled!");
      this._handled = true;
      this._page._frameManager.dialogWillClose(this);
      await this._onHandle(false);
    }
    async close() {
      if (this._type === "beforeunload")
        await this.accept();
      else
        await this.dismiss();
    }
  }
  exports.Dialog = Dialog;
});

// node_modules/playwright-core/lib/server/chromium/crAccessibility.js
var require_crAccessibility = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  async function getAccessibilityTree(client, needle) {
    const {
      nodes
    } = await client.send("Accessibility.getFullAXTree");
    const tree = CRAXNode.createTree(client, nodes);
    return {
      tree,
      needle: needle ? await tree._findElement(needle) : null
    };
  }

  class CRAXNode {
    constructor(client, payload) {
      this._payload = undefined;
      this._children = [];
      this._richlyEditable = false;
      this._editable = false;
      this._focusable = false;
      this._expanded = false;
      this._hidden = false;
      this._name = undefined;
      this._role = undefined;
      this._cachedHasFocusableChild = undefined;
      this._client = undefined;
      this._client = client;
      this._payload = payload;
      this._name = this._payload.name ? this._payload.name.value : "";
      this._role = this._payload.role ? this._payload.role.value : "Unknown";
      for (const property of this._payload.properties || []) {
        if (property.name === "editable") {
          this._richlyEditable = property.value.value === "richtext";
          this._editable = true;
        }
        if (property.name === "focusable")
          this._focusable = property.value.value;
        if (property.name === "expanded")
          this._expanded = property.value.value;
        if (property.name === "hidden")
          this._hidden = property.value.value;
      }
    }
    _isPlainTextField() {
      if (this._richlyEditable)
        return false;
      if (this._editable)
        return true;
      return this._role === "textbox" || this._role === "ComboBox" || this._role === "searchbox";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "LineBreak" || role === "text" || role === "InlineTextBox" || role === "StaticText";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === undefined) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    async _findElement(element) {
      const objectId = element._objectId;
      const {
        node: {
          backendNodeId
        }
      } = await this._client.send("DOM.describeNode", {
        objectId
      });
      const needle = this.find((node) => node._payload.backendDOMNodeId === backendNodeId);
      return needle || null;
    }
    find(predicate) {
      if (predicate(this))
        return this;
      for (const child of this._children) {
        const result = child.find(predicate);
        if (result)
          return result;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isPlainTextField() || this._isTextOnlyObject())
        return true;
      switch (this._role) {
        case "doc-cover":
        case "graphics-symbol":
        case "img":
        case "Meter":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
        default:
          break;
      }
      if (this._hasFocusableChild())
        return false;
      if (this._focusable && this._role !== "WebArea" && this._role !== "RootWebArea" && this._name)
        return true;
      if (this._role === "heading" && this._name)
        return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      const role = this._role;
      if (role === "Ignored" || this._hidden)
        return false;
      if (this._focusable || this._richlyEditable)
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!this._name;
    }
    normalizedRole() {
      switch (this._role) {
        case "RootWebArea":
          return "WebArea";
        case "StaticText":
          return "text";
        default:
          return this._role;
      }
    }
    serialize() {
      const properties = new Map;
      for (const property of this._payload.properties || [])
        properties.set(property.name.toLowerCase(), property.value.value);
      if (this._payload.description)
        properties.set("description", this._payload.description.value);
      const node = {
        role: this.normalizedRole(),
        name: this._payload.name ? this._payload.name.value || "" : ""
      };
      const userStringProperties = ["description", "keyshortcuts", "roledescription", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!properties.has(userStringProperty))
          continue;
        node[userStringProperty] = properties.get(userStringProperty);
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._role === "WebArea" || this._role === "RootWebArea"))
          continue;
        const value = properties.get(booleanProperty);
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!properties.has(numericalProperty))
          continue;
        node[numericalProperty] = properties.get(numericalProperty);
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = properties.get(tokenProperty);
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      if (this._payload.value) {
        if (typeof this._payload.value.value === "string")
          axNode.valueString = this._payload.value.value;
        if (typeof this._payload.value.value === "number")
          axNode.valueNumber = this._payload.value.value;
      }
      if (properties.has("checked"))
        axNode.checked = properties.get("checked") === "true" ? "checked" : properties.get("checked") === "false" ? "unchecked" : "mixed";
      if (properties.has("pressed"))
        axNode.pressed = properties.get("pressed") === "true" ? "pressed" : properties.get("pressed") === "false" ? "released" : "mixed";
      return axNode;
    }
    static createTree(client, payloads) {
      const nodeById = new Map;
      for (const payload of payloads)
        nodeById.set(payload.nodeId, new CRAXNode(client, payload));
      for (const node of nodeById.values()) {
        for (const childId of node._payload.childIds || [])
          node._children.push(nodeById.get(childId));
      }
      return nodeById.values().next().value;
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crCoverage.js
var require_crCoverage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRCoverage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils();

  class CRCoverage {
    constructor(client) {
      this._jsCoverage = undefined;
      this._cssCoverage = undefined;
      this._jsCoverage = new JSCoverage(client);
      this._cssCoverage = new CSSCoverage(client);
    }
    async startJSCoverage(options) {
      return await this._jsCoverage.start(options);
    }
    async stopJSCoverage() {
      return await this._jsCoverage.stop();
    }
    async startCSSCoverage(options) {
      return await this._cssCoverage.start(options);
    }
    async stopCSSCoverage() {
      return await this._cssCoverage.stop();
    }
  }
  exports.CRCoverage = CRCoverage;

  class JSCoverage {
    constructor(client) {
      this._client = undefined;
      this._enabled = undefined;
      this._scriptIds = undefined;
      this._scriptSources = undefined;
      this._eventListeners = undefined;
      this._resetOnNavigation = undefined;
      this._reportAnonymousScripts = false;
      this._client = client;
      this._enabled = false;
      this._scriptIds = new Set;
      this._scriptSources = new Map;
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "JSCoverage is already enabled");
      const {
        resetOnNavigation = true,
        reportAnonymousScripts = false
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._reportAnonymousScripts = reportAnonymousScripts;
      this._enabled = true;
      this._scriptIds.clear();
      this._scriptSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.scriptParsed", this._onScriptParsed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Debugger.paused", this._onDebuggerPaused.bind(this))];
      await Promise.all([this._client.send("Profiler.enable"), this._client.send("Profiler.startPreciseCoverage", {
        callCount: true,
        detailed: true
      }), this._client.send("Debugger.enable"), this._client.send("Debugger.setSkipAllPauses", {
        skip: true
      })]);
    }
    _onDebuggerPaused() {
      this._client.send("Debugger.resume");
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation)
        return;
      this._scriptIds.clear();
      this._scriptSources.clear();
    }
    async _onScriptParsed(event) {
      this._scriptIds.add(event.scriptId);
      if (!event.url && !this._reportAnonymousScripts)
        return;
      const response = await this._client._sendMayFail("Debugger.getScriptSource", {
        scriptId: event.scriptId
      });
      if (response)
        this._scriptSources.set(event.scriptId, response.scriptSource);
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "JSCoverage is not enabled");
      this._enabled = false;
      const [profileResponse] = await Promise.all([this._client.send("Profiler.takePreciseCoverage"), this._client.send("Profiler.stopPreciseCoverage"), this._client.send("Profiler.disable"), this._client.send("Debugger.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const coverage = {
        entries: []
      };
      for (const entry of profileResponse.result) {
        if (!this._scriptIds.has(entry.scriptId))
          continue;
        if (!entry.url && !this._reportAnonymousScripts)
          continue;
        const source = this._scriptSources.get(entry.scriptId);
        if (source)
          coverage.entries.push({
            ...entry,
            source
          });
        else
          coverage.entries.push(entry);
      }
      return coverage;
    }
  }

  class CSSCoverage {
    constructor(client) {
      this._client = undefined;
      this._enabled = undefined;
      this._stylesheetURLs = undefined;
      this._stylesheetSources = undefined;
      this._eventListeners = undefined;
      this._resetOnNavigation = undefined;
      this._client = client;
      this._enabled = false;
      this._stylesheetURLs = new Map;
      this._stylesheetSources = new Map;
      this._eventListeners = [];
      this._resetOnNavigation = false;
    }
    async start(options) {
      (0, _utils.assert)(!this._enabled, "CSSCoverage is already enabled");
      const {
        resetOnNavigation = true
      } = options;
      this._resetOnNavigation = resetOnNavigation;
      this._enabled = true;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._client, "CSS.styleSheetAdded", this._onStyleSheet.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this))];
      await Promise.all([this._client.send("DOM.enable"), this._client.send("CSS.enable"), this._client.send("CSS.startRuleUsageTracking")]);
    }
    _onExecutionContextsCleared() {
      if (!this._resetOnNavigation)
        return;
      this._stylesheetURLs.clear();
      this._stylesheetSources.clear();
    }
    async _onStyleSheet(event) {
      const header = event.header;
      if (!header.sourceURL)
        return;
      const response = await this._client._sendMayFail("CSS.getStyleSheetText", {
        styleSheetId: header.styleSheetId
      });
      if (response) {
        this._stylesheetURLs.set(header.styleSheetId, header.sourceURL);
        this._stylesheetSources.set(header.styleSheetId, response.text);
      }
    }
    async stop() {
      (0, _utils.assert)(this._enabled, "CSSCoverage is not enabled");
      this._enabled = false;
      const ruleTrackingResponse = await this._client.send("CSS.stopRuleUsageTracking");
      await Promise.all([this._client.send("CSS.disable"), this._client.send("DOM.disable")]);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      const styleSheetIdToCoverage = new Map;
      for (const entry of ruleTrackingResponse.ruleUsage) {
        let ranges = styleSheetIdToCoverage.get(entry.styleSheetId);
        if (!ranges) {
          ranges = [];
          styleSheetIdToCoverage.set(entry.styleSheetId, ranges);
        }
        ranges.push({
          startOffset: entry.startOffset,
          endOffset: entry.endOffset,
          count: entry.used ? 1 : 0
        });
      }
      const coverage = {
        entries: []
      };
      for (const styleSheetId of this._stylesheetURLs.keys()) {
        const url = this._stylesheetURLs.get(styleSheetId);
        const text = this._stylesheetSources.get(styleSheetId);
        const ranges = convertToDisjointRanges(styleSheetIdToCoverage.get(styleSheetId) || []);
        coverage.entries.push({
          url,
          ranges,
          text
        });
      }
      return coverage;
    }
  }
  function convertToDisjointRanges(nestedRanges) {
    const points = [];
    for (const range of nestedRanges) {
      points.push({
        offset: range.startOffset,
        type: 0,
        range
      });
      points.push({
        offset: range.endOffset,
        type: 1,
        range
      });
    }
    points.sort((a, b) => {
      if (a.offset !== b.offset)
        return a.offset - b.offset;
      if (a.type !== b.type)
        return b.type - a.type;
      const aLength = a.range.endOffset - a.range.startOffset;
      const bLength = b.range.endOffset - b.range.startOffset;
      if (a.type === 0)
        return bLength - aLength;
      return aLength - bLength;
    });
    const hitCountStack = [];
    const results = [];
    let lastOffset = 0;
    for (const point of points) {
      if (hitCountStack.length && lastOffset < point.offset && hitCountStack[hitCountStack.length - 1] > 0) {
        const lastResult = results.length ? results[results.length - 1] : null;
        if (lastResult && lastResult.end === lastOffset)
          lastResult.end = point.offset;
        else
          results.push({
            start: lastOffset,
            end: point.offset
          });
      }
      lastOffset = point.offset;
      if (point.type === 0)
        hitCountStack.push(point.range.count);
      else
        hitCountStack.pop();
    }
    return results.filter((range) => range.end - range.start > 1);
  }
});

// node_modules/playwright-core/lib/server/chromium/crProtocolHelper.js
var require_crProtocolHelper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.exceptionToError = exceptionToError;
  exports.getExceptionMessage = getExceptionMessage;
  exports.readProtocolStream = readProtocolStream;
  exports.releaseObject = releaseObject;
  exports.saveProtocolStream = saveProtocolStream;
  exports.toButtonsMask = toButtonsMask;
  exports.toConsoleMessageLocation = toConsoleMessageLocation;
  exports.toModifiersMask = toModifiersMask;
  var _fs = _interopRequireDefault(__require("fs"));
  var _fileUtils = require_fileUtils();
  var _stackTrace = require_stackTrace();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function getExceptionMessage(exceptionDetails) {
    if (exceptionDetails.exception)
      return exceptionDetails.exception.description || String(exceptionDetails.exception.value);
    let message = exceptionDetails.text;
    if (exceptionDetails.stackTrace) {
      for (const callframe of exceptionDetails.stackTrace.callFrames) {
        const location2 = callframe.url + ":" + callframe.lineNumber + ":" + callframe.columnNumber;
        const functionName = callframe.functionName || "<anonymous>";
        message += `
    at ${functionName} (${location2})`;
      }
    }
    return message;
  }
  async function releaseObject(client, objectId) {
    await client.send("Runtime.releaseObject", {
      objectId
    }).catch((error) => {
    });
  }
  async function saveProtocolStream(client, handle, path) {
    let eof = false;
    await (0, _fileUtils.mkdirIfNeeded)(path);
    const fd = await _fs.default.promises.open(path, "w");
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : undefined);
      await fd.write(buf);
    }
    await fd.close();
    await client.send("IO.close", {
      handle
    });
  }
  async function readProtocolStream(client, handle) {
    let eof = false;
    const chunks = [];
    while (!eof) {
      const response = await client.send("IO.read", {
        handle
      });
      eof = response.eof;
      const buf = Buffer.from(response.data, response.base64Encoded ? "base64" : undefined);
      chunks.push(buf);
    }
    await client.send("IO.close", {
      handle
    });
    return Buffer.concat(chunks);
  }
  function toConsoleMessageLocation(stackTrace) {
    return stackTrace && stackTrace.callFrames.length ? {
      url: stackTrace.callFrames[0].url,
      lineNumber: stackTrace.callFrames[0].lineNumber,
      columnNumber: stackTrace.callFrames[0].columnNumber
    } : {
      url: "",
      lineNumber: 0,
      columnNumber: 0
    };
  }
  function exceptionToError(exceptionDetails) {
    var _exceptionDetails$exc, _nameOverride$value;
    const messageWithStack = getExceptionMessage(exceptionDetails);
    const lines = messageWithStack.split(`
`);
    const firstStackTraceLine = lines.findIndex((line) => line.startsWith("    at"));
    let messageWithName = "";
    let stack = "";
    if (firstStackTraceLine === -1) {
      messageWithName = messageWithStack;
    } else {
      messageWithName = lines.slice(0, firstStackTraceLine).join(`
`);
      stack = messageWithStack;
    }
    const {
      name,
      message
    } = (0, _stackTrace.splitErrorMessage)(messageWithName);
    const err = new Error(message);
    err.stack = stack;
    const nameOverride = (_exceptionDetails$exc = exceptionDetails.exception) === null || _exceptionDetails$exc === undefined || (_exceptionDetails$exc = _exceptionDetails$exc.preview) === null || _exceptionDetails$exc === undefined ? undefined : _exceptionDetails$exc.properties.find((o) => o.name === "name");
    err.name = nameOverride ? (_nameOverride$value = nameOverride.value) !== null && _nameOverride$value !== undefined ? _nameOverride$value : "Error" : name;
    return err;
  }
  function toModifiersMask(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Meta"))
      mask |= 4;
    if (modifiers.has("Shift"))
      mask |= 8;
    return mask;
  }
  function toButtonsMask(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  }
});

// node_modules/playwright-core/lib/server/chromium/crDragDrop.js
var require_crDragDrop = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DragManager = undefined;
  var _utils = require_utils();
  var _crProtocolHelper = require_crProtocolHelper();

  class DragManager {
    constructor(page) {
      this._crPage = undefined;
      this._dragState = null;
      this._lastPosition = {
        x: 0,
        y: 0
      };
      this._crPage = page;
    }
    async cancelDrag() {
      if (!this._dragState)
        return false;
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "dragCancel",
        x: this._lastPosition.x,
        y: this._lastPosition.y,
        data: {
          items: [],
          dragOperationsMask: 65535
        }
      });
      this._dragState = null;
      return true;
    }
    async interceptDragCausedByMove(x, y, button, buttons, modifiers, moveCallback) {
      this._lastPosition = {
        x,
        y
      };
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragOver",
          x,
          y,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
        return;
      }
      if (button !== "left")
        return moveCallback();
      const client = this._crPage._mainFrameSession._client;
      let onDragIntercepted;
      const dragInterceptedPromise = new Promise((x2) => onDragIntercepted = x2);
      function setupDragListeners() {
        let didStartDrag = Promise.resolve(false);
        let dragEvent = null;
        const dragListener = (event) => dragEvent = event;
        const mouseListener = () => {
          didStartDrag = new Promise((callback) => {
            window.addEventListener("dragstart", dragListener, {
              once: true,
              capture: true
            });
            setTimeout(() => callback(dragEvent ? !dragEvent.defaultPrevented : false), 0);
          });
        };
        window.addEventListener("mousemove", mouseListener, {
          once: true,
          capture: true
        });
        window.__cleanupDrag = async () => {
          const val = await didStartDrag;
          window.removeEventListener("mousemove", mouseListener, {
            capture: true
          });
          window.removeEventListener("dragstart", dragListener, {
            capture: true
          });
          delete window.__cleanupDrag;
          return val;
        };
      }
      await this._crPage._page.safeNonStallingEvaluateInAllFrames(`(${setupDragListeners.toString()})()`, "utility");
      client.on("Input.dragIntercepted", onDragIntercepted);
      try {
        await client.send("Input.setInterceptDrags", {
          enabled: true
        });
      } catch {
        client.off("Input.dragIntercepted", onDragIntercepted);
        return moveCallback();
      }
      await moveCallback();
      const expectingDrag = (await Promise.all(this._crPage._page.frames().map(async (frame) => {
        return frame.nonStallingEvaluateInExistingContext("window.__cleanupDrag && window.__cleanupDrag()", "utility").catch(() => false);
      }))).some((x2) => x2);
      this._dragState = expectingDrag ? (await dragInterceptedPromise).data : null;
      client.off("Input.dragIntercepted", onDragIntercepted);
      await client.send("Input.setInterceptDrags", {
        enabled: false
      });
      if (this._dragState) {
        await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
          type: "dragEnter",
          x,
          y,
          data: this._dragState,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      }
    }
    isDragging() {
      return !!this._dragState;
    }
    async drop(x, y, modifiers) {
      (0, _utils.assert)(this._dragState, "missing drag state");
      await this._crPage._mainFrameSession._client.send("Input.dispatchDragEvent", {
        type: "drop",
        x,
        y,
        data: this._dragState,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
      });
      this._dragState = null;
    }
  }
  exports.DragManager = DragManager;
});

// node_modules/playwright-core/lib/server/chromium/crExecutionContext.js
var require_crExecutionContext = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRExecutionContext = undefined;
  var _crProtocolHelper = require_crProtocolHelper();
  var js = _interopRequireWildcard(require_javascript());
  var _stackTrace = require_stackTrace();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class CRExecutionContext {
    constructor(client, contextPayload) {
      this._client = undefined;
      this._contextId = undefined;
      this._client = client;
      this._contextId = contextPayload.id;
    }
    async rawEvaluateJSON(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId,
        returnByValue: true
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.value;
    }
    async rawEvaluateHandle(expression) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.evaluate", {
        expression,
        contextId: this._contextId
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return remoteObject.objectId;
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      const {
        exceptionDetails,
        result: remoteObject
      } = await this._client.send("Runtime.callFunctionOn", {
        functionDeclaration: expression,
        objectId: utilityScript._objectId,
        arguments: [{
          objectId: utilityScript._objectId
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId
        }))],
        returnByValue,
        awaitPromise: true,
        userGesture: true
      }).catch(rewriteError);
      if (exceptionDetails)
        throw new js.JavaScriptErrorInEvaluate((0, _crProtocolHelper.getExceptionMessage)(exceptionDetails));
      return returnByValue ? (0, _utilityScriptSerializers.parseEvaluationResultValue)(remoteObject.value) : utilityScript._context.createHandle(remoteObject);
    }
    async getProperties(context, objectId) {
      const response = await this._client.send("Runtime.getProperties", {
        objectId,
        ownProperties: true
      });
      const result = new Map;
      for (const property of response.result) {
        if (!property.enumerable || !property.value)
          continue;
        result.set(property.name, context.createHandle(property.value));
      }
      return result;
    }
    createHandle(context, remoteObject) {
      return new js.JSHandle(context, remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await (0, _crProtocolHelper.releaseObject)(this._client, objectId);
    }
  }
  exports.CRExecutionContext = CRExecutionContext;
  function rewriteError(error) {
    if (error.message.includes("Object reference chain is too long"))
      return {
        result: {
          type: "undefined"
        }
      };
    if (error.message.includes("Object couldn't be returned by value"))
      return {
        result: {
          type: "undefined"
        }
      };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
      (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  }
  function potentiallyUnserializableValue(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  }
  function renderPreview(object) {
    if (object.type === "undefined")
      return "undefined";
    if ("value" in object)
      return String(object.value);
    if (object.unserializableValue)
      return String(object.unserializableValue);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties)
        tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview)
      return js.sparseArrayToString(object.preview.properties);
    return object.description;
  }
});

// node_modules/playwright-core/lib/server/macEditingCommands.js
var require_macEditingCommands = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.macEditingCommands = undefined;
  var macEditingCommands = exports.macEditingCommands = {
    Backspace: "deleteBackward:",
    Enter: "insertNewline:",
    NumpadEnter: "insertNewline:",
    Escape: "cancelOperation:",
    ArrowUp: "moveUp:",
    ArrowDown: "moveDown:",
    ArrowLeft: "moveLeft:",
    ArrowRight: "moveRight:",
    F5: "complete:",
    Delete: "deleteForward:",
    Home: "scrollToBeginningOfDocument:",
    End: "scrollToEndOfDocument:",
    PageUp: "scrollPageUp:",
    PageDown: "scrollPageDown:",
    "Shift+Backspace": "deleteBackward:",
    "Shift+Enter": "insertNewline:",
    "Shift+NumpadEnter": "insertNewline:",
    "Shift+Escape": "cancelOperation:",
    "Shift+ArrowUp": "moveUpAndModifySelection:",
    "Shift+ArrowDown": "moveDownAndModifySelection:",
    "Shift+ArrowLeft": "moveLeftAndModifySelection:",
    "Shift+ArrowRight": "moveRightAndModifySelection:",
    "Shift+F5": "complete:",
    "Shift+Delete": "deleteForward:",
    "Shift+Home": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+End": "moveToEndOfDocumentAndModifySelection:",
    "Shift+PageUp": "pageUpAndModifySelection:",
    "Shift+PageDown": "pageDownAndModifySelection:",
    "Shift+Numpad5": "delete:",
    "Control+Tab": "selectNextKeyView:",
    "Control+Enter": "insertLineBreak:",
    "Control+NumpadEnter": "insertLineBreak:",
    "Control+Quote": "insertSingleQuoteIgnoringSubstitution:",
    "Control+KeyA": "moveToBeginningOfParagraph:",
    "Control+KeyB": "moveBackward:",
    "Control+KeyD": "deleteForward:",
    "Control+KeyE": "moveToEndOfParagraph:",
    "Control+KeyF": "moveForward:",
    "Control+KeyH": "deleteBackward:",
    "Control+KeyK": "deleteToEndOfParagraph:",
    "Control+KeyL": "centerSelectionInVisibleArea:",
    "Control+KeyN": "moveDown:",
    "Control+KeyO": ["insertNewlineIgnoringFieldEditor:", "moveBackward:"],
    "Control+KeyP": "moveUp:",
    "Control+KeyT": "transpose:",
    "Control+KeyV": "pageDown:",
    "Control+KeyY": "yank:",
    "Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Control+ArrowUp": "scrollPageUp:",
    "Control+ArrowDown": "scrollPageDown:",
    "Control+ArrowLeft": "moveToLeftEndOfLine:",
    "Control+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Control+Enter": "insertLineBreak:",
    "Shift+Control+NumpadEnter": "insertLineBreak:",
    "Shift+Control+Tab": "selectPreviousKeyView:",
    "Shift+Control+Quote": "insertDoubleQuoteIgnoringSubstitution:",
    "Shift+Control+KeyA": "moveToBeginningOfParagraphAndModifySelection:",
    "Shift+Control+KeyB": "moveBackwardAndModifySelection:",
    "Shift+Control+KeyE": "moveToEndOfParagraphAndModifySelection:",
    "Shift+Control+KeyF": "moveForwardAndModifySelection:",
    "Shift+Control+KeyN": "moveDownAndModifySelection:",
    "Shift+Control+KeyP": "moveUpAndModifySelection:",
    "Shift+Control+KeyV": "pageDownAndModifySelection:",
    "Shift+Control+Backspace": "deleteBackwardByDecomposingPreviousCharacter:",
    "Shift+Control+ArrowUp": "scrollPageUp:",
    "Shift+Control+ArrowDown": "scrollPageDown:",
    "Shift+Control+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Control+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Alt+Backspace": "deleteWordBackward:",
    "Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Alt+Escape": "complete:",
    "Alt+ArrowUp": ["moveBackward:", "moveToBeginningOfParagraph:"],
    "Alt+ArrowDown": ["moveForward:", "moveToEndOfParagraph:"],
    "Alt+ArrowLeft": "moveWordLeft:",
    "Alt+ArrowRight": "moveWordRight:",
    "Alt+Delete": "deleteWordForward:",
    "Alt+PageUp": "pageUp:",
    "Alt+PageDown": "pageDown:",
    "Shift+Alt+Backspace": "deleteWordBackward:",
    "Shift+Alt+Enter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+NumpadEnter": "insertNewlineIgnoringFieldEditor:",
    "Shift+Alt+Escape": "complete:",
    "Shift+Alt+ArrowUp": "moveParagraphBackwardAndModifySelection:",
    "Shift+Alt+ArrowDown": "moveParagraphForwardAndModifySelection:",
    "Shift+Alt+ArrowLeft": "moveWordLeftAndModifySelection:",
    "Shift+Alt+ArrowRight": "moveWordRightAndModifySelection:",
    "Shift+Alt+Delete": "deleteWordForward:",
    "Shift+Alt+PageUp": "pageUp:",
    "Shift+Alt+PageDown": "pageDown:",
    "Control+Alt+KeyB": "moveWordBackward:",
    "Control+Alt+KeyF": "moveWordForward:",
    "Control+Alt+Backspace": "deleteWordBackward:",
    "Shift+Control+Alt+KeyB": "moveWordBackwardAndModifySelection:",
    "Shift+Control+Alt+KeyF": "moveWordForwardAndModifySelection:",
    "Shift+Control+Alt+Backspace": "deleteWordBackward:",
    "Meta+NumpadSubtract": "cancel:",
    "Meta+Backspace": "deleteToBeginningOfLine:",
    "Meta+ArrowUp": "moveToBeginningOfDocument:",
    "Meta+ArrowDown": "moveToEndOfDocument:",
    "Meta+ArrowLeft": "moveToLeftEndOfLine:",
    "Meta+ArrowRight": "moveToRightEndOfLine:",
    "Shift+Meta+NumpadSubtract": "cancel:",
    "Shift+Meta+Backspace": "deleteToBeginningOfLine:",
    "Shift+Meta+ArrowUp": "moveToBeginningOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowDown": "moveToEndOfDocumentAndModifySelection:",
    "Shift+Meta+ArrowLeft": "moveToLeftEndOfLineAndModifySelection:",
    "Shift+Meta+ArrowRight": "moveToRightEndOfLineAndModifySelection:",
    "Meta+KeyA": "selectAll:",
    "Meta+KeyC": "copy:",
    "Meta+KeyX": "cut:",
    "Meta+KeyV": "paste:",
    "Meta+KeyZ": "undo:",
    "Shift+Meta+KeyZ": "redo:"
  };
});

// node_modules/playwright-core/lib/server/chromium/crInput.js
var require_crInput = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var input = _interopRequireWildcard(require_input());
  var _macEditingCommands = require_macEditingCommands();
  var _utils = require_utils();
  var _crProtocolHelper = require_crProtocolHelper();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class RawKeyboardImpl {
    constructor(_client, _isMac, _dragManger) {
      this._client = _client;
      this._isMac = _isMac;
      this._dragManger = _dragManger;
    }
    _commandsForCode(code, modifiers) {
      if (!this._isMac)
        return [];
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier))
          parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut] || [];
      if ((0, _utils.isString)(commands))
        commands = [commands];
      commands = commands.filter((x) => !x.startsWith("insert"));
      return commands.map((c) => c.substring(0, c.length - 1));
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      if (code === "Escape" && await this._dragManger.cancelDrag())
        return;
      const commands = this._commandsForCode(code, modifiers);
      await this._client.send("Input.dispatchKeyEvent", {
        type: text ? "keyDown" : "rawKeyDown",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        windowsVirtualKeyCode: keyCodeWithoutLocation,
        code,
        commands,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        location: location2,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._client.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        key,
        windowsVirtualKeyCode: keyCodeWithoutLocation,
        code,
        location: location2
      });
    }
    async sendText(text) {
      await this._client.send("Input.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(page, client, dragManager) {
      this._client = undefined;
      this._page = undefined;
      this._dragManager = undefined;
      this._page = page;
      this._client = client;
      this._dragManager = dragManager;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      const actualMove = async () => {
        await this._client.send("Input.dispatchMouseEvent", {
          type: "mouseMoved",
          button,
          buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
          x,
          y,
          modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers)
        });
      };
      if (forClick) {
        return actualMove();
      }
      await this._dragManager.interceptDragCausedByMove(x, y, button, buttons, modifiers, actualMove);
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging())
        return;
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mousePressed",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      if (this._dragManager.isDragging()) {
        await this._dragManager.drop(x, y, modifiers);
        return;
      }
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseReleased",
        button,
        buttons: (0, _crProtocolHelper.toButtonsMask)(buttons),
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      await this._client.send("Input.dispatchMouseEvent", {
        type: "mouseWheel",
        x,
        y,
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        deltaX,
        deltaY
      });
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async tap(x, y, modifiers) {
      await Promise.all([this._client.send("Input.dispatchTouchEvent", {
        type: "touchStart",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: [{
          x,
          y
        }]
      }), this._client.send("Input.dispatchTouchEvent", {
        type: "touchEnd",
        modifiers: (0, _crProtocolHelper.toModifiersMask)(modifiers),
        touchPoints: []
      })]);
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/chromium/crNetworkManager.js
var require_crNetworkManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRNetworkManager = undefined;
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils();
  var _protocolError = require_protocolError();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class CRNetworkManager {
    constructor(page, serviceWorker) {
      this._page = undefined;
      this._serviceWorker = undefined;
      this._requestIdToRequest = new Map;
      this._requestIdToRequestWillBeSentEvent = new Map;
      this._credentials = null;
      this._attemptedAuthentications = new Set;
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._offline = false;
      this._extraHTTPHeaders = [];
      this._requestIdToRequestPausedEvent = new Map;
      this._responseExtraInfoTracker = new ResponseExtraInfoTracker;
      this._sessions = new Map;
      this._page = page;
      this._serviceWorker = serviceWorker;
    }
    async addSession(session, workerFrame, isMain) {
      const sessionInfo = {
        session,
        isMain,
        workerFrame,
        eventListeners: []
      };
      sessionInfo.eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Fetch.requestPaused", this._onRequestPaused.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Fetch.authRequired", this._onAuthRequired.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSentExtraInfo", this._onRequestWillBeSentExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestServedFromCache", this._onRequestServedFromCache.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceivedExtraInfo", this._onResponseReceivedExtraInfo.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", this._onLoadingFinished.bind(this, sessionInfo)), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", this._onLoadingFailed.bind(this, sessionInfo))];
      if (this._page) {
        sessionInfo.eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper.eventsHelper.addEventListener(session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))]);
      }
      this._sessions.set(session, sessionInfo);
      await Promise.all([session.send("Network.enable"), this._updateProtocolRequestInterceptionForSession(sessionInfo, true), this._setOfflineForSession(sessionInfo, true), this._setExtraHTTPHeadersForSession(sessionInfo, true)]);
    }
    removeSession(session) {
      const info = this._sessions.get(session);
      if (info)
        _eventsHelper.eventsHelper.removeEventListeners(info.eventListeners);
      this._sessions.delete(session);
    }
    async _forEachSession(cb) {
      await Promise.all([...this._sessions.values()].map((info) => {
        if (info.isMain)
          return cb(info);
        return cb(info).catch((e) => {
          if ((0, _protocolError.isSessionClosedError)(e))
            return;
          throw e;
        });
      }));
    }
    async authenticate(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async setOffline(offline) {
      if (offline === this._offline)
        return;
      this._offline = offline;
      await this._forEachSession((info) => this._setOfflineForSession(info));
    }
    async _setOfflineForSession(info, initial) {
      if (initial && !this._offline)
        return;
      if (info.workerFrame)
        return;
      await info.session.send("Network.emulateNetworkConditions", {
        offline: this._offline,
        latency: 0,
        downloadThroughput: -1,
        uploadThroughput: -1
      });
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception() {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled)
        return;
      this._protocolRequestInterceptionEnabled = enabled;
      await this._forEachSession((info) => this._updateProtocolRequestInterceptionForSession(info));
    }
    async _updateProtocolRequestInterceptionForSession(info, initial) {
      const enabled = this._protocolRequestInterceptionEnabled;
      if (initial && !enabled)
        return;
      const cachePromise = info.session.send("Network.setCacheDisabled", {
        cacheDisabled: enabled
      });
      let fetchPromise = Promise.resolve(undefined);
      if (!info.workerFrame) {
        if (enabled)
          fetchPromise = info.session.send("Fetch.enable", {
            handleAuthRequests: true,
            patterns: [{
              urlPattern: "*",
              requestStage: "Request"
            }]
          });
        else
          fetchPromise = info.session.send("Fetch.disable");
      }
      await Promise.all([cachePromise, fetchPromise]);
    }
    async setExtraHTTPHeaders(extraHTTPHeaders) {
      if (!this._extraHTTPHeaders.length && !extraHTTPHeaders.length)
        return;
      this._extraHTTPHeaders = extraHTTPHeaders;
      await this._forEachSession((info) => this._setExtraHTTPHeadersForSession(info));
    }
    async _setExtraHTTPHeadersForSession(info, initial) {
      if (initial && !this._extraHTTPHeaders.length)
        return;
      await info.session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._extraHTTPHeaders, false)
      });
    }
    async clearCache() {
      await this._forEachSession(async (info) => {
        await info.session.send("Network.setCacheDisabled", {
          cacheDisabled: true
        });
        if (!this._protocolRequestInterceptionEnabled)
          await info.session.send("Network.setCacheDisabled", {
            cacheDisabled: false
          });
        if (!info.workerFrame)
          await info.session.send("Network.clearBrowserCache");
      });
    }
    _onRequestWillBeSent(sessionInfo, event) {
      if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith("data:")) {
        const requestId = event.requestId;
        const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);
        if (requestPausedEvent) {
          this._onRequest(sessionInfo, event, requestPausedEvent.sessionInfo, requestPausedEvent.event);
          this._requestIdToRequestPausedEvent.delete(requestId);
        } else {
          this._requestIdToRequestWillBeSentEvent.set(event.requestId, {
            sessionInfo,
            event
          });
        }
      } else {
        this._onRequest(sessionInfo, event, undefined, undefined);
      }
    }
    _onRequestServedFromCache(event) {
      this._responseExtraInfoTracker.requestServedFromCache(event);
    }
    _onRequestWillBeSentExtraInfo(event) {
      this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);
    }
    _onAuthRequired(sessionInfo, event) {
      let response = "Default";
      const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);
      if (this._attemptedAuthentications.has(event.requestId)) {
        response = "CancelAuth";
      } else if (shouldProvideCredentials) {
        response = "ProvideCredentials";
        this._attemptedAuthentications.add(event.requestId);
      }
      const {
        username,
        password
      } = shouldProvideCredentials && this._credentials ? this._credentials : {
        username: undefined,
        password: undefined
      };
      sessionInfo.session._sendMayFail("Fetch.continueWithAuth", {
        requestId: event.requestId,
        authChallengeResponse: {
          response,
          username,
          password
        }
      });
    }
    _shouldProvideCredentials(url) {
      if (!this._credentials)
        return false;
      return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();
    }
    _onRequestPaused(sessionInfo, event) {
      if (!event.networkId) {
        sessionInfo.session._sendMayFail("Fetch.continueRequest", {
          requestId: event.requestId
        });
        return;
      }
      if (event.request.url.startsWith("data:"))
        return;
      const requestId = event.networkId;
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);
      if (requestWillBeSentEvent) {
        this._onRequest(requestWillBeSentEvent.sessionInfo, requestWillBeSentEvent.event, sessionInfo, event);
        this._requestIdToRequestWillBeSentEvent.delete(requestId);
      } else {
        var _existingRequest$_rou;
        const existingRequest = this._requestIdToRequest.get(requestId);
        const alreadyContinuedParams = existingRequest === null || existingRequest === undefined || (_existingRequest$_rou = existingRequest._route) === null || _existingRequest$_rou === undefined ? undefined : _existingRequest$_rou._alreadyContinuedParams;
        if (alreadyContinuedParams && !event.redirectedRequestId) {
          sessionInfo.session._sendMayFail("Fetch.continueRequest", {
            ...alreadyContinuedParams,
            requestId: event.requestId
          });
          return;
        }
        this._requestIdToRequestPausedEvent.set(requestId, {
          sessionInfo,
          event
        });
      }
    }
    _onRequest(requestWillBeSentSessionInfo, requestWillBeSentEvent, requestPausedSessionInfo, requestPausedEvent) {
      var _this$_page, _this$_page2, _this$_page3;
      if (requestWillBeSentEvent.request.url.startsWith("data:"))
        return;
      let redirectedFrom = null;
      if (requestWillBeSentEvent.redirectResponse) {
        const request2 = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);
          redirectedFrom = request2;
        }
      }
      let frame = requestWillBeSentEvent.frameId ? (_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page._frameManager.frame(requestWillBeSentEvent.frameId) : requestWillBeSentSessionInfo.workerFrame;
      if (!frame && this._page && requestPausedEvent && requestPausedEvent.frameId)
        frame = this._page._frameManager.frame(requestPausedEvent.frameId);
      if (!frame && this._page && requestWillBeSentEvent.frameId === ((_this$_page2 = this._page) === null || _this$_page2 === undefined ? undefined : _this$_page2._delegate)._targetId) {
        frame = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);
      }
      const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === "OPTIONS" && requestWillBeSentEvent.initiator.type === "preflight";
      if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker).needsRequestInterception()) {
        const requestHeaders = requestPausedEvent.request.headers;
        const responseHeaders = [{
          name: "Access-Control-Allow-Origin",
          value: requestHeaders["Origin"] || "*"
        }, {
          name: "Access-Control-Allow-Methods",
          value: requestHeaders["Access-Control-Request-Method"] || "GET, POST, OPTIONS, DELETE"
        }, {
          name: "Access-Control-Allow-Credentials",
          value: "true"
        }];
        if (requestHeaders["Access-Control-Request-Headers"])
          responseHeaders.push({
            name: "Access-Control-Allow-Headers",
            value: requestHeaders["Access-Control-Request-Headers"]
          });
        requestPausedSessionInfo.session._sendMayFail("Fetch.fulfillRequest", {
          requestId: requestPausedEvent.requestId,
          responseCode: 204,
          responsePhrase: network.statusText(204),
          responseHeaders,
          body: ""
        });
        return;
      }
      if (!frame && !this._serviceWorker) {
        if (requestPausedEvent)
          requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId
          });
        return;
      }
      let route = null;
      let headersOverride;
      if (requestPausedEvent) {
        if (redirectedFrom || !this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {
          var _redirectedFrom;
          headersOverride = (_redirectedFrom = redirectedFrom) === null || _redirectedFrom === undefined || (_redirectedFrom = _redirectedFrom._originalRequestRoute) === null || _redirectedFrom === undefined || (_redirectedFrom = _redirectedFrom._alreadyContinuedParams) === null || _redirectedFrom === undefined ? undefined : _redirectedFrom.headers;
          requestPausedSessionInfo.session._sendMayFail("Fetch.continueRequest", {
            requestId: requestPausedEvent.requestId,
            headers: headersOverride
          });
        } else {
          route = new RouteImpl(requestPausedSessionInfo.session, requestPausedEvent.requestId);
        }
      }
      const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === "Document";
      const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : undefined;
      const request = new InterceptableRequest({
        session: requestWillBeSentSessionInfo.session,
        context: (this._page || this._serviceWorker)._browserContext,
        frame: frame || null,
        serviceWorker: this._serviceWorker || null,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        headersOverride: headersOverride || null
      });
      this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);
      if (route) {
        request.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(requestPausedEvent.request.headers, `
`));
      }
      (((_this$_page3 = this._page) === null || _this$_page3 === undefined ? undefined : _this$_page3._frameManager) || this._serviceWorker).requestStarted(request.request, route || undefined);
    }
    _createResponse(request, responsePayload, hasExtraInfo) {
      var _responsePayload$secu, _responsePayload$secu2, _responsePayload$secu3, _responsePayload$secu4, _responsePayload$secu5;
      const getResponseBody = async () => {
        var _request$_route;
        const contentLengthHeader = Object.entries(responsePayload.headers).find((header) => header[0].toLowerCase() === "content-length");
        const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : undefined;
        const session = request.session;
        const response2 = await session.send("Network.getResponseBody", {
          requestId: request._requestId
        });
        if (response2.body || !expectedLength)
          return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
        if ((_request$_route = request._route) !== null && _request$_route !== undefined && _request$_route._fulfilled)
          return Buffer.from("");
        const resource = await session.send("Network.loadNetworkResource", {
          url: request.request.url(),
          frameId: this._serviceWorker ? undefined : request.request.frame()._id,
          options: {
            disableCache: false,
            includeCredentials: true
          }
        });
        const chunks = [];
        while (resource.resource.stream) {
          const chunk = await session.send("IO.read", {
            handle: resource.resource.stream
          });
          chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? "base64" : "utf-8"));
          if (chunk.eof) {
            await session.send("IO.close", {
              handle: resource.resource.stream
            });
            break;
          }
        }
        return Buffer.concat(chunks);
      };
      const timingPayload = responsePayload.timing;
      let timing;
      if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request._requestId)) {
        timing = {
          startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1000,
          domainLookupStart: timingPayload.dnsStart,
          domainLookupEnd: timingPayload.dnsEnd,
          connectStart: timingPayload.connectStart,
          secureConnectionStart: timingPayload.sslStart,
          connectEnd: timingPayload.connectEnd,
          requestStart: timingPayload.sendStart,
          responseStart: timingPayload.receiveHeadersEnd
        };
      } else {
        timing = {
          startTime: request._wallTime * 1000,
          domainLookupStart: -1,
          domainLookupEnd: -1,
          connectStart: -1,
          secureConnectionStart: -1,
          connectEnd: -1,
          requestStart: -1,
          responseStart: -1
        };
      }
      const response = new network.Response(request.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);
      if (responsePayload !== null && responsePayload !== undefined && responsePayload.remoteIPAddress && typeof (responsePayload === null || responsePayload === undefined ? undefined : responsePayload.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: responsePayload.remoteIPAddress,
          port: responsePayload.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: responsePayload === null || responsePayload === undefined || (_responsePayload$secu = responsePayload.securityDetails) === null || _responsePayload$secu === undefined ? undefined : _responsePayload$secu.protocol,
        subjectName: responsePayload === null || responsePayload === undefined || (_responsePayload$secu2 = responsePayload.securityDetails) === null || _responsePayload$secu2 === undefined ? undefined : _responsePayload$secu2.subjectName,
        issuer: responsePayload === null || responsePayload === undefined || (_responsePayload$secu3 = responsePayload.securityDetails) === null || _responsePayload$secu3 === undefined ? undefined : _responsePayload$secu3.issuer,
        validFrom: responsePayload === null || responsePayload === undefined || (_responsePayload$secu4 = responsePayload.securityDetails) === null || _responsePayload$secu4 === undefined ? undefined : _responsePayload$secu4.validFrom,
        validTo: responsePayload === null || responsePayload === undefined || (_responsePayload$secu5 = responsePayload.securityDetails) === null || _responsePayload$secu5 === undefined ? undefined : _responsePayload$secu5.validTo
      });
      this._responseExtraInfoTracker.processResponse(request._requestId, response, hasExtraInfo);
      return response;
    }
    _deleteRequest(request) {
      this._requestIdToRequest.delete(request._requestId);
      if (request._interceptionId)
        this._attemptedAuthentications.delete(request._interceptionId);
    }
    _handleRequestRedirect(request, responsePayload, timestamp, hasExtraInfo) {
      var _this$_page4, _this$_page5;
      const response = this._createResponse(request, responsePayload, hasExtraInfo);
      response.setTransferSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished((timestamp - request._timestamp) * 1000);
      this._deleteRequest(request);
      (((_this$_page4 = this._page) === null || _this$_page4 === undefined ? undefined : _this$_page4._frameManager) || this._serviceWorker).requestReceivedResponse(response);
      (((_this$_page5 = this._page) === null || _this$_page5 === undefined ? undefined : _this$_page5._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onResponseReceivedExtraInfo(event) {
      this._responseExtraInfoTracker.responseReceivedExtraInfo(event);
    }
    _onResponseReceived(sessionInfo, event) {
      var _this$_page6;
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request && event.response.fromServiceWorker) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, undefined, undefined);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request)
        return;
      const response = this._createResponse(request, event.response, event.hasExtraInfo);
      (((_this$_page6 = this._page) === null || _this$_page6 === undefined ? undefined : _this$_page6._frameManager) || this._serviceWorker).requestReceivedResponse(response);
    }
    _onLoadingFinished(sessionInfo, event) {
      var _this$_page7;
      this._responseExtraInfoTracker.loadingFinished(event);
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(event.encodedDataLength);
        response.responseHeadersSize().then((size) => response.setEncodedBodySize(event.encodedDataLength - size));
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      }
      this._deleteRequest(request);
      (((_this$_page7 = this._page) === null || _this$_page7 === undefined ? undefined : _this$_page7._frameManager) || this._serviceWorker).reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(sessionInfo, event) {
      var _this$_page8;
      this._responseExtraInfoTracker.loadingFailed(event);
      let request = this._requestIdToRequest.get(event.requestId);
      if (!request) {
        const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
        if (requestWillBeSentEvent) {
          this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
          this._onRequest(sessionInfo, requestWillBeSentEvent.event, undefined, undefined);
          request = this._requestIdToRequest.get(event.requestId);
        }
      }
      if (!request)
        return;
      this._maybeUpdateOOPIFMainRequest(sessionInfo, request);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._deleteRequest(request);
      request.request._setFailureText(event.errorText || event.blockedReason || "");
      (((_this$_page8 = this._page) === null || _this$_page8 === undefined ? undefined : _this$_page8._frameManager) || this._serviceWorker).requestFailed(request.request, !!event.canceled);
    }
    _maybeUpdateOOPIFMainRequest(sessionInfo, request) {
      if (request.session !== sessionInfo.session && !sessionInfo.isMain && request._documentId === request._requestId)
        request.session = sessionInfo.session;
    }
  }
  exports.CRNetworkManager = CRNetworkManager;

  class InterceptableRequest {
    constructor(options) {
      this.request = undefined;
      this._requestId = undefined;
      this._interceptionId = undefined;
      this._documentId = undefined;
      this._timestamp = undefined;
      this._wallTime = undefined;
      this._route = undefined;
      this._originalRequestRoute = undefined;
      this.session = undefined;
      const {
        session,
        context,
        frame,
        documentId,
        route,
        requestWillBeSentEvent,
        requestPausedEvent,
        redirectedFrom,
        serviceWorker,
        headersOverride
      } = options;
      this.session = session;
      this._timestamp = requestWillBeSentEvent.timestamp;
      this._wallTime = requestWillBeSentEvent.wallTime;
      this._requestId = requestWillBeSentEvent.requestId;
      this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;
      this._documentId = documentId;
      this._route = route;
      this._originalRequestRoute = route !== null && route !== undefined ? route : redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom._originalRequestRoute;
      const {
        headers,
        method,
        url,
        postDataEntries = null
      } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;
      const type = (requestWillBeSentEvent.type || "").toLowerCase();
      let postDataBuffer = null;
      const entries = postDataEntries === null || postDataEntries === undefined ? undefined : postDataEntries.filter((entry) => entry.bytes);
      if (entries && entries.length)
        postDataBuffer = Buffer.concat(entries.map((entry) => Buffer.from(entry.bytes, "base64")));
      this.request = new network.Request(context, frame, serviceWorker, (redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom.request) || null, documentId, url, type, method, postDataBuffer, headersOverride || (0, _utils.headersObjectToArray)(headers));
    }
  }

  class RouteImpl {
    constructor(session, interceptionId) {
      this._session = undefined;
      this._interceptionId = undefined;
      this._alreadyContinuedParams = undefined;
      this._fulfilled = false;
      this._session = session;
      this._interceptionId = interceptionId;
    }
    async continue(overrides) {
      this._alreadyContinuedParams = {
        requestId: this._interceptionId,
        url: overrides.url,
        headers: overrides.headers,
        method: overrides.method,
        postData: overrides.postData ? overrides.postData.toString("base64") : undefined
      };
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.continueRequest", this._alreadyContinuedParams);
      });
    }
    async fulfill(response) {
      this._fulfilled = true;
      const body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      const responseHeaders = splitSetCookieHeader(response.headers);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.fulfillRequest", {
          requestId: this._interceptionId,
          responseCode: response.status,
          responsePhrase: network.statusText(response.status),
          responseHeaders,
          body
        });
      });
    }
    async abort(errorCode = "failed") {
      const errorReason = errorReasons[errorCode];
      (0, _utils.assert)(errorReason, "Unknown error code: " + errorCode);
      await catchDisallowedErrors(async () => {
        await this._session.send("Fetch.failRequest", {
          requestId: this._interceptionId,
          errorReason
        });
      });
    }
  }
  async function catchDisallowedErrors(callback) {
    try {
      return await callback();
    } catch (e) {
      if ((0, _protocolError.isProtocolError)(e) && e.message.includes("Invalid http status code or phrase"))
        throw e;
    }
  }
  function splitSetCookieHeader(headers) {
    const index = headers.findIndex(({
      name
    }) => name.toLowerCase() === "set-cookie");
    if (index === -1)
      return headers;
    const header = headers[index];
    const values = header.value.split(`
`);
    if (values.length === 1)
      return headers;
    const result = headers.slice();
    result.splice(index, 1, ...values.map((value) => ({
      name: header.name,
      value
    })));
    return result;
  }
  var errorReasons = {
    aborted: "Aborted",
    accessdenied: "AccessDenied",
    addressunreachable: "AddressUnreachable",
    blockedbyclient: "BlockedByClient",
    blockedbyresponse: "BlockedByResponse",
    connectionaborted: "ConnectionAborted",
    connectionclosed: "ConnectionClosed",
    connectionfailed: "ConnectionFailed",
    connectionrefused: "ConnectionRefused",
    connectionreset: "ConnectionReset",
    internetdisconnected: "InternetDisconnected",
    namenotresolved: "NameNotResolved",
    timedout: "TimedOut",
    failed: "Failed"
  };

  class ResponseExtraInfoTracker {
    constructor() {
      this._requests = new Map;
    }
    requestWillBeSentExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.requestWillBeSentExtraInfo.push(event);
      this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);
      this._checkFinished(info);
    }
    requestServedFromCache(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.servedFromCache = true;
    }
    servedFromCache(requestId) {
      const info = this._requests.get(requestId);
      return !!(info !== null && info !== undefined && info.servedFromCache);
    }
    responseReceivedExtraInfo(event) {
      const info = this._getOrCreateEntry(event.requestId);
      info.responseReceivedExtraInfo.push(event);
      this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);
      this._checkFinished(info);
    }
    processResponse(requestId, response, hasExtraInfo) {
      var _info;
      let info = this._requests.get(requestId);
      if (!hasExtraInfo || (_info = info) !== null && _info !== undefined && _info.servedFromCache) {
        response.request().setRawRequestHeaders(null);
        response.setResponseHeadersSize(null);
        response.setRawResponseHeaders(null);
        return;
      }
      info = this._getOrCreateEntry(requestId);
      info.responses.push(response);
      this._patchHeaders(info, info.responses.length - 1);
    }
    loadingFinished(event) {
      const info = this._requests.get(event.requestId);
      if (!info)
        return;
      info.loadingFinished = event;
      this._checkFinished(info);
    }
    loadingFailed(event) {
      const info = this._requests.get(event.requestId);
      if (!info)
        return;
      info.loadingFailed = event;
      this._checkFinished(info);
    }
    _getOrCreateEntry(requestId) {
      let info = this._requests.get(requestId);
      if (!info) {
        info = {
          requestId,
          requestWillBeSentExtraInfo: [],
          responseReceivedExtraInfo: [],
          responses: []
        };
        this._requests.set(requestId, info);
      }
      return info;
    }
    _patchHeaders(info, index) {
      const response = info.responses[index];
      const requestExtraInfo = info.requestWillBeSentExtraInfo[index];
      if (response && requestExtraInfo) {
        response.request().setRawRequestHeaders((0, _utils.headersObjectToArray)(requestExtraInfo.headers, `
`));
        info.requestWillBeSentExtraInfo[index] = undefined;
      }
      const responseExtraInfo = info.responseReceivedExtraInfo[index];
      if (response && responseExtraInfo) {
        var _responseExtraInfo$he;
        response.setResponseHeadersSize(((_responseExtraInfo$he = responseExtraInfo.headersText) === null || _responseExtraInfo$he === undefined ? undefined : _responseExtraInfo$he.length) || 0);
        response.setRawResponseHeaders((0, _utils.headersObjectToArray)(responseExtraInfo.headers, `
`));
        info.responseReceivedExtraInfo[index] = undefined;
      }
    }
    _checkFinished(info) {
      if (!info.loadingFinished && !info.loadingFailed)
        return;
      if (info.responses.length <= info.responseReceivedExtraInfo.length) {
        this._stopTracking(info.requestId);
        return;
      }
    }
    _stopTracking(requestId) {
      this._requests.delete(requestId);
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crPdf.js
var require_crPdf = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRPDF = undefined;
  var _utils = require_utils();
  var _crProtocolHelper = require_crProtocolHelper();
  var PagePaperFormats = {
    letter: {
      width: 8.5,
      height: 11
    },
    legal: {
      width: 8.5,
      height: 14
    },
    tabloid: {
      width: 11,
      height: 17
    },
    ledger: {
      width: 17,
      height: 11
    },
    a0: {
      width: 33.1,
      height: 46.8
    },
    a1: {
      width: 23.4,
      height: 33.1
    },
    a2: {
      width: 16.54,
      height: 23.4
    },
    a3: {
      width: 11.7,
      height: 16.54
    },
    a4: {
      width: 8.27,
      height: 11.7
    },
    a5: {
      width: 5.83,
      height: 8.27
    },
    a6: {
      width: 4.13,
      height: 5.83
    }
  };
  var unitToPixels = {
    px: 1,
    in: 96,
    cm: 37.8,
    mm: 3.78
  };
  function convertPrintParameterToInches(text) {
    if (text === undefined)
      return;
    let unit = text.substring(text.length - 2).toLowerCase();
    let valueText = "";
    if (unitToPixels.hasOwnProperty(unit)) {
      valueText = text.substring(0, text.length - 2);
    } else {
      unit = "px";
      valueText = text;
    }
    const value = Number(valueText);
    (0, _utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
    const pixels = value * unitToPixels[unit];
    return pixels / 96;
  }

  class CRPDF {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async generate(options) {
      const {
        scale = 1,
        displayHeaderFooter = false,
        headerTemplate = "",
        footerTemplate = "",
        printBackground = false,
        landscape = false,
        pageRanges = "",
        preferCSSPageSize = false,
        margin = {},
        tagged = false,
        outline = false
      } = options;
      let paperWidth = 8.5;
      let paperHeight = 11;
      if (options.format) {
        const format = PagePaperFormats[options.format.toLowerCase()];
        (0, _utils.assert)(format, "Unknown paper format: " + options.format);
        paperWidth = format.width;
        paperHeight = format.height;
      } else {
        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
      }
      const marginTop = convertPrintParameterToInches(margin.top) || 0;
      const marginLeft = convertPrintParameterToInches(margin.left) || 0;
      const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;
      const marginRight = convertPrintParameterToInches(margin.right) || 0;
      const generateDocumentOutline = outline;
      const generateTaggedPDF = tagged;
      const result = await this._client.send("Page.printToPDF", {
        transferMode: "ReturnAsStream",
        landscape,
        displayHeaderFooter,
        headerTemplate,
        footerTemplate,
        printBackground,
        scale,
        paperWidth,
        paperHeight,
        marginTop,
        marginBottom,
        marginLeft,
        marginRight,
        pageRanges,
        preferCSSPageSize,
        generateTaggedPDF,
        generateDocumentOutline
      });
      return await (0, _crProtocolHelper.readProtocolStream)(this._client, result.stream);
    }
  }
  exports.CRPDF = CRPDF;
});

// node_modules/playwright-core/lib/server/chromium/defaultFontFamilies.js
var require_defaultFontFamilies = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.platformToFontFamilies = undefined;
  var platformToFontFamilies = exports.platformToFontFamilies = {
    linux: {
      fontFamilies: {
        standard: "Times New Roman",
        fixed: "Monospace",
        serif: "Times New Roman",
        sansSerif: "Arial",
        cursive: "Comic Sans MS",
        fantasy: "Impact"
      }
    },
    mac: {
      fontFamilies: {
        standard: "Times",
        fixed: "Courier",
        serif: "Times",
        sansSerif: "Helvetica",
        cursive: "Apple Chancery",
        fantasy: "Papyrus"
      },
      forScripts: [{
        script: "jpan",
        fontFamilies: {
          standard: "Hiragino Kaku Gothic ProN",
          fixed: "Osaka-Mono",
          serif: "Hiragino Mincho ProN",
          sansSerif: "Hiragino Kaku Gothic ProN"
        }
      }, {
        script: "hang",
        fontFamilies: {
          standard: "Apple SD Gothic Neo",
          serif: "AppleMyungjo",
          sansSerif: "Apple SD Gothic Neo"
        }
      }, {
        script: "hans",
        fontFamilies: {
          standard: ",PingFang SC,STHeiti",
          serif: "Songti SC",
          sansSerif: ",PingFang SC,STHeiti",
          cursive: "Kaiti SC"
        }
      }, {
        script: "hant",
        fontFamilies: {
          standard: ",PingFang TC,Heiti TC",
          serif: "Songti TC",
          sansSerif: ",PingFang TC,Heiti TC",
          cursive: "Kaiti TC"
        }
      }]
    },
    win: {
      fontFamilies: {
        standard: "Times New Roman",
        fixed: "Consolas",
        serif: "Times New Roman",
        sansSerif: "Arial",
        cursive: "Comic Sans MS",
        fantasy: "Impact"
      },
      forScripts: [{
        script: "cyrl",
        fontFamilies: {
          standard: "Times New Roman",
          fixed: "Courier New",
          serif: "Times New Roman",
          sansSerif: "Arial"
        }
      }, {
        script: "arab",
        fontFamilies: {
          fixed: "Courier New",
          sansSerif: "Segoe UI"
        }
      }, {
        script: "grek",
        fontFamilies: {
          standard: "Times New Roman",
          fixed: "Courier New",
          serif: "Times New Roman",
          sansSerif: "Arial"
        }
      }, {
        script: "jpan",
        fontFamilies: {
          standard: ",Meiryo,Yu Gothic",
          fixed: "MS Gothic",
          serif: ",Yu Mincho,MS PMincho",
          sansSerif: ",Meiryo,Yu Gothic"
        }
      }, {
        script: "hang",
        fontFamilies: {
          standard: "Malgun Gothic",
          fixed: "Gulimche",
          serif: "Batang",
          sansSerif: "Malgun Gothic",
          cursive: "Gungsuh"
        }
      }, {
        script: "hans",
        fontFamilies: {
          standard: "Microsoft YaHei",
          fixed: "NSimsun",
          serif: "Simsun",
          sansSerif: "Microsoft YaHei",
          cursive: "KaiTi"
        }
      }, {
        script: "hant",
        fontFamilies: {
          standard: "Microsoft JhengHei",
          fixed: "MingLiU",
          serif: "PMingLiU",
          sansSerif: "Microsoft JhengHei",
          cursive: "DFKai-SB"
        }
      }]
    }
  };
});

// node_modules/playwright-core/lib/server/chromium/videoRecorder.js
var require_videoRecorder = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.VideoRecorder = undefined;
  var _utils = require_utils();
  var _page = require_page();
  var _processLauncher = require_processLauncher();
  var _progress = require_progress();
  var _instrumentation = require_instrumentation();
  var fps = 25;

  class VideoRecorder {
    static async launch(page, ffmpegPath, options) {
      if (!options.outputFile.endsWith(".webm"))
        throw new Error("File must have .webm extension");
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), page);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        const recorder = new VideoRecorder(page, ffmpegPath, progress2);
        await recorder._launch(options);
        return recorder;
      });
    }
    constructor(page, ffmpegPath, progress2) {
      this._process = null;
      this._gracefullyClose = null;
      this._lastWritePromise = Promise.resolve();
      this._lastFrameTimestamp = 0;
      this._lastFrameBuffer = null;
      this._lastWriteTimestamp = 0;
      this._progress = undefined;
      this._frameQueue = [];
      this._isStopped = false;
      this._ffmpegPath = undefined;
      this._progress = progress2;
      this._ffmpegPath = ffmpegPath;
      page.on(_page.Page.Events.ScreencastFrame, (frame) => this.writeFrame(frame.buffer, frame.frameSwapWallTime / 1000));
    }
    async _launch(options) {
      const w = options.width;
      const h = options.height;
      const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i pipe:0 -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(" ");
      args.push(options.outputFile);
      const progress2 = this._progress;
      const {
        launchedProcess,
        gracefullyClose
      } = await (0, _processLauncher.launchProcess)({
        command: this._ffmpegPath,
        args,
        stdio: "stdin",
        log: (message) => progress2.log(message),
        tempDirectories: [],
        attemptToGracefullyClose: async () => {
          progress2.log("Closing stdin...");
          launchedProcess.stdin.end();
        },
        onExit: (exitCode, signal) => {
          progress2.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
        }
      });
      launchedProcess.stdin.on("finish", () => {
        progress2.log("ffmpeg finished input.");
      });
      launchedProcess.stdin.on("error", () => {
        progress2.log("ffmpeg error.");
      });
      this._process = launchedProcess;
      this._gracefullyClose = gracefullyClose;
    }
    writeFrame(frame, timestamp) {
      (0, _utils.assert)(this._process);
      if (this._isStopped)
        return;
      if (this._lastFrameBuffer) {
        const durationSec = timestamp - this._lastFrameTimestamp;
        const repeatCount = Math.max(1, Math.round(fps * durationSec));
        for (let i = 0;i < repeatCount; ++i)
          this._frameQueue.push(this._lastFrameBuffer);
        this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());
      }
      this._lastFrameBuffer = frame;
      this._lastFrameTimestamp = timestamp;
      this._lastWriteTimestamp = (0, _utils.monotonicTime)();
    }
    async _sendFrames() {
      while (this._frameQueue.length)
        await this._sendFrame(this._frameQueue.shift());
    }
    async _sendFrame(frame) {
      return new Promise((f) => this._process.stdin.write(frame, f)).then((error) => {
        if (error)
          this._progress.log(`ffmpeg failed to write: ${String(error)}`);
      });
    }
    async stop() {
      if (this._isStopped)
        return;
      this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, _utils.monotonicTime)() - this._lastWriteTimestamp) / 1000);
      this._isStopped = true;
      await this._lastWritePromise;
      await this._gracefullyClose();
    }
  }
  exports.VideoRecorder = VideoRecorder;
});

// node_modules/playwright-core/lib/server/chromium/crPage.js
var require_crPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRPage = undefined;
  var _path = _interopRequireDefault(__require("path"));
  var _eventsHelper = require_eventsHelper();
  var _registry = require_registry();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils();
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var frames = _interopRequireWildcard(require_frames());
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _crAccessibility = require_crAccessibility();
  var _crBrowser = require_crBrowser();
  var _crCoverage = require_crCoverage();
  var _crDragDrop = require_crDragDrop();
  var _crExecutionContext = require_crExecutionContext();
  var _crInput = require_crInput();
  var _crNetworkManager = require_crNetworkManager();
  var _crPdf = require_crPdf();
  var _crProtocolHelper = require_crProtocolHelper();
  var _defaultFontFamilies = require_defaultFontFamilies();
  var _videoRecorder = require_videoRecorder();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  var _protocolError = require_protocolError();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class CRPage {
    static mainFrameSession(page) {
      const crPage = page._delegate;
      return crPage._mainFrameSession;
    }
    constructor(client, targetId, browserContext, opener, bits) {
      this._mainFrameSession = undefined;
      this._sessions = new Map;
      this._page = undefined;
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._targetId = undefined;
      this._opener = undefined;
      this._networkManager = undefined;
      this._pdf = undefined;
      this._coverage = undefined;
      this._browserContext = undefined;
      this._pagePromise = undefined;
      this._initializedPage = null;
      this._isBackgroundPage = undefined;
      this._nextWindowOpenPopupFeatures = [];
      this._targetId = targetId;
      this._opener = opener;
      this._isBackgroundPage = bits.isBackgroundPage;
      const dragManager = new _crDragDrop.DragManager(this);
      this.rawKeyboard = new _crInput.RawKeyboardImpl(client, browserContext._browser._platform() === "mac", dragManager);
      this.rawMouse = new _crInput.RawMouseImpl(this, client, dragManager);
      this.rawTouchscreen = new _crInput.RawTouchscreenImpl(client);
      this._pdf = new _crPdf.CRPDF(client);
      this._coverage = new _crCoverage.CRCoverage(client);
      this._browserContext = browserContext;
      this._page = new _page.Page(this, browserContext);
      this._networkManager = new _crNetworkManager.CRNetworkManager(this._page, null);
      this.updateOffline();
      this.updateExtraHTTPHeaders();
      this.updateHttpCredentials();
      this.updateRequestInterception();
      this._mainFrameSession = new FrameSession(this, client, targetId, null);
      this._sessions.set(targetId, this._mainFrameSession);
      if (opener && !browserContext._options.noDefaultViewport) {
        const features = opener._nextWindowOpenPopupFeatures.shift() || [];
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(features);
        if (viewportSize)
          this._page._emulatedSize = {
            viewport: viewportSize,
            screen: viewportSize
          };
      }
      this._pagePromise = this._mainFrameSession._initialize(bits.hasUIWindow).then(async (r) => {
        await this._page.initOpener(this._opener);
        return r;
      }).catch(async (e) => {
        await this._page.initOpener(this._opener);
        throw e;
      }).then(() => {
        this._initializedPage = this._page;
        this._reportAsNew();
        return this._page;
      }).catch((e) => {
        this._reportAsNew(e);
        return e;
      });
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    _reportAsNew(error) {
      this._page.reportAsNew(error, this._isBackgroundPage ? _crBrowser.CRBrowserContext.CREvents.BackgroundPage : _browserContext.BrowserContext.Events.Page);
    }
    async _forAllFrameSessions(cb) {
      const frameSessions = Array.from(this._sessions.values());
      await Promise.all(frameSessions.map((frameSession) => {
        if (frameSession._isMainFrame())
          return cb(frameSession);
        return cb(frameSession).catch((e) => {
          if ((0, _protocolError.isSessionClosedError)(e))
            return;
          throw e;
        });
      }));
    }
    _sessionForFrame(frame) {
      while (!this._sessions.has(frame._id)) {
        const parent = frame.parentFrame();
        if (!parent)
          throw new Error(`Frame has been detached.`);
        frame = parent;
      }
      return this._sessions.get(frame._id);
    }
    _sessionForHandle(handle) {
      const frame = handle._context.frame;
      return this._sessionForFrame(frame);
    }
    willBeginDownload() {
      this._mainFrameSession._willBeginDownload();
    }
    async pageOrError() {
      return this._pagePromise;
    }
    didClose() {
      for (const session of this._sessions.values())
        session.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame, url, referrer) {
      return this._sessionForFrame(frame)._navigate(frame, url, referrer);
    }
    async updateExtraHTTPHeaders() {
      const headers = network.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders()]);
      await this._networkManager.setExtraHTTPHeaders(headers);
    }
    async updateGeolocation() {
      await this._forAllFrameSessions((frame) => frame._updateGeolocation(false));
    }
    async updateOffline() {
      await this._networkManager.setOffline(!!this._browserContext._options.offline);
    }
    async updateHttpCredentials() {
      await this._networkManager.authenticate(this._browserContext._options.httpCredentials || null);
    }
    async updateEmulatedViewportSize(preserveWindowBoundaries) {
      await this._mainFrameSession._updateViewport(preserveWindowBoundaries);
    }
    async bringToFront() {
      await this._mainFrameSession._client.send("Page.bringToFront");
    }
    async updateEmulateMedia() {
      await this._forAllFrameSessions((frame) => frame._updateEmulateMedia());
    }
    async updateUserAgent() {
      await this._forAllFrameSessions((frame) => frame._updateUserAgent());
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      await this._forAllFrameSessions((frame) => frame._updateFileChooserInterception(false));
    }
    async reload() {
      await this._mainFrameSession._client.send("Page.reload");
    }
    async _go(delta) {
      const history = await this._mainFrameSession._client.send("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry)
        return false;
      await this._mainFrameSession._client.send("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
      return true;
    }
    goBack() {
      return this._go(-1);
    }
    goForward() {
      return this._go(1);
    }
    async requestGC() {
      await this._mainFrameSession._client.send("HeapProfiler.collectGarbage");
    }
    async addInitScript(initScript, world = "main") {
      await this._forAllFrameSessions((frame) => frame._evaluateOnNewDocument(initScript, world));
    }
    async removeNonInternalInitScripts() {
      await this._forAllFrameSessions((frame) => frame._removeEvaluatesOnNewDocument());
    }
    async closePage(runBeforeUnload) {
      if (runBeforeUnload)
        await this._mainFrameSession._client.send("Page.close");
      else
        await this._browserContext._browser._closePage(this);
    }
    async setBackgroundColor(color) {
      await this._mainFrameSession._client.send("Emulation.setDefaultBackgroundColorOverride", {
        color
      });
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const {
        visualViewport
      } = await this._mainFrameSession._client.send("Page.getLayoutMetrics");
      if (!documentRect) {
        documentRect = {
          x: visualViewport.pageX + viewportRect.x,
          y: visualViewport.pageY + viewportRect.y,
          ..._helper.helper.enclosingIntSize({
            width: viewportRect.width / visualViewport.scale,
            height: viewportRect.height / visualViewport.scale
          })
        };
      }
      const clip = {
        ...documentRect,
        scale: viewportRect ? visualViewport.scale : 1
      };
      if (scale === "css") {
        const deviceScaleFactor = this._browserContext._options.deviceScaleFactor || 1;
        clip.scale /= deviceScaleFactor;
      }
      progress2.throwIfAborted();
      const result = await this._mainFrameSession._client.send("Page.captureScreenshot", {
        format,
        quality,
        clip,
        captureBeyondViewport: !fitsViewport
      });
      return Buffer.from(result.data, "base64");
    }
    async getContentFrame(handle) {
      return this._sessionForHandle(handle)._getContentFrame(handle);
    }
    async getOwnerFrame(handle) {
      return this._sessionForHandle(handle)._getOwnerFrame(handle);
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      return this._sessionForHandle(handle)._getBoundingBox(handle);
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return this._sessionForHandle(handle)._scrollRectIntoViewIfNeeded(handle, rect);
    }
    async setScreencastOptions(options) {
      if (options) {
        await this._mainFrameSession._startScreencast(this, {
          format: "jpeg",
          quality: options.quality,
          maxWidth: options.width,
          maxHeight: options.height
        });
      } else {
        await this._mainFrameSession._stopScreencast(this);
      }
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      return this._sessionForHandle(handle)._getContentQuads(handle);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(handle, files) {
      const frame = await handle.ownerFrame();
      if (!frame)
        throw new Error("Cannot set input files to detached input element");
      const parentSession = this._sessionForFrame(frame);
      await parentSession._client.send("DOM.setFileInputFiles", {
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      return this._sessionForHandle(handle)._adoptElementHandle(handle, to);
    }
    async getAccessibilityTree(needle) {
      return (0, _crAccessibility.getAccessibilityTree)(this._mainFrameSession._client, needle);
    }
    async inputActionEpilogue() {
      await this._mainFrameSession._client.send("Page.enable").catch((e) => {
      });
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", new Set, new Set, true);
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    coverage() {
      return this._coverage;
    }
    async getFrameElement(frame) {
      let parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const parentSession = this._sessionForFrame(parent);
      const {
        backendNodeId
      } = await parentSession._client.send("DOM.getFrameOwner", {
        frameId: frame._id
      }).catch((e) => {
        if (e instanceof Error && e.message.includes("Frame with the given id was not found."))
          (0, _stackTrace.rewriteErrorMessage)(e, "Frame has been detached.");
        throw e;
      });
      parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      return parentSession._adoptBackendNodeId(backendNodeId, await parent._mainContext());
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  exports.CRPage = CRPage;

  class FrameSession {
    constructor(crPage, client, targetId, parentSession) {
      this._client = undefined;
      this._crPage = undefined;
      this._page = undefined;
      this._parentSession = undefined;
      this._childSessions = new Set;
      this._contextIdToContext = new Map;
      this._eventListeners = [];
      this._targetId = undefined;
      this._firstNonInitialNavigationCommittedPromise = undefined;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._windowId = undefined;
      this._swappedIn = false;
      this._videoRecorder = null;
      this._screencastId = null;
      this._screencastClients = new Set;
      this._evaluateOnNewDocumentIdentifiers = [];
      this._metricsOverride = undefined;
      this._workerSessions = new Map;
      this._client = client;
      this._crPage = crPage;
      this._page = crPage._page;
      this._targetId = targetId;
      this._parentSession = parentSession;
      if (parentSession)
        parentSession._childSessions.add(this);
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
    }
    _isMainFrame() {
      return this._targetId === this._crPage._targetId;
    }
    _addRendererListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Log.entryAdded", (event) => this._onLogEntryAdded(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId, event.reason)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.frameRequestedNavigation", (event) => this._onFrameRequestedNavigation(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.bindingCalled", (event) => this._onBindingCalled(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.exceptionThrown", (exception) => this._handleException(exception.exceptionDetails)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextDestroyed", (event) => this._onExecutionContextDestroyed(event.executionContextId)), _eventsHelper.eventsHelper.addEventListener(this._client, "Runtime.executionContextsCleared", (event) => this._onExecutionContextsCleared()), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.attachedToTarget", (event) => this._onAttachedToTarget(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Target.detachedFromTarget", (event) => this._onDetachedFromTarget(event))]);
    }
    _addBrowserListeners() {
      this._eventListeners.push(...[_eventsHelper.eventsHelper.addEventListener(this._client, "Inspector.targetCrashed", (event) => this._onTargetCrashed()), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.screencastFrame", (event) => this._onScreencastFrame(event)), _eventsHelper.eventsHelper.addEventListener(this._client, "Page.windowOpen", (event) => this._onWindowOpen(event))]);
    }
    async _initialize(hasUIWindow) {
      const isSettingStorageState = this._page._browserContext.isSettingStorageState();
      if (!isSettingStorageState && hasUIWindow && !this._crPage._browserContext._browser.isClank() && !this._crPage._browserContext._options.noDefaultViewport) {
        const {
          windowId
        } = await this._client.send("Browser.getWindowForTarget");
        this._windowId = windowId;
      }
      let screencastOptions;
      if (!isSettingStorageState && this._isMainFrame() && this._crPage._browserContext._options.recordVideo && hasUIWindow) {
        const screencastId = (0, _utils.createGuid)();
        const outputFile = _path.default.join(this._crPage._browserContext._options.recordVideo.dir, screencastId + ".webm");
        screencastOptions = {
          ...this._crPage._browserContext._options.recordVideo.size,
          outputFile
        };
        await this._crPage._browserContext._ensureVideosPath();
        await this._createVideoRecorder(screencastId, screencastOptions);
        this._crPage.pageOrError().then((p) => {
          if (p instanceof Error)
            this._stopVideoRecording().catch(() => {
            });
        });
      }
      let lifecycleEventsEnabled;
      if (!this._isMainFrame())
        this._addRendererListeners();
      this._addBrowserListeners();
      const promises = [this._client.send("Page.enable"), this._client.send("Page.getFrameTree").then(({
        frameTree
      }) => {
        if (this._isMainFrame()) {
          this._handleFrameTree(frameTree);
          this._addRendererListeners();
        }
        const localFrames = this._isMainFrame() ? this._page.frames() : [this._page._frameManager.frame(this._targetId)];
        for (const frame of localFrames) {
          this._client._sendMayFail("Page.createIsolatedWorld", {
            frameId: frame._id,
            grantUniveralAccess: true,
            worldName: UTILITY_WORLD_NAME
          });
          for (const initScript of this._crPage._page.allInitScripts())
            frame.evaluateExpression(initScript.source).catch((e) => {
            });
        }
        const isInitialEmptyPage = this._isMainFrame() && this._page.mainFrame().url() === ":";
        if (isInitialEmptyPage) {
          lifecycleEventsEnabled.catch((e) => {
          }).then(() => {
            this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
          });
        } else {
          this._firstNonInitialNavigationCommittedFulfill();
          this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(this._client, "Page.lifecycleEvent", (event) => this._onLifecycleEvent(event)));
        }
      }), this._client.send("Log.enable", {}), lifecycleEventsEnabled = this._client.send("Page.setLifecycleEventsEnabled", {
        enabled: true
      }), this._client.send("Runtime.enable", {}), this._client.send("Runtime.addBinding", {
        name: _page.PageBinding.kPlaywrightBinding
      }), this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: "",
        worldName: UTILITY_WORLD_NAME
      }), this._crPage._networkManager.addSession(this._client, undefined, this._isMainFrame()), this._client.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      })];
      if (!isSettingStorageState) {
        if (this._isMainFrame())
          promises.push(this._client.send("Emulation.setFocusEmulationEnabled", {
            enabled: true
          }));
        const options = this._crPage._browserContext._options;
        if (options.bypassCSP)
          promises.push(this._client.send("Page.setBypassCSP", {
            enabled: true
          }));
        if (options.ignoreHTTPSErrors || options.internalIgnoreHTTPSErrors)
          promises.push(this._client.send("Security.setIgnoreCertificateErrors", {
            ignore: true
          }));
        if (this._isMainFrame())
          promises.push(this._updateViewport());
        if (options.hasTouch)
          promises.push(this._client.send("Emulation.setTouchEmulationEnabled", {
            enabled: true
          }));
        if (options.javaScriptEnabled === false)
          promises.push(this._client.send("Emulation.setScriptExecutionDisabled", {
            value: true
          }));
        if (options.userAgent || options.locale)
          promises.push(this._updateUserAgent());
        if (options.locale)
          promises.push(emulateLocale(this._client, options.locale));
        if (options.timezoneId)
          promises.push(emulateTimezone(this._client, options.timezoneId));
        if (!this._crPage._browserContext._browser.options.headful)
          promises.push(this._setDefaultFontFamilies(this._client));
        promises.push(this._updateGeolocation(true));
        promises.push(this._updateEmulateMedia());
        promises.push(this._updateFileChooserInterception(true));
        for (const initScript of this._crPage._page.allInitScripts())
          promises.push(this._evaluateOnNewDocument(initScript, "main"));
        if (screencastOptions)
          promises.push(this._startVideoRecording(screencastOptions));
      }
      promises.push(this._client.send("Runtime.runIfWaitingForDebugger"));
      promises.push(this._firstNonInitialNavigationCommittedPromise);
      await Promise.all(promises);
    }
    dispose() {
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError);
      for (const childSession of this._childSessions)
        childSession.dispose();
      if (this._parentSession)
        this._parentSession._childSessions.delete(this);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._crPage._networkManager.removeSession(this._client);
      this._crPage._sessions.delete(this._targetId);
      this._client.dispose();
    }
    async _navigate(frame, url, referrer) {
      const response = await this._client.send("Page.navigate", {
        url,
        referrer,
        frameId: frame._id,
        referrerPolicy: "unsafeUrl"
      });
      if (response.errorText)
        throw new frames.NavigationAbortedError(response.loaderId, `${response.errorText} at ${url}`);
      return {
        newDocumentId: response.loaderId
      };
    }
    _onLifecycleEvent(event) {
      if (this._eventBelongsToStaleFrame(event.frameId))
        return;
      if (event.name === "load")
        this._page._frameManager.frameLifecycleEvent(event.frameId, "load");
      else if (event.name === "DOMContentLoaded")
        this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded");
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      if (!frameTree.childFrames)
        return;
      for (const child of frameTree.childFrames)
        this._handleFrameTree(child);
    }
    _eventBelongsToStaleFrame(frameId) {
      const frame = this._page._frameManager.frame(frameId);
      if (!frame)
        return true;
      const session = this._crPage._sessionForFrame(frame);
      return session && session !== this && !session._swappedIn;
    }
    _onFrameAttached(frameId, parentFrameId) {
      const frameSession = this._crPage._sessions.get(frameId);
      if (frameSession && frameId !== this._targetId) {
        frameSession._swappedIn = true;
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.removeChildFramesRecursively(frame);
        return;
      }
      if (parentFrameId && !this._page._frameManager.frame(parentFrameId)) {
        return;
      }
      this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      if (this._eventBelongsToStaleFrame(framePayload.id))
        return;
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url + (framePayload.urlFragment || ""), framePayload.name || "", framePayload.loaderId, initial);
      if (!initial)
        this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameRequestedNavigation(payload) {
      if (this._eventBelongsToStaleFrame(payload.frameId))
        return;
      if (payload.disposition === "currentTab")
        this._page._frameManager.frameRequestedNavigation(payload.frameId);
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      if (this._eventBelongsToStaleFrame(frameId))
        return;
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId, reason) {
      if (this._crPage._sessions.has(frameId)) {
        return;
      }
      if (reason === "swap") {
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.removeChildFramesRecursively(frame);
        return;
      }
      this._page._frameManager.frameDetached(frameId);
    }
    _onExecutionContextCreated(contextPayload) {
      const frame = contextPayload.auxData ? this._page._frameManager.frame(contextPayload.auxData.frameId) : null;
      if (!frame || this._eventBelongsToStaleFrame(frame._id))
        return;
      const delegate = new _crExecutionContext.CRExecutionContext(this._client, contextPayload);
      let worldName = null;
      if (contextPayload.auxData && !!contextPayload.auxData.isDefault)
        worldName = "main";
      else if (contextPayload.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    _onExecutionContextDestroyed(executionContextId) {
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const contextId of Array.from(this._contextIdToContext.keys()))
        this._onExecutionContextDestroyed(contextId);
    }
    _onAttachedToTarget(event) {
      var _this$_page$_frameMan;
      const session = this._client.createChildSession(event.sessionId);
      if (event.targetInfo.type === "iframe") {
        const targetId = event.targetInfo.targetId;
        const frame = this._page._frameManager.frame(targetId);
        if (!frame)
          return;
        this._page._frameManager.removeChildFramesRecursively(frame);
        const frameSession = new FrameSession(this._crPage, session, targetId, this);
        this._crPage._sessions.set(targetId, frameSession);
        frameSession._initialize(false).catch((e) => e);
        return;
      }
      if (event.targetInfo.type !== "worker") {
        session.detach().catch(() => {
        });
        return;
      }
      const url = event.targetInfo.url;
      const worker = new _page.Worker(this._page, url);
      this._page._addWorker(event.sessionId, worker);
      this._workerSessions.set(event.sessionId, session);
      session.once("Runtime.executionContextCreated", async (event2) => {
        worker._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event2.context));
      });
      session._sendMayFail("Runtime.enable");
      this._crPage._networkManager.addSession(session, (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== undefined ? _this$_page$_frameMan : undefined).catch(() => {
      });
      session._sendMayFail("Runtime.runIfWaitingForDebugger");
      session._sendMayFail("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      });
      session.on("Target.attachedToTarget", (event2) => this._onAttachedToTarget(event2));
      session.on("Target.detachedFromTarget", (event2) => this._onDetachedFromTarget(event2));
      session.on("Runtime.consoleAPICalled", (event2) => {
        const args = event2.args.map((o) => worker._existingExecutionContext.createHandle(o));
        this._page._addConsoleMessage(event2.type, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event2.stackTrace));
      });
      session.on("Runtime.exceptionThrown", (exception) => this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exception.exceptionDetails), this._page));
    }
    _onDetachedFromTarget(event) {
      const workerSession = this._workerSessions.get(event.sessionId);
      if (workerSession) {
        workerSession.dispose();
        this._page._removeWorker(event.sessionId);
        return;
      }
      const childFrameSession = this._crPage._sessions.get(event.targetId);
      if (!childFrameSession)
        return;
      if (childFrameSession._swappedIn) {
        childFrameSession.dispose();
        return;
      }
      this._client.send("Page.enable").catch((e) => null).then(() => {
        if (!childFrameSession._swappedIn)
          this._page._frameManager.frameDetached(event.targetId);
        childFrameSession.dispose();
      });
    }
    _onWindowOpen(event) {
      this._crPage._nextWindowOpenPopupFeatures.push(event.windowFeatures);
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      const context = this._contextIdToContext.get(event.executionContextId);
      if (!context)
        return;
      const values = event.args.map((arg) => context.createHandle(arg));
      this._page._addConsoleMessage(event.type, values, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this._crPage.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context)
          await this._page._onBindingCalled(event.payload, context);
      }
    }
    _onDialog(event) {
      if (!this._page._frameManager.frame(this._targetId))
        return;
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        if (this._isMainFrame() && event.type === "beforeunload" && !accept)
          this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, "navigation cancelled by beforeunload dialog");
        await this._client.send("Page.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    _handleException(exceptionDetails) {
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, (0, _crProtocolHelper.exceptionToError)(exceptionDetails), this._page);
    }
    async _onTargetCrashed() {
      this._client._markAsCrashed();
      this._page._didCrash();
    }
    _onLogEntryAdded(event) {
      const {
        level,
        text,
        args,
        source,
        url,
        lineNumber
      } = event.entry;
      if (args)
        args.map((arg) => (0, _crProtocolHelper.releaseObject)(this._client, arg.objectId));
      if (source !== "worker") {
        const location2 = {
          url: url || "",
          lineNumber: lineNumber || 0,
          columnNumber: 0
        };
        this._page._addConsoleMessage(level, [], location2, text);
      }
    }
    async _onFileChooserOpened(event) {
      if (!event.backendNodeId)
        return;
      const frame = this._page._frameManager.frame(event.frameId);
      if (!frame)
        return;
      let handle;
      try {
        const utilityContext = await frame._utilityContext();
        handle = await this._adoptBackendNodeId(event.backendNodeId, utilityContext);
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    _willBeginDownload() {
      const originPage = this._crPage._initializedPage;
      if (!originPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
      }
    }
    _onScreencastFrame(payload) {
      this._page.throttleScreencastFrameAck(() => {
        this._client.send("Page.screencastFrameAck", {
          sessionId: payload.sessionId
        }).catch(() => {
        });
      });
      const buffer = Buffer.from(payload.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        frameSwapWallTime: payload.metadata.timestamp ? payload.metadata.timestamp * 1000 : undefined,
        width: payload.metadata.deviceWidth,
        height: payload.metadata.deviceHeight
      });
    }
    async _createVideoRecorder(screencastId, options) {
      (0, _utils.assert)(!this._screencastId);
      const ffmpegPath = _registry.registry.findExecutable("ffmpeg").executablePathOrDie(this._page.attribution.playwright.options.sdkLanguage);
      this._videoRecorder = await _videoRecorder.VideoRecorder.launch(this._crPage._page, ffmpegPath, options);
      this._screencastId = screencastId;
    }
    async _startVideoRecording(options) {
      const screencastId = this._screencastId;
      (0, _utils.assert)(screencastId);
      this._page.once(_page.Page.Events.Close, () => this._stopVideoRecording().catch(() => {
      }));
      const gotFirstFrame = new Promise((f) => this._client.once("Page.screencastFrame", f));
      await this._startScreencast(this._videoRecorder, {
        format: "jpeg",
        quality: 90,
        maxWidth: options.width,
        maxHeight: options.height
      });
      gotFirstFrame.then(() => {
        this._crPage._browserContext._browser._videoStarted(this._crPage._browserContext, screencastId, options.outputFile, this._crPage.pageOrError());
      });
    }
    async _stopVideoRecording() {
      if (!this._screencastId)
        return;
      const screencastId = this._screencastId;
      this._screencastId = null;
      const recorder = this._videoRecorder;
      this._videoRecorder = null;
      await this._stopScreencast(recorder);
      await recorder.stop().catch(() => {
      });
      const video = this._crPage._browserContext._browser._takeVideo(screencastId);
      video === null || video === undefined || video.reportFinished();
    }
    async _startScreencast(client, options = {}) {
      this._screencastClients.add(client);
      if (this._screencastClients.size === 1)
        await this._client.send("Page.startScreencast", options);
    }
    async _stopScreencast(client) {
      this._screencastClients.delete(client);
      if (!this._screencastClients.size)
        await this._client._sendMayFail("Page.stopScreencast");
    }
    async _updateGeolocation(initial) {
      const geolocation = this._crPage._browserContext._options.geolocation;
      if (!initial || geolocation)
        await this._client.send("Emulation.setGeolocationOverride", geolocation || {});
    }
    async _updateViewport(preserveWindowBoundaries) {
      if (this._crPage._browserContext._browser.isClank())
        return;
      (0, _utils.assert)(this._isMainFrame());
      const options = this._crPage._browserContext._options;
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize === null)
        return;
      const viewportSize = emulatedSize.viewport;
      const screenSize = emulatedSize.screen;
      const isLandscape = screenSize.width > screenSize.height;
      const metricsOverride = {
        mobile: !!options.isMobile,
        width: viewportSize.width,
        height: viewportSize.height,
        screenWidth: screenSize.width,
        screenHeight: screenSize.height,
        deviceScaleFactor: options.deviceScaleFactor || 1,
        screenOrientation: options.isMobile ? isLandscape ? {
          angle: 90,
          type: "landscapePrimary"
        } : {
          angle: 0,
          type: "portraitPrimary"
        } : {
          angle: 0,
          type: "landscapePrimary"
        },
        dontSetVisibleSize: preserveWindowBoundaries
      };
      if (JSON.stringify(this._metricsOverride) === JSON.stringify(metricsOverride))
        return;
      const promises = [this._client.send("Emulation.setDeviceMetricsOverride", metricsOverride)];
      if (!preserveWindowBoundaries && this._windowId) {
        let insets = {
          width: 0,
          height: 0
        };
        if (this._crPage._browserContext._browser.options.headful) {
          insets = {
            width: 24,
            height: 88
          };
          if (process.platform === "win32")
            insets = {
              width: 16,
              height: 88
            };
          else if (process.platform === "linux")
            insets = {
              width: 8,
              height: 85
            };
          else if (process.platform === "darwin")
            insets = {
              width: 2,
              height: 80
            };
          if (this._crPage._browserContext.isPersistentContext()) {
            insets.height += 46;
          }
        }
        promises.push(this.setWindowBounds({
          width: viewportSize.width + insets.width,
          height: viewportSize.height + insets.height
        }));
      }
      await Promise.all(promises);
      this._metricsOverride = metricsOverride;
    }
    async windowBounds() {
      const {
        bounds
      } = await this._client.send("Browser.getWindowBounds", {
        windowId: this._windowId
      });
      return bounds;
    }
    async setWindowBounds(bounds) {
      return await this._client.send("Browser.setWindowBounds", {
        windowId: this._windowId,
        bounds
      });
    }
    async _updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const media = emulatedMedia.media === "no-override" ? "" : emulatedMedia.media;
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? "" : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? "" : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? "" : emulatedMedia.forcedColors;
      const features = [{
        name: "prefers-color-scheme",
        value: colorScheme
      }, {
        name: "prefers-reduced-motion",
        value: reducedMotion
      }, {
        name: "forced-colors",
        value: forcedColors
      }];
      await this._client.send("Emulation.setEmulatedMedia", {
        media,
        features
      });
    }
    async _updateUserAgent() {
      const options = this._crPage._browserContext._options;
      await this._client.send("Emulation.setUserAgentOverride", {
        userAgent: options.userAgent || "",
        acceptLanguage: options.locale,
        userAgentMetadata: calculateUserAgentMetadata(options)
      });
    }
    async _setDefaultFontFamilies(session) {
      const fontFamilies = _defaultFontFamilies.platformToFontFamilies[this._crPage._browserContext._browser._platform()];
      await session.send("Page.setFontFamilies", fontFamilies);
    }
    async _updateFileChooserInterception(initial) {
      const enabled = this._page.fileChooserIntercepted();
      if (initial && !enabled)
        return;
      await this._client.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async _evaluateOnNewDocument(initScript, world) {
      const worldName = world === "utility" ? UTILITY_WORLD_NAME : undefined;
      const {
        identifier
      } = await this._client.send("Page.addScriptToEvaluateOnNewDocument", {
        source: initScript.source,
        worldName
      });
      if (!initScript.internal)
        this._evaluateOnNewDocumentIdentifiers.push(identifier);
    }
    async _removeEvaluatesOnNewDocument() {
      const identifiers = this._evaluateOnNewDocumentIdentifiers;
      this._evaluateOnNewDocumentIdentifiers = [];
      await Promise.all(identifiers.map((identifier) => this._client.send("Page.removeScriptToEvaluateOnNewDocument", {
        identifier
      })));
    }
    async _getContentFrame(handle) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo || typeof nodeInfo.node.frameId !== "string")
        return null;
      return this._page._frameManager.frame(nodeInfo.node.frameId);
    }
    async _getOwnerFrame(handle) {
      const documentElement = await handle.evaluateHandle((node) => {
        const doc = node;
        if (doc.documentElement && doc.documentElement.ownerDocument === doc)
          return doc.documentElement;
        return node.ownerDocument ? node.ownerDocument.documentElement : null;
      });
      if (!documentElement)
        return null;
      if (!documentElement._objectId)
        return null;
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: documentElement._objectId
      });
      const frameId = nodeInfo && typeof nodeInfo.node.frameId === "string" ? nodeInfo.node.frameId : null;
      documentElement.dispose();
      return frameId;
    }
    async _getBoundingBox(handle) {
      const result = await this._client._sendMayFail("DOM.getBoxModel", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      const quad = result.model.border;
      const x = Math.min(quad[0], quad[2], quad[4], quad[6]);
      const y = Math.min(quad[1], quad[3], quad[5], quad[7]);
      const width = Math.max(quad[0], quad[2], quad[4], quad[6]) - x;
      const height = Math.max(quad[1], quad[3], quad[5], quad[7]) - y;
      const position = await this._framePosition();
      if (!position)
        return null;
      return {
        x: x + position.x,
        y: y + position.y,
        width,
        height
      };
    }
    async _framePosition() {
      const frame = this._page._frameManager.frame(this._targetId);
      if (!frame)
        return null;
      if (frame === this._page.mainFrame())
        return {
          x: 0,
          y: 0
        };
      const element = await frame.frameElement();
      const box = await element.boundingBox();
      return box;
    }
    async _scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._client.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        throw e;
      });
    }
    async _getContentQuads(handle) {
      const result = await this._client._sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      const position = await this._framePosition();
      if (!position)
        return null;
      return result.quads.map((quad) => [{
        x: quad[0] + position.x,
        y: quad[1] + position.y
      }, {
        x: quad[2] + position.x,
        y: quad[3] + position.y
      }, {
        x: quad[4] + position.x,
        y: quad[5] + position.y
      }, {
        x: quad[6] + position.x,
        y: quad[7] + position.y
      }]);
    }
    async _adoptElementHandle(handle, to) {
      const nodeInfo = await this._client.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return this._adoptBackendNodeId(nodeInfo.node.backendNodeId, to);
    }
    async _adoptBackendNodeId(backendNodeId, to) {
      const result = await this._client._sendMayFail("DOM.resolveNode", {
        backendNodeId,
        executionContextId: to[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.object).asElement();
    }
  }
  async function emulateLocale(session, locale) {
    try {
      await session.send("Emulation.setLocaleOverride", {
        locale
      });
    } catch (exception) {
      if (exception.message.includes("Another locale override is already in effect"))
        return;
      throw exception;
    }
  }
  async function emulateTimezone(session, timezoneId) {
    try {
      await session.send("Emulation.setTimezoneOverride", {
        timezoneId
      });
    } catch (exception) {
      if (exception.message.includes("Timezone override is already in effect"))
        return;
      if (exception.message.includes("Invalid timezone"))
        throw new Error(`Invalid timezone ID: ${timezoneId}`);
      throw exception;
    }
  }
  var contextDelegateSymbol = Symbol("delegate");
  function calculateUserAgentMetadata(options) {
    const ua = options.userAgent;
    if (!ua)
      return;
    const metadata = {
      mobile: !!options.isMobile,
      model: "",
      architecture: "x64",
      platform: "Windows",
      platformVersion: ""
    };
    const androidMatch = ua.match(/Android (\d+(\.\d+)?(\.\d+)?)/);
    const iPhoneMatch = ua.match(/iPhone OS (\d+(_\d+)?)/);
    const iPadMatch = ua.match(/iPad; CPU OS (\d+(_\d+)?)/);
    const macOSMatch = ua.match(/Mac OS X (\d+(_\d+)?(_\d+)?)/);
    const windowsMatch = ua.match(/Windows\D+(\d+(\.\d+)?(\.\d+)?)/);
    if (androidMatch) {
      metadata.platform = "Android";
      metadata.platformVersion = androidMatch[1];
      metadata.architecture = "arm";
    } else if (iPhoneMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPhoneMatch[1];
      metadata.architecture = "arm";
    } else if (iPadMatch) {
      metadata.platform = "iOS";
      metadata.platformVersion = iPadMatch[1];
      metadata.architecture = "arm";
    } else if (macOSMatch) {
      metadata.platform = "macOS";
      metadata.platformVersion = macOSMatch[1];
      if (!ua.includes("Intel"))
        metadata.architecture = "arm";
    } else if (windowsMatch) {
      metadata.platform = "Windows";
      metadata.platformVersion = windowsMatch[1];
    } else if (ua.toLowerCase().includes("linux")) {
      metadata.platform = "Linux";
    }
    if (ua.includes("ARM"))
      metadata.architecture = "arm";
    return metadata;
  }
});

// node_modules/playwright-core/lib/server/chromium/crServiceWorker.js
var require_crServiceWorker = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRServiceWorker = undefined;
  var _page = require_page();
  var _crExecutionContext = require_crExecutionContext();
  var _crNetworkManager = require_crNetworkManager();
  var network = _interopRequireWildcard(require_network2());
  var _browserContext = require_browserContext();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class CRServiceWorker extends _page.Worker {
    constructor(browserContext, session, url) {
      super(browserContext, url);
      this._browserContext = undefined;
      this._networkManager = undefined;
      this._session = undefined;
      this._session = session;
      this._browserContext = browserContext;
      if (!!process.env.PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS)
        this._networkManager = new _crNetworkManager.CRNetworkManager(null, this);
      session.once("Runtime.executionContextCreated", (event) => {
        this._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event.context));
      });
      if (this._networkManager && this._isNetworkInspectionEnabled()) {
        this.updateRequestInterception();
        this.updateExtraHTTPHeaders();
        this.updateHttpCredentials();
        this.updateOffline();
        this._networkManager.addSession(session, undefined, true).catch(() => {
        });
      }
      session.send("Runtime.enable", {}).catch((e) => {
      });
      session.send("Runtime.runIfWaitingForDebugger").catch((e) => {
      });
      session.on("Inspector.targetReloadedAfterCrash", () => {
        session._sendMayFail("Runtime.runIfWaitingForDebugger", {});
      });
    }
    didClose() {
      var _this$_networkManager;
      (_this$_networkManager = this._networkManager) === null || _this$_networkManager === undefined || _this$_networkManager.removeSession(this._session);
      this._session.dispose();
      super.didClose();
    }
    async updateOffline() {
      var _this$_networkManager2;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager2 = this._networkManager) === null || _this$_networkManager2 === undefined ? undefined : _this$_networkManager2.setOffline(!!this._browserContext._options.offline).catch(() => {
      }));
    }
    async updateHttpCredentials() {
      var _this$_networkManager3;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager3 = this._networkManager) === null || _this$_networkManager3 === undefined ? undefined : _this$_networkManager3.authenticate(this._browserContext._options.httpCredentials || null).catch(() => {
      }));
    }
    async updateExtraHTTPHeaders() {
      var _this$_networkManager4;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager4 = this._networkManager) === null || _this$_networkManager4 === undefined ? undefined : _this$_networkManager4.setExtraHTTPHeaders(this._browserContext._options.extraHTTPHeaders || []).catch(() => {
      }));
    }
    async updateRequestInterception() {
      var _this$_networkManager5;
      if (!this._isNetworkInspectionEnabled())
        return;
      await ((_this$_networkManager5 = this._networkManager) === null || _this$_networkManager5 === undefined ? undefined : _this$_networkManager5.setRequestInterception(this.needsRequestInterception()).catch(() => {
      }));
    }
    needsRequestInterception() {
      return this._isNetworkInspectionEnabled() && !!this._browserContext._requestInterceptor;
    }
    reportRequestFinished(request, response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFinished, {
        request,
        response
      });
    }
    requestFailed(request, _canceled) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.RequestFailed, request);
    }
    requestReceivedResponse(response) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Response, response);
    }
    requestStarted(request, route) {
      this._browserContext.emit(_browserContext.BrowserContext.Events.Request, request);
      if (route) {
        var _this$_browserContext, _this$_browserContext2;
        const r = new network.Route(request, route);
        if ((_this$_browserContext = (_this$_browserContext2 = this._browserContext)._requestInterceptor) !== null && _this$_browserContext !== undefined && _this$_browserContext.call(_this$_browserContext2, r, request))
          return;
        r.continue({
          isFallback: true
        }).catch(() => {
        });
      }
    }
    _isNetworkInspectionEnabled() {
      return this._browserContext._options.serviceWorkers !== "block";
    }
  }
  exports.CRServiceWorker = CRServiceWorker;
});

// node_modules/playwright-core/lib/server/chromium/crBrowser.js
var require_crBrowser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRBrowserContext = exports.CRBrowser = undefined;
  var _path = _interopRequireDefault(__require("path"));
  var _browser = require_browser();
  var _browserContext = require_browserContext();
  var _utils = require_utils();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _frames = require_frames();
  var _crConnection = require_crConnection();
  var _crPage = require_crPage();
  var _crProtocolHelper = require_crProtocolHelper();
  var _crServiceWorker = require_crServiceWorker();
  var _artifact = require_artifact();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class CRBrowser extends _browser.Browser {
    static async connect(parent, transport, options, devtools) {
      options = {
        ...options
      };
      const connection = new _crConnection.CRConnection(transport, options.protocolLogger, options.browserLogsCollector);
      const browser = new CRBrowser(parent, connection, options);
      browser._devtools = devtools;
      if (browser.isClank())
        browser._isCollocatedWithServer = false;
      const session = connection.rootSession;
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      const version2 = await session.send("Browser.getVersion");
      browser._version = version2.product.substring(version2.product.indexOf("/") + 1);
      browser._userAgent = version2.userAgent;
      browser.options.headful = !version2.userAgent.includes("Headless");
      if (!options.persistent) {
        await session.send("Target.setAutoAttach", {
          autoAttach: true,
          waitForDebuggerOnStart: true,
          flatten: true
        });
        return browser;
      }
      browser._defaultContext = new CRBrowserContext(browser, undefined, options.persistent);
      await Promise.all([session.send("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      }).then(async () => {
        await session.send("Target.getTargetInfo");
      }), browser._defaultContext._initialize()]);
      await browser._waitForAllPagesToBeInitialized();
      return browser;
    }
    constructor(parent, connection, options) {
      super(parent, options);
      this._connection = undefined;
      this._session = undefined;
      this._clientRootSessionPromise = null;
      this._contexts = new Map;
      this._crPages = new Map;
      this._backgroundPages = new Map;
      this._serviceWorkers = new Map;
      this._devtools = undefined;
      this._version = "";
      this._tracingRecording = false;
      this._tracingClient = undefined;
      this._userAgent = "";
      this._connection = connection;
      this._session = this._connection.rootSession;
      this._connection.on(_crConnection.ConnectionEvents.Disconnected, () => this._didDisconnect());
      this._session.on("Target.attachedToTarget", this._onAttachedToTarget.bind(this));
      this._session.on("Target.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this._session.on("Browser.downloadWillBegin", this._onDownloadWillBegin.bind(this));
      this._session.on("Browser.downloadProgress", this._onDownloadProgress.bind(this));
    }
    async doCreateNewContext(options) {
      const proxy = options.proxyOverride || options.proxy;
      let proxyBypassList = undefined;
      if (proxy) {
        if (process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK)
          proxyBypassList = proxy.bypass;
        else
          proxyBypassList = "<-loopback>" + (proxy.bypass ? `,${proxy.bypass}` : "");
      }
      const {
        browserContextId
      } = await this._session.send("Target.createBrowserContext", {
        disposeOnDetach: true,
        proxyServer: proxy ? proxy.server : undefined,
        proxyBypassList
      });
      const context = new CRBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _platform() {
      if (this._userAgent.includes("Windows"))
        return "win";
      if (this._userAgent.includes("Macintosh"))
        return "mac";
      return "linux";
    }
    isClank() {
      return this.options.name === "clank";
    }
    async _waitForAllPagesToBeInitialized() {
      await Promise.all([...this._crPages.values()].map((page) => page.pageOrError()));
    }
    _onAttachedToTarget({
      targetInfo,
      sessionId,
      waitingForDebugger
    }) {
      if (targetInfo.type === "browser")
        return;
      const session = this._session.createChildSession(sessionId);
      (0, _utils.assert)(targetInfo.browserContextId, "targetInfo: " + JSON.stringify(targetInfo, null, 2));
      let context = this._contexts.get(targetInfo.browserContextId) || null;
      if (!context) {
        context = this._defaultContext;
      }
      if (targetInfo.type === "other" && targetInfo.url.startsWith("devtools://devtools") && this._devtools) {
        this._devtools.install(session);
        return;
      }
      const treatOtherAsPage = targetInfo.type === "other" && process.env.PW_CHROMIUM_ATTACH_TO_OTHER;
      if (!context || targetInfo.type === "other" && !treatOtherAsPage) {
        session.detach().catch(() => {
        });
        return;
      }
      (0, _utils.assert)(!this._crPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils.assert)(!this._backgroundPages.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      (0, _utils.assert)(!this._serviceWorkers.has(targetInfo.targetId), "Duplicate target " + targetInfo.targetId);
      if (targetInfo.type === "background_page") {
        const backgroundPage = new _crPage.CRPage(session, targetInfo.targetId, context, null, {
          hasUIWindow: false,
          isBackgroundPage: true
        });
        this._backgroundPages.set(targetInfo.targetId, backgroundPage);
        return;
      }
      if (targetInfo.type === "page" || treatOtherAsPage) {
        const opener = targetInfo.openerId ? this._crPages.get(targetInfo.openerId) || null : null;
        const crPage = new _crPage.CRPage(session, targetInfo.targetId, context, opener, {
          hasUIWindow: targetInfo.type === "page",
          isBackgroundPage: false
        });
        this._crPages.set(targetInfo.targetId, crPage);
        return;
      }
      if (targetInfo.type === "service_worker") {
        const serviceWorker = new _crServiceWorker.CRServiceWorker(context, session, targetInfo.url);
        this._serviceWorkers.set(targetInfo.targetId, serviceWorker);
        context.emit(CRBrowserContext.CREvents.ServiceWorker, serviceWorker);
        return;
      }
      session.detach().catch(() => {
      });
    }
    _onDetachedFromTarget(payload) {
      const targetId = payload.targetId;
      const crPage = this._crPages.get(targetId);
      if (crPage) {
        this._crPages.delete(targetId);
        crPage.didClose();
        return;
      }
      const backgroundPage = this._backgroundPages.get(targetId);
      if (backgroundPage) {
        this._backgroundPages.delete(targetId);
        backgroundPage.didClose();
        return;
      }
      const serviceWorker = this._serviceWorkers.get(targetId);
      if (serviceWorker) {
        this._serviceWorkers.delete(targetId);
        serviceWorker.didClose();
        return;
      }
    }
    _didDisconnect() {
      for (const crPage of this._crPages.values())
        crPage.didClose();
      this._crPages.clear();
      for (const backgroundPage of this._backgroundPages.values())
        backgroundPage.didClose();
      this._backgroundPages.clear();
      for (const serviceWorker of this._serviceWorkers.values())
        serviceWorker.didClose();
      this._serviceWorkers.clear();
      this._didClose();
    }
    _findOwningPage(frameId) {
      for (const crPage of this._crPages.values()) {
        const frame = crPage._page._frameManager.frame(frameId);
        if (frame)
          return crPage;
      }
      return null;
    }
    _onDownloadWillBegin(payload) {
      const page = this._findOwningPage(payload.frameId);
      if (!page) {
        return;
      }
      page.willBeginDownload();
      let originPage = page._initializedPage;
      if (!originPage && page._opener)
        originPage = page._opener._initializedPage;
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.guid, payload.url, payload.suggestedFilename);
    }
    _onDownloadProgress(payload) {
      if (payload.state === "completed")
        this._downloadFinished(payload.guid, "");
      if (payload.state === "canceled")
        this._downloadFinished(payload.guid, this._closeReason || "canceled");
    }
    async _closePage(crPage) {
      await this._session.send("Target.closeTarget", {
        targetId: crPage._targetId
      });
    }
    async newBrowserCDPSession() {
      return await this._connection.createBrowserSession();
    }
    async startTracing(page, options = {}) {
      (0, _utils.assert)(!this._tracingRecording, "Cannot start recording trace while already recording trace.");
      this._tracingClient = page ? page._delegate._mainFrameSession._client : this._session;
      const defaultCategories = ["-*", "devtools.timeline", "v8.execute", "disabled-by-default-devtools.timeline", "disabled-by-default-devtools.timeline.frame", "toplevel", "blink.console", "blink.user_timing", "latencyInfo", "disabled-by-default-devtools.timeline.stack", "disabled-by-default-v8.cpu_profiler", "disabled-by-default-v8.cpu_profiler.hires"];
      const {
        screenshots = false,
        categories = defaultCategories
      } = options;
      if (screenshots)
        categories.push("disabled-by-default-devtools.screenshot");
      this._tracingRecording = true;
      await this._tracingClient.send("Tracing.start", {
        transferMode: "ReturnAsStream",
        categories: categories.join(",")
      });
    }
    async stopTracing() {
      (0, _utils.assert)(this._tracingClient, "Tracing was not started.");
      const [event] = await Promise.all([new Promise((f) => this._tracingClient.once("Tracing.tracingComplete", f)), this._tracingClient.send("Tracing.end")]);
      const tracingPath = _path.default.join(this.options.artifactsDir, (0, _utils.createGuid)() + ".crtrace");
      await (0, _crProtocolHelper.saveProtocolStream)(this._tracingClient, event.stream, tracingPath);
      this._tracingRecording = false;
      const artifact = new _artifact.Artifact(this, tracingPath);
      artifact.reportFinished();
      return artifact;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async _clientRootSession() {
      if (!this._clientRootSessionPromise)
        this._clientRootSessionPromise = this._connection.createBrowserSession();
      return this._clientRootSessionPromise;
    }
  }
  exports.CRBrowser = CRBrowser;

  class CRBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._authenticateProxyViaCredentials();
    }
    async _initialize() {
      (0, _utils.assert)(!Array.from(this._browser._crPages.values()).some((page) => page._browserContext === this));
      const promises = [super._initialize()];
      if (this._browser.options.name !== "clank" && this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser._session.send("Browser.setDownloadBehavior", {
          behavior: this._options.acceptDownloads === "accept" ? "allowAndName" : "deny",
          browserContextId: this._browserContextId,
          downloadPath: this._browser.options.downloadsPath,
          eventsEnabled: true
        }));
      }
      await Promise.all(promises);
    }
    _crPages() {
      return [...this._browser._crPages.values()].filter((crPage) => crPage._browserContext === this);
    }
    pages() {
      return this._crPages().map((crPage) => crPage._initializedPage).filter(Boolean);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const oldKeys = this._browser.isClank() ? new Set(this._browser._crPages.keys()) : undefined;
      let {
        targetId
      } = await this._browser._session.send("Target.createTarget", {
        url: "about:blank",
        browserContextId: this._browserContextId
      });
      if (oldKeys) {
        const newKeys = new Set(this._browser._crPages.keys());
        for (const key of oldKeys)
          newKeys.delete(key);
        for (const key of newKeys) {
          const page = this._browser._crPages.get(key);
          if (page._opener)
            newKeys.delete(key);
        }
        (0, _utils.assert)(newKeys.size === 1);
        [targetId] = [...newKeys];
      }
      return this._browser._crPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._session.send("Storage.getCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          sameSite: "Lax",
          ...c
        };
        delete copy.size;
        delete copy.priority;
        delete copy.session;
        delete copy.sameParty;
        delete copy.sourceScheme;
        delete copy.sourcePort;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      await this._browser._session.send("Storage.setCookies", {
        cookies: network.rewriteCookies(cookies),
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._session.send("Storage.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([
        ["geolocation", "geolocation"],
        ["midi", "midi"],
        ["notifications", "notifications"],
        ["camera", "videoCapture"],
        ["microphone", "audioCapture"],
        ["background-sync", "backgroundSync"],
        ["ambient-light-sensor", "sensors"],
        ["accelerometer", "sensors"],
        ["gyroscope", "sensors"],
        ["magnetometer", "sensors"],
        ["accessibility-events", "accessibilityEvents"],
        ["clipboard-read", "clipboardReadWrite"],
        ["clipboard-write", "clipboardSanitizedWrite"],
        ["payment-handler", "paymentHandler"],
        ["midi-sysex", "midiSysex"],
        ["storage-access", "storageAccess"]
      ]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser._session.send("Browser.grantPermissions", {
        origin: origin === "*" ? undefined : origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser._session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      for (const page of this.pages())
        await page._delegate.updateGeolocation();
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      for (const page of this.pages())
        await page._delegate.updateExtraHTTPHeaders();
      for (const sw of this.serviceWorkers())
        await sw.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent) {
      this._options.userAgent = userAgent;
      for (const page of this.pages())
        await page._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page of this.pages())
        await page._delegate.updateOffline();
      for (const sw of this.serviceWorkers())
        await sw.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
      for (const sw of this.serviceWorkers())
        await sw.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      for (const page of this.pages())
        await page._delegate.addInitScript(initScript);
    }
    async doRemoveNonInternalInitScripts() {
      for (const page of this.pages())
        await page._delegate.removeNonInternalInitScripts();
    }
    async doUpdateRequestInterception() {
      for (const page of this.pages())
        await page._delegate.updateRequestInterception();
      for (const sw of this.serviceWorkers())
        await sw.updateRequestInterception();
    }
    async doClose(reason) {
      const openedBeforeUnloadDialogs = [];
      for (const crPage of this._crPages()) {
        const dialogs = [...crPage._page._frameManager._openedDialogs].filter((dialog) => dialog.type() === "beforeunload");
        openedBeforeUnloadDialogs.push(...dialogs);
      }
      await Promise.all(openedBeforeUnloadDialogs.map((dialog) => dialog.dismiss()));
      if (!this._browserContextId) {
        await this.stopVideoRecording();
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._session.send("Target.disposeBrowserContext", {
        browserContextId: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
      for (const [targetId, serviceWorker] of this._browser._serviceWorkers) {
        if (serviceWorker._browserContext !== this)
          continue;
        serviceWorker.didClose();
        this._browser._serviceWorkers.delete(targetId);
      }
    }
    async stopVideoRecording() {
      await Promise.all(this._crPages().map((crPage) => crPage._mainFrameSession._stopVideoRecording()));
    }
    onClosePersistent() {
      for (const [targetId, backgroundPage] of this._browser._backgroundPages.entries()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage) {
          backgroundPage.didClose();
          this._browser._backgroundPages.delete(targetId);
        }
      }
    }
    async clearCache() {
      for (const page of this._crPages())
        await page._networkManager.clearCache();
    }
    async cancelDownload(guid) {
      await this._browser._session.send("Browser.cancelDownload", {
        guid,
        browserContextId: this._browserContextId
      });
    }
    backgroundPages() {
      const result = [];
      for (const backgroundPage of this._browser._backgroundPages.values()) {
        if (backgroundPage._browserContext === this && backgroundPage._initializedPage)
          result.push(backgroundPage._initializedPage);
      }
      return result;
    }
    serviceWorkers() {
      return Array.from(this._browser._serviceWorkers.values()).filter((serviceWorker) => serviceWorker._browserContext === this);
    }
    async newCDPSession(page) {
      let targetId = null;
      if (page instanceof _page.Page) {
        targetId = page._delegate._targetId;
      } else if (page instanceof _frames.Frame) {
        const session = page._page._delegate._sessions.get(page._id);
        if (!session)
          throw new Error(`This frame does not have a separate CDP session, it is a part of the parent frame's session`);
        targetId = session._targetId;
      } else {
        throw new Error("page: expected Page or Frame");
      }
      const rootSession = await this._browser._clientRootSession();
      return rootSession.attachToTarget(targetId);
    }
  }
  exports.CRBrowserContext = CRBrowserContext;
  CRBrowserContext.CREvents = {
    BackgroundPage: "backgroundpage",
    ServiceWorker: "serviceworker"
  };
});

// node_modules/playwright-core/lib/protocol/transport.js
var require_transport = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PipeTransport = undefined;
  var _utils = require_utils();

  class PipeTransport {
    constructor(pipeWrite, pipeRead, closeable, endian = "le") {
      this._pipeWrite = undefined;
      this._data = Buffer.from([]);
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._bytesLeft = 0;
      this.onmessage = undefined;
      this.onclose = undefined;
      this._endian = undefined;
      this._closeableStream = undefined;
      this._pipeWrite = pipeWrite;
      this._endian = endian;
      this._closeableStream = closeable;
      pipeRead.on("data", (buffer) => this._dispatch(buffer));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this.onclose)
          this.onclose();
      });
      this.onmessage = undefined;
      this.onclose = undefined;
    }
    send(message) {
      if (this._closed)
        throw new Error("Pipe has been closed");
      const data = Buffer.from(message, "utf-8");
      const dataLength = Buffer.alloc(4);
      if (this._endian === "be")
        dataLength.writeUInt32BE(data.length, 0);
      else
        dataLength.writeUInt32LE(data.length, 0);
      this._pipeWrite.write(dataLength);
      this._pipeWrite.write(data);
    }
    close() {
      this._closeableStream.close();
    }
    _dispatch(buffer) {
      this._data = Buffer.concat([this._data, buffer]);
      while (true) {
        if (!this._bytesLeft && this._data.length < 4) {
          break;
        }
        if (!this._bytesLeft) {
          this._bytesLeft = this._endian === "be" ? this._data.readUInt32BE(0) : this._data.readUInt32LE(0);
          this._data = this._data.slice(4);
        }
        if (!this._bytesLeft || this._data.length < this._bytesLeft) {
          break;
        }
        const message = this._data.slice(0, this._bytesLeft);
        this._data = this._data.slice(this._bytesLeft);
        this._bytesLeft = 0;
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage(message.toString("utf-8"));
        });
      }
    }
  }
  exports.PipeTransport = PipeTransport;
});

// node_modules/playwright-core/lib/server/chromium/chromiumSwitches.js
var require_chromiumSwitches = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.chromiumSwitches = undefined;
  var chromiumSwitches = exports.chromiumSwitches = [
    "--disable-field-trial-config",
    "--disable-background-networking",
    "--disable-background-timer-throttling",
    "--disable-backgrounding-occluded-windows",
    "--disable-back-forward-cache",
    "--disable-breakpad",
    "--disable-client-side-phishing-detection",
    "--disable-component-extensions-with-background-pages",
    "--disable-component-update",
    "--no-default-browser-check",
    "--disable-default-apps",
    "--disable-dev-shm-usage",
    "--disable-extensions",
    "--disable-features=ImprovedCookieControls,LazyFrameLoading,GlobalMediaControls,DestroyProfileOnBrowserClose,MediaRouter,DialMediaRouteProvider,AcceptCHFrame,AutoExpandDetailsElement,CertificateTransparencyComponentUpdater,AvoidUnnecessaryBeforeUnloadCheckSync,Translate,HttpsUpgrades,PaintHolding,ThirdPartyStoragePartitioning,LensOverlay,PlzDedicatedWorker",
    "--allow-pre-commit-input",
    "--disable-hang-monitor",
    "--disable-ipc-flooding-protection",
    "--disable-popup-blocking",
    "--disable-prompt-on-repost",
    "--disable-renderer-backgrounding",
    "--force-color-profile=srgb",
    "--metrics-recording-only",
    "--no-first-run",
    "--enable-automation",
    "--password-store=basic",
    "--use-mock-keychain",
    "--no-service-autorun",
    "--export-tagged-pdf",
    "--disable-search-engine-choice-screen",
    "--unsafely-disable-devtools-self-xss-warnings"
  ];
});

// node_modules/playwright-core/lib/server/android/android.js
var require_android = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidDevice = exports.Android = undefined;
  var _utilsBundle = require_utilsBundle();
  var _events = __require("events");
  var _fs = _interopRequireDefault(__require("fs"));
  var _os = _interopRequireDefault(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _crBrowser = require_crBrowser();
  var _helper = require_helper();
  var _transport = require_transport();
  var _debugLogger = require_debugLogger();
  var _processLauncher = require_processLauncher();
  var _timeoutSettings = require_timeoutSettings();
  var _instrumentation = require_instrumentation();
  var _chromiumSwitches = require_chromiumSwitches();
  var _registry = require_registry();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class Android extends _instrumentation.SdkObject {
    constructor(parent, backend) {
      super(parent, "android");
      this._backend = undefined;
      this._devices = new Map;
      this._timeoutSettings = undefined;
      this._backend = backend;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async devices(options) {
      const devices = (await this._backend.devices(options)).filter((d) => d.status === "device");
      const newSerials = new Set;
      for (const d of devices) {
        newSerials.add(d.serial);
        if (this._devices.has(d.serial))
          continue;
        const device = await AndroidDevice.create(this, d, options);
        this._devices.set(d.serial, device);
      }
      for (const d of this._devices.keys()) {
        if (!newSerials.has(d))
          this._devices.delete(d);
      }
      return [...this._devices.values()];
    }
    _deviceClosed(device) {
      this._devices.delete(device.serial);
    }
  }
  exports.Android = Android;

  class AndroidDevice extends _instrumentation.SdkObject {
    constructor(android, backend, model, options) {
      super(android, "android-device");
      this._backend = undefined;
      this.model = undefined;
      this.serial = undefined;
      this._options = undefined;
      this._driverPromise = undefined;
      this._lastId = 0;
      this._callbacks = new Map;
      this._pollingWebViews = undefined;
      this._timeoutSettings = undefined;
      this._webViews = new Map;
      this._browserConnections = new Set;
      this._android = undefined;
      this._isClosed = false;
      this._android = android;
      this._backend = backend;
      this.model = model;
      this.serial = backend.serial;
      this._options = options;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(android._timeoutSettings);
    }
    static async create(android, backend, options) {
      await backend.init();
      const model = await backend.runCommand("shell:getprop ro.product.model");
      const device = new AndroidDevice(android, backend, model.toString().trim(), options);
      await device._init();
      return device;
    }
    async _init() {
      await this._refreshWebViews();
      const poll = () => {
        this._pollingWebViews = setTimeout(() => this._refreshWebViews().then(poll).catch(() => {
          this.close().catch(() => {
          });
        }), 500);
      };
      poll();
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async shell(command) {
      const result = await this._backend.runCommand(`shell:${command}`);
      await this._refreshWebViews();
      return result;
    }
    async open(command) {
      return await this._backend.open(`${command}`);
    }
    async screenshot() {
      return await this._backend.runCommand(`shell:screencap -p`);
    }
    async _driver() {
      if (this._isClosed)
        return;
      if (!this._driverPromise)
        this._driverPromise = this._installDriver();
      return this._driverPromise;
    }
    async _installDriver() {
      (0, _utilsBundle.debug)("pw:android")("Stopping the old driver");
      await this.shell(`am force-stop com.microsoft.playwright.androiddriver`);
      if (!this._options.omitDriverInstall) {
        (0, _utilsBundle.debug)("pw:android")("Uninstalling the old driver");
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver`);
        await this.shell(`cmd package uninstall com.microsoft.playwright.androiddriver.test`);
        (0, _utilsBundle.debug)("pw:android")("Installing the new driver");
        const executable = _registry.registry.findExecutable("android");
        const packageManagerCommand = (0, _utils.getPackageManagerExecCommand)();
        for (const file of ["android-driver.apk", "android-driver-target.apk"]) {
          const fullName = _path.default.join(executable.directory, file);
          if (!_fs.default.existsSync(fullName))
            throw new Error(`Please install Android driver apk using '${packageManagerCommand} playwright install android'`);
          await this.installApk(await _fs.default.promises.readFile(fullName));
        }
      } else {
        (0, _utilsBundle.debug)("pw:android")("Skipping the driver installation");
      }
      (0, _utilsBundle.debug)("pw:android")("Starting the new driver");
      this.shell("am instrument -w com.microsoft.playwright.androiddriver.test/androidx.test.runner.AndroidJUnitRunner").catch((e) => (0, _utilsBundle.debug)("pw:android")(e));
      const socket = await this._waitForLocalAbstract("playwright_android_driver_socket");
      const transport = new _transport.PipeTransport(socket, socket, socket, "be");
      transport.onmessage = (message) => {
        const response = JSON.parse(message);
        const {
          id,
          result,
          error
        } = response;
        const callback = this._callbacks.get(id);
        if (!callback)
          return;
        if (error)
          callback.reject(new Error(error));
        else
          callback.fulfill(result);
        this._callbacks.delete(id);
      };
      return transport;
    }
    async _waitForLocalAbstract(socketName) {
      let socket;
      (0, _utilsBundle.debug)("pw:android")(`Polling the socket localabstract:${socketName}`);
      while (!socket) {
        try {
          socket = await this._backend.open(`localabstract:${socketName}`);
        } catch (e) {
          await new Promise((f) => setTimeout(f, 250));
        }
      }
      (0, _utilsBundle.debug)("pw:android")(`Connected to localabstract:${socketName}`);
      return socket;
    }
    async send(method, params = {}) {
      params.timeout = this._timeoutSettings.timeout(params);
      const driver = await this._driver();
      if (!driver)
        throw new Error("Device is closed");
      const id = ++this._lastId;
      const result = new Promise((fulfill, reject) => this._callbacks.set(id, {
        fulfill,
        reject
      }));
      driver.send(JSON.stringify({
        id,
        method,
        params
      }));
      return result;
    }
    async close() {
      if (this._isClosed)
        return;
      this._isClosed = true;
      if (this._pollingWebViews)
        clearTimeout(this._pollingWebViews);
      for (const connection of this._browserConnections)
        await connection.close();
      if (this._driverPromise) {
        const driver = await this._driver();
        driver === null || driver === undefined || driver.close();
      }
      await this._backend.close();
      this._android._deviceClosed(this);
      this.emit(AndroidDevice.Events.Close);
    }
    async launchBrowser(pkg = "com.android.chrome", options) {
      (0, _utilsBundle.debug)("pw:android")("Force-stopping", pkg);
      await this._backend.runCommand(`shell:am force-stop ${pkg}`);
      const socketName = (0, _utils.isUnderTest)() ? "webview_devtools_remote_playwright_test" : "playwright_" + (0, _utils.createGuid)() + "_devtools_remote";
      const commandLine = this._defaultArgs(options, socketName).join(" ");
      (0, _utilsBundle.debug)("pw:android")("Starting", pkg, commandLine);
      await this._backend.runCommand(`shell:echo "${Buffer.from(commandLine).toString("base64")}" | base64 -d > /data/local/tmp/chrome-command-line`);
      await this._backend.runCommand(`shell:am start -a android.intent.action.VIEW -d about:blank ${pkg}`);
      const browserContext = await this._connectToBrowser(socketName, options);
      await this._backend.runCommand(`shell:rm /data/local/tmp/chrome-command-line`);
      return browserContext;
    }
    _defaultArgs(options, socketName) {
      const chromeArguments = ["_", "--disable-fre", "--no-default-browser-check", `--remote-debugging-socket-name=${socketName}`, ..._chromiumSwitches.chromiumSwitches, ...this._innerDefaultArgs(options)];
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = [],
        proxy
      } = options;
      const chromeArguments = [];
      if (proxy) {
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    async connectToWebView(socketName) {
      const webView = this._webViews.get(socketName);
      if (!webView)
        throw new Error("WebView has been closed");
      return await this._connectToBrowser(socketName);
    }
    async _connectToBrowser(socketName, options = {}) {
      const socket = await this._waitForLocalAbstract(socketName);
      const androidBrowser = new AndroidBrowser(this, socket);
      await androidBrowser._init();
      this._browserConnections.add(androidBrowser);
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const cleanupArtifactsDir = async () => {
        const errors = await (0, _fileUtils.removeFolders)([artifactsDir]);
        for (let i = 0;i < (errors || []).length; ++i)
          (0, _utilsBundle.debug)("pw:android")(`exception while removing ${artifactsDir}: ${errors[i]}`);
      };
      _processLauncher.gracefullyCloseSet.add(cleanupArtifactsDir);
      socket.on("close", async () => {
        _processLauncher.gracefullyCloseSet.delete(cleanupArtifactsDir);
        cleanupArtifactsDir().catch((e) => (0, _utilsBundle.debug)("pw:android")(`could not cleanup artifacts dir: ${e}`));
      });
      const browserOptions = {
        name: "clank",
        isChromium: true,
        slowMo: 0,
        persistent: {
          ...options,
          noDefaultViewport: true
        },
        artifactsDir,
        downloadsPath: artifactsDir,
        tracesDir: artifactsDir,
        browserProcess: new ClankBrowserProcess(androidBrowser),
        proxy: options.proxy,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector,
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(options, browserOptions);
      const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, androidBrowser, browserOptions);
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      const defaultContext = browser._defaultContext;
      await controller.run(async (progress2) => {
        await defaultContext._loadDefaultContextAsIs(progress2);
      });
      return defaultContext;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async installApk(content, options) {
      const args = options && options.args ? options.args : ["-r", "-t", "-S"];
      (0, _utilsBundle.debug)("pw:android")("Opening install socket");
      const installSocket = await this._backend.open(`shell:cmd package install ${args.join(" ")} ${content.length}`);
      (0, _utilsBundle.debug)("pw:android")("Writing driver bytes: " + content.length);
      await installSocket.write(content);
      const success = await new Promise((f) => installSocket.on("data", f));
      (0, _utilsBundle.debug)("pw:android")("Written driver bytes: " + success);
      installSocket.close();
    }
    async push(content, path, mode = 420) {
      const socket = await this._backend.open(`sync:`);
      const sendHeader = async (command, length) => {
        const buffer = Buffer.alloc(command.length + 4);
        buffer.write(command, 0);
        buffer.writeUInt32LE(length, command.length);
        await socket.write(buffer);
      };
      const send = async (command, data) => {
        await sendHeader(command, data.length);
        await socket.write(data);
      };
      await send("SEND", Buffer.from(`${path},${mode}`));
      const maxChunk = 65535;
      for (let i = 0;i < content.length; i += maxChunk)
        await send("DATA", content.slice(i, i + maxChunk));
      await sendHeader("DONE", Date.now() / 1000 | 0);
      const result = await new Promise((f) => socket.once("data", f));
      const code = result.slice(0, 4).toString();
      if (code !== "OKAY")
        throw new Error("Could not push: " + code);
      socket.close();
    }
    async _refreshWebViews() {
      const sockets = (await this._backend.runCommand(`shell:cat /proc/net/unix | grep webview_devtools_remote`)).toString().split(`
`);
      if (this._isClosed)
        return;
      const socketNames = new Set;
      for (const line of sockets) {
        const matchSocketName = line.match(/[^@]+@(.*?webview_devtools_remote_?.*)/);
        if (!matchSocketName)
          continue;
        const socketName = matchSocketName[1];
        socketNames.add(socketName);
        if (this._webViews.has(socketName))
          continue;
        const match = line.match(/[^@]+@.*?webview_devtools_remote_?(\d*)/);
        let pid = -1;
        if (match && match[1])
          pid = +match[1];
        const pkg = await this._extractPkg(pid);
        if (this._isClosed)
          return;
        const webView = {
          pid,
          pkg,
          socketName
        };
        this._webViews.set(socketName, webView);
        this.emit(AndroidDevice.Events.WebViewAdded, webView);
      }
      for (const p of this._webViews.keys()) {
        if (!socketNames.has(p)) {
          this._webViews.delete(p);
          this.emit(AndroidDevice.Events.WebViewRemoved, p);
        }
      }
    }
    async _extractPkg(pid) {
      let pkg = "";
      if (pid === -1)
        return pkg;
      const procs = (await this._backend.runCommand(`shell:ps -A | grep ${pid}`)).toString().split(`
`);
      for (const proc of procs) {
        const match = proc.match(/[^\s]+\s+(\d+).*$/);
        if (!match)
          continue;
        pkg = proc.substring(proc.lastIndexOf(" ") + 1);
      }
      return pkg;
    }
  }
  exports.AndroidDevice = AndroidDevice;
  AndroidDevice.Events = {
    WebViewAdded: "webViewAdded",
    WebViewRemoved: "webViewRemoved",
    Close: "close"
  };

  class AndroidBrowser extends _events.EventEmitter {
    constructor(device, socket) {
      super();
      this.device = undefined;
      this._socket = undefined;
      this._receiver = undefined;
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this.onmessage = undefined;
      this.onclose = undefined;
      this.setMaxListeners(0);
      this.device = device;
      this._socket = socket;
      this._socket.on("close", () => {
        this._waitForNextTask(() => {
          if (this.onclose)
            this.onclose();
        });
      });
      this._receiver = new _utilsBundle.wsReceiver;
      this._receiver.on("message", (message) => {
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage(JSON.parse(message));
        });
      });
    }
    async _init() {
      await this._socket.write(Buffer.from(`GET /devtools/browser HTTP/1.1\r
Upgrade: WebSocket\r
Connection: Upgrade\r
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\r
Sec-WebSocket-Version: 13\r
\r
`));
      await new Promise((f) => this._socket.once("data", f));
      this._socket.on("data", (data) => this._receiver._write(data, "binary", () => {
      }));
    }
    async send(s) {
      await this._socket.write(encodeWebFrame(JSON.stringify(s)));
    }
    async close() {
      this._socket.close();
    }
  }
  function encodeWebFrame(data) {
    return _utilsBundle.wsSender.frame(Buffer.from(data), {
      opcode: 1,
      mask: true,
      fin: true,
      readOnly: true
    })[0];
  }

  class ClankBrowserProcess {
    constructor(browser) {
      this._browser = undefined;
      this.onclose = undefined;
      this._browser = browser;
    }
    async kill() {
    }
    async close() {
      await this._browser.close();
    }
  }
});

// node_modules/playwright-core/lib/server/android/backendAdb.js
var require_backendAdb = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AdbBackend = undefined;
  var _utilsBundle = require_utilsBundle();
  var net = _interopRequireWildcard(__require("net"));
  var _events = __require("events");
  var _utils = require_utils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class AdbBackend {
    async devices(options = {}) {
      const result = await runCommand("host:devices", options.host, options.port);
      const lines = result.toString().trim().split(`
`);
      return lines.map((line) => {
        const [serial, status] = line.trim().split("\t");
        return new AdbDevice(serial, status, options.host, options.port);
      });
    }
  }
  exports.AdbBackend = AdbBackend;

  class AdbDevice {
    constructor(serial, status, host, port) {
      this.serial = undefined;
      this.status = undefined;
      this.host = undefined;
      this.port = undefined;
      this._closed = false;
      this.serial = serial;
      this.status = status;
      this.host = host;
      this.port = port;
    }
    async init() {
    }
    async close() {
      this._closed = true;
    }
    runCommand(command) {
      if (this._closed)
        throw new Error("Device is closed");
      return runCommand(command, this.host, this.port, this.serial);
    }
    async open(command) {
      if (this._closed)
        throw new Error("Device is closed");
      const result = await open2(command, this.host, this.port, this.serial);
      result.becomeSocket();
      return result;
    }
  }
  async function runCommand(command, host = "127.0.0.1", port = 5037, serial) {
    (0, _utilsBundle.debug)("pw:adb:runCommand")(command, serial);
    const socket = new BufferedSocketWrapper(command, net.createConnection({
      host,
      port
    }));
    try {
      if (serial) {
        await socket.write(encodeMessage(`host:transport:${serial}`));
        const status2 = await socket.read(4);
        (0, _utils.assert)(status2.toString() === "OKAY", status2.toString());
      }
      await socket.write(encodeMessage(command));
      const status = await socket.read(4);
      (0, _utils.assert)(status.toString() === "OKAY", status.toString());
      let commandOutput;
      if (!command.startsWith("shell:")) {
        const remainingLength = parseInt((await socket.read(4)).toString(), 16);
        commandOutput = await socket.read(remainingLength);
      } else {
        commandOutput = await socket.readAll();
      }
      return commandOutput;
    } finally {
      socket.close();
    }
  }
  async function open2(command, host = "127.0.0.1", port = 5037, serial) {
    const socket = new BufferedSocketWrapper(command, net.createConnection({
      host,
      port
    }));
    if (serial) {
      await socket.write(encodeMessage(`host:transport:${serial}`));
      const status2 = await socket.read(4);
      (0, _utils.assert)(status2.toString() === "OKAY", status2.toString());
    }
    await socket.write(encodeMessage(command));
    const status = await socket.read(4);
    (0, _utils.assert)(status.toString() === "OKAY", status.toString());
    return socket;
  }
  function encodeMessage(message) {
    let lenHex = message.length.toString(16);
    lenHex = "0".repeat(4 - lenHex.length) + lenHex;
    return Buffer.from(lenHex + message);
  }

  class BufferedSocketWrapper extends _events.EventEmitter {
    constructor(command, socket) {
      super();
      this.guid = (0, _utils.createGuid)();
      this._socket = undefined;
      this._buffer = Buffer.from([]);
      this._isSocket = false;
      this._notifyReader = undefined;
      this._connectPromise = undefined;
      this._isClosed = false;
      this._command = undefined;
      this._command = command;
      this._socket = socket;
      this._connectPromise = new Promise((f) => this._socket.on("connect", f));
      this._socket.on("data", (data) => {
        (0, _utilsBundle.debug)("pw:adb:data")(data.toString());
        if (this._isSocket) {
          this.emit("data", data);
          return;
        }
        this._buffer = Buffer.concat([this._buffer, data]);
        if (this._notifyReader)
          this._notifyReader();
      });
      this._socket.on("close", () => {
        this._isClosed = true;
        if (this._notifyReader)
          this._notifyReader();
        this.close();
        this.emit("close");
      });
      this._socket.on("error", (error) => this.emit("error", error));
    }
    async write(data) {
      (0, _utilsBundle.debug)("pw:adb:send")(data.toString().substring(0, 100) + "...");
      await this._connectPromise;
      await new Promise((f) => this._socket.write(data, f));
    }
    close() {
      if (this._isClosed)
        return;
      (0, _utilsBundle.debug)("pw:adb")("Close " + this._command);
      this._socket.destroy();
    }
    async read(length) {
      await this._connectPromise;
      (0, _utils.assert)(!this._isSocket, "Can not read by length in socket mode");
      while (this._buffer.length < length)
        await new Promise((f) => this._notifyReader = f);
      const result = this._buffer.slice(0, length);
      this._buffer = this._buffer.slice(length);
      (0, _utilsBundle.debug)("pw:adb:recv")(result.toString().substring(0, 100) + "...");
      return result;
    }
    async readAll() {
      while (!this._isClosed)
        await new Promise((f) => this._notifyReader = f);
      return this._buffer;
    }
    becomeSocket() {
      (0, _utils.assert)(!this._buffer.length);
      this._isSocket = true;
    }
  }
});

// node_modules/playwright-core/lib/server/transport.js
var require_transport2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.perMessageDeflate = exports.WebSocketTransport = undefined;
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils();
  var _happyEyeballs = require_happy_eyeballs();
  var perMessageDeflate = exports.perMessageDeflate = {
    zlibDeflateOptions: {
      level: 3
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    threshold: 10 * 1024
  };

  class WebSocketTransport {
    static async connect(progress2, url, headers, followRedirects, debugLogHeader) {
      return await WebSocketTransport._connect(progress2, url, headers || {}, {
        follow: !!followRedirects,
        hadRedirects: false
      }, debugLogHeader);
    }
    static async _connect(progress2, url, headers, redirect, debugLogHeader) {
      const logUrl = stripQueryParams(url);
      progress2 === null || progress2 === undefined || progress2.log(`<ws connecting> ${logUrl}`);
      const transport = new WebSocketTransport(progress2, url, logUrl, headers, redirect.follow && redirect.hadRedirects, debugLogHeader);
      let success = false;
      progress2 === null || progress2 === undefined || progress2.cleanupWhenAborted(async () => {
        if (!success)
          await transport.closeAndWait().catch((e) => null);
      });
      const result = await new Promise((fulfill, reject) => {
        transport._ws.on("open", async () => {
          progress2 === null || progress2 === undefined || progress2.log(`<ws connected> ${logUrl}`);
          fulfill({
            transport
          });
        });
        transport._ws.on("error", (event) => {
          progress2 === null || progress2 === undefined || progress2.log(`<ws connect error> ${logUrl} ${event.message}`);
          reject(new Error("WebSocket error: " + event.message));
          transport._ws.close();
        });
        transport._ws.on("unexpected-response", (request, response) => {
          if (redirect.follow && !redirect.hadRedirects && (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 307 || response.statusCode === 308)) {
            fulfill({
              redirect: response
            });
            transport._ws.close();
            return;
          }
          for (let i = 0;i < response.rawHeaders.length; i += 2) {
            if (debugLogHeader && response.rawHeaders[i] === debugLogHeader)
              progress2 === null || progress2 === undefined || progress2.log(response.rawHeaders[i + 1]);
          }
          const chunks = [];
          const errorPrefix = `${logUrl} ${response.statusCode} ${response.statusMessage}`;
          response.on("data", (chunk) => chunks.push(chunk));
          response.on("close", () => {
            const error = chunks.length ? `${errorPrefix}
${Buffer.concat(chunks)}` : errorPrefix;
            progress2 === null || progress2 === undefined || progress2.log(`<ws unexpected response> ${error}`);
            reject(new Error("WebSocket error: " + error));
            transport._ws.close();
          });
        });
      });
      if (result.redirect) {
        const newHeaders = Object.fromEntries(Object.entries(headers || {}).filter(([name]) => {
          return !name.includes("access-key") && name.toLowerCase() !== "authorization";
        }));
        return WebSocketTransport._connect(progress2, result.redirect.headers.location, newHeaders, {
          follow: true,
          hadRedirects: true
        }, debugLogHeader);
      }
      success = true;
      return transport;
    }
    constructor(progress2, url, logUrl, headers, followRedirects, debugLogHeader) {
      var _progress$timeUntilDe;
      this._ws = undefined;
      this._progress = undefined;
      this._logUrl = undefined;
      this.onmessage = undefined;
      this.onclose = undefined;
      this.wsEndpoint = undefined;
      this.headers = [];
      this.wsEndpoint = url;
      this._logUrl = logUrl;
      this._ws = new _utilsBundle.ws(url, [], {
        maxPayload: 256 * 1024 * 1024,
        handshakeTimeout: Math.max((_progress$timeUntilDe = progress2 === null || progress2 === undefined ? undefined : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== undefined ? _progress$timeUntilDe : 30000, 1),
        headers,
        followRedirects,
        agent: /^(https|wss):\/\//.test(url) ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent,
        perMessageDeflate
      });
      this._ws.on("upgrade", (response) => {
        for (let i = 0;i < response.rawHeaders.length; i += 2) {
          this.headers.push({
            name: response.rawHeaders[i],
            value: response.rawHeaders[i + 1]
          });
          if (debugLogHeader && response.rawHeaders[i] === debugLogHeader)
            progress2 === null || progress2 === undefined || progress2.log(response.rawHeaders[i + 1]);
        }
      });
      this._progress = progress2;
      const messageWrap = (0, _utils.makeWaitForNextTask)();
      this._ws.addEventListener("message", (event) => {
        messageWrap(() => {
          const eventData = event.data;
          let parsedJson;
          try {
            parsedJson = JSON.parse(eventData);
          } catch (e) {
            var _this$_progress;
            (_this$_progress = this._progress) === null || _this$_progress === undefined || _this$_progress.log(`<closing ws> Closing websocket due to malformed JSON. eventData=${eventData} e=${e === null || e === undefined ? undefined : e.message}`);
            this._ws.close();
            return;
          }
          try {
            if (this.onmessage)
              this.onmessage.call(null, parsedJson);
          } catch (e) {
            var _this$_progress2;
            (_this$_progress2 = this._progress) === null || _this$_progress2 === undefined || _this$_progress2.log(`<closing ws> Closing websocket due to failed onmessage callback. eventData=${eventData} e=${e === null || e === undefined ? undefined : e.message}`);
            this._ws.close();
          }
        });
      });
      this._ws.addEventListener("close", (event) => {
        var _this$_progress3;
        (_this$_progress3 = this._progress) === null || _this$_progress3 === undefined || _this$_progress3.log(`<ws disconnected> ${logUrl} code=${event.code} reason=${event.reason}`);
        if (this.onclose)
          this.onclose.call(null, event.reason);
      });
      this._ws.addEventListener("error", (error) => {
        var _this$_progress4;
        return (_this$_progress4 = this._progress) === null || _this$_progress4 === undefined ? undefined : _this$_progress4.log(`<ws error> ${logUrl} ${error.type} ${error.message}`);
      });
    }
    send(message) {
      this._ws.send(JSON.stringify(message));
    }
    close() {
      var _this$_progress5;
      (_this$_progress5 = this._progress) === null || _this$_progress5 === undefined || _this$_progress5.log(`<ws disconnecting> ${this._logUrl}`);
      this._ws.close();
    }
    async closeAndWait() {
      if (this._ws.readyState === _utilsBundle.ws.CLOSED)
        return;
      const promise = new Promise((f) => this._ws.once("close", f));
      this.close();
      await promise;
    }
  }
  exports.WebSocketTransport = WebSocketTransport;
  function stripQueryParams(url) {
    try {
      const u = new URL(url);
      u.search = "";
      u.hash = "";
      return u.toString();
    } catch {
      return url;
    }
  }
});

// node_modules/playwright-core/lib/server/pipeTransport.js
var require_pipeTransport = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PipeTransport = undefined;
  var _utils = require_utils();
  var _debugLogger = require_debugLogger();

  class PipeTransport {
    constructor(pipeWrite, pipeRead) {
      this._pipeRead = undefined;
      this._pipeWrite = undefined;
      this._pendingBuffers = [];
      this._waitForNextTask = (0, _utils.makeWaitForNextTask)();
      this._closed = false;
      this._onclose = undefined;
      this.onmessage = undefined;
      this._pipeRead = pipeRead;
      this._pipeWrite = pipeWrite;
      pipeRead.on("data", (buffer) => this._dispatch(buffer));
      pipeRead.on("close", () => {
        this._closed = true;
        if (this._onclose)
          this._onclose.call(null);
      });
      pipeRead.on("error", (e) => _debugLogger.debugLogger.log("error", e));
      pipeWrite.on("error", (e) => _debugLogger.debugLogger.log("error", e));
      this.onmessage = undefined;
    }
    get onclose() {
      return this._onclose;
    }
    set onclose(onclose) {
      this._onclose = onclose;
      if (onclose && !this._pipeRead.readable)
        onclose();
    }
    send(message) {
      if (this._closed)
        throw new Error("Pipe has been closed");
      this._pipeWrite.write(JSON.stringify(message));
      this._pipeWrite.write("\x00");
    }
    close() {
      throw new Error("unimplemented");
    }
    _dispatch(buffer) {
      let end = buffer.indexOf("\x00");
      if (end === -1) {
        this._pendingBuffers.push(buffer);
        return;
      }
      this._pendingBuffers.push(buffer.slice(0, end));
      const message = Buffer.concat(this._pendingBuffers).toString();
      this._waitForNextTask(() => {
        if (this.onmessage)
          this.onmessage.call(null, JSON.parse(message));
      });
      let start = end + 1;
      end = buffer.indexOf("\x00", start);
      while (end !== -1) {
        const message2 = buffer.toString(undefined, start, end);
        this._waitForNextTask(() => {
          if (this.onmessage)
            this.onmessage.call(null, JSON.parse(message2));
        });
        start = end + 1;
        end = buffer.indexOf("\x00", start);
      }
      this._pendingBuffers = [buffer.slice(start)];
    }
  }
  exports.PipeTransport = PipeTransport;
});

// node_modules/playwright-core/lib/server/browserType.js
var require_browserType = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kNoXServerRunningError = exports.BrowserType = exports.BrowserReadyState = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var os = _interopRequireWildcard(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _browserContext = require_browserContext();
  var _registry = require_registry();
  var _transport = require_transport2();
  var _processLauncher = require_processLauncher();
  var _pipeTransport = require_pipeTransport();
  var _progress = require_progress();
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _helper = require_helper();
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _protocolError = require_protocolError();
  var _socksClientCertificatesInterceptor = require_socksClientCertificatesInterceptor();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var kNoXServerRunningError = exports.kNoXServerRunningError = `Looks like you launched a headed browser without having a XServer running.
` + `Set either 'headless: true' or use 'xvfb-run <your-playwright-app>' before running Playwright.

<3 Playwright Team`;

  class BrowserReadyState {
    constructor() {
      this._wsEndpoint = new _utils.ManualPromise;
    }
    onBrowserExit() {
      this._wsEndpoint.resolve(undefined);
    }
    async waitUntilReady() {
      const wsEndpoint = await this._wsEndpoint;
      return {
        wsEndpoint
      };
    }
  }
  exports.BrowserReadyState = BrowserReadyState;

  class BrowserType extends _instrumentation.SdkObject {
    constructor(parent, browserName) {
      super(parent, "browser-type");
      this._name = undefined;
      this._useBidi = false;
      this.attribution.browserType = this;
      this._name = browserName;
    }
    executablePath() {
      return _registry.registry.findExecutable(this._name).executablePath(this.attribution.playwright.options.sdkLanguage) || "";
    }
    name() {
      return this._name;
    }
    async launch(metadata, options, protocolLogger) {
      options = this._validateLaunchOptions(options);
      if (this._useBidi)
        options.useWebSocket = true;
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser = await controller.run((progress2) => {
        const seleniumHubUrl = options.__testHookSeleniumRemoteURL || process.env.SELENIUM_REMOTE_URL;
        if (seleniumHubUrl)
          return this._launchWithSeleniumHub(progress2, seleniumHubUrl, options);
        return this._innerLaunchWithRetries(progress2, options, undefined, _helper.helper.debugProtocolLogger(protocolLogger)).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
      return browser;
    }
    async launchPersistentContext(metadata, userDataDir, options) {
      const launchOptions = this._validateLaunchOptions(options);
      if (this._useBidi)
        launchOptions.useWebSocket = true;
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      const browser = await controller.run(async (progress2) => {
        var _options$clientCertif;
        let clientCertificatesProxy;
        if ((_options$clientCertif = options.clientCertificates) !== null && _options$clientCertif !== undefined && _options$clientCertif.length) {
          var _clientCertificatesPr;
          clientCertificatesProxy = new _socksClientCertificatesInterceptor.ClientCertificatesProxy(options);
          launchOptions.proxyOverride = await ((_clientCertificatesPr = clientCertificatesProxy) === null || _clientCertificatesPr === undefined ? undefined : _clientCertificatesPr.listen());
          options = {
            ...options
          };
          options.internalIgnoreHTTPSErrors = true;
        }
        progress2.cleanupWhenAborted(() => {
          var _clientCertificatesPr2;
          return (_clientCertificatesPr2 = clientCertificatesProxy) === null || _clientCertificatesPr2 === undefined ? undefined : _clientCertificatesPr2.close();
        });
        const browser2 = await this._innerLaunchWithRetries(progress2, launchOptions, options, _helper.helper.debugProtocolLogger(), userDataDir).catch((e) => {
          throw this._rewriteStartupLog(e);
        });
        browser2._defaultContext._clientCertificatesProxy = clientCertificatesProxy;
        return browser2;
      }, _timeoutSettings.TimeoutSettings.launchTimeout(launchOptions));
      return browser._defaultContext;
    }
    async _innerLaunchWithRetries(progress2, options, persistent, protocolLogger, userDataDir) {
      try {
        return await this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
      } catch (error) {
        const errorMessage = typeof error === "object" && typeof error.message === "string" ? error.message : "";
        if (errorMessage.includes("Inconsistency detected by ld.so")) {
          progress2.log(`<restarting browser due to hitting race condition in glibc>`);
          return this._innerLaunch(progress2, options, persistent, protocolLogger, userDataDir);
        }
        throw error;
      }
    }
    async _innerLaunch(progress2, options, persistent, protocolLogger, maybeUserDataDir) {
      options.proxy = options.proxy ? (0, _browserContext.normalizeProxySettings)(options.proxy) : undefined;
      const browserLogsCollector = new _debugLogger.RecentLogsCollector;
      const {
        browserProcess,
        userDataDir,
        artifactsDir,
        transport
      } = await this._launchProcess(progress2, options, !!persistent, browserLogsCollector, maybeUserDataDir);
      if (options.__testHookBeforeCreateBrowser)
        await options.__testHookBeforeCreateBrowser();
      const browserOptions = {
        name: this._name,
        isChromium: this._name === "chromium",
        channel: options.channel,
        slowMo: options.slowMo,
        persistent,
        headful: !options.headless,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        browserProcess,
        customExecutablePath: options.executablePath,
        proxy: options.proxy,
        protocolLogger,
        browserLogsCollector,
        wsEndpoint: options.useWebSocket ? transport.wsEndpoint : undefined,
        originalLaunchOptions: options
      };
      if (persistent)
        (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      copyTestHooks(options, browserOptions);
      const browser = await this.connectToTransport(transport, browserOptions);
      browser._userDataDirForTest = userDataDir;
      if (persistent && !options.ignoreAllDefaultArgs)
        await browser._defaultContext._loadDefaultContext(progress2);
      return browser;
    }
    async _launchProcess(progress2, options, isPersistent, browserLogsCollector, userDataDir) {
      var _await$readyState$wai;
      const {
        ignoreDefaultArgs,
        ignoreAllDefaultArgs,
        args = [],
        executablePath = null,
        handleSIGINT = true,
        handleSIGTERM = true,
        handleSIGHUP = true
      } = options;
      const env = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
      await this._createArtifactDirs(options);
      const tempDirectories = [];
      const artifactsDir = await _fs.default.promises.mkdtemp(_path.default.join(os.tmpdir(), "playwright-artifacts-"));
      tempDirectories.push(artifactsDir);
      if (userDataDir) {
        if (!await (0, _fileUtils.existsAsync)(userDataDir))
          await _fs.default.promises.mkdir(userDataDir, {
            recursive: true,
            mode: 448
          });
      } else {
        userDataDir = await _fs.default.promises.mkdtemp(_path.default.join(os.tmpdir(), `playwright_${this._name}dev_profile-`));
        tempDirectories.push(userDataDir);
      }
      await this.prepareUserDataDir(options, userDataDir);
      const browserArguments = [];
      if (ignoreAllDefaultArgs)
        browserArguments.push(...args);
      else if (ignoreDefaultArgs)
        browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir).filter((arg) => ignoreDefaultArgs.indexOf(arg) === -1));
      else
        browserArguments.push(...this.defaultArgs(options, isPersistent, userDataDir));
      let executable;
      if (executablePath) {
        if (!await (0, _fileUtils.existsAsync)(executablePath))
          throw new Error(`Failed to launch ${this._name} because executable doesn't exist at ${executablePath}`);
        executable = executablePath;
      } else {
        const registryExecutable = _registry.registry.findExecutable(this.getExecutableName(options));
        if (!registryExecutable || registryExecutable.browserName !== this._name)
          throw new Error(`Unsupported ${this._name} channel "${options.channel}"`);
        executable = registryExecutable.executablePathOrDie(this.attribution.playwright.options.sdkLanguage);
        await _registry.registry.validateHostRequirementsForExecutablesIfNeeded([registryExecutable], this.attribution.playwright.options.sdkLanguage);
      }
      const readyState = this.readyState(options);
      let transport = undefined;
      let browserProcess = undefined;
      const {
        launchedProcess,
        gracefullyClose,
        kill
      } = await (0, _processLauncher.launchProcess)({
        command: executable,
        args: browserArguments,
        env: this.amendEnvironment(env, userDataDir, executable, browserArguments),
        handleSIGINT,
        handleSIGTERM,
        handleSIGHUP,
        log: (message) => {
          readyState === null || readyState === undefined || readyState.onBrowserOutput(message);
          progress2.log(message);
          browserLogsCollector.log(message);
        },
        stdio: "pipe",
        tempDirectories,
        attemptToGracefullyClose: async () => {
          if (options.__testHookGracefullyClose)
            await options.__testHookGracefullyClose();
          this.attemptToGracefullyCloseBrowser(transport);
        },
        onExit: (exitCode, signal) => {
          readyState === null || readyState === undefined || readyState.onBrowserExit();
          if (browserProcess && browserProcess.onclose)
            browserProcess.onclose(exitCode, signal);
        }
      });
      async function closeOrKill(timeout) {
        let timer;
        try {
          await Promise.race([gracefullyClose(), new Promise((resolve, reject) => timer = setTimeout(reject, timeout))]);
        } catch (ignored) {
          await kill().catch((ignored2) => {
          });
        } finally {
          clearTimeout(timer);
        }
      }
      browserProcess = {
        onclose: undefined,
        process: launchedProcess,
        close: () => closeOrKill(options.__testHookBrowserCloseTimeout || _timeoutSettings.DEFAULT_TIMEOUT),
        kill
      };
      progress2.cleanupWhenAborted(() => closeOrKill(progress2.timeUntilDeadline()));
      const wsEndpoint = (_await$readyState$wai = await (readyState === null || readyState === undefined ? undefined : readyState.waitUntilReady())) === null || _await$readyState$wai === undefined ? undefined : _await$readyState$wai.wsEndpoint;
      if (options.useWebSocket) {
        transport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint);
      } else {
        const stdio = launchedProcess.stdio;
        transport = new _pipeTransport.PipeTransport(stdio[3], stdio[4]);
      }
      return {
        browserProcess,
        artifactsDir,
        userDataDir,
        transport
      };
    }
    async _createArtifactDirs(options) {
      if (options.downloadsPath)
        await _fs.default.promises.mkdir(options.downloadsPath, {
          recursive: true
        });
      if (options.tracesDir)
        await _fs.default.promises.mkdir(options.tracesDir, {
          recursive: true
        });
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      throw new Error("CDP connections are only supported by Chromium");
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      throw new Error("Connecting to SELENIUM_REMOTE_URL is only supported by Chromium");
    }
    _validateLaunchOptions(options) {
      const {
        devtools = false
      } = options;
      let {
        headless = !devtools,
        downloadsPath,
        proxy
      } = options;
      if ((0, _utils.debugMode)())
        headless = false;
      if (downloadsPath && !_path.default.isAbsolute(downloadsPath))
        downloadsPath = _path.default.join(process.cwd(), downloadsPath);
      if (this.attribution.playwright.options.socksProxyPort)
        proxy = {
          server: `socks5://127.0.0.1:${this.attribution.playwright.options.socksProxyPort}`
        };
      return {
        ...options,
        devtools,
        headless,
        downloadsPath,
        proxy
      };
    }
    _createUserDataDirArgMisuseError(userDataDirArg) {
      switch (this.attribution.playwright.options.sdkLanguage) {
        case "java":
          return new Error(`Pass userDataDir parameter to 'BrowserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        case "python":
          return new Error(`Pass user_data_dir parameter to 'browser_type.launch_persistent_context(user_data_dir, **kwargs)' instead of specifying '${userDataDirArg}' argument`);
        case "csharp":
          return new Error(`Pass userDataDir parameter to 'BrowserType.LaunchPersistentContextAsync(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
        default:
          return new Error(`Pass userDataDir parameter to 'browserType.launchPersistentContext(userDataDir, options)' instead of specifying '${userDataDirArg}' argument`);
      }
    }
    _rewriteStartupLog(error) {
      if (!(0, _protocolError.isProtocolError)(error))
        return error;
      return this.doRewriteStartupLog(error);
    }
    readyState(options) {
      return;
    }
    async prepareUserDataDir(options, userDataDir) {
    }
    getExecutableName(options) {
      return options.channel || this._name;
    }
  }
  exports.BrowserType = BrowserType;
  function copyTestHooks(from, to) {
    for (const [key, value] of Object.entries(from)) {
      if (key.startsWith("__testHook"))
        to[key] = value;
    }
  }
});

// node_modules/playwright-core/lib/server/chromium/crDevTools.js
var require_crDevTools = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CRDevTools = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var kBindingName = "__pw_devtools__";

  class CRDevTools {
    constructor(preferencesPath) {
      this._preferencesPath = undefined;
      this._prefs = undefined;
      this._savePromise = undefined;
      this.__testHookOnBinding = undefined;
      this._preferencesPath = preferencesPath;
      this._savePromise = Promise.resolve();
    }
    install(session) {
      session.on("Runtime.bindingCalled", async (event) => {
        if (event.name !== kBindingName)
          return;
        const parsed = JSON.parse(event.payload);
        let result = undefined;
        if (this.__testHookOnBinding)
          this.__testHookOnBinding(parsed);
        if (parsed.method === "getPreferences") {
          if (this._prefs === undefined) {
            try {
              const json = await _fs.default.promises.readFile(this._preferencesPath, "utf8");
              this._prefs = JSON.parse(json);
            } catch (e) {
              this._prefs = {};
            }
          }
          result = this._prefs;
        } else if (parsed.method === "setPreference") {
          this._prefs[parsed.params[0]] = parsed.params[1];
          this._save();
        } else if (parsed.method === "removePreference") {
          delete this._prefs[parsed.params[0]];
          this._save();
        } else if (parsed.method === "clearPreferences") {
          this._prefs = {};
          this._save();
        }
        session.send("Runtime.evaluate", {
          expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,
          contextId: event.executionContextId
        }).catch((e) => null);
      });
      Promise.all([session.send("Runtime.enable"), session.send("Runtime.addBinding", {
        name: kBindingName
      }), session.send("Page.enable"), session.send("Page.addScriptToEvaluateOnNewDocument", {
        source: `
        (() => {
          const init = () => {
            // Lazy init happens when InspectorFrontendHost is initialized.
            // At this point DevToolsHost is ready to be used.
            const host = window.DevToolsHost;
            const old = host.sendMessageToEmbedder.bind(host);
            host.sendMessageToEmbedder = message => {
              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))
                window.${kBindingName}(message);
              else
                old(message);
            };
          };
          let value;
          Object.defineProperty(window, 'InspectorFrontendHost', {
            configurable: true,
            enumerable: true,
            get() { return value; },
            set(v) { value = v; init(); },
          });
        })()
      `
      }), session.send("Runtime.runIfWaitingForDebugger")]).catch((e) => null);
    }
    _save() {
      this._savePromise = this._savePromise.then(async () => {
        await _fs.default.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch((e) => null);
      });
    }
  }
  exports.CRDevTools = CRDevTools;
});

// node_modules/playwright-core/lib/server/chromium/chromium.js
var require_chromium = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Chromium = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _os = _interopRequireDefault(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _crBrowser = require_crBrowser();
  var _processLauncher = require_processLauncher();
  var _crConnection = require_crConnection();
  var _browserType = require_browserType();
  var _transport = require_transport2();
  var _crDevTools = require_crDevTools();
  var _browser = require_browser();
  var _network = require_network();
  var _userAgent = require_userAgent();
  var _ascii = require_ascii();
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _debugLogger = require_debugLogger();
  var _progress = require_progress();
  var _timeoutSettings = require_timeoutSettings();
  var _helper = require_helper();
  var _registry = require_registry();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _chromiumSwitches = require_chromiumSwitches();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class Chromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "chromium");
      this._devtools = undefined;
      if ((0, _utils.debugMode)())
        this._devtools = this._createDevTools();
    }
    async connectOverCDP(metadata, endpointURL, options, timeout) {
      const controller = new _progress.ProgressController(metadata, this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        return await this._connectOverCDPInternal(progress2, endpointURL, options);
      }, _timeoutSettings.TimeoutSettings.timeout({
        timeout
      }));
    }
    async _connectOverCDPInternal(progress2, endpointURL, options, onClose) {
      let headersMap;
      if (options.headers)
        headersMap = (0, _utils.headersArrayToObject)(options.headers, false);
      if (!headersMap)
        headersMap = {
          "User-Agent": (0, _userAgent.getUserAgent)()
        };
      else if (headersMap && !Object.keys(headersMap).some((key) => key.toLowerCase() === "user-agent"))
        headersMap["User-Agent"] = (0, _userAgent.getUserAgent)();
      const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
      const wsEndpoint = await urlToWSEndpoint(progress2, endpointURL, headersMap);
      progress2.throwIfAborted();
      const chromeTransport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, headersMap);
      const cleanedUp = new _manualPromise.ManualPromise;
      const doCleanup = async () => {
        await (0, _fileUtils.removeFolders)([artifactsDir]);
        await (onClose === null || onClose === undefined ? undefined : onClose());
        cleanedUp.resolve();
      };
      const doClose = async () => {
        await chromeTransport.closeAndWait();
        await cleanedUp;
      };
      const browserProcess = {
        close: doClose,
        kill: doClose
      };
      const persistent = {
        noDefaultViewport: true
      };
      const browserOptions = {
        slowMo: options.slowMo,
        name: "chromium",
        isChromium: true,
        persistent,
        browserProcess,
        protocolLogger: _helper.helper.debugProtocolLogger(),
        browserLogsCollector: new _debugLogger.RecentLogsCollector,
        artifactsDir,
        downloadsPath: options.downloadsPath || artifactsDir,
        tracesDir: options.tracesDir || artifactsDir,
        originalLaunchOptions: {}
      };
      (0, _browserContext.validateBrowserContextOptions)(persistent, browserOptions);
      progress2.throwIfAborted();
      const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
      browser._isCollocatedWithServer = false;
      browser.on(_browser.Browser.Events.Disconnected, doCleanup);
      return browser;
    }
    _createDevTools() {
      const directory = _registry.registry.findExecutable("chromium").directory;
      return directory ? new _crDevTools.CRDevTools(_path.default.join(directory, "devtools-preferences.json")) : undefined;
    }
    async connectToTransport(transport, options) {
      let devtools = this._devtools;
      if (options.__testHookForDevTools) {
        devtools = this._createDevTools();
        await options.__testHookForDevTools(devtools);
      }
      return _crBrowser.CRBrowser.connect(this.attribution.playwright, transport, options, devtools);
    }
    doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("Missing X server"))
        error.logs = `
` + (0, _ascii.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180"))
        return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join(`
`);
      return error;
    }
    amendEnvironment(env, userDataDir, executable, browserArguments) {
      return env;
    }
    attemptToGracefullyCloseBrowser(transport) {
      const message = {
        method: "Browser.close",
        id: _crConnection.kBrowserCloseMessageId,
        params: {}
      };
      transport.send(message);
    }
    async _launchWithSeleniumHub(progress2, hubUrl, options) {
      await this._createArtifactDirs(options);
      if (!hubUrl.endsWith("/"))
        hubUrl = hubUrl + "/";
      const args = this._innerDefaultArgs(options);
      args.push("--remote-debugging-port=0");
      const isEdge = options.channel && options.channel.startsWith("msedge");
      let desiredCapabilities = {
        browserName: isEdge ? "MicrosoftEdge" : "chrome",
        [isEdge ? "ms:edgeOptions" : "goog:chromeOptions"]: {
          args
        }
      };
      if (process.env.SELENIUM_REMOTE_CAPABILITIES) {
        const remoteCapabilities = parseSeleniumRemoteParams({
          name: "capabilities",
          value: process.env.SELENIUM_REMOTE_CAPABILITIES
        }, progress2);
        if (remoteCapabilities)
          desiredCapabilities = {
            ...desiredCapabilities,
            ...remoteCapabilities
          };
      }
      let headers = {};
      if (process.env.SELENIUM_REMOTE_HEADERS) {
        const remoteHeaders = parseSeleniumRemoteParams({
          name: "headers",
          value: process.env.SELENIUM_REMOTE_HEADERS
        }, progress2);
        if (remoteHeaders)
          headers = remoteHeaders;
      }
      progress2.log(`<selenium> connecting to ${hubUrl}`);
      const response = await (0, _network.fetchData)({
        url: hubUrl + "session",
        method: "POST",
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          ...headers
        },
        data: JSON.stringify({
          capabilities: {
            alwaysMatch: desiredCapabilities
          }
        }),
        timeout: progress2.timeUntilDeadline()
      }, seleniumErrorHandler);
      const value = JSON.parse(response).value;
      const sessionId = value.sessionId;
      progress2.log(`<selenium> connected to sessionId=${sessionId}`);
      const disconnectFromSelenium = async () => {
        progress2.log(`<selenium> disconnecting from sessionId=${sessionId}`);
        await (0, _network.fetchData)({
          url: hubUrl + "session/" + sessionId,
          method: "DELETE",
          headers
        }).catch((error) => progress2.log(`<error disconnecting from selenium>: ${error}`));
        progress2.log(`<selenium> disconnected from sessionId=${sessionId}`);
        _processLauncher.gracefullyCloseSet.delete(disconnectFromSelenium);
      };
      _processLauncher.gracefullyCloseSet.add(disconnectFromSelenium);
      try {
        const capabilities = value.capabilities;
        let endpointURL;
        if (capabilities["se:cdp"]) {
          progress2.log(`<selenium> using selenium v4`);
          const endpointURLString = addProtocol(capabilities["se:cdp"]);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1")
            endpointURL.hostname = new URL(hubUrl).hostname;
          progress2.log(`<selenium> retrieved endpoint ${endpointURL.toString()} for sessionId=${sessionId}`);
        } else {
          progress2.log(`<selenium> using selenium v3`);
          const maybeChromeOptions = capabilities["goog:chromeOptions"];
          const chromeOptions = maybeChromeOptions && typeof maybeChromeOptions === "object" ? maybeChromeOptions : undefined;
          const debuggerAddress = chromeOptions && typeof chromeOptions.debuggerAddress === "string" ? chromeOptions.debuggerAddress : undefined;
          const chromeOptionsURL = typeof maybeChromeOptions === "string" ? maybeChromeOptions : undefined;
          const endpointURLString = addProtocol(debuggerAddress || chromeOptionsURL).replace("localhost", "127.0.0.1");
          progress2.log(`<selenium> retrieved endpoint ${endpointURLString} for sessionId=${sessionId}`);
          endpointURL = new URL(endpointURLString);
          if (endpointURL.hostname === "localhost" || endpointURL.hostname === "127.0.0.1") {
            const sessionInfoUrl = new URL(hubUrl).origin + "/grid/api/testsession?session=" + sessionId;
            try {
              const sessionResponse = await (0, _network.fetchData)({
                url: sessionInfoUrl,
                method: "GET",
                timeout: progress2.timeUntilDeadline(),
                headers
              }, seleniumErrorHandler);
              const proxyId = JSON.parse(sessionResponse).proxyId;
              endpointURL.hostname = new URL(proxyId).hostname;
              progress2.log(`<selenium> resolved endpoint ip ${endpointURL.toString()} for sessionId=${sessionId}`);
            } catch (e) {
              progress2.log(`<selenium> unable to resolve endpoint ip for sessionId=${sessionId}, running in standalone?`);
            }
          }
        }
        return await this._connectOverCDPInternal(progress2, endpointURL.toString(), {
          ...options,
          headers: (0, _utils.headersObjectToArray)(headers)
        }, disconnectFromSelenium);
      } catch (e) {
        await disconnectFromSelenium();
        throw e;
      }
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      if (options.useWebSocket)
        chromeArguments.push("--remote-debugging-port=0");
      else
        chromeArguments.push("--remote-debugging-pipe");
      if (isPersistent)
        chromeArguments.push("about:blank");
      else
        chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    _innerDefaultArgs(options) {
      const {
        args = []
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe")))
        throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless && (!options.channel || options.channel === "chromium-headless-shell"))
          chromeArguments.push("--use-angle");
      }
      if (options.devtools)
        chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        chromeArguments.push("--headless");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true)
        chromeArguments.push("--no-sandbox");
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort)
          proxyBypassRules.push("<-loopback>");
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
    readyState(options) {
      var _options$args;
      if (options.useWebSocket || (_options$args = options.args) !== null && _options$args !== undefined && _options$args.some((a) => a.startsWith("--remote-debugging-port")))
        return new ChromiumReadyState;
      return;
    }
    getExecutableName(options) {
      if (options.channel)
        return options.channel;
      return options.headless ? "chromium-headless-shell" : "chromium";
    }
  }
  exports.Chromium = Chromium;

  class ChromiumReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/DevTools listening on (.*)/);
      if (match)
        this._wsEndpoint.resolve(match[1]);
    }
  }
  async function urlToWSEndpoint(progress2, endpointURL, headers) {
    if (endpointURL.startsWith("ws"))
      return endpointURL;
    progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const httpURL = endpointURL.endsWith("/") ? `${endpointURL}json/version/` : `${endpointURL}/json/version/`;
    const json = await (0, _network.fetchData)({
      url: httpURL,
      headers
    }, async (_, resp) => new Error(`Unexpected status ${resp.statusCode} when connecting to ${httpURL}.
` + `This does not look like a DevTools server, try connecting via ws://.`));
    return JSON.parse(json).webSocketDebuggerUrl;
  }
  async function seleniumErrorHandler(params, response) {
    const body = await streamToString(response);
    let message = body;
    try {
      const json = JSON.parse(body);
      message = json.value.localizedMessage || json.value.message;
    } catch (e) {
    }
    return new Error(`Error connecting to Selenium at ${params.url}: ${message}`);
  }
  function addProtocol(url) {
    if (!["ws://", "wss://", "http://", "https://"].some((protocol) => url.startsWith(protocol)))
      return "http://" + url;
    return url;
  }
  function streamToString(stream) {
    return new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", (chunk) => chunks.push(Buffer.from(chunk)));
      stream.on("error", reject);
      stream.on("end", () => resolve(Buffer.concat(chunks).toString("utf8")));
    });
  }
  function parseSeleniumRemoteParams(env, progress2) {
    try {
      const parsed = JSON.parse(env.value);
      progress2.log(`<selenium> using additional ${env.name} "${env.value}"`);
      return parsed;
    } catch (e) {
      progress2.log(`<selenium> ignoring additional ${env.name} "${env.value}": ${e}`);
    }
  }
});

// node_modules/electron/index.js
var require_electron = __commonJS((exports, module) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/electron";
  var fs = __require("fs");
  var path = __require("path");
  var pathFile = path.join(__dirname, "path.txt");
  function getElectronPath() {
    let executablePath;
    if (fs.existsSync(pathFile)) {
      executablePath = fs.readFileSync(pathFile, "utf-8");
    }
    if (process.env.ELECTRON_OVERRIDE_DIST_PATH) {
      return path.join(process.env.ELECTRON_OVERRIDE_DIST_PATH, executablePath || "electron");
    }
    if (executablePath) {
      return path.join(__dirname, "dist", executablePath);
    } else {
      throw new Error("Electron failed to install correctly, please delete node_modules/electron and try installing again");
    }
  }
  module.exports = getElectronPath();
});

// node_modules/playwright-core/lib/server/electron/loader.js
var require_loader = __commonJS(() => {
  var {
    app
  } = require_electron();
  var {
    chromiumSwitches
  } = require_chromiumSwitches();
  process.argv.splice(1, process.argv.indexOf("--remote-debugging-port=0"));
  for (const arg of chromiumSwitches) {
    const match = arg.match(/--([^=]*)=?(.*)/);
    app.commandLine.appendSwitch(match[1], match[2]);
  }
  var originalWhenReady = app.whenReady();
  var originalEmit = app.emit.bind(app);
  var readyEventArgs;
  app.emit = (event, ...args) => {
    if (event === "ready") {
      readyEventArgs = args;
      return app.listenerCount("ready") > 0;
    }
    return originalEmit(event, ...args);
  };
  var isReady = false;
  var whenReadyCallback;
  var whenReadyPromise = new Promise((f) => whenReadyCallback = f);
  app.isReady = () => isReady;
  app.whenReady = () => whenReadyPromise;
  globalThis.__playwright_run = async () => {
    const event = await originalWhenReady;
    isReady = true;
    whenReadyCallback(event);
    originalEmit("ready", ...readyEventArgs);
  };
});

// node_modules/playwright-core/lib/server/electron/electron.js
var require_electron2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronApplication = exports.Electron = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _os = _interopRequireDefault(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _crBrowser = require_crBrowser();
  var _crConnection = require_crConnection();
  var _crExecutionContext = require_crExecutionContext();
  var js = _interopRequireWildcard(require_javascript());
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils();
  var _transport = require_transport2();
  var _processLauncher = require_processLauncher();
  var _browserContext = require_browserContext();
  var _progress = require_progress();
  var _helper = require_helper();
  var _eventsHelper = require_eventsHelper();
  var readline = _interopRequireWildcard(__require("readline"));
  var _debugLogger = require_debugLogger();
  var _instrumentation = require_instrumentation();
  var _crProtocolHelper = require_crProtocolHelper();
  var _console = require_console();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var ARTIFACTS_FOLDER = _path.default.join(_os.default.tmpdir(), "playwright-artifacts-");

  class ElectronApplication extends _instrumentation.SdkObject {
    constructor(parent, browser, nodeConnection, process2) {
      super(parent, "electron-app");
      this._browserContext = undefined;
      this._nodeConnection = undefined;
      this._nodeSession = undefined;
      this._nodeExecutionContext = undefined;
      this._nodeElectronHandlePromise = new _utils.ManualPromise;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._process = undefined;
      this._process = process2;
      this._browserContext = browser._defaultContext;
      this._nodeConnection = nodeConnection;
      this._nodeSession = nodeConnection.rootSession;
      this._nodeSession.on("Runtime.executionContextCreated", async (event) => {
        if (!event.context.auxData || !event.context.auxData.isDefault)
          return;
        const crExecutionContext = new _crExecutionContext.CRExecutionContext(this._nodeSession, event.context);
        this._nodeExecutionContext = new js.ExecutionContext(this, crExecutionContext, "electron");
        const {
          result: remoteObject
        } = await crExecutionContext._client.send("Runtime.evaluate", {
          expression: `require('electron')`,
          contextId: event.context.id,
          includeCommandLineAPI: true
        });
        this._nodeElectronHandlePromise.resolve(new js.JSHandle(this._nodeExecutionContext, "object", "ElectronModule", remoteObject.objectId));
      });
      this._nodeSession.on("Runtime.consoleAPICalled", (event) => this._onConsoleAPI(event));
      const appClosePromise = new Promise((f) => this.once(ElectronApplication.Events.Close, f));
      this._browserContext.setCustomCloseHandler(async () => {
        await this._browserContext.stopVideoRecording();
        const electronHandle = await this._nodeElectronHandlePromise;
        await electronHandle.evaluate(({
          app
        }) => app.quit()).catch(() => {
        });
        this._nodeConnection.close();
        await appClosePromise;
      });
    }
    async _onConsoleAPI(event) {
      if (event.executionContextId === 0) {
        return;
      }
      if (!this._nodeExecutionContext)
        return;
      const args = event.args.map((arg) => this._nodeExecutionContext.createHandle(arg));
      const message = new _console.ConsoleMessage(null, event.type, undefined, args, (0, _crProtocolHelper.toConsoleMessageLocation)(event.stackTrace));
      this.emit(ElectronApplication.Events.Console, message);
    }
    async initialize() {
      await this._nodeSession.send("Runtime.enable", {});
      await this._nodeSession.send("Runtime.evaluate", {
        expression: "__playwright_run()"
      });
    }
    process() {
      return this._process;
    }
    context() {
      return this._browserContext;
    }
    async close() {
      await this._browserContext.close({
        reason: "Application exited"
      });
    }
    async browserWindow(page) {
      const targetId = page._delegate._targetId;
      const electronHandle = await this._nodeElectronHandlePromise;
      return await electronHandle.evaluateHandle(({
        BrowserWindow,
        webContents
      }, targetId2) => {
        const wc = webContents.fromDevToolsTargetId(targetId2);
        return BrowserWindow.fromWebContents(wc);
      }, targetId);
    }
  }
  exports.ElectronApplication = ElectronApplication;
  ElectronApplication.Events = {
    Close: "close",
    Console: "console"
  };

  class Electron extends _instrumentation.SdkObject {
    constructor(playwright) {
      super(playwright, "electron");
    }
    async launch(options) {
      const {
        args = []
      } = options;
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), this);
      controller.setLogName("browser");
      return controller.run(async (progress2) => {
        let app = undefined;
        let electronArguments = ["--inspect=0", "--remote-debugging-port=0", ...args];
        if (_os.default.platform() === "linux") {
          const runningAsRoot = process.geteuid && process.geteuid() === 0;
          if (runningAsRoot && electronArguments.indexOf("--no-sandbox") === -1)
            electronArguments.unshift("--no-sandbox");
        }
        const artifactsDir = await _fs.default.promises.mkdtemp(ARTIFACTS_FOLDER);
        const browserLogsCollector = new _debugLogger.RecentLogsCollector;
        const env = options.env ? (0, _processLauncher.envArrayToObject)(options.env) : process.env;
        let command;
        if (options.executablePath) {
          command = options.executablePath;
        } else {
          try {
            command = require_electron();
          } catch (error) {
            if ((error === null || error === undefined ? undefined : error.code) === "MODULE_NOT_FOUND") {
              throw new Error(`
` + (0, _utils.wrapInASCIIBox)(["Electron executablePath not found!", "Please install it using `npm install -D electron` or set the executablePath to your Electron executable."].join(`
`), 1));
            }
            throw error;
          }
          electronArguments.unshift("-r", __require.resolve("/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/server/electron/loader.js"));
        }
        let shell = false;
        if (process.platform === "win32") {
          shell = true;
          command = `"${command}"`;
          electronArguments = electronArguments.map((arg) => `"${arg}"`);
        }
        delete env.NODE_OPTIONS;
        const {
          launchedProcess,
          gracefullyClose,
          kill
        } = await (0, _processLauncher.launchProcess)({
          command,
          args: electronArguments,
          env,
          log: (message) => {
            progress2.log(message);
            browserLogsCollector.log(message);
          },
          shell,
          stdio: "pipe",
          cwd: options.cwd,
          tempDirectories: [artifactsDir],
          attemptToGracefullyClose: () => app.close(),
          handleSIGINT: true,
          handleSIGTERM: true,
          handleSIGHUP: true,
          onExit: () => {
            var _app;
            return (_app = app) === null || _app === undefined ? undefined : _app.emit(ElectronApplication.Events.Close);
          }
        });
        const waitForXserverError = new Promise(async (resolve, reject) => {
          waitForLine(progress2, launchedProcess, /Unable to open X display/).then(() => reject(new Error(["Unable to open X display!", `================================`, "Most likely this is because there is no X server available.", "Use 'xvfb-run' on Linux to launch your tests with an emulated display server.", "For example: 'xvfb-run npm run test:e2e'", `================================`, progress2.metadata.log].join(`
`)))).catch(() => {
          });
        });
        const nodeMatchPromise = waitForLine(progress2, launchedProcess, /^Debugger listening on (ws:\/\/.*)$/);
        const chromeMatchPromise = waitForLine(progress2, launchedProcess, /^DevTools listening on (ws:\/\/.*)$/);
        const debuggerDisconnectPromise = waitForLine(progress2, launchedProcess, /Waiting for the debugger to disconnect\.\.\./);
        const nodeMatch = await nodeMatchPromise;
        const nodeTransport = await _transport.WebSocketTransport.connect(progress2, nodeMatch[1]);
        const nodeConnection = new _crConnection.CRConnection(nodeTransport, _helper.helper.debugProtocolLogger(), browserLogsCollector);
        debuggerDisconnectPromise.then(() => {
          nodeTransport.close();
        }).catch(() => {
        });
        const chromeMatch = await Promise.race([chromeMatchPromise, waitForXserverError]);
        const chromeTransport = await _transport.WebSocketTransport.connect(progress2, chromeMatch[1]);
        const browserProcess = {
          onclose: undefined,
          process: launchedProcess,
          close: gracefullyClose,
          kill
        };
        const contextOptions = {
          ...options,
          noDefaultViewport: true
        };
        const browserOptions = {
          name: "electron",
          isChromium: true,
          headful: true,
          persistent: contextOptions,
          browserProcess,
          protocolLogger: _helper.helper.debugProtocolLogger(),
          browserLogsCollector,
          artifactsDir,
          downloadsPath: artifactsDir,
          tracesDir: options.tracesDir || artifactsDir,
          originalLaunchOptions: {}
        };
        (0, _browserContext.validateBrowserContextOptions)(contextOptions, browserOptions);
        const browser = await _crBrowser.CRBrowser.connect(this.attribution.playwright, chromeTransport, browserOptions);
        app = new ElectronApplication(this, browser, nodeConnection, launchedProcess);
        await app.initialize();
        return app;
      }, _timeoutSettings.TimeoutSettings.launchTimeout(options));
    }
  }
  exports.Electron = Electron;
  function waitForLine(progress2, process2, regex) {
    return new Promise((resolve, reject) => {
      const rl = readline.createInterface({
        input: process2.stderr
      });
      const failError = new Error("Process failed to launch!");
      const listeners = [
        _eventsHelper.eventsHelper.addEventListener(rl, "line", onLine),
        _eventsHelper.eventsHelper.addEventListener(rl, "close", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "exit", reject.bind(null, failError)),
        _eventsHelper.eventsHelper.addEventListener(process2, "error", reject.bind(null, failError))
      ];
      progress2.cleanupWhenAborted(cleanup);
      function onLine(line) {
        const match = line.match(regex);
        if (!match)
          return;
        cleanup();
        resolve(match);
      }
      function cleanup() {
        _eventsHelper.eventsHelper.removeEventListeners(listeners);
      }
    });
  }
});

// node_modules/playwright-core/lib/server/firefox/ffConnection.js
var require_ffConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.FFSession = exports.FFConnection = exports.ConnectionEvents = undefined;
  var _events = __require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var ConnectionEvents = exports.ConnectionEvents = {
    Disconnected: Symbol("Disconnected")
  };
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;

  class FFConnection extends _events.EventEmitter {
    constructor(transport, protocolLogger, browserLogsCollector) {
      super();
      this._lastId = undefined;
      this._transport = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this.rootSession = undefined;
      this._sessions = undefined;
      this._closed = undefined;
      this.setMaxListeners(0);
      this._transport = transport;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this._lastId = 0;
      this._sessions = new Map;
      this._closed = false;
      this.rootSession = new FFSession(this, "", (message) => this._rawSend(message));
      this._sessions.set("", this.rootSession);
      this._transport.onmessage = this._onMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    _rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    async _onMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      const session = this._sessions.get(message.sessionId || "");
      if (session)
        session.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.rootSession.dispose();
      Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    createSession(sessionId) {
      const session = new FFSession(this, sessionId, (message) => this._rawSend({
        ...message,
        sessionId
      }));
      this._sessions.set(sessionId, session);
      return session;
    }
  }
  exports.FFConnection = FFConnection;

  class FFSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this._connection = undefined;
      this._disposed = false;
      this._callbacks = undefined;
      this._sessionId = undefined;
      this._rawSend = undefined;
      this._crashed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this._callbacks = new Map;
      this._connection = connection;
      this._sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    markAsCrashed() {
      this._crashed = true;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this._connection._closed || this._connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this._connection._browserDisconnectedLogs);
      const id = this._connection.nextMessageId();
      this._rawSend({
        method,
        params,
        id
      });
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    dispatchMessage(object) {
      if (object.id) {
        const callback = this._callbacks.get(object.id);
        if (callback) {
          this._callbacks.delete(object.id);
          if (object.error) {
            callback.error.setMessage(object.error.message);
            callback.reject(callback.error);
          } else {
            callback.resolve(object.result);
          }
        }
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
    dispose() {
      this._disposed = true;
      this._connection._sessions.delete(this._sessionId);
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this._connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
  }
  exports.FFSession = FFSession;
});

// node_modules/playwright-core/lib/server/firefox/ffAccessibility.js
var require_ffAccessibility = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : undefined;
    const {
      tree
    } = await session.send("Accessibility.getFullAXTree", {
      objectId
    });
    const axNode = new FFAXNode(tree);
    return {
      tree: axNode,
      needle: needle ? axNode._findNeedle() : null
    };
  }
  var FFRoleToARIARole = new Map(Object.entries({
    pushbutton: "button",
    checkbutton: "checkbox",
    editcombobox: "combobox",
    "content deletion": "deletion",
    footnote: "doc-footnote",
    "non-native document": "document",
    grouping: "group",
    graphic: "img",
    "content insertion": "insertion",
    animation: "marquee",
    "flat equation": "math",
    menupopup: "menu",
    "check menu item": "menuitemcheckbox",
    "radio menu item": "menuitemradio",
    "listbox option": "option",
    radiobutton: "radio",
    statusbar: "status",
    pagetab: "tab",
    pagetablist: "tablist",
    propertypage: "tabpanel",
    entry: "textbox",
    outline: "tree",
    "tree table": "treegrid",
    outlineitem: "treeitem"
  }));

  class FFAXNode {
    constructor(payload) {
      this._children = undefined;
      this._payload = undefined;
      this._editable = undefined;
      this._richlyEditable = undefined;
      this._focusable = undefined;
      this._expanded = undefined;
      this._name = undefined;
      this._role = undefined;
      this._cachedHasFocusableChild = undefined;
      this._payload = payload;
      this._children = (payload.children || []).map((x) => new FFAXNode(x));
      this._editable = !!payload.editable;
      this._richlyEditable = this._editable && payload.tag !== "textarea" && payload.tag !== "input";
      this._focusable = !!payload.focusable;
      this._expanded = !!payload.expanded;
      this._name = this._payload.name;
      this._role = this._payload.role;
    }
    _isPlainTextField() {
      if (this._richlyEditable)
        return false;
      if (this._editable)
        return true;
      return this._role === "entry";
    }
    _isTextOnlyObject() {
      const role = this._role;
      return role === "text leaf" || role === "text" || role === "statictext";
    }
    _hasFocusableChild() {
      if (this._cachedHasFocusableChild === undefined) {
        this._cachedHasFocusableChild = false;
        for (const child of this._children) {
          if (child._focusable || child._hasFocusableChild()) {
            this._cachedHasFocusableChild = true;
            break;
          }
        }
      }
      return this._cachedHasFocusableChild;
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.foundObject)
        return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found)
          return found;
      }
      return null;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isPlainTextField() || this._isTextOnlyObject())
        return true;
      switch (this._role) {
        case "graphic":
        case "scrollbar":
        case "slider":
        case "separator":
        case "progressbar":
          return true;
        default:
          break;
      }
      if (this._hasFocusableChild())
        return false;
      if (this._focusable && this._role !== "document" && this._name)
        return true;
      if (this._role === "heading" && this._name)
        return true;
      return false;
    }
    isControl() {
      switch (this._role) {
        case "checkbutton":
        case "check menu item":
        case "check rich option":
        case "combobox":
        case "combobox option":
        case "color chooser":
        case "listbox":
        case "listbox option":
        case "listbox rich option":
        case "popup menu":
        case "menupopup":
        case "menuitem":
        case "menubar":
        case "button":
        case "pushbutton":
        case "radiobutton":
        case "radio menuitem":
        case "scrollbar":
        case "slider":
        case "spinbutton":
        case "switch":
        case "pagetab":
        case "entry":
        case "tree table":
          return true;
        default:
          return false;
      }
    }
    isInteresting(insideControl) {
      if (this._focusable || this._richlyEditable)
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!this._name.trim();
    }
    serialize() {
      const node = {
        role: FFRoleToARIARole.get(this._role) || this._role,
        name: this._name || ""
      };
      const userStringProperties = ["name", "description", "roledescription", "valuetext", "keyshortcuts"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload))
          continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiline", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (this._role === "document" && booleanProperty === "focused")
          continue;
        const value = this._payload[booleanProperty];
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload))
          continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "orientation"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const axNode = node;
      axNode.valueString = this._payload.value;
      if ("checked" in this._payload)
        axNode.checked = this._payload.checked === true ? "checked" : this._payload.checked === "mixed" ? "mixed" : "unchecked";
      if ("pressed" in this._payload)
        axNode.pressed = this._payload.pressed === true ? "pressed" : "released";
      if ("invalid" in this._payload)
        axNode.invalid = this._payload.invalid === true ? "true" : "false";
      return axNode;
    }
  }
});

// node_modules/playwright-core/lib/server/firefox/ffExecutionContext.js
var require_ffExecutionContext = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFExecutionContext = undefined;
  var js = _interopRequireWildcard(require_javascript());
  var _stackTrace = require_stackTrace();
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class FFExecutionContext {
    constructor(session, executionContextId) {
      this._session = undefined;
      this._executionContextId = undefined;
      this._session = session;
      this._executionContextId = executionContextId;
    }
    async rawEvaluateJSON(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: true,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.value;
    }
    async rawEvaluateHandle(expression) {
      const payload = await this._session.send("Runtime.evaluate", {
        expression,
        returnByValue: false,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      return payload.result.objectId;
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      const payload = await this._session.send("Runtime.callFunction", {
        functionDeclaration: expression,
        args: [{
          objectId: utilityScript._objectId,
          value: undefined
        }, ...values.map((value) => ({
          value
        })), ...objectIds.map((objectId) => ({
          objectId,
          value: undefined
        }))],
        returnByValue,
        executionContextId: this._executionContextId
      }).catch(rewriteError);
      checkException(payload.exceptionDetails);
      if (returnByValue)
        return (0, _utilityScriptSerializers.parseEvaluationResultValue)(payload.result.value);
      return utilityScript._context.createHandle(payload.result);
    }
    async getProperties(context, objectId) {
      const response = await this._session.send("Runtime.getObjectProperties", {
        executionContextId: this._executionContextId,
        objectId
      });
      const result = new Map;
      for (const property of response.properties)
        result.set(property.name, context.createHandle(property.value));
      return result;
    }
    createHandle(context, remoteObject) {
      return new js.JSHandle(context, remoteObject.subtype || remoteObject.type || "", renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("Runtime.disposeObject", {
        executionContextId: this._executionContextId,
        objectId
      });
    }
  }
  exports.FFExecutionContext = FFExecutionContext;
  function checkException(exceptionDetails) {
    if (!exceptionDetails)
      return;
    if (exceptionDetails.value)
      throw new js.JavaScriptErrorInEvaluate(JSON.stringify(exceptionDetails.value));
    else
      throw new js.JavaScriptErrorInEvaluate(exceptionDetails.text + (exceptionDetails.stack ? `
` + exceptionDetails.stack : ""));
  }
  function rewriteError(error) {
    if (error.message.includes("cyclic object value") || error.message.includes("Object is not serializable"))
      return {
        result: {
          type: "undefined",
          value: undefined
        }
      };
    if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON"))
      (0, _stackTrace.rewriteErrorMessage)(error, error.message + " Are you passing a nested JSHandle?");
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      throw new Error("Execution context was destroyed, most likely because of a navigation.");
    throw error;
  }
  function potentiallyUnserializableValue(remoteObject) {
    const value = remoteObject.value;
    const unserializableValue = remoteObject.unserializableValue;
    return unserializableValue ? js.parseUnserializableValue(unserializableValue) : value;
  }
  function renderPreview(object) {
    if (object.type === "undefined")
      return "undefined";
    if (object.unserializableValue)
      return String(object.unserializableValue);
    if (object.type === "symbol")
      return "Symbol()";
    if (object.subtype === "regexp")
      return "RegExp";
    if (object.subtype === "weakmap")
      return "WeakMap";
    if (object.subtype === "weakset")
      return "WeakSet";
    if (object.subtype)
      return object.subtype[0].toUpperCase() + object.subtype.slice(1);
    if ("value" in object)
      return String(object.value);
  }
});

// node_modules/playwright-core/lib/server/firefox/ffInput.js
var require_ffInput = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  function toModifiersMask(modifiers) {
    let mask = 0;
    if (modifiers.has("Alt"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Shift"))
      mask |= 4;
    if (modifiers.has("Meta"))
      mask |= 8;
    return mask;
  }
  function toButtonNumber(button) {
    if (button === "left")
      return 0;
    if (button === "middle")
      return 1;
    if (button === "right")
      return 2;
    return 0;
  }
  function toButtonsMask(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  }

  class RawKeyboardImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      if (text === "\r")
        text = "";
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keydown",
        keyCode: keyCodeWithoutLocation,
        code,
        key,
        repeat: autoRepeat,
        location: location2,
        text
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._client.send("Page.dispatchKeyEvent", {
        type: "keyup",
        key,
        keyCode: keyCodeWithoutLocation,
        code,
        location: location2,
        repeat: false
      });
    }
    async sendText(text) {
      await this._client.send("Page.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(client) {
      this._client = undefined;
      this._page = undefined;
      this._client = client;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousemove",
        button: 0,
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mousedown",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._client.send("Page.dispatchMouseEvent", {
        type: "mouseup",
        button: toButtonNumber(button),
        buttons: toButtonsMask(buttons),
        x: Math.floor(x),
        y: Math.floor(y),
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._client.send("Page.dispatchWheelEvent", {
        deltaX,
        deltaY,
        x: Math.floor(x),
        y: Math.floor(y),
        deltaZ: 0,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page) {
      this._page = page;
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(client) {
      this._client = undefined;
      this._client = client;
    }
    async tap(x, y, modifiers) {
      await this._client.send("Page.dispatchTapEvent", {
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/firefox/ffNetworkManager.js
var require_ffNetworkManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFNetworkManager = undefined;
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class FFNetworkManager {
    constructor(session, page) {
      this._session = undefined;
      this._requests = undefined;
      this._page = undefined;
      this._eventListeners = undefined;
      this._session = session;
      this._requests = new Map;
      this._page = page;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", this._onRequestWillBeSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", this._onResponseReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFinished", this._onRequestFinished.bind(this)), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestFailed", this._onRequestFailed.bind(this))];
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    async setRequestInterception(enabled) {
      await Promise.all([this._session.send("Network.setRequestInterception", {
        enabled
      }), this._session.send("Page.setCacheDisabled", {
        cacheDisabled: enabled
      })]);
    }
    _onRequestWillBeSent(event) {
      const redirectedFrom = event.redirectedFrom ? this._requests.get(event.redirectedFrom) || null : null;
      const frame = redirectedFrom ? redirectedFrom.request.frame() : event.frameId ? this._page._frameManager.frame(event.frameId) : null;
      if (!frame)
        return;
      if (redirectedFrom)
        this._requests.delete(redirectedFrom._id);
      const request = new InterceptableRequest(frame, redirectedFrom, event);
      let route;
      if (event.isIntercepted)
        route = new FFRouteImpl(this._session, request);
      this._requests.set(request._id, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _onResponseReceived(event) {
      var _event$securityDetail, _event$securityDetail2, _event$securityDetail3, _event$securityDetail4, _event$securityDetail5;
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: request._id
        });
        if (response2.evicted)
          throw new Error(`Response body for ${request.request.method()} ${request.request.url()} was evicted!`);
        return Buffer.from(response2.base64body, "base64");
      };
      const startTime = event.timing.startTime;
      function relativeToStart(time) {
        if (!time)
          return -1;
        return (time - startTime) / 1000;
      }
      const timing = {
        startTime: startTime / 1000,
        domainLookupStart: relativeToStart(event.timing.domainLookupStart),
        domainLookupEnd: relativeToStart(event.timing.domainLookupEnd),
        connectStart: relativeToStart(event.timing.connectStart),
        secureConnectionStart: relativeToStart(event.timing.secureConnectionStart),
        connectEnd: relativeToStart(event.timing.connectEnd),
        requestStart: relativeToStart(event.timing.requestStart),
        responseStart: relativeToStart(event.timing.responseStart)
      };
      const response = new network.Response(request.request, event.status, event.statusText, parseMultivalueHeaders(event.headers), timing, getResponseBody, event.fromServiceWorker);
      if (event !== null && event !== undefined && event.remoteIPAddress && typeof (event === null || event === undefined ? undefined : event.remotePort) === "number") {
        response._serverAddrFinished({
          ipAddress: event.remoteIPAddress,
          port: event.remotePort
        });
      } else {
        response._serverAddrFinished();
      }
      response._securityDetailsFinished({
        protocol: event === null || event === undefined || (_event$securityDetail = event.securityDetails) === null || _event$securityDetail === undefined ? undefined : _event$securityDetail.protocol,
        subjectName: event === null || event === undefined || (_event$securityDetail2 = event.securityDetails) === null || _event$securityDetail2 === undefined ? undefined : _event$securityDetail2.subjectName,
        issuer: event === null || event === undefined || (_event$securityDetail3 = event.securityDetails) === null || _event$securityDetail3 === undefined ? undefined : _event$securityDetail3.issuer,
        validFrom: event === null || event === undefined || (_event$securityDetail4 = event.securityDetails) === null || _event$securityDetail4 === undefined ? undefined : _event$securityDetail4.validFrom,
        validTo: event === null || event === undefined || (_event$securityDetail5 = event.securityDetails) === null || _event$securityDetail5 === undefined ? undefined : _event$securityDetail5.validTo
      });
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(null);
      this._page._frameManager.requestReceivedResponse(response);
    }
    _onRequestFinished(event) {
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      response.setTransferSize(event.transferSize);
      response.setEncodedBodySize(event.encodedBodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = event.responseEndTime ? event.responseEndTime / 1000 - response.timing().startTime : -1;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request._id);
        response._requestFinished(responseEndTime);
      }
      if (event.protocolVersion)
        response._setHttpVersion(event.protocolVersion);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestFailed(event) {
      const request = this._requests.get(event.requestId);
      if (!request)
        return;
      this._requests.delete(request._id);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request.request._setFailureText(event.errorCode);
      this._page._frameManager.requestFailed(request.request, event.errorCode === "NS_BINDING_ABORTED");
    }
  }
  exports.FFNetworkManager = FFNetworkManager;
  var causeToResourceType = {
    TYPE_INVALID: "other",
    TYPE_OTHER: "other",
    TYPE_SCRIPT: "script",
    TYPE_IMAGE: "image",
    TYPE_STYLESHEET: "stylesheet",
    TYPE_OBJECT: "other",
    TYPE_DOCUMENT: "document",
    TYPE_SUBDOCUMENT: "document",
    TYPE_REFRESH: "document",
    TYPE_XBL: "other",
    TYPE_PING: "other",
    TYPE_XMLHTTPREQUEST: "xhr",
    TYPE_OBJECT_SUBREQUEST: "other",
    TYPE_DTD: "other",
    TYPE_FONT: "font",
    TYPE_MEDIA: "media",
    TYPE_WEBSOCKET: "websocket",
    TYPE_CSP_REPORT: "other",
    TYPE_XSLT: "other",
    TYPE_BEACON: "other",
    TYPE_FETCH: "fetch",
    TYPE_IMAGESET: "image",
    TYPE_WEB_MANIFEST: "manifest"
  };
  var internalCauseToResourceType = {
    TYPE_INTERNAL_EVENTSOURCE: "eventsource"
  };

  class InterceptableRequest {
    constructor(frame, redirectedFrom, payload) {
      this.request = undefined;
      this._id = undefined;
      this._redirectedTo = undefined;
      this._id = payload.requestId;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      let postDataBuffer = null;
      if (payload.postData)
        postDataBuffer = Buffer.from(payload.postData, "base64");
      this.request = new network.Request(frame._page._browserContext, frame, null, redirectedFrom ? redirectedFrom.request : null, payload.navigationId, payload.url, internalCauseToResourceType[payload.internalCause] || causeToResourceType[payload.cause] || "other", payload.method, postDataBuffer, payload.headers);
      this.request.setRawRequestHeaders(null);
    }
    _finalRequest() {
      let request = this;
      while (request._redirectedTo)
        request = request._redirectedTo;
      return request;
    }
  }

  class FFRouteImpl {
    constructor(session, request) {
      this._request = undefined;
      this._session = undefined;
      this._session = session;
      this._request = request;
    }
    async continue(overrides) {
      await this._session.sendMayFail("Network.resumeInterceptedRequest", {
        requestId: this._request._id,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : undefined
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("Network.fulfillInterceptedRequest", {
        requestId: this._request._id,
        status: response.status,
        statusText: network.statusText(response.status),
        headers: response.headers,
        base64body
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("Network.abortInterceptedRequest", {
        requestId: this._request._id,
        errorCode
      });
    }
  }
  function parseMultivalueHeaders(headers) {
    const result = [];
    for (const header of headers) {
      const separator = header.name.toLowerCase() === "set-cookie" ? `
` : ",";
      const tokens = header.value.split(separator).map((s) => s.trim());
      for (const token of tokens)
        result.push({
          name: header.name,
          value: token
        });
    }
    return result;
  }
});

// node_modules/playwright-core/lib/server/firefox/ffPage.js
var require_ffPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.UTILITY_WORLD_NAME = exports.FFPage = undefined;
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var _eventsHelper = require_eventsHelper();
  var _page = require_page();
  var _ffAccessibility = require_ffAccessibility();
  var _ffConnection = require_ffConnection();
  var _ffExecutionContext = require_ffExecutionContext();
  var _ffInput = require_ffInput();
  var _ffNetworkManager = require_ffNetworkManager();
  var _stackTrace = require_stackTrace();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var UTILITY_WORLD_NAME = exports.UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class FFPage {
    constructor(session, browserContext, opener) {
      this.cspErrorsAsynchronousForInlineScripts = true;
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._session = undefined;
      this._page = undefined;
      this._networkManager = undefined;
      this._browserContext = undefined;
      this._pagePromise = new _manualPromise.ManualPromise;
      this._initializedPage = null;
      this._initializationFailed = false;
      this._opener = undefined;
      this._contextIdToContext = undefined;
      this._eventListeners = undefined;
      this._workers = new Map;
      this._screencastId = undefined;
      this._initScripts = [];
      this._session = session;
      this._opener = opener;
      this.rawKeyboard = new _ffInput.RawKeyboardImpl(session);
      this.rawMouse = new _ffInput.RawMouseImpl(session);
      this.rawTouchscreen = new _ffInput.RawTouchscreenImpl(session);
      this._contextIdToContext = new Map;
      this._browserContext = browserContext;
      this._page = new _page.Page(this, browserContext);
      this.rawMouse.setPage(this._page);
      this._networkManager = new _ffNetworkManager.FFNetworkManager(session, this._page);
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.eventFired", this._onEventFired.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", this._onFrameAttached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", this._onFrameDetached.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationCommitted", this._onNavigationCommitted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.sameDocumentNavigation", this._onSameDocumentNavigation.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", this._onExecutionContextCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextDestroyed", this._onExecutionContextDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextsCleared", this._onExecutionContextsCleared.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.linkClicked", (event) => this._onLinkClicked(event.phase)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.uncaughtError", this._onUncaughtError.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.console", this._onConsole.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dialogOpened", this._onDialogOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.bindingCalled", this._onBindingCalled.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", this._onFileChooserOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerCreated", this._onWorkerCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.workerDestroyed", this._onWorkerDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.dispatchMessageFromWorker", this._onDispatchMessageFromWorker.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.crashed", this._onCrashed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.videoRecordingStarted", this._onVideoRecordingStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketCreated", this._onWebSocketCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketClosed", this._onWebSocketClosed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameReceived", this._onWebSocketFrameReceived.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.webSocketFrameSent", this._onWebSocketFrameSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.screencastFrame", this._onScreencastFrame.bind(this))];
      this._session.once("Page.ready", async () => {
        await this._page.initOpener(this._opener);
        if (this._initializationFailed)
          return;
        this._initializedPage = this._page;
        this._page.reportAsNew();
        this._pagePromise.resolve(this._page);
      });
      this.addInitScript(new _page.InitScript("", true), UTILITY_WORLD_NAME).catch((e) => this._markAsError(e));
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _markAsError(error) {
      if (this._initializationFailed)
        return;
      this._initializationFailed = true;
      if (!this._initializedPage) {
        await this._page.initOpener(this._opener);
        this._page.reportAsNew(error);
        this._pagePromise.resolve(error);
      }
    }
    async pageOrError() {
      return this._pagePromise;
    }
    _onWebSocketCreated(event) {
      this._page._frameManager.onWebSocketCreated(webSocketId(event.frameId, event.wsid), event.requestURL);
      this._page._frameManager.onWebSocketRequest(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketClosed(event) {
      if (event.error)
        this._page._frameManager.webSocketError(webSocketId(event.frameId, event.wsid), event.error);
      this._page._frameManager.webSocketClosed(webSocketId(event.frameId, event.wsid));
    }
    _onWebSocketFrameReceived(event) {
      this._page._frameManager.webSocketFrameReceived(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onWebSocketFrameSent(event) {
      this._page._frameManager.onWebSocketFrameSent(webSocketId(event.frameId, event.wsid), event.opcode, event.data);
    }
    _onExecutionContextCreated(payload) {
      const {
        executionContextId,
        auxData
      } = payload;
      const frame = this._page._frameManager.frame(auxData.frameId);
      if (!frame)
        return;
      const delegate = new _ffExecutionContext.FFExecutionContext(this._session, executionContextId);
      let worldName = null;
      if (auxData.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      else if (!auxData.name)
        worldName = "main";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(executionContextId, context);
    }
    _onExecutionContextDestroyed(payload) {
      const {
        executionContextId
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._contextIdToContext.delete(executionContextId);
      context.frame._contextDestroyed(context);
    }
    _onExecutionContextsCleared() {
      for (const executionContextId of Array.from(this._contextIdToContext.keys()))
        this._onExecutionContextDestroyed({
          executionContextId
        });
    }
    _removeContextsForFrame(frame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame)
          this._contextIdToContext.delete(contextId);
      }
    }
    _onLinkClicked(phase) {
      if (phase === "before")
        this._page._frameManager.frameWillPotentiallyRequestNavigation();
      else
        this._page._frameManager.frameDidPotentiallyRequestNavigation();
    }
    _onNavigationStarted(params) {
      this._page._frameManager.frameRequestedNavigation(params.frameId, params.navigationId);
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.frameId, params.errorText, params.navigationId);
    }
    _onNavigationCommitted(params) {
      for (const [workerId, worker] of this._workers) {
        if (worker.frameId === params.frameId)
          this._onWorkerDestroyed({
            workerId
          });
      }
      this._page._frameManager.frameCommittedNewDocumentNavigation(params.frameId, params.url, params.name || "", params.navigationId || "", false);
    }
    _onSameDocumentNavigation(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.frameId, params.url);
    }
    _onFrameAttached(params) {
      this._page._frameManager.frameAttached(params.frameId, params.parentFrameId);
    }
    _onFrameDetached(params) {
      this._page._frameManager.frameDetached(params.frameId);
    }
    _onEventFired(payload) {
      const {
        frameId,
        name
      } = payload;
      if (name === "load")
        this._page._frameManager.frameLifecycleEvent(frameId, "load");
      if (name === "DOMContentLoaded")
        this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onUncaughtError(params) {
      const {
        name,
        message
      } = (0, _stackTrace.splitErrorMessage)(params.message);
      const error = new Error(message);
      error.stack = params.message + `
` + params.stack.split(`
`).filter(Boolean).map((a) => a.replace(/([^@]*)@(.*)/, "    at $1 ($2)")).join(`
`);
      error.name = name;
      this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
    }
    _onConsole(payload) {
      const {
        type,
        args,
        executionContextId,
        location: location2
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      this._page._addConsoleMessage(type === "warn" ? "warning" : type, args.map((arg) => context.createHandle(arg)), location2);
    }
    _onDialogOpened(params) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, params.type, params.message, async (accept, promptText) => {
        await this._session.sendMayFail("Page.handleDialog", {
          dialogId: params.dialogId,
          accept,
          promptText
        });
      }, params.defaultValue));
    }
    async _onBindingCalled(event) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(event.executionContextId);
        if (context)
          await this._page._onBindingCalled(event.payload, context);
      }
    }
    async _onFileChooserOpened(payload) {
      const {
        executionContextId,
        element
      } = payload;
      const context = this._contextIdToContext.get(executionContextId);
      if (!context)
        return;
      const handle = context.createHandle(element).asElement();
      await this._page._onFileChooserOpened(handle);
    }
    async _onWorkerCreated(event) {
      const workerId = event.workerId;
      const worker = new _page.Worker(this._page, event.url);
      const workerSession = new _ffConnection.FFSession(this._session._connection, workerId, (message) => {
        this._session.send("Page.sendMessageToWorker", {
          frameId: event.frameId,
          workerId,
          message: JSON.stringify(message)
        }).catch((e) => {
          workerSession.dispatchMessage({
            id: message.id,
            method: "",
            params: {},
            error: {
              message: e.message,
              data: undefined
            }
          });
        });
      });
      this._workers.set(workerId, {
        session: workerSession,
        frameId: event.frameId
      });
      this._page._addWorker(workerId, worker);
      workerSession.once("Runtime.executionContextCreated", (event2) => {
        worker._createExecutionContext(new _ffExecutionContext.FFExecutionContext(workerSession, event2.executionContextId));
      });
      workerSession.on("Runtime.console", (event2) => {
        const {
          type,
          args,
          location: location2
        } = event2;
        const context = worker._existingExecutionContext;
        this._page._addConsoleMessage(type, args.map((arg) => context.createHandle(arg)), location2);
      });
    }
    _onWorkerDestroyed(event) {
      const workerId = event.workerId;
      const worker = this._workers.get(workerId);
      if (!worker)
        return;
      worker.session.dispose();
      this._workers.delete(workerId);
      this._page._removeWorker(workerId);
    }
    async _onDispatchMessageFromWorker(event) {
      const worker = this._workers.get(event.workerId);
      if (!worker)
        return;
      worker.session.dispatchMessage(JSON.parse(event.message));
    }
    async _onCrashed(event) {
      this._session.markAsCrashed();
      this._page._didCrash();
    }
    _onVideoRecordingStarted(event) {
      this._browserContext._browser._videoStarted(this._browserContext, event.screencastId, event.file, this.pageOrError());
    }
    didClose() {
      this._markAsError(new _errors.TargetClosedError);
      this._session.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      this._networkManager.dispose();
      this._page._didClose();
    }
    async navigateFrame(frame, url, referer) {
      const response = await this._session.send("Page.navigate", {
        url,
        referer,
        frameId: frame._id
      });
      return {
        newDocumentId: response.navigationId || undefined
      };
    }
    async updateExtraHTTPHeaders() {
      await this._session.send("Network.setExtraHTTPHeaders", {
        headers: this._page.extraHTTPHeaders() || []
      });
    }
    async updateEmulatedViewportSize() {
      const viewportSize = this._page.viewportSize();
      await this._session.send("Page.setViewportSize", {
        viewportSize
      });
    }
    async bringToFront() {
      await this._session.send("Page.bringToFront", {});
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme === "no-override" ? undefined : emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion === "no-override" ? undefined : emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors === "no-override" ? undefined : emulatedMedia.forcedColors;
      await this._session.send("Page.setEmulatedMedia", {
        type: emulatedMedia.media === "no-override" ? "" : emulatedMedia.media,
        colorScheme,
        reducedMotion,
        forcedColors
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    async goBack() {
      const {
        success
      } = await this._session.send("Page.goBack", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async goForward() {
      const {
        success
      } = await this._session.send("Page.goForward", {
        frameId: this._page.mainFrame()._id
      });
      return success;
    }
    async requestGC() {
      await this._session.send("Heap.collectGarbage");
    }
    async addInitScript(initScript, worldName) {
      this._initScripts.push({
        initScript,
        worldName
      });
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts.map((s) => ({
          script: s.initScript.source,
          worldName: s.worldName
        }))
      });
    }
    async removeNonInternalInitScripts() {
      this._initScripts = this._initScripts.filter((s) => s.initScript.internal);
      await this._session.send("Page.setInitScripts", {
        scripts: this._initScripts.map((s) => ({
          script: s.initScript.source,
          worldName: s.worldName
        }))
      });
    }
    async closePage(runBeforeUnload) {
      await this._session.send("Page.close", {
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      if (color)
        throw new Error("Not implemented");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      if (!documentRect) {
        const scrollOffset = await this._page.mainFrame().waitForFunctionValueInUtility(progress2, () => ({
          x: window.scrollX,
          y: window.scrollY
        }));
        documentRect = {
          x: viewportRect.x + scrollOffset.x,
          y: viewportRect.y + scrollOffset.y,
          width: viewportRect.width,
          height: viewportRect.height
        };
      }
      progress2.throwIfAborted();
      const {
        data
      } = await this._session.send("Page.screenshot", {
        mimeType: "image/" + format,
        clip: documentRect,
        quality,
        omitDeviceScaleFactor: scale === "css"
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const {
        contentFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!contentFrameId)
        return null;
      return this._page._frameManager.frame(contentFrameId);
    }
    async getOwnerFrame(handle) {
      const {
        ownerFrameId
      } = await this._session.send("Page.describeNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      return ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length)
        return null;
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("Page.scrollIntoViewIfNeeded", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const {
          screencastId
        } = await this._session.send("Page.startScreencast", options);
        this._screencastId = screencastId;
      } else {
        await this._session.send("Page.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      if (!this._screencastId)
        return;
      const screencastId = this._screencastId;
      this._page.throttleScreencastFrameAck(() => {
        this._session.send("Page.screencastFrameAck", {
          screencastId
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("Page.getContentQuads", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId
      });
      if (!result)
        return null;
      return result.quads.map((quad) => [quad.p1, quad.p2, quad.p3, quad.p4]);
    }
    async setInputFiles(handle, files) {
      await handle.evaluateInUtility(([injected, node, files2]) => injected.setInputFiles(node, files2), files);
    }
    async setInputFilePaths(handle, files) {
      await this._session.send("Page.setFileInputFiles", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        files
      });
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.send("Page.adoptNode", {
        frameId: handle._context.frame._id,
        objectId: handle._objectId,
        executionContextId: to[contextDelegateSymbol]._executionContextId
      });
      if (!result.remoteObject)
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.remoteObject);
    }
    async getAccessibilityTree(needle) {
      return (0, _ffAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
      await this.rawMouse.move(-1, -1, "none", new Set, new Set, false);
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("Page.adoptNode", {
        frameId: frame._id,
        executionContextId: context[contextDelegateSymbol]._executionContextId
      });
      if (!result.remoteObject)
        throw new Error("Frame has been detached.");
      return context.createHandle(result.remoteObject);
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return false;
    }
  }
  exports.FFPage = FFPage;
  function webSocketId(frameId, wsid) {
    return `${frameId}---${wsid}`;
  }
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/firefox/ffBrowser.js
var require_ffBrowser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FFBrowserContext = exports.FFBrowser = undefined;
  var _errors = require_errors();
  var _utils = require_utils();
  var _browser = require_browser();
  var _browserContext = require_browserContext();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _ffConnection = require_ffConnection();
  var _ffPage = require_ffPage();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class FFBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      var _options$originalLaun;
      const connection = new _ffConnection.FFConnection(transport, options.protocolLogger, options.browserLogsCollector);
      const browser = new FFBrowser(parent, connection, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      let firefoxUserPrefs = (_options$originalLaun = options.originalLaunchOptions.firefoxUserPrefs) !== null && _options$originalLaun !== undefined ? _options$originalLaun : {};
      if (Object.keys(kBandaidFirefoxUserPrefs).length)
        firefoxUserPrefs = {
          ...kBandaidFirefoxUserPrefs,
          ...firefoxUserPrefs
        };
      const promises = [browser.session.send("Browser.enable", {
        attachToDefaultContext: !!options.persistent,
        userPrefs: Object.entries(firefoxUserPrefs).map(([name, value]) => ({
          name,
          value
        }))
      }), browser._initVersion()];
      if (options.persistent) {
        browser._defaultContext = new FFBrowserContext(browser, undefined, options.persistent);
        promises.push(browser._defaultContext._initialize());
      }
      const proxy = options.originalLaunchOptions.proxyOverride || options.proxy;
      if (proxy)
        promises.push(browser.session.send("Browser.setBrowserProxy", toJugglerProxyOptions(proxy)));
      await Promise.all(promises);
      return browser;
    }
    constructor(parent, connection, options) {
      super(parent, options);
      this._connection = undefined;
      this.session = undefined;
      this._ffPages = undefined;
      this._contexts = undefined;
      this._version = "";
      this._userAgent = "";
      this._connection = connection;
      this.session = connection.rootSession;
      this._ffPages = new Map;
      this._contexts = new Map;
      this._connection.on(_ffConnection.ConnectionEvents.Disconnected, () => this._onDisconnect());
      this.session.on("Browser.attachedToTarget", this._onAttachedToTarget.bind(this));
      this.session.on("Browser.detachedFromTarget", this._onDetachedFromTarget.bind(this));
      this.session.on("Browser.downloadCreated", this._onDownloadCreated.bind(this));
      this.session.on("Browser.downloadFinished", this._onDownloadFinished.bind(this));
      this.session.on("Browser.videoRecordingFinished", this._onVideoRecordingFinished.bind(this));
    }
    async _initVersion() {
      const result = await this.session.send("Browser.getInfo");
      this._version = result.version.substring(result.version.indexOf("/") + 1);
      this._userAgent = result.userAgent;
    }
    isConnected() {
      return !this._connection._closed;
    }
    async doCreateNewContext(options) {
      if (options.isMobile)
        throw new Error("options.isMobile is not supported in Firefox");
      const {
        browserContextId
      } = await this.session.send("Browser.createBrowserContext", {
        removeOnDetach: true
      });
      const context = new FFBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._version;
    }
    userAgent() {
      return this._userAgent;
    }
    _onDetachedFromTarget(payload) {
      const ffPage = this._ffPages.get(payload.targetId);
      this._ffPages.delete(payload.targetId);
      ffPage.didClose();
    }
    _onAttachedToTarget(payload) {
      const {
        targetId,
        browserContextId,
        openerId,
        type
      } = payload.targetInfo;
      (0, _utils.assert)(type === "page");
      const context = browserContextId ? this._contexts.get(browserContextId) : this._defaultContext;
      (0, _utils.assert)(context, `Unknown context id:${browserContextId}, _defaultContext: ${this._defaultContext}`);
      const session = this._connection.createSession(payload.sessionId);
      const opener = openerId ? this._ffPages.get(openerId) : null;
      const ffPage = new _ffPage.FFPage(session, context, opener);
      this._ffPages.set(targetId, ffPage);
    }
    _onDownloadCreated(payload) {
      const ffPage = this._ffPages.get(payload.pageTargetId);
      if (!ffPage)
        return;
      ffPage._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = ffPage._initializedPage;
      if (!originPage) {
        ffPage._markAsError(new Error("Starting new page download"));
        if (ffPage._opener)
          originPage = ffPage._opener._initializedPage;
      }
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.uuid, payload.url, payload.suggestedFileName);
    }
    _onDownloadFinished(payload) {
      const error = payload.canceled ? "canceled" : payload.error;
      this._downloadFinished(payload.uuid, error);
    }
    _onVideoRecordingFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === undefined || _this$_takeVideo.reportFinished();
    }
    _onDisconnect() {
      for (const video of this._idToVideo.values())
        video.artifact.reportFinished(new _errors.TargetClosedError);
      this._idToVideo.clear();
      for (const ffPage of this._ffPages.values())
        ffPage.didClose();
      this._ffPages.clear();
      this._didClose();
    }
  }
  exports.FFBrowser = FFBrowser;

  class FFBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
    }
    async _initialize() {
      (0, _utils.assert)(!this._ffPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize(), this._browser.session.send("Browser.addBinding", {
        browserContextId: this._browserContextId,
        name: _page.PageBinding.kPlaywrightBinding,
        script: ""
      })];
      if (this._options.acceptDownloads !== "internal-browser-default") {
        promises.push(this._browser.session.send("Browser.setDownloadOptions", {
          browserContextId,
          downloadOptions: {
            behavior: this._options.acceptDownloads === "accept" ? "saveToDisk" : "cancel",
            downloadsDir: this._browser.options.downloadsPath
          }
        }));
      }
      if (this._options.viewport) {
        const viewport = {
          viewportSize: {
            width: this._options.viewport.width,
            height: this._options.viewport.height
          },
          deviceScaleFactor: this._options.deviceScaleFactor || 1
        };
        promises.push(this._browser.session.send("Browser.setDefaultViewport", {
          browserContextId,
          viewport
        }));
      }
      if (this._options.hasTouch)
        promises.push(this._browser.session.send("Browser.setTouchOverride", {
          browserContextId,
          hasTouch: true
        }));
      if (this._options.userAgent)
        promises.push(this._browser.session.send("Browser.setUserAgentOverride", {
          browserContextId,
          userAgent: this._options.userAgent
        }));
      if (this._options.bypassCSP)
        promises.push(this._browser.session.send("Browser.setBypassCSP", {
          browserContextId,
          bypassCSP: true
        }));
      if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors)
        promises.push(this._browser.session.send("Browser.setIgnoreHTTPSErrors", {
          browserContextId,
          ignoreHTTPSErrors: true
        }));
      if (this._options.javaScriptEnabled === false)
        promises.push(this._browser.session.send("Browser.setJavaScriptDisabled", {
          browserContextId,
          javaScriptDisabled: true
        }));
      if (this._options.locale)
        promises.push(this._browser.session.send("Browser.setLocaleOverride", {
          browserContextId,
          locale: this._options.locale
        }));
      if (this._options.timezoneId)
        promises.push(this._browser.session.send("Browser.setTimezoneOverride", {
          browserContextId,
          timezoneId: this._options.timezoneId
        }));
      if (this._options.extraHTTPHeaders || this._options.locale)
        promises.push(this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []));
      if (this._options.httpCredentials)
        promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      if (this._options.geolocation)
        promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline)
        promises.push(this.setOffline(this._options.offline));
      if (this._options.colorScheme !== "no-override") {
        promises.push(this._browser.session.send("Browser.setColorScheme", {
          browserContextId,
          colorScheme: this._options.colorScheme !== undefined ? this._options.colorScheme : "light"
        }));
      }
      if (this._options.reducedMotion !== "no-override") {
        promises.push(this._browser.session.send("Browser.setReducedMotion", {
          browserContextId,
          reducedMotion: this._options.reducedMotion !== undefined ? this._options.reducedMotion : "no-preference"
        }));
      }
      if (this._options.forcedColors !== "no-override") {
        promises.push(this._browser.session.send("Browser.setForcedColors", {
          browserContextId,
          forcedColors: this._options.forcedColors !== undefined ? this._options.forcedColors : "none"
        }));
      }
      if (this._options.recordVideo) {
        promises.push(this._ensureVideosPath().then(() => {
          return this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: {
              ...this._options.recordVideo.size,
              dir: this._options.recordVideo.dir
            },
            browserContextId: this._browserContextId
          });
        }));
      }
      const proxy = this._options.proxyOverride || this._options.proxy;
      if (proxy) {
        promises.push(this._browser.session.send("Browser.setContextProxy", {
          browserContextId: this._browserContextId,
          ...toJugglerProxyOptions(proxy)
        }));
      }
      await Promise.all(promises);
    }
    _ffPages() {
      return Array.from(this._browser._ffPages.values()).filter((ffPage) => ffPage._browserContext === this);
    }
    pages() {
      return this._ffPages().map((ffPage) => ffPage._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        targetId
      } = await this._browser.session.send("Browser.newPage", {
        browserContextId: this._browserContextId
      }).catch((e) => {
        if (e.message.includes("Failed to override timezone"))
          throw new Error(`Invalid timezone ID: ${this._options.timezoneId}`);
        throw e;
      });
      return this._browser._ffPages.get(targetId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser.session.send("Browser.getCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        delete copy.size;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network.rewriteCookies(cookies).map((c) => ({
        ...c,
        expires: c.expires === -1 ? undefined : c.expires
      }));
      await this._browser.session.send("Browser.setCookies", {
        browserContextId: this._browserContextId,
        cookies: cc
      });
    }
    async doClearCookies() {
      await this._browser.session.send("Browser.clearCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([["geolocation", "geo"], ["persistent-storage", "persistent-storage"], ["push", "push"], ["notifications", "desktop-notification"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._browser.session.send("Browser.grantPermissions", {
        origin,
        browserContextId: this._browserContextId,
        permissions: filtered
      });
    }
    async doClearPermissions() {
      await this._browser.session.send("Browser.resetPermissions", {
        browserContextId: this._browserContextId
      });
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      await this._browser.session.send("Browser.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: geolocation || null
      });
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      let allHeaders = this._options.extraHTTPHeaders;
      if (this._options.locale)
        allHeaders = network.mergeHeaders([allHeaders, network.singleHeader("Accept-Language", this._options.locale)]);
      await this._browser.session.send("Browser.setExtraHTTPHeaders", {
        browserContextId: this._browserContextId,
        headers: allHeaders
      });
    }
    async setUserAgent(userAgent) {
      await this._browser.session.send("Browser.setUserAgentOverride", {
        browserContextId: this._browserContextId,
        userAgent: userAgent || null
      });
    }
    async setOffline(offline) {
      this._options.offline = offline;
      await this._browser.session.send("Browser.setOnlineOverride", {
        browserContextId: this._browserContextId,
        override: offline ? "offline" : "online"
      });
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      let credentials = null;
      if (httpCredentials) {
        const {
          username,
          password,
          origin
        } = httpCredentials;
        credentials = {
          username,
          password,
          origin
        };
      }
      await this._browser.session.send("Browser.setHTTPCredentials", {
        browserContextId: this._browserContextId,
        credentials
      });
    }
    async doAddInitScript(initScript) {
      await this._updateInitScripts();
    }
    async doRemoveNonInternalInitScripts() {
      await this._updateInitScripts();
    }
    async _updateInitScripts() {
      const bindingScripts = [...this._pageBindings.values()].map((binding) => binding.initScript.source);
      const initScripts = this.initScripts.map((script) => script.source);
      await this._browser.session.send("Browser.setInitScripts", {
        browserContextId: this._browserContextId,
        scripts: [...bindingScripts, ...initScripts].map((script) => ({
          script
        }))
      });
    }
    async doUpdateRequestInterception() {
      await Promise.all([this._browser.session.send("Browser.setRequestInterception", {
        browserContextId: this._browserContextId,
        enabled: !!this._requestInterceptor
      }), this._browser.session.send("Browser.setCacheDisabled", {
        browserContextId: this._browserContextId,
        cacheDisabled: !!this._requestInterceptor
      })]);
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser.session.send("Browser.clearCache");
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        if (this._options.recordVideo) {
          await this._browser.session.send("Browser.setVideoRecordingOptions", {
            options: undefined,
            browserContextId: this._browserContextId
          });
        }
        await this._browser.close({
          reason
        });
      } else {
        await this._browser.session.send("Browser.removeBrowserContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid2) {
      await this._browser.session.send("Browser.cancelDownload", {
        uuid: uuid2
      });
    }
  }
  exports.FFBrowserContext = FFBrowserContext;
  function toJugglerProxyOptions(proxy) {
    const proxyServer = new URL(proxy.server);
    let port = parseInt(proxyServer.port, 10);
    let type = "http";
    if (proxyServer.protocol === "socks5:")
      type = "socks";
    else if (proxyServer.protocol === "socks4:")
      type = "socks4";
    else if (proxyServer.protocol === "https:")
      type = "https";
    if (proxyServer.port === "") {
      if (proxyServer.protocol === "http:")
        port = 80;
      else if (proxyServer.protocol === "https:")
        port = 443;
    }
    return {
      type,
      bypass: proxy.bypass ? proxy.bypass.split(",").map((domain) => domain.trim()) : [],
      host: proxyServer.hostname,
      port,
      username: proxy.username,
      password: proxy.password
    };
  }
  var kBandaidFirefoxUserPrefs = {};
});

// node_modules/playwright-core/lib/server/firefox/firefox.js
var require_firefox = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Firefox = undefined;
  var os = _interopRequireWildcard(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _ffBrowser = require_ffBrowser();
  var _ffConnection = require_ffConnection();
  var _browserType = require_browserType();
  var _utils = require_utils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class Firefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "firefox");
    }
    connectToTransport(transport, options) {
      return _ffBrowser.FFBrowser.connect(this.attribution.playwright, transport, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`))
        error.logs = `
` + (0, _utils.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified"))
        error.logs = `
` + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    amendEnvironment(env, userDataDir, executable, browserArguments) {
      if (!_path.default.isAbsolute(os.homedir()))
        throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${os.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      if (os.platform() === "linux") {
        return {
          ...env,
          SNAP_NAME: undefined,
          SNAP_INSTANCE_NAME: undefined
        };
      }
      return env;
    }
    attemptToGracefullyCloseBrowser(transport) {
      const message = {
        method: "Browser.close",
        params: {},
        id: _ffConnection.kBrowserCloseMessageId
      };
      transport.send(message);
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--profile");
      if (args.find((arg) => arg.startsWith("-juggler")))
        throw new Error("Use the port parameter instead of -juggler argument");
      const firefoxArguments = ["-no-remote"];
      if (headless) {
        firefoxArguments.push("-headless");
      } else {
        firefoxArguments.push("-wait-for-browser");
        firefoxArguments.push("-foreground");
      }
      firefoxArguments.push(`-profile`, userDataDir);
      firefoxArguments.push("-juggler-pipe");
      firefoxArguments.push(...args);
      if (isPersistent)
        firefoxArguments.push("about:blank");
      else
        firefoxArguments.push("-silent");
      return firefoxArguments;
    }
    readyState(options) {
      return new JugglerReadyState;
    }
  }
  exports.Firefox = Firefox;

  class JugglerReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      if (message.includes("Juggler listening to the pipe"))
        this._wsEndpoint.resolve(undefined);
    }
  }
});

// node_modules/playwright-core/lib/server/selectors.js
var require_selectors = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Selectors = undefined;
  var _selectorParser = require_selectorParser();
  var _utils = require_utils();

  class Selectors {
    constructor() {
      this._builtinEngines = undefined;
      this._builtinEnginesInMainWorld = undefined;
      this._engines = undefined;
      this.guid = `selectors@${(0, _utils.createGuid)()}`;
      this._testIdAttributeName = "data-testid";
      this._builtinEngines = new Set(["css", "css:light", "xpath", "xpath:light", "_react", "_vue", "text", "text:light", "id", "id:light", "data-testid", "data-testid:light", "data-test-id", "data-test-id:light", "data-test", "data-test:light", "nth", "visible", "internal:control", "internal:has", "internal:has-not", "internal:has-text", "internal:has-not-text", "internal:and", "internal:or", "internal:chain", "role", "internal:attr", "internal:label", "internal:text", "internal:role", "internal:testid"]);
      this._builtinEnginesInMainWorld = new Set(["_react", "_vue"]);
      this._engines = new Map;
    }
    async register(name, source, contentScript = false) {
      if (!name.match(/^[a-zA-Z_0-9-]+$/))
        throw new Error("Selector engine name may only contain [a-zA-Z0-9_] characters");
      if (this._builtinEngines.has(name) || name === "zs" || name === "zs:light")
        throw new Error(`"${name}" is a predefined selector engine`);
      if (this._engines.has(name))
        throw new Error(`"${name}" selector engine has been already registered`);
      this._engines.set(name, {
        source,
        contentScript
      });
    }
    testIdAttributeName() {
      return this._testIdAttributeName;
    }
    setTestIdAttributeName(testIdAttributeName) {
      this._testIdAttributeName = testIdAttributeName;
    }
    unregisterAll() {
      this._engines.clear();
    }
    parseSelector(selector, strict) {
      const parsed = typeof selector === "string" ? (0, _selectorParser.parseSelector)(selector) : selector;
      let needsMainWorld = false;
      (0, _selectorParser.visitAllSelectorParts)(parsed, (part) => {
        const name = part.name;
        const custom = this._engines.get(name);
        if (!custom && !this._builtinEngines.has(name))
          throw new _selectorParser.InvalidSelectorError(`Unknown engine "${name}" while parsing selector ${(0, _selectorParser.stringifySelector)(parsed)}`);
        if (custom && !custom.contentScript)
          needsMainWorld = true;
        if (this._builtinEnginesInMainWorld.has(name))
          needsMainWorld = true;
      });
      return {
        parsed,
        world: needsMainWorld ? "main" : "utility",
        strict
      };
    }
  }
  exports.Selectors = Selectors;
});

// node_modules/playwright-core/lib/server/webkit/wkConnection.js
var require_wkConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kPageProxyMessageReceived = exports.kBrowserCloseMessageId = exports.WKSession = exports.WKConnection = undefined;
  var _events = __require("events");
  var _utils = require_utils();
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = -9999;
  var kPageProxyMessageReceived = exports.kPageProxyMessageReceived = Symbol("kPageProxyMessageReceived");

  class WKConnection {
    constructor(transport, onDisconnect, protocolLogger, browserLogsCollector) {
      this._transport = undefined;
      this._onDisconnect = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this._lastId = 0;
      this._closed = false;
      this.browserSession = undefined;
      this._transport = transport;
      this._onDisconnect = onDisconnect;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.browserSession = new WKSession(this, "", (message) => {
        this.rawSend(message);
      });
      this._transport.onmessage = this._dispatchMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    _dispatchMessage(message) {
      this._protocolLogger("receive", message);
      if (message.id === kBrowserCloseMessageId)
        return;
      if (message.pageProxyId) {
        const payload = {
          message,
          pageProxyId: message.pageProxyId
        };
        this.browserSession.dispatchMessage({
          method: kPageProxyMessageReceived,
          params: payload
        });
        return;
      }
      this.browserSession.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.browserSession.dispose();
      this._onDisconnect();
    }
    isClosed() {
      return this._closed;
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
  }
  exports.WKConnection = WKConnection;

  class WKSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this.connection = undefined;
      this.sessionId = undefined;
      this._disposed = false;
      this._rawSend = undefined;
      this._callbacks = new Map;
      this._crashed = false;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this.connection = connection;
      this.sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.off = super.removeListener;
      this.addListener = super.addListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this.connection._browserDisconnectedLogs);
      const id = this.connection.nextMessageId();
      const messageObj = {
        id,
        method,
        params
      };
      this._rawSend(messageObj);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    markAsCrashed() {
      this._crashed = true;
    }
    isDisposed() {
      return this._disposed;
    }
    dispose() {
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this.connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
      this._disposed = true;
    }
    dispatchMessage(object) {
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.error) {
          callback.error.setMessage(object.error.message);
          callback.reject(callback.error);
        } else {
          callback.resolve(object.result);
        }
      } else if (object.id && !object.error) {
        (0, _utils.assert)(this.isDisposed());
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
  }
  exports.WKSession = WKSession;
});

// node_modules/playwright-core/lib/server/webkit/wkAccessibility.js
var require_wkAccessibility = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getAccessibilityTree = getAccessibilityTree;
  async function getAccessibilityTree(session, needle) {
    const objectId = needle ? needle._objectId : undefined;
    const {
      axNode
    } = await session.send("Page.accessibilitySnapshot", {
      objectId
    });
    const tree = new WKAXNode(axNode);
    return {
      tree,
      needle: needle ? tree._findNeedle() : null
    };
  }
  var WKRoleToARIARole = new Map(Object.entries({
    TextField: "textbox"
  }));
  var WKUnhelpfulRoleDescriptions = new Map(Object.entries({
    WebArea: "HTML content",
    Summary: "summary",
    DescriptionList: "description list",
    ImageMap: "image map",
    ListMarker: "list marker",
    Video: "video playback",
    Mark: "highlighted",
    contentinfo: "content information",
    Details: "details",
    DescriptionListDetail: "description",
    DescriptionListTerm: "term",
    alertdialog: "web alert dialog",
    dialog: "web dialog",
    status: "application status",
    tabpanel: "tab panel",
    application: "web application"
  }));

  class WKAXNode {
    constructor(payload) {
      this._payload = undefined;
      this._children = undefined;
      this._payload = payload;
      this._children = [];
      for (const payload2 of this._payload.children || [])
        this._children.push(new WKAXNode(payload2));
    }
    children() {
      return this._children;
    }
    _findNeedle() {
      if (this._payload.found)
        return this;
      for (const child of this._children) {
        const found = child._findNeedle();
        if (found)
          return found;
      }
      return null;
    }
    isControl() {
      switch (this._payload.role) {
        case "button":
        case "checkbox":
        case "ColorWell":
        case "combobox":
        case "DisclosureTriangle":
        case "listbox":
        case "menu":
        case "menubar":
        case "menuitem":
        case "menuitemcheckbox":
        case "menuitemradio":
        case "radio":
        case "scrollbar":
        case "searchbox":
        case "slider":
        case "spinbutton":
        case "switch":
        case "tab":
        case "textbox":
        case "TextField":
        case "tree":
          return true;
        default:
          return false;
      }
    }
    _isTextControl() {
      switch (this._payload.role) {
        case "combobox":
        case "searchfield":
        case "textbox":
        case "TextField":
          return true;
      }
      return false;
    }
    _name() {
      if (this._payload.role === "text")
        return this._payload.value || "";
      return this._payload.name || "";
    }
    isInteresting(insideControl) {
      const {
        role,
        focusable
      } = this._payload;
      const name = this._name();
      if (role === "ScrollArea")
        return false;
      if (role === "WebArea")
        return true;
      if (focusable || role === "MenuListOption")
        return true;
      if (this.isControl())
        return true;
      if (insideControl)
        return false;
      return this.isLeafNode() && !!name;
    }
    _hasRedundantTextChild() {
      if (this._children.length !== 1)
        return false;
      const child = this._children[0];
      return child._payload.role === "text" && this._payload.name === child._payload.value;
    }
    isLeafNode() {
      if (!this._children.length)
        return true;
      if (this._isTextControl())
        return true;
      if (this._hasRedundantTextChild())
        return true;
      return false;
    }
    serialize() {
      const node = {
        role: WKRoleToARIARole.get(this._payload.role) || this._payload.role,
        name: this._name()
      };
      if ("description" in this._payload && this._payload.description !== node.name)
        node.description = this._payload.description;
      if ("roledescription" in this._payload) {
        const roledescription = this._payload.roledescription;
        if (roledescription !== this._payload.role && WKUnhelpfulRoleDescriptions.get(this._payload.role) !== roledescription)
          node.roledescription = roledescription;
      }
      if ("value" in this._payload && this._payload.role !== "text") {
        if (typeof this._payload.value === "string")
          node.valueString = this._payload.value;
        else if (typeof this._payload.value === "number")
          node.valueNumber = this._payload.value;
      }
      if ("checked" in this._payload)
        node.checked = this._payload.checked === "true" ? "checked" : this._payload.checked === "false" ? "unchecked" : "mixed";
      if ("pressed" in this._payload)
        node.pressed = this._payload.pressed === "true" ? "pressed" : this._payload.pressed === "false" ? "released" : "mixed";
      const userStringProperties = ["keyshortcuts", "valuetext"];
      for (const userStringProperty of userStringProperties) {
        if (!(userStringProperty in this._payload))
          continue;
        node[userStringProperty] = this._payload[userStringProperty];
      }
      const booleanProperties = ["disabled", "expanded", "focused", "modal", "multiselectable", "readonly", "required", "selected"];
      for (const booleanProperty of booleanProperties) {
        if (booleanProperty === "focused" && (this._payload.role === "WebArea" || this._payload.role === "ScrollArea"))
          continue;
        const value = this._payload[booleanProperty];
        if (!value)
          continue;
        node[booleanProperty] = value;
      }
      const numericalProperties = ["level", "valuemax", "valuemin"];
      for (const numericalProperty of numericalProperties) {
        if (!(numericalProperty in this._payload))
          continue;
        node[numericalProperty] = this._payload[numericalProperty];
      }
      const tokenProperties = ["autocomplete", "haspopup", "invalid"];
      for (const tokenProperty of tokenProperties) {
        const value = this._payload[tokenProperty];
        if (!value || value === "false")
          continue;
        node[tokenProperty] = value;
      }
      const orientationIsApplicable = new Set(["ScrollArea", "scrollbar", "listbox", "combobox", "menu", "tree", "separator", "slider", "tablist", "toolbar"]);
      if (this._payload.orientation && orientationIsApplicable.has(this._payload.role))
        node.orientation = this._payload.orientation;
      return node;
    }
  }
});

// node_modules/playwright-core/lib/server/webkit/wkExecutionContext.js
var require_wkExecutionContext = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKExecutionContext = undefined;
  var js = _interopRequireWildcard(require_javascript());
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var _protocolError = require_protocolError();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class WKExecutionContext {
    constructor(session, contextId) {
      this._session = undefined;
      this._contextId = undefined;
      this._session = session;
      this._contextId = contextId;
    }
    async rawEvaluateJSON(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: true
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.value;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async rawEvaluateHandle(expression) {
      try {
        const response = await this._session.send("Runtime.evaluate", {
          expression,
          contextId: this._contextId,
          returnByValue: false
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        return response.result.objectId;
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async evaluateWithArguments(expression, returnByValue, utilityScript, values, objectIds) {
      try {
        const response = await this._session.send("Runtime.callFunctionOn", {
          functionDeclaration: expression,
          objectId: utilityScript._objectId,
          arguments: [{
            objectId: utilityScript._objectId
          }, ...values.map((value) => ({
            value
          })), ...objectIds.map((objectId) => ({
            objectId
          }))],
          returnByValue,
          emulateUserGesture: true,
          awaitPromise: true
        });
        if (response.wasThrown)
          throw new js.JavaScriptErrorInEvaluate(response.result.description);
        if (returnByValue)
          return (0, _utilityScriptSerializers.parseEvaluationResultValue)(response.result.value);
        return utilityScript._context.createHandle(response.result);
      } catch (error) {
        throw rewriteError(error);
      }
    }
    async getProperties(context, objectId) {
      const response = await this._session.send("Runtime.getProperties", {
        objectId,
        ownProperties: true
      });
      const result = new Map;
      for (const property of response.properties) {
        if (!property.enumerable || !property.value)
          continue;
        result.set(property.name, context.createHandle(property.value));
      }
      return result;
    }
    createHandle(context, remoteObject) {
      const isPromise = remoteObject.className === "Promise";
      return new js.JSHandle(context, isPromise ? "promise" : remoteObject.subtype || remoteObject.type, renderPreview(remoteObject), remoteObject.objectId, potentiallyUnserializableValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("Runtime.releaseObject", {
        objectId
      });
    }
  }
  exports.WKExecutionContext = WKExecutionContext;
  function potentiallyUnserializableValue(remoteObject) {
    const value = remoteObject.value;
    const isUnserializable = remoteObject.type === "number" && ["NaN", "-Infinity", "Infinity", "-0"].includes(remoteObject.description);
    return isUnserializable ? js.parseUnserializableValue(remoteObject.description) : value;
  }
  function rewriteError(error) {
    if (!js.isJavaScriptErrorInEvaluate(error) && !(0, _protocolError.isSessionClosedError)(error))
      return new Error("Execution context was destroyed, most likely because of a navigation.");
    return error;
  }
  function renderPreview(object) {
    if (object.type === "undefined")
      return "undefined";
    if ("value" in object)
      return String(object.value);
    if (object.description === "Object" && object.preview) {
      const tokens = [];
      for (const {
        name,
        value
      } of object.preview.properties)
        tokens.push(`${name}: ${value}`);
      return `{${tokens.join(", ")}}`;
    }
    if (object.subtype === "array" && object.preview)
      return js.sparseArrayToString(object.preview.properties);
    return object.description;
  }
});

// node_modules/playwright-core/lib/server/webkit/wkInput.js
var require_wkInput = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var input = _interopRequireWildcard(require_input());
  var _macEditingCommands = require_macEditingCommands();
  var _utils = require_utils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function toModifiersMask(modifiers) {
    let mask = 0;
    if (modifiers.has("Shift"))
      mask |= 1;
    if (modifiers.has("Control"))
      mask |= 2;
    if (modifiers.has("Alt"))
      mask |= 4;
    if (modifiers.has("Meta"))
      mask |= 8;
    return mask;
  }
  function toButtonsMask(buttons) {
    let mask = 0;
    if (buttons.has("left"))
      mask |= 1;
    if (buttons.has("right"))
      mask |= 2;
    if (buttons.has("middle"))
      mask |= 4;
    return mask;
  }

  class RawKeyboardImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._session = undefined;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      const parts = [];
      for (const modifier of ["Shift", "Control", "Alt", "Meta"]) {
        if (modifiers.has(modifier))
          parts.push(modifier);
      }
      parts.push(code);
      const shortcut = parts.join("+");
      let commands = _macEditingCommands.macEditingCommands[shortcut];
      if ((0, _utils.isString)(commands))
        commands = [commands];
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyDown",
        modifiers: toModifiersMask(modifiers),
        windowsVirtualKeyCode: keyCode,
        code,
        key,
        text,
        unmodifiedText: text,
        autoRepeat,
        macCommands: commands,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      await this._pageProxySession.send("Input.dispatchKeyEvent", {
        type: "keyUp",
        modifiers: toModifiersMask(modifiers),
        key,
        windowsVirtualKeyCode: keyCode,
        code,
        isKeypad: location2 === input.keypadLocation
      });
    }
    async sendText(text) {
      await this._session.send("Page.insertText", {
        text
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._session = undefined;
      this._page = undefined;
      this._pageProxySession = session;
    }
    setSession(session) {
      this._session = session;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "move",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "down",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._pageProxySession.send("Input.dispatchMouseEvent", {
        type: "up",
        button,
        buttons: toButtonsMask(buttons),
        x,
        y,
        modifiers: toModifiersMask(modifiers),
        clickCount
      });
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      var _this$_page;
      if ((_this$_page = this._page) !== null && _this$_page !== undefined && _this$_page._browserContext._options.isMobile)
        throw new Error("Mouse wheel is not supported in mobile WebKit");
      await this._session.send("Page.updateScrollingState");
      await this._page.mainFrame().evaluateExpression(`new Promise(requestAnimationFrame)`, {
        world: "utility"
      });
      await this._pageProxySession.send("Input.dispatchWheelEvent", {
        x,
        y,
        deltaX,
        deltaY,
        modifiers: toModifiersMask(modifiers)
      });
    }
    setPage(page) {
      this._page = page;
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(session) {
      this._pageProxySession = undefined;
      this._pageProxySession = session;
    }
    async tap(x, y, modifiers) {
      await this._pageProxySession.send("Input.dispatchTapEvent", {
        x,
        y,
        modifiers: toModifiersMask(modifiers)
      });
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
});

// node_modules/playwright-core/lib/server/webkit/wkInterceptableRequest.js
var require_wkInterceptableRequest = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKRouteImpl = exports.WKInterceptableRequest = undefined;
  var network = _interopRequireWildcard(require_network2());
  var _utils = require_utils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var errorReasons = {
    aborted: "Cancellation",
    accessdenied: "AccessControl",
    addressunreachable: "General",
    blockedbyclient: "Cancellation",
    blockedbyresponse: "General",
    connectionaborted: "General",
    connectionclosed: "General",
    connectionfailed: "General",
    connectionrefused: "General",
    connectionreset: "General",
    internetdisconnected: "General",
    namenotresolved: "General",
    timedout: "Timeout",
    failed: "General"
  };

  class WKInterceptableRequest {
    constructor(session, frame, event, redirectedFrom, documentId) {
      this._session = undefined;
      this._requestId = undefined;
      this.request = undefined;
      this._timestamp = undefined;
      this._wallTime = undefined;
      this._session = session;
      this._requestId = event.requestId;
      const resourceType = event.type ? event.type.toLowerCase() : redirectedFrom ? redirectedFrom.request.resourceType() : "other";
      let postDataBuffer = null;
      this._timestamp = event.timestamp;
      this._wallTime = event.walltime * 1000;
      if (event.request.postData)
        postDataBuffer = Buffer.from(event.request.postData, "base64");
      this.request = new network.Request(frame._page._browserContext, frame, null, (redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom.request) || null, documentId, event.request.url, resourceType, event.request.method, postDataBuffer, (0, _utils.headersObjectToArray)(event.request.headers));
    }
    adoptRequestFromNewProcess(newSession, requestId) {
      this._session = newSession;
      this._requestId = requestId;
    }
    createResponse(responsePayload) {
      const getResponseBody = async () => {
        const response2 = await this._session.send("Network.getResponseBody", {
          requestId: this._requestId
        });
        return Buffer.from(response2.body, response2.base64Encoded ? "base64" : "utf8");
      };
      const timingPayload = responsePayload.timing;
      const timing = {
        startTime: this._wallTime,
        domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,
        domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,
        connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,
        secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,
        connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,
        requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,
        responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1
      };
      const setCookieSeparator = process.platform === "darwin" ? "," : "playwright-set-cookie-separator";
      const response = new network.Response(this.request, responsePayload.status, responsePayload.statusText, (0, _utils.headersObjectToArray)(responsePayload.headers, ",", setCookieSeparator), timing, getResponseBody, responsePayload.source === "service-worker");
      response.setRawResponseHeaders(null);
      response.setTransferSize(null);
      if (responsePayload.requestHeaders && Object.keys(responsePayload.requestHeaders).length) {
        const headers = {
          ...responsePayload.requestHeaders
        };
        if (!headers["host"])
          headers["Host"] = new URL(this.request.url()).host;
        this.request.setRawRequestHeaders((0, _utils.headersObjectToArray)(headers));
      } else {
        this.request.setRawRequestHeaders(null);
      }
      return response;
    }
  }
  exports.WKInterceptableRequest = WKInterceptableRequest;

  class WKRouteImpl {
    constructor(session, requestId) {
      this._session = undefined;
      this._requestId = undefined;
      this._session = session;
      this._requestId = requestId;
    }
    async abort(errorCode) {
      const errorType = errorReasons[errorCode];
      (0, _utils.assert)(errorType, "Unknown error code: " + errorCode);
      await this._session.sendMayFail("Network.interceptRequestWithError", {
        requestId: this._requestId,
        errorType
      });
    }
    async fulfill(response) {
      if (300 <= response.status && response.status < 400)
        throw new Error("Cannot fulfill with redirect status: " + response.status);
      let mimeType = response.isBase64 ? "application/octet-stream" : "text/plain";
      const headers = (0, _utils.headersArrayToObject)(response.headers, true);
      const contentType = headers["content-type"];
      if (contentType)
        mimeType = contentType.split(";")[0].trim();
      await this._session.sendMayFail("Network.interceptRequestWithResponse", {
        requestId: this._requestId,
        status: response.status,
        statusText: network.statusText(response.status),
        mimeType,
        headers,
        base64Encoded: response.isBase64,
        content: response.body
      });
    }
    async continue(overrides) {
      await this._session.sendMayFail("Network.interceptWithRequest", {
        requestId: this._requestId,
        url: overrides.url,
        method: overrides.method,
        headers: overrides.headers ? (0, _utils.headersArrayToObject)(overrides.headers, false) : undefined,
        postData: overrides.postData ? Buffer.from(overrides.postData).toString("base64") : undefined
      });
    }
  }
  exports.WKRouteImpl = WKRouteImpl;
  function wkMillisToRoundishMillis(value) {
    if (value === -1000)
      return -1;
    if (value <= 0) {
      return -1;
    }
    return (value * 1000 | 0) / 1000;
  }
});

// node_modules/playwright-core/lib/server/webkit/wkProvisionalPage.js
var require_wkProvisionalPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKProvisionalPage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils();

  class WKProvisionalPage {
    constructor(session, page) {
      var _page$_page$mainFrame;
      this._session = undefined;
      this._wkPage = undefined;
      this._coopNavigationRequest = undefined;
      this._sessionListeners = [];
      this._mainFrameId = null;
      this.initializationPromise = undefined;
      this._session = session;
      this._wkPage = page;
      this._coopNavigationRequest = (_page$_page$mainFrame = page._page.mainFrame().pendingDocument()) === null || _page$_page$mainFrame === undefined ? undefined : _page$_page$mainFrame.request;
      const overrideFrameId = (handler) => {
        return (payload) => {
          if (payload.frameId)
            payload.frameId = this._wkPage._page._frameManager.mainFrame()._id;
          handler(payload);
        };
      };
      const wkPage = this._wkPage;
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Network.requestWillBeSent", overrideFrameId((e) => this._onRequestWillBeSent(e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.requestIntercepted", overrideFrameId((e) => wkPage._onRequestIntercepted(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.responseReceived", overrideFrameId((e) => wkPage._onResponseReceived(session, e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFinished", overrideFrameId((e) => this._onLoadingFinished(e))), _eventsHelper.eventsHelper.addEventListener(session, "Network.loadingFailed", overrideFrameId((e) => this._onLoadingFailed(e)))];
      this.initializationPromise = this._wkPage._initializeSession(session, true, ({
        frameTree
      }) => this._handleFrameTree(frameTree));
    }
    coopNavigationRequest() {
      return this._coopNavigationRequest;
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
    }
    commit() {
      (0, _utils.assert)(this._mainFrameId);
      this._wkPage._onFrameAttached(this._mainFrameId, null);
    }
    _onRequestWillBeSent(event) {
      if (this._coopNavigationRequest && this._coopNavigationRequest.url() === event.request.url) {
        this._wkPage._adoptRequestFromNewProcess(this._coopNavigationRequest, this._session, event.requestId);
        return;
      }
      this._wkPage._onRequestWillBeSent(this._session, event);
    }
    _onLoadingFinished(event) {
      this._coopNavigationRequest = undefined;
      this._wkPage._onLoadingFinished(event);
    }
    _onLoadingFailed(event) {
      this._coopNavigationRequest = undefined;
      this._wkPage._onLoadingFailed(this._session, event);
    }
    _handleFrameTree(frameTree) {
      (0, _utils.assert)(!frameTree.frame.parentId);
      this._mainFrameId = frameTree.frame.id;
    }
  }
  exports.WKProvisionalPage = WKProvisionalPage;
});

// node_modules/playwright-core/lib/server/webkit/wkWorkers.js
var require_wkWorkers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKWorkers = undefined;
  var _eventsHelper = require_eventsHelper();
  var _page = require_page();
  var _wkConnection = require_wkConnection();
  var _wkExecutionContext = require_wkExecutionContext();

  class WKWorkers {
    constructor(page) {
      this._sessionListeners = [];
      this._page = undefined;
      this._workerSessions = new Map;
      this._page = page;
    }
    setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this.clear();
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(session, "Worker.workerCreated", (event) => {
        const worker = new _page.Worker(this._page, event.url);
        const workerSession = new _wkConnection.WKSession(session.connection, event.workerId, (message) => {
          session.send("Worker.sendMessageToWorker", {
            workerId: event.workerId,
            message: JSON.stringify(message)
          }).catch((e) => {
            workerSession.dispatchMessage({
              id: message.id,
              error: {
                message: e.message
              }
            });
          });
        });
        this._workerSessions.set(event.workerId, workerSession);
        worker._createExecutionContext(new _wkExecutionContext.WKExecutionContext(workerSession, undefined));
        this._page._addWorker(event.workerId, worker);
        workerSession.on("Console.messageAdded", (event2) => this._onConsoleMessage(worker, event2));
        Promise.all([workerSession.send("Runtime.enable"), workerSession.send("Console.enable"), session.send("Worker.initialized", {
          workerId: event.workerId
        })]).catch((e) => {
          this._page._removeWorker(event.workerId);
        });
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.dispatchMessageFromWorker", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession)
          return;
        workerSession.dispatchMessage(JSON.parse(event.message));
      }), _eventsHelper.eventsHelper.addEventListener(session, "Worker.workerTerminated", (event) => {
        const workerSession = this._workerSessions.get(event.workerId);
        if (!workerSession)
          return;
        workerSession.dispose();
        this._workerSessions.delete(event.workerId);
        this._page._removeWorker(event.workerId);
      })];
    }
    clear() {
      this._page._clearWorkers();
      this._workerSessions.clear();
    }
    async initializeSession(session) {
      await session.send("Worker.enable");
    }
    async _onConsoleMessage(worker, event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber
      } = event.message;
      let derivedType = type || "";
      if (type === "log")
        derivedType = level;
      else if (type === "timing")
        derivedType = "timeEnd";
      const handles = (parameters || []).map((p) => {
        return worker._existingExecutionContext.createHandle(p);
      });
      const location2 = {
        url: url || "",
        lineNumber: (lineNumber || 1) - 1,
        columnNumber: (columnNumber || 1) - 1
      };
      this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? undefined : text);
    }
  }
  exports.WKWorkers = WKWorkers;
});

// node_modules/playwright-core/lib/server/webkit/wkPage.js
var require_wkPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKPage = undefined;
  var _path = _interopRequireDefault(__require("path"));
  var _os = _interopRequireDefault(__require("os"));
  var _utilsBundle = require_utilsBundle();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils();
  var _hostPlatform = require_hostPlatform();
  var dialog = _interopRequireWildcard(require_dialog());
  var dom = _interopRequireWildcard(require_dom());
  var _eventsHelper = require_eventsHelper();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page = require_page();
  var _wkAccessibility = require_wkAccessibility();
  var _wkConnection = require_wkConnection();
  var _wkExecutionContext = require_wkExecutionContext();
  var _wkInput = require_wkInput();
  var _wkInterceptableRequest = require_wkInterceptableRequest();
  var _wkProvisionalPage = require_wkProvisionalPage();
  var _wkWorkers = require_wkWorkers();
  var _debugLogger = require_debugLogger();
  var _manualPromise = require_manualPromise();
  var _browserContext = require_browserContext();
  var _errors = require_errors();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";

  class WKPage {
    constructor(browserContext, pageProxySession, opener) {
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._session = undefined;
      this._provisionalPage = null;
      this._page = undefined;
      this._pagePromise = new _manualPromise.ManualPromise;
      this._pageProxySession = undefined;
      this._opener = undefined;
      this._requestIdToRequest = new Map;
      this._requestIdToRequestWillBeSentEvent = new Map;
      this._workers = undefined;
      this._contextIdToContext = undefined;
      this._sessionListeners = [];
      this._eventListeners = undefined;
      this._browserContext = undefined;
      this._initializedPage = null;
      this._firstNonInitialNavigationCommittedPromise = undefined;
      this._firstNonInitialNavigationCommittedFulfill = () => {
      };
      this._firstNonInitialNavigationCommittedReject = (e) => {
      };
      this._lastConsoleMessage = null;
      this._requestIdToResponseReceivedPayloadEvent = new Map;
      this._nextWindowOpenPopupFeatures = undefined;
      this._recordingVideoFile = null;
      this._screencastGeneration = 0;
      this._pageProxySession = pageProxySession;
      this._opener = opener;
      this.rawKeyboard = new _wkInput.RawKeyboardImpl(pageProxySession);
      this.rawMouse = new _wkInput.RawMouseImpl(pageProxySession);
      this.rawTouchscreen = new _wkInput.RawTouchscreenImpl(pageProxySession);
      this._contextIdToContext = new Map;
      this._page = new _page.Page(this, browserContext);
      this.rawMouse.setPage(this._page);
      this._workers = new _wkWorkers.WKWorkers(this._page);
      this._session = undefined;
      this._browserContext = browserContext;
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame, false));
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetCreated", this._onTargetCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.targetDestroyed", this._onTargetDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.dispatchMessageFromTarget", this._onDispatchMessageFromTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Target.didCommitProvisionalTarget", this._onDidCommitProvisionalTarget.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Screencast.screencastFrame", this._onScreencastFrame.bind(this))];
      this._firstNonInitialNavigationCommittedPromise = new Promise((f, r) => {
        this._firstNonInitialNavigationCommittedFulfill = f;
        this._firstNonInitialNavigationCommittedReject = r;
      });
      if (opener && !browserContext._options.noDefaultViewport && opener._nextWindowOpenPopupFeatures) {
        const viewportSize = _helper.helper.getViewportSizeFromWindowFeatures(opener._nextWindowOpenPopupFeatures);
        opener._nextWindowOpenPopupFeatures = undefined;
        if (viewportSize)
          this._page._emulatedSize = {
            viewport: viewportSize,
            screen: viewportSize
          };
      }
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    async _initializePageProxySession() {
      if (this._page._browserContext.isSettingStorageState())
        return;
      const promises = [this._pageProxySession.send("Dialog.enable"), this._pageProxySession.send("Emulation.setActiveAndFocused", {
        active: true
      })];
      const contextOptions = this._browserContext._options;
      if (contextOptions.javaScriptEnabled === false)
        promises.push(this._pageProxySession.send("Emulation.setJavaScriptEnabled", {
          enabled: false
        }));
      promises.push(this._updateViewport());
      promises.push(this.updateHttpCredentials());
      if (this._browserContext._permissions.size) {
        for (const [key, value] of this._browserContext._permissions)
          promises.push(this._grantPermissions(key, value));
      }
      if (this._browserContext._options.recordVideo) {
        const outputFile = _path.default.join(this._browserContext._options.recordVideo.dir, (0, _utils.createGuid)() + ".webm");
        promises.push(this._browserContext._ensureVideosPath().then(() => {
          return this._startVideo({
            ...this._browserContext._options.recordVideo.size,
            outputFile
          });
        }));
      }
      await Promise.all(promises);
    }
    _setSession(session) {
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this._session = session;
      this.rawKeyboard.setSession(session);
      this.rawMouse.setSession(session);
      this._addSessionListeners();
      this._workers.setSession(session);
    }
    async _initializeSession(session, provisional, resourceTreeHandler) {
      await this._initializeSessionMayThrow(session, resourceTreeHandler).catch((e) => {
        if (provisional && session.isDisposed())
          return;
        if (this._session === session)
          throw e;
      });
    }
    async _initializeSessionMayThrow(session, resourceTreeHandler) {
      const [, frameTree] = await Promise.all([
        session.send("Page.enable"),
        session.send("Page.getResourceTree")
      ]);
      resourceTreeHandler(frameTree);
      const promises = [
        session.send("Runtime.enable"),
        session.send("Runtime.addBinding", {
          name: _page.PageBinding.kPlaywrightBinding
        }),
        session.send("Page.createUserWorld", {
          name: UTILITY_WORLD_NAME
        }).catch((_) => {
        }),
        session.send("Console.enable"),
        session.send("Network.enable"),
        this._workers.initializeSession(session)
      ];
      if (this._page.needsRequestInterception()) {
        promises.push(session.send("Network.setInterceptionEnabled", {
          enabled: true
        }));
        promises.push(session.send("Network.setResourceCachingDisabled", {
          disabled: true
        }));
        promises.push(session.send("Network.addInterception", {
          url: ".*",
          stage: "request",
          isRegex: true
        }));
      }
      if (this._page._browserContext.isSettingStorageState()) {
        await Promise.all(promises);
        return;
      }
      const contextOptions = this._browserContext._options;
      if (contextOptions.userAgent)
        promises.push(this.updateUserAgent());
      const emulatedMedia = this._page.emulatedMedia();
      if (emulatedMedia.media || emulatedMedia.colorScheme || emulatedMedia.reducedMotion || emulatedMedia.forcedColors)
        promises.push(WKPage._setEmulateMedia(session, emulatedMedia.media, emulatedMedia.colorScheme, emulatedMedia.reducedMotion, emulatedMedia.forcedColors));
      const bootstrapScript = this._calculateBootstrapScript();
      if (bootstrapScript.length)
        promises.push(session.send("Page.setBootstrapScript", {
          source: bootstrapScript
        }));
      this._page.frames().map((frame) => frame.evaluateExpression(bootstrapScript).catch((e) => {
      }));
      if (contextOptions.bypassCSP)
        promises.push(session.send("Page.setBypassCSP", {
          enabled: true
        }));
      const emulatedSize = this._page.emulatedSize();
      if (emulatedSize) {
        promises.push(session.send("Page.setScreenSizeOverride", {
          width: emulatedSize.screen.width,
          height: emulatedSize.screen.height
        }));
      }
      promises.push(this.updateEmulateMedia());
      promises.push(session.send("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._calculateExtraHTTPHeaders(), false)
      }));
      if (contextOptions.offline)
        promises.push(session.send("Network.setEmulateOfflineState", {
          offline: true
        }));
      promises.push(session.send("Page.setTouchEmulationEnabled", {
        enabled: !!contextOptions.hasTouch
      }));
      if (contextOptions.timezoneId) {
        promises.push(session.send("Page.setTimeZone", {
          timeZone: contextOptions.timezoneId
        }).catch((e) => {
          throw new Error(`Invalid timezone ID: ${contextOptions.timezoneId}`);
        }));
      }
      if (this._page.fileChooserIntercepted())
        promises.push(session.send("Page.setInterceptFileChooserDialog", {
          enabled: true
        }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "DeviceOrientationEventEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "FullScreenEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "NotificationsEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "PointerLockEnabled",
        value: !contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeMonthEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "InputTypeWeekEnabled",
        value: contextOptions.isMobile
      }));
      promises.push(session.send("Page.overrideSetting", {
        setting: "FixedBackgroundsPaintRelativeToDocument",
        value: contextOptions.isMobile
      }));
      await Promise.all(promises);
    }
    _onDidCommitProvisionalTarget(event) {
      const {
        oldTargetId,
        newTargetId
      } = event;
      (0, _utils.assert)(this._provisionalPage);
      (0, _utils.assert)(this._provisionalPage._session.sessionId === newTargetId, "Unknown new target: " + newTargetId);
      (0, _utils.assert)(this._session.sessionId === oldTargetId, "Unknown old target: " + oldTargetId);
      const newSession = this._provisionalPage._session;
      this._provisionalPage.commit();
      this._provisionalPage.dispose();
      this._provisionalPage = null;
      this._setSession(newSession);
    }
    _onTargetDestroyed(event) {
      const {
        targetId,
        crashed
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId) {
        this._maybeCancelCoopNavigationRequest(this._provisionalPage);
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      } else if (this._session.sessionId === targetId) {
        this._session.dispose();
        _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
        if (crashed) {
          this._session.markAsCrashed();
          this._page._didCrash();
        }
      }
    }
    didClose() {
      this._pageProxySession.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
      if (this._session)
        this._session.dispose();
      if (this._provisionalPage) {
        this._provisionalPage._session.dispose();
        this._provisionalPage.dispose();
        this._provisionalPage = null;
      }
      this._firstNonInitialNavigationCommittedReject(new _errors.TargetClosedError);
      this._page._didClose();
    }
    dispatchMessageToSession(message) {
      this._pageProxySession.dispatchMessage(message);
    }
    handleProvisionalLoadFailed(event) {
      if (!this._initializedPage) {
        this._firstNonInitialNavigationCommittedReject(new Error("Initial load failed"));
        return;
      }
      if (!this._provisionalPage)
        return;
      let errorText = event.error;
      if (errorText.includes("cancelled"))
        errorText += "; maybe frame was detached?";
      this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, errorText, event.loaderId);
    }
    handleWindowOpen(event) {
      (0, _utils.debugAssert)(!this._nextWindowOpenPopupFeatures);
      this._nextWindowOpenPopupFeatures = event.windowFeatures;
    }
    async pageOrError() {
      return this._pagePromise;
    }
    async _onTargetCreated(event) {
      const {
        targetInfo
      } = event;
      const session = new _wkConnection.WKSession(this._pageProxySession.connection, targetInfo.targetId, (message) => {
        this._pageProxySession.send("Target.sendMessageToTarget", {
          message: JSON.stringify(message),
          targetId: targetInfo.targetId
        }).catch((e) => {
          session.dispatchMessage({
            id: message.id,
            error: {
              message: e.message
            }
          });
        });
      });
      (0, _utils.assert)(targetInfo.type === "page", "Only page targets are expected in WebKit, received: " + targetInfo.type);
      if (!targetInfo.isProvisional) {
        (0, _utils.assert)(!this._initializedPage);
        let pageOrError;
        try {
          this._setSession(session);
          await Promise.all([this._initializePageProxySession(), this._initializeSession(session, false, ({
            frameTree
          }) => this._handleFrameTree(frameTree))]);
          pageOrError = this._page;
        } catch (e) {
          pageOrError = e;
        }
        if (targetInfo.isPaused)
          this._pageProxySession.sendMayFail("Target.resume", {
            targetId: targetInfo.targetId
          });
        if (pageOrError instanceof _page.Page && this._page.mainFrame().url() === "") {
          try {
            await this._firstNonInitialNavigationCommittedPromise;
          } catch (e) {
            pageOrError = e;
          }
        } else {
          this._firstNonInitialNavigationCommittedPromise.catch(() => {
          });
        }
        await this._page.initOpener(this._opener);
        this._initializedPage = pageOrError instanceof _page.Page ? pageOrError : null;
        this._page.reportAsNew(pageOrError instanceof _page.Page ? undefined : pageOrError);
        this._pagePromise.resolve(pageOrError);
      } else {
        (0, _utils.assert)(targetInfo.isProvisional);
        (0, _utils.assert)(!this._provisionalPage);
        this._provisionalPage = new _wkProvisionalPage.WKProvisionalPage(session, this);
        if (targetInfo.isPaused) {
          this._provisionalPage.initializationPromise.then(() => {
            this._pageProxySession.sendMayFail("Target.resume", {
              targetId: targetInfo.targetId
            });
          });
        }
      }
    }
    _onDispatchMessageFromTarget(event) {
      const {
        targetId,
        message
      } = event;
      if (this._provisionalPage && this._provisionalPage._session.sessionId === targetId)
        this._provisionalPage._session.dispatchMessage(JSON.parse(message));
      else if (this._session.sessionId === targetId)
        this._session.dispatchMessage(JSON.parse(message));
      else
        throw new Error("Unknown target: " + targetId);
    }
    _addSessionListeners() {
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameNavigated", (event) => this._onFrameNavigated(event.frame, false)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.navigatedWithinDocument", (event) => this._onFrameNavigatedWithinDocument(event.frameId, event.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameAttached", (event) => this._onFrameAttached(event.frameId, event.parentFrameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameDetached", (event) => this._onFrameDetached(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.willCheckNavigationPolicy", (event) => this._onWillCheckNavigationPolicy(event.frameId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.didCheckNavigationPolicy", (event) => this._onDidCheckNavigationPolicy(event.frameId, event.cancel)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.frameScheduledNavigation", (event) => this._onFrameScheduledNavigation(event.frameId, event.delay, event.targetIsCurrentFrame)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.loadEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "load")), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.domContentEventFired", (event) => this._page._frameManager.frameLifecycleEvent(event.frameId, "domcontentloaded")), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.executionContextCreated", (event) => this._onExecutionContextCreated(event.context)), _eventsHelper.eventsHelper.addEventListener(this._session, "Runtime.bindingCalled", (event) => this._onBindingCalled(event.contextId, event.argument)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageAdded", (event) => this._onConsoleMessage(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Console.messageRepeatCountUpdated", (event) => this._onConsoleRepeatCountUpdated(event)), _eventsHelper.eventsHelper.addEventListener(this._pageProxySession, "Dialog.javascriptDialogOpening", (event) => this._onDialog(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Page.fileChooserOpened", (event) => this._onFileChooserOpened(event)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestWillBeSent", (e) => this._onRequestWillBeSent(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.requestIntercepted", (e) => this._onRequestIntercepted(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.responseReceived", (e) => this._onResponseReceived(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFinished", (e) => this._onLoadingFinished(e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.loadingFailed", (e) => this._onLoadingFailed(this._session, e)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketCreated", (e) => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketWillSendHandshakeRequest", (e) => this._page._frameManager.onWebSocketRequest(e.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketHandshakeResponseReceived", (e) => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameSent", (e) => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameReceived", (e) => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketClosed", (e) => this._page._frameManager.webSocketClosed(e.requestId)), _eventsHelper.eventsHelper.addEventListener(this._session, "Network.webSocketFrameError", (e) => this._page._frameManager.webSocketError(e.requestId, e.errorMessage))];
    }
    async _updateState(method, params) {
      await this._forAllSessions((session) => session.send(method, params).then());
    }
    async _forAllSessions(callback) {
      const sessions = [this._session];
      if (this._provisionalPage)
        sessions.push(this._provisionalPage._session);
      await Promise.all(sessions.map((session) => callback(session).catch((e) => {
      })));
    }
    _onWillCheckNavigationPolicy(frameId) {
      if (this._provisionalPage)
        return;
      this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _onDidCheckNavigationPolicy(frameId, cancel) {
      if (!cancel)
        return;
      if (this._provisionalPage)
        return;
      this._page._frameManager.frameAbortedNavigation(frameId, "Navigation canceled by policy check");
    }
    _onFrameScheduledNavigation(frameId, delay, targetIsCurrentFrame) {
      if (targetIsCurrentFrame)
        this._page._frameManager.frameRequestedNavigation(frameId);
    }
    _handleFrameTree(frameTree) {
      this._onFrameAttached(frameTree.frame.id, frameTree.frame.parentId || null);
      this._onFrameNavigated(frameTree.frame, true);
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "domcontentloaded");
      this._page._frameManager.frameLifecycleEvent(frameTree.frame.id, "load");
      if (!frameTree.childFrames)
        return;
      for (const child of frameTree.childFrames)
        this._handleFrameTree(child);
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _onFrameNavigated(framePayload, initial) {
      const frame = this._page._frameManager.frame(framePayload.id);
      (0, _utils.assert)(frame);
      this._removeContextsForFrame(frame, true);
      if (!framePayload.parentId)
        this._workers.clear();
      this._page._frameManager.frameCommittedNewDocumentNavigation(framePayload.id, framePayload.url, framePayload.name || "", framePayload.loaderId, initial);
      if (!initial)
        this._firstNonInitialNavigationCommittedFulfill();
    }
    _onFrameNavigatedWithinDocument(frameId, url) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(frameId, url);
    }
    _onFrameDetached(frameId) {
      this._page._frameManager.frameDetached(frameId);
    }
    _removeContextsForFrame(frame, notifyFrame) {
      for (const [contextId, context] of this._contextIdToContext) {
        if (context.frame === frame) {
          this._contextIdToContext.delete(contextId);
          if (notifyFrame)
            frame._contextDestroyed(context);
        }
      }
    }
    _onExecutionContextCreated(contextPayload) {
      if (this._contextIdToContext.has(contextPayload.id))
        return;
      const frame = this._page._frameManager.frame(contextPayload.frameId);
      if (!frame)
        return;
      const delegate = new _wkExecutionContext.WKExecutionContext(this._session, contextPayload.id);
      let worldName = null;
      if (contextPayload.type === "normal")
        worldName = "main";
      else if (contextPayload.type === "user" && contextPayload.name === UTILITY_WORLD_NAME)
        worldName = "utility";
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      if (worldName)
        frame._contextCreated(worldName, context);
      this._contextIdToContext.set(contextPayload.id, context);
    }
    async _onBindingCalled(contextId, argument) {
      const pageOrError = await this.pageOrError();
      if (!(pageOrError instanceof Error)) {
        const context = this._contextIdToContext.get(contextId);
        if (context)
          await this._page._onBindingCalled(argument, context);
      }
    }
    async navigateFrame(frame, url, referrer) {
      if (this._pageProxySession.isDisposed())
        throw new _errors.TargetClosedError;
      const pageProxyId = this._pageProxySession.sessionId;
      const result = await this._pageProxySession.connection.browserSession.send("Playwright.navigate", {
        url,
        pageProxyId,
        frameId: frame._id,
        referrer
      });
      return {
        newDocumentId: result.loaderId
      };
    }
    _onConsoleMessage(event) {
      const {
        type,
        level,
        text,
        parameters,
        url,
        line: lineNumber,
        column: columnNumber,
        source
      } = event.message;
      if (level === "error" && source === "javascript") {
        const {
          name,
          message
        } = (0, _stackTrace.splitErrorMessage)(text);
        let stack;
        if (event.message.stackTrace) {
          stack = text + `
` + event.message.stackTrace.callFrames.map((callFrame) => {
            return `    at ${callFrame.functionName || "unknown"} (${callFrame.url}:${callFrame.lineNumber}:${callFrame.columnNumber})`;
          }).join(`
`);
        } else {
          stack = "";
        }
        this._lastConsoleMessage = null;
        const error = new Error(message);
        error.stack = stack;
        error.name = name;
        this._page.emitOnContextOnceInitialized(_browserContext.BrowserContext.Events.PageError, error, this._page);
        return;
      }
      let derivedType = type || "";
      if (type === "log")
        derivedType = level;
      else if (type === "timing")
        derivedType = "timeEnd";
      const handles = [];
      for (const p of parameters || []) {
        let context;
        if (p.objectId) {
          const objectId = JSON.parse(p.objectId);
          context = this._contextIdToContext.get(objectId.injectedScriptId);
        } else {
          context = [...this._contextIdToContext.values()].find((c) => c.frame === this._page.mainFrame());
        }
        if (!context)
          return;
        handles.push(context.createHandle(p));
      }
      this._lastConsoleMessage = {
        derivedType,
        text,
        handles,
        count: 0,
        location: {
          url: url || "",
          lineNumber: (lineNumber || 1) - 1,
          columnNumber: (columnNumber || 1) - 1
        }
      };
      this._onConsoleRepeatCountUpdated({
        count: 1
      });
    }
    _onConsoleRepeatCountUpdated(event) {
      if (this._lastConsoleMessage) {
        const {
          derivedType,
          text,
          handles,
          count,
          location: location2
        } = this._lastConsoleMessage;
        for (let i = count;i < event.count; ++i)
          this._page._addConsoleMessage(derivedType, handles, location2, handles.length ? undefined : text);
        this._lastConsoleMessage.count = event.count;
      }
    }
    _onDialog(event) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, promptText) => {
        if (event.type === "beforeunload" && !accept)
          this._page._frameManager.frameAbortedNavigation(this._page.mainFrame()._id, "navigation cancelled by beforeunload dialog");
        await this._pageProxySession.send("Dialog.handleJavaScriptDialog", {
          accept,
          promptText
        });
      }, event.defaultPrompt));
    }
    async _onFileChooserOpened(event) {
      let handle;
      try {
        const context = await this._page._frameManager.frame(event.frameId)._mainContext();
        handle = context.createHandle(event.element).asElement();
      } catch (e) {
        return;
      }
      await this._page._onFileChooserOpened(handle);
    }
    static async _setEmulateMedia(session, mediaType, colorScheme, reducedMotion, forcedColors) {
      const promises = [];
      promises.push(session.send("Page.setEmulatedMedia", {
        media: mediaType === "no-override" ? "" : mediaType
      }));
      let appearance = undefined;
      switch (colorScheme) {
        case "light":
          appearance = "Light";
          break;
        case "dark":
          appearance = "Dark";
          break;
        case "no-override":
          appearance = undefined;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersColorScheme",
        value: appearance
      }));
      let reducedMotionWk = undefined;
      switch (reducedMotion) {
        case "reduce":
          reducedMotionWk = "Reduce";
          break;
        case "no-preference":
          reducedMotionWk = "NoPreference";
          break;
        case "no-override":
          reducedMotionWk = undefined;
          break;
      }
      promises.push(session.send("Page.overrideUserPreference", {
        name: "PrefersReducedMotion",
        value: reducedMotionWk
      }));
      let forcedColorsWk = undefined;
      switch (forcedColors) {
        case "active":
          forcedColorsWk = "Active";
          break;
        case "none":
          forcedColorsWk = "None";
          break;
        case "no-override":
          forcedColorsWk = undefined;
          break;
      }
      promises.push(session.send("Page.setForcedColors", {
        forcedColors: forcedColorsWk
      }));
      await Promise.all(promises);
    }
    async updateExtraHTTPHeaders() {
      await this._updateState("Network.setExtraHTTPHeaders", {
        headers: (0, _utils.headersArrayToObject)(this._calculateExtraHTTPHeaders(), false)
      });
    }
    _calculateExtraHTTPHeaders() {
      const locale = this._browserContext._options.locale;
      const headers = network.mergeHeaders([this._browserContext._options.extraHTTPHeaders, this._page.extraHTTPHeaders(), locale ? network.singleHeader("Accept-Language", locale) : undefined]);
      return headers;
    }
    async updateEmulateMedia() {
      const emulatedMedia = this._page.emulatedMedia();
      const colorScheme = emulatedMedia.colorScheme;
      const reducedMotion = emulatedMedia.reducedMotion;
      const forcedColors = emulatedMedia.forcedColors;
      await this._forAllSessions((session) => WKPage._setEmulateMedia(session, emulatedMedia.media, colorScheme, reducedMotion, forcedColors));
    }
    async updateEmulatedViewportSize() {
      this._browserContext._validateEmulatedViewport(this._page.viewportSize());
      await this._updateViewport();
    }
    async updateUserAgent() {
      const contextOptions = this._browserContext._options;
      this._updateState("Page.overrideUserAgent", {
        value: contextOptions.userAgent
      });
    }
    async bringToFront() {
      this._pageProxySession.send("Target.activate", {
        targetId: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null)
        return;
      const viewportSize = deviceSize.viewport;
      const screenSize = deviceSize.screen;
      const promises = [this._pageProxySession.send("Emulation.setDeviceMetricsOverride", {
        width: viewportSize.width,
        height: viewportSize.height,
        fixedLayout: !!options.isMobile,
        deviceScaleFactor: options.deviceScaleFactor || 1
      }), this._session.send("Page.setScreenSizeOverride", {
        width: screenSize.width,
        height: screenSize.height
      })];
      if (options.isMobile) {
        const angle = viewportSize.width > viewportSize.height ? 90 : 0;
        const useLegacySetOrientationOverrideMethod = _os.default.platform() === "darwin" && parseInt(_os.default.release().split(".")[0], 10) <= 21;
        if (useLegacySetOrientationOverrideMethod)
          promises.push(this._session.send("Page.setOrientationOverride", {
            angle
          }));
        else
          promises.push(this._pageProxySession.send("Emulation.setOrientationOverride", {
            angle
          }));
      }
      await Promise.all(promises);
    }
    async updateRequestInterception() {
      const enabled = this._page.needsRequestInterception();
      await Promise.all([this._updateState("Network.setInterceptionEnabled", {
        enabled
      }), this._updateState("Network.setResourceCachingDisabled", {
        disabled: enabled
      }), this._updateState("Network.addInterception", {
        url: ".*",
        stage: "request",
        isRegex: true
      })]);
    }
    async updateOffline() {
      await this._updateState("Network.setEmulateOfflineState", {
        offline: !!this._browserContext._options.offline
      });
    }
    async updateHttpCredentials() {
      const credentials = this._browserContext._options.httpCredentials || {
        username: "",
        password: "",
        origin: ""
      };
      await this._pageProxySession.send("Emulation.setAuthCredentials", {
        username: credentials.username,
        password: credentials.password,
        origin: credentials.origin
      });
    }
    async updateFileChooserInterception() {
      const enabled = this._page.fileChooserIntercepted();
      await this._session.send("Page.setInterceptFileChooserDialog", {
        enabled
      }).catch(() => {
      });
    }
    async reload() {
      await this._session.send("Page.reload");
    }
    goBack() {
      return this._session.send("Page.goBack").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goBack): Failed to go`))
          return false;
        throw error;
      });
    }
    goForward() {
      return this._session.send("Page.goForward").then(() => true).catch((error) => {
        if (error instanceof Error && error.message.includes(`Protocol error (Page.goForward): Failed to go`))
          return false;
        throw error;
      });
    }
    async requestGC() {
      await this._session.send("Heap.gc");
    }
    async addInitScript(initScript) {
      await this._updateBootstrapScript();
    }
    async removeNonInternalInitScripts() {
      await this._updateBootstrapScript();
    }
    _calculateBootstrapScript() {
      const scripts = [];
      if (!this._page.context()._options.isMobile) {
        scripts.push("delete window.orientation");
        scripts.push("delete window.ondevicemotion");
        scripts.push("delete window.ondeviceorientation");
      }
      scripts.push('if (!window.safari) window.safari = { pushNotification: { toString() { return "[object SafariRemoteNotification]"; } } };');
      scripts.push("if (!window.GestureEvent) window.GestureEvent = function GestureEvent() {};");
      scripts.push(...this._page.allInitScripts().map((script) => script.source));
      return scripts.join(`;
`);
    }
    async _updateBootstrapScript() {
      await this._updateState("Page.setBootstrapScript", {
        source: this._calculateBootstrapScript()
      });
    }
    async closePage(runBeforeUnload) {
      await this._stopVideo();
      await this._pageProxySession.sendMayFail("Target.close", {
        targetId: this._session.sessionId,
        runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
      await this._session.send("Page.setDefaultBackgroundColorOverride", {
        color
      });
    }
    _toolbarHeight() {
      var _this$_page$_browserC;
      if ((_this$_page$_browserC = this._page._browserContext._browser) !== null && _this$_page$_browserC !== undefined && _this$_page$_browserC.options.headful)
        return _hostPlatform.hostPlatform === "mac10.15" ? 55 : 59;
      return 0;
    }
    async _startVideo(options) {
      (0, _utils.assert)(!this._recordingVideoFile);
      const {
        screencastId
      } = await this._pageProxySession.send("Screencast.startVideo", {
        file: options.outputFile,
        width: options.width,
        height: options.height,
        toolbarHeight: this._toolbarHeight()
      });
      this._recordingVideoFile = options.outputFile;
      this._browserContext._browser._videoStarted(this._browserContext, screencastId, options.outputFile, this.pageOrError());
    }
    async _stopVideo() {
      if (!this._recordingVideoFile)
        return;
      await this._pageProxySession.sendMayFail("Screencast.stopVideo");
      this._recordingVideoFile = null;
    }
    validateScreenshotDimension(side, omitDeviceScaleFactor) {
      if (process.platform === "darwin")
        return;
      if (!omitDeviceScaleFactor && this._page._browserContext._options.deviceScaleFactor)
        side = Math.ceil(side * this._page._browserContext._options.deviceScaleFactor);
      if (side > 32767)
        throw new Error("Cannot take screenshot larger than 32767 pixels on any dimension");
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const omitDeviceScaleFactor = scale === "css";
      this.validateScreenshotDimension(rect.width, omitDeviceScaleFactor);
      this.validateScreenshotDimension(rect.height, omitDeviceScaleFactor);
      const result = await this._session.send("Page.snapshotRect", {
        ...rect,
        coordinateSystem: documentRect ? "Page" : "Viewport",
        omitDeviceScaleFactor
      });
      const prefix = "data:image/png;base64,";
      let buffer = Buffer.from(result.dataURL.substr(prefix.length), "base64");
      if (format === "jpeg")
        buffer = _utilsBundle.jpegjs.encode(_utilsBundle.PNG.sync.read(buffer), quality).data;
      return buffer;
    }
    async getContentFrame(handle) {
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      if (!nodeInfo.contentFrameId)
        return null;
      return this._page._frameManager.frame(nodeInfo.contentFrameId);
    }
    async getOwnerFrame(handle) {
      if (!handle._objectId)
        return null;
      const nodeInfo = await this._session.send("DOM.describeNode", {
        objectId: handle._objectId
      });
      return nodeInfo.ownerFrameId || null;
    }
    isElementHandle(remoteObject) {
      return remoteObject.subtype === "node";
    }
    async getBoundingBox(handle) {
      const quads = await this.getContentQuads(handle);
      if (!quads || !quads.length)
        return null;
      let minX = Infinity;
      let maxX = -Infinity;
      let minY = Infinity;
      let maxY = -Infinity;
      for (const quad of quads) {
        for (const point of quad) {
          minX = Math.min(minX, point.x);
          maxX = Math.max(maxX, point.x);
          minY = Math.min(minY, point.y);
          maxY = Math.max(maxY, point.y);
        }
      }
      return {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      };
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await this._session.send("DOM.scrollIntoViewIfNeeded", {
        objectId: handle._objectId,
        rect
      }).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        throw e;
      });
    }
    async setScreencastOptions(options) {
      if (options) {
        const so = {
          ...options,
          toolbarHeight: this._toolbarHeight()
        };
        const {
          generation
        } = await this._pageProxySession.send("Screencast.startScreencast", so);
        this._screencastGeneration = generation;
      } else {
        await this._pageProxySession.send("Screencast.stopScreencast");
      }
    }
    _onScreencastFrame(event) {
      const generation = this._screencastGeneration;
      this._page.throttleScreencastFrameAck(() => {
        this._pageProxySession.send("Screencast.screencastFrameAck", {
          generation
        }).catch((e) => _debugLogger.debugLogger.log("error", e));
      });
      const buffer = Buffer.from(event.data, "base64");
      this._page.emit(_page.Page.Events.ScreencastFrame, {
        buffer,
        width: event.deviceWidth,
        height: event.deviceHeight
      });
    }
    rafCountForStablePosition() {
      return process.platform === "win32" ? 5 : 1;
    }
    async getContentQuads(handle) {
      const result = await this._session.sendMayFail("DOM.getContentQuads", {
        objectId: handle._objectId
      });
      if (!result)
        return null;
      return result.quads.map((quad) => [{
        x: quad[0],
        y: quad[1]
      }, {
        x: quad[2],
        y: quad[3]
      }, {
        x: quad[4],
        y: quad[5]
      }, {
        x: quad[6],
        y: quad[7]
      }]);
    }
    async setInputFiles(handle, files) {
      const objectId = handle._objectId;
      const protocolFiles = files.map((file) => ({
        name: file.name,
        type: file.mimeType,
        data: file.buffer
      }));
      await this._session.send("DOM.setInputFiles", {
        objectId,
        files: protocolFiles
      });
    }
    async setInputFilePaths(handle, paths) {
      const pageProxyId = this._pageProxySession.sessionId;
      const objectId = handle._objectId;
      await Promise.all([this._pageProxySession.connection.browserSession.send("Playwright.grantFileReadAccess", {
        pageProxyId,
        paths
      }), this._session.send("DOM.setInputFiles", {
        objectId,
        paths
      })]);
    }
    async adoptElementHandle(handle, to) {
      const result = await this._session.sendMayFail("DOM.resolveNode", {
        objectId: handle._objectId,
        executionContextId: to[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error(dom.kUnableToAdoptErrorMessage);
      return to.createHandle(result.object);
    }
    async getAccessibilityTree(needle) {
      return (0, _wkAccessibility.getAccessibilityTree)(this._session, needle);
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const context = await parent._mainContext();
      const result = await this._session.send("DOM.resolveNode", {
        frameId: frame._id,
        executionContextId: context[contextDelegateSymbol]._contextId
      });
      if (!result || result.object.subtype === "null")
        throw new Error("Frame has been detached.");
      return context.createHandle(result.object);
    }
    _maybeCancelCoopNavigationRequest(provisionalPage) {
      const navigationRequest = provisionalPage.coopNavigationRequest();
      for (const [requestId, request] of this._requestIdToRequest) {
        if (request.request === navigationRequest) {
          this._onLoadingFailed(provisionalPage._session, {
            requestId,
            errorText: "Provisiolal navigation canceled.",
            timestamp: request._timestamp,
            canceled: true
          });
          return;
        }
      }
    }
    _adoptRequestFromNewProcess(navigationRequest, newSession, newRequestId) {
      for (const [requestId, request] of this._requestIdToRequest) {
        if (request.request === navigationRequest) {
          this._requestIdToRequest.delete(requestId);
          request.adoptRequestFromNewProcess(newSession, newRequestId);
          this._requestIdToRequest.set(newRequestId, request);
          return;
        }
      }
    }
    _onRequestWillBeSent(session, event) {
      if (event.request.url.startsWith("data:"))
        return;
      if (this._page.needsRequestInterception() && !event.redirectResponse)
        this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);
      else
        this._onRequest(session, event, false);
    }
    _onRequest(session, event, intercepted) {
      let redirectedFrom = null;
      if (event.redirectResponse) {
        const request2 = this._requestIdToRequest.get(event.requestId);
        if (request2) {
          this._handleRequestRedirect(request2, event.requestId, event.redirectResponse, event.timestamp);
          redirectedFrom = request2;
        }
      }
      const frame = redirectedFrom ? redirectedFrom.request.frame() : this._page._frameManager.frame(event.frameId);
      if (!frame)
        return;
      const isNavigationRequest = event.type === "Document";
      const documentId = isNavigationRequest ? event.loaderId : undefined;
      const request = new _wkInterceptableRequest.WKInterceptableRequest(session, frame, event, redirectedFrom, documentId);
      let route;
      if (intercepted) {
        route = new _wkInterceptableRequest.WKRouteImpl(session, event.requestId);
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.set(event.requestId, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _handleRequestRedirect(request, requestId, responsePayload, timestamp) {
      const response = request.createResponse(responsePayload);
      response._securityDetailsFinished();
      response._serverAddrFinished();
      response.setResponseHeadersSize(null);
      response.setEncodedBodySize(null);
      response._requestFinished(responsePayload.timing ? _helper.helper.secondsToRoundishMillis(timestamp - request._timestamp) : -1);
      this._requestIdToRequest.delete(requestId);
      this._page._frameManager.requestReceivedResponse(response);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onRequestIntercepted(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (!requestWillBeSentEvent) {
        session.sendMayFail("Network.interceptWithRequest", {
          requestId: event.requestId
        });
        return;
      }
      this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
      this._onRequest(session, requestWillBeSentEvent, true);
    }
    _onResponseReceived(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      this._requestIdToResponseReceivedPayloadEvent.set(event.requestId, event);
      const response = request.createResponse(event.response);
      this._page._frameManager.requestReceivedResponse(response);
      if (response.status() === 204 && request.request.isNavigationRequest()) {
        this._onLoadingFailed(session, {
          requestId: event.requestId,
          errorText: "Aborted: 204 No Content",
          timestamp: event.timestamp
        });
      }
    }
    _onLoadingFinished(event) {
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        var _event$metrics, _event$metrics2, _responseReceivedPayl, _responseReceivedPayl2, _responseReceivedPayl3, _event$metrics3, _event$metrics$respon, _event$metrics4, _event$metrics$respon2, _event$metrics5;
        const responseReceivedPayload = this._requestIdToResponseReceivedPayloadEvent.get(event.requestId);
        response._serverAddrFinished(parseRemoteAddress(event === null || event === undefined || (_event$metrics = event.metrics) === null || _event$metrics === undefined ? undefined : _event$metrics.remoteAddress));
        response._securityDetailsFinished({
          protocol: isLoadedSecurely(response.url(), response.timing()) ? (_event$metrics2 = event.metrics) === null || _event$metrics2 === undefined || (_event$metrics2 = _event$metrics2.securityConnection) === null || _event$metrics2 === undefined ? undefined : _event$metrics2.protocol : undefined,
          subjectName: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl = responseReceivedPayload.response.security) === null || _responseReceivedPayl === undefined || (_responseReceivedPayl = _responseReceivedPayl.certificate) === null || _responseReceivedPayl === undefined ? undefined : _responseReceivedPayl.subject,
          validFrom: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl2 = responseReceivedPayload.response.security) === null || _responseReceivedPayl2 === undefined || (_responseReceivedPayl2 = _responseReceivedPayl2.certificate) === null || _responseReceivedPayl2 === undefined ? undefined : _responseReceivedPayl2.validFrom,
          validTo: responseReceivedPayload === null || responseReceivedPayload === undefined || (_responseReceivedPayl3 = responseReceivedPayload.response.security) === null || _responseReceivedPayl3 === undefined || (_responseReceivedPayl3 = _responseReceivedPayl3.certificate) === null || _responseReceivedPayl3 === undefined ? undefined : _responseReceivedPayl3.validUntil
        });
        if ((_event$metrics3 = event.metrics) !== null && _event$metrics3 !== undefined && _event$metrics3.protocol)
          response._setHttpVersion(event.metrics.protocol);
        response.setEncodedBodySize((_event$metrics$respon = (_event$metrics4 = event.metrics) === null || _event$metrics4 === undefined ? undefined : _event$metrics4.responseBodyBytesReceived) !== null && _event$metrics$respon !== undefined ? _event$metrics$respon : null);
        response.setResponseHeadersSize((_event$metrics$respon2 = (_event$metrics5 = event.metrics) === null || _event$metrics5 === undefined ? undefined : _event$metrics5.responseHeaderBytesReceived) !== null && _event$metrics$respon2 !== undefined ? _event$metrics$respon2 : null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToResponseReceivedPayloadEvent.delete(event.requestId);
      this._requestIdToRequest.delete(event.requestId);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onLoadingFailed(session, event) {
      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);
      if (requestWillBeSentEvent) {
        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);
        this._onRequest(session, requestWillBeSentEvent, false);
      }
      const request = this._requestIdToRequest.get(event.requestId);
      if (!request)
        return;
      const response = request.request._existingResponse();
      if (response) {
        response._serverAddrFinished();
        response._securityDetailsFinished();
        response.setResponseHeadersSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(_helper.helper.secondsToRoundishMillis(event.timestamp - request._timestamp));
      } else {
        request.request.setRawRequestHeaders(null);
      }
      this._requestIdToRequest.delete(event.requestId);
      request.request._setFailureText(event.errorText);
      this._page._frameManager.requestFailed(request.request, event.errorText.includes("cancelled"));
    }
    async _grantPermissions(origin, permissions) {
      const webPermissionToProtocol = new Map([["geolocation", "geolocation"], ["notifications", "notifications"], ["clipboard-read", "clipboard-read"]]);
      const filtered = permissions.map((permission) => {
        const protocolPermission = webPermissionToProtocol.get(permission);
        if (!protocolPermission)
          throw new Error("Unknown permission: " + permission);
        return protocolPermission;
      });
      await this._pageProxySession.send("Emulation.grantPermissions", {
        origin,
        permissions: filtered
      });
    }
    async _clearPermissions() {
      await this._pageProxySession.send("Emulation.resetPermissions", {});
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  exports.WKPage = WKPage;
  function parseRemoteAddress(value) {
    if (!value)
      return;
    try {
      const colon = value.lastIndexOf(":");
      const dot = value.lastIndexOf(".");
      if (dot < 0) {
        return {
          ipAddress: `[${value.slice(0, colon)}]`,
          port: +value.slice(colon + 1)
        };
      }
      if (colon > dot) {
        const [address, port] = value.split(":");
        return {
          ipAddress: address,
          port: +port
        };
      } else {
        const [address, port] = value.split(".");
        return {
          ipAddress: `[${address}]`,
          port: +port
        };
      }
    } catch (_) {
    }
  }
  function isLoadedSecurely(url, timing) {
    try {
      const u = new URL(url);
      if (u.protocol !== "https:" && u.protocol !== "wss:" && u.protocol !== "sftp:")
        return false;
      if (timing.secureConnectionStart === -1 && timing.connectStart !== -1)
        return false;
      return true;
    } catch (_) {
    }
  }
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/webkit/wkBrowser.js
var require_wkBrowser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WKBrowserContext = exports.WKBrowser = undefined;
  var _browser = require_browser();
  var _browserContext = require_browserContext();
  var _utils = require_utils();
  var network = _interopRequireWildcard(require_network2());
  var _wkConnection = require_wkConnection();
  var _wkPage = require_wkPage();
  var _errors = require_errors();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var DEFAULT_USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/18.2 Safari/605.1.15";
  var BROWSER_VERSION = "18.2";

  class WKBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      const browser = new WKBrowser(parent, transport, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      const promises = [browser._browserSession.send("Playwright.enable")];
      if (options.persistent) {
        var _options$persistent;
        (_options$persistent = options.persistent).userAgent || (_options$persistent.userAgent = DEFAULT_USER_AGENT);
        browser._defaultContext = new WKBrowserContext(browser, undefined, options.persistent);
        promises.push(browser._defaultContext._initialize());
      }
      await Promise.all(promises);
      return browser;
    }
    constructor(parent, transport, options) {
      super(parent, options);
      this._connection = undefined;
      this._browserSession = undefined;
      this._contexts = new Map;
      this._wkPages = new Map;
      this._connection = new _wkConnection.WKConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._browserSession.on("Playwright.pageProxyCreated", this._onPageProxyCreated.bind(this));
      this._browserSession.on("Playwright.pageProxyDestroyed", this._onPageProxyDestroyed.bind(this));
      this._browserSession.on("Playwright.provisionalLoadFailed", (event) => this._onProvisionalLoadFailed(event));
      this._browserSession.on("Playwright.windowOpen", (event) => this._onWindowOpen(event));
      this._browserSession.on("Playwright.downloadCreated", this._onDownloadCreated.bind(this));
      this._browserSession.on("Playwright.downloadFilenameSuggested", this._onDownloadFilenameSuggested.bind(this));
      this._browserSession.on("Playwright.downloadFinished", this._onDownloadFinished.bind(this));
      this._browserSession.on("Playwright.screencastFinished", this._onScreencastFinished.bind(this));
      this._browserSession.on(_wkConnection.kPageProxyMessageReceived, this._onPageProxyMessageReceived.bind(this));
    }
    _onDisconnect() {
      for (const wkPage of this._wkPages.values())
        wkPage.didClose();
      this._wkPages.clear();
      for (const video of this._idToVideo.values())
        video.artifact.reportFinished(new _errors.TargetClosedError);
      this._idToVideo.clear();
      this._didClose();
    }
    async doCreateNewContext(options) {
      const proxy = options.proxyOverride || options.proxy;
      const createOptions = proxy ? {
        proxyServer: process.platform === "win32" ? proxy.server.replace(/^socks5:\/\//, "socks5h://") : proxy.server,
        proxyBypassList: proxy.bypass
      } : undefined;
      const {
        browserContextId
      } = await this._browserSession.send("Playwright.createContext", createOptions);
      options.userAgent = options.userAgent || DEFAULT_USER_AGENT;
      const context = new WKBrowserContext(this, browserContextId, options);
      await context._initialize();
      this._contexts.set(browserContextId, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return BROWSER_VERSION;
    }
    userAgent() {
      return DEFAULT_USER_AGENT;
    }
    _onDownloadCreated(payload) {
      const page = this._wkPages.get(payload.pageProxyId);
      if (!page)
        return;
      page._page._frameManager.frameAbortedNavigation(payload.frameId, "Download is starting");
      let originPage = page._initializedPage;
      if (!originPage) {
        page._firstNonInitialNavigationCommittedReject(new Error("Starting new page download"));
        if (page._opener)
          originPage = page._opener._initializedPage;
      }
      if (!originPage)
        return;
      this._downloadCreated(originPage, payload.uuid, payload.url);
    }
    _onDownloadFilenameSuggested(payload) {
      this._downloadFilenameSuggested(payload.uuid, payload.suggestedFilename);
    }
    _onDownloadFinished(payload) {
      this._downloadFinished(payload.uuid, payload.error);
    }
    _onScreencastFinished(payload) {
      var _this$_takeVideo;
      (_this$_takeVideo = this._takeVideo(payload.screencastId)) === null || _this$_takeVideo === undefined || _this$_takeVideo.reportFinished();
    }
    _onPageProxyCreated(event) {
      const pageProxyId = event.pageProxyId;
      let context = null;
      if (event.browserContextId) {
        context = this._contexts.get(event.browserContextId) || null;
      }
      if (!context)
        context = this._defaultContext;
      if (!context)
        return;
      const pageProxySession = new _wkConnection.WKSession(this._connection, pageProxyId, (message) => {
        this._connection.rawSend({
          ...message,
          pageProxyId
        });
      });
      const opener = event.openerId ? this._wkPages.get(event.openerId) : undefined;
      const wkPage = new _wkPage.WKPage(context, pageProxySession, opener || null);
      this._wkPages.set(pageProxyId, wkPage);
    }
    _onPageProxyDestroyed(event) {
      const pageProxyId = event.pageProxyId;
      const wkPage = this._wkPages.get(pageProxyId);
      if (!wkPage)
        return;
      wkPage.didClose();
      this._wkPages.delete(pageProxyId);
    }
    _onPageProxyMessageReceived(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.dispatchMessageToSession(event.message);
    }
    _onProvisionalLoadFailed(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.handleProvisionalLoadFailed(event);
    }
    _onWindowOpen(event) {
      const wkPage = this._wkPages.get(event.pageProxyId);
      if (!wkPage)
        return;
      wkPage.handleWindowOpen(event);
    }
    isConnected() {
      return !this._connection.isClosed();
    }
  }
  exports.WKBrowser = WKBrowser;

  class WKBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._validateEmulatedViewport(options.viewport);
      this._authenticateProxyViaHeader();
    }
    async _initialize() {
      (0, _utils.assert)(!this._wkPages().length);
      const browserContextId = this._browserContextId;
      const promises = [super._initialize()];
      promises.push(this._browser._browserSession.send("Playwright.setDownloadBehavior", {
        behavior: this._options.acceptDownloads === "accept" ? "allow" : "deny",
        downloadPath: this._browser.options.downloadsPath,
        browserContextId
      }));
      if (this._options.ignoreHTTPSErrors || this._options.internalIgnoreHTTPSErrors)
        promises.push(this._browser._browserSession.send("Playwright.setIgnoreCertificateErrors", {
          browserContextId,
          ignore: true
        }));
      if (this._options.locale)
        promises.push(this._browser._browserSession.send("Playwright.setLanguages", {
          browserContextId,
          languages: [this._options.locale]
        }));
      if (this._options.geolocation)
        promises.push(this.setGeolocation(this._options.geolocation));
      if (this._options.offline)
        promises.push(this.setOffline(this._options.offline));
      if (this._options.httpCredentials)
        promises.push(this.setHTTPCredentials(this._options.httpCredentials));
      await Promise.all(promises);
    }
    _wkPages() {
      return Array.from(this._browser._wkPages.values()).filter((wkPage) => wkPage._browserContext === this);
    }
    pages() {
      return this._wkPages().map((wkPage) => wkPage._initializedPage).filter((pageOrNull) => !!pageOrNull);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        pageProxyId
      } = await this._browser._browserSession.send("Playwright.createPage", {
        browserContextId: this._browserContextId
      });
      return this._browser._wkPages.get(pageProxyId);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("Playwright.getAllCookies", {
        browserContextId: this._browserContextId
      });
      return network.filterCookies(cookies.map((c) => {
        const copy = {
          ...c
        };
        copy.expires = c.expires === -1 ? -1 : c.expires / 1000;
        delete copy.session;
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      const cc = network.rewriteCookies(cookies).map((c) => ({
        ...c,
        session: c.expires === -1 || c.expires === undefined,
        expires: c.expires && c.expires !== -1 ? c.expires * 1000 : c.expires
      }));
      await this._browser._browserSession.send("Playwright.setCookies", {
        cookies: cc,
        browserContextId: this._browserContextId
      });
    }
    async doClearCookies() {
      await this._browser._browserSession.send("Playwright.deleteAllCookies", {
        browserContextId: this._browserContextId
      });
    }
    async doGrantPermissions(origin, permissions) {
      await Promise.all(this.pages().map((page) => page._delegate._grantPermissions(origin, permissions)));
    }
    async doClearPermissions() {
      await Promise.all(this.pages().map((page) => page._delegate._clearPermissions()));
    }
    async setGeolocation(geolocation) {
      (0, _browserContext.verifyGeolocation)(geolocation);
      this._options.geolocation = geolocation;
      const payload = geolocation ? {
        ...geolocation,
        timestamp: Date.now()
      } : undefined;
      await this._browser._browserSession.send("Playwright.setGeolocationOverride", {
        browserContextId: this._browserContextId,
        geolocation: payload
      });
    }
    async setExtraHTTPHeaders(headers) {
      this._options.extraHTTPHeaders = headers;
      for (const page of this.pages())
        await page._delegate.updateExtraHTTPHeaders();
    }
    async setUserAgent(userAgent) {
      this._options.userAgent = userAgent;
      for (const page of this.pages())
        await page._delegate.updateUserAgent();
    }
    async setOffline(offline) {
      this._options.offline = offline;
      for (const page of this.pages())
        await page._delegate.updateOffline();
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      for (const page of this.pages())
        await page._delegate._updateBootstrapScript();
    }
    async doRemoveNonInternalInitScripts() {
      for (const page of this.pages())
        await page._delegate._updateBootstrapScript();
    }
    async doUpdateRequestInterception() {
      for (const page of this.pages())
        await page._delegate.updateRequestInterception();
    }
    onClosePersistent() {
    }
    async clearCache() {
      await this._browser._browserSession.send("Playwright.clearMemoryCache", {
        browserContextId: this._browserContextId
      });
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await Promise.all(this._wkPages().map((wkPage) => wkPage._stopVideo()));
        await this._browser.close({
          reason
        });
      } else {
        await this._browser._browserSession.send("Playwright.deleteContext", {
          browserContextId: this._browserContextId
        });
        this._browser._contexts.delete(this._browserContextId);
      }
    }
    async cancelDownload(uuid2) {
      await this._browser._browserSession.send("Playwright.cancelDownload", {
        uuid: uuid2
      });
    }
    _validateEmulatedViewport(viewportSize) {
      if (!viewportSize)
        return;
      if (process.platform === "win32" && this._browser.options.headful && (viewportSize.width < 250 || viewportSize.height < 240))
        throw new Error(`WebKit on Windows has a minimal viewport of 250x240.`);
    }
  }
  exports.WKBrowserContext = WKBrowserContext;
});

// node_modules/playwright-core/lib/server/webkit/webkit.js
var require_webkit = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebKit = undefined;
  var _wkBrowser = require_wkBrowser();
  var _path = _interopRequireDefault(__require("path"));
  var _wkConnection = require_wkConnection();
  var _browserType = require_browserType();
  var _utils = require_utils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class WebKit extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "webkit");
    }
    connectToTransport(transport, options) {
      return _wkBrowser.WKBrowser.connect(this.attribution.playwright, transport, options);
    }
    amendEnvironment(env, userDataDir, executable, browserArguments) {
      return {
        ...env,
        CURL_COOKIE_JAR_PATH: _path.default.join(userDataDir, "cookiejar.db")
      };
    }
    doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("cannot open display"))
        error.logs = `
` + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    attemptToGracefullyCloseBrowser(transport) {
      transport.send({
        method: "Playwright.close",
        params: {},
        id: _wkConnection.kBrowserCloseMessageId
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const webkitArguments = ["--inspector-pipe"];
      if (process.platform === "win32")
        webkitArguments.push("--disable-accelerated-compositing");
      if (headless)
        webkitArguments.push("--headless");
      if (isPersistent)
        webkitArguments.push(`--user-data-dir=${userDataDir}`);
      else
        webkitArguments.push(`--no-startup-window`);
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        if (process.platform === "darwin") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass)
            webkitArguments.push(`--proxy-bypass-list=${proxy.bypass}`);
        } else if (process.platform === "linux") {
          webkitArguments.push(`--proxy=${proxy.server}`);
          if (proxy.bypass)
            webkitArguments.push(...proxy.bypass.split(",").map((t) => `--ignore-host=${t}`));
        } else if (process.platform === "win32") {
          webkitArguments.push(`--curl-proxy=${proxy.server.replace(/^socks5:\/\//, "socks5h://")}`);
          if (proxy.bypass)
            webkitArguments.push(`--curl-noproxy=${proxy.bypass}`);
        }
      }
      webkitArguments.push(...args);
      if (isPersistent)
        webkitArguments.push("about:blank");
      return webkitArguments;
    }
  }
  exports.WebKit = WebKit;
});

// node_modules/playwright-core/lib/utils/isomorphic/ariaSnapshot.js
var require_ariaSnapshot = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AriaKeyError = undefined;
  exports.parseAriaKey = parseAriaKey;
  exports.parseYamlTemplate = parseYamlTemplate;
  function parseYamlTemplate(fragment) {
    const result = {
      kind: "role",
      role: "fragment"
    };
    populateNode(result, fragment);
    if (result.children && result.children.length === 1)
      return result.children[0];
    return result;
  }
  function populateNode(node, container) {
    for (const object of container) {
      if (typeof object === "string") {
        const childNode = KeyParser.parse(object);
        node.children = node.children || [];
        node.children.push(childNode);
        continue;
      }
      for (const key of Object.keys(object)) {
        node.children = node.children || [];
        const value = object[key];
        if (key === "text") {
          node.children.push({
            kind: "text",
            text: valueOrRegex(value)
          });
          continue;
        }
        const childNode = KeyParser.parse(key);
        if (childNode.kind === "text") {
          node.children.push({
            kind: "text",
            text: valueOrRegex(value)
          });
          continue;
        }
        if (typeof value === "string") {
          node.children.push({
            ...childNode,
            children: [{
              kind: "text",
              text: valueOrRegex(value)
            }]
          });
          continue;
        }
        node.children.push(childNode);
        populateNode(childNode, value);
      }
    }
  }
  function normalizeWhitespace(text) {
    return text.replace(/[\r\n\s\t]+/g, " ").trim();
  }
  function valueOrRegex(value) {
    return value.startsWith("/") && value.endsWith("/") ? new RegExp(value.slice(1, -1)) : normalizeWhitespace(value);
  }

  class KeyParser {
    static parse(input) {
      return new KeyParser(input)._parse();
    }
    constructor(input) {
      this._input = undefined;
      this._pos = undefined;
      this._length = undefined;
      this._input = input;
      this._pos = 0;
      this._length = input.length;
    }
    _peek() {
      return this._input[this._pos] || "";
    }
    _next() {
      if (this._pos < this._length)
        return this._input[this._pos++];
      return null;
    }
    _eof() {
      return this._pos >= this._length;
    }
    _isWhitespace() {
      return !this._eof() && /\s/.test(this._peek());
    }
    _skipWhitespace() {
      while (this._isWhitespace())
        this._pos++;
    }
    _readIdentifier(type) {
      if (this._eof())
        this._throwError(`Unexpected end of input when expecting ${type}`);
      const start = this._pos;
      while (!this._eof() && /[a-zA-Z]/.test(this._peek()))
        this._pos++;
      return this._input.slice(start, this._pos);
    }
    _readString() {
      let result = "";
      let escaped = false;
      while (!this._eof()) {
        const ch = this._next();
        if (escaped) {
          result += ch;
          escaped = false;
        } else if (ch === "\\") {
          escaped = true;
        } else if (ch === '"') {
          return result;
        } else {
          result += ch;
        }
      }
      this._throwError("Unterminated string");
    }
    _throwError(message, pos) {
      throw new AriaKeyError(message, this._input, pos || this._pos);
    }
    _readRegex() {
      let result = "";
      let escaped = false;
      let insideClass = false;
      while (!this._eof()) {
        const ch = this._next();
        if (escaped) {
          result += ch;
          escaped = false;
        } else if (ch === "\\") {
          escaped = true;
          result += ch;
        } else if (ch === "/" && !insideClass) {
          return result;
        } else if (ch === "[") {
          insideClass = true;
          result += ch;
        } else if (ch === "]" && insideClass) {
          result += ch;
          insideClass = false;
        } else {
          result += ch;
        }
      }
      this._throwError("Unterminated regex");
    }
    _readStringOrRegex() {
      const ch = this._peek();
      if (ch === '"') {
        this._next();
        return this._readString();
      }
      if (ch === "/") {
        this._next();
        return new RegExp(this._readRegex());
      }
      return null;
    }
    _readAttributes(result) {
      let errorPos = this._pos;
      while (true) {
        this._skipWhitespace();
        if (this._peek() === "[") {
          this._next();
          this._skipWhitespace();
          errorPos = this._pos;
          const flagName = this._readIdentifier("attribute");
          this._skipWhitespace();
          let flagValue = "";
          if (this._peek() === "=") {
            this._next();
            this._skipWhitespace();
            errorPos = this._pos;
            while (this._peek() !== "]" && !this._isWhitespace() && !this._eof())
              flagValue += this._next();
          }
          this._skipWhitespace();
          if (this._peek() !== "]")
            this._throwError("Expected ]");
          this._next();
          this._applyAttribute(result, flagName, flagValue || "true", errorPos);
        } else {
          break;
        }
      }
    }
    _parse() {
      this._skipWhitespace();
      const role = this._readIdentifier("role");
      this._skipWhitespace();
      const name = this._readStringOrRegex() || "";
      const result = {
        kind: "role",
        role,
        name
      };
      this._readAttributes(result);
      this._skipWhitespace();
      if (!this._eof())
        this._throwError("Unexpected input");
      return result;
    }
    _applyAttribute(node, key, value, errorPos) {
      if (key === "checked") {
        this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "checked" attribute must be a boolean or "mixed"', errorPos);
        node.checked = value === "true" ? true : value === "false" ? false : "mixed";
        return;
      }
      if (key === "disabled") {
        this._assert(value === "true" || value === "false", 'Value of "disabled" attribute must be a boolean', errorPos);
        node.disabled = value === "true";
        return;
      }
      if (key === "expanded") {
        this._assert(value === "true" || value === "false", 'Value of "expanded" attribute must be a boolean', errorPos);
        node.expanded = value === "true";
        return;
      }
      if (key === "level") {
        this._assert(!isNaN(Number(value)), 'Value of "level" attribute must be a number', errorPos);
        node.level = Number(value);
        return;
      }
      if (key === "pressed") {
        this._assert(value === "true" || value === "false" || value === "mixed", 'Value of "pressed" attribute must be a boolean or "mixed"', errorPos);
        node.pressed = value === "true" ? true : value === "false" ? false : "mixed";
        return;
      }
      if (key === "selected") {
        this._assert(value === "true" || value === "false", 'Value of "selected" attribute must be a boolean', errorPos);
        node.selected = value === "true";
        return;
      }
      this._assert(false, `Unsupported attribute [${key}]`, errorPos);
    }
    _assert(value, message, valuePos) {
      if (!value)
        this._throwError(message || "Assertion error", valuePos);
    }
  }
  function parseAriaKey(key) {
    return KeyParser.parse(key);
  }

  class AriaKeyError extends Error {
    constructor(message, input, pos) {
      super(message + `:

` + input + `
` + " ".repeat(pos) + `^
`);
      this.shortMessage = undefined;
      this.pos = undefined;
      this.shortMessage = message;
      this.pos = pos;
      this.stack = undefined;
    }
  }
  exports.AriaKeyError = AriaKeyError;
});

// node_modules/playwright-core/lib/server/ariaSnapshot.js
var require_ariaSnapshot2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parseAriaSnapshot = parseAriaSnapshot;
  exports.parseYamlForAriaSnapshot = parseYamlForAriaSnapshot;
  var _ariaSnapshot = require_ariaSnapshot();
  var _utilsBundle = require_utilsBundle();
  function parseAriaSnapshot(text) {
    return (0, _ariaSnapshot.parseYamlTemplate)(parseYamlForAriaSnapshot(text));
  }
  function parseYamlForAriaSnapshot(text) {
    const parsed = _utilsBundle.yaml.parse(text);
    if (!Array.isArray(parsed))
      throw new Error(`Expected object key starting with "- ":

` + text + `
`);
    return parsed;
  }
});

// node_modules/playwright-core/lib/server/debugController.js
var require_debugController = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DebugController = undefined;
  var _processLauncher = require_processLauncher();
  var _instrumentation = require_instrumentation();
  var _recorder = require_recorder();
  var _recorderApp = require_recorderApp();
  var _utils = require_utils();
  var _ariaSnapshot = require_ariaSnapshot2();
  var internalMetadata = (0, _instrumentation.serverSideCallMetadata)();

  class DebugController extends _instrumentation.SdkObject {
    constructor(playwright) {
      super({
        attribution: {
          isInternalPlaywright: true
        },
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, undefined, "DebugController");
      this._autoCloseTimer = undefined;
      this._autoCloseAllowed = false;
      this._trackHierarchyListener = undefined;
      this._playwright = undefined;
      this._sdkLanguage = "javascript";
      this._codegenId = "playwright-test";
      this._playwright = playwright;
    }
    initialize(codegenId, sdkLanguage) {
      this._codegenId = codegenId;
      this._sdkLanguage = sdkLanguage;
    }
    setAutoCloseAllowed(allowed) {
      this._autoCloseAllowed = allowed;
    }
    dispose() {
      this.setReportStateChanged(false);
      this.setAutoCloseAllowed(false);
    }
    setReportStateChanged(enabled) {
      if (enabled && !this._trackHierarchyListener) {
        this._trackHierarchyListener = {
          onPageOpen: () => this._emitSnapshot(),
          onPageClose: () => this._emitSnapshot()
        };
        this._playwright.instrumentation.addListener(this._trackHierarchyListener, null);
      } else if (!enabled && this._trackHierarchyListener) {
        this._playwright.instrumentation.removeListener(this._trackHierarchyListener);
        this._trackHierarchyListener = undefined;
      }
    }
    async resetForReuse() {
      const contexts = new Set;
      for (const page of this._playwright.allPages())
        contexts.add(page.context());
      for (const context of contexts)
        await context.resetForReuse(internalMetadata, null);
    }
    async navigate(url) {
      for (const p of this._playwright.allPages())
        await p.mainFrame().goto(internalMetadata, url);
    }
    async setRecorderMode(params) {
      await this._closeBrowsersWithoutPages();
      if (params.mode === "none") {
        for (const recorder of await this._allRecorders()) {
          recorder.hideHighlightedSelector();
          recorder.setMode("none");
        }
        this.setAutoCloseEnabled(true);
        return;
      }
      if (!this._playwright.allBrowsers().length)
        await this._playwright.chromium.launch(internalMetadata, {
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
      const pages = this._playwright.allPages();
      if (!pages.length) {
        const [browser] = this._playwright.allBrowsers();
        const {
          context
        } = await browser.newContextForReuse({}, internalMetadata);
        await context.newPage(internalMetadata);
      }
      if (params.testIdAttributeName) {
        for (const page of this._playwright.allPages())
          page.context().selectors().setTestIdAttributeName(params.testIdAttributeName);
      }
      for (const recorder of await this._allRecorders()) {
        recorder.hideHighlightedSelector();
        if (params.mode !== "inspecting")
          recorder.setOutput(this._codegenId, params.file);
        recorder.setMode(params.mode);
      }
      this.setAutoCloseEnabled(true);
    }
    async setAutoCloseEnabled(enabled) {
      if (!this._autoCloseAllowed)
        return;
      if (this._autoCloseTimer)
        clearTimeout(this._autoCloseTimer);
      if (!enabled)
        return;
      const heartBeat = () => {
        if (!this._playwright.allPages().length)
          (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
        else
          this._autoCloseTimer = setTimeout(heartBeat, 5000);
      };
      this._autoCloseTimer = setTimeout(heartBeat, 30000);
    }
    async highlight(params) {
      for (const recorder of await this._allRecorders()) {
        if (params.ariaTemplate)
          recorder.setHighlightedAriaTemplate((0, _ariaSnapshot.parseYamlForAriaSnapshot)(params.ariaTemplate));
        else if (params.selector)
          recorder.setHighlightedSelector(this._sdkLanguage, params.selector);
      }
    }
    async hideHighlight() {
      for (const recorder of await this._allRecorders())
        recorder.hideHighlightedSelector();
      await this._playwright.hideHighlight();
    }
    allBrowsers() {
      return [...this._playwright.allBrowsers()];
    }
    async resume() {
      for (const recorder of await this._allRecorders())
        recorder.resume();
    }
    async kill() {
      (0, _processLauncher.gracefullyProcessExitDoNotHang)(0);
    }
    async closeAllBrowsers() {
      await Promise.all(this.allBrowsers().map((browser) => browser.close({
        reason: "Close all browsers requested"
      })));
    }
    _emitSnapshot() {
      const browsers = [];
      let pageCount = 0;
      for (const browser of this._playwright.allBrowsers()) {
        const b = {
          contexts: []
        };
        browsers.push(b);
        for (const context of browser.contexts()) {
          const c = {
            pages: []
          };
          b.contexts.push(c);
          for (const page of context.pages())
            c.pages.push(page.mainFrame().url());
          pageCount += context.pages().length;
        }
      }
      this.emit(DebugController.Events.StateChanged, {
        pageCount
      });
    }
    async _allRecorders() {
      const contexts = new Set;
      for (const page of this._playwright.allPages())
        contexts.add(page.context());
      const result = await Promise.all([...contexts].map((c) => _recorder.Recorder.showInspector(c, {
        omitCallTracking: true
      }, () => Promise.resolve(new InspectingRecorderApp(this)))));
      return result.filter(Boolean);
    }
    async _closeBrowsersWithoutPages() {
      for (const browser of this._playwright.allBrowsers()) {
        for (const context of browser.contexts()) {
          if (!context.pages().length)
            await context.close({
              reason: "Browser collected"
            });
        }
        if (!browser.contexts())
          await browser.close({
            reason: "Browser collected"
          });
      }
    }
  }
  exports.DebugController = DebugController;
  DebugController.Events = {
    StateChanged: "stateChanged",
    InspectRequested: "inspectRequested",
    SourceChanged: "sourceChanged",
    Paused: "paused",
    SetModeRequested: "setModeRequested"
  };

  class InspectingRecorderApp extends _recorderApp.EmptyRecorderApp {
    constructor(debugController) {
      super();
      this._debugController = undefined;
      this._debugController = debugController;
    }
    async elementPicked(elementInfo) {
      const locator = (0, _utils.asLocator)(this._debugController._sdkLanguage, elementInfo.selector);
      this._debugController.emit(DebugController.Events.InspectRequested, {
        selector: elementInfo.selector,
        locator
      });
    }
    async setSources(sources) {
      const source = sources.find((s) => s.id === this._debugController._codegenId);
      const {
        text,
        header,
        footer,
        actions
      } = source || {
        text: ""
      };
      this._debugController.emit(DebugController.Events.SourceChanged, {
        text,
        header,
        footer,
        actions
      });
    }
    async setPaused(paused) {
      this._debugController.emit(DebugController.Events.Paused, {
        paused
      });
    }
    async setMode(mode) {
      this._debugController.emit(DebugController.Events.SetModeRequested, {
        mode
      });
    }
  }
});

// node_modules/playwright-core/lib/server/bidi/bidiConnection.js
var require_bidiConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kBrowserCloseMessageId = exports.BidiSession = exports.BidiConnection = undefined;
  var _events = __require("events");
  var _debugLogger = require_debugLogger();
  var _helper = require_helper();
  var _protocolError = require_protocolError();
  var kBrowserCloseMessageId = exports.kBrowserCloseMessageId = 0;

  class BidiConnection {
    constructor(transport, onDisconnect, protocolLogger, browserLogsCollector) {
      this._transport = undefined;
      this._onDisconnect = undefined;
      this._protocolLogger = undefined;
      this._browserLogsCollector = undefined;
      this._browserDisconnectedLogs = undefined;
      this._lastId = 0;
      this._closed = false;
      this.browserSession = undefined;
      this._browsingContextToSession = new Map;
      this._transport = transport;
      this._onDisconnect = onDisconnect;
      this._protocolLogger = protocolLogger;
      this._browserLogsCollector = browserLogsCollector;
      this.browserSession = new BidiSession(this, "", (message) => {
        this.rawSend(message);
      });
      this._transport.onmessage = this._dispatchMessage.bind(this);
      this._transport.onclose = this._onClose.bind(this);
    }
    nextMessageId() {
      return ++this._lastId;
    }
    rawSend(message) {
      this._protocolLogger("send", message);
      this._transport.send(message);
    }
    _dispatchMessage(message) {
      this._protocolLogger("receive", message);
      const object = message;
      if (object.type === "event") {
        var _object$params$source;
        let context;
        if ("context" in object.params)
          context = object.params.context;
        else if (object.method === "log.entryAdded" || object.method === "script.message")
          context = (_object$params$source = object.params.source) === null || _object$params$source === undefined ? undefined : _object$params$source.context;
        if (context) {
          const session = this._browsingContextToSession.get(context);
          if (session) {
            session.dispatchMessage(message);
            return;
          }
        }
      } else if (message.id) {
        for (const session of this._browsingContextToSession.values()) {
          if (session.hasCallback(message.id)) {
            session.dispatchMessage(message);
            return;
          }
        }
      }
      this.browserSession.dispatchMessage(message);
    }
    _onClose(reason) {
      this._closed = true;
      this._transport.onmessage = undefined;
      this._transport.onclose = undefined;
      this._browserDisconnectedLogs = _helper.helper.formatBrowserLogs(this._browserLogsCollector.recentLogs(), reason);
      this.browserSession.dispose();
      this._onDisconnect();
    }
    isClosed() {
      return this._closed;
    }
    close() {
      if (!this._closed)
        this._transport.close();
    }
    createMainFrameBrowsingContextSession(bowsingContextId) {
      const result = new BidiSession(this, bowsingContextId, (message) => this.rawSend(message));
      this._browsingContextToSession.set(bowsingContextId, result);
      return result;
    }
  }
  exports.BidiConnection = BidiConnection;

  class BidiSession extends _events.EventEmitter {
    constructor(connection, sessionId, rawSend) {
      super();
      this.connection = undefined;
      this.sessionId = undefined;
      this._disposed = false;
      this._rawSend = undefined;
      this._callbacks = new Map;
      this._crashed = false;
      this._browsingContexts = new Set;
      this.on = undefined;
      this.addListener = undefined;
      this.off = undefined;
      this.removeListener = undefined;
      this.once = undefined;
      this.setMaxListeners(0);
      this.connection = connection;
      this.sessionId = sessionId;
      this._rawSend = rawSend;
      this.on = super.on;
      this.off = super.removeListener;
      this.addListener = super.addListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    addFrameBrowsingContext(context) {
      this._browsingContexts.add(context);
      this.connection._browsingContextToSession.set(context, this);
    }
    removeFrameBrowsingContext(context) {
      this._browsingContexts.delete(context);
      this.connection._browsingContextToSession.delete(context);
    }
    async send(method, params) {
      if (this._crashed || this._disposed || this.connection._browserDisconnectedLogs)
        throw new _protocolError.ProtocolError(this._crashed ? "crashed" : "closed", undefined, this.connection._browserDisconnectedLogs);
      const id = this.connection.nextMessageId();
      const messageObj = {
        id,
        method,
        params
      };
      this._rawSend(messageObj);
      return new Promise((resolve, reject) => {
        this._callbacks.set(id, {
          resolve,
          reject,
          error: new _protocolError.ProtocolError("error", method)
        });
      });
    }
    sendMayFail(method, params) {
      return this.send(method, params).catch((error) => _debugLogger.debugLogger.log("error", error));
    }
    markAsCrashed() {
      this._crashed = true;
    }
    isDisposed() {
      return this._disposed;
    }
    dispose() {
      this._disposed = true;
      this.connection._browsingContextToSession.delete(this.sessionId);
      for (const context of this._browsingContexts)
        this.connection._browsingContextToSession.delete(context);
      this._browsingContexts.clear();
      for (const callback of this._callbacks.values()) {
        callback.error.type = this._crashed ? "crashed" : "closed";
        callback.error.logs = this.connection._browserDisconnectedLogs;
        callback.reject(callback.error);
      }
      this._callbacks.clear();
    }
    hasCallback(id) {
      return this._callbacks.has(id);
    }
    dispatchMessage(message) {
      const object = message;
      if (object.id === kBrowserCloseMessageId)
        return;
      if (object.id && this._callbacks.has(object.id)) {
        const callback = this._callbacks.get(object.id);
        this._callbacks.delete(object.id);
        if (object.type === "error") {
          callback.error.setMessage(object.error + `
Message: ` + object.message);
          callback.reject(callback.error);
        } else if (object.type === "success") {
          callback.resolve(object.result);
        } else {
          callback.error.setMessage("Internal error, unexpected response type: " + JSON.stringify(object));
          callback.reject(callback.error);
        }
      } else if (object.id) {
      } else {
        Promise.resolve().then(() => this.emit(object.method, object.params));
      }
    }
  }
  exports.BidiSession = BidiSession;
});

// node_modules/playwright-core/lib/server/bidi/third_party/bidiProtocol.js
var require_bidiProtocol = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Storage = exports.Session = exports.Script = exports.Network = exports.Log = exports.Input = exports.ErrorCode = exports.BrowsingContext = exports.Browser = undefined;
  var ErrorCode = exports.ErrorCode = /* @__PURE__ */ function(ErrorCode2) {
    ErrorCode2["InvalidArgument"] = "invalid argument";
    ErrorCode2["InvalidSelector"] = "invalid selector";
    ErrorCode2["InvalidSessionId"] = "invalid session id";
    ErrorCode2["MoveTargetOutOfBounds"] = "move target out of bounds";
    ErrorCode2["NoSuchAlert"] = "no such alert";
    ErrorCode2["NoSuchElement"] = "no such element";
    ErrorCode2["NoSuchFrame"] = "no such frame";
    ErrorCode2["NoSuchHandle"] = "no such handle";
    ErrorCode2["NoSuchHistoryEntry"] = "no such history entry";
    ErrorCode2["NoSuchIntercept"] = "no such intercept";
    ErrorCode2["NoSuchNode"] = "no such node";
    ErrorCode2["NoSuchRequest"] = "no such request";
    ErrorCode2["NoSuchScript"] = "no such script";
    ErrorCode2["NoSuchStoragePartition"] = "no such storage partition";
    ErrorCode2["NoSuchUserContext"] = "no such user context";
    ErrorCode2["SessionNotCreated"] = "session not created";
    ErrorCode2["UnableToCaptureScreen"] = "unable to capture screen";
    ErrorCode2["UnableToCloseBrowser"] = "unable to close browser";
    ErrorCode2["UnableToSetCookie"] = "unable to set cookie";
    ErrorCode2["UnableToSetFileInput"] = "unable to set file input";
    ErrorCode2["UnderspecifiedStoragePartition"] = "underspecified storage partition";
    ErrorCode2["UnknownCommand"] = "unknown command";
    ErrorCode2["UnknownError"] = "unknown error";
    ErrorCode2["UnsupportedOperation"] = "unsupported operation";
    return ErrorCode2;
  }({});
  var Session = exports.Session = undefined;
  (function(_Session10) {
    let UserPromptHandlerType = /* @__PURE__ */ function(UserPromptHandlerType2) {
      UserPromptHandlerType2["Accept"] = "accept";
      UserPromptHandlerType2["Dismiss"] = "dismiss";
      UserPromptHandlerType2["Ignore"] = "ignore";
      return UserPromptHandlerType2;
    }({});
    _Session10.UserPromptHandlerType = UserPromptHandlerType;
  })(Session || (exports.Session = Session = {}));
  var Browser = exports.Browser = undefined;
  var BrowsingContext = exports.BrowsingContext = undefined;
  (function(_BrowsingContext10) {
    let ReadinessState = /* @__PURE__ */ function(ReadinessState2) {
      ReadinessState2["None"] = "none";
      ReadinessState2["Interactive"] = "interactive";
      ReadinessState2["Complete"] = "complete";
      return ReadinessState2;
    }({});
    _BrowsingContext10.ReadinessState = ReadinessState;
  })(BrowsingContext || (exports.BrowsingContext = BrowsingContext = {}));
  (function(_BrowsingContext11) {
    let UserPromptType = /* @__PURE__ */ function(UserPromptType2) {
      UserPromptType2["Alert"] = "alert";
      UserPromptType2["Beforeunload"] = "beforeunload";
      UserPromptType2["Confirm"] = "confirm";
      UserPromptType2["Prompt"] = "prompt";
      return UserPromptType2;
    }({});
    _BrowsingContext11.UserPromptType = UserPromptType;
  })(BrowsingContext || (exports.BrowsingContext = BrowsingContext = {}));
  (function(_BrowsingContext24) {
    let CreateType = /* @__PURE__ */ function(CreateType2) {
      CreateType2["Tab"] = "tab";
      CreateType2["Window"] = "window";
      return CreateType2;
    }({});
    _BrowsingContext24.CreateType = CreateType;
  })(BrowsingContext || (exports.BrowsingContext = BrowsingContext = {}));
  var Network = exports.Network = undefined;
  (function(_Network6) {
    let SameSite = /* @__PURE__ */ function(SameSite2) {
      SameSite2["Strict"] = "strict";
      SameSite2["Lax"] = "lax";
      SameSite2["None"] = "none";
      return SameSite2;
    }({});
    _Network6.SameSite = SameSite;
  })(Network || (exports.Network = Network = {}));
  (function(_Network23) {
    let InterceptPhase = /* @__PURE__ */ function(InterceptPhase2) {
      InterceptPhase2["BeforeRequestSent"] = "beforeRequestSent";
      InterceptPhase2["ResponseStarted"] = "responseStarted";
      InterceptPhase2["AuthRequired"] = "authRequired";
      return InterceptPhase2;
    }({});
    _Network23.InterceptPhase = InterceptPhase;
  })(Network || (exports.Network = Network = {}));
  var Script = exports.Script = undefined;
  (function(_Script68) {
    let ResultOwnership = /* @__PURE__ */ function(ResultOwnership2) {
      ResultOwnership2["Root"] = "root";
      ResultOwnership2["None"] = "none";
      return ResultOwnership2;
    }({});
    _Script68.ResultOwnership = ResultOwnership;
  })(Script || (exports.Script = Script = {}));
  var Storage = exports.Storage = undefined;
  var Log = exports.Log = undefined;
  (function(_Log7) {
    let Level = /* @__PURE__ */ function(Level2) {
      Level2["Debug"] = "debug";
      Level2["Info"] = "info";
      Level2["Warn"] = "warn";
      Level2["Error"] = "error";
      return Level2;
    }({});
    _Log7.Level = Level;
  })(Log || (exports.Log = Log = {}));
  var Input = exports.Input = undefined;
  (function(_Input9) {
    let PointerType = /* @__PURE__ */ function(PointerType2) {
      PointerType2["Mouse"] = "mouse";
      PointerType2["Pen"] = "pen";
      PointerType2["Touch"] = "touch";
      return PointerType2;
    }({});
    _Input9.PointerType = PointerType;
  })(Input || (exports.Input = Input = {}));
});

// node_modules/playwright-core/lib/server/cookieStore.js
var require_cookieStore = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CookieStore = undefined;
  exports.domainMatches = domainMatches;
  exports.parseRawCookie = parseRawCookie;
  var _network = require_network2();

  class Cookie {
    constructor(data) {
      this._raw = undefined;
      this._raw = data;
    }
    name() {
      return this._raw.name;
    }
    matches(url) {
      if (this._raw.secure && url.protocol !== "https:" && url.hostname !== "localhost")
        return false;
      if (!domainMatches(url.hostname, this._raw.domain))
        return false;
      if (!pathMatches(url.pathname, this._raw.path))
        return false;
      return true;
    }
    equals(other) {
      return this._raw.name === other._raw.name && this._raw.domain === other._raw.domain && this._raw.path === other._raw.path;
    }
    networkCookie() {
      return this._raw;
    }
    updateExpiresFrom(other) {
      this._raw.expires = other._raw.expires;
    }
    expired() {
      if (this._raw.expires === -1)
        return false;
      return this._raw.expires * 1000 < Date.now();
    }
  }

  class CookieStore {
    constructor() {
      this._nameToCookies = new Map;
    }
    addCookies(cookies) {
      for (const cookie of cookies)
        this._addCookie(new Cookie(cookie));
    }
    cookies(url) {
      const result = [];
      for (const cookie of this._cookiesIterator()) {
        if (cookie.matches(url))
          result.push(cookie.networkCookie());
      }
      return result;
    }
    allCookies() {
      const result = [];
      for (const cookie of this._cookiesIterator())
        result.push(cookie.networkCookie());
      return result;
    }
    _addCookie(cookie) {
      let set = this._nameToCookies.get(cookie.name());
      if (!set) {
        set = new Set;
        this._nameToCookies.set(cookie.name(), set);
      }
      for (const other of set) {
        if (other.equals(cookie))
          set.delete(other);
      }
      set.add(cookie);
      CookieStore.pruneExpired(set);
    }
    *_cookiesIterator() {
      for (const [name, cookies] of this._nameToCookies) {
        CookieStore.pruneExpired(cookies);
        for (const cookie of cookies)
          yield cookie;
        if (cookies.size === 0)
          this._nameToCookies.delete(name);
      }
    }
    static pruneExpired(cookies) {
      for (const cookie of cookies) {
        if (cookie.expired())
          cookies.delete(cookie);
      }
    }
  }
  exports.CookieStore = CookieStore;
  function parseRawCookie(header) {
    const pairs = header.split(";").filter((s) => s.trim().length > 0).map((p) => {
      let key = "";
      let value2 = "";
      const separatorPos = p.indexOf("=");
      if (separatorPos === -1) {
        key = p.trim();
      } else {
        key = p.slice(0, separatorPos).trim();
        value2 = p.slice(separatorPos + 1).trim();
      }
      return [key, value2];
    });
    if (!pairs.length)
      return null;
    const [name, value] = pairs[0];
    const cookie = {
      name,
      value
    };
    for (let i = 1;i < pairs.length; i++) {
      const [name2, value2] = pairs[i];
      switch (name2.toLowerCase()) {
        case "expires":
          const expiresMs = +new Date(value2);
          if (isFinite(expiresMs)) {
            if (expiresMs <= 0)
              cookie.expires = 0;
            else
              cookie.expires = Math.min(expiresMs / 1000, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "max-age":
          const maxAgeSec = parseInt(value2, 10);
          if (isFinite(maxAgeSec)) {
            if (maxAgeSec <= 0)
              cookie.expires = 0;
            else
              cookie.expires = Math.min(Date.now() / 1000 + maxAgeSec, _network.kMaxCookieExpiresDateInSeconds);
          }
          break;
        case "domain":
          cookie.domain = value2.toLocaleLowerCase() || "";
          if (cookie.domain && !cookie.domain.startsWith(".") && cookie.domain.includes("."))
            cookie.domain = "." + cookie.domain;
          break;
        case "path":
          cookie.path = value2 || "";
          break;
        case "secure":
          cookie.secure = true;
          break;
        case "httponly":
          cookie.httpOnly = true;
          break;
        case "samesite":
          switch (value2.toLowerCase()) {
            case "none":
              cookie.sameSite = "None";
              break;
            case "lax":
              cookie.sameSite = "Lax";
              break;
            case "strict":
              cookie.sameSite = "Strict";
              break;
          }
          break;
      }
    }
    return cookie;
  }
  function domainMatches(value, domain) {
    if (value === domain)
      return true;
    if (!domain.startsWith("."))
      return false;
    value = "." + value;
    return value.endsWith(domain);
  }
  function pathMatches(value, path) {
    if (value === path)
      return true;
    if (!value.endsWith("/"))
      value = value + "/";
    if (!path.endsWith("/"))
      path = path + "/";
    return value.startsWith(path);
  }
});

// node_modules/playwright-core/lib/server/bidi/bidiNetworkManager.js
var require_bidiNetworkManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiNetworkManager = undefined;
  exports.bidiBytesValueToString = bidiBytesValueToString;
  var _eventsHelper = require_eventsHelper();
  var network = _interopRequireWildcard(require_network2());
  var bidi = _interopRequireWildcard(require_bidiProtocol());
  var _cookieStore = require_cookieStore();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class BidiNetworkManager {
    constructor(bidiSession, page, onNavigationResponseStarted) {
      this._session = undefined;
      this._requests = undefined;
      this._page = undefined;
      this._eventListeners = undefined;
      this._onNavigationResponseStarted = undefined;
      this._userRequestInterceptionEnabled = false;
      this._protocolRequestInterceptionEnabled = false;
      this._credentials = undefined;
      this._intercepId = undefined;
      this._session = bidiSession;
      this._requests = new Map;
      this._page = page;
      this._onNavigationResponseStarted = onNavigationResponseStarted;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(bidiSession, "network.beforeRequestSent", this._onBeforeRequestSent.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.responseStarted", this._onResponseStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.responseCompleted", this._onResponseCompleted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.fetchError", this._onFetchError.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "network.authRequired", this._onAuthRequired.bind(this))];
    }
    dispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._eventListeners);
    }
    _onBeforeRequestSent(param) {
      if (param.request.url.startsWith("data:"))
        return;
      const redirectedFrom = param.redirectCount ? this._requests.get(param.request.request) || null : null;
      const frame = redirectedFrom ? redirectedFrom.request.frame() : param.context ? this._page._frameManager.frame(param.context) : null;
      if (!frame)
        return;
      if (redirectedFrom)
        this._requests.delete(redirectedFrom._id);
      let route;
      if (param.intercepts) {
        if (redirectedFrom) {
          var _redirectedFrom$_orig;
          this._session.sendMayFail("network.continueRequest", {
            request: param.request.request,
            ...((_redirectedFrom$_orig = redirectedFrom._originalRequestRoute) === null || _redirectedFrom$_orig === undefined ? undefined : _redirectedFrom$_orig._alreadyContinuedHeaders) || {}
          });
        } else {
          route = new BidiRouteImpl(this._session, param.request.request);
        }
      }
      const request = new BidiRequest(frame, redirectedFrom, param, route);
      this._requests.set(request._id, request);
      this._page._frameManager.requestStarted(request.request, route);
    }
    _onResponseStarted(params) {
      const request = this._requests.get(params.request.request);
      if (!request)
        return;
      const getResponseBody = async () => {
        throw new Error(`Response body is not available for requests in Bidi`);
      };
      const timings = params.request.timings;
      const startTime = timings.requestTime;
      function relativeToStart(time) {
        if (!time)
          return -1;
        return (time - startTime) / 1000;
      }
      const timing = {
        startTime: startTime / 1000,
        requestStart: relativeToStart(timings.requestStart),
        responseStart: relativeToStart(timings.responseStart),
        domainLookupStart: relativeToStart(timings.dnsStart),
        domainLookupEnd: relativeToStart(timings.dnsEnd),
        connectStart: relativeToStart(timings.connectStart),
        secureConnectionStart: relativeToStart(timings.tlsStart),
        connectEnd: relativeToStart(timings.connectEnd)
      };
      const response = new network.Response(request.request, params.response.status, params.response.statusText, fromBidiHeaders(params.response.headers), timing, getResponseBody, false);
      response._serverAddrFinished();
      response._securityDetailsFinished();
      response.setRawResponseHeaders(null);
      response.setResponseHeadersSize(params.response.headersSize);
      this._page._frameManager.requestReceivedResponse(response);
      if (params.navigation)
        this._onNavigationResponseStarted(params);
    }
    _onResponseCompleted(params) {
      const request = this._requests.get(params.request.request);
      if (!request)
        return;
      const response = request.request._existingResponse();
      response.setTransferSize(params.response.bodySize);
      response.setEncodedBodySize(params.response.bodySize);
      const isRedirected = response.status() >= 300 && response.status() <= 399;
      const responseEndTime = params.request.timings.responseEnd / 1000 - response.timing().startTime;
      if (isRedirected) {
        response._requestFinished(responseEndTime);
      } else {
        this._requests.delete(request._id);
        response._requestFinished(responseEndTime);
      }
      response._setHttpVersion(params.response.protocol);
      this._page._frameManager.reportRequestFinished(request.request, response);
    }
    _onFetchError(params) {
      const request = this._requests.get(params.request.request);
      if (!request)
        return;
      this._requests.delete(request._id);
      const response = request.request._existingResponse();
      if (response) {
        response.setTransferSize(null);
        response.setEncodedBodySize(null);
        response._requestFinished(-1);
      }
      request.request._setFailureText(params.errorText);
      this._page._frameManager.requestFailed(request.request, params.errorText === "NS_BINDING_ABORTED");
    }
    _onAuthRequired(params) {
      var _params$response$auth;
      const isBasic = (_params$response$auth = params.response.authChallenges) === null || _params$response$auth === undefined ? undefined : _params$response$auth.some((challenge) => challenge.scheme.startsWith("Basic"));
      const credentials = this._page._browserContext._options.httpCredentials;
      if (isBasic && credentials) {
        this._session.sendMayFail("network.continueWithAuth", {
          request: params.request.request,
          action: "provideCredentials",
          credentials: {
            type: "password",
            username: credentials.username,
            password: credentials.password
          }
        });
      } else {
        this._session.sendMayFail("network.continueWithAuth", {
          request: params.request.request,
          action: "default"
        });
      }
    }
    async setRequestInterception(value) {
      this._userRequestInterceptionEnabled = value;
      await this._updateProtocolRequestInterception();
    }
    async setCredentials(credentials) {
      this._credentials = credentials;
      await this._updateProtocolRequestInterception();
    }
    async _updateProtocolRequestInterception(initial) {
      const enabled = this._userRequestInterceptionEnabled || !!this._credentials;
      if (enabled === this._protocolRequestInterceptionEnabled)
        return;
      this._protocolRequestInterceptionEnabled = enabled;
      if (initial && !enabled)
        return;
      const cachePromise = this._session.send("network.setCacheBehavior", {
        cacheBehavior: enabled ? "bypass" : "default"
      });
      let interceptPromise = Promise.resolve(undefined);
      if (enabled) {
        interceptPromise = this._session.send("network.addIntercept", {
          phases: [bidi.Network.InterceptPhase.AuthRequired, bidi.Network.InterceptPhase.BeforeRequestSent],
          urlPatterns: [{
            type: "pattern"
          }]
        }).then((r) => {
          this._intercepId = r.intercept;
        });
      } else if (this._intercepId) {
        interceptPromise = this._session.send("network.removeIntercept", {
          intercept: this._intercepId
        });
        this._intercepId = undefined;
      }
      await Promise.all([cachePromise, interceptPromise]);
    }
  }
  exports.BidiNetworkManager = BidiNetworkManager;

  class BidiRequest {
    constructor(frame, redirectedFrom, payload, route) {
      var _payload$navigation;
      this.request = undefined;
      this._id = undefined;
      this._redirectedTo = undefined;
      this._originalRequestRoute = undefined;
      this._id = payload.request.request;
      if (redirectedFrom)
        redirectedFrom._redirectedTo = this;
      const postDataBuffer = null;
      this.request = new network.Request(frame._page._browserContext, frame, null, redirectedFrom ? redirectedFrom.request : null, (_payload$navigation = payload.navigation) !== null && _payload$navigation !== undefined ? _payload$navigation : undefined, payload.request.url, "other", payload.request.method, postDataBuffer, fromBidiHeaders(payload.request.headers));
      this.request.setRawRequestHeaders(null);
      this.request._setBodySize(payload.request.bodySize || 0);
      this._originalRequestRoute = route !== null && route !== undefined ? route : redirectedFrom === null || redirectedFrom === undefined ? undefined : redirectedFrom._originalRequestRoute;
      route === null || route === undefined || route._setRequest(this.request);
    }
    _finalRequest() {
      let request = this;
      while (request._redirectedTo)
        request = request._redirectedTo;
      return request;
    }
  }

  class BidiRouteImpl {
    constructor(session, requestId) {
      this._requestId = undefined;
      this._session = undefined;
      this._request = undefined;
      this._alreadyContinuedHeaders = undefined;
      this._session = session;
      this._requestId = requestId;
    }
    _setRequest(request) {
      this._request = request;
    }
    async continue(overrides) {
      let headers = overrides.headers || this._request.headers();
      if (overrides.postData && headers) {
        headers = headers.map((header) => {
          if (header.name.toLowerCase() === "content-length")
            return {
              name: header.name,
              value: overrides.postData.byteLength.toString()
            };
          return header;
        });
      }
      this._alreadyContinuedHeaders = headers;
      await this._session.sendMayFail("network.continueRequest", {
        request: this._requestId,
        url: overrides.url,
        method: overrides.method,
        ...toBidiRequestHeaders(this._alreadyContinuedHeaders),
        body: overrides.postData ? {
          type: "base64",
          value: Buffer.from(overrides.postData).toString("base64")
        } : undefined
      });
    }
    async fulfill(response) {
      const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString("base64");
      await this._session.sendMayFail("network.provideResponse", {
        request: this._requestId,
        statusCode: response.status,
        reasonPhrase: network.statusText(response.status),
        ...toBidiResponseHeaders(response.headers),
        body: {
          type: "base64",
          value: base64body
        }
      });
    }
    async abort(errorCode) {
      await this._session.sendMayFail("network.failRequest", {
        request: this._requestId
      });
    }
  }
  function fromBidiHeaders(bidiHeaders) {
    const result = [];
    for (const {
      name,
      value
    } of bidiHeaders)
      result.push({
        name,
        value: bidiBytesValueToString(value)
      });
    return result;
  }
  function toBidiRequestHeaders(allHeaders) {
    const bidiHeaders = toBidiHeaders(allHeaders);
    const cookies = bidiHeaders.filter((h) => h.name.toLowerCase() === "cookie");
    const headers = bidiHeaders.filter((h) => h.name.toLowerCase() !== "cookie");
    return {
      cookies,
      headers
    };
  }
  function toBidiResponseHeaders(headers) {
    const setCookieHeaders = headers.filter((h) => h.name.toLowerCase() === "set-cookie");
    const otherHeaders = headers.filter((h) => h.name.toLowerCase() !== "set-cookie");
    const rawCookies = setCookieHeaders.map((h) => (0, _cookieStore.parseRawCookie)(h.value));
    const cookies = rawCookies.filter(Boolean).map((c) => {
      return {
        ...c,
        value: {
          type: "string",
          value: c.value
        },
        sameSite: toBidiSameSite(c.sameSite)
      };
    });
    return {
      cookies,
      headers: toBidiHeaders(otherHeaders)
    };
  }
  function toBidiHeaders(headers) {
    return headers.map(({
      name,
      value
    }) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  function bidiBytesValueToString(value) {
    if (value.type === "string")
      return value.value;
    if (value.type === "base64")
      return Buffer.from(value.type, "base64").toString("binary");
    return "unknown value type: " + value.type;
  }
  function toBidiSameSite(sameSite) {
    if (!sameSite)
      return;
    if (sameSite === "Strict")
      return bidi.Network.SameSite.Strict;
    if (sameSite === "Lax")
      return bidi.Network.SameSite.Lax;
    return bidi.Network.SameSite.None;
  }
});

// node_modules/playwright-core/lib/server/bidi/third_party/bidiKeyboard.js
var require_bidiKeyboard = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getBidiKeyValue = undefined;
  var getBidiKeyValue = (key) => {
    switch (key) {
      case "\r":
      case `
`:
        key = "Enter";
        break;
    }
    if ([...key].length === 1) {
      return key;
    }
    switch (key) {
      case "Cancel":
        return "";
      case "Help":
        return "";
      case "Backspace":
        return "";
      case "Tab":
        return "";
      case "Clear":
        return "";
      case "Enter":
        return "";
      case "Shift":
      case "ShiftLeft":
        return "";
      case "Control":
      case "ControlLeft":
        return "";
      case "Alt":
      case "AltLeft":
        return "";
      case "Pause":
        return "";
      case "Escape":
        return "";
      case "PageUp":
        return "";
      case "PageDown":
        return "";
      case "End":
        return "";
      case "Home":
        return "";
      case "ArrowLeft":
        return "";
      case "ArrowUp":
        return "";
      case "ArrowRight":
        return "";
      case "ArrowDown":
        return "";
      case "Insert":
        return "";
      case "Delete":
        return "";
      case "NumpadEqual":
        return "";
      case "Numpad0":
        return "";
      case "Numpad1":
        return "";
      case "Numpad2":
        return "";
      case "Numpad3":
        return "";
      case "Numpad4":
        return "";
      case "Numpad5":
        return "";
      case "Numpad6":
        return "";
      case "Numpad7":
        return "";
      case "Numpad8":
        return "";
      case "Numpad9":
        return "";
      case "NumpadMultiply":
        return "";
      case "NumpadAdd":
        return "";
      case "NumpadSubtract":
        return "";
      case "NumpadDecimal":
        return "";
      case "NumpadDivide":
        return "";
      case "F1":
        return "";
      case "F2":
        return "";
      case "F3":
        return "";
      case "F4":
        return "";
      case "F5":
        return "";
      case "F6":
        return "";
      case "F7":
        return "";
      case "F8":
        return "";
      case "F9":
        return "";
      case "F10":
        return "";
      case "F11":
        return "";
      case "F12":
        return "";
      case "Meta":
      case "MetaLeft":
        return "";
      case "ShiftRight":
        return "";
      case "ControlRight":
        return "";
      case "AltRight":
        return "";
      case "MetaRight":
        return "";
      case "Digit0":
        return "0";
      case "Digit1":
        return "1";
      case "Digit2":
        return "2";
      case "Digit3":
        return "3";
      case "Digit4":
        return "4";
      case "Digit5":
        return "5";
      case "Digit6":
        return "6";
      case "Digit7":
        return "7";
      case "Digit8":
        return "8";
      case "Digit9":
        return "9";
      case "KeyA":
        return "a";
      case "KeyB":
        return "b";
      case "KeyC":
        return "c";
      case "KeyD":
        return "d";
      case "KeyE":
        return "e";
      case "KeyF":
        return "f";
      case "KeyG":
        return "g";
      case "KeyH":
        return "h";
      case "KeyI":
        return "i";
      case "KeyJ":
        return "j";
      case "KeyK":
        return "k";
      case "KeyL":
        return "l";
      case "KeyM":
        return "m";
      case "KeyN":
        return "n";
      case "KeyO":
        return "o";
      case "KeyP":
        return "p";
      case "KeyQ":
        return "q";
      case "KeyR":
        return "r";
      case "KeyS":
        return "s";
      case "KeyT":
        return "t";
      case "KeyU":
        return "u";
      case "KeyV":
        return "v";
      case "KeyW":
        return "w";
      case "KeyX":
        return "x";
      case "KeyY":
        return "y";
      case "KeyZ":
        return "z";
      case "Semicolon":
        return ";";
      case "Equal":
        return "=";
      case "Comma":
        return ",";
      case "Minus":
        return "-";
      case "Period":
        return ".";
      case "Slash":
        return "/";
      case "Backquote":
        return "`";
      case "BracketLeft":
        return "[";
      case "Backslash":
        return "\\";
      case "BracketRight":
        return "]";
      case "Quote":
        return '"';
      default:
        throw new Error(`Unknown key: "${key}"`);
    }
  };
  exports.getBidiKeyValue = getBidiKeyValue;
});

// node_modules/playwright-core/lib/server/bidi/bidiInput.js
var require_bidiInput = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RawTouchscreenImpl = exports.RawMouseImpl = exports.RawKeyboardImpl = undefined;
  var bidi = _interopRequireWildcard(require_bidiProtocol());
  var _bidiKeyboard = require_bidiKeyboard();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class RawKeyboardImpl {
    constructor(session) {
      this._session = undefined;
      this._session = session;
    }
    setSession(session) {
      this._session = session;
    }
    async keydown(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2, autoRepeat, text) {
      const actions = [];
      actions.push({
        type: "keyDown",
        value: (0, _bidiKeyboard.getBidiKeyValue)(key)
      });
      await this._performActions(actions);
    }
    async keyup(modifiers, code, keyCode, keyCodeWithoutLocation, key, location2) {
      const actions = [];
      actions.push({
        type: "keyUp",
        value: (0, _bidiKeyboard.getBidiKeyValue)(key)
      });
      await this._performActions(actions);
    }
    async sendText(text) {
      const actions = [];
      for (const char of text) {
        const value = (0, _bidiKeyboard.getBidiKeyValue)(char);
        actions.push({
          type: "keyDown",
          value
        });
        actions.push({
          type: "keyUp",
          value
        });
      }
      await this._performActions(actions);
    }
    async _performActions(actions) {
      await this._session.send("input.performActions", {
        context: this._session.sessionId,
        actions: [{
          type: "key",
          id: "pw_keyboard",
          actions
        }]
      });
    }
  }
  exports.RawKeyboardImpl = RawKeyboardImpl;

  class RawMouseImpl {
    constructor(session) {
      this._session = undefined;
      this._session = session;
    }
    async move(x, y, button, buttons, modifiers, forClick) {
      x = Math.round(x);
      y = Math.round(y);
      await this._performActions([{
        type: "pointerMove",
        x,
        y
      }]);
    }
    async down(x, y, button, buttons, modifiers, clickCount) {
      await this._performActions([{
        type: "pointerDown",
        button: toBidiButton(button)
      }]);
    }
    async up(x, y, button, buttons, modifiers, clickCount) {
      await this._performActions([{
        type: "pointerUp",
        button: toBidiButton(button)
      }]);
    }
    async wheel(x, y, buttons, modifiers, deltaX, deltaY) {
      x = Math.round(x);
      y = Math.round(y);
      await this._session.send("input.performActions", {
        context: this._session.sessionId,
        actions: [{
          type: "wheel",
          id: "pw_mouse_wheel",
          actions: [{
            type: "scroll",
            x,
            y,
            deltaX,
            deltaY
          }]
        }]
      });
    }
    async _performActions(actions) {
      await this._session.send("input.performActions", {
        context: this._session.sessionId,
        actions: [{
          type: "pointer",
          id: "pw_mouse",
          parameters: {
            pointerType: bidi.Input.PointerType.Mouse
          },
          actions
        }]
      });
    }
  }
  exports.RawMouseImpl = RawMouseImpl;

  class RawTouchscreenImpl {
    constructor(session) {
      this._session = undefined;
      this._session = session;
    }
    async tap(x, y, modifiers) {
    }
  }
  exports.RawTouchscreenImpl = RawTouchscreenImpl;
  function toBidiButton(button) {
    switch (button) {
      case "left":
        return 0;
      case "right":
        return 2;
      case "middle":
        return 1;
    }
    throw new Error("Unknown button: " + button);
  }
});

// node_modules/playwright-core/lib/server/bidi/third_party/bidiDeserializer.js
var require_bidiDeserializer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiDeserializer = undefined;

  class BidiDeserializer {
    static deserialize(result) {
      var _result$value, _result$value2, _result$value3, _result$value4;
      if (!result)
        return;
      switch (result.type) {
        case "array":
          return (_result$value = result.value) === null || _result$value === undefined ? undefined : _result$value.map((value) => {
            return BidiDeserializer.deserialize(value);
          });
        case "set":
          return (_result$value2 = result.value) === null || _result$value2 === undefined ? undefined : _result$value2.reduce((acc, value) => {
            return acc.add(BidiDeserializer.deserialize(value));
          }, new Set);
        case "object":
          return (_result$value3 = result.value) === null || _result$value3 === undefined ? undefined : _result$value3.reduce((acc, tuple) => {
            const {
              key,
              value
            } = BidiDeserializer._deserializeTuple(tuple);
            acc[key] = value;
            return acc;
          }, {});
        case "map":
          return (_result$value4 = result.value) === null || _result$value4 === undefined ? undefined : _result$value4.reduce((acc, tuple) => {
            const {
              key,
              value
            } = BidiDeserializer._deserializeTuple(tuple);
            return acc.set(key, value);
          }, new Map);
        case "promise":
          return {};
        case "regexp":
          return new RegExp(result.value.pattern, result.value.flags);
        case "date":
          return new Date(result.value);
        case "undefined":
          return;
        case "null":
          return null;
        case "number":
          return BidiDeserializer._deserializeNumber(result.value);
        case "bigint":
          return BigInt(result.value);
        case "boolean":
          return Boolean(result.value);
        case "string":
          return result.value;
      }
      throw new Error(`Deserialization of type ${result.type} not supported.`);
    }
    static _deserializeNumber(value) {
      switch (value) {
        case "-0":
          return -0;
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          return value;
      }
    }
    static _deserializeTuple([serializedKey, serializedValue]) {
      const key = typeof serializedKey === "string" ? serializedKey : BidiDeserializer.deserialize(serializedKey);
      const value = BidiDeserializer.deserialize(serializedValue);
      return {
        key,
        value
      };
    }
  }
  exports.BidiDeserializer = BidiDeserializer;
});

// node_modules/playwright-core/lib/server/bidi/third_party/bidiSerializer.js
var require_bidiSerializer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.isRegExp = exports.isPlainObject = exports.isDate = exports.BidiSerializer = undefined;

  class UnserializableError extends Error {
  }

  class BidiSerializer {
    static serialize(arg) {
      switch (typeof arg) {
        case "symbol":
        case "function":
          throw new UnserializableError(`Unable to serializable ${typeof arg}`);
        case "object":
          return BidiSerializer._serializeObject(arg);
        case "undefined":
          return {
            type: "undefined"
          };
        case "number":
          return BidiSerializer._serializeNumber(arg);
        case "bigint":
          return {
            type: "bigint",
            value: arg.toString()
          };
        case "string":
          return {
            type: "string",
            value: arg
          };
        case "boolean":
          return {
            type: "boolean",
            value: arg
          };
      }
    }
    static _serializeNumber(arg) {
      let value;
      if (Object.is(arg, -0)) {
        value = "-0";
      } else if (Object.is(arg, Infinity)) {
        value = "Infinity";
      } else if (Object.is(arg, -Infinity)) {
        value = "-Infinity";
      } else if (Object.is(arg, NaN)) {
        value = "NaN";
      } else {
        value = arg;
      }
      return {
        type: "number",
        value
      };
    }
    static _serializeObject(arg) {
      if (arg === null) {
        return {
          type: "null"
        };
      } else if (Array.isArray(arg)) {
        const parsedArray = arg.map((subArg) => {
          return BidiSerializer.serialize(subArg);
        });
        return {
          type: "array",
          value: parsedArray
        };
      } else if (isPlainObject(arg)) {
        try {
          JSON.stringify(arg);
        } catch (error) {
          if (error instanceof TypeError && error.message.startsWith("Converting circular structure to JSON")) {
            error.message += " Recursive objects are not allowed.";
          }
          throw error;
        }
        const parsedObject = [];
        for (const key in arg) {
          parsedObject.push([BidiSerializer.serialize(key), BidiSerializer.serialize(arg[key])]);
        }
        return {
          type: "object",
          value: parsedObject
        };
      } else if (isRegExp(arg)) {
        return {
          type: "regexp",
          value: {
            pattern: arg.source,
            flags: arg.flags
          }
        };
      } else if (isDate(arg)) {
        return {
          type: "date",
          value: arg.toISOString()
        };
      }
      throw new UnserializableError("Custom object serialization not possible. Use plain objects instead.");
    }
  }
  exports.BidiSerializer = BidiSerializer;
  var isPlainObject = (obj) => {
    return typeof obj === "object" && (obj === null || obj === undefined ? undefined : obj.constructor) === Object;
  };
  exports.isPlainObject = isPlainObject;
  var isRegExp = (obj) => {
    return typeof obj === "object" && (obj === null || obj === undefined ? undefined : obj.constructor) === RegExp;
  };
  exports.isRegExp = isRegExp;
  var isDate = (obj) => {
    return typeof obj === "object" && (obj === null || obj === undefined ? undefined : obj.constructor) === Date;
  };
  exports.isDate = isDate;
});

// node_modules/playwright-core/lib/server/bidi/bidiExecutionContext.js
var require_bidiExecutionContext = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiExecutionContext = undefined;
  var _utilityScriptSerializers = require_utilityScriptSerializers();
  var js = _interopRequireWildcard(require_javascript());
  var _bidiDeserializer = require_bidiDeserializer();
  var bidi = _interopRequireWildcard(require_bidiProtocol());
  var _bidiSerializer = require_bidiSerializer();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class BidiExecutionContext {
    constructor(session, realmInfo) {
      this._session = undefined;
      this._target = undefined;
      this._session = session;
      if (realmInfo.type === "window") {
        this._target = {
          context: realmInfo.context,
          sandbox: realmInfo.sandbox
        };
      } else {
        this._target = {
          realm: realmInfo.realm
        };
      }
    }
    async rawEvaluateJSON(expression) {
      const response = await this._session.send("script.evaluate", {
        expression,
        target: this._target,
        serializationOptions: {
          maxObjectDepth: 10,
          maxDomDepth: 10
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "success")
        return _bidiDeserializer.BidiDeserializer.deserialize(response.result);
      if (response.type === "exception")
        throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + `
Full val: ` + JSON.stringify(response.exceptionDetails));
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
    async rawEvaluateHandle(expression) {
      const response = await this._session.send("script.evaluate", {
        expression,
        target: this._target,
        resultOwnership: bidi.Script.ResultOwnership.Root,
        serializationOptions: {
          maxObjectDepth: 0,
          maxDomDepth: 0
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "success") {
        if ("handle" in response.result)
          return response.result.handle;
        throw new js.JavaScriptErrorInEvaluate("Cannot get handle: " + JSON.stringify(response.result));
      }
      if (response.type === "exception")
        throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + `
Full val: ` + JSON.stringify(response.exceptionDetails));
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
    async evaluateWithArguments(functionDeclaration, returnByValue, utilityScript, values, objectIds) {
      const response = await this._session.send("script.callFunction", {
        functionDeclaration,
        target: this._target,
        arguments: [{
          handle: utilityScript._objectId
        }, ...values.map(_bidiSerializer.BidiSerializer.serialize), ...objectIds.map((handle) => ({
          handle
        }))],
        resultOwnership: returnByValue ? undefined : bidi.Script.ResultOwnership.Root,
        serializationOptions: returnByValue ? {} : {
          maxObjectDepth: 0,
          maxDomDepth: 0
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "exception")
        throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + `
Full val: ` + JSON.stringify(response.exceptionDetails));
      if (response.type === "success") {
        if (returnByValue)
          return (0, _utilityScriptSerializers.parseEvaluationResultValue)(_bidiDeserializer.BidiDeserializer.deserialize(response.result));
        const objectId = "handle" in response.result ? response.result.handle : undefined;
        return utilityScript._context.createHandle({
          objectId,
          ...response.result
        });
      }
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
    async getProperties(context, objectId) {
      throw new Error("Method not implemented.");
    }
    createHandle(context, jsRemoteObject) {
      const remoteObject = jsRemoteObject;
      return new js.JSHandle(context, remoteObject.type, renderPreview(remoteObject), jsRemoteObject.objectId, remoteObjectValue(remoteObject));
    }
    async releaseHandle(objectId) {
      await this._session.send("script.disown", {
        target: this._target,
        handles: [objectId]
      });
    }
    async rawCallFunction(functionDeclaration, arg) {
      const response = await this._session.send("script.callFunction", {
        functionDeclaration,
        target: this._target,
        arguments: [arg],
        resultOwnership: bidi.Script.ResultOwnership.Root,
        serializationOptions: {
          maxObjectDepth: 0,
          maxDomDepth: 0
        },
        awaitPromise: true,
        userActivation: true
      });
      if (response.type === "exception")
        throw new js.JavaScriptErrorInEvaluate(response.exceptionDetails.text + `
Full val: ` + JSON.stringify(response.exceptionDetails));
      if (response.type === "success")
        return response.result;
      throw new js.JavaScriptErrorInEvaluate("Unexpected response type: " + JSON.stringify(response));
    }
  }
  exports.BidiExecutionContext = BidiExecutionContext;
  function renderPreview(remoteObject) {
    if (remoteObject.type === "undefined")
      return "undefined";
    if (remoteObject.type === "null")
      return "null";
    if ("value" in remoteObject)
      return String(remoteObject.value);
    return `<${remoteObject.type}>`;
  }
  function remoteObjectValue(remoteObject) {
    if (remoteObject.type === "undefined")
      return;
    if (remoteObject.type === "null")
      return null;
    if (remoteObject.type === "number" && typeof remoteObject.value === "string")
      return js.parseUnserializableValue(remoteObject.value);
    if ("value" in remoteObject)
      return remoteObject.value;
    return;
  }
});

// node_modules/playwright-core/lib/server/bidi/bidiPdf.js
var require_bidiPdf = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiPDF = undefined;
  var _utils = require_utils();
  var PagePaperFormats = {
    letter: {
      width: 8.5,
      height: 11
    },
    legal: {
      width: 8.5,
      height: 14
    },
    tabloid: {
      width: 11,
      height: 17
    },
    ledger: {
      width: 17,
      height: 11
    },
    a0: {
      width: 33.1,
      height: 46.8
    },
    a1: {
      width: 23.4,
      height: 33.1
    },
    a2: {
      width: 16.54,
      height: 23.4
    },
    a3: {
      width: 11.7,
      height: 16.54
    },
    a4: {
      width: 8.27,
      height: 11.7
    },
    a5: {
      width: 5.83,
      height: 8.27
    },
    a6: {
      width: 4.13,
      height: 5.83
    }
  };
  var unitToPixels = {
    px: 1,
    in: 96,
    cm: 37.8,
    mm: 3.78
  };
  function convertPrintParameterToInches(text) {
    if (text === undefined)
      return;
    let unit = text.substring(text.length - 2).toLowerCase();
    let valueText = "";
    if (unitToPixels.hasOwnProperty(unit)) {
      valueText = text.substring(0, text.length - 2);
    } else {
      unit = "px";
      valueText = text;
    }
    const value = Number(valueText);
    (0, _utils.assert)(!isNaN(value), "Failed to parse parameter value: " + text);
    const pixels = value * unitToPixels[unit];
    return pixels / 96;
  }

  class BidiPDF {
    constructor(session) {
      this._session = undefined;
      this._session = session;
    }
    async generate(options) {
      const {
        scale = 1,
        printBackground = false,
        landscape = false,
        pageRanges = "",
        margin = {}
      } = options;
      let paperWidth = 8.5;
      let paperHeight = 11;
      if (options.format) {
        const format = PagePaperFormats[options.format.toLowerCase()];
        (0, _utils.assert)(format, "Unknown paper format: " + options.format);
        paperWidth = format.width;
        paperHeight = format.height;
      } else {
        paperWidth = convertPrintParameterToInches(options.width) || paperWidth;
        paperHeight = convertPrintParameterToInches(options.height) || paperHeight;
      }
      const {
        data
      } = await this._session.send("browsingContext.print", {
        context: this._session.sessionId,
        background: printBackground,
        margin: {
          bottom: convertPrintParameterToInches(margin.bottom) || 0,
          left: convertPrintParameterToInches(margin.left) || 0,
          right: convertPrintParameterToInches(margin.right) || 0,
          top: convertPrintParameterToInches(margin.top) || 0
        },
        orientation: landscape ? "landscape" : "portrait",
        page: {
          width: paperWidth,
          height: paperHeight
        },
        pageRanges: pageRanges ? pageRanges.split(",").map((r) => r.trim()) : undefined,
        scale
      });
      return Buffer.from(data, "base64");
    }
  }
  exports.BidiPDF = BidiPDF;
});

// node_modules/playwright-core/lib/server/bidi/bidiPage.js
var require_bidiPage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiPage = undefined;
  var _eventsHelper = require_eventsHelper();
  var _utils = require_utils();
  var dom = _interopRequireWildcard(require_dom());
  var dialog = _interopRequireWildcard(require_dialog());
  var _page = require_page();
  var _bidiInput = require_bidiInput();
  var bidi = _interopRequireWildcard(require_bidiProtocol());
  var _bidiExecutionContext = require_bidiExecutionContext();
  var _bidiNetworkManager = require_bidiNetworkManager();
  var _browserContext = require_browserContext();
  var _bidiPdf = require_bidiPdf();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var UTILITY_WORLD_NAME = "__playwright_utility_world__";
  var kPlaywrightBindingChannel = "playwrightChannel";

  class BidiPage {
    constructor(browserContext, bidiSession, opener) {
      this.rawMouse = undefined;
      this.rawKeyboard = undefined;
      this.rawTouchscreen = undefined;
      this._page = undefined;
      this._pagePromise = undefined;
      this._session = undefined;
      this._opener = undefined;
      this._realmToContext = undefined;
      this._sessionListeners = [];
      this._browserContext = undefined;
      this._networkManager = undefined;
      this._pdf = undefined;
      this._initializedPage = null;
      this._initScriptIds = [];
      this._session = bidiSession;
      this._opener = opener;
      this.rawKeyboard = new _bidiInput.RawKeyboardImpl(bidiSession);
      this.rawMouse = new _bidiInput.RawMouseImpl(bidiSession);
      this.rawTouchscreen = new _bidiInput.RawTouchscreenImpl(bidiSession);
      this._realmToContext = new Map;
      this._page = new _page.Page(this, browserContext);
      this._browserContext = browserContext;
      this._networkManager = new _bidiNetworkManager.BidiNetworkManager(this._session, this._page, this._onNavigationResponseStarted.bind(this));
      this._pdf = new _bidiPdf.BidiPDF(this._session);
      this._page.on(_page.Page.Events.FrameDetached, (frame) => this._removeContextsForFrame(frame, false));
      this._sessionListeners = [_eventsHelper.eventsHelper.addEventListener(bidiSession, "script.realmCreated", this._onRealmCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "script.message", this._onScriptMessage.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.contextDestroyed", this._onBrowsingContextDestroyed.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationStarted", this._onNavigationStarted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationAborted", this._onNavigationAborted.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.navigationFailed", this._onNavigationFailed.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.fragmentNavigated", this._onFragmentNavigated.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.domContentLoaded", this._onDomContentLoaded.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.load", this._onLoad.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "browsingContext.userPromptOpened", this._onUserPromptOpened.bind(this)), _eventsHelper.eventsHelper.addEventListener(bidiSession, "log.entryAdded", this._onLogEntryAdded.bind(this))];
      this._pagePromise = this._initialize().finally(async () => {
        await this._page.initOpener(this._opener);
      }).then(() => {
        this._initializedPage = this._page;
        this._page.reportAsNew();
        return this._page;
      }).catch((e) => {
        this._page.reportAsNew(e);
        return e;
      });
    }
    async _initialize() {
      this._onFrameAttached(this._session.sessionId, null);
      await Promise.all([this.updateHttpCredentials(), this.updateRequestInterception(), this._updateViewport(), this._installMainBinding(), this._addAllInitScripts()]);
    }
    async _addAllInitScripts() {
      return Promise.all(this._page.allInitScripts().map((initScript) => this.addInitScript(initScript)));
    }
    potentiallyUninitializedPage() {
      return this._page;
    }
    didClose() {
      this._session.dispose();
      _eventsHelper.eventsHelper.removeEventListeners(this._sessionListeners);
      this._page._didClose();
    }
    async pageOrError() {
      return this._pagePromise;
    }
    _onFrameAttached(frameId, parentFrameId) {
      return this._page._frameManager.frameAttached(frameId, parentFrameId);
    }
    _removeContextsForFrame(frame, notifyFrame) {
      for (const [contextId, context] of this._realmToContext) {
        if (context.frame === frame) {
          this._realmToContext.delete(contextId);
          if (notifyFrame)
            frame._contextDestroyed(context);
        }
      }
    }
    _onRealmCreated(realmInfo) {
      if (this._realmToContext.has(realmInfo.realm))
        return;
      if (realmInfo.type !== "window")
        return;
      const frame = this._page._frameManager.frame(realmInfo.context);
      if (!frame)
        return;
      const delegate = new _bidiExecutionContext.BidiExecutionContext(this._session, realmInfo);
      let worldName;
      if (!realmInfo.sandbox) {
        worldName = "main";
        this._touchUtilityWorld(realmInfo.context);
      } else if (realmInfo.sandbox === UTILITY_WORLD_NAME) {
        worldName = "utility";
      } else {
        return;
      }
      const context = new dom.FrameExecutionContext(delegate, frame, worldName);
      context[contextDelegateSymbol] = delegate;
      frame._contextCreated(worldName, context);
      this._realmToContext.set(realmInfo.realm, context);
    }
    async _touchUtilityWorld(context) {
      await this._session.sendMayFail("script.evaluate", {
        expression: "1 + 1",
        target: {
          context,
          sandbox: UTILITY_WORLD_NAME
        },
        serializationOptions: {
          maxObjectDepth: 10,
          maxDomDepth: 10
        },
        awaitPromise: true,
        userActivation: true
      });
    }
    _onRealmDestroyed(params) {
      const context = this._realmToContext.get(params.realm);
      if (!context)
        return false;
      this._realmToContext.delete(params.realm);
      context.frame._contextDestroyed(context);
      return true;
    }
    _onBrowsingContextDestroyed(params) {
      this._browserContext._browser._onBrowsingContextDestroyed(params);
    }
    _onNavigationStarted(params) {
      const frameId = params.context;
      this._page._frameManager.frameRequestedNavigation(frameId, params.navigation);
      const url = params.url.toLowerCase();
      if (url.startsWith("file:") || url.startsWith("data:") || url === "about:blank") {
        const frame = this._page._frameManager.frame(frameId);
        if (frame)
          this._page._frameManager.frameCommittedNewDocumentNavigation(frameId, params.url, "", params.navigation, false);
      }
    }
    _onNavigationResponseStarted(params) {
      const frameId = params.context;
      const frame = this._page._frameManager.frame(frameId);
      (0, _utils.assert)(frame);
      this._page._frameManager.frameCommittedNewDocumentNavigation(frameId, params.response.url, "", params.navigation, false);
    }
    _onDomContentLoaded(params) {
      const frameId = params.context;
      this._page._frameManager.frameLifecycleEvent(frameId, "domcontentloaded");
    }
    _onLoad(params) {
      this._page._frameManager.frameLifecycleEvent(params.context, "load");
    }
    _onNavigationAborted(params) {
      this._page._frameManager.frameAbortedNavigation(params.context, "Navigation aborted", params.navigation || undefined);
    }
    _onNavigationFailed(params) {
      this._page._frameManager.frameAbortedNavigation(params.context, "Navigation failed", params.navigation || undefined);
    }
    _onFragmentNavigated(params) {
      this._page._frameManager.frameCommittedSameDocumentNavigation(params.context, params.url);
    }
    _onUserPromptOpened(event) {
      this._page.emitOnContext(_browserContext.BrowserContext.Events.Dialog, new dialog.Dialog(this._page, event.type, event.message, async (accept, userText) => {
        await this._session.send("browsingContext.handleUserPrompt", {
          context: event.context,
          accept,
          userText
        });
      }, event.defaultValue));
    }
    _onLogEntryAdded(params) {
      var _params$stackTrace;
      if (params.type !== "console")
        return;
      const entry = params;
      const context = this._realmToContext.get(params.source.realm);
      if (!context)
        return;
      const callFrame = (_params$stackTrace = params.stackTrace) === null || _params$stackTrace === undefined ? undefined : _params$stackTrace.callFrames[0];
      const location2 = callFrame !== null && callFrame !== undefined ? callFrame : {
        url: "",
        lineNumber: 1,
        columnNumber: 1
      };
      this._page._addConsoleMessage(entry.method, entry.args.map((arg) => context.createHandle({
        objectId: arg.handle,
        ...arg
      })), location2, params.text || undefined);
    }
    async navigateFrame(frame, url, referrer) {
      const {
        navigation
      } = await this._session.send("browsingContext.navigate", {
        context: frame._id,
        url
      });
      return {
        newDocumentId: navigation || undefined
      };
    }
    async updateExtraHTTPHeaders() {
    }
    async updateEmulateMedia() {
    }
    async updateEmulatedViewportSize() {
      await this._updateViewport();
    }
    async updateUserAgent() {
    }
    async bringToFront() {
      await this._session.send("browsingContext.activate", {
        context: this._session.sessionId
      });
    }
    async _updateViewport() {
      const options = this._browserContext._options;
      const deviceSize = this._page.emulatedSize();
      if (deviceSize === null)
        return;
      const viewportSize = deviceSize.viewport;
      await this._session.send("browsingContext.setViewport", {
        context: this._session.sessionId,
        viewport: {
          width: viewportSize.width,
          height: viewportSize.height
        },
        devicePixelRatio: options.deviceScaleFactor || 1
      });
    }
    async updateRequestInterception() {
      await this._networkManager.setRequestInterception(this._page.needsRequestInterception());
    }
    async updateOffline() {
    }
    async updateHttpCredentials() {
      await this._networkManager.setCredentials(this._browserContext._options.httpCredentials);
    }
    async updateFileChooserInterception() {
    }
    async reload() {
      await this._session.send("browsingContext.reload", {
        context: this._session.sessionId,
        wait: bidi.BrowsingContext.ReadinessState.Interactive
      });
    }
    async goBack() {
      return await this._session.send("browsingContext.traverseHistory", {
        context: this._session.sessionId,
        delta: -1
      }).then(() => true).catch(() => false);
    }
    async goForward() {
      return await this._session.send("browsingContext.traverseHistory", {
        context: this._session.sessionId,
        delta: 1
      }).then(() => true).catch(() => false);
    }
    async requestGC() {
      throw new Error("Method not implemented.");
    }
    async _installMainBinding() {
      const functionDeclaration = addMainBinding.toString();
      const args = [{
        type: "channel",
        value: {
          channel: kPlaywrightBindingChannel,
          ownership: bidi.Script.ResultOwnership.Root
        }
      }];
      const promises = [];
      promises.push(this._session.send("script.addPreloadScript", {
        functionDeclaration,
        arguments: args
      }));
      promises.push(this._session.send("script.callFunction", {
        functionDeclaration,
        arguments: args,
        target: toBidiExecutionContext(await this._page.mainFrame()._mainContext())._target,
        awaitPromise: false,
        userActivation: false
      }));
      await Promise.all(promises);
    }
    async _onScriptMessage(event) {
      if (event.channel !== kPlaywrightBindingChannel)
        return;
      const pageOrError = await this.pageOrError();
      if (pageOrError instanceof Error)
        return;
      const context = this._realmToContext.get(event.source.realm);
      if (!context)
        return;
      if (event.data.type !== "string")
        return;
      await this._page._onBindingCalled(event.data.value, context);
    }
    async addInitScript(initScript) {
      const {
        script
      } = await this._session.send("script.addPreloadScript", {
        functionDeclaration: `() => { return ${initScript.source} }`,
        contexts: [this._session.sessionId]
      });
      if (!initScript.internal)
        this._initScriptIds.push(script);
    }
    async removeNonInternalInitScripts() {
      const promises = this._initScriptIds.map((script) => this._session.send("script.removePreloadScript", {
        script
      }));
      this._initScriptIds = [];
      await Promise.all(promises);
    }
    async closePage(runBeforeUnload) {
      await this._session.send("browsingContext.close", {
        context: this._session.sessionId,
        promptUnload: runBeforeUnload
      });
    }
    async setBackgroundColor(color) {
    }
    async takeScreenshot(progress2, format, documentRect, viewportRect, quality, fitsViewport, scale) {
      const rect = documentRect || viewportRect;
      const {
        data
      } = await this._session.send("browsingContext.captureScreenshot", {
        context: this._session.sessionId,
        format: {
          type: `image/${format === "png" ? "png" : "jpeg"}`,
          quality: quality || 80
        },
        origin: documentRect ? "document" : "viewport",
        clip: {
          type: "box",
          ...rect
        }
      });
      return Buffer.from(data, "base64");
    }
    async getContentFrame(handle) {
      const executionContext = toBidiExecutionContext(handle._context);
      const contentWindow = await executionContext.rawCallFunction("e => e.contentWindow", {
        handle: handle._objectId
      });
      if (contentWindow.type === "window") {
        const frameId = contentWindow.value.context;
        const result = this._page._frameManager.frame(frameId);
        return result;
      }
      return null;
    }
    async getOwnerFrame(handle) {
      throw new Error("Method not implemented.");
    }
    isElementHandle(remoteObject) {
      return remoteObject.type === "node";
    }
    async getBoundingBox(handle) {
      const box = await handle.evaluate((element) => {
        if (!(element instanceof Element))
          return null;
        const rect = element.getBoundingClientRect();
        return {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
      });
      if (!box)
        return null;
      const position = await this._framePosition(handle._frame);
      if (!position)
        return null;
      box.x += position.x;
      box.y += position.y;
      return box;
    }
    async _framePosition(frame) {
      if (frame === this._page.mainFrame())
        return {
          x: 0,
          y: 0
        };
      const element = await frame.frameElement();
      const box = await element.boundingBox();
      if (!box)
        return null;
      const style = await element.evaluateInUtility(([injected, iframe]) => injected.describeIFrameStyle(iframe), {}).catch((e) => "error:notconnected");
      if (style === "error:notconnected" || style === "transformed")
        return null;
      box.x += style.left;
      box.y += style.top;
      return box;
    }
    async scrollRectIntoViewIfNeeded(handle, rect) {
      return await handle.evaluateInUtility(([injected, node]) => {
        node.scrollIntoView({
          block: "center",
          inline: "center",
          behavior: "instant"
        });
      }, null).then(() => "done").catch((e) => {
        if (e instanceof Error && e.message.includes("Node is detached from document"))
          return "error:notconnected";
        if (e instanceof Error && e.message.includes("Node does not have a layout object"))
          return "error:notvisible";
        throw e;
      });
    }
    async setScreencastOptions(options) {
    }
    rafCountForStablePosition() {
      return 1;
    }
    async getContentQuads(handle) {
      const quads = await handle.evaluateInUtility(([injected, node]) => {
        if (!node.isConnected)
          return "error:notconnected";
        const rects = node.getClientRects();
        if (!rects)
          return null;
        return [...rects].map((rect) => [{
          x: rect.left,
          y: rect.top
        }, {
          x: rect.right,
          y: rect.top
        }, {
          x: rect.right,
          y: rect.bottom
        }, {
          x: rect.left,
          y: rect.bottom
        }]);
      }, null);
      if (!quads || quads === "error:notconnected")
        return quads;
      const position = await this._framePosition(handle._frame);
      if (!position)
        return null;
      quads.forEach((quad) => quad.forEach((point) => {
        point.x += position.x;
        point.y += position.y;
      }));
      return quads;
    }
    async setInputFiles(handle, files) {
      throw new Error("Method not implemented.");
    }
    async setInputFilePaths(handle, paths) {
      throw new Error("Method not implemented.");
    }
    async adoptElementHandle(handle, to) {
      const fromContext = toBidiExecutionContext(handle._context);
      const shared = await fromContext.rawCallFunction("x => x", {
        handle: handle._objectId
      });
      if (!("sharedId" in shared))
        throw new Error("Element is not a node");
      const sharedId = shared.sharedId;
      const executionContext = toBidiExecutionContext(to);
      const result = await executionContext.rawCallFunction("x => x", {
        sharedId
      });
      if ("handle" in result)
        return to.createHandle({
          objectId: result.handle,
          ...result
        });
      throw new Error("Failed to adopt element handle.");
    }
    async getAccessibilityTree(needle) {
      throw new Error("Method not implemented.");
    }
    async inputActionEpilogue() {
    }
    async resetForReuse() {
    }
    async pdf(options) {
      return this._pdf.generate(options);
    }
    async getFrameElement(frame) {
      const parent = frame.parentFrame();
      if (!parent)
        throw new Error("Frame has been detached.");
      const parentContext = await parent._mainContext();
      const list = await parentContext.evaluateHandle(() => {
        return [...document.querySelectorAll("iframe,frame")];
      });
      const length = await list.evaluate((list2) => list2.length);
      let foundElement = null;
      for (let i = 0;i < length; i++) {
        const element = await list.evaluateHandle((list2, i2) => list2[i2], i);
        const candidate = await element.contentFrame();
        if (frame === candidate) {
          foundElement = element;
          break;
        } else {
          element.dispose();
        }
      }
      list.dispose();
      if (!foundElement)
        throw new Error("Frame has been detached.");
      return foundElement;
    }
    shouldToggleStyleSheetToSyncAnimations() {
      return true;
    }
  }
  exports.BidiPage = BidiPage;
  function addMainBinding(callback) {
    globalThis["__playwright__binding__"] = callback;
  }
  function toBidiExecutionContext(executionContext) {
    return executionContext[contextDelegateSymbol];
  }
  var contextDelegateSymbol = Symbol("delegate");
});

// node_modules/playwright-core/lib/server/bidi/bidiBrowser.js
var require_bidiBrowser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Network = exports.BidiBrowserContext = exports.BidiBrowser = undefined;
  var _eventsHelper = require_eventsHelper();
  var _browser = require_browser();
  var _browserContext = require_browserContext();
  var network = _interopRequireWildcard(require_network2());
  var _bidiConnection = require_bidiConnection();
  var _bidiNetworkManager = require_bidiNetworkManager();
  var _bidiPage = require_bidiPage();
  var bidi = _interopRequireWildcard(require_bidiProtocol());
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class BidiBrowser extends _browser.Browser {
    static async connect(parent, transport, options) {
      const browser = new BidiBrowser(parent, transport, options);
      if (options.__testHookOnConnectToBrowser)
        await options.__testHookOnConnectToBrowser();
      let proxy;
      if (options.proxy) {
        proxy = {
          proxyType: "manual"
        };
        const url = new URL(options.proxy.server);
        switch (url.protocol) {
          case "http:":
            proxy.httpProxy = url.host;
            break;
          case "https:":
            proxy.httpsProxy = url.host;
            break;
          case "socks4:":
            proxy.socksProxy = url.host;
            proxy.socksVersion = 4;
            break;
          case "socks5:":
            proxy.socksProxy = url.host;
            proxy.socksVersion = 5;
            break;
          default:
            throw new Error("Invalid proxy server protocol: " + options.proxy.server);
        }
        if (options.proxy.bypass)
          proxy.noProxy = options.proxy.bypass.split(",");
      }
      browser._bidiSessionInfo = await browser._browserSession.send("session.new", {
        capabilities: {
          alwaysMatch: {
            acceptInsecureCerts: false,
            proxy,
            unhandledPromptBehavior: {
              default: bidi.Session.UserPromptHandlerType.Ignore
            },
            webSocketUrl: true
          }
        }
      });
      await browser._browserSession.send("session.subscribe", {
        events: ["browsingContext", "network", "log", "script"]
      });
      if (options.persistent) {
        browser._defaultContext = new BidiBrowserContext(browser, undefined, options.persistent);
        await browser._defaultContext._initialize();
        const pageDelegate = await browser._defaultContext.newPageDelegate();
        await pageDelegate.pageOrError();
      }
      return browser;
    }
    constructor(parent, transport, options) {
      super(parent, options);
      this._connection = undefined;
      this._browserSession = undefined;
      this._bidiSessionInfo = undefined;
      this._contexts = new Map;
      this._bidiPages = new Map;
      this._eventListeners = undefined;
      this._connection = new _bidiConnection.BidiConnection(transport, this._onDisconnect.bind(this), options.protocolLogger, options.browserLogsCollector);
      this._browserSession = this._connection.browserSession;
      this._eventListeners = [_eventsHelper.eventsHelper.addEventListener(this._browserSession, "browsingContext.contextCreated", this._onBrowsingContextCreated.bind(this)), _eventsHelper.eventsHelper.addEventListener(this._browserSession, "script.realmDestroyed", this._onScriptRealmDestroyed.bind(this))];
    }
    _onDisconnect() {
      this._didClose();
    }
    async doCreateNewContext(options) {
      const {
        userContext
      } = await this._browserSession.send("browser.createUserContext", {});
      const context = new BidiBrowserContext(this, userContext, options);
      await context._initialize();
      this._contexts.set(userContext, context);
      return context;
    }
    contexts() {
      return Array.from(this._contexts.values());
    }
    version() {
      return this._bidiSessionInfo.capabilities.browserVersion;
    }
    userAgent() {
      return this._bidiSessionInfo.capabilities.userAgent;
    }
    isConnected() {
      return !this._connection.isClosed();
    }
    _onBrowsingContextCreated(event) {
      if (event.parent) {
        const parentFrameId = event.parent;
        for (const page2 of this._bidiPages.values()) {
          const parentFrame = page2._page._frameManager.frame(parentFrameId);
          if (!parentFrame)
            continue;
          page2._session.addFrameBrowsingContext(event.context);
          page2._page._frameManager.frameAttached(event.context, parentFrameId);
          return;
        }
        return;
      }
      let context = this._contexts.get(event.userContext);
      if (!context)
        context = this._defaultContext;
      if (!context)
        return;
      const session = this._connection.createMainFrameBrowsingContextSession(event.context);
      const opener = event.originalOpener && this._bidiPages.get(event.originalOpener);
      const page = new _bidiPage.BidiPage(context, session, opener || null);
      this._bidiPages.set(event.context, page);
    }
    _onBrowsingContextDestroyed(event) {
      if (event.parent) {
        this._browserSession.removeFrameBrowsingContext(event.context);
        const parentFrameId = event.parent;
        for (const page of this._bidiPages.values()) {
          const parentFrame = page._page._frameManager.frame(parentFrameId);
          if (!parentFrame)
            continue;
          page._page._frameManager.frameDetached(event.context);
          return;
        }
        return;
      }
      const bidiPage = this._bidiPages.get(event.context);
      if (!bidiPage)
        return;
      bidiPage.didClose();
      this._bidiPages.delete(event.context);
    }
    _onScriptRealmDestroyed(event) {
      for (const page of this._bidiPages.values()) {
        if (page._onRealmDestroyed(event))
          return;
      }
    }
  }
  exports.BidiBrowser = BidiBrowser;

  class BidiBrowserContext extends _browserContext.BrowserContext {
    constructor(browser, browserContextId, options) {
      super(browser, options, browserContextId);
      this._authenticateProxyViaHeader();
    }
    _bidiPages() {
      return [...this._browser._bidiPages.values()].filter((bidiPage) => bidiPage._browserContext === this);
    }
    pages() {
      return this._bidiPages().map((bidiPage) => bidiPage._initializedPage).filter(Boolean);
    }
    async newPageDelegate() {
      (0, _browserContext.assertBrowserContextIsNotOwned)(this);
      const {
        context
      } = await this._browser._browserSession.send("browsingContext.create", {
        type: bidi.BrowsingContext.CreateType.Window,
        userContext: this._browserContextId
      });
      return this._browser._bidiPages.get(context);
    }
    async doGetCookies(urls) {
      const {
        cookies
      } = await this._browser._browserSession.send("storage.getCookies", {
        partition: {
          type: "storageKey",
          userContext: this._browserContextId
        }
      });
      return network.filterCookies(cookies.map((c) => {
        var _c$expiry;
        const copy = {
          name: c.name,
          value: (0, _bidiNetworkManager.bidiBytesValueToString)(c.value),
          domain: c.domain,
          path: c.path,
          httpOnly: c.httpOnly,
          secure: c.secure,
          expires: (_c$expiry = c.expiry) !== null && _c$expiry !== undefined ? _c$expiry : -1,
          sameSite: c.sameSite ? fromBidiSameSite(c.sameSite) : "None"
        };
        return copy;
      }), urls);
    }
    async addCookies(cookies) {
      cookies = network.rewriteCookies(cookies);
      const promises = cookies.map((c) => {
        const cookie = {
          name: c.name,
          value: {
            type: "string",
            value: c.value
          },
          domain: c.domain,
          path: c.path,
          httpOnly: c.httpOnly,
          secure: c.secure,
          sameSite: c.sameSite && toBidiSameSite(c.sameSite),
          expiry: c.expires === -1 || c.expires === undefined ? undefined : Math.round(c.expires)
        };
        return this._browser._browserSession.send("storage.setCookie", {
          cookie,
          partition: {
            type: "storageKey",
            userContext: this._browserContextId
          }
        });
      });
      await Promise.all(promises);
    }
    async doClearCookies() {
      await this._browser._browserSession.send("storage.deleteCookies", {
        partition: {
          type: "storageKey",
          userContext: this._browserContextId
        }
      });
    }
    async doGrantPermissions(origin, permissions) {
    }
    async doClearPermissions() {
    }
    async setGeolocation(geolocation) {
    }
    async setExtraHTTPHeaders(headers) {
    }
    async setUserAgent(userAgent) {
    }
    async setOffline(offline) {
    }
    async doSetHTTPCredentials(httpCredentials) {
      this._options.httpCredentials = httpCredentials;
      for (const page of this.pages())
        await page._delegate.updateHttpCredentials();
    }
    async doAddInitScript(initScript) {
      await Promise.all(this.pages().map((page) => page._delegate.addInitScript(initScript)));
    }
    async doRemoveNonInternalInitScripts() {
    }
    async doUpdateRequestInterception() {
    }
    onClosePersistent() {
    }
    async clearCache() {
    }
    async doClose(reason) {
      if (!this._browserContextId) {
        await this._browser.close({
          reason
        });
        return;
      }
      await this._browser._browserSession.send("browser.removeUserContext", {
        userContext: this._browserContextId
      });
      this._browser._contexts.delete(this._browserContextId);
    }
    async cancelDownload(uuid2) {
    }
  }
  exports.BidiBrowserContext = BidiBrowserContext;
  function fromBidiSameSite(sameSite) {
    switch (sameSite) {
      case "strict":
        return "Strict";
      case "lax":
        return "Lax";
      case "none":
        return "None";
    }
    return "None";
  }
  function toBidiSameSite(sameSite) {
    switch (sameSite) {
      case "Strict":
        return bidi.Network.SameSite.Strict;
      case "Lax":
        return bidi.Network.SameSite.Lax;
      case "None":
        return bidi.Network.SameSite.None;
    }
    return bidi.Network.SameSite.None;
  }
  var Network = exports.Network = undefined;
  (function(_Network) {
    let SameSite = /* @__PURE__ */ function(SameSite2) {
      SameSite2["Strict"] = "strict";
      SameSite2["Lax"] = "lax";
      SameSite2["None"] = "none";
      return SameSite2;
    }({});
    _Network.SameSite = SameSite;
  })(Network || (exports.Network = Network = {}));
});

// node_modules/mitt/dist/mitt.js
var require_mitt = __commonJS((exports, module) => {
  module.exports = function(n) {
    return { all: n = n || new Map, on: function(e, t) {
      var i = n.get(e);
      i ? i.push(t) : n.set(e, [t]);
    }, off: function(e, t) {
      var i = n.get(e);
      i && (t ? i.splice(i.indexOf(t) >>> 0, 1) : n.set(e, []));
    }, emit: function(e, t) {
      var i = n.get(e);
      i && i.slice().map(function(n2) {
        n2(t);
      }), (i = n.get("*")) && i.slice().map(function(n2) {
        n2(e, t);
      });
    } };
  };
});

// node_modules/chromium-bidi/lib/cjs/utils/EventEmitter.js
var require_EventEmitter = __commonJS((exports) => {
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.EventEmitter = undefined;
  var mitt_1 = __importDefault(require_mitt());

  class EventEmitter {
    #emitter = (0, mitt_1.default)();
    on(type, handler) {
      this.#emitter.on(type, handler);
      return this;
    }
    once(event, handler) {
      const onceHandler = (eventData) => {
        handler(eventData);
        this.off(event, onceHandler);
      };
      return this.on(event, onceHandler);
    }
    off(type, handler) {
      this.#emitter.off(type, handler);
      return this;
    }
    emit(event, eventData) {
      this.#emitter.emit(event, eventData);
    }
    removeAllListeners(event) {
      if (event) {
        this.#emitter.all.delete(event);
      } else {
        this.#emitter.all.clear();
      }
      return this;
    }
  }
  exports.EventEmitter = EventEmitter;
});

// node_modules/chromium-bidi/lib/cjs/utils/log.js
var require_log = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.LogType = undefined;
  var LogType;
  (function(LogType2) {
    LogType2["bidi"] = "bidi";
    LogType2["cdp"] = "cdp";
    LogType2["debug"] = "debug";
    LogType2["debugError"] = "debug:error";
    LogType2["debugInfo"] = "debug:info";
  })(LogType || (exports.LogType = LogType = {}));
});

// node_modules/chromium-bidi/lib/cjs/utils/ProcessingQueue.js
var require_ProcessingQueue = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ProcessingQueue = undefined;
  var log_js_1 = require_log();

  class ProcessingQueue {
    static LOGGER_PREFIX = `${log_js_1.LogType.debug}:queue`;
    #logger;
    #processor;
    #queue = [];
    #isProcessing = false;
    constructor(processor, logger) {
      this.#processor = processor;
      this.#logger = logger;
    }
    add(entry, name) {
      this.#queue.push([entry, name]);
      this.#processIfNeeded();
    }
    async#processIfNeeded() {
      if (this.#isProcessing) {
        return;
      }
      this.#isProcessing = true;
      while (this.#queue.length > 0) {
        const arrayEntry = this.#queue.shift();
        if (!arrayEntry) {
          continue;
        }
        const [entryPromise, name] = arrayEntry;
        this.#logger?.(ProcessingQueue.LOGGER_PREFIX, "Processing event:", name);
        await entryPromise.then((entry) => {
          if (entry.kind === "error") {
            this.#logger?.(log_js_1.LogType.debugError, "Event threw before sending:", entry.error.message, entry.error.stack);
            return;
          }
          return this.#processor(entry.value);
        }).catch((error) => {
          this.#logger?.(log_js_1.LogType.debugError, "Event was not processed:", error?.message);
        });
      }
      this.#isProcessing = false;
    }
  }
  exports.ProcessingQueue = ProcessingQueue;
});

// node_modules/chromium-bidi/lib/cjs/protocol/cdp.js
var require_cdp = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
});

// node_modules/chromium-bidi/lib/cjs/protocol/chromium-bidi.js
var require_chromium_bidi = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.EVENT_NAMES = exports.Network = exports.BrowsingContext = exports.Log = exports.Script = exports.BiDiModule = undefined;
  var BiDiModule;
  (function(BiDiModule2) {
    BiDiModule2["Browser"] = "browser";
    BiDiModule2["BrowsingContext"] = "browsingContext";
    BiDiModule2["Cdp"] = "cdp";
    BiDiModule2["Input"] = "input";
    BiDiModule2["Log"] = "log";
    BiDiModule2["Network"] = "network";
    BiDiModule2["Script"] = "script";
    BiDiModule2["Session"] = "session";
  })(BiDiModule || (exports.BiDiModule = BiDiModule = {}));
  var Script;
  (function(Script2) {
    let EventNames;
    (function(EventNames2) {
      EventNames2["Message"] = "script.message";
      EventNames2["RealmCreated"] = "script.realmCreated";
      EventNames2["RealmDestroyed"] = "script.realmDestroyed";
    })(EventNames = Script2.EventNames || (Script2.EventNames = {}));
  })(Script || (exports.Script = Script = {}));
  var Log;
  (function(Log2) {
    let EventNames;
    (function(EventNames2) {
      EventNames2["LogEntryAdded"] = "log.entryAdded";
    })(EventNames = Log2.EventNames || (Log2.EventNames = {}));
  })(Log || (exports.Log = Log = {}));
  var BrowsingContext;
  (function(BrowsingContext2) {
    let EventNames;
    (function(EventNames2) {
      EventNames2["ContextCreated"] = "browsingContext.contextCreated";
      EventNames2["ContextDestroyed"] = "browsingContext.contextDestroyed";
      EventNames2["DomContentLoaded"] = "browsingContext.domContentLoaded";
      EventNames2["DownloadWillBegin"] = "browsingContext.downloadWillBegin";
      EventNames2["FragmentNavigated"] = "browsingContext.fragmentNavigated";
      EventNames2["Load"] = "browsingContext.load";
      EventNames2["NavigationAborted"] = "browsingContext.navigationAborted";
      EventNames2["NavigationFailed"] = "browsingContext.navigationFailed";
      EventNames2["NavigationStarted"] = "browsingContext.navigationStarted";
      EventNames2["UserPromptClosed"] = "browsingContext.userPromptClosed";
      EventNames2["UserPromptOpened"] = "browsingContext.userPromptOpened";
    })(EventNames = BrowsingContext2.EventNames || (BrowsingContext2.EventNames = {}));
  })(BrowsingContext || (exports.BrowsingContext = BrowsingContext = {}));
  var Network;
  (function(Network2) {
    let EventNames;
    (function(EventNames2) {
      EventNames2["AuthRequired"] = "network.authRequired";
      EventNames2["BeforeRequestSent"] = "network.beforeRequestSent";
      EventNames2["FetchError"] = "network.fetchError";
      EventNames2["ResponseCompleted"] = "network.responseCompleted";
      EventNames2["ResponseStarted"] = "network.responseStarted";
    })(EventNames = Network2.EventNames || (Network2.EventNames = {}));
  })(Network || (exports.Network = Network = {}));
  exports.EVENT_NAMES = new Set([
    ...Object.values(BiDiModule),
    ...Object.values(BrowsingContext.EventNames),
    ...Object.values(Log.EventNames),
    ...Object.values(Network.EventNames),
    ...Object.values(Script.EventNames)
  ]);
});

// node_modules/chromium-bidi/lib/cjs/protocol/webdriver-bidi.js
var require_webdriver_bidi = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
});

// node_modules/chromium-bidi/lib/cjs/protocol/ErrorResponse.js
var require_ErrorResponse = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.UnsupportedOperationException = exports.UnableToCloseBrowserException = exports.UnableToCaptureScreenException = exports.UnknownErrorException = exports.UnknownCommandException = exports.SessionNotCreatedException = exports.NoSuchScriptException = exports.NoSuchRequestException = exports.NoSuchNodeException = exports.NoSuchInterceptException = exports.NoSuchHistoryEntryException = exports.NoSuchHandleException = exports.NoSuchFrameException = exports.NoSuchElementException = exports.NoSuchAlertException = exports.MoveTargetOutOfBoundsException = exports.InvalidSessionIdException = exports.InvalidArgumentException = exports.Exception = undefined;

  class Exception {
    error;
    message;
    stacktrace;
    constructor(error, message, stacktrace) {
      this.error = error;
      this.message = message;
      this.stacktrace = stacktrace;
    }
    toErrorResponse(commandId) {
      return {
        type: "error",
        id: commandId,
        error: this.error,
        message: this.message,
        stacktrace: this.stacktrace
      };
    }
  }
  exports.Exception = Exception;

  class InvalidArgumentException extends Exception {
    constructor(message, stacktrace) {
      super("invalid argument", message, stacktrace);
    }
  }
  exports.InvalidArgumentException = InvalidArgumentException;

  class InvalidSessionIdException extends Exception {
    constructor(message, stacktrace) {
      super("invalid session id", message, stacktrace);
    }
  }
  exports.InvalidSessionIdException = InvalidSessionIdException;

  class MoveTargetOutOfBoundsException extends Exception {
    constructor(message, stacktrace) {
      super("move target out of bounds", message, stacktrace);
    }
  }
  exports.MoveTargetOutOfBoundsException = MoveTargetOutOfBoundsException;

  class NoSuchAlertException extends Exception {
    constructor(message, stacktrace) {
      super("no such alert", message, stacktrace);
    }
  }
  exports.NoSuchAlertException = NoSuchAlertException;

  class NoSuchElementException extends Exception {
    constructor(message, stacktrace) {
      super("no such element", message, stacktrace);
    }
  }
  exports.NoSuchElementException = NoSuchElementException;

  class NoSuchFrameException extends Exception {
    constructor(message, stacktrace) {
      super("no such frame", message, stacktrace);
    }
  }
  exports.NoSuchFrameException = NoSuchFrameException;

  class NoSuchHandleException extends Exception {
    constructor(message, stacktrace) {
      super("no such handle", message, stacktrace);
    }
  }
  exports.NoSuchHandleException = NoSuchHandleException;

  class NoSuchHistoryEntryException extends Exception {
    constructor(message, stacktrace) {
      super("no such history entry", message, stacktrace);
    }
  }
  exports.NoSuchHistoryEntryException = NoSuchHistoryEntryException;

  class NoSuchInterceptException extends Exception {
    constructor(message, stacktrace) {
      super("no such intercept", message, stacktrace);
    }
  }
  exports.NoSuchInterceptException = NoSuchInterceptException;

  class NoSuchNodeException extends Exception {
    constructor(message, stacktrace) {
      super("no such node", message, stacktrace);
    }
  }
  exports.NoSuchNodeException = NoSuchNodeException;

  class NoSuchRequestException extends Exception {
    constructor(message, stacktrace) {
      super("no such request", message, stacktrace);
    }
  }
  exports.NoSuchRequestException = NoSuchRequestException;

  class NoSuchScriptException extends Exception {
    constructor(message, stacktrace) {
      super("no such script", message, stacktrace);
    }
  }
  exports.NoSuchScriptException = NoSuchScriptException;

  class SessionNotCreatedException extends Exception {
    constructor(message, stacktrace) {
      super("session not created", message, stacktrace);
    }
  }
  exports.SessionNotCreatedException = SessionNotCreatedException;

  class UnknownCommandException extends Exception {
    constructor(message, stacktrace) {
      super("unknown command", message, stacktrace);
    }
  }
  exports.UnknownCommandException = UnknownCommandException;

  class UnknownErrorException extends Exception {
    constructor(message, stacktrace = new Error().stack) {
      super("unknown error", message, stacktrace);
    }
  }
  exports.UnknownErrorException = UnknownErrorException;

  class UnableToCaptureScreenException extends Exception {
    constructor(message, stacktrace) {
      super("unable to capture screen", message, stacktrace);
    }
  }
  exports.UnableToCaptureScreenException = UnableToCaptureScreenException;

  class UnableToCloseBrowserException extends Exception {
    constructor(message, stacktrace) {
      super("unable to close browser", message, stacktrace);
    }
  }
  exports.UnableToCloseBrowserException = UnableToCloseBrowserException;

  class UnsupportedOperationException extends Exception {
    constructor(message, stacktrace) {
      super("unsupported operation", message, stacktrace);
    }
  }
  exports.UnsupportedOperationException = UnsupportedOperationException;
});

// node_modules/chromium-bidi/lib/cjs/protocol/protocol.js
var require_protocol = __commonJS((exports) => {
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m[k];
      } };
    }
    Object.defineProperty(o, k2, desc);
  } : function(o, m, k, k2) {
    if (k2 === undefined)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __exportStar = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ChromiumBidi = exports.Cdp = undefined;
  exports.Cdp = __importStar(require_cdp());
  exports.ChromiumBidi = __importStar(require_chromium_bidi());
  __exportStar(require_webdriver_bidi(), exports);
  __exportStar(require_ErrorResponse(), exports);
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/BidiNoOpParser.js
var require_BidiNoOpParser = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BidiNoOpParser = undefined;

  class BidiNoOpParser {
    parseActivateParams(params) {
      return params;
    }
    parseCaptureScreenshotParams(params) {
      return params;
    }
    parseCloseParams(params) {
      return params;
    }
    parseCreateParams(params) {
      return params;
    }
    parseGetTreeParams(params) {
      return params;
    }
    parseHandleUserPromptParams(params) {
      return params;
    }
    parseNavigateParams(params) {
      return params;
    }
    parsePrintParams(params) {
      return params;
    }
    parseReloadParams(params) {
      return params;
    }
    parseSetViewportParams(params) {
      return params;
    }
    parseTraverseHistoryParams(params) {
      return params;
    }
    parseGetSessionParams(params) {
      return params;
    }
    parseSendCommandParams(params) {
      return params;
    }
    parseAddPreloadScriptParams(params) {
      return params;
    }
    parseCallFunctionParams(params) {
      return params;
    }
    parseDisownParams(params) {
      return params;
    }
    parseEvaluateParams(params) {
      return params;
    }
    parseGetRealmsParams(params) {
      return params;
    }
    parseRemovePreloadScriptParams(params) {
      return params;
    }
    parsePerformActionsParams(params) {
      return params;
    }
    parseReleaseActionsParams(params) {
      return params;
    }
    parseAddInterceptParams(params) {
      return params;
    }
    parseContinueRequestParams(params) {
      return params;
    }
    parseContinueResponseParams(params) {
      return params;
    }
    parseContinueWithAuthParams(params) {
      return params;
    }
    parseFailRequestParams(params) {
      return params;
    }
    parseProvideResponseParams(params) {
      return params;
    }
    parseRemoveInterceptParams(params) {
      return params;
    }
    parseSubscribeParams(params) {
      return params;
    }
  }
  exports.BidiNoOpParser = BidiNoOpParser;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/browser/BrowserProcessor.js
var require_BrowserProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BrowserProcessor = undefined;

  class BrowserProcessor {
    #browserCdpClient;
    constructor(browserCdpClient) {
      this.#browserCdpClient = browserCdpClient;
    }
    close() {
      setTimeout(() => this.#browserCdpClient.sendCommand("Browser.close"), 0);
      return {};
    }
  }
  exports.BrowserProcessor = BrowserProcessor;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/cdp/CdpProcessor.js
var require_CdpProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CdpProcessor = undefined;

  class CdpProcessor {
    #browsingContextStorage;
    #cdpConnection;
    #browserCdpClient;
    constructor(browsingContextStorage, cdpConnection, browserCdpClient) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#cdpConnection = cdpConnection;
      this.#browserCdpClient = browserCdpClient;
    }
    getSession(params) {
      const context = params.context;
      const sessionId = this.#browsingContextStorage.getContext(context).cdpTarget.cdpSessionId;
      if (sessionId === undefined) {
        return {};
      }
      return { session: sessionId };
    }
    async sendCommand(params) {
      const client = params.session ? this.#cdpConnection.getCdpClient(params.session) : this.#browserCdpClient;
      const result = await client.sendCommand(params.method, params.params);
      return {
        result,
        session: params.session
      };
    }
  }
  exports.CdpProcessor = CdpProcessor;
});

// node_modules/chromium-bidi/lib/cjs/utils/assert.js
var require_assert = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.assert = undefined;
  function assert(predicate, message) {
    if (!predicate) {
      throw new Error(message ?? "Internal assertion failed.");
    }
  }
  exports.assert = assert;
});

// node_modules/chromium-bidi/lib/cjs/utils/Deferred.js
var require_Deferred = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Deferred = undefined;

  class Deferred {
    #isFinished = false;
    #promise;
    #resolve;
    #reject;
    get isFinished() {
      return this.#isFinished;
    }
    constructor() {
      this.#promise = new Promise((resolve, reject) => {
        this.#resolve = resolve;
        this.#reject = reject;
      });
      this.#promise.catch((_error) => {
      });
    }
    then(onFulfilled, onRejected) {
      return this.#promise.then(onFulfilled, onRejected);
    }
    catch(onRejected) {
      return this.#promise.catch(onRejected);
    }
    resolve(value) {
      if (!this.#isFinished) {
        this.#isFinished = true;
        this.#resolve(value);
      }
    }
    reject(reason) {
      if (!this.#isFinished) {
        this.#isFinished = true;
        this.#reject(reason);
      }
    }
    finally(onFinally) {
      return this.#promise.finally(onFinally);
    }
    [Symbol.toStringTag] = "Promise";
  }
  exports.Deferred = Deferred;
});

// node_modules/chromium-bidi/lib/cjs/utils/unitConversions.js
var require_unitConversions = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.inchesFromCm = undefined;
  function inchesFromCm(cm) {
    return cm / 2.54;
  }
  exports.inchesFromCm = inchesFromCm;
});

// node_modules/chromium-bidi/lib/cjs/utils/uuid.js
var require_uuid = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.uuidv4 = undefined;
  function uuidv4() {
    if ("crypto" in globalThis && "randomUUID" in globalThis.crypto) {
      return globalThis.crypto.randomUUID();
    }
    const randomValues = new Uint8Array(16);
    if ("crypto" in globalThis && "getRandomValues" in globalThis.crypto) {
      globalThis.crypto.getRandomValues(randomValues);
    } else {
      __require("crypto").webcrypto.getRandomValues(randomValues);
    }
    randomValues[6] = randomValues[6] & 15 | 64;
    randomValues[8] = randomValues[8] & 63 | 128;
    const bytesToHex = (bytes) => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
    return [
      bytesToHex(randomValues.subarray(0, 4)),
      bytesToHex(randomValues.subarray(4, 6)),
      bytesToHex(randomValues.subarray(6, 8)),
      bytesToHex(randomValues.subarray(8, 10)),
      bytesToHex(randomValues.subarray(10, 16))
    ].join("-");
  }
  exports.uuidv4 = uuidv4;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/ChannelProxy.js
var require_ChannelProxy = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ChannelProxy = undefined;
  var protocol_js_1 = require_protocol();
  var log_js_1 = require_log();
  var uuid_js_1 = require_uuid();

  class ChannelProxy {
    #properties;
    #id = (0, uuid_js_1.uuidv4)();
    #logger;
    constructor(channel, logger) {
      this.#properties = channel;
      this.#logger = logger;
    }
    async init(realm, eventManager) {
      const channelHandle = await ChannelProxy.#createAndGetHandleInRealm(realm);
      const sendMessageHandle = await ChannelProxy.#createSendMessageHandle(realm, channelHandle);
      this.#startListener(realm, channelHandle, eventManager);
      return sendMessageHandle;
    }
    async startListenerFromWindow(realm, eventManager) {
      try {
        const channelHandle = await this.#getHandleFromWindow(realm);
        this.#startListener(realm, channelHandle, eventManager);
      } catch (error) {
        this.#logger?.(log_js_1.LogType.debugError, error);
      }
    }
    static #createChannelProxyEvalStr() {
      const functionStr = String(() => {
        const queue = [];
        let queueNonEmptyResolver = null;
        return {
          async getMessage() {
            const onMessage = queue.length > 0 ? Promise.resolve() : new Promise((resolve) => {
              queueNonEmptyResolver = resolve;
            });
            await onMessage;
            return queue.shift();
          },
          sendMessage(message) {
            queue.push(message);
            if (queueNonEmptyResolver !== null) {
              queueNonEmptyResolver();
              queueNonEmptyResolver = null;
            }
          }
        };
      });
      return `(${functionStr})()`;
    }
    static async#createAndGetHandleInRealm(realm) {
      const createChannelHandleResult = await realm.cdpClient.sendCommand("Runtime.evaluate", {
        expression: this.#createChannelProxyEvalStr(),
        contextId: realm.executionContextId,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      if (createChannelHandleResult.exceptionDetails || createChannelHandleResult.result.objectId === undefined) {
        throw new Error(`Cannot create channel`);
      }
      return createChannelHandleResult.result.objectId;
    }
    static async#createSendMessageHandle(realm, channelHandle) {
      const sendMessageArgResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((channelHandle2) => {
          return channelHandle2.sendMessage;
        }),
        arguments: [{ objectId: channelHandle }],
        executionContextId: realm.executionContextId,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      return sendMessageArgResult.result.objectId;
    }
    async#startListener(realm, channelHandle, eventManager) {
      for (;; ) {
        try {
          const message = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String(async (channelHandle2) => await channelHandle2.getMessage()),
            arguments: [
              {
                objectId: channelHandle
              }
            ],
            awaitPromise: true,
            executionContextId: realm.executionContextId,
            serializationOptions: {
              serialization: "deep",
              maxDepth: this.#properties.serializationOptions?.maxObjectDepth ?? undefined
            }
          });
          if (message.exceptionDetails) {
            throw message.exceptionDetails;
          }
          eventManager.registerEvent({
            type: "event",
            method: protocol_js_1.ChromiumBidi.Script.EventNames.Message,
            params: {
              channel: this.#properties.channel,
              data: realm.cdpToBidiValue(message, this.#properties.ownership ?? "none"),
              source: {
                realm: realm.realmId,
                context: realm.browsingContextId
              }
            }
          }, realm.browsingContextId);
        } catch (error) {
          this.#logger?.(log_js_1.LogType.debugError, error);
          break;
        }
      }
    }
    async#getHandleFromWindow(realm) {
      const channelHandleResult = await realm.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((id) => {
          const w = window;
          if (w[id] === undefined) {
            return new Promise((resolve) => w[id] = resolve);
          }
          const channelProxy = w[id];
          delete w[id];
          return channelProxy;
        }),
        arguments: [{ value: this.#id }],
        executionContextId: realm.executionContextId,
        awaitPromise: true,
        serializationOptions: {
          serialization: "idOnly"
        }
      });
      if (channelHandleResult.exceptionDetails !== undefined || channelHandleResult.result.objectId === undefined) {
        throw new Error(`ChannelHandle not found in window["${this.#id}"]`);
      }
      return channelHandleResult.result.objectId;
    }
    getEvalInWindowStr() {
      const delegate = String((id, channelProxy) => {
        const w = window;
        if (w[id] === undefined) {
          w[id] = channelProxy;
        } else {
          w[id](channelProxy);
          delete w[id];
        }
        return channelProxy.sendMessage;
      });
      const channelProxyEval = ChannelProxy.#createChannelProxyEvalStr();
      return `(${delegate})('${this.#id}',${channelProxyEval})`;
    }
  }
  exports.ChannelProxy = ChannelProxy;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/Realm.js
var require_Realm = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Realm = undefined;
  var protocol_js_1 = require_protocol();
  var log_js_1 = require_log();
  var uuid_js_1 = require_uuid();
  var ChannelProxy_js_1 = require_ChannelProxy();
  var SHARED_ID_DIVIDER = "_element_";

  class Realm {
    #realmStorage;
    #browsingContextStorage;
    #realmId;
    #browsingContextId;
    #executionContextId;
    #origin;
    #type;
    #cdpClient;
    #eventManager;
    sandbox;
    #logger;
    constructor(realmStorage, browsingContextStorage, realmId, browsingContextId, executionContextId, origin, type, sandbox, cdpClient, eventManager, logger) {
      this.#realmId = realmId;
      this.#browsingContextId = browsingContextId;
      this.#executionContextId = executionContextId;
      this.sandbox = sandbox;
      this.#origin = origin;
      this.#type = type;
      this.#cdpClient = cdpClient;
      this.#realmStorage = realmStorage;
      this.#browsingContextStorage = browsingContextStorage;
      this.#eventManager = eventManager;
      this.#logger = logger;
      this.#realmStorage.addRealm(this);
      this.#eventManager.registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmCreated,
        params: this.realmInfo
      }, this.browsingContextId);
    }
    cdpToBidiValue(cdpValue, resultOwnership) {
      const bidiValue = this.#deepSerializedToBiDi(cdpValue.result.deepSerializedValue, new Map);
      if (cdpValue.result.objectId) {
        const objectId = cdpValue.result.objectId;
        if (resultOwnership === "root") {
          bidiValue.handle = objectId;
          this.#realmStorage.knownHandlesToRealmMap.set(objectId, this.realmId);
        } else {
          this.#releaseObject(objectId).catch((error) => this.#logger?.(log_js_1.LogType.debugError, error));
        }
      }
      if (cdpValue.result.type === "object") {
        switch (cdpValue.result.subtype) {
          case "generator":
          case "iterator":
            bidiValue.type = cdpValue.result.subtype;
            delete bidiValue["value"];
            break;
          default:
        }
      }
      return bidiValue;
    }
    #deepSerializedToBiDi(deepSerializedValue, internalIdMap) {
      if (Object.hasOwn(deepSerializedValue, "weakLocalObjectReference")) {
        const weakLocalObjectReference = deepSerializedValue.weakLocalObjectReference;
        if (!internalIdMap.has(weakLocalObjectReference)) {
          internalIdMap.set(weakLocalObjectReference, (0, uuid_js_1.uuidv4)());
        }
        deepSerializedValue.internalId = internalIdMap.get(weakLocalObjectReference);
        delete deepSerializedValue["weakLocalObjectReference"];
      }
      if (deepSerializedValue.type === "platformobject") {
        return { type: "object" };
      }
      const bidiValue = deepSerializedValue.value;
      if (bidiValue === undefined) {
        return deepSerializedValue;
      }
      if (deepSerializedValue.type === "node") {
        if (Object.hasOwn(bidiValue, "backendNodeId")) {
          deepSerializedValue.sharedId = `${this.navigableId}${SHARED_ID_DIVIDER}${bidiValue.backendNodeId}`;
          delete bidiValue["backendNodeId"];
        }
        if (Object.hasOwn(bidiValue, "children")) {
          for (const i in bidiValue.children) {
            bidiValue.children[i] = this.#deepSerializedToBiDi(bidiValue.children[i], internalIdMap);
          }
        }
        if (Object.hasOwn(bidiValue, "shadowRoot") && bidiValue.shadowRoot !== null) {
          bidiValue.shadowRoot = this.#deepSerializedToBiDi(bidiValue.shadowRoot, internalIdMap);
        }
        if (bidiValue.namespaceURI === "") {
          bidiValue.namespaceURI = null;
        }
      }
      if (["array", "set", "htmlcollection", "nodelist"].includes(deepSerializedValue.type)) {
        for (const i in bidiValue) {
          bidiValue[i] = this.#deepSerializedToBiDi(bidiValue[i], internalIdMap);
        }
      }
      if (["object", "map"].includes(deepSerializedValue.type)) {
        for (const i in bidiValue) {
          bidiValue[i] = [
            this.#deepSerializedToBiDi(bidiValue[i][0], internalIdMap),
            this.#deepSerializedToBiDi(bidiValue[i][1], internalIdMap)
          ];
        }
      }
      return deepSerializedValue;
    }
    get realmId() {
      return this.#realmId;
    }
    get navigableId() {
      return this.#browsingContextStorage.findContext(this.#browsingContextId)?.navigableId ?? "UNKNOWN";
    }
    get browsingContextId() {
      return this.#browsingContextId;
    }
    get executionContextId() {
      return this.#executionContextId;
    }
    get origin() {
      return this.#origin;
    }
    get type() {
      return this.#type;
    }
    get cdpClient() {
      return this.#cdpClient;
    }
    get realmInfo() {
      return {
        realm: this.realmId,
        origin: this.origin,
        type: this.type,
        context: this.browsingContextId,
        ...this.sandbox === undefined ? {} : { sandbox: this.sandbox }
      };
    }
    async evaluate(expression, awaitPromise, resultOwnership, serializationOptions, userActivation = false) {
      await this.#browsingContextStorage.getContext(this.browsingContextId).targetUnblockedOrThrow();
      const cdpEvaluateResult = await this.cdpClient.sendCommand("Runtime.evaluate", {
        contextId: this.executionContextId,
        expression,
        awaitPromise,
        serializationOptions: Realm.#getSerializationOptions("deep", serializationOptions),
        userGesture: userActivation
      });
      if (cdpEvaluateResult.exceptionDetails) {
        return await this.#getExceptionResult(cdpEvaluateResult.exceptionDetails, 0, resultOwnership);
      }
      return {
        realm: this.realmId,
        result: this.cdpToBidiValue(cdpEvaluateResult, resultOwnership),
        type: "success"
      };
    }
    async serializeCdpObject(cdpRemoteObject, resultOwnership) {
      const argument = Realm.#cdpRemoteObjectToCallArgument(cdpRemoteObject);
      const cdpValue = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((remoteObject) => remoteObject),
        awaitPromise: false,
        arguments: [argument],
        serializationOptions: {
          serialization: "deep"
        },
        executionContextId: this.executionContextId
      });
      return this.cdpToBidiValue(cdpValue, resultOwnership);
    }
    static #cdpRemoteObjectToCallArgument(cdpRemoteObject) {
      if (cdpRemoteObject.objectId !== undefined) {
        return { objectId: cdpRemoteObject.objectId };
      }
      if (cdpRemoteObject.unserializableValue !== undefined) {
        return { unserializableValue: cdpRemoteObject.unserializableValue };
      }
      return { value: cdpRemoteObject.value };
    }
    async stringifyObject(cdpRemoteObject) {
      const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
        functionDeclaration: String((remoteObject) => String(remoteObject)),
        awaitPromise: false,
        arguments: [cdpRemoteObject],
        returnByValue: true,
        executionContextId: this.executionContextId
      });
      return result.value;
    }
    async#flattenKeyValuePairs(mappingLocalValue) {
      const keyValueArray = [];
      for (const [key, value] of mappingLocalValue) {
        let keyArg;
        if (typeof key === "string") {
          keyArg = { value: key };
        } else {
          keyArg = await this.#deserializeToCdpArg(key);
        }
        const valueArg = await this.#deserializeToCdpArg(value);
        keyValueArray.push(keyArg);
        keyValueArray.push(valueArg);
      }
      return keyValueArray;
    }
    async#flattenValueList(listLocalValue) {
      return await Promise.all(listLocalValue.map((localValue) => this.#deserializeToCdpArg(localValue)));
    }
    async#serializeCdpExceptionDetails(cdpExceptionDetails, lineOffset, resultOwnership) {
      const callFrames = cdpExceptionDetails.stackTrace?.callFrames.map((frame) => ({
        url: frame.url,
        functionName: frame.functionName,
        lineNumber: frame.lineNumber - lineOffset,
        columnNumber: frame.columnNumber
      })) ?? [];
      const exception = cdpExceptionDetails.exception;
      return {
        exception: await this.serializeCdpObject(exception, resultOwnership),
        columnNumber: cdpExceptionDetails.columnNumber,
        lineNumber: cdpExceptionDetails.lineNumber - lineOffset,
        stackTrace: {
          callFrames
        },
        text: await this.stringifyObject(exception) || cdpExceptionDetails.text
      };
    }
    async callFunction(functionDeclaration, thisLocalValue, argumentsLocalValues, awaitPromise, resultOwnership, serializationOptions, userActivation = false) {
      await this.#browsingContextStorage.getContext(this.browsingContextId).targetUnblockedOrThrow();
      const callFunctionAndSerializeScript = `(...args) => {
      function callFunction(f, args) {
        const deserializedThis = args.shift();
        const deserializedArgs = args;
        return f.apply(deserializedThis, deserializedArgs);
      }
      return callFunction((
        ${functionDeclaration}
      ), args);
    }`;
      const thisAndArgumentsList = [
        await this.#deserializeToCdpArg(thisLocalValue),
        ...await Promise.all(argumentsLocalValues.map(async (argumentLocalValue) => await this.#deserializeToCdpArg(argumentLocalValue)))
      ];
      let cdpCallFunctionResult;
      try {
        cdpCallFunctionResult = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
          functionDeclaration: callFunctionAndSerializeScript,
          awaitPromise,
          arguments: thisAndArgumentsList,
          serializationOptions: Realm.#getSerializationOptions("deep", serializationOptions),
          executionContextId: this.executionContextId,
          userGesture: userActivation
        });
      } catch (error) {
        if (error.code === -32000 && [
          "Could not find object with given id",
          "Argument should belong to the same JavaScript world as target object",
          "Invalid remote object id"
        ].includes(error.message)) {
          throw new protocol_js_1.NoSuchHandleException("Handle was not found.");
        }
        throw error;
      }
      if (cdpCallFunctionResult.exceptionDetails) {
        return await this.#getExceptionResult(cdpCallFunctionResult.exceptionDetails, 1, resultOwnership);
      }
      return {
        type: "success",
        result: this.cdpToBidiValue(cdpCallFunctionResult, resultOwnership),
        realm: this.realmId
      };
    }
    async#deserializeToCdpArg(localValue) {
      if ("sharedId" in localValue && localValue.sharedId) {
        const [navigableId, rawBackendNodeId] = localValue.sharedId.split(SHARED_ID_DIVIDER);
        const backendNodeId = parseInt(rawBackendNodeId ?? "");
        if (isNaN(backendNodeId) || backendNodeId === undefined || navigableId === undefined) {
          throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" was not found.`);
        }
        if (this.navigableId !== navigableId) {
          throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" belongs to different document. Current document is ${this.navigableId}.`);
        }
        try {
          const { object } = await this.cdpClient.sendCommand("DOM.resolveNode", {
            backendNodeId,
            executionContextId: this.executionContextId
          });
          return { objectId: object.objectId };
        } catch (error) {
          if (error.code === -32000 && error.message === "No node with given id found") {
            throw new protocol_js_1.NoSuchNodeException(`SharedId "${localValue.sharedId}" was not found.`);
          }
          throw new protocol_js_1.UnknownErrorException(error.message, error.stack);
        }
      } else if ("handle" in localValue && localValue.handle) {
        return { objectId: localValue.handle };
      } else if ("handle" in localValue || "sharedId" in localValue) {
        throw new protocol_js_1.NoSuchHandleException("Handle was not found.");
      }
      switch (localValue.type) {
        case "undefined":
          return { unserializableValue: "undefined" };
        case "null":
          return { unserializableValue: "null" };
        case "string":
          return { value: localValue.value };
        case "number":
          if (localValue.value === "NaN") {
            return { unserializableValue: "NaN" };
          } else if (localValue.value === "-0") {
            return { unserializableValue: "-0" };
          } else if (localValue.value === "Infinity") {
            return { unserializableValue: "Infinity" };
          } else if (localValue.value === "-Infinity") {
            return { unserializableValue: "-Infinity" };
          }
          return {
            value: localValue.value
          };
        case "boolean":
          return { value: Boolean(localValue.value) };
        case "bigint":
          return {
            unserializableValue: `BigInt(${JSON.stringify(localValue.value)})`
          };
        case "date":
          return {
            unserializableValue: `new Date(Date.parse(${JSON.stringify(localValue.value)}))`
          };
        case "regexp":
          return {
            unserializableValue: `new RegExp(${JSON.stringify(localValue.value.pattern)}, ${JSON.stringify(localValue.value.flags)})`
          };
        case "map": {
          const keyValueArray = await this.#flattenKeyValuePairs(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args) => {
              const result2 = new Map;
              for (let i = 0;i < args.length; i += 2) {
                result2.set(args[i], args[i + 1]);
              }
              return result2;
            }),
            awaitPromise: false,
            arguments: keyValueArray,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "object": {
          const keyValueArray = await this.#flattenKeyValuePairs(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args) => {
              const result2 = {};
              for (let i = 0;i < args.length; i += 2) {
                const key = args[i];
                result2[key] = args[i + 1];
              }
              return result2;
            }),
            awaitPromise: false,
            arguments: keyValueArray,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "array": {
          const args = await this.#flattenValueList(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args2) => args2),
            awaitPromise: false,
            arguments: args,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "set": {
          const args = await this.#flattenValueList(localValue.value);
          const { result } = await this.cdpClient.sendCommand("Runtime.callFunctionOn", {
            functionDeclaration: String((...args2) => new Set(args2)),
            awaitPromise: false,
            arguments: args,
            returnByValue: false,
            executionContextId: this.executionContextId
          });
          return { objectId: result.objectId };
        }
        case "channel": {
          const channelProxy = new ChannelProxy_js_1.ChannelProxy(localValue.value, this.#logger);
          const channelProxySendMessageHandle = await channelProxy.init(this, this.#eventManager);
          return { objectId: channelProxySendMessageHandle };
        }
      }
      throw new Error(`Value ${JSON.stringify(localValue)} is not deserializable.`);
    }
    async#getExceptionResult(exceptionDetails, lineOffset, resultOwnership) {
      return {
        exceptionDetails: await this.#serializeCdpExceptionDetails(exceptionDetails, lineOffset, resultOwnership),
        realm: this.realmId,
        type: "exception"
      };
    }
    static #getSerializationOptions(serialization, serializationOptions) {
      return {
        serialization,
        additionalParameters: Realm.#getAdditionalSerializationParameters(serializationOptions),
        ...Realm.#getMaxObjectDepth(serializationOptions)
      };
    }
    static #getAdditionalSerializationParameters(serializationOptions) {
      const additionalParameters = {};
      if (serializationOptions.maxDomDepth !== undefined) {
        additionalParameters["maxNodeDepth"] = serializationOptions.maxDomDepth === null ? 1000 : serializationOptions.maxDomDepth;
      }
      if (serializationOptions.includeShadowTree !== undefined) {
        additionalParameters["includeShadowTree"] = serializationOptions.includeShadowTree;
      }
      return additionalParameters;
    }
    static #getMaxObjectDepth(serializationOptions) {
      return serializationOptions.maxObjectDepth === undefined || serializationOptions.maxObjectDepth === null ? {} : { maxDepth: serializationOptions.maxObjectDepth };
    }
    async#releaseObject(handle) {
      try {
        await this.cdpClient.sendCommand("Runtime.releaseObject", {
          objectId: handle
        });
      } catch (error) {
        if (!(error.code === -32000 && error.message === "Invalid remote object id")) {
          throw error;
        }
      }
    }
    async disown(handle) {
      if (this.#realmStorage.knownHandlesToRealmMap.get(handle) !== this.realmId) {
        return;
      }
      await this.#releaseObject(handle);
      this.#realmStorage.knownHandlesToRealmMap.delete(handle);
    }
    dispose() {
      this.#eventManager.registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.Script.EventNames.RealmDestroyed,
        params: {
          realm: this.realmId
        }
      }, this.browsingContextId);
    }
  }
  exports.Realm = Realm;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/BrowsingContextImpl.js
var require_BrowsingContextImpl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BrowsingContextImpl = undefined;
  var protocol_js_1 = require_protocol();
  var assert_js_1 = require_assert();
  var Deferred_js_1 = require_Deferred();
  var log_js_1 = require_log();
  var unitConversions_js_1 = require_unitConversions();
  var Realm_js_1 = require_Realm();

  class BrowsingContextImpl {
    static LOGGER_PREFIX = `${log_js_1.LogType.debug}:browsingContext`;
    #id;
    #parentId;
    #children = new Set;
    #browsingContextStorage;
    #deferreds = {
      Page: {
        navigatedWithinDocument: new Deferred_js_1.Deferred,
        lifecycleEvent: {
          DOMContentLoaded: new Deferred_js_1.Deferred,
          load: new Deferred_js_1.Deferred
        },
        frameStartedLoading: new Deferred_js_1.Deferred
      }
    };
    #url = "about:blank";
    #eventManager;
    #realmStorage;
    #loaderId;
    #cdpTarget;
    #maybeDefaultRealm;
    #logger;
    constructor(cdpTarget, realmStorage, id, parentId, eventManager, browsingContextStorage, logger) {
      this.#cdpTarget = cdpTarget;
      this.#realmStorage = realmStorage;
      this.#id = id;
      this.#parentId = parentId;
      this.#eventManager = eventManager;
      this.#browsingContextStorage = browsingContextStorage;
      this.#logger = logger;
    }
    static create(cdpTarget, realmStorage, id, parentId, eventManager, browsingContextStorage, logger) {
      const context = new BrowsingContextImpl(cdpTarget, realmStorage, id, parentId, eventManager, browsingContextStorage, logger);
      context.#initListeners();
      browsingContextStorage.addContext(context);
      if (!context.isTopLevelContext()) {
        context.parent.addChild(context.id);
      }
      eventManager.registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextCreated,
        params: context.serializeToBidiValue()
      }, context.id);
      return context;
    }
    static getTimestamp() {
      return new Date().getTime();
    }
    get navigableId() {
      return this.#loaderId;
    }
    dispose() {
      this.#deleteAllChildren();
      this.#realmStorage.deleteRealms({
        browsingContextId: this.id
      });
      if (!this.isTopLevelContext()) {
        this.parent.#children.delete(this.id);
      }
      this.#failDeferredsIfNotFinished();
      this.#eventManager.registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.ContextDestroyed,
        params: this.serializeToBidiValue()
      }, this.id);
      this.#browsingContextStorage.deleteContextById(this.id);
    }
    get id() {
      return this.#id;
    }
    get parentId() {
      return this.#parentId;
    }
    get parent() {
      if (this.parentId === null) {
        return null;
      }
      return this.#browsingContextStorage.getContext(this.parentId);
    }
    get directChildren() {
      return [...this.#children].map((id) => this.#browsingContextStorage.getContext(id));
    }
    get allChildren() {
      const children = this.directChildren;
      return children.concat(...children.map((child) => child.allChildren));
    }
    isTopLevelContext() {
      return this.#parentId === null;
    }
    get top() {
      let topContext = this;
      let parent = topContext.parent;
      while (parent) {
        topContext = parent;
        parent = topContext.parent;
      }
      return topContext;
    }
    addChild(childId) {
      this.#children.add(childId);
    }
    #deleteAllChildren() {
      this.directChildren.map((child) => child.dispose());
    }
    get #defaultRealm() {
      (0, assert_js_1.assert)(this.#maybeDefaultRealm, `No default realm for browsing context ${this.#id}`);
      return this.#maybeDefaultRealm;
    }
    get cdpTarget() {
      return this.#cdpTarget;
    }
    updateCdpTarget(cdpTarget) {
      this.#cdpTarget = cdpTarget;
      this.#initListeners();
    }
    get url() {
      return this.#url;
    }
    async lifecycleLoaded() {
      await this.#deferreds.Page.lifecycleEvent.load;
    }
    async targetUnblockedOrThrow() {
      const result = await this.#cdpTarget.targetUnblocked;
      if (result.kind === "error") {
        throw result.error;
      }
    }
    async getOrCreateSandbox(sandbox) {
      if (sandbox === undefined || sandbox === "") {
        return this.#defaultRealm;
      }
      let maybeSandboxes = this.#realmStorage.findRealms({
        browsingContextId: this.id,
        sandbox
      });
      if (maybeSandboxes.length === 0) {
        await this.#cdpTarget.cdpClient.sendCommand("Page.createIsolatedWorld", {
          frameId: this.id,
          worldName: sandbox
        });
        maybeSandboxes = this.#realmStorage.findRealms({
          browsingContextId: this.id,
          sandbox
        });
        (0, assert_js_1.assert)(maybeSandboxes.length !== 0);
      }
      return maybeSandboxes[0];
    }
    serializeToBidiValue(maxDepth = 0, addParentField = true) {
      return {
        context: this.#id,
        url: this.url,
        children: maxDepth > 0 ? this.directChildren.map((c) => c.serializeToBidiValue(maxDepth - 1, false)) : null,
        ...addParentField ? { parent: this.#parentId } : {}
      };
    }
    onTargetInfoChanged(params) {
      this.#url = params.targetInfo.url;
    }
    #initListeners() {
      this.#cdpTarget.cdpClient.on("Page.frameNavigated", (params) => {
        if (this.id !== params.frame.id) {
          return;
        }
        this.#url = params.frame.url + (params.frame.urlFragment ?? "");
        this.#deleteAllChildren();
      });
      this.#cdpTarget.cdpClient.on("Page.navigatedWithinDocument", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        const timestamp = BrowsingContextImpl.getTimestamp();
        this.#url = params.url;
        this.#deferreds.Page.navigatedWithinDocument.resolve(params);
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.FragmentNavigated,
          params: {
            context: this.id,
            navigation: null,
            timestamp,
            url: this.#url
          }
        }, this.id);
      });
      this.#cdpTarget.cdpClient.on("Page.frameStartedLoading", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.NavigationStarted,
          params: {
            context: this.id,
            navigation: null,
            timestamp: BrowsingContextImpl.getTimestamp(),
            url: ""
          }
        }, this.id);
      });
      this.#cdpTarget.cdpClient.on("Page.lifecycleEvent", (params) => {
        if (this.id !== params.frameId) {
          return;
        }
        if (params.name === "init") {
          this.#documentChanged(params.loaderId);
          return;
        }
        if (params.name === "commit") {
          this.#loaderId = params.loaderId;
          return;
        }
        if (params.loaderId !== this.#loaderId) {
          return;
        }
        const timestamp = BrowsingContextImpl.getTimestamp();
        switch (params.name) {
          case "DOMContentLoaded":
            this.#eventManager.registerEvent({
              type: "event",
              method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.DomContentLoaded,
              params: {
                context: this.id,
                navigation: this.#loaderId ?? null,
                timestamp,
                url: this.#url
              }
            }, this.id);
            this.#deferreds.Page.lifecycleEvent.DOMContentLoaded.resolve(params);
            break;
          case "load":
            this.#eventManager.registerEvent({
              type: "event",
              method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.Load,
              params: {
                context: this.id,
                navigation: this.#loaderId ?? null,
                timestamp,
                url: this.#url
              }
            }, this.id);
            this.#deferreds.Page.lifecycleEvent.load.resolve(params);
            break;
        }
      });
      this.#cdpTarget.cdpClient.on("Runtime.executionContextCreated", (params) => {
        if (params.context.auxData.frameId !== this.id) {
          return;
        }
        if (!["default", "isolated"].includes(params.context.auxData.type)) {
          return;
        }
        const realm = new Realm_js_1.Realm(this.#realmStorage, this.#browsingContextStorage, params.context.uniqueId, this.id, params.context.id, this.#getOrigin(params), "window", params.context.auxData.type === "isolated" ? params.context.name : undefined, this.#cdpTarget.cdpClient, this.#eventManager, this.#logger);
        if (params.context.auxData.isDefault) {
          this.#maybeDefaultRealm = realm;
          Promise.all(this.#cdpTarget.getChannels().map((channel) => channel.startListenerFromWindow(realm, this.#eventManager)));
        }
      });
      this.#cdpTarget.cdpClient.on("Runtime.executionContextDestroyed", (params) => {
        this.#realmStorage.deleteRealms({
          cdpSessionId: this.#cdpTarget.cdpSessionId,
          executionContextId: params.executionContextId
        });
      });
      this.#cdpTarget.cdpClient.on("Runtime.executionContextsCleared", () => {
        this.#realmStorage.deleteRealms({
          cdpSessionId: this.#cdpTarget.cdpSessionId
        });
      });
      this.#cdpTarget.cdpClient.on("Page.javascriptDialogClosed", (params) => {
        const accepted = params.result;
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.UserPromptClosed,
          params: {
            context: this.id,
            accepted,
            userText: accepted && params.userInput ? params.userInput : undefined
          }
        }, this.id);
      });
      this.#cdpTarget.cdpClient.on("Page.javascriptDialogOpening", (params) => {
        this.#eventManager.registerEvent({
          type: "event",
          method: protocol_js_1.ChromiumBidi.BrowsingContext.EventNames.UserPromptOpened,
          params: {
            context: this.id,
            type: params.type,
            message: params.message,
            defaultValue: params.defaultPrompt || undefined
          }
        }, this.id);
      });
    }
    #getOrigin(params) {
      if (params.context.auxData.type === "isolated") {
        return this.#defaultRealm.origin;
      }
      return ["://", ""].includes(params.context.origin) ? "null" : params.context.origin;
    }
    #documentChanged(loaderId) {
      if (loaderId === undefined || this.#loaderId === loaderId) {
        if (this.#deferreds.Page.navigatedWithinDocument.isFinished) {
          this.#deferreds.Page.navigatedWithinDocument = new Deferred_js_1.Deferred;
        } else {
          this.#logger?.(BrowsingContextImpl.LOGGER_PREFIX, "Document changed (navigatedWithinDocument)");
        }
        return;
      }
      this.#resetDeferredsIfFinished();
      this.#loaderId = loaderId;
    }
    #resetDeferredsIfFinished() {
      if (this.#deferreds.Page.lifecycleEvent.DOMContentLoaded.isFinished) {
        this.#deferreds.Page.lifecycleEvent.DOMContentLoaded = new Deferred_js_1.Deferred;
      } else {
        this.#logger?.(BrowsingContextImpl.LOGGER_PREFIX, "Document changed (DOMContentLoaded)");
      }
      if (this.#deferreds.Page.lifecycleEvent.load.isFinished) {
        this.#deferreds.Page.lifecycleEvent.load = new Deferred_js_1.Deferred;
      } else {
        this.#logger?.(BrowsingContextImpl.LOGGER_PREFIX, "Document changed (load)");
      }
    }
    #failDeferredsIfNotFinished() {
      if (!this.#deferreds.Page.lifecycleEvent.DOMContentLoaded.isFinished) {
        this.#deferreds.Page.lifecycleEvent.DOMContentLoaded.reject(new protocol_js_1.UnknownErrorException("navigation canceled"));
      }
      if (!this.#deferreds.Page.lifecycleEvent.load.isFinished) {
        this.#deferreds.Page.lifecycleEvent.load.reject(new protocol_js_1.UnknownErrorException("navigation canceled"));
      }
    }
    async navigate(url, wait) {
      try {
        new URL(url);
      } catch {
        throw new protocol_js_1.InvalidArgumentException(`Invalid URL: ${url}`);
      }
      await this.targetUnblockedOrThrow();
      const cdpNavigateResult = await this.#cdpTarget.cdpClient.sendCommand("Page.navigate", {
        url,
        frameId: this.id
      });
      if (cdpNavigateResult.errorText) {
        throw new protocol_js_1.UnknownErrorException(cdpNavigateResult.errorText);
      }
      this.#documentChanged(cdpNavigateResult.loaderId);
      switch (wait) {
        case "none":
          break;
        case "interactive":
          if (cdpNavigateResult.loaderId === undefined) {
            await this.#deferreds.Page.navigatedWithinDocument;
          } else {
            await this.#deferreds.Page.lifecycleEvent.DOMContentLoaded;
          }
          break;
        case "complete":
          if (cdpNavigateResult.loaderId === undefined) {
            await this.#deferreds.Page.navigatedWithinDocument;
          } else {
            await this.lifecycleLoaded();
          }
          break;
      }
      return {
        navigation: cdpNavigateResult.loaderId ?? null,
        url: wait === "none" ? url : this.#url
      };
    }
    async reload(ignoreCache, wait) {
      await this.targetUnblockedOrThrow();
      await this.#cdpTarget.cdpClient.sendCommand("Page.reload", {
        ignoreCache
      });
      this.#resetDeferredsIfFinished();
      switch (wait) {
        case "none":
          break;
        case "interactive":
          await this.#deferreds.Page.lifecycleEvent.DOMContentLoaded;
          break;
        case "complete":
          await this.lifecycleLoaded();
          break;
      }
      return {
        navigation: wait === "none" ? null : this.navigableId ?? null,
        url: this.url
      };
    }
    async setViewport(viewport, devicePixelRatio) {
      if (viewport === null && devicePixelRatio === null) {
        await this.#cdpTarget.cdpClient.sendCommand("Emulation.clearDeviceMetricsOverride");
      } else {
        try {
          await this.#cdpTarget.cdpClient.sendCommand("Emulation.setDeviceMetricsOverride", {
            width: viewport ? viewport.width : 0,
            height: viewport ? viewport.height : 0,
            deviceScaleFactor: devicePixelRatio ? devicePixelRatio : 0,
            mobile: false,
            dontSetVisibleSize: true
          });
        } catch (err) {
          if (err.message.startsWith("Width and height values must be positive")) {
            throw new protocol_js_1.UnsupportedOperationException("Provided viewport dimensions are not supported");
          }
          throw err;
        }
      }
    }
    async handleUserPrompt(params) {
      await this.#cdpTarget.cdpClient.sendCommand("Page.handleJavaScriptDialog", {
        accept: params.accept ?? true,
        promptText: params.userText
      });
    }
    async activate() {
      await this.#cdpTarget.cdpClient.sendCommand("Page.bringToFront");
    }
    async captureScreenshot(params) {
      if (!this.isTopLevelContext()) {
        throw new protocol_js_1.UnsupportedOperationException(`Non-top-level 'context' (${params.context}) is currently not supported`);
      }
      const formatParameters = getImageFormatParameters(params);
      await this.#cdpTarget.cdpClient.sendCommand("Page.bringToFront");
      let captureBeyondViewport = false;
      let script;
      params.origin ??= "viewport";
      switch (params.origin) {
        case "document": {
          script = String(() => {
            const element = document.documentElement;
            return {
              x: 0,
              y: 0,
              width: element.scrollWidth,
              height: element.scrollHeight
            };
          });
          captureBeyondViewport = true;
          break;
        }
        case "viewport": {
          script = String(() => {
            const viewport = window.visualViewport;
            return {
              x: viewport.pageLeft,
              y: viewport.pageTop,
              width: viewport.width,
              height: viewport.height
            };
          });
          break;
        }
      }
      const realm = await this.getOrCreateSandbox(undefined);
      const originResult = await realm.callFunction(script, { type: "undefined" }, [], false, "none", {}, false);
      (0, assert_js_1.assert)(originResult.type === "success");
      const origin = deserializeDOMRect(originResult.result);
      (0, assert_js_1.assert)(origin);
      const rect = params.clip ? getIntersectionRect(await this.#parseRect(params.clip), origin) : origin;
      if (rect.width === 0 || rect.height === 0) {
        throw new protocol_js_1.UnableToCaptureScreenException(`Unable to capture screenshot with zero dimensions: width=${rect.width}, height=${rect.height}`);
      }
      return await this.#cdpTarget.cdpClient.sendCommand("Page.captureScreenshot", {
        clip: { ...rect, scale: 1 },
        ...formatParameters,
        captureBeyondViewport
      });
    }
    async print(params) {
      const cdpParams = {};
      if (params.background !== undefined) {
        cdpParams.printBackground = params.background;
      }
      if (params.margin?.bottom !== undefined) {
        cdpParams.marginBottom = (0, unitConversions_js_1.inchesFromCm)(params.margin.bottom);
      }
      if (params.margin?.left !== undefined) {
        cdpParams.marginLeft = (0, unitConversions_js_1.inchesFromCm)(params.margin.left);
      }
      if (params.margin?.right !== undefined) {
        cdpParams.marginRight = (0, unitConversions_js_1.inchesFromCm)(params.margin.right);
      }
      if (params.margin?.top !== undefined) {
        cdpParams.marginTop = (0, unitConversions_js_1.inchesFromCm)(params.margin.top);
      }
      if (params.orientation !== undefined) {
        cdpParams.landscape = params.orientation === "landscape";
      }
      if (params.page?.height !== undefined) {
        cdpParams.paperHeight = (0, unitConversions_js_1.inchesFromCm)(params.page.height);
      }
      if (params.page?.width !== undefined) {
        cdpParams.paperWidth = (0, unitConversions_js_1.inchesFromCm)(params.page.width);
      }
      if (params.pageRanges !== undefined) {
        for (const range of params.pageRanges) {
          if (typeof range === "number") {
            continue;
          }
          const rangeParts = range.split("-");
          if (rangeParts.length < 1 || rangeParts.length > 2) {
            throw new protocol_js_1.InvalidArgumentException(`Invalid page range: ${range} is not a valid integer range.`);
          }
          if (rangeParts.length === 1) {
            parseInteger(rangeParts[0] ?? "");
            continue;
          }
          let lowerBound;
          let upperBound;
          const [rangeLowerPart = "", rangeUpperPart = ""] = rangeParts;
          if (rangeLowerPart === "") {
            lowerBound = 1;
          } else {
            lowerBound = parseInteger(rangeLowerPart);
          }
          if (rangeUpperPart === "") {
            upperBound = Number.MAX_SAFE_INTEGER;
          } else {
            upperBound = parseInteger(rangeUpperPart);
          }
          if (lowerBound > upperBound) {
            throw new protocol_js_1.InvalidArgumentException(`Invalid page range: ${rangeLowerPart} > ${rangeUpperPart}`);
          }
        }
        cdpParams.pageRanges = params.pageRanges.join(",");
      }
      if (params.scale !== undefined) {
        cdpParams.scale = params.scale;
      }
      if (params.shrinkToFit !== undefined) {
        cdpParams.preferCSSPageSize = !params.shrinkToFit;
      }
      try {
        const result = await this.#cdpTarget.cdpClient.sendCommand("Page.printToPDF", cdpParams);
        return {
          data: result.data
        };
      } catch (error) {
        if (error.message === "invalid print parameters: content area is empty") {
          throw new protocol_js_1.UnsupportedOperationException(error.message);
        }
        throw error;
      }
    }
    async#parseRect(clip) {
      switch (clip.type) {
        case "box":
          return { x: clip.x, y: clip.y, width: clip.width, height: clip.height };
        case "element": {
          const sandbox = await this.getOrCreateSandbox(undefined);
          const result = await sandbox.callFunction(String((element) => {
            return element instanceof Element;
          }), { type: "undefined" }, [clip.element], false, "none", {});
          if (result.type === "exception") {
            throw new protocol_js_1.NoSuchElementException(`Element '${clip.element.sharedId}' was not found`);
          }
          (0, assert_js_1.assert)(result.result.type === "boolean");
          if (!result.result.value) {
            throw new protocol_js_1.NoSuchElementException(`Node '${clip.element.sharedId}' is not an Element`);
          }
          {
            const result2 = await sandbox.callFunction(String((element) => {
              const rect2 = element.getBoundingClientRect();
              return {
                x: rect2.x,
                y: rect2.y,
                height: rect2.height,
                width: rect2.width
              };
            }), { type: "undefined" }, [clip.element], false, "none", {});
            (0, assert_js_1.assert)(result2.type === "success");
            const rect = deserializeDOMRect(result2.result);
            if (!rect) {
              throw new protocol_js_1.UnableToCaptureScreenException(`Could not get bounding box for Element '${clip.element.sharedId}'`);
            }
            return rect;
          }
        }
      }
    }
    async close() {
      await this.#cdpTarget.cdpClient.sendCommand("Page.close");
    }
    async traverseHistory(delta) {
      if (delta === 0) {
        return;
      }
      const history = await this.#cdpTarget.cdpClient.sendCommand("Page.getNavigationHistory");
      const entry = history.entries[history.currentIndex + delta];
      if (!entry) {
        throw new protocol_js_1.NoSuchHistoryEntryException(`No history entry at delta ${delta}`);
      }
      await this.#cdpTarget.cdpClient.sendCommand("Page.navigateToHistoryEntry", {
        entryId: entry.id
      });
      this.#resetDeferredsIfFinished();
      await this.lifecycleLoaded();
    }
  }
  exports.BrowsingContextImpl = BrowsingContextImpl;
  function getImageFormatParameters(params) {
    const { quality, type } = params.format ?? {
      type: "image/png"
    };
    switch (type) {
      case "image/png": {
        return { format: "png" };
      }
      case "image/jpeg": {
        return {
          format: "jpeg",
          ...quality === undefined ? {} : { quality: Math.round(quality * 100) }
        };
      }
      case "image/webp": {
        return {
          format: "webp",
          ...quality === undefined ? {} : { quality: Math.round(quality * 100) }
        };
      }
    }
    throw new protocol_js_1.UnsupportedOperationException(`Image format '${type}' is not a supported format`);
  }
  function deserializeDOMRect(result) {
    if (result.type !== "object" || result.value === undefined) {
      return;
    }
    const x = result.value.find(([key]) => {
      return key === "x";
    })?.[1];
    const y = result.value.find(([key]) => {
      return key === "y";
    })?.[1];
    const height = result.value.find(([key]) => {
      return key === "height";
    })?.[1];
    const width = result.value.find(([key]) => {
      return key === "width";
    })?.[1];
    if (x?.type !== "number" || y?.type !== "number" || height?.type !== "number" || width?.type !== "number") {
      return;
    }
    return {
      x: x.value,
      y: y.value,
      width: width.value,
      height: height.value
    };
  }
  function normalizeRect(box) {
    return {
      ...box.width < 0 ? {
        x: box.x + box.width,
        width: -box.width
      } : {
        x: box.x,
        width: box.width
      },
      ...box.height < 0 ? {
        y: box.y + box.height,
        height: -box.height
      } : {
        y: box.y,
        height: box.height
      }
    };
  }
  function getIntersectionRect(first, second) {
    first = normalizeRect(first);
    second = normalizeRect(second);
    const x = Math.max(first.x, second.x);
    const y = Math.max(first.y, second.y);
    return {
      x,
      y,
      width: Math.max(Math.min(first.x + first.width, second.x + second.width) - x, 0),
      height: Math.max(Math.min(first.y + first.height, second.y + second.height) - y, 0)
    };
  }
  function parseInteger(value) {
    value = value.trim();
    if (!/^[0-9]+$/.test(value)) {
      throw new protocol_js_1.InvalidArgumentException(`Invalid integer: ${value}`);
    }
    return parseInt(value);
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/log/logHelper.js
var require_logHelper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getRemoteValuesText = exports.logMessageFormatter = undefined;
  var assert_js_1 = require_assert();
  var specifiers = ["%s", "%d", "%i", "%f", "%o", "%O", "%c"];
  function isFormatSpecifier(str) {
    return specifiers.some((spec) => str.includes(spec));
  }
  function logMessageFormatter(args) {
    let output = "";
    const argFormat = args[0].value.toString();
    const argValues = args.slice(1, undefined);
    const tokens = argFormat.split(new RegExp(specifiers.map((spec) => `(${spec})`).join("|"), "g"));
    for (const token of tokens) {
      if (token === undefined || token === "") {
        continue;
      }
      if (isFormatSpecifier(token)) {
        const arg = argValues.shift();
        (0, assert_js_1.assert)(arg, `Less value is provided: "${getRemoteValuesText(args, false)}"`);
        if (token === "%s") {
          output += stringFromArg(arg);
        } else if (token === "%d" || token === "%i") {
          if (arg.type === "bigint" || arg.type === "number" || arg.type === "string") {
            output += parseInt(arg.value.toString(), 10);
          } else {
            output += "NaN";
          }
        } else if (token === "%f") {
          if (arg.type === "bigint" || arg.type === "number" || arg.type === "string") {
            output += parseFloat(arg.value.toString());
          } else {
            output += "NaN";
          }
        } else {
          output += toJson(arg);
        }
      } else {
        output += token;
      }
    }
    if (argValues.length > 0) {
      throw new Error(`More value is provided: "${getRemoteValuesText(args, false)}"`);
    }
    return output;
  }
  exports.logMessageFormatter = logMessageFormatter;
  function toJson(arg) {
    if (arg.type !== "array" && arg.type !== "bigint" && arg.type !== "date" && arg.type !== "number" && arg.type !== "object" && arg.type !== "string") {
      return stringFromArg(arg);
    }
    if (arg.type === "bigint") {
      return `${arg.value.toString()}n`;
    }
    if (arg.type === "number") {
      return arg.value.toString();
    }
    if (["date", "string"].includes(arg.type)) {
      return JSON.stringify(arg.value);
    }
    if (arg.type === "object") {
      return `{${arg.value.map((pair) => {
        return `${JSON.stringify(pair[0])}:${toJson(pair[1])}`;
      }).join(",")}}`;
    }
    if (arg.type === "array") {
      return `[${arg.value?.map((val) => toJson(val)).join(",") ?? ""}]`;
    }
    throw Error(`Invalid value type: ${arg}`);
  }
  function stringFromArg(arg) {
    if (!Object.hasOwn(arg, "value")) {
      return arg.type;
    }
    switch (arg.type) {
      case "string":
      case "number":
      case "boolean":
      case "bigint":
        return String(arg.value);
      case "regexp":
        return `/${arg.value.pattern}/${arg.value.flags ?? ""}`;
      case "date":
        return new Date(arg.value).toString();
      case "object":
        return `Object(${arg.value?.length ?? ""})`;
      case "array":
        return `Array(${arg.value?.length ?? ""})`;
      case "map":
        return `Map(${arg.value?.length})`;
      case "set":
        return `Set(${arg.value?.length})`;
      default:
        return arg.type;
    }
  }
  function getRemoteValuesText(args, formatText) {
    const arg = args[0];
    if (!arg) {
      return "";
    }
    if (arg.type === "string" && isFormatSpecifier(arg.value.toString()) && formatText) {
      return logMessageFormatter(args);
    }
    return args.map((arg2) => {
      return stringFromArg(arg2);
    }).join(" ");
  }
  exports.getRemoteValuesText = getRemoteValuesText;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/log/LogManager.js
var require_LogManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.LogManager = undefined;
  var protocol_js_1 = require_protocol();
  var logHelper_js_1 = require_logHelper();
  function getBidiStackTrace(cdpStackTrace) {
    const stackFrames = cdpStackTrace?.callFrames.map((callFrame) => {
      return {
        columnNumber: callFrame.columnNumber,
        functionName: callFrame.functionName,
        lineNumber: callFrame.lineNumber,
        url: callFrame.url
      };
    });
    return stackFrames ? { callFrames: stackFrames } : undefined;
  }
  function getLogLevel(consoleApiType) {
    if (["error", "assert"].includes(consoleApiType)) {
      return "error";
    }
    if (["debug", "trace"].includes(consoleApiType)) {
      return "debug";
    }
    if (["warn", "warning"].includes(consoleApiType)) {
      return "warn";
    }
    return "info";
  }

  class LogManager {
    #eventManager;
    #realmStorage;
    #cdpTarget;
    constructor(cdpTarget, realmStorage, eventManager) {
      this.#cdpTarget = cdpTarget;
      this.#realmStorage = realmStorage;
      this.#eventManager = eventManager;
    }
    static create(cdpTarget, realmStorage, eventManager) {
      const logManager = new LogManager(cdpTarget, realmStorage, eventManager);
      logManager.#initializeEntryAddedEventListener();
      return logManager;
    }
    #initializeEntryAddedEventListener() {
      this.#cdpTarget.cdpClient.on("Runtime.consoleAPICalled", (params) => {
        const realm = this.#realmStorage.findRealm({
          cdpSessionId: this.#cdpTarget.cdpSessionId,
          executionContextId: params.executionContextId
        });
        const argsPromise = realm === undefined ? Promise.resolve(params.args) : Promise.all(params.args.map((arg) => {
          return realm.serializeCdpObject(arg, "none");
        }));
        this.#eventManager.registerPromiseEvent(argsPromise.then((args) => ({
          kind: "success",
          value: {
            type: "event",
            method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,
            params: {
              level: getLogLevel(params.type),
              source: {
                realm: realm?.realmId ?? "UNKNOWN",
                context: realm?.browsingContextId ?? "UNKNOWN"
              },
              text: (0, logHelper_js_1.getRemoteValuesText)(args, true),
              timestamp: Math.round(params.timestamp),
              stackTrace: getBidiStackTrace(params.stackTrace),
              type: "console",
              method: params.type === "warning" ? "warn" : params.type,
              args
            }
          }
        })), realm?.browsingContextId ?? "UNKNOWN", protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);
      });
      this.#cdpTarget.cdpClient.on("Runtime.exceptionThrown", (params) => {
        const realm = this.#realmStorage.findRealm({
          cdpSessionId: this.#cdpTarget.cdpSessionId,
          executionContextId: params.exceptionDetails.executionContextId
        });
        this.#eventManager.registerPromiseEvent(LogManager.#getExceptionText(params, realm).then((text) => ({
          kind: "success",
          value: {
            type: "event",
            method: protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded,
            params: {
              level: "error",
              source: {
                realm: realm?.realmId ?? "UNKNOWN",
                context: realm?.browsingContextId ?? "UNKNOWN"
              },
              text,
              timestamp: Math.round(params.timestamp),
              stackTrace: getBidiStackTrace(params.exceptionDetails.stackTrace),
              type: "javascript"
            }
          }
        })), realm?.browsingContextId ?? "UNKNOWN", protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded);
      });
    }
    static async#getExceptionText(params, realm) {
      if (!params.exceptionDetails.exception) {
        return params.exceptionDetails.text;
      }
      if (realm === undefined) {
        return JSON.stringify(params.exceptionDetails.exception);
      }
      return await realm.stringifyObject(params.exceptionDetails.exception);
    }
  }
  exports.LogManager = LogManager;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/NetworkUtils.js
var require_NetworkUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction = exports.cdpFetchHeadersFromBidiNetworkHeaders = exports.bidiNetworkHeadersFromCdpFetchHeaders = exports.cdpNetworkHeadersFromBidiNetworkHeaders = exports.bidiNetworkHeadersFromCdpNetworkHeaders = exports.computeHeadersSize = undefined;
  function computeHeadersSize(headers) {
    const requestHeaders = headers.reduce((acc, header) => {
      return `${acc}${header.name}: ${header.value.value}\r
`;
    }, "");
    return new TextEncoder().encode(requestHeaders).length;
  }
  exports.computeHeadersSize = computeHeadersSize;
  function bidiNetworkHeadersFromCdpNetworkHeaders(headers) {
    if (!headers) {
      return [];
    }
    return Object.entries(headers).map(([name, value]) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  exports.bidiNetworkHeadersFromCdpNetworkHeaders = bidiNetworkHeadersFromCdpNetworkHeaders;
  function cdpNetworkHeadersFromBidiNetworkHeaders(headers) {
    if (headers === undefined) {
      return;
    }
    return headers.reduce((result, header) => {
      result[header.name] = header.value.value;
      return result;
    }, {});
  }
  exports.cdpNetworkHeadersFromBidiNetworkHeaders = cdpNetworkHeadersFromBidiNetworkHeaders;
  function bidiNetworkHeadersFromCdpFetchHeaders(headers) {
    if (!headers) {
      return [];
    }
    return headers.map(({ name, value }) => ({
      name,
      value: {
        type: "string",
        value
      }
    }));
  }
  exports.bidiNetworkHeadersFromCdpFetchHeaders = bidiNetworkHeadersFromCdpFetchHeaders;
  function cdpFetchHeadersFromBidiNetworkHeaders(headers) {
    if (headers === undefined) {
      return;
    }
    return headers.map(({ name, value }) => ({
      name,
      value: value.value
    }));
  }
  exports.cdpFetchHeadersFromBidiNetworkHeaders = cdpFetchHeadersFromBidiNetworkHeaders;
  function cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction(action) {
    switch (action) {
      case "default":
        return "Default";
      case "cancel":
        return "CancelAuth";
      case "provideCredentials":
        return "ProvideCredentials";
    }
  }
  exports.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction = cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/NetworkRequest.js
var require_NetworkRequest = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.NetworkRequest = undefined;
  var protocol_js_1 = require_protocol();
  var assert_js_1 = require_assert();
  var Deferred_js_1 = require_Deferred();
  var NetworkUtils_js_1 = require_NetworkUtils();

  class NetworkRequest {
    static #unknown = "UNKNOWN";
    #requestId;
    #interceptPhase = undefined;
    #servedFromCache = false;
    #redirectCount;
    #eventManager;
    #networkStorage;
    #request = {};
    #response = {};
    #beforeRequestSentDeferred = new Deferred_js_1.Deferred;
    #responseStartedDeferred = new Deferred_js_1.Deferred;
    #responseCompletedDeferred = new Deferred_js_1.Deferred;
    #cdpTarget;
    constructor(requestId, eventManager, networkStorage, cdpTarget, redirectCount = 0) {
      this.#requestId = requestId;
      this.#eventManager = eventManager;
      this.#networkStorage = networkStorage;
      this.#cdpTarget = cdpTarget;
      this.#redirectCount = redirectCount;
    }
    get requestId() {
      return this.#requestId;
    }
    get url() {
      return this.#response.info?.url ?? this.#request.info?.request.url;
    }
    get redirectCount() {
      return this.#redirectCount;
    }
    get cdpTarget() {
      return this.#cdpTarget;
    }
    isRedirecting() {
      return Boolean(this.#request.info);
    }
    handleRedirect(event) {
      this.#queueResponseStartedEvent();
      this.#queueResponseCompletedEvent();
      this.#response.hasExtraInfo = event.redirectHasExtraInfo;
      this.#response.info = event.redirectResponse;
      this.#emitEventsIfReady(true);
    }
    #emitEventsIfReady(wasRedirected = false) {
      const requestExtraInfoCompleted = wasRedirected || Boolean(this.#request.extraInfo) || this.#servedFromCache || Boolean(this.#response.info && !this.#response.hasExtraInfo) || this.#interceptPhase === "beforeRequestSent";
      if (this.#request.info && requestExtraInfoCompleted) {
        this.#beforeRequestSentDeferred.resolve({
          kind: "success",
          value: undefined
        });
      }
      const responseExtraInfoCompleted = Boolean(this.#response.extraInfo) || this.#servedFromCache || Boolean(this.#response.info && !this.#response.hasExtraInfo) || this.#interceptPhase === "responseStarted";
      if (this.#response.info && responseExtraInfoCompleted) {
        this.#responseStartedDeferred.resolve({
          kind: "success",
          value: undefined
        });
        this.#responseCompletedDeferred.resolve({
          kind: "success",
          value: undefined
        });
      }
    }
    onRequestWillBeSentEvent(event) {
      this.#request.info = event;
      this.#queueBeforeRequestSentEvent();
      this.#emitEventsIfReady();
    }
    onRequestWillBeSentExtraInfoEvent(event) {
      this.#request.extraInfo = event;
      this.#emitEventsIfReady();
    }
    onResponseReceivedExtraInfoEvent(event) {
      this.#response.extraInfo = event;
      this.#emitEventsIfReady();
    }
    onResponseReceivedEvent(event) {
      this.#response.hasExtraInfo = event.hasExtraInfo;
      this.#response.info = event.response;
      this.#queueResponseStartedEvent();
      this.#queueResponseCompletedEvent();
      this.#emitEventsIfReady();
    }
    onServedFromCache() {
      this.#servedFromCache = true;
      this.#emitEventsIfReady();
    }
    onLoadingFailedEvent(event) {
      this.#beforeRequestSentDeferred.resolve({
        kind: "success",
        value: undefined
      });
      this.#responseStartedDeferred.resolve({
        kind: "error",
        error: new Error("Network event loading failed")
      });
      this.#responseCompletedDeferred.resolve({
        kind: "error",
        error: new Error("Network event loading failed")
      });
      this.#eventManager.registerEvent({
        type: "event",
        method: protocol_js_1.ChromiumBidi.Network.EventNames.FetchError,
        params: {
          ...this.#getBaseEventParams(),
          errorText: event.errorText
        }
      }, this.#context);
    }
    onRequestPaused(params, networkStorage) {
      if (this.#isIgnoredEvent()) {
        this.continueRequest(params.requestId).catch(() => {
        });
        return;
      }
      let phase;
      if (params.responseErrorReason === undefined && params.responseStatusCode === undefined) {
        phase = "beforeRequestSent";
      } else if (params.responseStatusCode === 401 && params.responseStatusText === "Unauthorized") {
        phase = "authRequired";
      } else {
        phase = "responseStarted";
      }
      const headers = (0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpFetchHeaders)(params.responseHeaders);
      (0, assert_js_1.assert)(this.requestId === params.networkId);
      networkStorage.addBlockedRequest(this.requestId, {
        request: params.requestId,
        phase,
        response: {
          url: params.request.url,
          protocol: "",
          status: params.responseStatusCode ?? 0,
          statusText: params.responseStatusText ?? "",
          fromCache: false,
          headers,
          mimeType: "",
          bytesReceived: 0,
          headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),
          bodySize: 0,
          content: {
            size: 0
          },
          authChallenge: undefined
        }
      });
      this.#interceptPhase = phase;
      this.#emitEventsIfReady();
    }
    async failRequest(networkId, errorReason) {
      await this.#cdpTarget.cdpClient.sendCommand("Fetch.failRequest", {
        requestId: networkId,
        errorReason
      });
      this.#interceptPhase = undefined;
    }
    async continueRequest(cdpFetchRequestId, url, method, headers) {
      await this.#cdpTarget.cdpClient.sendCommand("Fetch.continueRequest", {
        requestId: cdpFetchRequestId,
        url,
        method,
        headers
      });
      this.#interceptPhase = undefined;
    }
    async continueResponse(cdpFetchRequestId, responseCode, responsePhrase, responseHeaders) {
      await this.#cdpTarget.cdpClient.sendCommand("Fetch.continueResponse", {
        requestId: cdpFetchRequestId,
        responseCode,
        responsePhrase,
        responseHeaders
      });
      this.#interceptPhase = undefined;
    }
    async continueWithAuth(cdpFetchRequestId, response, username, password) {
      await this.#cdpTarget.cdpClient.sendCommand("Fetch.continueWithAuth", {
        requestId: cdpFetchRequestId,
        authChallengeResponse: {
          response,
          username,
          password
        }
      });
      this.#interceptPhase = undefined;
    }
    async provideResponse(cdpFetchRequestId, responseCode, responsePhrase, responseHeaders, body) {
      await this.#cdpTarget.cdpClient.sendCommand("Fetch.fulfillRequest", {
        requestId: cdpFetchRequestId,
        responseCode,
        responsePhrase,
        responseHeaders,
        ...body ? { body: btoa(body) } : {}
      });
      this.#interceptPhase = undefined;
    }
    dispose() {
      const result = {
        kind: "error",
        error: new Error("Network processor detached")
      };
      this.#beforeRequestSentDeferred.resolve(result);
      this.#responseStartedDeferred.resolve(result);
      this.#responseCompletedDeferred.resolve(result);
    }
    get #context() {
      return this.#request.info?.frameId ?? null;
    }
    get statusCode() {
      return this.#response.info?.status ?? this.#response.extraInfo?.statusCode ?? -1;
    }
    #getBaseEventParams(phase) {
      const isBlocked = phase !== undefined && phase === this.#interceptPhase;
      const intercepts = this.#networkStorage.getNetworkIntercepts(this.#requestId, phase);
      return {
        isBlocked,
        context: this.#context,
        navigation: this.#getNavigationId(),
        redirectCount: this.#redirectCount,
        request: this.#getRequestData(),
        timestamp: Math.round((this.#request.info?.wallTime ?? 0) * 1000),
        intercepts: isBlocked ? intercepts : undefined
      };
    }
    #getNavigationId() {
      if (!this.#request.info || !this.#request.info.loaderId || this.#request.info.loaderId !== this.#request.info.requestId) {
        return null;
      }
      return this.#request.info.loaderId;
    }
    #getRequestData() {
      const cookies = this.#request.extraInfo ? NetworkRequest.#getCookies(this.#request.extraInfo.associatedCookies) : [];
      const headers = (0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#request.info?.request.headers);
      return {
        request: this.#request.info?.requestId ?? NetworkRequest.#unknown,
        url: this.#request.info?.request.url ?? NetworkRequest.#unknown,
        method: this.#request.info?.request.method ?? NetworkRequest.#unknown,
        headers,
        cookies,
        headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),
        bodySize: 0,
        timings: this.#getTimings()
      };
    }
    #getTimings() {
      return {
        timeOrigin: 0,
        requestTime: 0,
        redirectStart: 0,
        redirectEnd: 0,
        fetchStart: 0,
        dnsStart: 0,
        dnsEnd: 0,
        connectStart: 0,
        connectEnd: 0,
        tlsStart: 0,
        requestStart: 0,
        responseStart: 0,
        responseEnd: 0
      };
    }
    #queueBeforeRequestSentEvent() {
      if (this.#isIgnoredEvent()) {
        return;
      }
      this.#eventManager.registerPromiseEvent(this.#beforeRequestSentDeferred.then((result) => {
        if (result.kind === "success") {
          try {
            return {
              kind: "success",
              value: Object.assign(this.#getBeforeRequestEvent(), {
                type: "event"
              })
            };
          } catch (error) {
            return {
              kind: "error",
              error: error instanceof Error ? error : new Error("Unknown")
            };
          }
        }
        return result;
      }), this.#context, protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent);
    }
    #getBeforeRequestEvent() {
      (0, assert_js_1.assert)(this.#request.info, "RequestWillBeSentEvent is not set");
      return {
        method: protocol_js_1.ChromiumBidi.Network.EventNames.BeforeRequestSent,
        params: {
          ...this.#getBaseEventParams("beforeRequestSent"),
          initiator: {
            type: NetworkRequest.#getInitiatorType(this.#request.info.initiator.type)
          }
        }
      };
    }
    #queueResponseStartedEvent() {
      if (this.#isIgnoredEvent()) {
        return;
      }
      this.#eventManager.registerPromiseEvent(this.#responseStartedDeferred.then((result) => {
        if (result.kind === "success") {
          try {
            return {
              kind: "success",
              value: Object.assign(this.#getResponseStartedEvent(), {
                type: "event"
              })
            };
          } catch (error) {
            return {
              kind: "error",
              error: error instanceof Error ? error : new Error("Unknown")
            };
          }
        }
        return result;
      }), this.#context, protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted);
    }
    #getResponseStartedEvent() {
      (0, assert_js_1.assert)(this.#request.info, "RequestWillBeSentEvent is not set");
      (0, assert_js_1.assert)(this.#response.info, "ResponseReceivedEvent is not set");
      if (this.#response.info.fromDiskCache) {
        this.#response.extraInfo = undefined;
      }
      const headers = (0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#response.info.headers);
      return {
        method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseStarted,
        params: {
          ...this.#getBaseEventParams(),
          response: {
            url: this.#response.info.url ?? NetworkRequest.#unknown,
            protocol: this.#response.info.protocol ?? "",
            status: this.statusCode,
            statusText: this.#response.info.statusText,
            fromCache: this.#response.info.fromDiskCache || this.#response.info.fromPrefetchCache || this.#servedFromCache,
            headers,
            mimeType: this.#response.info.mimeType,
            bytesReceived: this.#response.info.encodedDataLength,
            headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),
            bodySize: 0,
            content: {
              size: 0
            }
          }
        }
      };
    }
    #queueResponseCompletedEvent() {
      if (this.#isIgnoredEvent()) {
        return;
      }
      this.#eventManager.registerPromiseEvent(this.#responseCompletedDeferred.then((result) => {
        if (result.kind === "success") {
          try {
            return {
              kind: "success",
              value: Object.assign(this.#getResponseReceivedEvent(), {
                type: "event"
              })
            };
          } catch (error) {
            return {
              kind: "error",
              error: error instanceof Error ? error : new Error("Unknown")
            };
          }
        }
        return result;
      }), this.#context, protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted);
    }
    #getResponseReceivedEvent() {
      (0, assert_js_1.assert)(this.#request.info, "RequestWillBeSentEvent is not set");
      (0, assert_js_1.assert)(this.#response.info, "ResponseReceivedEvent is not set");
      if (this.#response.info.fromDiskCache) {
        this.#response.extraInfo = undefined;
      }
      const headers = (0, NetworkUtils_js_1.bidiNetworkHeadersFromCdpNetworkHeaders)(this.#response.info.headers);
      return {
        method: protocol_js_1.ChromiumBidi.Network.EventNames.ResponseCompleted,
        params: {
          ...this.#getBaseEventParams(),
          response: {
            url: this.#response.info.url ?? NetworkRequest.#unknown,
            protocol: this.#response.info.protocol ?? "",
            status: this.statusCode,
            statusText: this.#response.info.statusText,
            fromCache: this.#response.info.fromDiskCache || this.#response.info.fromPrefetchCache || this.#servedFromCache,
            headers,
            mimeType: this.#response.info.mimeType,
            bytesReceived: this.#response.info.encodedDataLength,
            headersSize: (0, NetworkUtils_js_1.computeHeadersSize)(headers),
            bodySize: 0,
            content: {
              size: 0
            }
          }
        }
      };
    }
    #isIgnoredEvent() {
      return this.#request.info?.request.url.endsWith("/favicon.ico") ?? false;
    }
    static #getInitiatorType(initiatorType) {
      switch (initiatorType) {
        case "parser":
        case "script":
        case "preflight":
          return initiatorType;
        default:
          return "other";
      }
    }
    static #getCookies(associatedCookies) {
      return associatedCookies.filter(({ blockedReasons }) => {
        return !Array.isArray(blockedReasons) || blockedReasons.length === 0;
      }).map(({ cookie }) => {
        return {
          name: cookie.name,
          value: {
            type: "string",
            value: cookie.value
          },
          domain: cookie.domain,
          path: cookie.path,
          expires: cookie.expires,
          size: cookie.size,
          httpOnly: cookie.httpOnly,
          secure: cookie.secure,
          sameSite: NetworkRequest.#getCookiesSameSite(cookie.sameSite)
        };
      });
    }
    static #getCookiesSameSite(cdpSameSiteValue) {
      switch (cdpSameSiteValue) {
        case "Strict":
          return "strict";
        case "Lax":
          return "lax";
        default:
          return "none";
      }
    }
  }
  exports.NetworkRequest = NetworkRequest;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/NetworkManager.js
var require_NetworkManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.NetworkManager = undefined;
  var NetworkRequest_js_1 = require_NetworkRequest();

  class NetworkManager {
    #cdpTarget;
    #eventManager;
    #networkStorage;
    constructor(cdpTarget, eventManager, networkStorage) {
      this.#cdpTarget = cdpTarget;
      this.#eventManager = eventManager;
      this.#networkStorage = networkStorage;
    }
    get cdpTarget() {
      return this.#cdpTarget;
    }
    #getOrCreateNetworkRequest(id, redirectCount) {
      let request = this.#networkStorage.getRequest(id);
      if (request) {
        return request;
      }
      request = new NetworkRequest_js_1.NetworkRequest(id, this.#eventManager, this.#networkStorage, this.#cdpTarget, redirectCount);
      this.#networkStorage.addRequest(request);
      return request;
    }
    static create(cdpTarget, eventManager, networkStorage) {
      const networkManager = new NetworkManager(cdpTarget, eventManager, networkStorage);
      cdpTarget.browserCdpClient.on("Target.detachedFromTarget", (params) => {
        if (cdpTarget.cdpClient.sessionId === params.sessionId) {
          networkManager.#networkStorage.disposeRequestMap();
        }
      });
      cdpTarget.cdpClient.on("Network.requestWillBeSent", (params) => {
        const request = networkManager.#networkStorage.getRequest(params.requestId);
        if (request && request.isRedirecting()) {
          request.handleRedirect(params);
          networkManager.#networkStorage.deleteRequest(params.requestId);
          networkManager.#getOrCreateNetworkRequest(params.requestId, request.redirectCount + 1).onRequestWillBeSentEvent(params);
        } else if (request) {
          request.onRequestWillBeSentEvent(params);
        } else {
          networkManager.#getOrCreateNetworkRequest(params.requestId).onRequestWillBeSentEvent(params);
        }
      });
      cdpTarget.cdpClient.on("Network.requestWillBeSentExtraInfo", (params) => {
        networkManager.#getOrCreateNetworkRequest(params.requestId).onRequestWillBeSentExtraInfoEvent(params);
      });
      cdpTarget.cdpClient.on("Network.responseReceived", (params) => {
        networkManager.#getOrCreateNetworkRequest(params.requestId).onResponseReceivedEvent(params);
      });
      cdpTarget.cdpClient.on("Network.responseReceivedExtraInfo", (params) => {
        networkManager.#getOrCreateNetworkRequest(params.requestId).onResponseReceivedExtraInfoEvent(params);
      });
      cdpTarget.cdpClient.on("Network.requestServedFromCache", (params) => {
        networkManager.#getOrCreateNetworkRequest(params.requestId).onServedFromCache();
      });
      cdpTarget.cdpClient.on("Network.loadingFailed", (params) => {
        networkManager.#getOrCreateNetworkRequest(params.requestId).onLoadingFailedEvent(params);
      });
      cdpTarget.cdpClient.on("Fetch.requestPaused", (params) => {
        if (params.networkId) {
          networkManager.#getOrCreateNetworkRequest(params.networkId).onRequestPaused(params, networkManager.#networkStorage);
        }
      });
      return networkManager;
    }
  }
  exports.NetworkManager = NetworkManager;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/CdpTarget.js
var require_CdpTarget = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CdpTarget = undefined;
  var Deferred_js_1 = require_Deferred();
  var LogManager_js_1 = require_LogManager();
  var NetworkManager_js_1 = require_NetworkManager();

  class CdpTarget {
    #targetId;
    #cdpClient;
    #browserCdpClient;
    #cdpSessionId;
    #eventManager;
    #preloadScriptStorage;
    #networkStorage;
    #targetUnblocked = new Deferred_js_1.Deferred;
    static create(targetId, cdpClient, browserCdpClient, cdpSessionId, realmStorage, eventManager, preloadScriptStorage, networkStorage) {
      const cdpTarget = new CdpTarget(targetId, cdpClient, browserCdpClient, cdpSessionId, eventManager, preloadScriptStorage, networkStorage);
      LogManager_js_1.LogManager.create(cdpTarget, realmStorage, eventManager);
      NetworkManager_js_1.NetworkManager.create(cdpTarget, eventManager, networkStorage);
      cdpTarget.#setEventListeners();
      cdpTarget.#unblock();
      return cdpTarget;
    }
    constructor(targetId, cdpClient, browserCdpClient, cdpSessionId, eventManager, preloadScriptStorage, networkStorage) {
      this.#targetId = targetId;
      this.#cdpClient = cdpClient;
      this.#cdpSessionId = cdpSessionId;
      this.#eventManager = eventManager;
      this.#preloadScriptStorage = preloadScriptStorage;
      this.#networkStorage = networkStorage;
      this.#browserCdpClient = browserCdpClient;
    }
    get targetUnblocked() {
      return this.#targetUnblocked;
    }
    get targetId() {
      return this.#targetId;
    }
    get cdpClient() {
      return this.#cdpClient;
    }
    get browserCdpClient() {
      return this.#browserCdpClient;
    }
    get cdpSessionId() {
      return this.#cdpSessionId;
    }
    async fetchEnable() {
      await this.#cdpClient.sendCommand("Fetch.enable", this.#networkStorage.getFetchEnableParams());
    }
    async fetchDisable() {
      await this.#cdpClient.sendCommand("Fetch.disable");
    }
    async#unblock() {
      try {
        await Promise.all([
          this.#cdpClient.sendCommand("Runtime.enable"),
          this.#cdpClient.sendCommand("Page.enable"),
          this.#cdpClient.sendCommand("Page.setLifecycleEventsEnabled", {
            enabled: true
          }),
          this.#cdpClient.sendCommand("Network.enable"),
          this.fetchEnable(),
          this.#cdpClient.sendCommand("Target.setAutoAttach", {
            autoAttach: true,
            waitForDebuggerOnStart: true,
            flatten: true
          }),
          this.#initAndEvaluatePreloadScripts(),
          this.#cdpClient.sendCommand("Runtime.runIfWaitingForDebugger")
        ]);
      } catch (error) {
        if (!this.#cdpClient.isCloseError(error)) {
          this.#targetUnblocked.resolve({
            kind: "error",
            error
          });
          return;
        }
      }
      this.#targetUnblocked.resolve({
        kind: "success",
        value: undefined
      });
    }
    #setEventListeners() {
      this.#cdpClient.on("*", (event, params) => {
        if (typeof event !== "string") {
          return;
        }
        this.#eventManager.registerEvent({
          type: "event",
          method: `cdp.${event}`,
          params: {
            event,
            params,
            session: this.#cdpSessionId
          }
        }, null);
      });
    }
    getChannels() {
      return this.#preloadScriptStorage.find().flatMap((script) => script.channels);
    }
    async#initAndEvaluatePreloadScripts() {
      for (const script of this.#preloadScriptStorage.find({
        global: true
      })) {
        await script.initInTarget(this, true);
      }
    }
  }
  exports.CdpTarget = CdpTarget;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/BrowsingContextProcessor.js
var require_BrowsingContextProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BrowsingContextProcessor = undefined;
  var protocol_js_1 = require_protocol();
  var log_js_1 = require_log();
  var BrowsingContextImpl_js_1 = require_BrowsingContextImpl();
  var CdpTarget_js_1 = require_CdpTarget();

  class BrowsingContextProcessor {
    #browserCdpClient;
    #cdpConnection;
    #selfTargetId;
    #eventManager;
    #browsingContextStorage;
    #networkStorage;
    #preloadScriptStorage;
    #realmStorage;
    #logger;
    constructor(cdpConnection, browserCdpClient, selfTargetId, eventManager, browsingContextStorage, realmStorage, networkStorage, preloadScriptStorage, logger) {
      this.#cdpConnection = cdpConnection;
      this.#browserCdpClient = browserCdpClient;
      this.#selfTargetId = selfTargetId;
      this.#eventManager = eventManager;
      this.#browsingContextStorage = browsingContextStorage;
      this.#preloadScriptStorage = preloadScriptStorage;
      this.#networkStorage = networkStorage;
      this.#realmStorage = realmStorage;
      this.#logger = logger;
      this.#setEventListeners(browserCdpClient);
    }
    getTree(params) {
      const resultContexts = params.root === undefined ? this.#browsingContextStorage.getTopLevelContexts() : [this.#browsingContextStorage.getContext(params.root)];
      return {
        contexts: resultContexts.map((c) => c.serializeToBidiValue(params.maxDepth ?? Number.MAX_VALUE))
      };
    }
    async create(params) {
      let referenceContext;
      if (params.referenceContext !== undefined) {
        referenceContext = this.#browsingContextStorage.getContext(params.referenceContext);
        if (!referenceContext.isTopLevelContext()) {
          throw new protocol_js_1.InvalidArgumentException(`referenceContext should be a top-level context`);
        }
      }
      let result;
      switch (params.type) {
        case "tab":
          result = await this.#browserCdpClient.sendCommand("Target.createTarget", {
            url: "about:blank",
            newWindow: false
          });
          break;
        case "window":
          result = await this.#browserCdpClient.sendCommand("Target.createTarget", {
            url: "about:blank",
            newWindow: true
          });
          break;
      }
      const contextId = result.targetId;
      const context = this.#browsingContextStorage.getContext(contextId);
      await context.lifecycleLoaded();
      return { context: context.id };
    }
    navigate(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return context.navigate(params.url, params.wait ?? "none");
    }
    reload(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return context.reload(params.ignoreCache ?? false, params.wait ?? "none");
    }
    async activate(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException("Activation is only supported on the top-level context");
      }
      await context.activate();
      return {};
    }
    async captureScreenshot(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return await context.captureScreenshot(params);
    }
    async print(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      return await context.print(params);
    }
    async setViewport(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException("Emulating viewport is only supported on the top-level context");
      }
      await context.setViewport(params.viewport, params.devicePixelRatio);
      return {};
    }
    async traverseHistory(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context) {
        throw new protocol_js_1.InvalidArgumentException(`No browsing context with id ${params.context}`);
      }
      await context.traverseHistory(params.delta);
      return {};
    }
    async handleUserPrompt(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      await context.handleUserPrompt(params);
      return {};
    }
    async close(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      if (!context.isTopLevelContext()) {
        throw new protocol_js_1.InvalidArgumentException(`Non top-level browsing context ${context.id} cannot be closed.`);
      }
      try {
        const detachedFromTargetPromise = new Promise((resolve) => {
          const onContextDestroyed = (event) => {
            if (event.targetId === params.context) {
              this.#browserCdpClient.off("Target.detachedFromTarget", onContextDestroyed);
              resolve();
            }
          };
          this.#browserCdpClient.on("Target.detachedFromTarget", onContextDestroyed);
        });
        if (params.promptUnload) {
          await context.close();
        } else {
          await this.#browserCdpClient.sendCommand("Target.closeTarget", {
            targetId: params.context
          });
        }
        await detachedFromTargetPromise;
      } catch (error) {
        if (!(error.code === -32000 && error.message === "Not attached to an active page")) {
          throw error;
        }
      }
      return {};
    }
    #setEventListeners(cdpClient) {
      cdpClient.on("Target.attachedToTarget", (params) => {
        this.#handleAttachedToTargetEvent(params, cdpClient);
      });
      cdpClient.on("Target.detachedFromTarget", (params) => {
        this.#handleDetachedFromTargetEvent(params);
      });
      cdpClient.on("Target.targetInfoChanged", (params) => {
        this.#handleTargetInfoChangedEvent(params);
      });
      cdpClient.on("Page.frameAttached", (params) => {
        this.#handleFrameAttachedEvent(params);
      });
      cdpClient.on("Page.frameDetached", (params) => {
        this.#handleFrameDetachedEvent(params);
      });
    }
    #handleFrameAttachedEvent(params) {
      const parentBrowsingContext = this.#browsingContextStorage.findContext(params.parentFrameId);
      if (parentBrowsingContext !== undefined) {
        BrowsingContextImpl_js_1.BrowsingContextImpl.create(parentBrowsingContext.cdpTarget, this.#realmStorage, params.frameId, params.parentFrameId, this.#eventManager, this.#browsingContextStorage, this.#logger);
      }
    }
    #handleFrameDetachedEvent(params) {
      if (params.reason === "swap") {
        return;
      }
      this.#browsingContextStorage.findContext(params.frameId)?.dispose();
    }
    #handleAttachedToTargetEvent(params, parentSessionCdpClient) {
      const { sessionId, targetInfo } = params;
      const targetCdpClient = this.#cdpConnection.getCdpClient(sessionId);
      if (!this.#isValidTarget(targetInfo)) {
        targetCdpClient.sendCommand("Runtime.runIfWaitingForDebugger").then(() => parentSessionCdpClient.sendCommand("Target.detachFromTarget", params)).catch((error) => this.#logger?.(log_js_1.LogType.debugError, error));
        return;
      }
      this.#logger?.(log_js_1.LogType.debugInfo, "AttachedToTarget event received:", params);
      this.#setEventListeners(targetCdpClient);
      const maybeContext = this.#browsingContextStorage.findContext(targetInfo.targetId);
      const cdpTarget = CdpTarget_js_1.CdpTarget.create(targetInfo.targetId, targetCdpClient, this.#browserCdpClient, sessionId, this.#realmStorage, this.#eventManager, this.#preloadScriptStorage, this.#networkStorage);
      if (maybeContext) {
        maybeContext.updateCdpTarget(cdpTarget);
      } else {
        BrowsingContextImpl_js_1.BrowsingContextImpl.create(cdpTarget, this.#realmStorage, targetInfo.targetId, null, this.#eventManager, this.#browsingContextStorage, this.#logger);
      }
    }
    #handleDetachedFromTargetEvent(params) {
      const contextId = params.targetId;
      this.#browsingContextStorage.findContext(contextId)?.dispose();
      this.#preloadScriptStorage.find({ targetId: contextId }).map((preloadScript) => preloadScript.dispose(contextId));
    }
    #handleTargetInfoChangedEvent(params) {
      const contextId = params.targetInfo.targetId;
      this.#browsingContextStorage.findContext(contextId)?.onTargetInfoChanged(params);
    }
    #isValidTarget(target) {
      if (target.targetId === this.#selfTargetId) {
        return false;
      }
      return ["page", "iframe"].includes(target.type);
    }
  }
  exports.BrowsingContextProcessor = BrowsingContextProcessor;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputSource.js
var require_InputSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.WheelSource = exports.PointerSource = exports.KeySource = exports.NoneSource = undefined;

  class NoneSource {
    type = "none";
  }
  exports.NoneSource = NoneSource;

  class KeySource {
    type = "key";
    pressed = new Set;
    #modifiers = 0;
    get modifiers() {
      return this.#modifiers;
    }
    get alt() {
      return (this.#modifiers & 1) === 1;
    }
    set alt(value) {
      this.#setModifier(value, 1);
    }
    get ctrl() {
      return (this.#modifiers & 2) === 2;
    }
    set ctrl(value) {
      this.#setModifier(value, 2);
    }
    get meta() {
      return (this.#modifiers & 4) === 4;
    }
    set meta(value) {
      this.#setModifier(value, 4);
    }
    get shift() {
      return (this.#modifiers & 8) === 8;
    }
    set shift(value) {
      this.#setModifier(value, 8);
    }
    #setModifier(value, bit) {
      if (value) {
        this.#modifiers |= bit;
      } else {
        this.#modifiers &= ~bit;
      }
    }
  }
  exports.KeySource = KeySource;

  class PointerSource {
    type = "pointer";
    subtype;
    pointerId;
    pressed = new Set;
    x = 0;
    y = 0;
    constructor(id, subtype) {
      this.pointerId = id;
      this.subtype = subtype;
    }
    get buttons() {
      let buttons = 0;
      for (const button of this.pressed) {
        switch (button) {
          case 0:
            buttons |= 1;
            break;
          case 1:
            buttons |= 4;
            break;
          case 2:
            buttons |= 2;
            break;
          case 3:
            buttons |= 8;
            break;
          case 4:
            buttons |= 16;
            break;
        }
      }
      return buttons;
    }
    static ClickContext = class ClickContext {
      static #DOUBLE_CLICK_TIME_MS = 500;
      static #MAX_DOUBLE_CLICK_RADIUS = 2;
      count = 0;
      #x;
      #y;
      #time;
      constructor(x, y, time) {
        this.#x = x;
        this.#y = y;
        this.#time = time;
      }
      compare(context) {
        return context.#time - this.#time > ClickContext.#DOUBLE_CLICK_TIME_MS || Math.abs(context.#x - this.#x) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS || Math.abs(context.#y - this.#y) > ClickContext.#MAX_DOUBLE_CLICK_RADIUS;
      }
    };
    #clickContexts = new Map;
    setClickCount(button, context) {
      let storedContext = this.#clickContexts.get(button);
      if (!storedContext || storedContext.compare(context)) {
        storedContext = context;
      }
      ++storedContext.count;
      this.#clickContexts.set(button, storedContext);
      return storedContext.count;
    }
    getClickCount(button) {
      return this.#clickContexts.get(button)?.count ?? 0;
    }
  }
  exports.PointerSource = PointerSource;

  class WheelSource {
    type = "wheel";
  }
  exports.WheelSource = WheelSource;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/keyUtils.js
var require_keyUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.getKeyLocation = exports.getKeyCode = exports.getNormalizedKey = undefined;
  function getNormalizedKey(value) {
    switch (value) {
      case "":
        return "Unidentified";
      case "":
        return "Cancel";
      case "":
        return "Help";
      case "":
        return "Backspace";
      case "":
        return "Tab";
      case "":
        return "Clear";
      case "":
        return "Return";
      case "":
        return "Enter";
      case "":
        return "Shift";
      case "":
        return "Control";
      case "":
        return "Alt";
      case "":
        return "Pause";
      case "":
        return "Escape";
      case "":
        return " ";
      case "":
        return "PageUp";
      case "":
        return "PageDown";
      case "":
        return "End";
      case "":
        return "Home";
      case "":
        return "ArrowLeft";
      case "":
        return "ArrowUp";
      case "":
        return "ArrowRight";
      case "":
        return "ArrowDown";
      case "":
        return "Insert";
      case "":
        return "Delete";
      case "":
        return ";";
      case "":
        return "=";
      case "":
        return "0";
      case "":
        return "1";
      case "":
        return "2";
      case "":
        return "3";
      case "":
        return "4";
      case "":
        return "5";
      case "":
        return "6";
      case "":
        return "7";
      case "":
        return "8";
      case "":
        return "9";
      case "":
        return "*";
      case "":
        return "+";
      case "":
        return ",";
      case "":
        return "-";
      case "":
        return ".";
      case "":
        return "/";
      case "":
        return "F1";
      case "":
        return "F2";
      case "":
        return "F3";
      case "":
        return "F4";
      case "":
        return "F5";
      case "":
        return "F6";
      case "":
        return "F7";
      case "":
        return "F8";
      case "":
        return "F9";
      case "":
        return "F10";
      case "":
        return "F11";
      case "":
        return "F12";
      case "":
        return "Meta";
      case "":
        return "ZenkakuHankaku";
      case "":
        return "Shift";
      case "":
        return "Control";
      case "":
        return "Alt";
      case "":
        return "Meta";
      case "":
        return "PageUp";
      case "":
        return "PageDown";
      case "":
        return "End";
      case "":
        return "Home";
      case "":
        return "ArrowLeft";
      case "":
        return "ArrowUp";
      case "":
        return "ArrowRight";
      case "":
        return "ArrowDown";
      case "":
        return "Insert";
      case "":
        return "Delete";
      default:
        return value;
    }
  }
  exports.getNormalizedKey = getNormalizedKey;
  function getKeyCode(key) {
    switch (key) {
      case "`":
      case "~":
        return "Backquote";
      case "\\":
      case "|":
        return "Backslash";
      case "":
        return "Backspace";
      case "[":
      case "{":
        return "BracketLeft";
      case "]":
      case "}":
        return "BracketRight";
      case ",":
      case "<":
        return "Comma";
      case "0":
      case ")":
        return "Digit0";
      case "1":
      case "!":
        return "Digit1";
      case "2":
      case "@":
        return "Digit2";
      case "3":
      case "#":
        return "Digit3";
      case "4":
      case "$":
        return "Digit4";
      case "5":
      case "%":
        return "Digit5";
      case "6":
      case "^":
        return "Digit6";
      case "7":
      case "&":
        return "Digit7";
      case "8":
      case "*":
        return "Digit8";
      case "9":
      case "(":
        return "Digit9";
      case "=":
      case "+":
        return "Equal";
      case "a":
      case "A":
        return "KeyA";
      case "b":
      case "B":
        return "KeyB";
      case "c":
      case "C":
        return "KeyC";
      case "d":
      case "D":
        return "KeyD";
      case "e":
      case "E":
        return "KeyE";
      case "f":
      case "F":
        return "KeyF";
      case "g":
      case "G":
        return "KeyG";
      case "h":
      case "H":
        return "KeyH";
      case "i":
      case "I":
        return "KeyI";
      case "j":
      case "J":
        return "KeyJ";
      case "k":
      case "K":
        return "KeyK";
      case "l":
      case "L":
        return "KeyL";
      case "m":
      case "M":
        return "KeyM";
      case "n":
      case "N":
        return "KeyN";
      case "o":
      case "O":
        return "KeyO";
      case "p":
      case "P":
        return "KeyP";
      case "q":
      case "Q":
        return "KeyQ";
      case "r":
      case "R":
        return "KeyR";
      case "s":
      case "S":
        return "KeyS";
      case "t":
      case "T":
        return "KeyT";
      case "u":
      case "U":
        return "KeyU";
      case "v":
      case "V":
        return "KeyV";
      case "w":
      case "W":
        return "KeyW";
      case "x":
      case "X":
        return "KeyX";
      case "y":
      case "Y":
        return "KeyY";
      case "z":
      case "Z":
        return "KeyZ";
      case "-":
      case "_":
        return "Minus";
      case ".":
        return "Period";
      case "'":
      case '"':
        return "Quote";
      case ";":
      case ":":
        return "Semicolon";
      case "/":
      case "?":
        return "Slash";
      case "":
        return "AltLeft";
      case "":
        return "AltRight";
      case "":
        return "ControlLeft";
      case "":
        return "ControlRight";
      case "":
        return "Enter";
      case "":
        return "MetaLeft";
      case "":
        return "MetaRight";
      case "":
        return "ShiftLeft";
      case "":
        return "ShiftRight";
      case " ":
      case "":
        return "Space";
      case "":
        return "Tab";
      case "":
        return "Delete";
      case "":
        return "End";
      case "":
        return "Help";
      case "":
        return "Home";
      case "":
        return "Insert";
      case "":
        return "PageDown";
      case "":
        return "PageUp";
      case "":
        return "ArrowDown";
      case "":
        return "ArrowLeft";
      case "":
        return "ArrowRight";
      case "":
        return "ArrowUp";
      case "":
        return "Escape";
      case "":
        return "F1";
      case "":
        return "F2";
      case "":
        return "F3";
      case "":
        return "F4";
      case "":
        return "F5";
      case "":
        return "F6";
      case "":
        return "F7";
      case "":
        return "F8";
      case "":
        return "F9";
      case "":
        return "F10";
      case "":
        return "F11";
      case "":
        return "F12";
      case "":
      case "":
        return "Numpad0";
      case "":
      case "":
        return "Numpad1";
      case "":
      case "":
        return "Numpad2";
      case "":
      case "":
        return "Numpad3";
      case "":
      case "":
        return "Numpad4";
      case "":
        return "Numpad5";
      case "":
      case "":
        return "Numpad6";
      case "":
      case "":
        return "Numpad7";
      case "":
      case "":
        return "Numpad8";
      case "":
      case "":
        return "Numpad9";
      case "":
        return "NumpadAdd";
      case "":
        return "NumpadComma";
      case "":
      case "":
        return "NumpadDecimal";
      case "":
        return "NumpadDivide";
      case "":
        return "NumpadEnter";
      case "":
        return "NumpadMultiply";
      case "":
        return "NumpadSubtract";
      default:
        return;
    }
  }
  exports.getKeyCode = getKeyCode;
  function getKeyLocation(key) {
    switch (key) {
      case "":
      case "":
      case "":
      case "":
      case "":
        return 1;
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
      case "":
        return 3;
      case "":
      case "":
      case "":
      case "":
        return 2;
      default:
        return 0;
    }
  }
  exports.getKeyLocation = getKeyLocation;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/USKeyboardLayout.js
var require_USKeyboardLayout = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.KeyToKeyCode = undefined;
  exports.KeyToKeyCode = {
    "0": 48,
    "1": 49,
    "2": 50,
    "3": 51,
    "4": 52,
    "5": 53,
    "6": 54,
    "7": 55,
    "8": 56,
    "9": 57,
    Abort: 3,
    Help: 6,
    Backspace: 8,
    Tab: 9,
    Numpad5: 12,
    NumpadEnter: 13,
    Enter: 13,
    "\\r": 13,
    "\\n": 13,
    ShiftLeft: 16,
    ShiftRight: 16,
    ControlLeft: 17,
    ControlRight: 17,
    AltLeft: 18,
    AltRight: 18,
    Pause: 19,
    CapsLock: 20,
    Escape: 27,
    Convert: 28,
    NonConvert: 29,
    Space: 32,
    Numpad9: 33,
    PageUp: 33,
    Numpad3: 34,
    PageDown: 34,
    End: 35,
    Numpad1: 35,
    Home: 36,
    Numpad7: 36,
    ArrowLeft: 37,
    Numpad4: 37,
    Numpad8: 38,
    ArrowUp: 38,
    ArrowRight: 39,
    Numpad6: 39,
    Numpad2: 40,
    ArrowDown: 40,
    Select: 41,
    Open: 43,
    PrintScreen: 44,
    Insert: 45,
    Numpad0: 45,
    Delete: 46,
    NumpadDecimal: 46,
    Digit0: 48,
    Digit1: 49,
    Digit2: 50,
    Digit3: 51,
    Digit4: 52,
    Digit5: 53,
    Digit6: 54,
    Digit7: 55,
    Digit8: 56,
    Digit9: 57,
    KeyA: 65,
    KeyB: 66,
    KeyC: 67,
    KeyD: 68,
    KeyE: 69,
    KeyF: 70,
    KeyG: 71,
    KeyH: 72,
    KeyI: 73,
    KeyJ: 74,
    KeyK: 75,
    KeyL: 76,
    KeyM: 77,
    KeyN: 78,
    KeyO: 79,
    KeyP: 80,
    KeyQ: 81,
    KeyR: 82,
    KeyS: 83,
    KeyT: 84,
    KeyU: 85,
    KeyV: 86,
    KeyW: 87,
    KeyX: 88,
    KeyY: 89,
    KeyZ: 90,
    MetaLeft: 91,
    MetaRight: 92,
    ContextMenu: 93,
    NumpadMultiply: 106,
    NumpadAdd: 107,
    NumpadSubtract: 109,
    NumpadDivide: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    F13: 124,
    F14: 125,
    F15: 126,
    F16: 127,
    F17: 128,
    F18: 129,
    F19: 130,
    F20: 131,
    F21: 132,
    F22: 133,
    F23: 134,
    F24: 135,
    NumLock: 144,
    ScrollLock: 145,
    AudioVolumeMute: 173,
    AudioVolumeDown: 174,
    AudioVolumeUp: 175,
    MediaTrackNext: 176,
    MediaTrackPrevious: 177,
    MediaStop: 178,
    MediaPlayPause: 179,
    Semicolon: 186,
    Equal: 187,
    NumpadEqual: 187,
    Comma: 188,
    Minus: 189,
    Period: 190,
    Slash: 191,
    Backquote: 192,
    BracketLeft: 219,
    Backslash: 220,
    BracketRight: 221,
    Quote: 222,
    AltGraph: 225,
    Props: 247,
    Cancel: 3,
    Clear: 12,
    Shift: 16,
    Control: 17,
    Alt: 18,
    Accept: 30,
    ModeChange: 31,
    " ": 32,
    Print: 42,
    Execute: 43,
    "\\u0000": 46,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    Meta: 91,
    "*": 106,
    "+": 107,
    "-": 109,
    "/": 111,
    ";": 186,
    "=": 187,
    ",": 188,
    ".": 190,
    "`": 192,
    "[": 219,
    "\\\\": 220,
    "]": 221,
    "'": 222,
    Attn: 246,
    CrSel: 247,
    ExSel: 248,
    EraseEof: 249,
    Play: 250,
    ZoomOut: 251,
    ")": 48,
    "!": 49,
    "@": 50,
    "#": 51,
    $: 52,
    "%": 53,
    "^": 54,
    "&": 55,
    "(": 57,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    ":": 186,
    "<": 188,
    _: 189,
    ">": 190,
    "?": 191,
    "~": 192,
    "{": 219,
    "|": 220,
    "}": 221,
    '"': 222,
    Camera: 44,
    EndCall: 95,
    VolumeDown: 182,
    VolumeUp: 183
  };
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/ActionDispatcher.js
var require_ActionDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ActionDispatcher = undefined;
  var protocol_js_1 = require_protocol();
  var assert_js_1 = require_assert();
  var InputSource_js_1 = require_InputSource();
  var keyUtils_js_1 = require_keyUtils();
  var USKeyboardLayout_js_1 = require_USKeyboardLayout();
  var CALCULATE_IN_VIEW_CENTER_PT_DECL = ((i) => {
    const t = i.getClientRects()[0], e = Math.max(0, Math.min(t.x, t.x + t.width)), n = Math.min(window.innerWidth, Math.max(t.x, t.x + t.width)), h = Math.max(0, Math.min(t.y, t.y + t.height)), m = Math.min(window.innerHeight, Math.max(t.y, t.y + t.height));
    return [e + (n - e >> 1), h + (m - h >> 1)];
  }).toString();
  var IS_MAC_DECL = (() => {
    return navigator.platform.toLowerCase().includes("mac");
  }).toString();
  async function getElementCenter(context, element) {
    const sandbox = await context.getOrCreateSandbox(undefined);
    const result = await sandbox.callFunction(CALCULATE_IN_VIEW_CENTER_PT_DECL, { type: "undefined" }, [element], false, "none", {});
    if (result.type === "exception") {
      throw new protocol_js_1.NoSuchElementException(`Origin element ${element.sharedId} was not found`);
    }
    (0, assert_js_1.assert)(result.result.type === "array");
    (0, assert_js_1.assert)(result.result.value?.[0]?.type === "number");
    (0, assert_js_1.assert)(result.result.value?.[1]?.type === "number");
    const { result: { value: [{ value: x }, { value: y }] } } = result;
    return { x, y };
  }

  class ActionDispatcher {
    static isMacOS = async (context) => {
      const result = await (await context.getOrCreateSandbox(undefined)).callFunction(IS_MAC_DECL, { type: "undefined" }, [], false, "none", {});
      (0, assert_js_1.assert)(result.type !== "exception");
      (0, assert_js_1.assert)(result.result.type === "boolean");
      return result.result.value;
    };
    #tickStart = 0;
    #tickDuration = 0;
    #inputState;
    #context;
    #isMacOS;
    constructor(inputState, context, isMacOS) {
      this.#inputState = inputState;
      this.#context = context;
      this.#isMacOS = isMacOS;
    }
    async dispatchActions(optionsByTick) {
      await this.#inputState.queue.run(async () => {
        for (const options of optionsByTick) {
          await this.dispatchTickActions(options);
        }
      });
    }
    async dispatchTickActions(options) {
      this.#tickStart = performance.now();
      this.#tickDuration = 0;
      for (const { action } of options) {
        if ("duration" in action && action.duration !== undefined) {
          this.#tickDuration = Math.max(this.#tickDuration, action.duration);
        }
      }
      const promises = [
        new Promise((resolve) => setTimeout(resolve, this.#tickDuration))
      ];
      for (const option of options) {
        promises.push(this.#dispatchAction(option));
      }
      await Promise.all(promises);
    }
    async#dispatchAction({ id, action }) {
      const source = this.#inputState.get(id);
      const keyState = this.#inputState.getGlobalKeyState();
      switch (action.type) {
        case "keyDown": {
          await this.#dispatchKeyDownAction(source, action);
          this.#inputState.cancelList.push({
            id,
            action: {
              ...action,
              type: "keyUp"
            }
          });
          break;
        }
        case "keyUp": {
          await this.#dispatchKeyUpAction(source, action);
          break;
        }
        case "pause": {
          break;
        }
        case "pointerDown": {
          await this.#dispatchPointerDownAction(source, keyState, action);
          this.#inputState.cancelList.push({
            id,
            action: {
              ...action,
              type: "pointerUp"
            }
          });
          break;
        }
        case "pointerMove": {
          await this.#dispatchPointerMoveAction(source, keyState, action);
          break;
        }
        case "pointerUp": {
          await this.#dispatchPointerUpAction(source, keyState, action);
          break;
        }
        case "scroll": {
          await this.#dispatchScrollAction(source, keyState, action);
          break;
        }
      }
    }
    #dispatchPointerDownAction(source, keyState, action) {
      const { button } = action;
      if (source.pressed.has(button)) {
        return;
      }
      source.pressed.add(button);
      const { x, y, subtype: pointerType } = source;
      const { width, height, pressure, twist, tangentialPressure } = action;
      const { tiltX, tiltY } = getTilt(action);
      const { modifiers } = keyState;
      switch (pointerType) {
        case "mouse":
        case "pen":
          return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mousePressed",
            x,
            y,
            modifiers,
            button: getCdpButton(button),
            buttons: source.buttons,
            clickCount: source.setClickCount(button, new InputSource_js_1.PointerSource.ClickContext(x, y, performance.now())),
            pointerType,
            tangentialPressure,
            tiltX,
            tiltY,
            twist,
            force: pressure
          });
        case "touch":
          return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
            type: "touchStart",
            touchPoints: [
              {
                x,
                y,
                ...getRadii(width ?? 1, height ?? 1),
                tangentialPressure,
                tiltX,
                tiltY,
                twist,
                force: pressure,
                id: source.pointerId
              }
            ],
            modifiers
          });
      }
    }
    #dispatchPointerUpAction(source, keyState, action) {
      const { button } = action;
      if (!source.pressed.has(button)) {
        return;
      }
      source.pressed.delete(button);
      const { x, y, subtype: pointerType } = source;
      const { modifiers } = keyState;
      switch (pointerType) {
        case "mouse":
        case "pen":
          return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mouseReleased",
            x,
            y,
            modifiers,
            button: getCdpButton(button),
            buttons: source.buttons,
            clickCount: source.getClickCount(button),
            pointerType
          });
        case "touch":
          return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
            type: "touchEnd",
            touchPoints: [
              {
                x,
                y,
                id: source.pointerId
              }
            ],
            modifiers
          });
      }
    }
    async#dispatchPointerMoveAction(source, keyState, action) {
      const { x: startX, y: startY, subtype: pointerType } = source;
      const { width, height, pressure, twist, tangentialPressure, x: offsetX, y: offsetY, origin = "viewport", duration = this.#tickDuration } = action;
      const { tiltX, tiltY } = getTilt(action);
      const { targetX, targetY } = await this.#getCoordinateFromOrigin(origin, offsetX, offsetY, startX, startY);
      if (targetX < 0 || targetY < 0) {
        throw new protocol_js_1.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
      }
      let last;
      do {
        const ratio = duration > 0 ? (performance.now() - this.#tickStart) / duration : 1;
        last = ratio >= 1;
        let x;
        let y;
        if (last) {
          x = targetX;
          y = targetY;
        } else {
          x = Math.round(ratio * (targetX - startX) + startX);
          y = Math.round(ratio * (targetY - startY) + startY);
        }
        if (source.x !== x || source.y !== y) {
          const { modifiers } = keyState;
          switch (pointerType) {
            case "mouse":
              await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
                type: "mouseMoved",
                x,
                y,
                modifiers,
                clickCount: 0,
                button: getCdpButton(source.pressed.values().next().value ?? 5),
                buttons: source.buttons,
                pointerType,
                tangentialPressure,
                tiltX,
                tiltY,
                twist,
                force: pressure
              });
              break;
            case "pen":
              if (source.pressed.size !== 0) {
                await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
                  type: "mouseMoved",
                  x,
                  y,
                  modifiers,
                  clickCount: 0,
                  button: getCdpButton(source.pressed.values().next().value ?? 5),
                  buttons: source.buttons,
                  pointerType,
                  tangentialPressure,
                  tiltX,
                  tiltY,
                  twist,
                  force: pressure
                });
              }
              break;
            case "touch":
              if (source.pressed.size !== 0) {
                await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchTouchEvent", {
                  type: "touchMove",
                  touchPoints: [
                    {
                      x,
                      y,
                      ...getRadii(width ?? 1, height ?? 1),
                      tangentialPressure,
                      tiltX,
                      tiltY,
                      twist,
                      force: pressure,
                      id: source.pointerId
                    }
                  ],
                  modifiers
                });
              }
              break;
          }
          source.x = x;
          source.y = y;
        }
      } while (!last);
    }
    async#getCoordinateFromOrigin(origin, offsetX, offsetY, startX, startY) {
      let targetX;
      let targetY;
      switch (origin) {
        case "viewport":
          targetX = offsetX;
          targetY = offsetY;
          break;
        case "pointer":
          targetX = startX + offsetX;
          targetY = startY + offsetY;
          break;
        default: {
          const { x: posX, y: posY } = await getElementCenter(this.#context, origin.element);
          targetX = posX + offsetX;
          targetY = posY + offsetY;
          break;
        }
      }
      return { targetX, targetY };
    }
    async#dispatchScrollAction(_source, keyState, action) {
      const { deltaX: targetDeltaX, deltaY: targetDeltaY, x: offsetX, y: offsetY, origin = "viewport", duration = this.#tickDuration } = action;
      if (origin === "pointer") {
        throw new protocol_js_1.InvalidArgumentException('"pointer" origin is invalid for scrolling.');
      }
      const { targetX, targetY } = await this.#getCoordinateFromOrigin(origin, offsetX, offsetY, 0, 0);
      if (targetX < 0 || targetY < 0) {
        throw new protocol_js_1.MoveTargetOutOfBoundsException(`Cannot move beyond viewport (x: ${targetX}, y: ${targetY})`);
      }
      let currentDeltaX = 0;
      let currentDeltaY = 0;
      let last;
      do {
        const ratio = duration > 0 ? (performance.now() - this.#tickStart) / duration : 1;
        last = ratio >= 1;
        let deltaX;
        let deltaY;
        if (last) {
          deltaX = targetDeltaX - currentDeltaX;
          deltaY = targetDeltaY - currentDeltaY;
        } else {
          deltaX = Math.round(ratio * targetDeltaX - currentDeltaX);
          deltaY = Math.round(ratio * targetDeltaY - currentDeltaY);
        }
        if (deltaX !== 0 || deltaY !== 0) {
          const { modifiers } = keyState;
          await this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchMouseEvent", {
            type: "mouseWheel",
            deltaX,
            deltaY,
            x: targetX,
            y: targetY,
            modifiers
          });
          currentDeltaX += deltaX;
          currentDeltaY += deltaY;
        }
      } while (!last);
    }
    async#dispatchKeyDownAction(source, action) {
      if ([...action.value].length > 1) {
        throw new protocol_js_1.InvalidArgumentException(`Invalid key value: ${action.value}`);
      }
      const rawKey = action.value;
      const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
      const repeat = source.pressed.has(key);
      const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
      const location2 = (0, keyUtils_js_1.getKeyLocation)(rawKey);
      switch (key) {
        case "Alt":
          source.alt = true;
          break;
        case "Shift":
          source.shift = true;
          break;
        case "Control":
          source.ctrl = true;
          break;
        case "Meta":
          source.meta = true;
          break;
      }
      source.pressed.add(key);
      const { modifiers } = source;
      const unmodifiedText = getKeyEventUnmodifiedText(key, source);
      const text = getKeyEventText(code ?? "", source) ?? unmodifiedText;
      let command;
      if (this.#isMacOS && source.meta) {
        switch (code) {
          case "KeyA":
            command = "SelectAll";
            break;
          case "KeyC":
            command = "Copy";
            break;
          case "KeyV":
            command = source.shift ? "PasteAndMatchStyle" : "Paste";
            break;
          case "KeyX":
            command = "Cut";
            break;
          case "KeyZ":
            command = source.shift ? "Redo" : "Undo";
            break;
          default:
        }
      }
      const promises = [
        this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchKeyEvent", {
          type: text ? "keyDown" : "rawKeyDown",
          windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
          key,
          code,
          text,
          unmodifiedText,
          autoRepeat: repeat,
          isSystemKey: source.alt || undefined,
          location: location2 < 3 ? location2 : undefined,
          isKeypad: location2 === 3,
          modifiers,
          commands: command ? [command] : undefined
        })
      ];
      if (key === "Escape") {
        if (!source.alt && (this.#isMacOS && !source.ctrl && !source.meta || !this.#isMacOS)) {
          promises.push(this.#context.cdpTarget.cdpClient.sendCommand("Input.cancelDragging"));
        }
      }
      await Promise.all(promises);
    }
    #dispatchKeyUpAction(source, action) {
      if ([...action.value].length > 1) {
        throw new protocol_js_1.InvalidArgumentException(`Invalid key value: ${action.value}`);
      }
      const rawKey = action.value;
      const key = (0, keyUtils_js_1.getNormalizedKey)(rawKey);
      if (!source.pressed.has(key)) {
        return;
      }
      const code = (0, keyUtils_js_1.getKeyCode)(rawKey);
      const location2 = (0, keyUtils_js_1.getKeyLocation)(rawKey);
      switch (key) {
        case "Alt":
          source.alt = false;
          break;
        case "Shift":
          source.shift = false;
          break;
        case "Control":
          source.ctrl = false;
          break;
        case "Meta":
          source.meta = false;
          break;
      }
      source.pressed.delete(key);
      const { modifiers } = source;
      const unmodifiedText = getKeyEventUnmodifiedText(key, source);
      const text = getKeyEventText(code ?? "", source) ?? unmodifiedText;
      return this.#context.cdpTarget.cdpClient.sendCommand("Input.dispatchKeyEvent", {
        type: "keyUp",
        windowsVirtualKeyCode: USKeyboardLayout_js_1.KeyToKeyCode[key],
        key,
        code,
        text,
        unmodifiedText,
        location: location2 < 3 ? location2 : undefined,
        isSystemKey: source.alt || undefined,
        isKeypad: location2 === 3,
        modifiers
      });
    }
  }
  exports.ActionDispatcher = ActionDispatcher;
  var getKeyEventUnmodifiedText = (key, source) => {
    if (key === "Enter") {
      return "\r";
    }
    return [...key].length === 1 ? source.shift ? key.toLocaleUpperCase("en-US") : key : undefined;
  };
  var getKeyEventText = (code, source) => {
    if (source.ctrl) {
      switch (code) {
        case "Digit2":
          if (source.shift) {
            return "\x00";
          }
          break;
        case "KeyA":
          return "\x01";
        case "KeyB":
          return "\x02";
        case "KeyC":
          return "\x03";
        case "KeyD":
          return "\x04";
        case "KeyE":
          return "\x05";
        case "KeyF":
          return "\x06";
        case "KeyG":
          return "\x07";
        case "KeyH":
          return "\b";
        case "KeyI":
          return "\t";
        case "KeyJ":
          return `
`;
        case "KeyK":
          return "\v";
        case "KeyL":
          return "\f";
        case "KeyM":
          return "\r";
        case "KeyN":
          return "\x0E";
        case "KeyO":
          return "\x0F";
        case "KeyP":
          return "\x10";
        case "KeyQ":
          return "\x11";
        case "KeyR":
          return "\x12";
        case "KeyS":
          return "\x13";
        case "KeyT":
          return "\x14";
        case "KeyU":
          return "\x15";
        case "KeyV":
          return "\x16";
        case "KeyW":
          return "\x17";
        case "KeyX":
          return "\x18";
        case "KeyY":
          return "\x19";
        case "KeyZ":
          return "\x1A";
        case "BracketLeft":
          return "\x1B";
        case "Backslash":
          return "\x1C";
        case "BracketRight":
          return "\x1D";
        case "Digit6":
          if (source.shift) {
            return "\x1E";
          }
          break;
        case "Minus":
          return "\x1F";
      }
      return "";
    }
    if (source.alt) {
      return "";
    }
    return;
  };
  function getCdpButton(button) {
    switch (button) {
      case 0:
        return "left";
      case 1:
        return "middle";
      case 2:
        return "right";
      case 3:
        return "back";
      case 4:
        return "forward";
      default:
        return "none";
    }
  }
  function getTilt(action) {
    const altitudeAngle = action.altitudeAngle ?? 0;
    const azimuthAngle = action.azimuthAngle ?? 0;
    let tiltXRadians = 0;
    let tiltYRadians = 0;
    if (altitudeAngle === 0) {
      if (azimuthAngle === 0 || azimuthAngle === 2 * Math.PI) {
        tiltXRadians = Math.PI / 2;
      }
      if (azimuthAngle === Math.PI / 2) {
        tiltYRadians = Math.PI / 2;
      }
      if (azimuthAngle === Math.PI) {
        tiltXRadians = -Math.PI / 2;
      }
      if (azimuthAngle === 3 * Math.PI / 2) {
        tiltYRadians = -Math.PI / 2;
      }
      if (azimuthAngle > 0 && azimuthAngle < Math.PI / 2) {
        tiltXRadians = Math.PI / 2;
        tiltYRadians = Math.PI / 2;
      }
      if (azimuthAngle > Math.PI / 2 && azimuthAngle < Math.PI) {
        tiltXRadians = -Math.PI / 2;
        tiltYRadians = Math.PI / 2;
      }
      if (azimuthAngle > Math.PI && azimuthAngle < 3 * Math.PI / 2) {
        tiltXRadians = -Math.PI / 2;
        tiltYRadians = -Math.PI / 2;
      }
      if (azimuthAngle > 3 * Math.PI / 2 && azimuthAngle < 2 * Math.PI) {
        tiltXRadians = Math.PI / 2;
        tiltYRadians = -Math.PI / 2;
      }
    }
    if (altitudeAngle !== 0) {
      const tanAlt = Math.tan(altitudeAngle);
      tiltXRadians = Math.atan(Math.cos(azimuthAngle) / tanAlt);
      tiltYRadians = Math.atan(Math.sin(azimuthAngle) / tanAlt);
    }
    const factor = 180 / Math.PI;
    return {
      tiltX: Math.round(tiltXRadians * factor),
      tiltY: Math.round(tiltYRadians * factor)
    };
  }
  function getRadii(width, height) {
    return {
      radiusX: width ? width / 2 : 0.5,
      radiusY: height ? height / 2 : 0.5
    };
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/Mutex.js
var require_Mutex = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Mutex = undefined;

  class Mutex {
    #locked = false;
    #acquirers = [];
    acquire() {
      const state = { resolved: false };
      if (this.#locked) {
        return new Promise((resolve) => {
          this.#acquirers.push(() => resolve(this.#release.bind(this, state)));
        });
      }
      this.#locked = true;
      return Promise.resolve(this.#release.bind(this, state));
    }
    #release(state) {
      if (state.resolved) {
        throw new Error("Cannot release more than once.");
      }
      state.resolved = true;
      const resolve = this.#acquirers.shift();
      if (!resolve) {
        this.#locked = false;
        return;
      }
      resolve();
    }
    async run(action) {
      const release = await this.acquire();
      try {
        const result = await action();
        return result;
      } finally {
        release();
      }
    }
  }
  exports.Mutex = Mutex;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputState.js
var require_InputState = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.InputState = undefined;
  var protocol_js_1 = require_protocol();
  var Mutex_js_1 = require_Mutex();
  var InputSource_js_1 = require_InputSource();

  class InputState {
    cancelList = [];
    #sources = new Map;
    #mutex = new Mutex_js_1.Mutex;
    getOrCreate(id, type, subtype) {
      let source = this.#sources.get(id);
      if (!source) {
        switch (type) {
          case "none":
            source = new InputSource_js_1.NoneSource;
            break;
          case "key":
            source = new InputSource_js_1.KeySource;
            break;
          case "pointer": {
            let pointerId = subtype === "mouse" ? 0 : 2;
            const pointerIds = new Set;
            for (const [, source2] of this.#sources) {
              if (source2.type === "pointer") {
                pointerIds.add(source2.pointerId);
              }
            }
            while (pointerIds.has(pointerId)) {
              ++pointerId;
            }
            source = new InputSource_js_1.PointerSource(pointerId, subtype);
            break;
          }
          case "wheel":
            source = new InputSource_js_1.WheelSource;
            break;
          default:
            throw new protocol_js_1.InvalidArgumentException(`Expected "${"none"}", "${"key"}", "${"pointer"}", or "${"wheel"}". Found unknown source type ${type}.`);
        }
        this.#sources.set(id, source);
        return source;
      }
      if (source.type !== type) {
        throw new protocol_js_1.InvalidArgumentException(`Input source type of ${id} is ${source.type}, but received ${type}.`);
      }
      return source;
    }
    get(id) {
      const source = this.#sources.get(id);
      if (!source) {
        throw new protocol_js_1.UnknownErrorException(`Internal error.`);
      }
      return source;
    }
    getGlobalKeyState() {
      const state = new InputSource_js_1.KeySource;
      for (const [, source] of this.#sources) {
        if (source.type !== "key") {
          continue;
        }
        for (const pressed of source.pressed) {
          state.pressed.add(pressed);
        }
        state.alt ||= source.alt;
        state.ctrl ||= source.ctrl;
        state.meta ||= source.meta;
        state.shift ||= source.shift;
      }
      return state;
    }
    get queue() {
      return this.#mutex;
    }
  }
  exports.InputState = InputState;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputStateManager.js
var require_InputStateManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.InputStateManager = undefined;
  var assert_js_1 = require_assert();
  var InputState_js_1 = require_InputState();

  class InputStateManager extends WeakMap {
    get(context) {
      (0, assert_js_1.assert)(context.isTopLevelContext());
      if (!this.has(context)) {
        this.set(context, new InputState_js_1.InputState);
      }
      return super.get(context);
    }
  }
  exports.InputStateManager = InputStateManager;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/input/InputProcessor.js
var require_InputProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.InputProcessor = undefined;
  var protocol_js_1 = require_protocol();
  var ActionDispatcher_js_1 = require_ActionDispatcher();
  var InputStateManager_js_1 = require_InputStateManager();

  class InputProcessor {
    #browsingContextStorage;
    #inputStateManager = new InputStateManager_js_1.InputStateManager;
    constructor(browsingContextStorage) {
      this.#browsingContextStorage = browsingContextStorage;
    }
    async performActions(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      const inputState = this.#inputStateManager.get(context.top);
      const actionsByTick = this.#getActionsByTick(params, inputState);
      const dispatcher = new ActionDispatcher_js_1.ActionDispatcher(inputState, context, await ActionDispatcher_js_1.ActionDispatcher.isMacOS(context).catch(() => false));
      await dispatcher.dispatchActions(actionsByTick);
      return {};
    }
    async releaseActions(params) {
      const context = this.#browsingContextStorage.getContext(params.context);
      const topContext = context.top;
      const inputState = this.#inputStateManager.get(topContext);
      const dispatcher = new ActionDispatcher_js_1.ActionDispatcher(inputState, context, await ActionDispatcher_js_1.ActionDispatcher.isMacOS(context).catch(() => false));
      await dispatcher.dispatchTickActions(inputState.cancelList.reverse());
      this.#inputStateManager.delete(topContext);
      return {};
    }
    #getActionsByTick(params, inputState) {
      const actionsByTick = [];
      for (const action of params.actions) {
        switch (action.type) {
          case "pointer": {
            action.parameters ??= { pointerType: "mouse" };
            action.parameters.pointerType ??= "mouse";
            const source = inputState.getOrCreate(action.id, "pointer", action.parameters.pointerType);
            if (source.subtype !== action.parameters.pointerType) {
              throw new protocol_js_1.InvalidArgumentException(`Expected input source ${action.id} to be ${source.subtype}; got ${action.parameters.pointerType}.`);
            }
            break;
          }
          default:
            inputState.getOrCreate(action.id, action.type);
        }
        const actions = action.actions.map((item) => ({
          id: action.id,
          action: item
        }));
        for (let i = 0;i < actions.length; i++) {
          if (actionsByTick.length === i) {
            actionsByTick.push([]);
          }
          actionsByTick[i].push(actions[i]);
        }
      }
      return actionsByTick;
    }
  }
  exports.InputProcessor = InputProcessor;
});

// node_modules/urlpattern-polyfill/dist/urlpattern.cjs
var require_urlpattern = __commonJS((exports, module) => {
  var M = Object.defineProperty;
  var Se = Object.getOwnPropertyDescriptor;
  var ke = Object.getOwnPropertyNames;
  var Ee = Object.prototype.hasOwnProperty;
  var Re = (e, t) => {
    for (var r in t)
      M(e, r, { get: t[r], enumerable: true });
  };
  var ye = (e, t, r, n) => {
    if (t && typeof t == "object" || typeof t == "function")
      for (let a of ke(t))
        !Ee.call(e, a) && a !== r && M(e, a, { get: () => t[a], enumerable: !(n = Se(t, a)) || n.enumerable });
    return e;
  };
  var Oe = (e) => ye(M({}, "__esModule", { value: true }), e);
  var Ne = {};
  Re(Ne, { URLPattern: () => Y });
  module.exports = Oe(Ne);
  var k = class {
    type = 3;
    name = "";
    prefix = "";
    value = "";
    suffix = "";
    modifier = 3;
    constructor(t, r, n, a, c, l) {
      this.type = t, this.name = r, this.prefix = n, this.value = a, this.suffix = c, this.modifier = l;
    }
    hasCustomName() {
      return this.name !== "" && typeof this.name != "number";
    }
  };
  var Te = /[$_\p{ID_Start}]/u;
  var Ae = /[$_\u200C\u200D\p{ID_Continue}]/u;
  var v = ".*";
  function we(e, t) {
    return (t ? /^[\x00-\xFF]*$/ : /^[\x00-\x7F]*$/).test(e);
  }
  function D(e, t = false) {
    let r = [], n = 0;
    for (;n < e.length; ) {
      let a = e[n], c = function(l) {
        if (!t)
          throw new TypeError(l);
        r.push({ type: "INVALID_CHAR", index: n, value: e[n++] });
      };
      if (a === "*") {
        r.push({ type: "ASTERISK", index: n, value: e[n++] });
        continue;
      }
      if (a === "+" || a === "?") {
        r.push({ type: "OTHER_MODIFIER", index: n, value: e[n++] });
        continue;
      }
      if (a === "\\") {
        r.push({ type: "ESCAPED_CHAR", index: n++, value: e[n++] });
        continue;
      }
      if (a === "{") {
        r.push({ type: "OPEN", index: n, value: e[n++] });
        continue;
      }
      if (a === "}") {
        r.push({ type: "CLOSE", index: n, value: e[n++] });
        continue;
      }
      if (a === ":") {
        let l = "", s = n + 1;
        for (;s < e.length; ) {
          let i = e.substr(s, 1);
          if (s === n + 1 && Te.test(i) || s !== n + 1 && Ae.test(i)) {
            l += e[s++];
            continue;
          }
          break;
        }
        if (!l) {
          c(`Missing parameter name at ${n}`);
          continue;
        }
        r.push({ type: "NAME", index: n, value: l }), n = s;
        continue;
      }
      if (a === "(") {
        let l = 1, s = "", i = n + 1, o = false;
        if (e[i] === "?") {
          c(`Pattern cannot start with "?" at ${i}`);
          continue;
        }
        for (;i < e.length; ) {
          if (!we(e[i], false)) {
            c(`Invalid character '${e[i]}' at ${i}.`), o = true;
            break;
          }
          if (e[i] === "\\") {
            s += e[i++] + e[i++];
            continue;
          }
          if (e[i] === ")") {
            if (l--, l === 0) {
              i++;
              break;
            }
          } else if (e[i] === "(" && (l++, e[i + 1] !== "?")) {
            c(`Capturing groups are not allowed at ${i}`), o = true;
            break;
          }
          s += e[i++];
        }
        if (o)
          continue;
        if (l) {
          c(`Unbalanced pattern at ${n}`);
          continue;
        }
        if (!s) {
          c(`Missing pattern at ${n}`);
          continue;
        }
        r.push({ type: "REGEX", index: n, value: s }), n = i;
        continue;
      }
      r.push({ type: "CHAR", index: n, value: e[n++] });
    }
    return r.push({ type: "END", index: n, value: "" }), r;
  }
  function F(e, t = {}) {
    let r = D(e);
    t.delimiter ??= "/#?", t.prefixes ??= "./";
    let n = `[^${x(t.delimiter)}]+?`, a = [], c = 0, l = 0, s = "", i = new Set, o = (f) => {
      if (l < r.length && r[l].type === f)
        return r[l++].value;
    }, h = () => o("OTHER_MODIFIER") ?? o("ASTERISK"), p = (f) => {
      let u = o(f);
      if (u !== undefined)
        return u;
      let { type: d, index: T } = r[l];
      throw new TypeError(`Unexpected ${d} at ${T}, expected ${f}`);
    }, O = () => {
      let f = "", u;
      for (;u = o("CHAR") ?? o("ESCAPED_CHAR"); )
        f += u;
      return f;
    }, be = (f) => f, L = t.encodePart || be, I = "", H = (f) => {
      I += f;
    }, $ = () => {
      I.length && (a.push(new k(3, "", "", L(I), "", 3)), I = "");
    }, X = (f, u, d, T, Z) => {
      let g = 3;
      switch (Z) {
        case "?":
          g = 1;
          break;
        case "*":
          g = 0;
          break;
        case "+":
          g = 2;
          break;
      }
      if (!u && !d && g === 3) {
        H(f);
        return;
      }
      if ($(), !u && !d) {
        if (!f)
          return;
        a.push(new k(3, "", "", L(f), "", g));
        return;
      }
      let m;
      d ? d === "*" ? m = v : m = d : m = n;
      let R = 2;
      m === n ? (R = 1, m = "") : m === v && (R = 0, m = "");
      let S;
      if (u ? S = u : d && (S = c++), i.has(S))
        throw new TypeError(`Duplicate name '${S}'.`);
      i.add(S), a.push(new k(R, S, L(f), m, L(T), g));
    };
    for (;l < r.length; ) {
      let f = o("CHAR"), u = o("NAME"), d = o("REGEX");
      if (!u && !d && (d = o("ASTERISK")), u || d) {
        let g = f ?? "";
        t.prefixes.indexOf(g) === -1 && (H(g), g = ""), $();
        let m = h();
        X(g, u, d, "", m);
        continue;
      }
      let T = f ?? o("ESCAPED_CHAR");
      if (T) {
        H(T);
        continue;
      }
      if (o("OPEN")) {
        let g = O(), m = o("NAME"), R = o("REGEX");
        !m && !R && (R = o("ASTERISK"));
        let S = O();
        p("CLOSE");
        let Pe = h();
        X(g, m, R, S, Pe);
        continue;
      }
      $(), p("END");
    }
    return a;
  }
  function x(e) {
    return e.replace(/([.+*?^${}()[\]|/\\])/g, "\\$1");
  }
  function B(e) {
    return e && e.ignoreCase ? "ui" : "u";
  }
  function q(e, t, r) {
    return W(F(e, r), t, r);
  }
  function y(e) {
    switch (e) {
      case 0:
        return "*";
      case 1:
        return "?";
      case 2:
        return "+";
      case 3:
        return "";
    }
  }
  function W(e, t, r = {}) {
    r.delimiter ??= "/#?", r.prefixes ??= "./", r.sensitive ??= false, r.strict ??= false, r.end ??= true, r.start ??= true, r.endsWith = "";
    let n = r.start ? "^" : "";
    for (let s of e) {
      if (s.type === 3) {
        s.modifier === 3 ? n += x(s.value) : n += `(?:${x(s.value)})${y(s.modifier)}`;
        continue;
      }
      t && t.push(s.name);
      let i = `[^${x(r.delimiter)}]+?`, o = s.value;
      if (s.type === 1 ? o = i : s.type === 0 && (o = v), !s.prefix.length && !s.suffix.length) {
        s.modifier === 3 || s.modifier === 1 ? n += `(${o})${y(s.modifier)}` : n += `((?:${o})${y(s.modifier)})`;
        continue;
      }
      if (s.modifier === 3 || s.modifier === 1) {
        n += `(?:${x(s.prefix)}(${o})${x(s.suffix)})`, n += y(s.modifier);
        continue;
      }
      n += `(?:${x(s.prefix)}`, n += `((?:${o})(?:`, n += x(s.suffix), n += x(s.prefix), n += `(?:${o}))*)${x(s.suffix)})`, s.modifier === 0 && (n += "?");
    }
    let a = `[${x(r.endsWith)}]|$`, c = `[${x(r.delimiter)}]`;
    if (r.end)
      return r.strict || (n += `${c}?`), r.endsWith.length ? n += `(?=${a})` : n += "$", new RegExp(n, B(r));
    r.strict || (n += `(?:${c}(?=${a}))?`);
    let l = false;
    if (e.length) {
      let s = e[e.length - 1];
      s.type === 3 && s.modifier === 3 && (l = r.delimiter.indexOf(s) > -1);
    }
    return l || (n += `(?=${c}|${a})`), new RegExp(n, B(r));
  }
  var b = { delimiter: "", prefixes: "", sensitive: true, strict: true };
  var J = { delimiter: ".", prefixes: "", sensitive: true, strict: true };
  var Q = { delimiter: "/", prefixes: "/", sensitive: true, strict: true };
  function ee(e, t) {
    return e.length ? e[0] === "/" ? true : !t || e.length < 2 ? false : (e[0] == "\\" || e[0] == "{") && e[1] == "/" : false;
  }
  function te(e, t) {
    return e.startsWith(t) ? e.substring(t.length, e.length) : e;
  }
  function Ce(e, t) {
    return e.endsWith(t) ? e.substr(0, e.length - t.length) : e;
  }
  function _(e) {
    return !e || e.length < 2 ? false : e[0] === "[" || (e[0] === "\\" || e[0] === "{") && e[1] === "[";
  }
  var re = ["ftp", "file", "http", "https", "ws", "wss"];
  function N(e) {
    if (!e)
      return true;
    for (let t of re)
      if (e.test(t))
        return true;
    return false;
  }
  function ne(e, t) {
    if (e = te(e, "#"), t || e === "")
      return e;
    let r = new URL("https://example.com");
    return r.hash = e, r.hash ? r.hash.substring(1, r.hash.length) : "";
  }
  function se(e, t) {
    if (e = te(e, "?"), t || e === "")
      return e;
    let r = new URL("https://example.com");
    return r.search = e, r.search ? r.search.substring(1, r.search.length) : "";
  }
  function ie(e, t) {
    return t || e === "" ? e : _(e) ? K(e) : j(e);
  }
  function ae(e, t) {
    if (t || e === "")
      return e;
    let r = new URL("https://example.com");
    return r.password = e, r.password;
  }
  function oe(e, t) {
    if (t || e === "")
      return e;
    let r = new URL("https://example.com");
    return r.username = e, r.username;
  }
  function ce(e, t, r) {
    if (r || e === "")
      return e;
    if (t && !re.includes(t))
      return new URL(`${t}:${e}`).pathname;
    let n = e[0] == "/";
    return e = new URL(n ? e : "/-" + e, "https://example.com").pathname, n || (e = e.substring(2, e.length)), e;
  }
  function le(e, t, r) {
    return z2(t) === e && (e = ""), r || e === "" ? e : V(e);
  }
  function he(e, t) {
    return e = Ce(e, ":"), t || e === "" ? e : A(e);
  }
  function z2(e) {
    switch (e) {
      case "ws":
      case "http":
        return "80";
      case "wws":
      case "https":
        return "443";
      case "ftp":
        return "21";
      default:
        return "";
    }
  }
  function A(e) {
    if (e === "")
      return e;
    if (/^[-+.A-Za-z0-9]*$/.test(e))
      return e.toLowerCase();
    throw new TypeError(`Invalid protocol '${e}'.`);
  }
  function fe(e) {
    if (e === "")
      return e;
    let t = new URL("https://example.com");
    return t.username = e, t.username;
  }
  function ue(e) {
    if (e === "")
      return e;
    let t = new URL("https://example.com");
    return t.password = e, t.password;
  }
  function j(e) {
    if (e === "")
      return e;
    if (/[\t\n\r #%/:<>?@[\]^\\|]/g.test(e))
      throw new TypeError(`Invalid hostname '${e}'`);
    let t = new URL("https://example.com");
    return t.hostname = e, t.hostname;
  }
  function K(e) {
    if (e === "")
      return e;
    if (/[^0-9a-fA-F[\]:]/g.test(e))
      throw new TypeError(`Invalid IPv6 hostname '${e}'`);
    return e.toLowerCase();
  }
  function V(e) {
    if (e === "" || /^[0-9]*$/.test(e) && parseInt(e) <= 65535)
      return e;
    throw new TypeError(`Invalid port '${e}'.`);
  }
  function pe(e) {
    if (e === "")
      return e;
    let t = new URL("https://example.com");
    return t.pathname = e[0] !== "/" ? "/-" + e : e, e[0] !== "/" ? t.pathname.substring(2, t.pathname.length) : t.pathname;
  }
  function de(e) {
    return e === "" ? e : new URL(`data:${e}`).pathname;
  }
  function ge(e) {
    if (e === "")
      return e;
    let t = new URL("https://example.com");
    return t.search = e, t.search.substring(1, t.search.length);
  }
  function me(e) {
    if (e === "")
      return e;
    let t = new URL("https://example.com");
    return t.hash = e, t.hash.substring(1, t.hash.length);
  }
  var U = class {
    #i;
    #n = [];
    #t = {};
    #e = 0;
    #s = 1;
    #u = 0;
    #c = 0;
    #p = 0;
    #d = 0;
    #g = false;
    constructor(t) {
      this.#i = t;
    }
    get result() {
      return this.#t;
    }
    parse() {
      for (this.#n = D(this.#i, true);this.#e < this.#n.length; this.#e += this.#s) {
        if (this.#s = 1, this.#n[this.#e].type === "END") {
          if (this.#c === 0) {
            this.#P(), this.#l() ? this.#r(9, 1) : this.#h() ? (this.#r(8, 1), this.#t.hash = "") : (this.#r(7, 0), this.#t.search = "", this.#t.hash = "");
            continue;
          } else if (this.#c === 2) {
            this.#f(5);
            continue;
          }
          this.#r(10, 0);
          break;
        }
        if (this.#p > 0)
          if (this.#T())
            this.#p -= 1;
          else
            continue;
        if (this.#O()) {
          this.#p += 1;
          continue;
        }
        switch (this.#c) {
          case 0:
            this.#S() && (this.#t.username = "", this.#t.password = "", this.#t.hostname = "", this.#t.port = "", this.#t.pathname = "", this.#t.search = "", this.#t.hash = "", this.#f(1));
            break;
          case 1:
            if (this.#S()) {
              this.#C();
              let t = 7, r = 1;
              this.#g && (this.#t.pathname = "/"), this.#E() ? (t = 2, r = 3) : this.#g && (t = 2), this.#r(t, r);
            }
            break;
          case 2:
            this.#x() ? this.#f(3) : (this.#b() || this.#h() || this.#l()) && this.#f(5);
            break;
          case 3:
            this.#R() ? this.#r(4, 1) : this.#x() && this.#r(5, 1);
            break;
          case 4:
            this.#x() && this.#r(5, 1);
            break;
          case 5:
            this.#A() ? this.#d += 1 : this.#w() && (this.#d -= 1), this.#y() && !this.#d ? this.#r(6, 1) : this.#b() ? this.#r(7, 0) : this.#h() ? this.#r(8, 1) : this.#l() && this.#r(9, 1);
            break;
          case 6:
            this.#b() ? this.#r(7, 0) : this.#h() ? this.#r(8, 1) : this.#l() && this.#r(9, 1);
            break;
          case 7:
            this.#h() ? this.#r(8, 1) : this.#l() && this.#r(9, 1);
            break;
          case 8:
            this.#l() && this.#r(9, 1);
            break;
          case 9:
            break;
          case 10:
            break;
        }
      }
    }
    #r(t, r) {
      switch (this.#c) {
        case 0:
          break;
        case 1:
          this.#t.protocol = this.#o();
          break;
        case 2:
          break;
        case 3:
          this.#t.username = this.#o();
          break;
        case 4:
          this.#t.password = this.#o();
          break;
        case 5:
          this.#t.hostname = this.#o();
          break;
        case 6:
          this.#t.port = this.#o();
          break;
        case 7:
          this.#t.pathname = this.#o();
          break;
        case 8:
          this.#t.search = this.#o();
          break;
        case 9:
          this.#t.hash = this.#o();
          break;
        case 10:
          break;
      }
      this.#k(t, r);
    }
    #k(t, r) {
      this.#c = t, this.#u = this.#e + r, this.#e += r, this.#s = 0;
    }
    #P() {
      this.#e = this.#u, this.#s = 0;
    }
    #f(t) {
      this.#P(), this.#c = t;
    }
    #m(t) {
      return t < 0 && (t = this.#n.length - t), t < this.#n.length ? this.#n[t] : this.#n[this.#n.length - 1];
    }
    #a(t, r) {
      let n = this.#m(t);
      return n.value === r && (n.type === "CHAR" || n.type === "ESCAPED_CHAR" || n.type === "INVALID_CHAR");
    }
    #S() {
      return this.#a(this.#e, ":");
    }
    #E() {
      return this.#a(this.#e + 1, "/") && this.#a(this.#e + 2, "/");
    }
    #x() {
      return this.#a(this.#e, "@");
    }
    #R() {
      return this.#a(this.#e, ":");
    }
    #y() {
      return this.#a(this.#e, ":");
    }
    #b() {
      return this.#a(this.#e, "/");
    }
    #h() {
      if (this.#a(this.#e, "?"))
        return true;
      if (this.#n[this.#e].value !== "?")
        return false;
      let t = this.#m(this.#e - 1);
      return t.type !== "NAME" && t.type !== "REGEX" && t.type !== "CLOSE" && t.type !== "ASTERISK";
    }
    #l() {
      return this.#a(this.#e, "#");
    }
    #O() {
      return this.#n[this.#e].type == "OPEN";
    }
    #T() {
      return this.#n[this.#e].type == "CLOSE";
    }
    #A() {
      return this.#a(this.#e, "[");
    }
    #w() {
      return this.#a(this.#e, "]");
    }
    #o() {
      let t = this.#n[this.#e], r = this.#m(this.#u).index;
      return this.#i.substring(r, t.index);
    }
    #C() {
      let t = {};
      Object.assign(t, b), t.encodePart = A;
      let r = q(this.#o(), undefined, t);
      this.#g = N(r);
    }
  };
  var G = ["protocol", "username", "password", "hostname", "port", "pathname", "search", "hash"];
  var E = "*";
  function xe(e, t) {
    if (typeof e != "string")
      throw new TypeError("parameter 1 is not of type 'string'.");
    let r = new URL(e, t);
    return { protocol: r.protocol.substring(0, r.protocol.length - 1), username: r.username, password: r.password, hostname: r.hostname, port: r.port, pathname: r.pathname, search: r.search !== "" ? r.search.substring(1, r.search.length) : undefined, hash: r.hash !== "" ? r.hash.substring(1, r.hash.length) : undefined };
  }
  function P(e, t) {
    return t ? C(e) : e;
  }
  function w(e, t, r) {
    let n;
    if (typeof t.baseURL == "string")
      try {
        n = new URL(t.baseURL), e.protocol = P(n.protocol.substring(0, n.protocol.length - 1), r), e.username = P(n.username, r), e.password = P(n.password, r), e.hostname = P(n.hostname, r), e.port = P(n.port, r), e.pathname = P(n.pathname, r), e.search = P(n.search.substring(1, n.search.length), r), e.hash = P(n.hash.substring(1, n.hash.length), r);
      } catch {
        throw new TypeError(`invalid baseURL '${t.baseURL}'.`);
      }
    if (typeof t.protocol == "string" && (e.protocol = he(t.protocol, r)), typeof t.username == "string" && (e.username = oe(t.username, r)), typeof t.password == "string" && (e.password = ae(t.password, r)), typeof t.hostname == "string" && (e.hostname = ie(t.hostname, r)), typeof t.port == "string" && (e.port = le(t.port, e.protocol, r)), typeof t.pathname == "string") {
      if (e.pathname = t.pathname, n && !ee(e.pathname, r)) {
        let a = n.pathname.lastIndexOf("/");
        a >= 0 && (e.pathname = P(n.pathname.substring(0, a + 1), r) + e.pathname);
      }
      e.pathname = ce(e.pathname, e.protocol, r);
    }
    return typeof t.search == "string" && (e.search = se(t.search, r)), typeof t.hash == "string" && (e.hash = ne(t.hash, r)), e;
  }
  function C(e) {
    return e.replace(/([+*?:{}()\\])/g, "\\$1");
  }
  function Le(e) {
    return e.replace(/([.+*?^${}()[\]|/\\])/g, "\\$1");
  }
  function Ie(e, t) {
    t.delimiter ??= "/#?", t.prefixes ??= "./", t.sensitive ??= false, t.strict ??= false, t.end ??= true, t.start ??= true, t.endsWith = "";
    let r = ".*", n = `[^${Le(t.delimiter)}]+?`, a = /[$_\u200C\u200D\p{ID_Continue}]/u, c = "";
    for (let l = 0;l < e.length; ++l) {
      let s = e[l];
      if (s.type === 3) {
        if (s.modifier === 3) {
          c += C(s.value);
          continue;
        }
        c += `{${C(s.value)}}${y(s.modifier)}`;
        continue;
      }
      let i = s.hasCustomName(), o = !!s.suffix.length || !!s.prefix.length && (s.prefix.length !== 1 || !t.prefixes.includes(s.prefix)), h = l > 0 ? e[l - 1] : null, p = l < e.length - 1 ? e[l + 1] : null;
      if (!o && i && s.type === 1 && s.modifier === 3 && p && !p.prefix.length && !p.suffix.length)
        if (p.type === 3) {
          let O = p.value.length > 0 ? p.value[0] : "";
          o = a.test(O);
        } else
          o = !p.hasCustomName();
      if (!o && !s.prefix.length && h && h.type === 3) {
        let O = h.value[h.value.length - 1];
        o = t.prefixes.includes(O);
      }
      o && (c += "{"), c += C(s.prefix), i && (c += `:${s.name}`), s.type === 2 ? c += `(${s.value})` : s.type === 1 ? i || (c += `(${n})`) : s.type === 0 && (!i && (!h || h.type === 3 || h.modifier !== 3 || o || s.prefix !== "") ? c += "*" : c += `(${r})`), s.type === 1 && i && s.suffix.length && a.test(s.suffix[0]) && (c += "\\"), c += C(s.suffix), o && (c += "}"), s.modifier !== 3 && (c += y(s.modifier));
    }
    return c;
  }
  var Y = class {
    #i;
    #n = {};
    #t = {};
    #e = {};
    #s = {};
    constructor(t = {}, r, n) {
      try {
        let a;
        if (typeof r == "string" ? a = r : n = r, typeof t == "string") {
          let i = new U(t);
          if (i.parse(), t = i.result, a === undefined && typeof t.protocol != "string")
            throw new TypeError("A base URL must be provided for a relative constructor string.");
          t.baseURL = a;
        } else {
          if (!t || typeof t != "object")
            throw new TypeError("parameter 1 is not of type 'string' and cannot convert to dictionary.");
          if (a)
            throw new TypeError("parameter 1 is not of type 'string'.");
        }
        typeof n > "u" && (n = { ignoreCase: false });
        let c = { ignoreCase: n.ignoreCase === true }, l = { pathname: E, protocol: E, username: E, password: E, hostname: E, port: E, search: E, hash: E };
        this.#i = w(l, t, true), z2(this.#i.protocol) === this.#i.port && (this.#i.port = "");
        let s;
        for (s of G) {
          if (!(s in this.#i))
            continue;
          let i = {}, o = this.#i[s];
          switch (this.#t[s] = [], s) {
            case "protocol":
              Object.assign(i, b), i.encodePart = A;
              break;
            case "username":
              Object.assign(i, b), i.encodePart = fe;
              break;
            case "password":
              Object.assign(i, b), i.encodePart = ue;
              break;
            case "hostname":
              Object.assign(i, J), _(o) ? i.encodePart = K : i.encodePart = j;
              break;
            case "port":
              Object.assign(i, b), i.encodePart = V;
              break;
            case "pathname":
              N(this.#n.protocol) ? (Object.assign(i, Q, c), i.encodePart = pe) : (Object.assign(i, b, c), i.encodePart = de);
              break;
            case "search":
              Object.assign(i, b, c), i.encodePart = ge;
              break;
            case "hash":
              Object.assign(i, b, c), i.encodePart = me;
              break;
          }
          try {
            this.#s[s] = F(o, i), this.#n[s] = W(this.#s[s], this.#t[s], i), this.#e[s] = Ie(this.#s[s], i);
          } catch {
            throw new TypeError(`invalid ${s} pattern '${this.#i[s]}'.`);
          }
        }
      } catch (a) {
        throw new TypeError(`Failed to construct 'URLPattern': ${a.message}`);
      }
    }
    test(t = {}, r) {
      let n = { pathname: "", protocol: "", username: "", password: "", hostname: "", port: "", search: "", hash: "" };
      if (typeof t != "string" && r)
        throw new TypeError("parameter 1 is not of type 'string'.");
      if (typeof t > "u")
        return false;
      try {
        typeof t == "object" ? n = w(n, t, false) : n = w(n, xe(t, r), false);
      } catch {
        return false;
      }
      let a;
      for (a of G)
        if (!this.#n[a].exec(n[a]))
          return false;
      return true;
    }
    exec(t = {}, r) {
      let n = { pathname: "", protocol: "", username: "", password: "", hostname: "", port: "", search: "", hash: "" };
      if (typeof t != "string" && r)
        throw new TypeError("parameter 1 is not of type 'string'.");
      if (typeof t > "u")
        return;
      try {
        typeof t == "object" ? n = w(n, t, false) : n = w(n, xe(t, r), false);
      } catch {
        return null;
      }
      let a = {};
      r ? a.inputs = [t, r] : a.inputs = [t];
      let c;
      for (c of G) {
        let l = this.#n[c].exec(n[c]);
        if (!l)
          return null;
        let s = {};
        for (let [i, o] of this.#t[c].entries())
          if (typeof o == "string" || typeof o == "number") {
            let h = l[i + 1];
            s[o] = h;
          }
        a[c] = { input: n[c] ?? "", groups: s };
      }
      return a;
    }
    static compareComponent(t, r, n) {
      let a = (i, o) => {
        for (let h of ["type", "modifier", "prefix", "value", "suffix"]) {
          if (i[h] < o[h])
            return -1;
          if (i[h] === o[h])
            continue;
          return 1;
        }
        return 0;
      }, c = new k(3, "", "", "", "", 3), l = new k(0, "", "", "", "", 3), s = (i, o) => {
        let h = 0;
        for (;h < Math.min(i.length, o.length); ++h) {
          let p = a(i[h], o[h]);
          if (p)
            return p;
        }
        return i.length === o.length ? 0 : a(i[h] ?? c, o[h] ?? c);
      };
      return !r.#e[t] && !n.#e[t] ? 0 : r.#e[t] && !n.#e[t] ? s(r.#s[t], [l]) : !r.#e[t] && n.#e[t] ? s([l], n.#s[t]) : s(r.#s[t], n.#s[t]);
    }
    get protocol() {
      return this.#e.protocol;
    }
    get username() {
      return this.#e.username;
    }
    get password() {
      return this.#e.password;
    }
    get hostname() {
      return this.#e.hostname;
    }
    get port() {
      return this.#e.port;
    }
    get pathname() {
      return this.#e.pathname;
    }
    get search() {
      return this.#e.search;
    }
    get hash() {
      return this.#e.hash;
    }
  };
});

// node_modules/urlpattern-polyfill/index.cjs
var require_urlpattern_polyfill = __commonJS((exports, module) => {
  var { URLPattern } = require_urlpattern();
  module.exports = { URLPattern };
  if (!globalThis.URLPattern) {
    globalThis.URLPattern = URLPattern;
  }
});

// node_modules/chromium-bidi/lib/cjs/utils/UrlPattern.js
var require_UrlPattern = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.URLPattern = undefined;
  var urlpattern_polyfill_1 = require_urlpattern_polyfill();
  Object.defineProperty(exports, "URLPattern", { enumerable: true, get: function() {
    return urlpattern_polyfill_1.URLPattern;
  } });
  if ("URLPattern" in globalThis) {
    urlpattern_polyfill_1.URLPattern = globalThis.URLPattern;
  }
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/NetworkStorage.js
var require_NetworkStorage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.NetworkStorage = undefined;
  var protocol_js_1 = require_protocol();
  var UrlPattern_js_1 = require_UrlPattern();
  var uuid_js_1 = require_uuid();

  class NetworkStorage {
    #requestMap = new Map;
    #interceptMap = new Map;
    #blockedRequestMap = new Map;
    disposeRequestMap() {
      for (const request of this.#requestMap.values()) {
        request.dispose();
      }
      this.#requestMap.clear();
    }
    addIntercept(value) {
      for (const [interceptId2, { urlPatterns, phases }] of this.#interceptMap.entries()) {
        if (JSON.stringify(value.urlPatterns) === JSON.stringify(urlPatterns) && JSON.stringify(value.phases) === JSON.stringify(phases)) {
          return interceptId2;
        }
      }
      const interceptId = (0, uuid_js_1.uuidv4)();
      this.#interceptMap.set(interceptId, value);
      return interceptId;
    }
    removeIntercept(intercept) {
      if (!this.#interceptMap.has(intercept)) {
        throw new protocol_js_1.NoSuchInterceptException(`Intercept '${intercept}' does not exist.`);
      }
      this.#interceptMap.delete(intercept);
    }
    hasIntercepts() {
      return this.#interceptMap.size > 0;
    }
    getFetchEnableParams() {
      const patterns = [];
      for (const value of this.#interceptMap.values()) {
        for (const phase of value.phases) {
          const requestStage = NetworkStorage.requestStageFromPhase(phase);
          if (value.urlPatterns.length === 0) {
            patterns.push({
              urlPattern: "*",
              requestStage
            });
            continue;
          }
          for (const urlPatternSpec of value.urlPatterns) {
            const urlPattern = NetworkStorage.cdpFromSpecUrlPattern(urlPatternSpec);
            patterns.push({
              urlPattern,
              requestStage
            });
          }
        }
      }
      return {
        patterns,
        handleAuthRequests: [...this.#interceptMap.values()].some((param) => {
          return param.phases.includes("authRequired");
        })
      };
    }
    getRequest(id) {
      return this.#requestMap.get(id);
    }
    addRequest(request) {
      this.#requestMap.set(request.requestId, request);
    }
    deleteRequest(id) {
      const request = this.#requestMap.get(id);
      if (request) {
        request.dispose();
        this.#requestMap.delete(id);
      }
    }
    hasNetworkRequests() {
      return this.#requestMap.size > 0;
    }
    hasBlockedRequests() {
      return this.#blockedRequestMap.size > 0;
    }
    static cdpFromSpecUrlPattern(urlPattern) {
      switch (urlPattern.type) {
        case "string":
          return urlPattern.pattern;
        case "pattern":
          return NetworkStorage.buildUrlPatternString(urlPattern);
      }
    }
    static buildUrlPatternString({ protocol, hostname, port, pathname, search }) {
      if (!protocol && !hostname && !port && !pathname && !search) {
        return "*";
      }
      let url = "";
      if (protocol) {
        url += `${protocol}`;
        if (!protocol.endsWith(":")) {
          url += ":";
        }
        if (NetworkStorage.isSpecialScheme(protocol)) {
          url += "//";
        }
      }
      if (hostname) {
        url += hostname;
      }
      if (port) {
        url += `:${port}`;
      }
      if (pathname) {
        if (!pathname.startsWith("/")) {
          url += "/";
        }
        url += pathname;
      }
      if (search) {
        if (!search.startsWith("?")) {
          url += "?";
        }
        url += `${search}`;
      }
      return url;
    }
    static requestStageFromPhase(phase) {
      switch (phase) {
        case "beforeRequestSent":
          return "Request";
        case "responseStarted":
        case "authRequired":
          return "Response";
      }
    }
    static isSpecialScheme(protocol) {
      return ["ftp", "file", "http", "https", "ws", "wss"].includes(protocol.replace(/:$/, ""));
    }
    addBlockedRequest(requestId, value) {
      this.#blockedRequestMap.set(requestId, value);
    }
    removeBlockedRequest(requestId) {
      this.#blockedRequestMap.delete(requestId);
    }
    getBlockedRequest(networkId) {
      return this.#blockedRequestMap.get(networkId);
    }
    getNetworkIntercepts(requestId, phase) {
      const request = this.#requestMap.get(requestId);
      if (!request) {
        return [];
      }
      const interceptIds = [];
      for (const [interceptId, { phases, urlPatterns }] of this.#interceptMap.entries()) {
        if (phase && phases.includes(phase)) {
          if (urlPatterns.length === 0) {
            interceptIds.push(interceptId);
          } else if (urlPatterns.some((urlPattern) => NetworkStorage.matchUrlPattern(urlPattern, request.url))) {
            interceptIds.push(interceptId);
          }
        }
      }
      return interceptIds;
    }
    static matchUrlPattern(urlPattern, url) {
      switch (urlPattern.type) {
        case "string":
          return urlPattern.pattern === url;
        case "pattern": {
          return new UrlPattern_js_1.URLPattern({
            protocol: urlPattern.protocol,
            hostname: urlPattern.hostname,
            port: urlPattern.port,
            pathname: urlPattern.pathname,
            search: urlPattern.search
          }).exec(url) !== null;
        }
      }
    }
  }
  exports.NetworkStorage = NetworkStorage;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/network/NetworkProcessor.js
var require_NetworkProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.NetworkProcessor = undefined;
  var protocol_js_1 = require_protocol();
  var assert_js_1 = require_assert();
  var NetworkStorage_js_1 = require_NetworkStorage();
  var NetworkUtils_js_1 = require_NetworkUtils();

  class NetworkProcessor {
    #browsingContextStorage;
    #networkStorage;
    constructor(browsingContextStorage, networkStorage) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#networkStorage = networkStorage;
    }
    async addIntercept(params) {
      if (params.phases.length === 0) {
        throw new protocol_js_1.InvalidArgumentException("At least one phase must be specified.");
      }
      if (params.phases.includes("authRequired") && !params.phases.includes("beforeRequestSent")) {
        params.phases.unshift("beforeRequestSent");
      }
      const urlPatterns = params.urlPatterns ?? [];
      const parsedUrlPatterns = NetworkProcessor.parseUrlPatterns(urlPatterns);
      const intercept = this.#networkStorage.addIntercept({
        urlPatterns: parsedUrlPatterns,
        phases: params.phases
      });
      await this.#fetchApply();
      return {
        intercept
      };
    }
    async continueRequest(params) {
      const networkId = params.request;
      const { request: fetchId, phase } = this.#getBlockedRequest(networkId);
      if (phase !== "beforeRequestSent") {
        throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${networkId}' is not in 'BeforeRequestSent' phase`);
      }
      if (params.url !== undefined) {
        NetworkProcessor.parseUrlString(params.url);
      }
      const { url, method, headers } = params;
      const requestHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(headers);
      const request = this.#networkStorage.getRequest(networkId);
      (0, assert_js_1.assert)(request, `Network request with ID ${networkId} doesn't exist`);
      await request.continueRequest(fetchId, url, method, requestHeaders);
      this.#networkStorage.removeBlockedRequest(networkId);
      return {};
    }
    async continueResponse(params) {
      const networkId = params.request;
      const { request: fetchId, phase } = this.#getBlockedRequest(networkId);
      if (phase === "beforeRequestSent") {
        throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${networkId}' is in 'BeforeRequestSent' phase`);
      }
      const { statusCode, reasonPhrase, headers } = params;
      const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(headers);
      const request = this.#networkStorage.getRequest(networkId);
      (0, assert_js_1.assert)(request, `Network request with ID ${networkId} doesn't exist`);
      await request.continueResponse(fetchId, statusCode, reasonPhrase, responseHeaders);
      this.#networkStorage.removeBlockedRequest(networkId);
      return {};
    }
    async continueWithAuth(params) {
      const networkId = params.request;
      const { request: fetchId, phase } = this.#getBlockedRequest(networkId);
      if (phase !== "authRequired") {
        throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${networkId}' is not in 'AuthRequired' phase`);
      }
      const request = this.#networkStorage.getRequest(networkId);
      (0, assert_js_1.assert)(request, `Network request with ID ${networkId} doesn't exist`);
      let username;
      let password;
      if (params.action === "provideCredentials") {
        const { credentials } = params;
        username = params.credentials.username;
        password = params.credentials.password;
        (0, assert_js_1.assert)(credentials.type === "password", `Credentials type ${credentials.type} must be 'password'`);
      }
      const response = (0, NetworkUtils_js_1.cdpAuthChallengeResponseFromBidiAuthContinueWithAuthAction)(params.action);
      await request.continueWithAuth(fetchId, response, username, password);
      return {};
    }
    async failRequest(params) {
      const networkId = params.request;
      const blockedRequest = this.#getBlockedRequest(networkId);
      const { request: fetchId, phase } = blockedRequest;
      if (phase === "authRequired") {
        throw new protocol_js_1.InvalidArgumentException(`Blocked request for network id '${networkId}' is in 'AuthRequired' phase`);
      }
      const request = this.#networkStorage.getRequest(networkId);
      (0, assert_js_1.assert)(request, `Network request with ID ${networkId} doesn't exist`);
      await request.failRequest(fetchId, "Failed");
      this.#networkStorage.removeBlockedRequest(networkId);
      return {};
    }
    async provideResponse(params) {
      const networkId = params.request;
      const { request: fetchId } = this.#getBlockedRequest(networkId);
      const { statusCode, reasonPhrase, headers, body } = params;
      const responseHeaders = (0, NetworkUtils_js_1.cdpFetchHeadersFromBidiNetworkHeaders)(headers);
      const request = this.#networkStorage.getRequest(networkId);
      (0, assert_js_1.assert)(request, `Network request with ID ${networkId} doesn't exist`);
      await request.provideResponse(fetchId, statusCode ?? request.statusCode, reasonPhrase, responseHeaders, body?.value);
      this.#networkStorage.removeBlockedRequest(networkId);
      return {};
    }
    async removeIntercept(params) {
      this.#networkStorage.removeIntercept(params.intercept);
      await this.#fetchApply();
      return {};
    }
    async#fetchEnable() {
      await Promise.all(this.#browsingContextStorage.getAllContexts().map(async (context) => {
        await context.cdpTarget.fetchEnable();
      }));
    }
    async#fetchDisable() {
      await Promise.all(this.#browsingContextStorage.getAllContexts().map(async (context) => {
        await context.cdpTarget.fetchDisable();
      }));
    }
    async#fetchApply() {
      if (this.#networkStorage.hasIntercepts() || this.#networkStorage.hasBlockedRequests() || this.#networkStorage.hasNetworkRequests()) {
        await this.#fetchEnable();
      } else {
        await this.#fetchDisable();
      }
    }
    #getBlockedRequest(networkId) {
      const blockedRequest = this.#networkStorage.getBlockedRequest(networkId);
      if (!blockedRequest) {
        throw new protocol_js_1.NoSuchRequestException(`No blocked request found for network id '${networkId}'`);
      }
      return blockedRequest;
    }
    static parseUrlString(url) {
      try {
        return new URL(url);
      } catch (error) {
        throw new protocol_js_1.InvalidArgumentException(`Invalid URL '${url}': ${error}`);
      }
    }
    static parseUrlPatterns(urlPatterns) {
      return urlPatterns.map((urlPattern) => {
        switch (urlPattern.type) {
          case "string": {
            NetworkProcessor.parseUrlString(urlPattern.pattern);
            return urlPattern;
          }
          case "pattern":
            if (urlPattern.protocol === undefined && urlPattern.hostname === undefined && urlPattern.port === undefined && urlPattern.pathname === undefined && urlPattern.search === undefined) {
              return urlPattern;
            }
            if (urlPattern.protocol === "") {
              throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a protocol`);
            }
            if (urlPattern.hostname === "") {
              throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a hostname`);
            }
            if ((urlPattern.hostname?.length ?? 0) > 0) {
              if (urlPattern.protocol?.match(/^file/i)) {
                throw new protocol_js_1.InvalidArgumentException(`URL pattern protocol cannot be 'file'`);
              }
              if (urlPattern.hostname?.includes(":")) {
                throw new protocol_js_1.InvalidArgumentException(`URL pattern hostname must not contain a colon`);
              }
            }
            if (urlPattern.port === "") {
              throw new protocol_js_1.InvalidArgumentException(`URL pattern must specify a port`);
            }
            try {
              new URL(NetworkStorage_js_1.NetworkStorage.buildUrlPatternString(urlPattern));
            } catch (error) {
              throw new protocol_js_1.InvalidArgumentException(`${error}`);
            }
            return urlPattern;
        }
      });
    }
  }
  exports.NetworkProcessor = NetworkProcessor;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/PreloadScriptStorage.js
var require_PreloadScriptStorage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PreloadScriptStorage = undefined;

  class PreloadScriptStorage {
    #scripts = new Set;
    find(filter) {
      if (!filter) {
        return [...this.#scripts];
      }
      return [...this.#scripts].filter((script) => {
        if (filter.id !== undefined && filter.id !== script.id) {
          return false;
        }
        if (filter.targetId !== undefined && !script.targetIds.has(filter.targetId)) {
          return false;
        }
        if (filter.global !== undefined && (filter.global && script.contexts !== undefined || !filter.global && script.contexts === undefined)) {
          return false;
        }
        return true;
      });
    }
    add(preloadScript) {
      this.#scripts.add(preloadScript);
    }
    remove(filter) {
      for (const preloadScript of this.find(filter)) {
        this.#scripts.delete(preloadScript);
      }
    }
  }
  exports.PreloadScriptStorage = PreloadScriptStorage;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/PreloadScript.js
var require_PreloadScript = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.PreloadScript = undefined;
  var uuid_js_1 = require_uuid();
  var ChannelProxy_js_1 = require_ChannelProxy();

  class PreloadScript {
    #id = (0, uuid_js_1.uuidv4)();
    #cdpPreloadScripts = [];
    #functionDeclaration;
    #targetIds = new Set;
    #channels;
    #sandbox;
    #contexts;
    get id() {
      return this.#id;
    }
    get targetIds() {
      return this.#targetIds;
    }
    constructor(params, logger) {
      this.#channels = params.arguments?.map((a) => new ChannelProxy_js_1.ChannelProxy(a.value, logger)) ?? [];
      this.#functionDeclaration = params.functionDeclaration;
      this.#sandbox = params.sandbox;
      this.#contexts = params.contexts;
    }
    get channels() {
      return this.#channels;
    }
    get contexts() {
      return this.#contexts;
    }
    #getEvaluateString() {
      const channelsArgStr = `[${this.channels.map((c) => c.getEvalInWindowStr()).join(", ")}]`;
      return `(()=>{(${this.#functionDeclaration})(...${channelsArgStr})})()`;
    }
    async initInTargets(cdpTargets, runImmediately) {
      await Promise.all(Array.from(cdpTargets).map((cdpTarget) => this.initInTarget(cdpTarget, runImmediately)));
    }
    async initInTarget(cdpTarget, runImmediately) {
      const addCdpPreloadScriptResult = await cdpTarget.cdpClient.sendCommand("Page.addScriptToEvaluateOnNewDocument", {
        source: this.#getEvaluateString(),
        worldName: this.#sandbox,
        runImmediately
      });
      this.#cdpPreloadScripts.push({
        target: cdpTarget,
        preloadScriptId: addCdpPreloadScriptResult.identifier
      });
      this.#targetIds.add(cdpTarget.targetId);
    }
    async remove() {
      for (const cdpPreloadScript of this.#cdpPreloadScripts) {
        const cdpTarget = cdpPreloadScript.target;
        const cdpPreloadScriptId = cdpPreloadScript.preloadScriptId;
        await cdpTarget.cdpClient.sendCommand("Page.removeScriptToEvaluateOnNewDocument", {
          identifier: cdpPreloadScriptId
        });
      }
    }
    dispose(cdpTargetId) {
      this.#cdpPreloadScripts = this.#cdpPreloadScripts.filter((cdpPreloadScript) => cdpPreloadScript.target?.targetId !== cdpTargetId);
      this.#targetIds.delete(cdpTargetId);
    }
  }
  exports.PreloadScript = PreloadScript;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/ScriptProcessor.js
var require_ScriptProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ScriptProcessor = undefined;
  var protocol_1 = require_protocol();
  var PreloadScript_1 = require_PreloadScript();

  class ScriptProcessor {
    #browsingContextStorage;
    #realmStorage;
    #preloadScriptStorage;
    #logger;
    constructor(browsingContextStorage, realmStorage, preloadScriptStorage, logger) {
      this.#browsingContextStorage = browsingContextStorage;
      this.#realmStorage = realmStorage;
      this.#preloadScriptStorage = preloadScriptStorage;
      this.#logger = logger;
    }
    async addPreloadScript(params) {
      const contexts = new Set;
      if (params.contexts) {
        if (params.contexts.length === 0) {
          throw new protocol_1.InvalidArgumentException("Contexts list is empty.");
        }
        for (const contextId of params.contexts) {
          const context = this.#browsingContextStorage.getContext(contextId);
          if (context.isTopLevelContext()) {
            contexts.add(context);
          } else {
            throw new protocol_1.InvalidArgumentException(`Non top-level context '${contextId}' given.`);
          }
        }
      }
      const preloadScript = new PreloadScript_1.PreloadScript(params, this.#logger);
      this.#preloadScriptStorage.add(preloadScript);
      const cdpTargets = contexts.size === 0 ? new Set(this.#browsingContextStorage.getTopLevelContexts().map((context) => context.cdpTarget)) : new Set([...contexts.values()].map((context) => context.cdpTarget));
      await preloadScript.initInTargets(cdpTargets, false);
      return {
        script: preloadScript.id
      };
    }
    async removePreloadScript(params) {
      const bidiId = params.script;
      const scripts = this.#preloadScriptStorage.find({
        id: bidiId
      });
      if (scripts.length === 0) {
        throw new protocol_1.NoSuchScriptException(`No preload script with BiDi ID '${bidiId}'`);
      }
      await Promise.all(scripts.map((script) => script.remove()));
      this.#preloadScriptStorage.remove({
        id: bidiId
      });
      return {};
    }
    async callFunction(params) {
      const realm = await this.#getRealm(params.target);
      return await realm.callFunction(params.functionDeclaration, params.this ?? {
        type: "undefined"
      }, params.arguments ?? [], params.awaitPromise, params.resultOwnership ?? "none", params.serializationOptions ?? {}, params.userActivation ?? false);
    }
    async evaluate(params) {
      const realm = await this.#getRealm(params.target);
      return await realm.evaluate(params.expression, params.awaitPromise, params.resultOwnership ?? "none", params.serializationOptions ?? {}, params.userActivation ?? false);
    }
    async disown(params) {
      const realm = await this.#getRealm(params.target);
      await Promise.all(params.handles.map(async (handle) => await realm.disown(handle)));
      return {};
    }
    getRealms(params) {
      if (params.context !== undefined) {
        this.#browsingContextStorage.getContext(params.context);
      }
      const realms = this.#realmStorage.findRealms({
        browsingContextId: params.context,
        type: params.type
      }).map((realm) => realm.realmInfo);
      return { realms };
    }
    async#getRealm(target) {
      if ("realm" in target) {
        return this.#realmStorage.getRealm({
          realmId: target.realm
        });
      }
      const context = this.#browsingContextStorage.getContext(target.context);
      return await context.getOrCreateSandbox(target.sandbox);
    }
  }
  exports.ScriptProcessor = ScriptProcessor;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/session/SessionProcessor.js
var require_SessionProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SessionProcessor = undefined;

  class SessionProcessor {
    #eventManager;
    constructor(eventManager) {
      this.#eventManager = eventManager;
    }
    status() {
      return { ready: false, message: "already connected" };
    }
    subscribe(params, channel = null) {
      this.#eventManager.subscribe(params.events, params.contexts ?? [null], channel);
      return {};
    }
    unsubscribe(params, channel = null) {
      this.#eventManager.unsubscribe(params.events, params.contexts ?? [null], channel);
      return {};
    }
  }
  exports.SessionProcessor = SessionProcessor;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/OutgoingMessage.js
var require_OutgoingMessage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.OutgoingMessage = undefined;

  class OutgoingMessage {
    #message;
    #channel;
    constructor(message, channel = null) {
      this.#message = message;
      this.#channel = channel;
    }
    static createFromPromise(messagePromise, channel) {
      return messagePromise.then((message) => {
        if (message.kind === "success") {
          return {
            kind: "success",
            value: new OutgoingMessage(message.value, channel)
          };
        }
        return message;
      });
    }
    static createResolved(message, channel) {
      return Promise.resolve({
        kind: "success",
        value: new OutgoingMessage(message, channel)
      });
    }
    get message() {
      return this.#message;
    }
    get channel() {
      return this.#channel;
    }
  }
  exports.OutgoingMessage = OutgoingMessage;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/CommandProcessor.js
var require_CommandProcessor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CommandProcessor = undefined;
  var protocol_js_1 = require_protocol();
  var EventEmitter_js_1 = require_EventEmitter();
  var log_js_1 = require_log();
  var BidiNoOpParser_js_1 = require_BidiNoOpParser();
  var BrowserProcessor_js_1 = require_BrowserProcessor();
  var CdpProcessor_js_1 = require_CdpProcessor();
  var BrowsingContextProcessor_js_1 = require_BrowsingContextProcessor();
  var InputProcessor_js_1 = require_InputProcessor();
  var NetworkProcessor_js_1 = require_NetworkProcessor();
  var NetworkStorage_js_1 = require_NetworkStorage();
  var PreloadScriptStorage_js_1 = require_PreloadScriptStorage();
  var ScriptProcessor_js_1 = require_ScriptProcessor();
  var SessionProcessor_js_1 = require_SessionProcessor();
  var OutgoingMessage_js_1 = require_OutgoingMessage();

  class CommandProcessor extends EventEmitter_js_1.EventEmitter {
    #browserProcessor;
    #browsingContextProcessor;
    #cdpProcessor;
    #inputProcessor;
    #networkProcessor;
    #scriptProcessor;
    #sessionProcessor;
    #parser;
    #logger;
    constructor(cdpConnection, browserCdpClient, eventManager, selfTargetId, browsingContextStorage, realmStorage, parser = new BidiNoOpParser_js_1.BidiNoOpParser, logger) {
      super();
      this.#parser = parser;
      this.#logger = logger;
      const networkStorage = new NetworkStorage_js_1.NetworkStorage;
      const preloadScriptStorage = new PreloadScriptStorage_js_1.PreloadScriptStorage;
      this.#browserProcessor = new BrowserProcessor_js_1.BrowserProcessor(browserCdpClient);
      this.#browsingContextProcessor = new BrowsingContextProcessor_js_1.BrowsingContextProcessor(cdpConnection, browserCdpClient, selfTargetId, eventManager, browsingContextStorage, realmStorage, networkStorage, preloadScriptStorage, logger);
      this.#cdpProcessor = new CdpProcessor_js_1.CdpProcessor(browsingContextStorage, cdpConnection, browserCdpClient);
      this.#inputProcessor = new InputProcessor_js_1.InputProcessor(browsingContextStorage);
      this.#networkProcessor = new NetworkProcessor_js_1.NetworkProcessor(browsingContextStorage, networkStorage);
      this.#scriptProcessor = new ScriptProcessor_js_1.ScriptProcessor(browsingContextStorage, realmStorage, preloadScriptStorage, logger);
      this.#sessionProcessor = new SessionProcessor_js_1.SessionProcessor(eventManager);
    }
    async#processCommand(command) {
      switch (command.method) {
        case "session.end":
        case "session.new":
          break;
        case "browser.close":
          return this.#browserProcessor.close();
        case "browsingContext.activate":
          return await this.#browsingContextProcessor.activate(this.#parser.parseActivateParams(command.params));
        case "browsingContext.captureScreenshot":
          return await this.#browsingContextProcessor.captureScreenshot(this.#parser.parseCaptureScreenshotParams(command.params));
        case "browsingContext.close":
          return await this.#browsingContextProcessor.close(this.#parser.parseCloseParams(command.params));
        case "browsingContext.create":
          return await this.#browsingContextProcessor.create(this.#parser.parseCreateParams(command.params));
        case "browsingContext.getTree":
          return this.#browsingContextProcessor.getTree(this.#parser.parseGetTreeParams(command.params));
        case "browsingContext.handleUserPrompt":
          return await this.#browsingContextProcessor.handleUserPrompt(this.#parser.parseHandleUserPromptParams(command.params));
        case "browsingContext.locateNodes":
          throw new protocol_js_1.UnsupportedOperationException(`Command '${command.method}' not yet implemented.`);
        case "browsingContext.navigate":
          return await this.#browsingContextProcessor.navigate(this.#parser.parseNavigateParams(command.params));
        case "browsingContext.print":
          return await this.#browsingContextProcessor.print(this.#parser.parsePrintParams(command.params));
        case "browsingContext.reload":
          return await this.#browsingContextProcessor.reload(this.#parser.parseReloadParams(command.params));
        case "browsingContext.setViewport":
          return await this.#browsingContextProcessor.setViewport(this.#parser.parseSetViewportParams(command.params));
        case "browsingContext.traverseHistory":
          return await this.#browsingContextProcessor.traverseHistory(this.#parser.parseTraverseHistoryParams(command.params));
        case "cdp.getSession":
          return this.#cdpProcessor.getSession(this.#parser.parseGetSessionParams(command.params));
        case "cdp.sendCommand":
          return await this.#cdpProcessor.sendCommand(this.#parser.parseSendCommandParams(command.params));
        case "input.performActions":
          return await this.#inputProcessor.performActions(this.#parser.parsePerformActionsParams(command.params));
        case "input.releaseActions":
          return await this.#inputProcessor.releaseActions(this.#parser.parseReleaseActionsParams(command.params));
        case "network.addIntercept":
          return await this.#networkProcessor.addIntercept(this.#parser.parseAddInterceptParams(command.params));
        case "network.continueRequest":
          return await this.#networkProcessor.continueRequest(this.#parser.parseContinueRequestParams(command.params));
        case "network.continueResponse":
          return await this.#networkProcessor.continueResponse(this.#parser.parseContinueResponseParams(command.params));
        case "network.continueWithAuth":
          return await this.#networkProcessor.continueWithAuth(this.#parser.parseContinueWithAuthParams(command.params));
        case "network.failRequest":
          return await this.#networkProcessor.failRequest(this.#parser.parseFailRequestParams(command.params));
        case "network.provideResponse":
          return await this.#networkProcessor.provideResponse(this.#parser.parseProvideResponseParams(command.params));
        case "network.removeIntercept":
          return await this.#networkProcessor.removeIntercept(this.#parser.parseRemoveInterceptParams(command.params));
        case "script.addPreloadScript":
          return await this.#scriptProcessor.addPreloadScript(this.#parser.parseAddPreloadScriptParams(command.params));
        case "script.callFunction":
          return await this.#scriptProcessor.callFunction(this.#parser.parseCallFunctionParams(command.params));
        case "script.disown":
          return await this.#scriptProcessor.disown(this.#parser.parseDisownParams(command.params));
        case "script.evaluate":
          return await this.#scriptProcessor.evaluate(this.#parser.parseEvaluateParams(command.params));
        case "script.getRealms":
          return this.#scriptProcessor.getRealms(this.#parser.parseGetRealmsParams(command.params));
        case "script.removePreloadScript":
          return await this.#scriptProcessor.removePreloadScript(this.#parser.parseRemovePreloadScriptParams(command.params));
        case "session.status":
          return this.#sessionProcessor.status();
        case "session.subscribe":
          return this.#sessionProcessor.subscribe(this.#parser.parseSubscribeParams(command.params), command.channel);
        case "session.unsubscribe":
          return this.#sessionProcessor.unsubscribe(this.#parser.parseSubscribeParams(command.params), command.channel);
      }
      throw new protocol_js_1.UnknownCommandException(`Unknown command '${command.method}'.`);
    }
    async processCommand(command) {
      try {
        const result = await this.#processCommand(command);
        const response = {
          type: "success",
          id: command.id,
          result
        };
        this.emit("response", {
          message: OutgoingMessage_js_1.OutgoingMessage.createResolved(response, command.channel),
          event: command.method
        });
      } catch (e) {
        if (e instanceof protocol_js_1.Exception) {
          this.emit("response", {
            message: OutgoingMessage_js_1.OutgoingMessage.createResolved(e.toErrorResponse(command.id), command.channel),
            event: command.method
          });
        } else {
          const error = e;
          this.#logger?.(log_js_1.LogType.bidi, error);
          this.emit("response", {
            message: OutgoingMessage_js_1.OutgoingMessage.createResolved(new protocol_js_1.UnknownErrorException(error.message, error.stack).toErrorResponse(command.id), command.channel),
            event: command.method
          });
        }
      }
    }
  }
  exports.CommandProcessor = CommandProcessor;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/context/BrowsingContextStorage.js
var require_BrowsingContextStorage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BrowsingContextStorage = undefined;
  var protocol_js_1 = require_protocol();

  class BrowsingContextStorage {
    #contexts = new Map;
    getTopLevelContexts() {
      return this.getAllContexts().filter((context) => context.isTopLevelContext());
    }
    getAllContexts() {
      return Array.from(this.#contexts.values());
    }
    deleteContextById(id) {
      this.#contexts.delete(id);
    }
    deleteContext(context) {
      this.#contexts.delete(context.id);
    }
    addContext(context) {
      this.#contexts.set(context.id, context);
    }
    hasContext(id) {
      return this.#contexts.has(id);
    }
    findContext(id) {
      return this.#contexts.get(id);
    }
    findTopLevelContextId(id) {
      if (id === null) {
        return null;
      }
      const maybeContext = this.findContext(id);
      const parentId = maybeContext?.parentId ?? null;
      if (parentId === null) {
        return id;
      }
      return this.findTopLevelContextId(parentId);
    }
    getContext(id) {
      const result = this.findContext(id);
      if (result === undefined) {
        throw new protocol_js_1.NoSuchFrameException(`Context ${id} not found`);
      }
      return result;
    }
  }
  exports.BrowsingContextStorage = BrowsingContextStorage;
});

// node_modules/chromium-bidi/lib/cjs/utils/Buffer.js
var require_Buffer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Buffer = undefined;

  class Buffer2 {
    #capacity;
    #entries = [];
    #onItemRemoved;
    constructor(capacity, onItemRemoved) {
      this.#capacity = capacity;
      this.#onItemRemoved = onItemRemoved;
    }
    get() {
      return this.#entries;
    }
    add(value) {
      this.#entries.push(value);
      while (this.#entries.length > this.#capacity) {
        const item = this.#entries.shift();
        if (item !== undefined) {
          this.#onItemRemoved?.(item);
        }
      }
    }
  }
  exports.Buffer = Buffer2;
});

// node_modules/chromium-bidi/lib/cjs/utils/DefaultMap.js
var require_DefaultMap = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DefaultMap = undefined;

  class DefaultMap extends Map {
    #getDefaultValue;
    constructor(getDefaultValue, entries) {
      super(entries);
      this.#getDefaultValue = getDefaultValue;
    }
    get(key) {
      if (!this.has(key)) {
        this.set(key, this.#getDefaultValue(key));
      }
      return super.get(key);
    }
  }
  exports.DefaultMap = DefaultMap;
});

// node_modules/chromium-bidi/lib/cjs/utils/IdWrapper.js
var require_IdWrapper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.IdWrapper = undefined;

  class IdWrapper {
    static #counter = 0;
    #id;
    constructor() {
      this.#id = ++IdWrapper.#counter;
    }
    get id() {
      return this.#id;
    }
  }
  exports.IdWrapper = IdWrapper;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/events.js
var require_events = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.assertSupportedEvent = exports.isCdpEvent = undefined;
  var protocol_js_1 = require_protocol();
  function isCdpEvent(name) {
    return name.split(".").at(0)?.startsWith(protocol_js_1.ChromiumBidi.BiDiModule.Cdp) ?? false;
  }
  exports.isCdpEvent = isCdpEvent;
  function assertSupportedEvent(name) {
    if (!protocol_js_1.ChromiumBidi.EVENT_NAMES.has(name) && !isCdpEvent(name)) {
      throw new protocol_js_1.InvalidArgumentException(`Unknown event: ${name}`);
    }
  }
  exports.assertSupportedEvent = assertSupportedEvent;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/SubscriptionManager.js
var require_SubscriptionManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SubscriptionManager = exports.unrollEvents = exports.cartesianProduct = undefined;
  var protocol_js_1 = require_protocol();
  var events_js_1 = require_events();
  function cartesianProduct(...a) {
    return a.reduce((a2, b) => a2.flatMap((d) => b.map((e) => [d, e].flat())));
  }
  exports.cartesianProduct = cartesianProduct;
  function unrollEvents(events) {
    const allEvents = new Set;
    function addEvents(events2) {
      for (const event of events2) {
        allEvents.add(event);
      }
    }
    for (const event of events) {
      switch (event) {
        case protocol_js_1.ChromiumBidi.BiDiModule.BrowsingContext:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.Log:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Log.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.Network:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Network.EventNames));
          break;
        case protocol_js_1.ChromiumBidi.BiDiModule.Script:
          addEvents(Object.values(protocol_js_1.ChromiumBidi.Script.EventNames));
          break;
        default:
          allEvents.add(event);
      }
    }
    return [...allEvents.values()];
  }
  exports.unrollEvents = unrollEvents;

  class SubscriptionManager {
    #subscriptionPriority = 0;
    #channelToContextToEventMap = new Map;
    #browsingContextStorage;
    constructor(browsingContextStorage) {
      this.#browsingContextStorage = browsingContextStorage;
    }
    getChannelsSubscribedToEvent(eventMethod, contextId) {
      const prioritiesAndChannels = Array.from(this.#channelToContextToEventMap.keys()).map((channel) => ({
        priority: this.#getEventSubscriptionPriorityForChannel(eventMethod, contextId, channel),
        channel
      })).filter(({ priority }) => priority !== null);
      return prioritiesAndChannels.sort((a, b) => a.priority - b.priority).map(({ channel }) => channel);
    }
    #getEventSubscriptionPriorityForChannel(eventMethod, contextId, channel) {
      const contextToEventMap = this.#channelToContextToEventMap.get(channel);
      if (contextToEventMap === undefined) {
        return null;
      }
      const maybeTopLevelContextId = this.#browsingContextStorage.findTopLevelContextId(contextId);
      const relevantContexts = [...new Set([null, maybeTopLevelContextId])];
      const priorities = relevantContexts.map((context) => {
        const priority = contextToEventMap.get(context)?.get(eventMethod);
        if ((0, events_js_1.isCdpEvent)(eventMethod)) {
          const cdpPriority = contextToEventMap.get(context)?.get(protocol_js_1.ChromiumBidi.BiDiModule.Cdp);
          return priority && cdpPriority ? Math.min(priority, cdpPriority) : priority ?? cdpPriority;
        }
        return priority;
      }).filter((p) => p !== undefined);
      if (priorities.length === 0) {
        return null;
      }
      return Math.min(...priorities);
    }
    subscribe(event, contextId, channel) {
      contextId = this.#browsingContextStorage.findTopLevelContextId(contextId);
      switch (event) {
        case protocol_js_1.ChromiumBidi.BiDiModule.BrowsingContext:
          Object.values(protocol_js_1.ChromiumBidi.BrowsingContext.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        case protocol_js_1.ChromiumBidi.BiDiModule.Log:
          Object.values(protocol_js_1.ChromiumBidi.Log.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        case protocol_js_1.ChromiumBidi.BiDiModule.Network:
          Object.values(protocol_js_1.ChromiumBidi.Network.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        case protocol_js_1.ChromiumBidi.BiDiModule.Script:
          Object.values(protocol_js_1.ChromiumBidi.Script.EventNames).map((specificEvent) => this.subscribe(specificEvent, contextId, channel));
          return;
        default:
      }
      if (!this.#channelToContextToEventMap.has(channel)) {
        this.#channelToContextToEventMap.set(channel, new Map);
      }
      const contextToEventMap = this.#channelToContextToEventMap.get(channel);
      if (!contextToEventMap.has(contextId)) {
        contextToEventMap.set(contextId, new Map);
      }
      const eventMap = contextToEventMap.get(contextId);
      if (eventMap.has(event)) {
        return;
      }
      eventMap.set(event, this.#subscriptionPriority++);
    }
    unsubscribeAll(events, contextIds, channel) {
      for (const contextId of contextIds) {
        if (contextId !== null) {
          this.#browsingContextStorage.getContext(contextId);
        }
      }
      const eventContextPairs = cartesianProduct(unrollEvents(events), contextIds);
      eventContextPairs.map(([event, contextId]) => this.#checkUnsubscribe(event, contextId, channel)).forEach((unsubscribe) => unsubscribe());
    }
    unsubscribe(eventName, contextId, channel) {
      this.unsubscribeAll([eventName], [contextId], channel);
    }
    #checkUnsubscribe(event, contextId, channel) {
      contextId = this.#browsingContextStorage.findTopLevelContextId(contextId);
      if (!this.#channelToContextToEventMap.has(channel)) {
        throw new protocol_js_1.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? "null" : contextId}. No subscription found.`);
      }
      const contextToEventMap = this.#channelToContextToEventMap.get(channel);
      if (!contextToEventMap.has(contextId)) {
        throw new protocol_js_1.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? "null" : contextId}. No subscription found.`);
      }
      const eventMap = contextToEventMap.get(contextId);
      if (!eventMap.has(event)) {
        throw new protocol_js_1.InvalidArgumentException(`Cannot unsubscribe from ${event}, ${contextId === null ? "null" : contextId}. No subscription found.`);
      }
      return () => {
        eventMap.delete(event);
        if (eventMap.size === 0) {
          contextToEventMap.delete(event);
        }
        if (contextToEventMap.size === 0) {
          this.#channelToContextToEventMap.delete(channel);
        }
      };
    }
  }
  exports.SubscriptionManager = SubscriptionManager;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/events/EventManager.js
var require_EventManager = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.EventManager = undefined;
  var protocol_js_1 = require_protocol();
  var Buffer_js_1 = require_Buffer();
  var DefaultMap_js_1 = require_DefaultMap();
  var IdWrapper_js_1 = require_IdWrapper();
  var OutgoingMessage_js_1 = require_OutgoingMessage();
  var events_js_1 = require_events();
  var SubscriptionManager_js_1 = require_SubscriptionManager();

  class EventWrapper {
    #idWrapper = new IdWrapper_js_1.IdWrapper;
    #contextId;
    #event;
    constructor(event, contextId) {
      this.#event = event;
      this.#contextId = contextId;
    }
    get id() {
      return this.#idWrapper.id;
    }
    get contextId() {
      return this.#contextId;
    }
    get event() {
      return this.#event;
    }
  }
  var eventBufferLength = new Map([[protocol_js_1.ChromiumBidi.Log.EventNames.LogEntryAdded, 100]]);

  class EventManager {
    #eventToContextsMap = new DefaultMap_js_1.DefaultMap(() => new Set);
    #eventBuffers = new Map;
    #lastMessageSent = new Map;
    #subscriptionManager;
    #bidiServer;
    constructor(bidiServer) {
      this.#bidiServer = bidiServer;
      this.#subscriptionManager = new SubscriptionManager_js_1.SubscriptionManager(bidiServer.getBrowsingContextStorage());
    }
    static #getMapKey(eventName, browsingContext, channel) {
      return JSON.stringify({ eventName, browsingContext, channel });
    }
    registerEvent(event, contextId) {
      this.registerPromiseEvent(Promise.resolve({
        kind: "success",
        value: event
      }), contextId, event.method);
    }
    registerPromiseEvent(event, contextId, eventName) {
      const eventWrapper = new EventWrapper(event, contextId);
      const sortedChannels = this.#subscriptionManager.getChannelsSubscribedToEvent(eventName, contextId);
      this.#bufferEvent(eventWrapper, eventName);
      for (const channel of sortedChannels) {
        this.#bidiServer.emitOutgoingMessage(OutgoingMessage_js_1.OutgoingMessage.createFromPromise(event, channel), eventName);
        this.#markEventSent(eventWrapper, channel, eventName);
      }
    }
    subscribe(eventNames, contextIds, channel) {
      for (const name of eventNames) {
        (0, events_js_1.assertSupportedEvent)(name);
      }
      for (const contextId of contextIds) {
        if (contextId !== null) {
          this.#bidiServer.getBrowsingContextStorage().getContext(contextId);
        }
      }
      for (const eventName of eventNames) {
        for (const contextId of contextIds) {
          this.#subscriptionManager.subscribe(eventName, contextId, channel);
          for (const eventWrapper of this.#getBufferedEvents(eventName, contextId, channel)) {
            this.#bidiServer.emitOutgoingMessage(OutgoingMessage_js_1.OutgoingMessage.createFromPromise(eventWrapper.event, channel), eventName);
            this.#markEventSent(eventWrapper, channel, eventName);
          }
        }
      }
    }
    unsubscribe(eventNames, contextIds, channel) {
      for (const name of eventNames) {
        (0, events_js_1.assertSupportedEvent)(name);
      }
      this.#subscriptionManager.unsubscribeAll(eventNames, contextIds, channel);
    }
    #bufferEvent(eventWrapper, eventName) {
      if (!eventBufferLength.has(eventName)) {
        return;
      }
      const bufferMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId);
      if (!this.#eventBuffers.has(bufferMapKey)) {
        this.#eventBuffers.set(bufferMapKey, new Buffer_js_1.Buffer(eventBufferLength.get(eventName)));
      }
      this.#eventBuffers.get(bufferMapKey).add(eventWrapper);
      this.#eventToContextsMap.get(eventName).add(eventWrapper.contextId);
    }
    #markEventSent(eventWrapper, channel, eventName) {
      if (!eventBufferLength.has(eventName)) {
        return;
      }
      const lastSentMapKey = EventManager.#getMapKey(eventName, eventWrapper.contextId, channel);
      this.#lastMessageSent.set(lastSentMapKey, Math.max(this.#lastMessageSent.get(lastSentMapKey) ?? 0, eventWrapper.id));
    }
    #getBufferedEvents(eventName, contextId, channel) {
      const bufferMapKey = EventManager.#getMapKey(eventName, contextId);
      const lastSentMapKey = EventManager.#getMapKey(eventName, contextId, channel);
      const lastSentMessageId = this.#lastMessageSent.get(lastSentMapKey) ?? -Infinity;
      const result = this.#eventBuffers.get(bufferMapKey)?.get().filter((wrapper) => wrapper.id > lastSentMessageId) ?? [];
      if (contextId === null) {
        Array.from(this.#eventToContextsMap.get(eventName).keys()).filter((_contextId) => _contextId !== null && this.#bidiServer.getBrowsingContextStorage().hasContext(_contextId)).map((_contextId) => this.#getBufferedEvents(eventName, _contextId, channel)).forEach((events) => result.push(...events));
      }
      return result.sort((e1, e2) => e1.id - e2.id);
    }
  }
  exports.EventManager = EventManager;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/domains/script/RealmStorage.js
var require_RealmStorage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.RealmStorage = undefined;
  var protocol_js_1 = require_protocol();

  class RealmStorage {
    #knownHandlesToRealmMap = new Map;
    #realmMap = new Map;
    get knownHandlesToRealmMap() {
      return this.#knownHandlesToRealmMap;
    }
    addRealm(realm) {
      this.#realmMap.set(realm.realmId, realm);
    }
    findRealms(filter) {
      return Array.from(this.#realmMap.values()).filter((realm) => {
        if (filter.realmId !== undefined && filter.realmId !== realm.realmId) {
          return false;
        }
        if (filter.browsingContextId !== undefined && filter.browsingContextId !== realm.browsingContextId) {
          return false;
        }
        if (filter.navigableId !== undefined && filter.navigableId !== realm.navigableId) {
          return false;
        }
        if (filter.executionContextId !== undefined && filter.executionContextId !== realm.executionContextId) {
          return false;
        }
        if (filter.origin !== undefined && filter.origin !== realm.origin) {
          return false;
        }
        if (filter.type !== undefined && filter.type !== realm.type) {
          return false;
        }
        if (filter.sandbox !== undefined && filter.sandbox !== realm.sandbox) {
          return false;
        }
        if (filter.cdpSessionId !== undefined && filter.cdpSessionId !== realm.cdpClient.sessionId) {
          return false;
        }
        return true;
      });
    }
    findRealm(filter) {
      const maybeRealms = this.findRealms(filter);
      if (maybeRealms.length !== 1) {
        return;
      }
      return maybeRealms[0];
    }
    getRealm(filter) {
      const maybeRealm = this.findRealm(filter);
      if (maybeRealm === undefined) {
        throw new protocol_js_1.NoSuchFrameException(`Realm ${JSON.stringify(filter)} not found`);
      }
      return maybeRealm;
    }
    deleteRealms(filter) {
      this.findRealms(filter).map((realm) => {
        realm.dispose();
        this.#realmMap.delete(realm.realmId);
        Array.from(this.knownHandlesToRealmMap.entries()).filter(([, r]) => r === realm.realmId).map(([handle]) => this.knownHandlesToRealmMap.delete(handle));
      });
    }
  }
  exports.RealmStorage = RealmStorage;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/BidiServer.js
var require_BidiServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BidiServer = undefined;
  var EventEmitter_js_1 = require_EventEmitter();
  var log_js_1 = require_log();
  var ProcessingQueue_js_1 = require_ProcessingQueue();
  var CommandProcessor_js_1 = require_CommandProcessor();
  var BrowsingContextStorage_js_1 = require_BrowsingContextStorage();
  var EventManager_js_1 = require_EventManager();
  var RealmStorage_js_1 = require_RealmStorage();

  class BidiServer extends EventEmitter_js_1.EventEmitter {
    #messageQueue;
    #transport;
    #commandProcessor;
    #browsingContextStorage = new BrowsingContextStorage_js_1.BrowsingContextStorage;
    #logger;
    #handleIncomingMessage = (message) => {
      this.#commandProcessor.processCommand(message).catch((error) => {
        this.#logger?.(log_js_1.LogType.debugError, error);
      });
    };
    #processOutgoingMessage = async (messageEntry) => {
      const message = messageEntry.message;
      if (messageEntry.channel !== null) {
        message["channel"] = messageEntry.channel;
      }
      await this.#transport.sendMessage(message);
    };
    constructor(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, parser, logger) {
      super();
      this.#logger = logger;
      this.#messageQueue = new ProcessingQueue_js_1.ProcessingQueue(this.#processOutgoingMessage, this.#logger);
      this.#transport = bidiTransport;
      this.#transport.setOnMessage(this.#handleIncomingMessage);
      this.#commandProcessor = new CommandProcessor_js_1.CommandProcessor(cdpConnection, browserCdpClient, new EventManager_js_1.EventManager(this), selfTargetId, this.#browsingContextStorage, new RealmStorage_js_1.RealmStorage, parser, this.#logger);
      this.#commandProcessor.on("response", ({ message, event }) => {
        this.emitOutgoingMessage(message, event);
      });
    }
    static async createAndStart(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, parser, logger) {
      const server = new BidiServer(bidiTransport, cdpConnection, browserCdpClient, selfTargetId, parser, logger);
      await browserCdpClient.sendCommand("Target.setDiscoverTargets", {
        discover: true
      });
      await browserCdpClient.sendCommand("Target.setAutoAttach", {
        autoAttach: true,
        waitForDebuggerOnStart: true,
        flatten: true
      });
      await server.#topLevelContextsLoaded();
      return server;
    }
    emitOutgoingMessage(messageEntry, event) {
      this.#messageQueue.add(messageEntry, event);
    }
    close() {
      this.#transport.close();
    }
    getBrowsingContextStorage() {
      return this.#browsingContextStorage;
    }
    async#topLevelContextsLoaded() {
      await Promise.all(this.#browsingContextStorage.getTopLevelContexts().map((c) => c.lifecycleLoaded()));
    }
  }
  exports.BidiServer = BidiServer;
});

// node_modules/chromium-bidi/lib/cjs/bidiMapper/BidiMapper.js
var require_BidiMapper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.OutgoingMessage = exports.EventEmitter = exports.BidiServer = undefined;
  var BidiServer_js_1 = require_BidiServer();
  Object.defineProperty(exports, "BidiServer", { enumerable: true, get: function() {
    return BidiServer_js_1.BidiServer;
  } });
  var EventEmitter_js_1 = require_EventEmitter();
  Object.defineProperty(exports, "EventEmitter", { enumerable: true, get: function() {
    return EventEmitter_js_1.EventEmitter;
  } });
  var OutgoingMessage_js_1 = require_OutgoingMessage();
  Object.defineProperty(exports, "OutgoingMessage", { enumerable: true, get: function() {
    return OutgoingMessage_js_1.OutgoingMessage;
  } });
});

// node_modules/chromium-bidi/lib/cjs/cdp/CdpClient.js
var require_CdpClient = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CdpClient = exports.CloseError = undefined;
  var EventEmitter_js_1 = require_EventEmitter();

  class CloseError extends Error {
  }
  exports.CloseError = CloseError;

  class CdpClient extends EventEmitter_js_1.EventEmitter {
    #cdpConnection;
    #sessionId;
    constructor(cdpConnection, sessionId) {
      super();
      this.#cdpConnection = cdpConnection;
      this.#sessionId = sessionId;
    }
    get sessionId() {
      return this.#sessionId;
    }
    sendCommand(method, ...params) {
      return this.#cdpConnection.sendCommand(method, params[0], this.#sessionId);
    }
    isCloseError(error) {
      return error instanceof CloseError;
    }
  }
  exports.CdpClient = CdpClient;
});

// node_modules/chromium-bidi/lib/cjs/cdp/CdpConnection.js
var require_CdpConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.CdpConnection = undefined;
  var log_js_1 = require_log();
  var CdpClient_js_1 = require_CdpClient();

  class CdpConnection {
    static LOGGER_PREFIX_RECV = `${log_js_1.LogType.cdp}:RECV ◂`;
    static LOGGER_PREFIX_SEND = `${log_js_1.LogType.cdp}:SEND ▸`;
    #mainBrowserCdpClient;
    #transport;
    #sessionCdpClients = new Map;
    #commandCallbacks = new Map;
    #logger;
    #nextId = 0;
    constructor(transport, logger) {
      this.#transport = transport;
      this.#logger = logger;
      this.#transport.setOnMessage(this.#onMessage);
      this.#mainBrowserCdpClient = this.#createCdpClient(undefined);
    }
    close() {
      this.#transport.close();
      for (const [, { reject, error }] of this.#commandCallbacks) {
        reject(error);
      }
      this.#commandCallbacks.clear();
      this.#sessionCdpClients.clear();
    }
    async createBrowserSession() {
      const { sessionId } = await this.#mainBrowserCdpClient.sendCommand("Target.attachToBrowserTarget");
      return this.#createCdpClient(sessionId);
    }
    getCdpClient(sessionId) {
      const cdpClient = this.#sessionCdpClients.get(sessionId);
      if (!cdpClient) {
        throw new Error(`Unknown CDP session ID: ${sessionId}`);
      }
      return cdpClient;
    }
    sendCommand(method, params, sessionId) {
      return new Promise((resolve, reject) => {
        const id = this.#nextId++;
        this.#commandCallbacks.set(id, {
          resolve,
          reject,
          error: new CdpClient_js_1.CloseError(`${method} ${JSON.stringify(params)} ${sessionId ?? ""} call rejected because the connection has been closed.`)
        });
        const cdpMessage = { id, method, params };
        if (sessionId) {
          cdpMessage.sessionId = sessionId;
        }
        this.#transport.sendMessage(JSON.stringify(cdpMessage))?.catch((error) => {
          this.#logger?.(log_js_1.LogType.debugError, error);
          this.#transport.close();
        });
        this.#logger?.(CdpConnection.LOGGER_PREFIX_SEND, cdpMessage);
      });
    }
    #onMessage = (json) => {
      const message = JSON.parse(json);
      this.#logger?.(CdpConnection.LOGGER_PREFIX_RECV, message);
      if (message.method === "Target.attachedToTarget") {
        const { sessionId } = message.params;
        this.#createCdpClient(sessionId);
      }
      if (message.id !== undefined) {
        const callbacks = this.#commandCallbacks.get(message.id);
        this.#commandCallbacks.delete(message.id);
        if (callbacks) {
          if (message.result) {
            callbacks.resolve(message.result);
          } else if (message.error) {
            callbacks.reject(message.error);
          }
        }
      } else if (message.method) {
        const client = this.#sessionCdpClients.get(message.sessionId ?? undefined);
        client?.emit(message.method, message.params || {});
        if (message.method === "Target.detachedFromTarget") {
          const { sessionId } = message.params;
          const client2 = this.#sessionCdpClients.get(sessionId);
          if (client2) {
            this.#sessionCdpClients.delete(sessionId);
            client2.removeAllListeners();
          }
        }
      }
    };
    #createCdpClient(sessionId) {
      const cdpClient = new CdpClient_js_1.CdpClient(this, sessionId);
      this.#sessionCdpClients.set(sessionId, cdpClient);
      return cdpClient;
    }
  }
  exports.CdpConnection = CdpConnection;
});

// node_modules/playwright-core/lib/server/bidi/bidiOverCdp.js
var require_bidiOverCdp = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.connectBidiOverCdp = connectBidiOverCdp;
  var bidiMapper = _interopRequireWildcard(require_BidiMapper());
  var bidiCdpConnection = _interopRequireWildcard(require_CdpConnection());
  var _debugLogger = require_debugLogger();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var bidiServerLogger = (prefix, ...args) => {
    _debugLogger.debugLogger.log(prefix, args);
  };
  async function connectBidiOverCdp(cdp) {
    let server = undefined;
    const bidiTransport = new BidiTransportImpl;
    const bidiConnection = new BidiConnection(bidiTransport, () => {
      var _server;
      return (_server = server) === null || _server === undefined ? undefined : _server.close();
    });
    const cdpTransportImpl = new CdpTransportImpl(cdp);
    const cdpConnection = new bidiCdpConnection.MapperCdpConnection(cdpTransportImpl, bidiServerLogger);
    cdp.onclose = () => {
      var _bidiConnection$onclo;
      return (_bidiConnection$onclo = bidiConnection.onclose) === null || _bidiConnection$onclo === undefined ? undefined : _bidiConnection$onclo.call(bidiConnection);
    };
    server = await bidiMapper.BidiServer.createAndStart(bidiTransport, cdpConnection, await cdpConnection.createBrowserSession(), "", undefined, bidiServerLogger);
    return bidiConnection;
  }

  class BidiTransportImpl {
    constructor() {
      this._handler = undefined;
      this._bidiConnection = undefined;
    }
    setOnMessage(handler) {
      this._handler = handler;
    }
    sendMessage(message) {
      var _this$_bidiConnection, _this$_bidiConnection2;
      return (_this$_bidiConnection = (_this$_bidiConnection2 = this._bidiConnection).onmessage) === null || _this$_bidiConnection === undefined ? undefined : _this$_bidiConnection.call(_this$_bidiConnection2, message);
    }
    close() {
      var _this$_bidiConnection3, _this$_bidiConnection4;
      (_this$_bidiConnection3 = (_this$_bidiConnection4 = this._bidiConnection).onclose) === null || _this$_bidiConnection3 === undefined || _this$_bidiConnection3.call(_this$_bidiConnection4);
    }
  }

  class BidiConnection {
    constructor(bidiTransport, closeCallback) {
      this._bidiTransport = undefined;
      this._closeCallback = undefined;
      this.onmessage = undefined;
      this.onclose = undefined;
      this._bidiTransport = bidiTransport;
      this._bidiTransport._bidiConnection = this;
      this._closeCallback = closeCallback;
    }
    send(s) {
      var _this$_bidiTransport$, _this$_bidiTransport;
      (_this$_bidiTransport$ = (_this$_bidiTransport = this._bidiTransport)._handler) === null || _this$_bidiTransport$ === undefined || _this$_bidiTransport$.call(_this$_bidiTransport, s);
    }
    close() {
      this._closeCallback();
    }
  }

  class CdpTransportImpl {
    constructor(connection) {
      this._connection = undefined;
      this._handler = undefined;
      this._bidiConnection = undefined;
      this._connection = connection;
      this._connection.onmessage = (message) => {
        var _this$_handler;
        (_this$_handler = this._handler) === null || _this$_handler === undefined || _this$_handler.call(this, JSON.stringify(message));
      };
    }
    setOnMessage(handler) {
      this._handler = handler;
    }
    sendMessage(message) {
      return this._connection.send(JSON.parse(message));
    }
    close() {
      this._connection.close();
    }
  }
});

// node_modules/playwright-core/lib/server/bidi/bidiChromium.js
var require_bidiChromium = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiChromium = undefined;
  var _os = _interopRequireDefault(__require("os"));
  var _utils = require_utils();
  var _browserType = require_browserType();
  var _chromiumSwitches = require_chromiumSwitches();
  var _bidiBrowser = require_bidiBrowser();
  var _bidiConnection = require_bidiConnection();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class BidiChromium extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "bidi");
      this._useBidi = true;
    }
    async connectToTransport(transport, options) {
      const bidiTransport = await require_bidiOverCdp().connectBidiOverCdp(transport);
      transport[kBidiOverCdpWrapper] = bidiTransport;
      return _bidiBrowser.BidiBrowser.connect(this.attribution.playwright, bidiTransport, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes("Missing X server"))
        error.logs = `
` + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      if (!error.logs.includes("crbug.com/357670") && !error.logs.includes("No usable sandbox!") && !error.logs.includes("crbug.com/638180"))
        return error;
      error.logs = [`Chromium sandboxing failed!`, `================================`, `To avoid the sandboxing issue, do either of the following:`, `  - (preferred): Configure your environment to support sandboxing`, `  - (alternative): Launch Chromium without sandbox using 'chromiumSandbox: false' option`, `================================`, ``].join(`
`);
      return error;
    }
    amendEnvironment(env, userDataDir, executable, browserArguments) {
      return env;
    }
    attemptToGracefullyCloseBrowser(transport) {
      const bidiTransport = transport[kBidiOverCdpWrapper];
      if (bidiTransport)
        transport = bidiTransport;
      transport.send({
        method: "browser.close",
        params: {},
        id: _bidiConnection.kBrowserCloseMessageId
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const chromeArguments = this._innerDefaultArgs(options);
      chromeArguments.push(`--user-data-dir=${userDataDir}`);
      chromeArguments.push("--remote-debugging-port=0");
      if (isPersistent)
        chromeArguments.push("about:blank");
      else
        chromeArguments.push("--no-startup-window");
      return chromeArguments;
    }
    readyState(options) {
      (0, _utils.assert)(options.useWebSocket);
      return new ChromiumReadyState;
    }
    _innerDefaultArgs(options) {
      const {
        args = []
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("--user-data-dir"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--user-data-dir");
      if (args.find((arg) => arg.startsWith("--remote-debugging-pipe")))
        throw new Error("Playwright manages remote debugging connection itself.");
      if (args.find((arg) => !arg.startsWith("-")))
        throw new Error("Arguments can not specify page to be opened");
      const chromeArguments = [..._chromiumSwitches.chromiumSwitches];
      if (_os.default.platform() === "darwin") {
        chromeArguments.push("--enable-use-zoom-for-dsf=false");
        if (options.headless)
          chromeArguments.push("--use-angle");
      }
      if (options.devtools)
        chromeArguments.push("--auto-open-devtools-for-tabs");
      if (options.headless) {
        chromeArguments.push("--headless");
        chromeArguments.push("--hide-scrollbars", "--mute-audio", "--blink-settings=primaryHoverType=2,availableHoverTypes=2,primaryPointerType=4,availablePointerTypes=4");
      }
      if (options.chromiumSandbox !== true)
        chromeArguments.push("--no-sandbox");
      const proxy = options.proxyOverride || options.proxy;
      if (proxy) {
        const proxyURL = new URL(proxy.server);
        const isSocks = proxyURL.protocol === "socks5:";
        if (isSocks && !this.attribution.playwright.options.socksProxyPort) {
          chromeArguments.push(`--host-resolver-rules="MAP * ~NOTFOUND , EXCLUDE ${proxyURL.hostname}"`);
        }
        chromeArguments.push(`--proxy-server=${proxy.server}`);
        const proxyBypassRules = [];
        if (this.attribution.playwright.options.socksProxyPort)
          proxyBypassRules.push("<-loopback>");
        if (proxy.bypass)
          proxyBypassRules.push(...proxy.bypass.split(",").map((t) => t.trim()).map((t) => t.startsWith(".") ? "*" + t : t));
        if (!process.env.PLAYWRIGHT_DISABLE_FORCED_CHROMIUM_PROXIED_LOOPBACK && !proxyBypassRules.includes("<-loopback>"))
          proxyBypassRules.push("<-loopback>");
        if (proxyBypassRules.length > 0)
          chromeArguments.push(`--proxy-bypass-list=${proxyBypassRules.join(";")}`);
      }
      chromeArguments.push(...args);
      return chromeArguments;
    }
  }
  exports.BidiChromium = BidiChromium;

  class ChromiumReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/DevTools listening on (.*)/);
      if (match)
        this._wsEndpoint.resolve(match[1]);
    }
  }
  var kBidiOverCdpWrapper = Symbol("kBidiConnectionWrapper");
});

// node_modules/playwright-core/lib/server/bidi/third_party/firefoxPrefs.js
var require_firefoxPrefs = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createProfile = createProfile;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  async function createProfile(options) {
    if (!_fs.default.existsSync(options.path)) {
      await _fs.default.promises.mkdir(options.path, {
        recursive: true
      });
    }
    await writePreferences({
      preferences: {
        ...defaultProfilePreferences(options.preferences),
        ...options.preferences
      },
      path: options.path
    });
  }
  function defaultProfilePreferences(extraPrefs) {
    const server = "dummy.test";
    const defaultPrefs = {
      "app.normandy.api_url": "",
      "app.update.checkInstallTime": false,
      "app.update.disabledForTesting": true,
      "apz.content_response_timeout": 60000,
      "browser.contentblocking.features.standard": "-tp,tpPrivate,cookieBehavior0,-cm,-fp",
      "browser.dom.window.dump.enabled": true,
      "browser.newtabpage.activity-stream.feeds.system.topstories": false,
      "browser.newtabpage.enabled": false,
      "browser.pagethumbnails.capturing_disabled": true,
      "browser.safebrowsing.blockedURIs.enabled": false,
      "browser.safebrowsing.downloads.enabled": false,
      "browser.safebrowsing.malware.enabled": false,
      "browser.safebrowsing.phishing.enabled": false,
      "browser.search.update": false,
      "browser.sessionstore.resume_from_crash": false,
      "browser.shell.checkDefaultBrowser": false,
      "browser.startup.homepage": "about:blank",
      "browser.startup.homepage_override.mstone": "ignore",
      "browser.startup.page": 0,
      "browser.tabs.disableBackgroundZombification": false,
      "browser.tabs.warnOnCloseOtherTabs": false,
      "browser.tabs.warnOnOpen": false,
      "browser.translations.automaticallyPopup": false,
      "browser.uitour.enabled": false,
      "browser.urlbar.suggest.searches": false,
      "browser.usedOnWindows10.introURL": "",
      "browser.warnOnQuit": false,
      "datareporting.healthreport.documentServerURI": `http://${server}/dummy/healthreport/`,
      "datareporting.healthreport.logging.consoleEnabled": false,
      "datareporting.healthreport.service.enabled": false,
      "datareporting.healthreport.service.firstRun": false,
      "datareporting.healthreport.uploadEnabled": false,
      "datareporting.policy.dataSubmissionEnabled": false,
      "datareporting.policy.dataSubmissionPolicyBypassNotification": true,
      "devtools.jsonview.enabled": false,
      "dom.disable_open_during_load": false,
      "dom.file.createInChild": true,
      "dom.ipc.reportProcessHangs": false,
      "dom.max_chrome_script_run_time": 0,
      "dom.max_script_run_time": 0,
      "extensions.autoDisableScopes": 0,
      "extensions.enabledScopes": 5,
      "extensions.getAddons.cache.enabled": false,
      "extensions.installDistroAddons": false,
      "extensions.screenshots.disabled": true,
      "extensions.update.enabled": false,
      "extensions.update.notifyUser": false,
      "extensions.webservice.discoverURL": `http://${server}/dummy/discoveryURL`,
      "focusmanager.testmode": true,
      "general.useragent.updates.enabled": false,
      "geo.provider.testing": true,
      "geo.wifi.scan": false,
      "hangmonitor.timeout": 0,
      "javascript.options.showInConsole": true,
      "media.gmp-manager.updateEnabled": false,
      "media.sanity-test.disabled": true,
      "network.cookie.sameSite.laxByDefault": false,
      "network.http.prompt-temp-redirect": false,
      "network.http.speculative-parallel-limit": 0,
      "network.manage-offline-status": false,
      "network.sntp.pools": server,
      "plugin.state.flash": 0,
      "privacy.trackingprotection.enabled": false,
      "remote.enabled": true,
      "security.certerrors.mitm.priming.enabled": false,
      "security.fileuri.strict_origin_policy": false,
      "security.notification_enable_delay": 0,
      "services.settings.server": `http://${server}/dummy/blocklist/`,
      "signon.autofillForms": false,
      "signon.rememberSignons": false,
      "startup.homepage_welcome_url": "about:blank",
      "startup.homepage_welcome_url.additional": "",
      "toolkit.cosmeticAnimations.enabled": false,
      "toolkit.startup.max_resumed_crashes": -1
    };
    return Object.assign(defaultPrefs, extraPrefs);
  }
  async function writePreferences(options) {
    const prefsPath = _path.default.join(options.path, "prefs.js");
    const lines = Object.entries(options.preferences).map(([key, value]) => {
      return `user_pref(${JSON.stringify(key)}, ${JSON.stringify(value)});`;
    });
    const result = await Promise.allSettled([
      _fs.default.promises.writeFile(_path.default.join(options.path, "user.js"), lines.join(`
`)),
      _fs.default.promises.access(prefsPath, _fs.default.constants.F_OK).then(async () => {
        await _fs.default.promises.copyFile(prefsPath, _path.default.join(options.path, "prefs.js.playwright"));
      }, () => {
      })
    ]);
    for (const command of result) {
      if (command.status === "rejected") {
        throw command.reason;
      }
    }
  }
});

// node_modules/playwright-core/lib/server/bidi/bidiFirefox.js
var require_bidiFirefox = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BidiFirefox = undefined;
  var _os = _interopRequireDefault(__require("os"));
  var _path = _interopRequireDefault(__require("path"));
  var _utils = require_utils();
  var _browserType = require_browserType();
  var _bidiBrowser = require_bidiBrowser();
  var _bidiConnection = require_bidiConnection();
  var _firefoxPrefs = require_firefoxPrefs();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class BidiFirefox extends _browserType.BrowserType {
    constructor(parent) {
      super(parent, "bidi");
      this._useBidi = true;
    }
    async connectToTransport(transport, options) {
      return _bidiBrowser.BidiBrowser.connect(this.attribution.playwright, transport, options);
    }
    doRewriteStartupLog(error) {
      if (!error.logs)
        return error;
      if (error.logs.includes(`as root in a regular user's session is not supported.`))
        error.logs = `
` + (0, _utils.wrapInASCIIBox)(`Firefox is unable to launch if the $HOME folder isn't owned by the current user.
Workaround: Set the HOME=/root environment variable${process.env.GITHUB_ACTION ? " in your GitHub Actions workflow file" : ""} when running Playwright.`, 1);
      if (error.logs.includes("no DISPLAY environment variable specified"))
        error.logs = `
` + (0, _utils.wrapInASCIIBox)(_browserType.kNoXServerRunningError, 1);
      return error;
    }
    amendEnvironment(env, userDataDir, executable, browserArguments) {
      if (!_path.default.isAbsolute(_os.default.homedir()))
        throw new Error(`Cannot launch Firefox with relative home directory. Did you set ${_os.default.platform() === "win32" ? "USERPROFILE" : "HOME"} to a relative path?`);
      env = {
        ...env,
        MOZ_CRASHREPORTER: "1",
        MOZ_CRASHREPORTER_NO_REPORT: "1",
        MOZ_CRASHREPORTER_SHUTDOWN: "1"
      };
      if (_os.default.platform() === "linux") {
        return {
          ...env,
          SNAP_NAME: undefined,
          SNAP_INSTANCE_NAME: undefined
        };
      }
      return env;
    }
    attemptToGracefullyCloseBrowser(transport) {
      transport.send({
        method: "browser.close",
        params: {},
        id: _bidiConnection.kBrowserCloseMessageId
      });
    }
    async prepareUserDataDir(options, userDataDir) {
      await (0, _firefoxPrefs.createProfile)({
        path: userDataDir,
        preferences: options.firefoxUserPrefs || {}
      });
    }
    defaultArgs(options, isPersistent, userDataDir) {
      const {
        args = [],
        headless
      } = options;
      const userDataDirArg = args.find((arg) => arg.startsWith("-profile") || arg.startsWith("--profile"));
      if (userDataDirArg)
        throw this._createUserDataDirArgMisuseError("--profile");
      const firefoxArguments = ["--remote-debugging-port=0"];
      if (headless)
        firefoxArguments.push("--headless");
      else
        firefoxArguments.push("--foreground");
      firefoxArguments.push(`--profile`, userDataDir);
      firefoxArguments.push(...args);
      return firefoxArguments;
    }
    readyState(options) {
      (0, _utils.assert)(options.useWebSocket);
      return new FirefoxReadyState;
    }
  }
  exports.BidiFirefox = BidiFirefox;

  class FirefoxReadyState extends _browserType.BrowserReadyState {
    onBrowserOutput(message) {
      const match = message.match(/WebDriver BiDi listening on (ws:\/\/.*)$/);
      if (match)
        this._wsEndpoint.resolve(match[1] + "/session");
    }
  }
});

// node_modules/playwright-core/lib/server/playwright.js
var require_playwright = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Playwright = undefined;
  exports.createPlaywright = createPlaywright;
  var _android = require_android();
  var _backendAdb = require_backendAdb();
  var _chromium = require_chromium();
  var _electron = require_electron2();
  var _firefox = require_firefox();
  var _selectors = require_selectors();
  var _webkit = require_webkit();
  var _instrumentation = require_instrumentation();
  var _utils = require_utils();
  var _debugController = require_debugController();
  var _bidiChromium = require_bidiChromium();
  var _bidiFirefox = require_bidiFirefox();

  class Playwright extends _instrumentation.SdkObject {
    constructor(options) {
      super({
        attribution: {},
        instrumentation: (0, _instrumentation.createInstrumentation)()
      }, undefined, "Playwright");
      this.selectors = undefined;
      this.chromium = undefined;
      this.android = undefined;
      this.electron = undefined;
      this.firefox = undefined;
      this.webkit = undefined;
      this.bidiChromium = undefined;
      this.bidiFirefox = undefined;
      this.options = undefined;
      this.debugController = undefined;
      this._allPages = new Set;
      this._allBrowsers = new Set;
      this.options = options;
      this.attribution.playwright = this;
      this.instrumentation.addListener({
        onBrowserOpen: (browser) => this._allBrowsers.add(browser),
        onBrowserClose: (browser) => this._allBrowsers.delete(browser),
        onPageOpen: (page) => this._allPages.add(page),
        onPageClose: (page) => this._allPages.delete(page),
        onCallLog: (sdkObject, metadata, logName, message) => {
          _utils.debugLogger.log(logName, message);
        }
      }, null);
      this.chromium = new _chromium.Chromium(this);
      this.bidiChromium = new _bidiChromium.BidiChromium(this);
      this.bidiFirefox = new _bidiFirefox.BidiFirefox(this);
      this.firefox = new _firefox.Firefox(this);
      this.webkit = new _webkit.WebKit(this);
      this.electron = new _electron.Electron(this);
      this.android = new _android.Android(this, new _backendAdb.AdbBackend);
      this.selectors = new _selectors.Selectors;
      this.debugController = new _debugController.DebugController(this);
    }
    async hideHighlight() {
      await Promise.all([...this._allPages].map((p) => p.hideHighlight().catch(() => {
      })));
    }
    allBrowsers() {
      return [...this._allBrowsers];
    }
    allPages() {
      return [...this._allPages];
    }
  }
  exports.Playwright = Playwright;
  function createPlaywright(options) {
    return new Playwright(options);
  }
});

// node_modules/playwright-core/lib/server/recorder/recorderApp.js
var require_recorderApp = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RecorderApp = exports.EmptyRecorderApp = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _progress = require_progress();
  var _events = __require("events");
  var _instrumentation = require_instrumentation();
  var _utils = require_utils();
  var _utilsBundle = require_utilsBundle();
  var _launchApp = require_launchApp();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class EmptyRecorderApp extends _events.EventEmitter {
    constructor(...args) {
      super(...args);
      this.wsEndpointForTest = undefined;
    }
    async close() {
    }
    async setPaused(paused) {
    }
    async setMode(mode) {
    }
    async setRunningFile(file) {
    }
    async elementPicked(elementInfo, userGesture) {
    }
    async updateCallLogs(callLogs) {
    }
    async setSources(sources) {
    }
    async setActions(actions, sources) {
    }
  }
  exports.EmptyRecorderApp = EmptyRecorderApp;

  class RecorderApp extends _events.EventEmitter {
    constructor(recorder, page, wsEndpoint) {
      super();
      this._page = undefined;
      this.wsEndpointForTest = undefined;
      this._recorder = undefined;
      this.setMaxListeners(0);
      this._recorder = recorder;
      this._page = page;
      this.wsEndpointForTest = wsEndpoint;
    }
    async close() {
      await this._page.context().close({
        reason: "Recorder window closed"
      });
    }
    async _init() {
      await (0, _launchApp.syncLocalStorageWithSettings)(this._page, "recorder");
      await this._page._setServerRequestInterceptor((route) => {
        if (!route.request().url().startsWith("https://playwright/"))
          return false;
        const uri = route.request().url().substring("https://playwright/".length);
        const file = __require.resolve("../../vite/recorder/" + uri);
        _fs.default.promises.readFile(file).then((buffer) => {
          route.fulfill({
            status: 200,
            headers: [{
              name: "Content-Type",
              value: _utilsBundle.mime.getType(_path.default.extname(file)) || "application/octet-stream"
            }],
            body: buffer.toString("base64"),
            isBase64: true
          }).catch(() => {
          });
        });
        return true;
      });
      await this._page.exposeBinding("dispatch", false, (_, data) => this.emit("event", data));
      this._page.once("close", () => {
        this.emit("close");
        this._page.context().close({
          reason: "Recorder window closed"
        }).catch(() => {
        });
      });
      const mainFrame = this._page.mainFrame();
      await mainFrame.goto((0, _instrumentation.serverSideCallMetadata)(), "https://playwright/index.html");
    }
    static factory(context) {
      return async (recorder) => {
        if (process.env.PW_CODEGEN_NO_INSPECTOR)
          return new EmptyRecorderApp;
        return await RecorderApp._open(recorder, context);
      };
    }
    static async _open(recorder, inspectedContext) {
      const sdkLanguage = inspectedContext.attribution.playwright.options.sdkLanguage;
      const headed = !!inspectedContext._browser.options.headful;
      const recorderPlaywright = require_playwright().createPlaywright({
        sdkLanguage: "javascript",
        isInternalPlaywright: true
      });
      const {
        context,
        page
      } = await (0, _launchApp.launchApp)(recorderPlaywright.chromium, {
        sdkLanguage,
        windowSize: {
          width: 600,
          height: 600
        },
        windowPosition: {
          x: 1020,
          y: 10
        },
        persistentContextOptions: {
          noDefaultViewport: true,
          headless: !!process.env.PWTEST_CLI_HEADLESS || (0, _utils.isUnderTest)() && !headed,
          useWebSocket: (0, _utils.isUnderTest)(),
          handleSIGINT: recorder.handleSIGINT,
          executablePath: inspectedContext._browser.options.isChromium ? inspectedContext._browser.options.customExecutablePath : undefined
        }
      });
      const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
      await controller.run(async (progress2) => {
        await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
      });
      const result = new RecorderApp(recorder, page, context._browser.options.wsEndpoint);
      await result._init();
      return result;
    }
    async setMode(mode) {
      await this._page.mainFrame().evaluateExpression(((mode2) => {
        window.playwrightSetMode(mode2);
      }).toString(), {
        isFunction: true
      }, mode).catch(() => {
      });
    }
    async setRunningFile(file) {
      await this._page.mainFrame().evaluateExpression(((file2) => {
        window.playwrightSetRunningFile(file2);
      }).toString(), {
        isFunction: true
      }, file).catch(() => {
      });
    }
    async setPaused(paused) {
      await this._page.mainFrame().evaluateExpression(((paused2) => {
        window.playwrightSetPaused(paused2);
      }).toString(), {
        isFunction: true
      }, paused).catch(() => {
      });
    }
    async setSources(sources) {
      await this._page.mainFrame().evaluateExpression(((sources2) => {
        window.playwrightSetSources(sources2);
      }).toString(), {
        isFunction: true
      }, sources).catch(() => {
      });
      if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
        if (process._didSetSourcesForTest(sources[0].text))
          this.close();
      }
    }
    async setActions(actions, sources) {
    }
    async elementPicked(elementInfo, userGesture) {
      if (userGesture)
        this._page.bringToFront();
      await this._page.mainFrame().evaluateExpression(((param) => {
        window.playwrightElementPicked(param.elementInfo, param.userGesture);
      }).toString(), {
        isFunction: true
      }, {
        elementInfo,
        userGesture
      }).catch(() => {
      });
    }
    async updateCallLogs(callLogs) {
      await this._page.mainFrame().evaluateExpression(((callLogs2) => {
        window.playwrightUpdateLogs(callLogs2);
      }).toString(), {
        isFunction: true
      }, callLogs).catch(() => {
      });
    }
  }
  exports.RecorderApp = RecorderApp;
});

// node_modules/playwright-core/lib/server/browserContext.js
var require_browserContext = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContext = undefined;
  exports.assertBrowserContextIsNotOwned = assertBrowserContextIsNotOwned;
  exports.normalizeProxySettings = normalizeProxySettings;
  exports.validateBrowserContextOptions = validateBrowserContextOptions;
  exports.verifyClientCertificates = verifyClientCertificates;
  exports.verifyGeolocation = verifyGeolocation;
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _helper = require_helper();
  var network = _interopRequireWildcard(require_network2());
  var _page6 = require_page();
  var _path = _interopRequireDefault(__require("path"));
  var _fs = _interopRequireDefault(__require("fs"));
  var _instrumentation = require_instrumentation();
  var _debugger = require_debugger();
  var _tracing = require_tracing();
  var _harRecorder = require_harRecorder();
  var _recorder = require_recorder();
  var consoleApiSource = _interopRequireWildcard(require_consoleApiSource());
  var _fetch = require_fetch();
  var _clock = require_clock();
  var _recorderApp = require_recorderApp();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class BrowserContext extends _instrumentation.SdkObject {
    constructor(browser, options, browserContextId) {
      super(browser, "browser-context");
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._pageBindings = new Map;
      this._activeProgressControllers = new Set;
      this._options = undefined;
      this._requestInterceptor = undefined;
      this._isPersistentContext = undefined;
      this._closedStatus = "open";
      this._closePromise = undefined;
      this._closePromiseFulfill = undefined;
      this._permissions = new Map;
      this._downloads = new Set;
      this._browser = undefined;
      this._browserContextId = undefined;
      this._selectors = undefined;
      this._origins = new Set;
      this._harRecorders = new Map;
      this.tracing = undefined;
      this.fetchRequest = undefined;
      this._customCloseHandler = undefined;
      this._tempDirs = [];
      this._settingStorageState = false;
      this.initScripts = [];
      this._routesInFlight = new Set;
      this._debugger = undefined;
      this._closeReason = undefined;
      this.clock = undefined;
      this._clientCertificatesProxy = undefined;
      this.attribution.context = this;
      this._browser = browser;
      this._options = options;
      this._browserContextId = browserContextId;
      this._isPersistentContext = !browserContextId;
      this._closePromise = new Promise((fulfill) => this._closePromiseFulfill = fulfill);
      this.fetchRequest = new _fetch.BrowserContextAPIRequestContext(this);
      if (this._options.recordHar)
        this._harRecorders.set("", new _harRecorder.HarRecorder(this, null, this._options.recordHar));
      this.tracing = new _tracing.Tracing(this, browser.options.tracesDir);
      this.clock = new _clock.Clock(this);
    }
    isPersistentContext() {
      return this._isPersistentContext;
    }
    setSelectors(selectors) {
      this._selectors = selectors;
    }
    selectors() {
      return this._selectors || this.attribution.playwright.selectors;
    }
    async _initialize() {
      if (this.attribution.playwright.options.isInternalPlaywright)
        return;
      this._debugger = new _debugger.Debugger(this);
      if ((0, _utils.debugMode)() === "inspector")
        await _recorder.Recorder.show("actions", this, _recorderApp.RecorderApp.factory(this), {
          pauseOnNextStatement: true
        });
      if (this._debugger.isPaused())
        _recorder.Recorder.showInspectorNoReply(this, _recorderApp.RecorderApp.factory(this));
      this._debugger.on(_debugger.Debugger.Events.PausedStateChanged, () => {
        if (this._debugger.isPaused())
          _recorder.Recorder.showInspectorNoReply(this, _recorderApp.RecorderApp.factory(this));
      });
      if ((0, _utils.debugMode)() === "console")
        await this.extendInjectedScript(consoleApiSource.source);
      if (this._options.serviceWorkers === "block")
        await this.addInitScript(`
if (navigator.serviceWorker) navigator.serviceWorker.register = async () => { console.warn('Service Worker registration blocked by Playwright'); };
`);
      if (this._options.permissions)
        await this.grantPermissions(this._options.permissions);
    }
    debugger() {
      return this._debugger;
    }
    async _ensureVideosPath() {
      if (this._options.recordVideo)
        await (0, _fileUtils.mkdirIfNeeded)(_path.default.join(this._options.recordVideo.dir, "dummy"));
    }
    canResetForReuse() {
      if (this._closedStatus !== "open")
        return false;
      return true;
    }
    async stopPendingOperations(reason) {
      for (const controller of this._activeProgressControllers)
        controller.abort(new Error(reason));
      await new Promise((f) => setTimeout(f, 0));
    }
    static reusableContextHash(params) {
      const paramsCopy = {
        ...params
      };
      for (const k of Object.keys(paramsCopy)) {
        const key = k;
        if (paramsCopy[key] === defaultNewContextParamValues[key])
          delete paramsCopy[key];
      }
      for (const key of paramsThatAllowContextReuse)
        delete paramsCopy[key];
      return JSON.stringify(paramsCopy);
    }
    async resetForReuse(metadata, params) {
      var _page, _page2, _page3, _page4, _page5;
      this.setDefaultNavigationTimeout(undefined);
      this.setDefaultTimeout(undefined);
      this.tracing.resetForReuse();
      if (params) {
        for (const key of paramsThatAllowContextReuse)
          this._options[key] = params[key];
      }
      await this._cancelAllRoutesInFlight();
      let page = this.pages()[0];
      const [, ...otherPages] = this.pages();
      for (const p of otherPages)
        await p.close(metadata);
      if (page && page.hasCrashed()) {
        await page.close(metadata);
        page = undefined;
      }
      (_page = page) === null || _page === undefined || _page._frameManager.setCloseAllOpeningDialogs(true);
      await ((_page2 = page) === null || _page2 === undefined ? undefined : _page2._frameManager.closeOpenDialogs());
      await ((_page3 = page) === null || _page3 === undefined ? undefined : _page3.mainFrame().goto(metadata, "about:blank", {
        timeout: 0
      }));
      (_page4 = page) === null || _page4 === undefined || _page4._frameManager.setCloseAllOpeningDialogs(false);
      await this._resetStorage();
      await this._removeExposedBindings();
      await this._removeInitScripts();
      this.clock.markAsUninstalled();
      if (this._options.permissions)
        await this.grantPermissions(this._options.permissions);
      else
        await this.clearPermissions();
      await this.setExtraHTTPHeaders(this._options.extraHTTPHeaders || []);
      await this.setGeolocation(this._options.geolocation);
      await this.setOffline(!!this._options.offline);
      await this.setUserAgent(this._options.userAgent);
      await this.clearCache();
      await this._resetCookies();
      await ((_page5 = page) === null || _page5 === undefined ? undefined : _page5.resetForReuse(metadata));
    }
    _browserClosed() {
      for (const page of this.pages())
        page._didClose();
      this._didCloseInternal();
    }
    _didCloseInternal() {
      var _this$_clientCertific;
      if (this._closedStatus === "closed") {
        return;
      }
      (_this$_clientCertific = this._clientCertificatesProxy) === null || _this$_clientCertific === undefined || _this$_clientCertific.close().catch(() => {
      });
      this.tracing.abort();
      if (this._isPersistentContext)
        this.onClosePersistent();
      this._closePromiseFulfill(new Error("Context closed"));
      this.emit(BrowserContext.Events.Close);
    }
    async cookies(urls = []) {
      if (urls && !Array.isArray(urls))
        urls = [urls];
      return await this.doGetCookies(urls);
    }
    async clearCookies(options) {
      const currentCookies = await this.cookies();
      await this.doClearCookies();
      const matches = (cookie, prop, value) => {
        if (!value)
          return true;
        if (value instanceof RegExp) {
          value.lastIndex = 0;
          return value.test(cookie[prop]);
        }
        return cookie[prop] === value;
      };
      const cookiesToReadd = currentCookies.filter((cookie) => {
        return !matches(cookie, "name", options.name) || !matches(cookie, "domain", options.domain) || !matches(cookie, "path", options.path);
      });
      await this.addCookies(cookiesToReadd);
    }
    setHTTPCredentials(httpCredentials) {
      return this.doSetHTTPCredentials(httpCredentials);
    }
    async exposeBinding(name, needsHandle, playwrightBinding) {
      if (this._pageBindings.has(name))
        throw new Error(`Function "${name}" has been already registered`);
      for (const page of this.pages()) {
        if (page.getBinding(name))
          throw new Error(`Function "${name}" has been already registered in one of the pages`);
      }
      const binding = new _page6.PageBinding(name, playwrightBinding, needsHandle);
      this._pageBindings.set(name, binding);
      await this.doAddInitScript(binding.initScript);
      const frames = this.pages().map((page) => page.frames()).flat();
      await Promise.all(frames.map((frame) => frame.evaluateExpression(binding.initScript.source).catch((e) => {
      })));
    }
    async _removeExposedBindings() {
      for (const [key, binding] of this._pageBindings) {
        if (!binding.internal)
          this._pageBindings.delete(key);
      }
    }
    async grantPermissions(permissions, origin) {
      let resolvedOrigin = "*";
      if (origin) {
        const url = new URL(origin);
        resolvedOrigin = url.origin;
      }
      const existing = new Set(this._permissions.get(resolvedOrigin) || []);
      permissions.forEach((p) => existing.add(p));
      const list = [...existing.values()];
      this._permissions.set(resolvedOrigin, list);
      await this.doGrantPermissions(resolvedOrigin, list);
    }
    async clearPermissions() {
      this._permissions.clear();
      await this.doClearPermissions();
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async _loadDefaultContextAsIs(progress2) {
      if (!this.pages().length) {
        const waitForEvent = _helper.helper.waitForEvent(progress2, this, BrowserContext.Events.Page);
        progress2.cleanupWhenAborted(() => waitForEvent.dispose);
        const page = await waitForEvent.promise;
        if (page._pageIsError)
          throw page._pageIsError;
      }
      const pages = this.pages();
      if (pages[0]._pageIsError)
        throw pages[0]._pageIsError;
      await pages[0].mainFrame()._waitForLoadState(progress2, "load");
      return pages;
    }
    async _loadDefaultContext(progress2) {
      const pages = await this._loadDefaultContextAsIs(progress2);
      const browserName = this._browser.options.name;
      if (this._options.isMobile && browserName === "chromium" || this._options.locale && browserName === "webkit") {
        const oldPage = pages[0];
        await this.newPage(progress2.metadata);
        await oldPage.close(progress2.metadata);
      }
    }
    _authenticateProxyViaHeader() {
      const proxy = this._options.proxy || this._browser.options.proxy || {
        username: undefined,
        password: undefined
      };
      const {
        username,
        password
      } = proxy;
      if (username) {
        this._options.httpCredentials = {
          username,
          password
        };
        const token = Buffer.from(`${username}:${password}`).toString("base64");
        this._options.extraHTTPHeaders = network.mergeHeaders([this._options.extraHTTPHeaders, network.singleHeader("Proxy-Authorization", `Basic ${token}`)]);
      }
    }
    _authenticateProxyViaCredentials() {
      const proxy = this._options.proxy || this._browser.options.proxy;
      if (!proxy)
        return;
      const {
        username,
        password
      } = proxy;
      if (username)
        this._options.httpCredentials = {
          username,
          password: password || ""
        };
    }
    async addInitScript(source) {
      const initScript = new _page6.InitScript(source);
      this.initScripts.push(initScript);
      await this.doAddInitScript(initScript);
    }
    async _removeInitScripts() {
      this.initScripts = this.initScripts.filter((script) => script.internal);
      await this.doRemoveNonInternalInitScripts();
    }
    async setRequestInterceptor(handler) {
      this._requestInterceptor = handler;
      await this.doUpdateRequestInterception();
    }
    isClosingOrClosed() {
      return this._closedStatus !== "open";
    }
    async _deleteAllDownloads() {
      await Promise.all(Array.from(this._downloads).map((download) => download.artifact.deleteOnContextClose()));
    }
    async _deleteAllTempDirs() {
      await Promise.all(this._tempDirs.map(async (dir) => await _fs.default.promises.unlink(dir).catch((e) => {
      })));
    }
    setCustomCloseHandler(handler) {
      this._customCloseHandler = handler;
    }
    async close(options) {
      if (this._closedStatus === "open") {
        if (options.reason)
          this._closeReason = options.reason;
        this.emit(BrowserContext.Events.BeforeClose);
        this._closedStatus = "closing";
        for (const harRecorder of this._harRecorders.values())
          await harRecorder.flush();
        await this.tracing.flush();
        const promises = [];
        for (const {
          context,
          artifact
        } of this._browser._idToVideo.values()) {
          if (context === this)
            promises.push(artifact.finishedPromise());
        }
        if (this._customCloseHandler) {
          await this._customCloseHandler();
        } else {
          await this.doClose(options.reason);
        }
        promises.push(this._deleteAllDownloads());
        promises.push(this._deleteAllTempDirs());
        await Promise.all(promises);
        if (!this._customCloseHandler)
          this._didCloseInternal();
      }
      await this._closePromise;
    }
    async newPage(metadata) {
      const pageDelegate = await this.newPageDelegate();
      if (metadata.isServerSide)
        pageDelegate.potentiallyUninitializedPage().markAsServerSideOnly();
      const pageOrError = await pageDelegate.pageOrError();
      if (pageOrError instanceof _page6.Page) {
        if (pageOrError.isClosed())
          throw new Error("Page has been closed.");
        return pageOrError;
      }
      throw pageOrError;
    }
    addVisitedOrigin(origin) {
      this._origins.add(origin);
    }
    async storageState() {
      const result = {
        cookies: await this.cookies(),
        origins: []
      };
      const originsToSave = new Set(this._origins);
      for (const page of this.pages()) {
        const origin = page.mainFrame().origin();
        if (!origin || !originsToSave.has(origin))
          continue;
        try {
          const storage = await page.mainFrame().nonStallingEvaluateInExistingContext(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, "utility");
          if (storage.localStorage.length)
            result.origins.push({
              origin,
              localStorage: storage.localStorage
            });
          originsToSave.delete(origin);
        } catch {
        }
      }
      if (originsToSave.size) {
        const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
        const page = await this.newPage(internalMetadata);
        await page._setServerRequestInterceptor((handler) => {
          handler.fulfill({
            body: "<html></html>"
          }).catch(() => {
          });
          return true;
        });
        for (const origin of originsToSave) {
          const originStorage = {
            origin,
            localStorage: []
          };
          const frame = page.mainFrame();
          await frame.goto(internalMetadata, origin);
          const storage = await frame.evaluateExpression(`({
          localStorage: Object.keys(localStorage).map(name => ({ name, value: localStorage.getItem(name) })),
        })`, {
            world: "utility"
          });
          originStorage.localStorage = storage.localStorage;
          if (storage.localStorage.length)
            result.origins.push(originStorage);
        }
        await page.close(internalMetadata);
      }
      return result;
    }
    async _resetStorage() {
      var _this$_options$storag;
      const oldOrigins = this._origins;
      const newOrigins = new Map(((_this$_options$storag = this._options.storageState) === null || _this$_options$storag === undefined || (_this$_options$storag = _this$_options$storag.origins) === null || _this$_options$storag === undefined ? undefined : _this$_options$storag.map((p) => [p.origin, p])) || []);
      if (!oldOrigins.size && !newOrigins.size)
        return;
      let page = this.pages()[0];
      const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
      page = page || await this.newPage({
        ...internalMetadata,
        isServerSide: false
      });
      await page._setServerRequestInterceptor((handler) => {
        handler.fulfill({
          body: "<html></html>"
        }).catch(() => {
        });
        return true;
      });
      for (const origin of new Set([...oldOrigins, ...newOrigins.keys()])) {
        const frame = page.mainFrame();
        await frame.goto(internalMetadata, origin);
        await frame.resetStorageForCurrentOriginBestEffort(newOrigins.get(origin));
      }
      await page._setServerRequestInterceptor(undefined);
      this._origins = new Set([...newOrigins.keys()]);
    }
    async _resetCookies() {
      var _this$_options$storag2, _this$_options$storag3;
      await this.doClearCookies();
      if ((_this$_options$storag2 = this._options.storageState) !== null && _this$_options$storag2 !== undefined && _this$_options$storag2.cookies)
        await this.addCookies((_this$_options$storag3 = this._options.storageState) === null || _this$_options$storag3 === undefined ? undefined : _this$_options$storag3.cookies);
    }
    isSettingStorageState() {
      return this._settingStorageState;
    }
    async setStorageState(metadata, state) {
      this._settingStorageState = true;
      try {
        if (state.cookies)
          await this.addCookies(state.cookies);
        if (state.origins && state.origins.length) {
          const internalMetadata = (0, _instrumentation.serverSideCallMetadata)();
          const page = await this.newPage(internalMetadata);
          await page._setServerRequestInterceptor((handler) => {
            handler.fulfill({
              body: "<html></html>"
            }).catch(() => {
            });
            return true;
          });
          for (const originState of state.origins) {
            const frame = page.mainFrame();
            await frame.goto(metadata, originState.origin);
            await frame.evaluateExpression(`
            originState => {
              for (const { name, value } of (originState.localStorage || []))
                localStorage.setItem(name, value);
            }`, {
              isFunction: true,
              world: "utility"
            }, originState);
          }
          await page.close(internalMetadata);
        }
      } finally {
        this._settingStorageState = false;
      }
    }
    async extendInjectedScript(source, arg) {
      const installInFrame = (frame) => frame.extendInjectedScript(source, arg).catch(() => {
      });
      const installInPage = (page) => {
        page.on(_page6.Page.Events.InternalFrameNavigatedToNewDocument, installInFrame);
        return Promise.all(page.frames().map(installInFrame));
      };
      this.on(BrowserContext.Events.Page, installInPage);
      return Promise.all(this.pages().map(installInPage));
    }
    async safeNonStallingEvaluateInAllFrames(expression, world, options = {}) {
      await Promise.all(this.pages().map((page) => page.safeNonStallingEvaluateInAllFrames(expression, world, options)));
    }
    async _harStart(page, options) {
      const harId = (0, _utils.createGuid)();
      this._harRecorders.set(harId, new _harRecorder.HarRecorder(this, page, options));
      return harId;
    }
    async _harExport(harId) {
      const recorder = this._harRecorders.get(harId || "");
      return recorder.export();
    }
    addRouteInFlight(route) {
      this._routesInFlight.add(route);
    }
    removeRouteInFlight(route) {
      this._routesInFlight.delete(route);
    }
    async _cancelAllRoutesInFlight() {
      await Promise.all([...this._routesInFlight].map((r) => r.abort())).catch(() => {
      });
      this._routesInFlight.clear();
    }
  }
  exports.BrowserContext = BrowserContext;
  BrowserContext.Events = {
    Console: "console",
    Close: "close",
    Dialog: "dialog",
    Page: "page",
    PageError: "pageerror",
    Request: "request",
    Response: "response",
    RequestFailed: "requestfailed",
    RequestFinished: "requestfinished",
    RequestAborted: "requestaborted",
    RequestFulfilled: "requestfulfilled",
    RequestContinued: "requestcontinued",
    BeforeClose: "beforeclose",
    VideoStarted: "videostarted"
  };
  function assertBrowserContextIsNotOwned(context) {
    for (const page of context.pages()) {
      if (page._ownedContext)
        throw new Error("Please use browser.newContext() for multi-page scripts that share the context.");
    }
  }
  function validateBrowserContextOptions(options, browserOptions) {
    if (options.noDefaultViewport && options.deviceScaleFactor !== undefined)
      throw new Error(`"deviceScaleFactor" option is not supported with null "viewport"`);
    if (options.noDefaultViewport && !!options.isMobile)
      throw new Error(`"isMobile" option is not supported with null "viewport"`);
    if (options.acceptDownloads === undefined && browserOptions.name !== "electron")
      options.acceptDownloads = "accept";
    else if (options.acceptDownloads === undefined && browserOptions.name === "electron")
      options.acceptDownloads = "internal-browser-default";
    if (!options.viewport && !options.noDefaultViewport)
      options.viewport = {
        width: 1280,
        height: 720
      };
    if (options.recordVideo) {
      if (!options.recordVideo.size) {
        if (options.noDefaultViewport) {
          options.recordVideo.size = {
            width: 800,
            height: 600
          };
        } else {
          const size = options.viewport;
          const scale = Math.min(1, 800 / Math.max(size.width, size.height));
          options.recordVideo.size = {
            width: Math.floor(size.width * scale),
            height: Math.floor(size.height * scale)
          };
        }
      }
      options.recordVideo.size.width &= ~1;
      options.recordVideo.size.height &= ~1;
    }
    if (options.proxy)
      options.proxy = normalizeProxySettings(options.proxy);
    verifyGeolocation(options.geolocation);
  }
  function verifyGeolocation(geolocation) {
    if (!geolocation)
      return;
    geolocation.accuracy = geolocation.accuracy || 0;
    const {
      longitude,
      latitude,
      accuracy
    } = geolocation;
    if (longitude < -180 || longitude > 180)
      throw new Error(`geolocation.longitude: precondition -180 <= LONGITUDE <= 180 failed.`);
    if (latitude < -90 || latitude > 90)
      throw new Error(`geolocation.latitude: precondition -90 <= LATITUDE <= 90 failed.`);
    if (accuracy < 0)
      throw new Error(`geolocation.accuracy: precondition 0 <= ACCURACY failed.`);
  }
  function verifyClientCertificates(clientCertificates) {
    if (!clientCertificates)
      return;
    for (const cert of clientCertificates) {
      if (!cert.origin)
        throw new Error(`clientCertificates.origin is required`);
      if (!cert.cert && !cert.key && !cert.passphrase && !cert.pfx)
        throw new Error("None of cert, key, passphrase or pfx is specified");
      if (cert.cert && !cert.key)
        throw new Error("cert is specified without key");
      if (!cert.cert && cert.key)
        throw new Error("key is specified without cert");
      if (cert.pfx && (cert.cert || cert.key))
        throw new Error("pfx is specified together with cert, key or passphrase");
    }
  }
  function normalizeProxySettings(proxy) {
    let {
      server,
      bypass
    } = proxy;
    let url;
    try {
      url = new URL(server);
      if (!url.host || !url.protocol)
        url = new URL("http://" + server);
    } catch (e) {
      url = new URL("http://" + server);
    }
    if (url.protocol === "socks4:" && (proxy.username || proxy.password))
      throw new Error(`Socks4 proxy protocol does not support authentication`);
    if (url.protocol === "socks5:" && (proxy.username || proxy.password))
      throw new Error(`Browser does not support socks5 proxy authentication`);
    server = url.protocol + "//" + url.host;
    if (bypass)
      bypass = bypass.split(",").map((t) => t.trim()).join(",");
    return {
      ...proxy,
      server,
      bypass
    };
  }
  var paramsThatAllowContextReuse = ["colorScheme", "forcedColors", "reducedMotion", "screen", "userAgent", "viewport"];
  var defaultNewContextParamValues = {
    noDefaultViewport: false,
    ignoreHTTPSErrors: false,
    javaScriptEnabled: true,
    bypassCSP: false,
    offline: false,
    isMobile: false,
    hasTouch: false,
    acceptDownloads: "accept",
    strictSelectors: false,
    serviceWorkers: "allow",
    locale: "en-US"
  };
});

// node_modules/playwright-core/lib/server/formData.js
var require_formData = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.MultipartFormData = undefined;
  var _utilsBundle = require_utilsBundle();

  class MultipartFormData {
    constructor() {
      this._boundary = undefined;
      this._chunks = [];
      this._boundary = generateUniqueBoundaryString();
    }
    contentTypeHeader() {
      return `multipart/form-data; boundary=${this._boundary}`;
    }
    addField(name, value) {
      this._beginMultiPartHeader(name);
      this._finishMultiPartHeader();
      this._chunks.push(Buffer.from(value));
      this._finishMultiPartField();
    }
    addFileField(name, value) {
      this._beginMultiPartHeader(name);
      this._chunks.push(Buffer.from(`; filename="${value.name}"`));
      this._chunks.push(Buffer.from(`\r
content-type: ${value.mimeType || _utilsBundle.mime.getType(value.name) || "application/octet-stream"}`));
      this._finishMultiPartHeader();
      this._chunks.push(value.buffer);
      this._finishMultiPartField();
    }
    finish() {
      this._addBoundary(true);
      return Buffer.concat(this._chunks);
    }
    _beginMultiPartHeader(name) {
      this._addBoundary();
      this._chunks.push(Buffer.from(`content-disposition: form-data; name="${name}"`));
    }
    _finishMultiPartHeader() {
      this._chunks.push(Buffer.from(`\r
\r
`));
    }
    _finishMultiPartField() {
      this._chunks.push(Buffer.from(`\r
`));
    }
    _addBoundary(isLastBoundary) {
      this._chunks.push(Buffer.from("--" + this._boundary));
      if (isLastBoundary)
        this._chunks.push(Buffer.from("--"));
      this._chunks.push(Buffer.from(`\r
`));
    }
  }
  exports.MultipartFormData = MultipartFormData;
  var alphaNumericEncodingMap = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66];
  function generateUniqueBoundaryString() {
    const charCodes = [];
    for (let i = 0;i < 16; i++)
      charCodes.push(alphaNumericEncodingMap[Math.floor(Math.random() * alphaNumericEncodingMap.length)]);
    return "----WebKitFormBoundary" + String.fromCharCode(...charCodes);
  }
});

// node_modules/playwright-core/lib/server/fetch.js
var require_fetch = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.GlobalAPIRequestContext = exports.BrowserContextAPIRequestContext = exports.APIRequestContext = undefined;
  exports.createProxyAgent = createProxyAgent;
  var _http = _interopRequireDefault(__require("http"));
  var _https = _interopRequireDefault(__require("https"));
  var _stream = __require("stream");
  var _zlib = _interopRequireDefault(__require("zlib"));
  var _timeoutSettings = require_timeoutSettings();
  var _userAgent = require_userAgent();
  var _utils = require_utils();
  var _utilsBundle = require_utilsBundle();
  var _browserContext = require_browserContext();
  var _cookieStore = require_cookieStore();
  var _formData = require_formData();
  var _happyEyeballs = require_happy_eyeballs();
  var _instrumentation = require_instrumentation();
  var _progress = require_progress();
  var _tracing = require_tracing();
  var _socksClientCertificatesInterceptor = require_socksClientCertificatesInterceptor();
  var _tls = __require("tls");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class APIRequestContext extends _instrumentation.SdkObject {
    static findResponseBody(guid) {
      for (const request of APIRequestContext.allInstances) {
        const body = request.fetchResponses.get(guid);
        if (body)
          return body;
      }
      return;
    }
    constructor(parent) {
      super(parent, "request-context");
      this.fetchResponses = new Map;
      this.fetchLog = new Map;
      this._activeProgressControllers = new Set;
      this._closeReason = undefined;
      APIRequestContext.allInstances.add(this);
    }
    _disposeImpl() {
      APIRequestContext.allInstances.delete(this);
      this.fetchResponses.clear();
      this.fetchLog.clear();
      this.emit(APIRequestContext.Events.Dispose);
    }
    disposeResponse(fetchUid) {
      this.fetchResponses.delete(fetchUid);
      this.fetchLog.delete(fetchUid);
    }
    _storeResponseBody(body) {
      const uid = (0, _utils.createGuid)();
      this.fetchResponses.set(uid, body);
      return uid;
    }
    async fetch(params, metadata) {
      var _params$method;
      const defaults = this._defaultOptions();
      const headers = {
        "user-agent": defaults.userAgent,
        accept: "*/*",
        "accept-encoding": "gzip,deflate,br"
      };
      if (defaults.extraHTTPHeaders) {
        for (const {
          name,
          value
        } of defaults.extraHTTPHeaders)
          setHeader(headers, name, value);
      }
      if (params.headers) {
        for (const {
          name,
          value
        } of params.headers)
          setHeader(headers, name, value);
      }
      const requestUrl = new URL((0, _utils.constructURLBasedOnBaseURL)(defaults.baseURL, params.url));
      if (params.encodedParams) {
        requestUrl.search = params.encodedParams;
      } else if (params.params) {
        for (const {
          name,
          value
        } of params.params)
          requestUrl.searchParams.append(name, value);
      }
      const credentials = this._getHttpCredentials(requestUrl);
      if ((credentials === null || credentials === undefined ? undefined : credentials.send) === "always")
        setBasicAuthorizationHeader(headers, credentials);
      const method = ((_params$method = params.method) === null || _params$method === undefined ? undefined : _params$method.toUpperCase()) || "GET";
      const proxy = defaults.proxy;
      let agent;
      if (proxy && proxy.server !== "per-context" && !shouldBypassProxy(requestUrl, proxy.bypass))
        agent = createProxyAgent(proxy);
      const timeout = defaults.timeoutSettings.timeout(params);
      const deadline = timeout && (0, _utils.monotonicTime)() + timeout;
      const options = {
        method,
        headers,
        agent,
        maxRedirects: params.maxRedirects === 0 ? -1 : params.maxRedirects === undefined ? 20 : params.maxRedirects,
        timeout,
        deadline,
        ...(0, _socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, requestUrl.origin),
        __testHookLookup: params.__testHookLookup
      };
      if (params.ignoreHTTPSErrors || defaults.ignoreHTTPSErrors)
        options.rejectUnauthorized = false;
      const postData = serializePostData(params, headers);
      if (postData)
        setHeader(headers, "content-length", String(postData.byteLength));
      const controller = new _progress.ProgressController(metadata, this);
      const fetchResponse = await controller.run((progress2) => {
        return this._sendRequestWithRetries(progress2, requestUrl, options, postData, params.maxRetries);
      });
      const fetchUid = this._storeResponseBody(fetchResponse.body);
      this.fetchLog.set(fetchUid, controller.metadata.log);
      if (params.failOnStatusCode && (fetchResponse.status < 200 || fetchResponse.status >= 400)) {
        let responseText = "";
        if (fetchResponse.body.byteLength) {
          let text = fetchResponse.body.toString("utf8");
          if (text.length > 1000)
            text = text.substring(0, 997) + "...";
          responseText = `
Response text:
${text}`;
        }
        throw new Error(`${fetchResponse.status} ${fetchResponse.statusText}${responseText}`);
      }
      return {
        ...fetchResponse,
        fetchUid
      };
    }
    _parseSetCookieHeader(responseUrl, setCookie) {
      if (!setCookie)
        return [];
      const url = new URL(responseUrl);
      const defaultPath = "/" + url.pathname.substr(1).split("/").slice(0, -1).join("/");
      const cookies = [];
      for (const header of setCookie) {
        const cookie = parseCookie(header);
        if (!cookie)
          continue;
        if (!cookie.domain)
          cookie.domain = url.hostname;
        else
          (0, _utils.assert)(cookie.domain.startsWith(".") || !cookie.domain.includes("."));
        if (!(0, _cookieStore.domainMatches)(url.hostname, cookie.domain))
          continue;
        if (!cookie.path || !cookie.path.startsWith("/"))
          cookie.path = defaultPath;
        cookies.push(cookie);
      }
      return cookies;
    }
    async _updateRequestCookieHeader(url, headers) {
      if (getHeader(headers, "cookie") !== undefined)
        return;
      const cookies = await this._cookies(url);
      if (cookies.length) {
        const valueArray = cookies.map((c) => `${c.name}=${c.value}`);
        setHeader(headers, "cookie", valueArray.join("; "));
      }
    }
    async _sendRequestWithRetries(progress2, url, options, postData, maxRetries) {
      var _maxRetries;
      (_maxRetries = maxRetries) !== null && _maxRetries !== undefined || (maxRetries = 0);
      let backoff = 250;
      for (let i = 0;i <= maxRetries; i++) {
        try {
          return await this._sendRequest(progress2, url, options, postData);
        } catch (e) {
          e = (0, _socksClientCertificatesInterceptor.rewriteOpenSSLErrorIfNeeded)(e);
          if (maxRetries === 0)
            throw e;
          if (i === maxRetries || options.deadline && (0, _utils.monotonicTime)() + backoff > options.deadline)
            throw new Error(`Failed after ${i + 1} attempt(s): ${e}`);
          if (e.code !== "ECONNRESET")
            throw e;
          progress2.log(`  Received ECONNRESET, will retry after ${backoff}ms.`);
          await new Promise((f) => setTimeout(f, backoff));
          backoff *= 2;
        }
      }
      throw new Error("Unreachable");
    }
    async _sendRequest(progress2, url, options, postData) {
      var _getHeader;
      await this._updateRequestCookieHeader(url, options.headers);
      const requestCookies = ((_getHeader = getHeader(options.headers, "cookie")) === null || _getHeader === undefined ? undefined : _getHeader.split(";").map((p) => {
        const [name, value] = p.split("=").map((v) => v.trim());
        return {
          name,
          value
        };
      })) || [];
      const requestEvent = {
        url,
        method: options.method,
        headers: options.headers,
        cookies: requestCookies,
        postData
      };
      this.emit(APIRequestContext.Events.Request, requestEvent);
      return new Promise((fulfill, reject) => {
        const requestConstructor = (url.protocol === "https:" ? _https.default : _http.default).request;
        const agent = options.agent || (url.protocol === "https:" ? _happyEyeballs.httpsHappyEyeballsAgent : _happyEyeballs.httpHappyEyeballsAgent);
        const requestOptions = {
          ...options,
          agent
        };
        const startAt = (0, _utils.monotonicTime)();
        let reusedSocketAt;
        let dnsLookupAt;
        let tcpConnectionAt;
        let tlsHandshakeAt;
        let requestFinishAt;
        let serverIPAddress;
        let serverPort;
        let securityDetails;
        const listeners = [];
        const request = requestConstructor(url, requestOptions, async (response) => {
          const responseAt = (0, _utils.monotonicTime)();
          const notifyRequestFinished = (body2) => {
            var _tlsHandshakeAt;
            const endAt = (0, _utils.monotonicTime)();
            const connectEnd = (_tlsHandshakeAt = tlsHandshakeAt) !== null && _tlsHandshakeAt !== undefined ? _tlsHandshakeAt : tcpConnectionAt;
            const timings = {
              send: requestFinishAt - startAt,
              wait: responseAt - requestFinishAt,
              receive: endAt - responseAt,
              dns: dnsLookupAt ? dnsLookupAt - startAt : -1,
              connect: connectEnd ? connectEnd - startAt : -1,
              ssl: tlsHandshakeAt ? tlsHandshakeAt - tcpConnectionAt : -1,
              blocked: reusedSocketAt ? reusedSocketAt - startAt : -1
            };
            const requestFinishedEvent = {
              requestEvent,
              httpVersion: response.httpVersion,
              statusCode: response.statusCode || 0,
              statusMessage: response.statusMessage || "",
              headers: response.headers,
              rawHeaders: response.rawHeaders,
              cookies,
              body: body2,
              timings,
              serverIPAddress,
              serverPort,
              securityDetails
            };
            this.emit(APIRequestContext.Events.RequestFinished, requestFinishedEvent);
          };
          progress2.log(`← ${response.statusCode} ${response.statusMessage}`);
          for (const [name, value] of Object.entries(response.headers))
            progress2.log(`  ${name}: ${value}`);
          const cookies = this._parseSetCookieHeader(response.url || url.toString(), response.headers["set-cookie"]);
          if (cookies.length) {
            try {
              await this._addCookies(cookies);
            } catch (e) {
              await Promise.all(cookies.map((c) => this._addCookies([c]).catch(() => {
              })));
            }
          }
          if (redirectStatus.includes(response.statusCode) && options.maxRedirects >= 0) {
            var _response$headers$loc;
            if (!options.maxRedirects) {
              reject(new Error("Max redirect count exceeded"));
              request.destroy();
              return;
            }
            const headers = {
              ...options.headers
            };
            removeHeader(headers, `cookie`);
            const status = response.statusCode;
            let method = options.method;
            if ((status === 301 || status === 302) && method === "POST" || status === 303 && !["GET", "HEAD"].includes(method)) {
              method = "GET";
              postData = undefined;
              removeHeader(headers, `content-encoding`);
              removeHeader(headers, `content-language`);
              removeHeader(headers, `content-length`);
              removeHeader(headers, `content-location`);
              removeHeader(headers, `content-type`);
            }
            const redirectOptions = {
              method,
              headers,
              agent: options.agent,
              maxRedirects: options.maxRedirects - 1,
              timeout: options.timeout,
              deadline: options.deadline,
              ...(0, _socksClientCertificatesInterceptor.getMatchingTLSOptionsForOrigin)(this._defaultOptions().clientCertificates, url.origin),
              __testHookLookup: options.__testHookLookup
            };
            if (options.rejectUnauthorized === false)
              redirectOptions.rejectUnauthorized = false;
            const locationHeaderValue = Buffer.from((_response$headers$loc = response.headers.location) !== null && _response$headers$loc !== undefined ? _response$headers$loc : "", "latin1").toString("utf8");
            if (locationHeaderValue) {
              let locationURL;
              try {
                locationURL = new URL(locationHeaderValue, url);
              } catch (error) {
                reject(new Error(`uri requested responds with an invalid redirect URL: ${locationHeaderValue}`));
                request.destroy();
                return;
              }
              if (headers["host"])
                headers["host"] = locationURL.host;
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, locationURL, redirectOptions, postData));
              request.destroy();
              return;
            }
          }
          if (response.statusCode === 401 && !getHeader(options.headers, "authorization")) {
            const auth = response.headers["www-authenticate"];
            const credentials = this._getHttpCredentials(url);
            if (auth !== null && auth !== undefined && auth.trim().startsWith("Basic") && credentials) {
              setBasicAuthorizationHeader(options.headers, credentials);
              notifyRequestFinished();
              fulfill(this._sendRequest(progress2, url, options, postData));
              request.destroy();
              return;
            }
          }
          response.on("aborted", () => reject(new Error("aborted")));
          const chunks = [];
          const notifyBodyFinished = () => {
            const body2 = Buffer.concat(chunks);
            notifyRequestFinished(body2);
            fulfill({
              url: response.url || url.toString(),
              status: response.statusCode || 0,
              statusText: response.statusMessage || "",
              headers: toHeadersArray(response.rawHeaders),
              body: body2
            });
          };
          let body = response;
          let transform;
          const encoding = response.headers["content-encoding"];
          if (encoding === "gzip" || encoding === "x-gzip") {
            transform = _zlib.default.createGunzip({
              flush: _zlib.default.constants.Z_SYNC_FLUSH,
              finishFlush: _zlib.default.constants.Z_SYNC_FLUSH
            });
          } else if (encoding === "br") {
            transform = _zlib.default.createBrotliDecompress({
              flush: _zlib.default.constants.BROTLI_OPERATION_FLUSH,
              finishFlush: _zlib.default.constants.BROTLI_OPERATION_FLUSH
            });
          } else if (encoding === "deflate") {
            transform = _zlib.default.createInflate();
          }
          if (transform) {
            const emptyStreamTransform = new SafeEmptyStreamTransform(notifyBodyFinished);
            body = (0, _stream.pipeline)(response, emptyStreamTransform, transform, (e) => {
              if (e)
                reject(new Error(`failed to decompress '${encoding}' encoding: ${e.message}`));
            });
            body.on("error", (e) => reject(new Error(`failed to decompress '${encoding}' encoding: ${e}`)));
          } else {
            body.on("error", reject);
          }
          body.on("data", (chunk) => chunks.push(chunk));
          body.on("end", notifyBodyFinished);
        });
        request.on("error", reject);
        listeners.push(_utils.eventsHelper.addEventListener(this, APIRequestContext.Events.Dispose, () => {
          reject(new Error("Request context disposed."));
          request.destroy();
        }));
        request.on("close", () => _utils.eventsHelper.removeEventListeners(listeners));
        request.on("socket", (socket) => {
          var _tcpConnectionAt, _tcpConnectionAt3;
          if (request.reusedSocket) {
            reusedSocketAt = (0, _utils.monotonicTime)();
            return;
          }
          const happyEyeBallsTimings = (0, _happyEyeballs.timingForSocket)(socket);
          dnsLookupAt = happyEyeBallsTimings.dnsLookupAt;
          (_tcpConnectionAt = tcpConnectionAt) !== null && _tcpConnectionAt !== undefined || (tcpConnectionAt = happyEyeBallsTimings.tcpConnectionAt);
          listeners.push(_utils.eventsHelper.addEventListener(socket, "lookup", () => {
            dnsLookupAt = (0, _utils.monotonicTime)();
          }), _utils.eventsHelper.addEventListener(socket, "connect", () => {
            var _tcpConnectionAt2;
            (_tcpConnectionAt2 = tcpConnectionAt) !== null && _tcpConnectionAt2 !== undefined || (tcpConnectionAt = (0, _utils.monotonicTime)());
          }), _utils.eventsHelper.addEventListener(socket, "secureConnect", () => {
            tlsHandshakeAt = (0, _utils.monotonicTime)();
            if (socket instanceof _tls.TLSSocket) {
              var _socket$getProtocol;
              const peerCertificate = socket.getPeerCertificate();
              securityDetails = {
                protocol: (_socket$getProtocol = socket.getProtocol()) !== null && _socket$getProtocol !== undefined ? _socket$getProtocol : undefined,
                subjectName: peerCertificate.subject.CN,
                validFrom: new Date(peerCertificate.valid_from).getTime() / 1000,
                validTo: new Date(peerCertificate.valid_to).getTime() / 1000,
                issuer: peerCertificate.issuer.CN
              };
            }
          }));
          if (agent instanceof _utilsBundle.SocksProxyAgent)
            (_tcpConnectionAt3 = tcpConnectionAt) !== null && _tcpConnectionAt3 !== undefined || (tcpConnectionAt = (0, _utils.monotonicTime)());
          serverIPAddress = socket.remoteAddress;
          serverPort = socket.remotePort;
        });
        request.on("finish", () => {
          requestFinishAt = (0, _utils.monotonicTime)();
        });
        request.on("proxyConnect", () => {
          var _tcpConnectionAt4;
          (_tcpConnectionAt4 = tcpConnectionAt) !== null && _tcpConnectionAt4 !== undefined || (tcpConnectionAt = (0, _utils.monotonicTime)());
        });
        progress2.log(`→ ${options.method} ${url.toString()}`);
        if (options.headers) {
          for (const [name, value] of Object.entries(options.headers))
            progress2.log(`  ${name}: ${value}`);
        }
        if (options.deadline) {
          const rejectOnTimeout = () => {
            reject(new Error(`Request timed out after ${options.timeout}ms`));
            request.destroy();
          };
          const remaining = options.deadline - (0, _utils.monotonicTime)();
          if (remaining <= 0) {
            rejectOnTimeout();
            return;
          }
          request.setTimeout(remaining, rejectOnTimeout);
        }
        if (postData)
          request.write(postData);
        request.end();
      });
    }
    _getHttpCredentials(url) {
      var _this$_defaultOptions, _this$_defaultOptions2;
      if (!((_this$_defaultOptions = this._defaultOptions().httpCredentials) !== null && _this$_defaultOptions !== undefined && _this$_defaultOptions.origin) || url.origin.toLowerCase() === ((_this$_defaultOptions2 = this._defaultOptions().httpCredentials) === null || _this$_defaultOptions2 === undefined || (_this$_defaultOptions2 = _this$_defaultOptions2.origin) === null || _this$_defaultOptions2 === undefined ? undefined : _this$_defaultOptions2.toLowerCase()))
        return this._defaultOptions().httpCredentials;
      return;
    }
  }
  exports.APIRequestContext = APIRequestContext;
  APIRequestContext.Events = {
    Dispose: "dispose",
    Request: "request",
    RequestFinished: "requestfinished"
  };
  APIRequestContext.allInstances = new Set;

  class SafeEmptyStreamTransform extends _stream.Transform {
    constructor(onEmptyStreamCallback) {
      super();
      this._receivedSomeData = false;
      this._onEmptyStreamCallback = undefined;
      this._onEmptyStreamCallback = onEmptyStreamCallback;
    }
    _transform(chunk, encoding, callback) {
      this._receivedSomeData = true;
      callback(null, chunk);
    }
    _flush(callback) {
      if (this._receivedSomeData)
        callback(null);
      else
        this._onEmptyStreamCallback();
    }
  }

  class BrowserContextAPIRequestContext extends APIRequestContext {
    constructor(context) {
      super(context);
      this._context = undefined;
      this._context = context;
      context.once(_browserContext.BrowserContext.Events.Close, () => this._disposeImpl());
    }
    tracing() {
      return this._context.tracing;
    }
    async dispose(options) {
      this._closeReason = options.reason;
      this.fetchResponses.clear();
    }
    _defaultOptions() {
      return {
        userAgent: this._context._options.userAgent || this._context._browser.userAgent(),
        extraHTTPHeaders: this._context._options.extraHTTPHeaders,
        httpCredentials: this._context._options.httpCredentials,
        proxy: this._context._options.proxy || this._context._browser.options.proxy,
        timeoutSettings: this._context._timeoutSettings,
        ignoreHTTPSErrors: this._context._options.ignoreHTTPSErrors,
        baseURL: this._context._options.baseURL,
        clientCertificates: this._context._options.clientCertificates
      };
    }
    async _addCookies(cookies) {
      await this._context.addCookies(cookies);
    }
    async _cookies(url) {
      return await this._context.cookies(url.toString());
    }
    async storageState() {
      return this._context.storageState();
    }
  }
  exports.BrowserContextAPIRequestContext = BrowserContextAPIRequestContext;

  class GlobalAPIRequestContext extends APIRequestContext {
    constructor(playwright, options) {
      super(playwright);
      this._cookieStore = new _cookieStore.CookieStore;
      this._options = undefined;
      this._origins = undefined;
      this._tracing = undefined;
      this.attribution.context = this;
      const timeoutSettings = new _timeoutSettings.TimeoutSettings;
      if (options.timeout !== undefined)
        timeoutSettings.setDefaultTimeout(options.timeout);
      const proxy = options.proxy;
      if (proxy !== null && proxy !== undefined && proxy.server) {
        let url = proxy === null || proxy === undefined ? undefined : proxy.server.trim();
        if (!/^\w+:\/\//.test(url))
          url = "http://" + url;
        proxy.server = url;
      }
      if (options.storageState) {
        this._origins = options.storageState.origins;
        this._cookieStore.addCookies(options.storageState.cookies || []);
      }
      (0, _browserContext.verifyClientCertificates)(options.clientCertificates);
      this._options = {
        baseURL: options.baseURL,
        userAgent: options.userAgent || (0, _userAgent.getUserAgent)(),
        extraHTTPHeaders: options.extraHTTPHeaders,
        ignoreHTTPSErrors: !!options.ignoreHTTPSErrors,
        httpCredentials: options.httpCredentials,
        clientCertificates: options.clientCertificates,
        proxy,
        timeoutSettings
      };
      this._tracing = new _tracing.Tracing(this, options.tracesDir);
    }
    tracing() {
      return this._tracing;
    }
    async dispose(options) {
      this._closeReason = options.reason;
      await this._tracing.flush();
      await this._tracing.deleteTmpTracesDir();
      this._disposeImpl();
    }
    _defaultOptions() {
      return this._options;
    }
    async _addCookies(cookies) {
      this._cookieStore.addCookies(cookies);
    }
    async _cookies(url) {
      return this._cookieStore.cookies(url);
    }
    async storageState() {
      return {
        cookies: this._cookieStore.allCookies(),
        origins: this._origins || []
      };
    }
  }
  exports.GlobalAPIRequestContext = GlobalAPIRequestContext;
  function createProxyAgent(proxy) {
    var _proxyURL$protocol;
    const proxyURL = new URL(proxy.server);
    if ((_proxyURL$protocol = proxyURL.protocol) !== null && _proxyURL$protocol !== undefined && _proxyURL$protocol.startsWith("socks"))
      return new _utilsBundle.SocksProxyAgent(proxyURL);
    if (proxy.username)
      proxyURL.username = proxy.username;
    if (proxy.password)
      proxyURL.password = proxy.password;
    return new _utilsBundle.HttpsProxyAgent(proxyURL);
  }
  function toHeadersArray(rawHeaders) {
    const result = [];
    for (let i = 0;i < rawHeaders.length; i += 2)
      result.push({
        name: rawHeaders[i],
        value: rawHeaders[i + 1]
      });
    return result;
  }
  var redirectStatus = [301, 302, 303, 307, 308];
  function parseCookie(header) {
    const raw = (0, _cookieStore.parseRawCookie)(header);
    if (!raw)
      return null;
    const cookie = {
      domain: "",
      path: "",
      expires: -1,
      httpOnly: false,
      secure: false,
      sameSite: "Lax",
      ...raw
    };
    return cookie;
  }
  function serializePostData(params, headers) {
    (0, _utils.assert)((params.postData ? 1 : 0) + (params.jsonData ? 1 : 0) + (params.formData ? 1 : 0) + (params.multipartData ? 1 : 0) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
    if (params.jsonData !== undefined) {
      setHeader(headers, "content-type", "application/json", true);
      return Buffer.from(params.jsonData, "utf8");
    } else if (params.formData) {
      const searchParams = new URLSearchParams;
      for (const {
        name,
        value
      } of params.formData)
        searchParams.append(name, value);
      setHeader(headers, "content-type", "application/x-www-form-urlencoded", true);
      return Buffer.from(searchParams.toString(), "utf8");
    } else if (params.multipartData) {
      const formData = new _formData.MultipartFormData;
      for (const field of params.multipartData) {
        if (field.file)
          formData.addFileField(field.name, field.file);
        else if (field.value)
          formData.addField(field.name, field.value);
      }
      setHeader(headers, "content-type", formData.contentTypeHeader(), true);
      return formData.finish();
    } else if (params.postData !== undefined) {
      setHeader(headers, "content-type", "application/octet-stream", true);
      return params.postData;
    }
    return;
  }
  function setHeader(headers, name, value, keepExisting = false) {
    const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    if (!existing)
      headers[name] = value;
    else if (!keepExisting)
      headers[existing[0]] = value;
  }
  function getHeader(headers, name) {
    const existing = Object.entries(headers).find((pair) => pair[0].toLowerCase() === name.toLowerCase());
    return existing ? existing[1] : undefined;
  }
  function removeHeader(headers, name) {
    delete headers[name];
  }
  function shouldBypassProxy(url, bypass) {
    if (!bypass)
      return false;
    const domains = bypass.split(",").map((s) => {
      s = s.trim();
      if (!s.startsWith("."))
        s = "." + s;
      return s;
    });
    const domain = "." + url.hostname;
    return domains.some((d) => domain.endsWith(d));
  }
  function setBasicAuthorizationHeader(headers, credentials) {
    const {
      username,
      password
    } = credentials;
    const encoded = Buffer.from(`${username || ""}:${password || ""}`).toString("base64");
    setHeader(headers, "authorization", `Basic ${encoded}`);
  }
});

// node_modules/playwright-core/lib/server/dispatchers/jsHandleDispatcher.js
var require_jsHandleDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JSHandleDispatcher = undefined;
  exports.parseArgument = parseArgument;
  exports.parseValue = parseValue;
  exports.serializeResult = serializeResult;
  var _dispatcher = require_dispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _serializers = require_serializers();

  class JSHandleDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, jsHandle) {
      super(scope, jsHandle, jsHandle.asElement() ? "ElementHandle" : "JSHandle", {
        preview: jsHandle.toString()
      });
      this._type_JSHandle = true;
      jsHandle._setPreviewCallback((preview) => this._dispatchEvent("previewUpdated", {
        preview
      }));
    }
    async evaluateExpression(params) {
      return {
        value: serializeResult(await this._object.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, parseArgument(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const jsHandle = await this._object.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, parseArgument(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle)
      };
    }
    async getProperty(params) {
      const jsHandle = await this._object.getProperty(params.name);
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), jsHandle)
      };
    }
    async getPropertyList() {
      const map = await this._object.getProperties();
      const properties = [];
      for (const [name, value] of map)
        properties.push({
          name,
          value: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this.parentScope(), value)
        });
      return {
        properties
      };
    }
    async jsonValue() {
      return {
        value: serializeResult(await this._object.jsonValue())
      };
    }
    async dispose(_, metadata) {
      metadata.potentiallyClosesScope = true;
      this._object.dispose();
      this._dispose();
    }
  }
  exports.JSHandleDispatcher = JSHandleDispatcher;
  function parseArgument(arg) {
    return (0, _serializers.parseSerializedValue)(arg.value, arg.handles.map((a) => a._object));
  }
  function parseValue(v) {
    return (0, _serializers.parseSerializedValue)(v, []);
  }
  function serializeResult(arg) {
    return (0, _serializers.serializeValue)(arg, (value) => ({
      fallThrough: value
    }));
  }
});

// node_modules/playwright-core/lib/server/dispatchers/elementHandlerDispatcher.js
var require_elementHandlerDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElementHandleDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _frameDispatcher = require_frameDispatcher();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class ElementHandleDispatcher extends _jsHandleDispatcher.JSHandleDispatcher {
    static from(scope, handle) {
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromNullable(scope, handle) {
      if (!handle)
        return;
      return (0, _dispatcher.existingDispatcher)(handle) || new ElementHandleDispatcher(scope, handle);
    }
    static fromJSHandle(scope, handle) {
      const result = (0, _dispatcher.existingDispatcher)(handle);
      if (result)
        return result;
      return handle.asElement() ? new ElementHandleDispatcher(scope, handle.asElement()) : new _jsHandleDispatcher.JSHandleDispatcher(scope, handle);
    }
    constructor(scope, elementHandle) {
      super(scope, elementHandle);
      this._type_ElementHandle = true;
      this._elementHandle = undefined;
      this._elementHandle = elementHandle;
    }
    async ownerFrame(params, metadata) {
      const frame = await this._elementHandle.ownerFrame();
      return {
        frame: frame ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined
      };
    }
    async contentFrame(params, metadata) {
      const frame = await this._elementHandle.contentFrame();
      return {
        frame: frame ? _frameDispatcher.FrameDispatcher.from(this._browserContextDispatcher(), frame) : undefined
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._elementHandle.getAttribute(metadata, params.name);
      return {
        value: value === null ? undefined : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._elementHandle.inputValue(metadata);
      return {
        value
      };
    }
    async textContent(params, metadata) {
      const value = await this._elementHandle.textContent(metadata);
      return {
        value: value === null ? undefined : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._elementHandle.innerText(metadata)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._elementHandle.innerHTML(metadata)
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._elementHandle.isChecked(metadata)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._elementHandle.isDisabled(metadata)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._elementHandle.isEditable(metadata)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._elementHandle.isEnabled(metadata)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._elementHandle.isHidden(metadata)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._elementHandle.isVisible(metadata)
      };
    }
    async dispatchEvent(params, metadata) {
      await this._elementHandle.dispatchEvent(metadata, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit));
    }
    async scrollIntoViewIfNeeded(params, metadata) {
      await this._elementHandle.scrollIntoViewIfNeeded(metadata, params);
    }
    async hover(params, metadata) {
      return await this._elementHandle.hover(metadata, params);
    }
    async click(params, metadata) {
      return await this._elementHandle.click(metadata, params);
    }
    async dblclick(params, metadata) {
      return await this._elementHandle.dblclick(metadata, params);
    }
    async tap(params, metadata) {
      return await this._elementHandle.tap(metadata, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._elementHandle.selectOption(metadata, elements, params.options || [], params)
      };
    }
    async fill(params, metadata) {
      return await this._elementHandle.fill(metadata, params.value, params);
    }
    async selectText(params, metadata) {
      await this._elementHandle.selectText(metadata, params);
    }
    async setInputFiles(params, metadata) {
      return await this._elementHandle.setInputFiles(metadata, params);
    }
    async focus(params, metadata) {
      await this._elementHandle.focus(metadata);
    }
    async type(params, metadata) {
      return await this._elementHandle.type(metadata, params.text, params);
    }
    async press(params, metadata) {
      return await this._elementHandle.press(metadata, params.key, params);
    }
    async check(params, metadata) {
      return await this._elementHandle.check(metadata, params);
    }
    async uncheck(params, metadata) {
      return await this._elementHandle.uncheck(metadata, params);
    }
    async boundingBox(params, metadata) {
      const value = await this._elementHandle.boundingBox();
      return {
        value: value || undefined
      };
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      return {
        binary: await this._elementHandle.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async querySelector(params, metadata) {
      const handle = await this._elementHandle.querySelector(params.selector, params);
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), handle)
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._elementHandle.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => ElementHandleDispatcher.from(this.parentScope(), e))
      };
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._elementHandle.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForElementState(params, metadata) {
      await this._elementHandle.waitForElementState(metadata, params.state, params);
    }
    async waitForSelector(params, metadata) {
      return {
        element: ElementHandleDispatcher.fromNullable(this.parentScope(), await this._elementHandle.waitForSelector(metadata, params.selector, params))
      };
    }
    _browserContextDispatcher() {
      const scope = this.parentScope();
      if (scope instanceof _browserContextDispatcher.BrowserContextDispatcher)
        return scope;
      if (scope instanceof _pageDispatcher.PageDispatcher)
        return scope.parentScope();
      if (scope instanceof _pageDispatcher.WorkerDispatcher || scope instanceof _frameDispatcher.FrameDispatcher) {
        const parentScope = scope.parentScope();
        if (parentScope instanceof _browserContextDispatcher.BrowserContextDispatcher)
          return parentScope;
        return parentScope.parentScope();
      }
      throw new Error("ElementHandle belongs to unexpected scope");
    }
  }
  exports.ElementHandleDispatcher = ElementHandleDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/streamDispatcher.js
var require_streamDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StreamDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _utils = require_utils();

  class StreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, stream) {
      super(scope, {
        guid: "stream@" + (0, _utils.createGuid)(),
        stream
      }, "Stream", {});
      this._type_Stream = true;
      this._ended = false;
      stream.once("end", () => this._ended = true);
      stream.once("error", () => this._ended = true);
    }
    async read(params) {
      const stream = this._object.stream;
      if (this._ended)
        return {
          binary: Buffer.from("")
        };
      if (!stream.readableLength) {
        const readyPromise = new _utils.ManualPromise;
        const done = () => readyPromise.resolve();
        stream.on("readable", done);
        stream.on("end", done);
        stream.on("error", done);
        await readyPromise;
        stream.off("readable", done);
        stream.off("end", done);
        stream.off("error", done);
      }
      const buffer = stream.read(Math.min(stream.readableLength, params.size || stream.readableLength));
      return {
        binary: buffer || Buffer.from("")
      };
    }
    async close() {
      this._object.stream.destroy();
    }
  }
  exports.StreamDispatcher = StreamDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/artifactDispatcher.js
var require_artifactDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ArtifactDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _streamDispatcher = require_streamDispatcher();
  var _fs = _interopRequireDefault(__require("fs"));
  var _fileUtils = require_fileUtils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class ArtifactDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, artifact) {
      return ArtifactDispatcher.fromNullable(parentScope, artifact);
    }
    static fromNullable(parentScope, artifact) {
      if (!artifact)
        return;
      const result = (0, _dispatcher.existingDispatcher)(artifact);
      return result || new ArtifactDispatcher(parentScope, artifact);
    }
    constructor(scope, artifact) {
      super(scope, artifact, "Artifact", {
        absolutePath: artifact.localPath()
      });
      this._type_Artifact = true;
    }
    async pathAfterFinished() {
      const path = await this._object.localPathAfterFinished();
      return {
        value: path
      };
    }
    async saveAs(params) {
      return await new Promise((resolve, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            await (0, _fileUtils.mkdirIfNeeded)(params.path);
            await _fs.default.promises.copyFile(localPath, params.path);
            resolve();
          } catch (e) {
            reject(e);
          }
        });
      });
    }
    async saveAsStream() {
      return await new Promise((resolve, reject) => {
        this._object.saveAs(async (localPath, error) => {
          if (error) {
            reject(error);
            return;
          }
          try {
            const readable = _fs.default.createReadStream(localPath, {
              highWaterMark: 1024 * 1024
            });
            const stream = new _streamDispatcher.StreamDispatcher(this, readable);
            resolve({
              stream
            });
            await new Promise((resolve2) => {
              readable.on("close", resolve2);
              readable.on("end", resolve2);
              readable.on("error", resolve2);
            });
          } catch (e) {
            reject(e);
          }
        });
      });
    }
    async stream() {
      const fileName = await this._object.localPathAfterFinished();
      const readable = _fs.default.createReadStream(fileName, {
        highWaterMark: 1024 * 1024
      });
      return {
        stream: new _streamDispatcher.StreamDispatcher(this, readable)
      };
    }
    async failure() {
      const error = await this._object.failureError();
      return {
        error: error || undefined
      };
    }
    async cancel() {
      await this._object.cancel();
    }
    async delete(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.delete();
      this._dispose();
    }
  }
  exports.ArtifactDispatcher = ArtifactDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/tracingDispatcher.js
var require_tracingDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TracingDispatcher = undefined;
  var _artifactDispatcher = require_artifactDispatcher();
  var _dispatcher = require_dispatcher();

  class TracingDispatcher extends _dispatcher.Dispatcher {
    static from(scope, tracing) {
      const result = (0, _dispatcher.existingDispatcher)(tracing);
      return result || new TracingDispatcher(scope, tracing);
    }
    constructor(scope, tracing) {
      super(scope, tracing, "Tracing", {});
      this._type_Tracing = true;
    }
    async tracingStart(params) {
      await this._object.start(params);
    }
    async tracingStartChunk(params) {
      return await this._object.startChunk(params);
    }
    async tracingGroup(params, metadata) {
      const {
        name,
        location: location2
      } = params;
      await this._object.group(name, location2, metadata);
    }
    async tracingGroupEnd(params) {
      await this._object.groupEnd();
    }
    async tracingStopChunk(params) {
      const {
        artifact,
        entries
      } = await this._object.stopChunk(params);
      return {
        artifact: artifact ? _artifactDispatcher.ArtifactDispatcher.from(this, artifact) : undefined,
        entries
      };
    }
    async tracingStop(params) {
      await this._object.stop();
    }
  }
  exports.TracingDispatcher = TracingDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/networkDispatchers.js
var require_networkDispatchers = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocketDispatcher = exports.RouteDispatcher = exports.ResponseDispatcher = exports.RequestDispatcher = exports.APIRequestContextDispatcher = undefined;
  var _network = require_network2();
  var _dispatcher = require_dispatcher();
  var _tracingDispatcher = require_tracingDispatcher();
  var _frameDispatcher = require_frameDispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class RequestDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new RequestDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? RequestDispatcher.from(scope, request) : undefined;
    }
    constructor(scope, request) {
      var _request$frame;
      const postData = request.postDataBuffer();
      const frame = request.frame();
      const page = (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page;
      const pageDispatcher = page ? (0, _dispatcher.existingDispatcher)(page) : null;
      const frameDispatcher = frame ? _frameDispatcher.FrameDispatcher.from(scope, frame) : null;
      super(pageDispatcher || frameDispatcher || scope, request, "Request", {
        frame: _frameDispatcher.FrameDispatcher.fromNullable(scope, request.frame()),
        serviceWorker: _pageDispatcher.WorkerDispatcher.fromNullable(scope, request.serviceWorker()),
        url: request.url(),
        resourceType: request.resourceType(),
        method: request.method(),
        postData: postData === null ? undefined : postData,
        headers: request.headers(),
        isNavigationRequest: request.isNavigationRequest(),
        redirectedFrom: RequestDispatcher.fromNullable(scope, request.redirectedFrom())
      });
      this._type_Request = undefined;
      this._browserContextDispatcher = undefined;
      this._type_Request = true;
      this._browserContextDispatcher = scope;
    }
    async rawRequestHeaders(params) {
      return {
        headers: await this._object.rawRequestHeaders()
      };
    }
    async response() {
      return {
        response: ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._object.response())
      };
    }
  }
  exports.RequestDispatcher = RequestDispatcher;

  class ResponseDispatcher extends _dispatcher.Dispatcher {
    static from(scope, response) {
      const result = (0, _dispatcher.existingDispatcher)(response);
      const requestDispatcher = RequestDispatcher.from(scope, response.request());
      return result || new ResponseDispatcher(requestDispatcher, response);
    }
    static fromNullable(scope, response) {
      return response ? ResponseDispatcher.from(scope, response) : undefined;
    }
    constructor(scope, response) {
      super(scope, response, "Response", {
        request: scope,
        url: response.url(),
        status: response.status(),
        statusText: response.statusText(),
        headers: response.headers(),
        timing: response.timing(),
        fromServiceWorker: response.fromServiceWorker()
      });
      this._type_Response = true;
    }
    async body() {
      return {
        binary: await this._object.body()
      };
    }
    async securityDetails() {
      return {
        value: await this._object.securityDetails() || undefined
      };
    }
    async serverAddr() {
      return {
        value: await this._object.serverAddr() || undefined
      };
    }
    async rawResponseHeaders(params) {
      return {
        headers: await this._object.rawResponseHeaders()
      };
    }
    async sizes(params) {
      return {
        sizes: await this._object.sizes()
      };
    }
  }
  exports.ResponseDispatcher = ResponseDispatcher;

  class RouteDispatcher extends _dispatcher.Dispatcher {
    static from(scope, route) {
      const result = (0, _dispatcher.existingDispatcher)(route);
      return result || new RouteDispatcher(scope, route);
    }
    constructor(scope, route) {
      super(scope, route, "Route", {
        request: scope
      });
      this._type_Route = true;
    }
    async continue(params, metadata) {
      await this._object.continue({
        url: params.url,
        method: params.method,
        headers: params.headers,
        postData: params.postData,
        isFallback: params.isFallback
      });
    }
    async fulfill(params, metadata) {
      await this._object.fulfill(params);
    }
    async abort(params, metadata) {
      await this._object.abort(params.errorCode || "failed");
    }
    async redirectNavigationRequest(params) {
      await this._object.redirectNavigationRequest(params.url);
    }
  }
  exports.RouteDispatcher = RouteDispatcher;

  class WebSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, webSocket) {
      super(scope, webSocket, "WebSocket", {
        url: webSocket.url()
      });
      this._type_EventTarget = true;
      this._type_WebSocket = true;
      this.addObjectListener(_network.WebSocket.Events.FrameSent, (event) => this._dispatchEvent("frameSent", event));
      this.addObjectListener(_network.WebSocket.Events.FrameReceived, (event) => this._dispatchEvent("frameReceived", event));
      this.addObjectListener(_network.WebSocket.Events.SocketError, (error) => this._dispatchEvent("socketError", {
        error
      }));
      this.addObjectListener(_network.WebSocket.Events.Close, () => this._dispatchEvent("close", {}));
    }
  }
  exports.WebSocketDispatcher = WebSocketDispatcher;

  class APIRequestContextDispatcher extends _dispatcher.Dispatcher {
    static from(scope, request) {
      const result = (0, _dispatcher.existingDispatcher)(request);
      return result || new APIRequestContextDispatcher(scope, request);
    }
    static fromNullable(scope, request) {
      return request ? APIRequestContextDispatcher.from(scope, request) : undefined;
    }
    constructor(parentScope, request) {
      const tracing = _tracingDispatcher.TracingDispatcher.from(parentScope, request.tracing());
      super(parentScope, request, "APIRequestContext", {
        tracing
      });
      this._type_APIRequestContext = true;
      this.adopt(tracing);
    }
    async storageState() {
      return this._object.storageState();
    }
    async dispose(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.dispose(params);
      this._dispose();
    }
    async fetch(params, metadata) {
      const fetchResponse = await this._object.fetch(params, metadata);
      return {
        response: {
          url: fetchResponse.url,
          status: fetchResponse.status,
          statusText: fetchResponse.statusText,
          headers: fetchResponse.headers,
          fetchUid: fetchResponse.fetchUid
        }
      };
    }
    async fetchResponseBody(params) {
      return {
        binary: this._object.fetchResponses.get(params.fetchUid)
      };
    }
    async fetchLog(params) {
      const log = this._object.fetchLog.get(params.fetchUid) || [];
      return {
        log
      };
    }
    async disposeAPIResponse(params) {
      this._object.disposeResponse(params.fetchUid);
    }
  }
  exports.APIRequestContextDispatcher = APIRequestContextDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/frameDispatcher.js
var require_frameDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FrameDispatcher = undefined;
  var _frames = require_frames();
  var _dispatcher = require_dispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _utils = require_utils();
  var _ariaSnapshot = require_ariaSnapshot2();

  class FrameDispatcher extends _dispatcher.Dispatcher {
    static from(scope, frame) {
      const result = (0, _dispatcher.existingDispatcher)(frame);
      return result || new FrameDispatcher(scope, frame);
    }
    static fromNullable(scope, frame) {
      if (!frame)
        return;
      return FrameDispatcher.from(scope, frame);
    }
    constructor(scope, frame) {
      (0, _utils.debugAssert)(frame._page.mainFrame(), "Cannot determine whether the frame is a main frame");
      const gcBucket = frame._page.mainFrame() === frame ? "MainFrame" : "Frame";
      const pageDispatcher = (0, _dispatcher.existingDispatcher)(frame._page);
      super(pageDispatcher || scope, frame, "Frame", {
        url: frame.url(),
        name: frame.name(),
        parentFrame: FrameDispatcher.fromNullable(scope, frame.parentFrame()),
        loadStates: Array.from(frame._firedLifecycleEvents)
      }, gcBucket);
      this._type_Frame = true;
      this._frame = undefined;
      this._browserContextDispatcher = undefined;
      this._browserContextDispatcher = scope;
      this._frame = frame;
      this.addObjectListener(_frames.Frame.Events.AddLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          add: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.RemoveLifecycle, (lifecycleEvent) => {
        this._dispatchEvent("loadstate", {
          remove: lifecycleEvent
        });
      });
      this.addObjectListener(_frames.Frame.Events.InternalNavigation, (event) => {
        if (!event.isPublic)
          return;
        const params = {
          url: event.url,
          name: event.name,
          error: event.error ? event.error.message : undefined
        };
        if (event.newDocument)
          params.newDocument = {
            request: _networkDispatchers.RequestDispatcher.fromNullable(this._browserContextDispatcher, event.newDocument.request || null)
          };
        this._dispatchEvent("navigated", params);
      });
    }
    async goto(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this._browserContextDispatcher, await this._frame.goto(metadata, params.url, params))
      };
    }
    async frameElement() {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.frameElement())
      };
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame.evaluateExpressionHandle(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async waitForSelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.waitForSelector(metadata, params.selector, params))
      };
    }
    async dispatchEvent(params, metadata) {
      return this._frame.dispatchEvent(metadata, params.selector, params.type, (0, _jsHandleDispatcher.parseArgument)(params.eventInit), params);
    }
    async evalOnSelector(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelector(params.selector, !!params.strict, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evalOnSelectorAll(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._frame.evalOnSelectorAll(params.selector, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async querySelector(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.fromNullable(this, await this._frame.querySelector(params.selector, params))
      };
    }
    async querySelectorAll(params, metadata) {
      const elements = await this._frame.querySelectorAll(params.selector);
      return {
        elements: elements.map((e) => _elementHandlerDispatcher.ElementHandleDispatcher.from(this, e))
      };
    }
    async queryCount(params) {
      return {
        value: await this._frame.queryCount(params.selector)
      };
    }
    async content() {
      return {
        value: await this._frame.content()
      };
    }
    async setContent(params, metadata) {
      return await this._frame.setContent(metadata, params.html, params);
    }
    async addScriptTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addScriptTag(params))
      };
    }
    async addStyleTag(params, metadata) {
      return {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(this, await this._frame.addStyleTag(params))
      };
    }
    async click(params, metadata) {
      metadata.potentiallyClosesScope = true;
      return await this._frame.click(metadata, params.selector, params);
    }
    async dblclick(params, metadata) {
      return await this._frame.dblclick(metadata, params.selector, params);
    }
    async dragAndDrop(params, metadata) {
      return await this._frame.dragAndDrop(metadata, params.source, params.target, params);
    }
    async tap(params, metadata) {
      return await this._frame.tap(metadata, params.selector, params);
    }
    async fill(params, metadata) {
      return await this._frame.fill(metadata, params.selector, params.value, params);
    }
    async focus(params, metadata) {
      await this._frame.focus(metadata, params.selector, params);
    }
    async blur(params, metadata) {
      await this._frame.blur(metadata, params.selector, params);
    }
    async textContent(params, metadata) {
      const value = await this._frame.textContent(metadata, params.selector, params);
      return {
        value: value === null ? undefined : value
      };
    }
    async innerText(params, metadata) {
      return {
        value: await this._frame.innerText(metadata, params.selector, params)
      };
    }
    async innerHTML(params, metadata) {
      return {
        value: await this._frame.innerHTML(metadata, params.selector, params)
      };
    }
    async getAttribute(params, metadata) {
      const value = await this._frame.getAttribute(metadata, params.selector, params.name, params);
      return {
        value: value === null ? undefined : value
      };
    }
    async inputValue(params, metadata) {
      const value = await this._frame.inputValue(metadata, params.selector, params);
      return {
        value
      };
    }
    async isChecked(params, metadata) {
      return {
        value: await this._frame.isChecked(metadata, params.selector, params)
      };
    }
    async isDisabled(params, metadata) {
      return {
        value: await this._frame.isDisabled(metadata, params.selector, params)
      };
    }
    async isEditable(params, metadata) {
      return {
        value: await this._frame.isEditable(metadata, params.selector, params)
      };
    }
    async isEnabled(params, metadata) {
      return {
        value: await this._frame.isEnabled(metadata, params.selector, params)
      };
    }
    async isHidden(params, metadata) {
      return {
        value: await this._frame.isHidden(metadata, params.selector, params)
      };
    }
    async isVisible(params, metadata) {
      return {
        value: await this._frame.isVisible(metadata, params.selector, params)
      };
    }
    async hover(params, metadata) {
      return await this._frame.hover(metadata, params.selector, params);
    }
    async selectOption(params, metadata) {
      const elements = (params.elements || []).map((e) => e._elementHandle);
      return {
        values: await this._frame.selectOption(metadata, params.selector, elements, params.options || [], params)
      };
    }
    async setInputFiles(params, metadata) {
      return await this._frame.setInputFiles(metadata, params.selector, params);
    }
    async type(params, metadata) {
      return await this._frame.type(metadata, params.selector, params.text, params);
    }
    async press(params, metadata) {
      return await this._frame.press(metadata, params.selector, params.key, params);
    }
    async check(params, metadata) {
      return await this._frame.check(metadata, params.selector, params);
    }
    async uncheck(params, metadata) {
      return await this._frame.uncheck(metadata, params.selector, params);
    }
    async waitForTimeout(params, metadata) {
      return await this._frame.waitForTimeout(metadata, params.timeout);
    }
    async waitForFunction(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._frame._waitForFunctionExpression(metadata, params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg), params))
      };
    }
    async title(params, metadata) {
      return {
        value: await this._frame.title()
      };
    }
    async highlight(params, metadata) {
      return await this._frame.highlight(params.selector);
    }
    async expect(params, metadata) {
      metadata.potentiallyClosesScope = true;
      let expectedValue = params.expectedValue ? (0, _jsHandleDispatcher.parseArgument)(params.expectedValue) : undefined;
      if (params.expression === "to.match.aria" && expectedValue)
        expectedValue = (0, _ariaSnapshot.parseAriaSnapshot)(expectedValue);
      const result = await this._frame.expect(metadata, params.selector, {
        ...params,
        expectedValue
      });
      if (result.received !== undefined)
        result.received = (0, _jsHandleDispatcher.serializeResult)(result.received);
      return result;
    }
    async ariaSnapshot(params, metadata) {
      return {
        snapshot: await this._frame.ariaSnapshot(metadata, params.selector, params)
      };
    }
  }
  exports.FrameDispatcher = FrameDispatcher;
});

// node_modules/playwright-core/lib/generated/webSocketMockSource.js
var require_webSocketMockSource = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.source = undefined;
  var source = exports.source = `
var __commonJS = obj => {
  let required = false;
  let result;
  return function __require() {
    if (!required) {
      required = true;
      let fn;
      for (const name in obj) { fn = obj[name]; break; }
      const module = { exports: {} };
      fn(module.exports, module);
      result = module.exports;
    }
    return result;
  }
};
var __export = (target, all) => {for (var name in all) target[name] = all[name];};
var __toESM = mod => ({ ...mod, 'default': mod });
var __toCommonJS = mod => ({ ...mod, __esModule: true });


// packages/playwright-core/src/server/injected/webSocketMock.ts
var webSocketMock_exports = {};
__export(webSocketMock_exports, {
  inject: () => inject
});
module.exports = __toCommonJS(webSocketMock_exports);
function inject(globalThis) {
  if (globalThis.__pwWebSocketDispatch)
    return;
  function generateId() {
    const bytes = new Uint8Array(32);
    globalThis.crypto.getRandomValues(bytes);
    const hex = "0123456789abcdef";
    return [...bytes].map((value) => {
      const high = Math.floor(value / 16);
      const low = value % 16;
      return hex[high] + hex[low];
    }).join("");
  }
  function bufferToData(b) {
    let s = "";
    for (let i = 0; i < b.length; i++)
      s += String.fromCharCode(b[i]);
    return { data: globalThis.btoa(s), isBase64: true };
  }
  function stringToBuffer(s) {
    s = globalThis.atob(s);
    const b = new Uint8Array(s.length);
    for (let i = 0; i < s.length; i++)
      b[i] = s.charCodeAt(i);
    return b.buffer;
  }
  function messageToData(message, cb) {
    if (message instanceof globalThis.Blob)
      return message.arrayBuffer().then((buffer) => cb(bufferToData(new Uint8Array(buffer))));
    if (typeof message === "string")
      return cb({ data: message, isBase64: false });
    if (ArrayBuffer.isView(message))
      return cb(bufferToData(new Uint8Array(message.buffer, message.byteOffset, message.byteLength)));
    return cb(bufferToData(new Uint8Array(message)));
  }
  function dataToMessage(data, binaryType) {
    if (!data.isBase64)
      return data.data;
    const buffer = stringToBuffer(data.data);
    return binaryType === "arraybuffer" ? buffer : new Blob([buffer]);
  }
  const binding = globalThis.__pwWebSocketBinding;
  const NativeWebSocket = globalThis.WebSocket;
  const idToWebSocket = /* @__PURE__ */ new Map();
  globalThis.__pwWebSocketDispatch = (request) => {
    const ws = idToWebSocket.get(request.id);
    if (!ws)
      return;
    if (request.type === "connect")
      ws._apiConnect();
    if (request.type === "passthrough")
      ws._apiPassThrough();
    if (request.type === "ensureOpened")
      ws._apiEnsureOpened();
    if (request.type === "sendToPage")
      ws._apiSendToPage(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closePage")
      ws._apiClosePage(request.code, request.reason, request.wasClean);
    if (request.type === "sendToServer")
      ws._apiSendToServer(dataToMessage(request.data, ws.binaryType));
    if (request.type === "closeServer")
      ws._apiCloseServer(request.code, request.reason, request.wasClean);
  };
  const _WebSocketMock = class _WebSocketMock extends EventTarget {
    constructor(url, protocols) {
      super();
      // WebSocket.CLOSED
      this.CONNECTING = 0;
      // WebSocket.CONNECTING
      this.OPEN = 1;
      // WebSocket.OPEN
      this.CLOSING = 2;
      // WebSocket.CLOSING
      this.CLOSED = 3;
      // WebSocket.CLOSED
      this._oncloseListener = null;
      this._onerrorListener = null;
      this._onmessageListener = null;
      this._onopenListener = null;
      this.bufferedAmount = 0;
      this.extensions = "";
      this.protocol = "";
      this.readyState = 0;
      this._origin = "";
      this._passthrough = false;
      this._wsBufferedMessages = [];
      this._binaryType = "blob";
      this.url = typeof url === "string" ? url : url.href;
      try {
        this.url = new URL(url).href;
        this._origin = new URL(url).origin;
      } catch {
      }
      this._protocols = protocols;
      this._id = generateId();
      idToWebSocket.set(this._id, this);
      binding({ type: "onCreate", id: this._id, url: this.url });
    }
    // --- native WebSocket implementation ---
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(type) {
      this._binaryType = type;
      if (this._ws)
        this._ws.binaryType = type;
    }
    get onclose() {
      return this._oncloseListener;
    }
    set onclose(listener) {
      if (this._oncloseListener)
        this.removeEventListener("close", this._oncloseListener);
      this._oncloseListener = listener;
      if (this._oncloseListener)
        this.addEventListener("close", this._oncloseListener);
    }
    get onerror() {
      return this._onerrorListener;
    }
    set onerror(listener) {
      if (this._onerrorListener)
        this.removeEventListener("error", this._onerrorListener);
      this._onerrorListener = listener;
      if (this._onerrorListener)
        this.addEventListener("error", this._onerrorListener);
    }
    get onopen() {
      return this._onopenListener;
    }
    set onopen(listener) {
      if (this._onopenListener)
        this.removeEventListener("open", this._onopenListener);
      this._onopenListener = listener;
      if (this._onopenListener)
        this.addEventListener("open", this._onopenListener);
    }
    get onmessage() {
      return this._onmessageListener;
    }
    set onmessage(listener) {
      if (this._onmessageListener)
        this.removeEventListener("message", this._onmessageListener);
      this._onmessageListener = listener;
      if (this._onmessageListener)
        this.addEventListener("message", this._onmessageListener);
    }
    send(message) {
      if (this.readyState === _WebSocketMock.CONNECTING)
        throw new DOMException(\`Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.\`);
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      if (this._passthrough) {
        if (this._ws)
          this._apiSendToServer(message);
      } else {
        messageToData(message, (data) => binding({ type: "onMessageFromPage", id: this._id, data }));
      }
    }
    close(code, reason) {
      if (code !== void 0 && code !== 1e3 && (code < 3e3 || code > 4999))
        throw new DOMException(\`Failed to execute 'close' on 'WebSocket': The close code must be either 1000, or between 3000 and 4999. \${code} is neither.\`);
      if (this.readyState === _WebSocketMock.OPEN || this.readyState === _WebSocketMock.CONNECTING)
        this.readyState = _WebSocketMock.CLOSING;
      if (this._passthrough)
        this._apiCloseServer(code, reason, true);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean: true });
    }
    // --- methods called from the routing API ---
    _apiEnsureOpened() {
      if (!this._ws)
        this._ensureOpened();
    }
    _apiSendToPage(message) {
      this._ensureOpened();
      if (this.readyState !== _WebSocketMock.OPEN)
        throw new DOMException(\`WebSocket is already in CLOSING or CLOSED state.\`);
      this.dispatchEvent(new MessageEvent("message", { data: message, origin: this._origin, cancelable: true }));
    }
    _apiSendToServer(message) {
      if (!this._ws)
        throw new Error("Cannot send a message before connecting to the server");
      if (this._ws.readyState === _WebSocketMock.CONNECTING)
        this._wsBufferedMessages.push(message);
      else
        this._ws.send(message);
    }
    _apiConnect() {
      if (this._ws)
        throw new Error("Can only connect to the server once");
      this._ws = new NativeWebSocket(this.url, this._protocols);
      this._ws.binaryType = this._binaryType;
      this._ws.onopen = () => {
        for (const message of this._wsBufferedMessages)
          this._ws.send(message);
        this._wsBufferedMessages = [];
        this._ensureOpened();
      };
      this._ws.onclose = (event) => {
        this._onWSClose(event.code, event.reason, event.wasClean);
      };
      this._ws.onmessage = (event) => {
        if (this._passthrough)
          this._apiSendToPage(event.data);
        else
          messageToData(event.data, (data) => binding({ type: "onMessageFromServer", id: this._id, data }));
      };
      this._ws.onerror = () => {
        const event = new Event("error", { cancelable: true });
        this.dispatchEvent(event);
      };
    }
    // This method connects to the server, and passes all messages through,
    // as if WebSocketMock was not engaged.
    _apiPassThrough() {
      this._passthrough = true;
      this._apiConnect();
    }
    _apiCloseServer(code, reason, wasClean) {
      if (!this._ws) {
        this._onWSClose(code, reason, wasClean);
        return;
      }
      if (this._ws.readyState === _WebSocketMock.CONNECTING || this._ws.readyState === _WebSocketMock.OPEN)
        this._ws.close(code, reason);
    }
    _apiClosePage(code, reason, wasClean) {
      if (this.readyState === _WebSocketMock.CLOSED)
        return;
      this.readyState = _WebSocketMock.CLOSED;
      this.dispatchEvent(new CloseEvent("close", { code, reason, wasClean, cancelable: true }));
      this._maybeCleanup();
      if (this._passthrough)
        this._apiCloseServer(code, reason, wasClean);
      else
        binding({ type: "onClosePage", id: this._id, code, reason, wasClean });
    }
    // --- internals ---
    _ensureOpened() {
      var _a;
      if (this.readyState !== _WebSocketMock.CONNECTING)
        return;
      this.extensions = ((_a = this._ws) == null ? void 0 : _a.extensions) || "";
      if (this._ws)
        this.protocol = this._ws.protocol;
      else if (Array.isArray(this._protocols))
        this.protocol = this._protocols[0] || "";
      else
        this.protocol = this._protocols || "";
      this.readyState = _WebSocketMock.OPEN;
      this.dispatchEvent(new Event("open", { cancelable: true }));
    }
    _onWSClose(code, reason, wasClean) {
      if (this._passthrough)
        this._apiClosePage(code, reason, wasClean);
      else
        binding({ type: "onCloseServer", id: this._id, code, reason, wasClean });
      if (this._ws) {
        this._ws.onopen = null;
        this._ws.onclose = null;
        this._ws.onmessage = null;
        this._ws.onerror = null;
        this._ws = void 0;
        this._wsBufferedMessages = [];
      }
      this._maybeCleanup();
    }
    _maybeCleanup() {
      if (this.readyState === _WebSocketMock.CLOSED && !this._ws)
        idToWebSocket.delete(this._id);
    }
  };
  _WebSocketMock.CONNECTING = 0;
  // WebSocket.CONNECTING
  _WebSocketMock.OPEN = 1;
  // WebSocket.OPEN
  _WebSocketMock.CLOSING = 2;
  // WebSocket.CLOSING
  _WebSocketMock.CLOSED = 3;
  let WebSocketMock = _WebSocketMock;
  globalThis.WebSocket = class WebSocket extends WebSocketMock {
  };
}
`;
});

// node_modules/playwright-core/lib/server/dispatchers/webSocketRouteDispatcher.js
var require_webSocketRouteDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocketRouteDispatcher = undefined;
  var _page = require_page();
  var _dispatcher = require_dispatcher();
  var _utils = require_utils();
  var _pageDispatcher = require_pageDispatcher();
  var webSocketMockSource = _interopRequireWildcard(require_webSocketMockSource());
  var _eventsHelper = require_eventsHelper();
  var _class;
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  var kBindingInstalledSymbol = Symbol("webSocketRouteBindingInstalled");
  var kInitScriptInstalledSymbol = Symbol("webSocketRouteInitScriptInstalled");

  class WebSocketRouteDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, id, url, frame) {
      super(scope, {
        guid: "webSocketRoute@" + (0, _utils.createGuid)()
      }, "WebSocketRoute", {
        url
      });
      this._type_WebSocketRoute = true;
      this._id = undefined;
      this._frame = undefined;
      this._id = id;
      this._frame = frame;
      this._eventListeners.push(_eventsHelper.eventsHelper.addEventListener(frame._page, _page.Page.Events.InternalFrameNavigatedToNewDocument, (frame2) => {
        if (frame2 === this._frame)
          this._executionContextGone();
      }), _eventsHelper.eventsHelper.addEventListener(frame._page, _page.Page.Events.FrameDetached, (frame2) => {
        if (frame2 === this._frame)
          this._executionContextGone();
      }), _eventsHelper.eventsHelper.addEventListener(frame._page, _page.Page.Events.Close, () => this._executionContextGone()), _eventsHelper.eventsHelper.addEventListener(frame._page, _page.Page.Events.Crash, () => this._executionContextGone()));
      WebSocketRouteDispatcher._idToDispatcher.set(this._id, this);
      scope._dispatchEvent("webSocketRoute", {
        webSocketRoute: this
      });
    }
    static async installIfNeeded(contextDispatcher, target) {
      const context = target instanceof _page.Page ? target.context() : target;
      if (!context[kBindingInstalledSymbol]) {
        context[kBindingInstalledSymbol] = true;
        await context.exposeBinding("__pwWebSocketBinding", false, (source, payload) => {
          if (payload.type === "onCreate") {
            const pageDispatcher = _pageDispatcher.PageDispatcher.fromNullable(contextDispatcher, source.page);
            let scope;
            if (pageDispatcher && matchesPattern(pageDispatcher, context._options.baseURL, payload.url))
              scope = pageDispatcher;
            else if (matchesPattern(contextDispatcher, context._options.baseURL, payload.url))
              scope = contextDispatcher;
            if (scope) {
              new WebSocketRouteDispatcher(scope, payload.id, payload.url, source.frame);
            } else {
              const request = {
                id: payload.id,
                type: "passthrough"
              };
              source.frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request)})`).catch(() => {
              });
            }
            return;
          }
          const dispatcher = WebSocketRouteDispatcher._idToDispatcher.get(payload.id);
          if (payload.type === "onMessageFromPage")
            dispatcher === null || dispatcher === undefined || dispatcher._dispatchEvent("messageFromPage", {
              message: payload.data.data,
              isBase64: payload.data.isBase64
            });
          if (payload.type === "onMessageFromServer")
            dispatcher === null || dispatcher === undefined || dispatcher._dispatchEvent("messageFromServer", {
              message: payload.data.data,
              isBase64: payload.data.isBase64
            });
          if (payload.type === "onClosePage")
            dispatcher === null || dispatcher === undefined || dispatcher._dispatchEvent("closePage", {
              code: payload.code,
              reason: payload.reason,
              wasClean: payload.wasClean
            });
          if (payload.type === "onCloseServer")
            dispatcher === null || dispatcher === undefined || dispatcher._dispatchEvent("closeServer", {
              code: payload.code,
              reason: payload.reason,
              wasClean: payload.wasClean
            });
        });
      }
      if (!target[kInitScriptInstalledSymbol]) {
        target[kInitScriptInstalledSymbol] = true;
        await target.addInitScript(`
        (() => {
          const module = {};
          ${webSocketMockSource.source}
          (module.exports.inject())(globalThis);
        })();
      `);
      }
    }
    async connect(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "connect"
      });
    }
    async ensureOpened(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "ensureOpened"
      });
    }
    async sendToPage(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "sendToPage",
        data: {
          data: params.message,
          isBase64: params.isBase64
        }
      });
    }
    async sendToServer(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "sendToServer",
        data: {
          data: params.message,
          isBase64: params.isBase64
        }
      });
    }
    async closePage(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "closePage",
        code: params.code,
        reason: params.reason,
        wasClean: params.wasClean
      });
    }
    async closeServer(params) {
      await this._evaluateAPIRequest({
        id: this._id,
        type: "closeServer",
        code: params.code,
        reason: params.reason,
        wasClean: params.wasClean
      });
    }
    async _evaluateAPIRequest(request) {
      await this._frame.evaluateExpression(`globalThis.__pwWebSocketDispatch(${JSON.stringify(request)})`).catch(() => {
      });
    }
    _onDispose() {
      WebSocketRouteDispatcher._idToDispatcher.delete(this._id);
    }
    _executionContextGone() {
      if (!this._disposed) {
        this._dispatchEvent("closePage", {
          wasClean: true
        });
        this._dispatchEvent("closeServer", {
          wasClean: true
        });
      }
    }
  }
  exports.WebSocketRouteDispatcher = WebSocketRouteDispatcher;
  _class = WebSocketRouteDispatcher;
  WebSocketRouteDispatcher._idToDispatcher = new Map;
  function matchesPattern(dispatcher, baseURL, url) {
    for (const pattern of dispatcher._webSocketInterceptionPatterns || []) {
      const urlMatch = pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob;
      if ((0, _utils.urlMatches)(baseURL, url, urlMatch))
        return true;
    }
    return false;
  }
});

// node_modules/playwright-core/lib/server/dispatchers/pageDispatcher.js
var require_pageDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WorkerDispatcher = exports.PageDispatcher = exports.BindingCallDispatcher = undefined;
  var _page = require_page();
  var _dispatcher = require_dispatcher();
  var _errors = require_errors();
  var _frameDispatcher = require_frameDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _artifactDispatcher = require_artifactDispatcher();
  var _utils = require_utils();
  var _webSocketRouteDispatcher = require_webSocketRouteDispatcher();

  class PageDispatcher extends _dispatcher.Dispatcher {
    static from(parentScope, page) {
      return PageDispatcher.fromNullable(parentScope, page);
    }
    static fromNullable(parentScope, page) {
      if (!page)
        return;
      const result = (0, _dispatcher.existingDispatcher)(page);
      return result || new PageDispatcher(parentScope, page);
    }
    constructor(parentScope, page) {
      const mainFrame = _frameDispatcher.FrameDispatcher.from(parentScope, page.mainFrame());
      super(parentScope, page, "Page", {
        mainFrame,
        viewportSize: page.viewportSize() || undefined,
        isClosed: page.isClosed(),
        opener: PageDispatcher.fromNullable(parentScope, page.opener())
      });
      this._type_EventTarget = true;
      this._type_Page = true;
      this._page = undefined;
      this._subscriptions = new Set;
      this._webSocketInterceptionPatterns = [];
      this.adopt(mainFrame);
      this._page = page;
      this.addObjectListener(_page.Page.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_page.Page.Events.Crash, () => this._dispatchEvent("crash"));
      this.addObjectListener(_page.Page.Events.Download, (download) => {
        this._dispatchEvent("download", {
          url: download.url,
          suggestedFilename: download.suggestedFilename(),
          artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, download.artifact)
        });
      });
      this.addObjectListener(_page.Page.Events.FileChooser, (fileChooser) => this._dispatchEvent("fileChooser", {
        element: _elementHandlerDispatcher.ElementHandleDispatcher.from(mainFrame, fileChooser.element()),
        isMultiple: fileChooser.isMultiple()
      }));
      this.addObjectListener(_page.Page.Events.FrameAttached, (frame) => this._onFrameAttached(frame));
      this.addObjectListener(_page.Page.Events.FrameDetached, (frame) => this._onFrameDetached(frame));
      this.addObjectListener(_page.Page.Events.LocatorHandlerTriggered, (uid) => this._dispatchEvent("locatorHandlerTriggered", {
        uid
      }));
      this.addObjectListener(_page.Page.Events.WebSocket, (webSocket) => this._dispatchEvent("webSocket", {
        webSocket: new _networkDispatchers.WebSocketDispatcher(this, webSocket)
      }));
      this.addObjectListener(_page.Page.Events.Worker, (worker) => this._dispatchEvent("worker", {
        worker: new WorkerDispatcher(this, worker)
      }));
      this.addObjectListener(_page.Page.Events.Video, (artifact) => this._dispatchEvent("video", {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact)
      }));
      if (page._video)
        this._dispatchEvent("video", {
          artifact: _artifactDispatcher.ArtifactDispatcher.from(this.parentScope(), page._video)
        });
      const frames = page._frameManager.frames();
      for (let i = 1;i < frames.length; i++)
        this._onFrameAttached(frames[i]);
    }
    page() {
      return this._page;
    }
    async setDefaultNavigationTimeoutNoReply(params, metadata) {
      this._page.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params, metadata) {
      this._page.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params, metadata) {
      await this._page.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed)
          return;
        const binding = new BindingCallDispatcher(this, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async setExtraHTTPHeaders(params, metadata) {
      await this._page.setExtraHTTPHeaders(params.headers);
    }
    async reload(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.reload(metadata, params))
      };
    }
    async goBack(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goBack(metadata, params))
      };
    }
    async goForward(params, metadata) {
      return {
        response: _networkDispatchers.ResponseDispatcher.fromNullable(this.parentScope(), await this._page.goForward(metadata, params))
      };
    }
    async requestGC(params, metadata) {
      await this._page.requestGC();
    }
    async registerLocatorHandler(params, metadata) {
      const uid = this._page.registerLocatorHandler(params.selector, params.noWaitAfter);
      return {
        uid
      };
    }
    async resolveLocatorHandlerNoReply(params, metadata) {
      this._page.resolveLocatorHandler(params.uid, params.remove);
    }
    async unregisterLocatorHandler(params, metadata) {
      this._page.unregisterLocatorHandler(params.uid);
    }
    async emulateMedia(params, metadata) {
      await this._page.emulateMedia({
        media: params.media,
        colorScheme: params.colorScheme,
        reducedMotion: params.reducedMotion,
        forcedColors: params.forcedColors
      });
    }
    async setViewportSize(params, metadata) {
      await this._page.setViewportSize(params.viewportSize);
    }
    async addInitScript(params, metadata) {
      await this._page.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params, metadata) {
      if (!params.patterns.length) {
        await this._page.setClientRequestInterceptor(undefined);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._page.setClientRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch) => (0, _utils.urlMatches)(this._page._browserContext._options.baseURL, request.url(), urlMatch));
        if (!matchesSome)
          return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this.parentScope(), request), route)
        });
        return true;
      });
    }
    async setWebSocketInterceptionPatterns(params, metadata) {
      this._webSocketInterceptionPatterns = params.patterns;
      if (params.patterns.length)
        await _webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this.parentScope(), this._page);
    }
    async expectScreenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      const locator = params.locator ? {
        frame: params.locator.frame._object,
        selector: params.locator.selector
      } : undefined;
      return await this._page.expectScreenshot(metadata, {
        ...params,
        locator,
        mask
      });
    }
    async screenshot(params, metadata) {
      const mask = (params.mask || []).map(({
        frame,
        selector
      }) => ({
        frame: frame._object,
        selector
      }));
      return {
        binary: await this._page.screenshot(metadata, {
          ...params,
          mask
        })
      };
    }
    async close(params, metadata) {
      if (!params.runBeforeUnload)
        metadata.potentiallyClosesScope = true;
      await this._page.close(metadata, params);
    }
    async updateSubscription(params) {
      if (params.event === "fileChooser")
        await this._page.setFileChooserIntercepted(params.enabled);
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    async keyboardDown(params, metadata) {
      await this._page.keyboard.down(params.key);
    }
    async keyboardUp(params, metadata) {
      await this._page.keyboard.up(params.key);
    }
    async keyboardInsertText(params, metadata) {
      await this._page.keyboard.insertText(params.text);
    }
    async keyboardType(params, metadata) {
      await this._page.keyboard.type(params.text, params);
    }
    async keyboardPress(params, metadata) {
      await this._page.keyboard.press(params.key, params);
    }
    async mouseMove(params, metadata) {
      await this._page.mouse.move(params.x, params.y, params, metadata);
    }
    async mouseDown(params, metadata) {
      await this._page.mouse.down(params, metadata);
    }
    async mouseUp(params, metadata) {
      await this._page.mouse.up(params, metadata);
    }
    async mouseClick(params, metadata) {
      await this._page.mouse.click(params.x, params.y, params, metadata);
    }
    async mouseWheel(params, metadata) {
      await this._page.mouse.wheel(params.deltaX, params.deltaY);
    }
    async touchscreenTap(params, metadata) {
      await this._page.touchscreen.tap(params.x, params.y, metadata);
    }
    async accessibilitySnapshot(params, metadata) {
      const rootAXNode = await this._page.accessibility.snapshot({
        interestingOnly: params.interestingOnly,
        root: params.root ? params.root._elementHandle : undefined
      });
      return {
        rootAXNode: rootAXNode || undefined
      };
    }
    async pdf(params, metadata) {
      if (!this._page.pdf)
        throw new Error("PDF generation is only supported for Headless Chromium");
      const buffer = await this._page.pdf(params);
      return {
        pdf: buffer
      };
    }
    async bringToFront(params, metadata) {
      await this._page.bringToFront();
    }
    async startJSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      await coverage.startJSCoverage(params);
    }
    async stopJSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      return await coverage.stopJSCoverage();
    }
    async startCSSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      await coverage.startCSSCoverage(params);
    }
    async stopCSSCoverage(params, metadata) {
      const coverage = this._page.coverage;
      return await coverage.stopCSSCoverage();
    }
    _onFrameAttached(frame) {
      this._dispatchEvent("frameAttached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame)
      });
    }
    _onFrameDetached(frame) {
      this._dispatchEvent("frameDetached", {
        frame: _frameDispatcher.FrameDispatcher.from(this.parentScope(), frame)
      });
    }
    _onDispose() {
      if (!this._page.isClosedOrClosingOrCrashed())
        this._page.setClientRequestInterceptor(undefined).catch(() => {
        });
    }
  }
  exports.PageDispatcher = PageDispatcher;

  class WorkerDispatcher extends _dispatcher.Dispatcher {
    static fromNullable(scope, worker) {
      if (!worker)
        return;
      const result = (0, _dispatcher.existingDispatcher)(worker);
      return result || new WorkerDispatcher(scope, worker);
    }
    constructor(scope, worker) {
      super(scope, worker, "Worker", {
        url: worker.url()
      });
      this._type_Worker = true;
      this.addObjectListener(_page.Worker.Events.Close, () => this._dispatchEvent("close"));
    }
    async evaluateExpression(params, metadata) {
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await this._object.evaluateExpression(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params, metadata) {
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, await this._object.evaluateExpressionHandle(params.expression, params.isFunction, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
  }
  exports.WorkerDispatcher = WorkerDispatcher;

  class BindingCallDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, name, needsHandle, source, args) {
      super(scope, {
        guid: "bindingCall@" + (0, _utils.createGuid)()
      }, "BindingCall", {
        frame: _frameDispatcher.FrameDispatcher.from(scope.parentScope(), source.frame),
        name,
        args: needsHandle ? undefined : args.map(_jsHandleDispatcher.serializeResult),
        handle: needsHandle ? _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(scope, args[0]) : undefined
      });
      this._type_BindingCall = true;
      this._resolve = undefined;
      this._reject = undefined;
      this._promise = undefined;
      this._promise = new Promise((resolve, reject) => {
        this._resolve = resolve;
        this._reject = reject;
      });
    }
    promise() {
      return this._promise;
    }
    async resolve(params, metadata) {
      this._resolve((0, _jsHandleDispatcher.parseArgument)(params.result));
      this._dispose();
    }
    async reject(params, metadata) {
      this._reject((0, _errors.parseError)(params.error));
      this._dispose();
    }
  }
  exports.BindingCallDispatcher = BindingCallDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/cdpSessionDispatcher.js
var require_cdpSessionDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CDPSessionDispatcher = undefined;
  var _crConnection = require_crConnection();
  var _dispatcher = require_dispatcher();

  class CDPSessionDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, cdpSession) {
      super(scope, cdpSession, "CDPSession", {});
      this._type_CDPSession = true;
      this.addObjectListener(_crConnection.CDPSession.Events.Event, ({
        method,
        params
      }) => this._dispatchEvent("event", {
        method,
        params
      }));
      this.addObjectListener(_crConnection.CDPSession.Events.Closed, () => this._dispose());
    }
    async send(params) {
      return {
        result: await this._object.send(params.method, params.params)
      };
    }
    async detach(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.detach();
    }
  }
  exports.CDPSessionDispatcher = CDPSessionDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/writableStreamDispatcher.js
var require_writableStreamDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WritableStreamDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var fs = _interopRequireWildcard(__require("fs"));
  var _utils = require_utils();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class WritableStreamDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, streamOrDirectory, lastModifiedMs) {
      super(scope, {
        guid: "writableStream@" + (0, _utils.createGuid)(),
        streamOrDirectory
      }, "WritableStream", {});
      this._type_WritableStream = true;
      this._lastModifiedMs = undefined;
      this._lastModifiedMs = lastModifiedMs;
    }
    async write(params) {
      if (typeof this._object.streamOrDirectory === "string")
        throw new Error("Cannot write to a directory");
      const stream = this._object.streamOrDirectory;
      await new Promise((fulfill, reject) => {
        stream.write(params.binary, (error) => {
          if (error)
            reject(error);
          else
            fulfill();
        });
      });
    }
    async close() {
      if (typeof this._object.streamOrDirectory === "string")
        throw new Error("Cannot close a directory");
      const stream = this._object.streamOrDirectory;
      await new Promise((fulfill) => stream.end(fulfill));
      if (this._lastModifiedMs)
        await fs.promises.utimes(this.path(), new Date(this._lastModifiedMs), new Date(this._lastModifiedMs));
    }
    path() {
      if (typeof this._object.streamOrDirectory === "string")
        return this._object.streamOrDirectory;
      return this._object.streamOrDirectory.path;
    }
  }
  exports.WritableStreamDispatcher = WritableStreamDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/dialogDispatcher.js
var require_dialogDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DialogDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _pageDispatcher = require_pageDispatcher();

  class DialogDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, dialog) {
      const page = _pageDispatcher.PageDispatcher.fromNullable(scope, dialog.page().initializedOrUndefined());
      super(page || scope, dialog, "Dialog", {
        page,
        type: dialog.type(),
        message: dialog.message(),
        defaultValue: dialog.defaultValue()
      });
      this._type_Dialog = true;
    }
    async accept(params) {
      await this._object.accept(params.promptText);
    }
    async dismiss() {
      await this._object.dismiss();
    }
  }
  exports.DialogDispatcher = DialogDispatcher;
});

// node_modules/playwright-core/lib/server/trace/viewer/traceViewer.js
var require_traceViewer = __commonJS((exports) => {
  var __dirname = "/Users/alexanderdankov/WebstormProjects/browser-use-test/node_modules/playwright-core/lib/server/trace/viewer";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.installRootRedirect = installRootRedirect;
  exports.openTraceInBrowser = openTraceInBrowser;
  exports.openTraceViewerApp = openTraceViewerApp;
  exports.runTraceInBrowser = runTraceInBrowser;
  exports.runTraceViewerApp = runTraceViewerApp;
  exports.startTraceViewerServer = startTraceViewerServer;
  var _path = _interopRequireDefault(__require("path"));
  var _fs = _interopRequireDefault(__require("fs"));
  var _httpServer = require_httpServer();
  var _utils = require_utils();
  var _launchApp = require_launchApp();
  var _instrumentation = require_instrumentation();
  var _playwright = require_playwright();
  var _progress = require_progress();
  var _utilsBundle = require_utilsBundle();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function validateTraceUrls(traceUrls) {
    for (const traceUrl of traceUrls) {
      let traceFile = traceUrl;
      if (traceUrl.endsWith(".json"))
        traceFile = traceUrl.substring(0, traceUrl.length - ".json".length);
      if (!traceUrl.startsWith("http://") && !traceUrl.startsWith("https://") && !_fs.default.existsSync(traceFile) && !_fs.default.existsSync(traceFile + ".trace"))
        throw new Error(`Trace file ${traceUrl} does not exist!`);
    }
  }
  async function startTraceViewerServer(options) {
    const server = new _httpServer.HttpServer;
    server.routePrefix("/trace", (request, response) => {
      const url = new URL("http://localhost" + request.url);
      const relativePath = url.pathname.slice("/trace".length);
      if (relativePath.endsWith("/stall.js"))
        return true;
      if (relativePath.startsWith("/file")) {
        try {
          const filePath = url.searchParams.get("path");
          if (_fs.default.existsSync(filePath))
            return server.serveFile(request, response, url.searchParams.get("path"));
          if (filePath.endsWith(".json")) {
            const traceName = filePath.substring(0, filePath.length - ".json".length);
            response.statusCode = 200;
            response.setHeader("Content-Type", "application/json");
            response.end(JSON.stringify(traceDescriptor(traceName)));
            return true;
          }
        } catch (e) {
        }
        response.statusCode = 404;
        response.end();
        return true;
      }
      const absolutePath = _path.default.join(__dirname, "..", "..", "..", "vite", "traceViewer", ...relativePath.split("/"));
      return server.serveFile(request, response, absolutePath);
    });
    const transport = (options === null || options === undefined ? undefined : options.transport) || (options !== null && options !== undefined && options.isServer ? new StdinServer : undefined);
    if (transport)
      server.createWebSocket(transport);
    const {
      host,
      port
    } = options || {};
    await server.start({
      preferredPort: port,
      host
    });
    return server;
  }
  async function installRootRedirect(server, traceUrls, options) {
    const params = new URLSearchParams;
    if (_path.default.sep !== _path.default.posix.sep)
      params.set("pathSeparator", _path.default.sep);
    for (const traceUrl of traceUrls)
      params.append("trace", traceUrl);
    if (server.wsGuid())
      params.append("ws", server.wsGuid());
    if (options !== null && options !== undefined && options.isServer)
      params.append("isServer", "");
    if ((0, _utils.isUnderTest)())
      params.append("isUnderTest", "true");
    for (const arg of options.args || [])
      params.append("arg", arg);
    if (options.grep)
      params.append("grep", options.grep);
    if (options.grepInvert)
      params.append("grepInvert", options.grepInvert);
    for (const project of options.project || [])
      params.append("project", project);
    for (const reporter of options.reporter || [])
      params.append("reporter", reporter);
    const urlPath = `./trace/${options.webApp || "index.html"}?${params.toString()}`;
    server.routePath("/", (_, response) => {
      response.statusCode = 302;
      response.setHeader("Location", urlPath);
      response.end();
      return true;
    });
  }
  async function runTraceViewerApp(traceUrls, browserName, options, exitOnClose) {
    validateTraceUrls(traceUrls);
    const server = await startTraceViewerServer(options);
    await installRootRedirect(server, traceUrls, options);
    const page = await openTraceViewerApp(server.urlPrefix("precise"), browserName, options);
    if (exitOnClose)
      page.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    return page;
  }
  async function runTraceInBrowser(traceUrls, options) {
    validateTraceUrls(traceUrls);
    const server = await startTraceViewerServer(options);
    await installRootRedirect(server, traceUrls, options);
    await openTraceInBrowser(server.urlPrefix("human-readable"));
  }
  async function openTraceViewerApp(url, browserName, options) {
    const traceViewerPlaywright = (0, _playwright.createPlaywright)({
      sdkLanguage: "javascript",
      isInternalPlaywright: true
    });
    const traceViewerBrowser = (0, _utils.isUnderTest)() ? "chromium" : browserName;
    const {
      context,
      page
    } = await (0, _launchApp.launchApp)(traceViewerPlaywright[traceViewerBrowser], {
      sdkLanguage: traceViewerPlaywright.options.sdkLanguage,
      windowSize: {
        width: 1280,
        height: 800
      },
      persistentContextOptions: {
        ...options === null || options === undefined ? undefined : options.persistentContextOptions,
        useWebSocket: (0, _utils.isUnderTest)(),
        headless: !!(options !== null && options !== undefined && options.headless),
        colorScheme: (0, _utils.isUnderTest)() ? "light" : undefined
      }
    });
    const controller = new _progress.ProgressController((0, _instrumentation.serverSideCallMetadata)(), context._browser);
    await controller.run(async (progress2) => {
      await context._browser._defaultContext._loadDefaultContextAsIs(progress2);
    });
    if (process.env.PWTEST_PRINT_WS_ENDPOINT)
      process.stderr.write("DevTools listening on: " + context._browser.options.wsEndpoint + `
`);
    if (!(0, _utils.isUnderTest)())
      await (0, _launchApp.syncLocalStorageWithSettings)(page, "traceviewer");
    if ((0, _utils.isUnderTest)())
      page.on("close", () => context.close({
        reason: "Trace viewer closed"
      }).catch(() => {
      }));
    await page.mainFrame().goto((0, _instrumentation.serverSideCallMetadata)(), url);
    return page;
  }
  async function openTraceInBrowser(url) {
    console.log(`
Listening on ` + url);
    if (!(0, _utils.isUnderTest)())
      await (0, _utilsBundle.open)(url.replace("0.0.0.0", "localhost")).catch(() => {
      });
  }

  class StdinServer {
    constructor() {
      this._pollTimer = undefined;
      this._traceUrl = undefined;
      this.sendEvent = undefined;
      this.close = undefined;
      process.stdin.on("data", (data) => {
        const url = data.toString().trim();
        if (url === this._traceUrl)
          return;
        if (url.endsWith(".json"))
          this._pollLoadTrace(url);
        else
          this._loadTrace(url);
      });
      process.stdin.on("close", () => (0, _utils.gracefullyProcessExitDoNotHang)(0));
    }
    onconnect() {
    }
    async dispatch(method, params) {
      if (method === "initialize") {
        if (this._traceUrl)
          this._loadTrace(this._traceUrl);
      }
    }
    onclose() {
    }
    _loadTrace(traceUrl) {
      var _this$sendEvent;
      this._traceUrl = traceUrl;
      clearTimeout(this._pollTimer);
      (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === undefined || _this$sendEvent.call(this, "loadTraceRequested", {
        traceUrl
      });
    }
    _pollLoadTrace(url) {
      this._loadTrace(url);
      this._pollTimer = setTimeout(() => {
        this._pollLoadTrace(url);
      }, 500);
    }
  }
  function traceDescriptor(traceName) {
    const result = {
      entries: []
    };
    const traceDir = _path.default.dirname(traceName);
    const traceFile = _path.default.basename(traceName);
    for (const name of _fs.default.readdirSync(traceDir)) {
      if (name.startsWith(traceFile))
        result.entries.push({
          name,
          path: _path.default.join(traceDir, name)
        });
    }
    const resourcesDir = _path.default.join(traceDir, "resources");
    if (_fs.default.existsSync(resourcesDir)) {
      for (const name of _fs.default.readdirSync(resourcesDir))
        result.entries.push({
          name: "resources/" + name,
          path: _path.default.join(resourcesDir, name)
        });
    }
    return result;
  }
});

// node_modules/playwright-core/lib/server/recorder/recorderInTraceViewer.js
var require_recorderInTraceViewer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.RecorderInTraceViewer = undefined;
  var _path = _interopRequireDefault(__require("path"));
  var _events = __require("events");
  var _traceViewer = require_traceViewer();
  var _manualPromise = require_manualPromise();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class RecorderInTraceViewer extends _events.EventEmitter {
    static factory(context) {
      return async (recorder) => {
        const transport = new RecorderTransport;
        const trace = _path.default.join(context._browser.options.tracesDir, "trace");
        const {
          wsEndpointForTest,
          tracePage,
          traceServer
        } = await openApp(trace, {
          transport,
          headless: !context._browser.options.headful
        });
        return new RecorderInTraceViewer(transport, tracePage, traceServer, wsEndpointForTest);
      };
    }
    constructor(transport, tracePage, traceServer, wsEndpointForTest) {
      super();
      this.wsEndpointForTest = undefined;
      this._transport = undefined;
      this._tracePage = undefined;
      this._traceServer = undefined;
      this._transport = transport;
      this._transport.eventSink.resolve(this);
      this._tracePage = tracePage;
      this._traceServer = traceServer;
      this.wsEndpointForTest = wsEndpointForTest;
      this._tracePage.once("close", () => {
        this.close();
      });
    }
    async close() {
      await this._tracePage.context().close({
        reason: "Recorder window closed"
      });
      await this._traceServer.stop();
    }
    async setPaused(paused) {
      this._transport.deliverEvent("setPaused", {
        paused
      });
    }
    async setMode(mode) {
      this._transport.deliverEvent("setMode", {
        mode
      });
    }
    async setRunningFile(file) {
      this._transport.deliverEvent("setRunningFile", {
        file
      });
    }
    async elementPicked(elementInfo, userGesture) {
      this._transport.deliverEvent("elementPicked", {
        elementInfo,
        userGesture
      });
    }
    async updateCallLogs(callLogs) {
      this._transport.deliverEvent("updateCallLogs", {
        callLogs
      });
    }
    async setSources(sources) {
      this._transport.deliverEvent("setSources", {
        sources
      });
      if (process.env.PWTEST_CLI_IS_UNDER_TEST && sources.length) {
        if (process._didSetSourcesForTest(sources[0].text))
          this.close();
      }
    }
    async setActions(actions, sources) {
      this._transport.deliverEvent("setActions", {
        actions,
        sources
      });
    }
  }
  exports.RecorderInTraceViewer = RecorderInTraceViewer;
  async function openApp(trace, options) {
    const traceServer = await (0, _traceViewer.startTraceViewerServer)(options);
    await (0, _traceViewer.installRootRedirect)(traceServer, [trace], {
      ...options,
      webApp: "recorder.html"
    });
    const page = await (0, _traceViewer.openTraceViewerApp)(traceServer.urlPrefix("precise"), "chromium", options);
    return {
      wsEndpointForTest: page.context()._browser.options.wsEndpoint,
      tracePage: page,
      traceServer
    };
  }

  class RecorderTransport {
    constructor() {
      this._connected = new _manualPromise.ManualPromise;
      this.eventSink = new _manualPromise.ManualPromise;
      this.sendEvent = undefined;
      this.close = undefined;
    }
    onconnect() {
      this._connected.resolve();
    }
    async dispatch(method, params) {
      const eventSink = await this.eventSink;
      eventSink.emit("event", {
        event: method,
        params
      });
    }
    onclose() {
    }
    deliverEvent(method, params) {
      this._connected.then(() => {
        var _this$sendEvent;
        return (_this$sendEvent = this.sendEvent) === null || _this$sendEvent === undefined ? undefined : _this$sendEvent.call(this, method, params);
      });
    }
  }
});

// node_modules/playwright-core/lib/server/dispatchers/browserContextDispatcher.js
var require_browserContextDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContextDispatcher = undefined;
  var _browserContext = require_browserContext();
  var _dispatcher = require_dispatcher();
  var _pageDispatcher = require_pageDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _crBrowser = require_crBrowser();
  var _cdpSessionDispatcher = require_cdpSessionDispatcher();
  var _recorder = require_recorder();
  var _artifactDispatcher = require_artifactDispatcher();
  var _tracingDispatcher = require_tracingDispatcher();
  var fs = _interopRequireWildcard(__require("fs"));
  var path = _interopRequireWildcard(__require("path"));
  var _utils = require_utils();
  var _writableStreamDispatcher = require_writableStreamDispatcher();
  var _dialogDispatcher = require_dialogDispatcher();
  var _errors = require_errors();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();
  var _recorderInTraceViewer = require_recorderInTraceViewer();
  var _recorderApp = require_recorderApp();
  var _webSocketRouteDispatcher = require_webSocketRouteDispatcher();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class BrowserContextDispatcher extends _dispatcher.Dispatcher {
    constructor(parentScope, context) {
      const requestContext = _networkDispatchers.APIRequestContextDispatcher.from(parentScope, context.fetchRequest);
      const tracing = _tracingDispatcher.TracingDispatcher.from(parentScope, context.tracing);
      super(parentScope, context, "BrowserContext", {
        isChromium: context._browser.options.isChromium,
        isLocalBrowserOnServer: context._browser._isCollocatedWithServer,
        requestContext,
        tracing
      });
      this._type_EventTarget = true;
      this._type_BrowserContext = true;
      this._context = undefined;
      this._subscriptions = new Set;
      this._webSocketInterceptionPatterns = [];
      this.adopt(requestContext);
      this.adopt(tracing);
      this._context = context;
      const onVideo = (artifact) => {
        const artifactDispatcher = _artifactDispatcher.ArtifactDispatcher.from(parentScope, artifact);
        this._dispatchEvent("video", {
          artifact: artifactDispatcher
        });
      };
      this.addObjectListener(_browserContext.BrowserContext.Events.VideoStarted, onVideo);
      for (const video of context._browser._idToVideo.values()) {
        if (video.context === context)
          onVideo(video.artifact);
      }
      for (const page of context.pages())
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      this.addObjectListener(_browserContext.BrowserContext.Events.Page, (page) => {
        this._dispatchEvent("page", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.PageError, (error, page) => {
        this._dispatchEvent("pageError", {
          error: (0, _errors.serializeError)(error),
          page: _pageDispatcher.PageDispatcher.from(this, page)
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Console, (message) => {
        const page = message.page();
        if (this._shouldDispatchEvent(page, "console")) {
          const pageDispatcher = _pageDispatcher.PageDispatcher.from(this, page);
          this._dispatchEvent("console", {
            page: pageDispatcher,
            type: message.type(),
            text: message.text(),
            args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(pageDispatcher, a)),
            location: message.location()
          });
        }
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Dialog, (dialog) => {
        if (this._shouldDispatchEvent(dialog.page(), "dialog"))
          this._dispatchEvent("dialog", {
            dialog: new _dialogDispatcher.DialogDispatcher(this, dialog)
          });
        else
          dialog.close().catch(() => {
          });
      });
      if (context._browser.options.name === "chromium") {
        for (const page of context.backgroundPages())
          this._dispatchEvent("backgroundPage", {
            page: _pageDispatcher.PageDispatcher.from(this, page)
          });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.BackgroundPage, (page) => this._dispatchEvent("backgroundPage", {
          page: _pageDispatcher.PageDispatcher.from(this, page)
        }));
        for (const serviceWorker of context.serviceWorkers())
          this._dispatchEvent("serviceWorker", {
            worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
          });
        this.addObjectListener(_crBrowser.CRBrowserContext.CREvents.ServiceWorker, (serviceWorker) => this._dispatchEvent("serviceWorker", {
          worker: new _pageDispatcher.WorkerDispatcher(this, serviceWorker)
        }));
      }
      this.addObjectListener(_browserContext.BrowserContext.Events.Request, (request) => {
        var _request$frame;
        const redirectFromDispatcher = request.redirectedFrom() && (0, _dispatcher.existingDispatcher)(request.redirectedFrom());
        if (!redirectFromDispatcher && !this._shouldDispatchNetworkEvent(request, "request") && !request.isNavigationRequest())
          return;
        const requestDispatcher = _networkDispatchers.RequestDispatcher.from(this, request);
        this._dispatchEvent("request", {
          request: requestDispatcher,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame = request.frame()) === null || _request$frame === undefined ? undefined : _request$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.Response, (response) => {
        var _response$frame;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(response.request());
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(response.request(), "response"))
          return;
        this._dispatchEvent("response", {
          response: _networkDispatchers.ResponseDispatcher.from(this, response),
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_response$frame = response.frame()) === null || _response$frame === undefined ? undefined : _response$frame._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFailed, (request) => {
        var _request$frame2;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFailed"))
          return;
        this._dispatchEvent("requestFailed", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          failureText: request._failureText || undefined,
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame2 = request.frame()) === null || _request$frame2 === undefined ? undefined : _request$frame2._page.initializedOrUndefined())
        });
      });
      this.addObjectListener(_browserContext.BrowserContext.Events.RequestFinished, ({
        request,
        response
      }) => {
        var _request$frame3;
        const requestDispatcher = (0, _dispatcher.existingDispatcher)(request);
        if (!requestDispatcher && !this._shouldDispatchNetworkEvent(request, "requestFinished"))
          return;
        this._dispatchEvent("requestFinished", {
          request: _networkDispatchers.RequestDispatcher.from(this, request),
          response: _networkDispatchers.ResponseDispatcher.fromNullable(this, response),
          responseEndTiming: request._responseEndTiming,
          page: _pageDispatcher.PageDispatcher.fromNullable(this, (_request$frame3 = request.frame()) === null || _request$frame3 === undefined ? undefined : _request$frame3._page.initializedOrUndefined())
        });
      });
    }
    _shouldDispatchNetworkEvent(request, event) {
      var _request$frame4;
      return this._shouldDispatchEvent((_request$frame4 = request.frame()) === null || _request$frame4 === undefined || (_request$frame4 = _request$frame4._page) === null || _request$frame4 === undefined ? undefined : _request$frame4.initializedOrUndefined(), event);
    }
    _shouldDispatchEvent(page, event) {
      if (this._subscriptions.has(event))
        return true;
      const pageDispatcher = page ? (0, _dispatcher.existingDispatcher)(page) : undefined;
      if (pageDispatcher !== null && pageDispatcher !== undefined && pageDispatcher._subscriptions.has(event))
        return true;
      return false;
    }
    async createTempFiles(params) {
      const dir = this._context._browser.options.artifactsDir;
      const tmpDir = path.join(dir, "upload-" + (0, _utils.createGuid)());
      const tempDirWithRootName = params.rootDirName ? path.join(tmpDir, path.basename(params.rootDirName)) : tmpDir;
      await fs.promises.mkdir(tempDirWithRootName, {
        recursive: true
      });
      this._context._tempDirs.push(tmpDir);
      return {
        rootDir: params.rootDirName ? new _writableStreamDispatcher.WritableStreamDispatcher(this, tempDirWithRootName) : undefined,
        writableStreams: await Promise.all(params.items.map(async (item) => {
          await fs.promises.mkdir(path.dirname(path.join(tempDirWithRootName, item.name)), {
            recursive: true
          });
          const file = fs.createWriteStream(path.join(tempDirWithRootName, item.name));
          return new _writableStreamDispatcher.WritableStreamDispatcher(this, file, item.lastModifiedMs);
        }))
      };
    }
    async setDefaultNavigationTimeoutNoReply(params) {
      this._context.setDefaultNavigationTimeout(params.timeout);
    }
    async setDefaultTimeoutNoReply(params) {
      this._context.setDefaultTimeout(params.timeout);
    }
    async exposeBinding(params) {
      await this._context.exposeBinding(params.name, !!params.needsHandle, (source, ...args) => {
        if (this._disposed)
          return;
        const pageDispatcher = _pageDispatcher.PageDispatcher.from(this, source.page);
        const binding = new _pageDispatcher.BindingCallDispatcher(pageDispatcher, params.name, !!params.needsHandle, source, args);
        this._dispatchEvent("bindingCall", {
          binding
        });
        return binding.promise();
      });
    }
    async newPage(params, metadata) {
      return {
        page: _pageDispatcher.PageDispatcher.from(this, await this._context.newPage(metadata))
      };
    }
    async cookies(params) {
      return {
        cookies: await this._context.cookies(params.urls)
      };
    }
    async addCookies(params) {
      await this._context.addCookies(params.cookies);
    }
    async clearCookies(params) {
      const nameRe = params.nameRegexSource !== undefined && params.nameRegexFlags !== undefined ? new RegExp(params.nameRegexSource, params.nameRegexFlags) : undefined;
      const domainRe = params.domainRegexSource !== undefined && params.domainRegexFlags !== undefined ? new RegExp(params.domainRegexSource, params.domainRegexFlags) : undefined;
      const pathRe = params.pathRegexSource !== undefined && params.pathRegexFlags !== undefined ? new RegExp(params.pathRegexSource, params.pathRegexFlags) : undefined;
      await this._context.clearCookies({
        name: nameRe || params.name,
        domain: domainRe || params.domain,
        path: pathRe || params.path
      });
    }
    async grantPermissions(params) {
      await this._context.grantPermissions(params.permissions, params.origin);
    }
    async clearPermissions() {
      await this._context.clearPermissions();
    }
    async setGeolocation(params) {
      await this._context.setGeolocation(params.geolocation);
    }
    async setExtraHTTPHeaders(params) {
      await this._context.setExtraHTTPHeaders(params.headers);
    }
    async setOffline(params) {
      await this._context.setOffline(params.offline);
    }
    async setHTTPCredentials(params) {
      await this._context.setHTTPCredentials(params.httpCredentials);
    }
    async addInitScript(params) {
      await this._context.addInitScript(params.source);
    }
    async setNetworkInterceptionPatterns(params) {
      if (!params.patterns.length) {
        await this._context.setRequestInterceptor(undefined);
        return;
      }
      const urlMatchers = params.patterns.map((pattern) => pattern.regexSource ? new RegExp(pattern.regexSource, pattern.regexFlags) : pattern.glob);
      await this._context.setRequestInterceptor((route, request) => {
        const matchesSome = urlMatchers.some((urlMatch) => (0, _utils.urlMatches)(this._context._options.baseURL, request.url(), urlMatch));
        if (!matchesSome)
          return false;
        this._dispatchEvent("route", {
          route: _networkDispatchers.RouteDispatcher.from(_networkDispatchers.RequestDispatcher.from(this, request), route)
        });
        return true;
      });
    }
    async setWebSocketInterceptionPatterns(params, metadata) {
      this._webSocketInterceptionPatterns = params.patterns;
      if (params.patterns.length)
        await _webSocketRouteDispatcher.WebSocketRouteDispatcher.installIfNeeded(this, this._context);
    }
    async storageState(params, metadata) {
      return await this._context.storageState();
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._context.close(params);
    }
    async enableRecorder(params) {
      if (params.codegenMode === "trace-events") {
        await this._context.tracing.start({
          name: "trace",
          snapshots: true,
          screenshots: true,
          live: true
        });
        await _recorder.Recorder.show("trace-events", this._context, _recorderInTraceViewer.RecorderInTraceViewer.factory(this._context), params);
      } else {
        await _recorder.Recorder.show("actions", this._context, _recorderApp.RecorderApp.factory(this._context), params);
      }
    }
    async pause(params, metadata) {
    }
    async newCDPSession(params) {
      if (!this._object._browser.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      if (!params.page && !params.frame || params.page && params.frame)
        throw new Error(`CDP session must be initiated with either Page or Frame, not none or both`);
      const crBrowserContext = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowserContext.newCDPSession((params.page ? params.page : params.frame)._object))
      };
    }
    async harStart(params) {
      const harId = await this._context._harStart(params.page ? params.page._object : null, params.options);
      return {
        harId
      };
    }
    async harExport(params) {
      const artifact = await this._context._harExport(params.harId);
      if (!artifact)
        throw new Error("No HAR artifact. Ensure record.harPath is set.");
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, artifact)
      };
    }
    async clockFastForward(params, metadata) {
      var _ref, _params$ticksString;
      await this._context.clock.fastForward((_ref = (_params$ticksString = params.ticksString) !== null && _params$ticksString !== undefined ? _params$ticksString : params.ticksNumber) !== null && _ref !== undefined ? _ref : 0);
    }
    async clockInstall(params, metadata) {
      var _ref2, _params$timeString;
      await this._context.clock.install((_ref2 = (_params$timeString = params.timeString) !== null && _params$timeString !== undefined ? _params$timeString : params.timeNumber) !== null && _ref2 !== undefined ? _ref2 : undefined);
    }
    async clockPauseAt(params, metadata) {
      var _ref3, _params$timeString2;
      await this._context.clock.pauseAt((_ref3 = (_params$timeString2 = params.timeString) !== null && _params$timeString2 !== undefined ? _params$timeString2 : params.timeNumber) !== null && _ref3 !== undefined ? _ref3 : 0);
    }
    async clockResume(params, metadata) {
      await this._context.clock.resume();
    }
    async clockRunFor(params, metadata) {
      var _ref4, _params$ticksString2;
      await this._context.clock.runFor((_ref4 = (_params$ticksString2 = params.ticksString) !== null && _params$ticksString2 !== undefined ? _params$ticksString2 : params.ticksNumber) !== null && _ref4 !== undefined ? _ref4 : 0);
    }
    async clockSetFixedTime(params, metadata) {
      var _ref5, _params$timeString3;
      await this._context.clock.setFixedTime((_ref5 = (_params$timeString3 = params.timeString) !== null && _params$timeString3 !== undefined ? _params$timeString3 : params.timeNumber) !== null && _ref5 !== undefined ? _ref5 : 0);
    }
    async clockSetSystemTime(params, metadata) {
      var _ref6, _params$timeString4;
      await this._context.clock.setSystemTime((_ref6 = (_params$timeString4 = params.timeString) !== null && _params$timeString4 !== undefined ? _params$timeString4 : params.timeNumber) !== null && _ref6 !== undefined ? _ref6 : 0);
    }
    async updateSubscription(params) {
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    _onDispose() {
      if (!this._context.isClosingOrClosed())
        this._context.setRequestInterceptor(undefined).catch(() => {
        });
    }
  }
  exports.BrowserContextDispatcher = BrowserContextDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/androidDispatcher.js
var require_androidDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidSocketDispatcher = exports.AndroidDispatcher = exports.AndroidDeviceDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _android = require_android();
  var _browserContextDispatcher = require_browserContextDispatcher();

  class AndroidDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, android) {
      super(scope, android, "Android", {});
      this._type_Android = true;
    }
    async devices(params) {
      const devices = await this._object.devices(params);
      return {
        devices: devices.map((d) => AndroidDeviceDispatcher.from(this, d))
      };
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
  }
  exports.AndroidDispatcher = AndroidDispatcher;

  class AndroidDeviceDispatcher extends _dispatcher.Dispatcher {
    static from(scope, device) {
      const result = (0, _dispatcher.existingDispatcher)(device);
      return result || new AndroidDeviceDispatcher(scope, device);
    }
    constructor(scope, device) {
      super(scope, device, "AndroidDevice", {
        model: device.model,
        serial: device.serial
      });
      this._type_EventTarget = true;
      this._type_AndroidDevice = true;
      for (const webView of device.webViews())
        this._dispatchEvent("webViewAdded", {
          webView
        });
      this.addObjectListener(_android.AndroidDevice.Events.WebViewAdded, (webView) => this._dispatchEvent("webViewAdded", {
        webView
      }));
      this.addObjectListener(_android.AndroidDevice.Events.WebViewRemoved, (socketName) => this._dispatchEvent("webViewRemoved", {
        socketName
      }));
      this.addObjectListener(_android.AndroidDevice.Events.Close, (socketName) => this._dispatchEvent("close"));
    }
    async wait(params) {
      await this._object.send("wait", params);
    }
    async fill(params) {
      await this._object.send("click", {
        selector: params.selector
      });
      await this._object.send("fill", params);
    }
    async tap(params) {
      await this._object.send("click", params);
    }
    async drag(params) {
      await this._object.send("drag", params);
    }
    async fling(params) {
      await this._object.send("fling", params);
    }
    async longTap(params) {
      await this._object.send("longClick", params);
    }
    async pinchClose(params) {
      await this._object.send("pinchClose", params);
    }
    async pinchOpen(params) {
      await this._object.send("pinchOpen", params);
    }
    async scroll(params) {
      await this._object.send("scroll", params);
    }
    async swipe(params) {
      await this._object.send("swipe", params);
    }
    async info(params) {
      const info = await this._object.send("info", params);
      fixupAndroidElementInfo(info);
      return {
        info
      };
    }
    async inputType(params) {
      const text = params.text;
      const keyCodes = [];
      for (let i = 0;i < text.length; ++i) {
        const code = keyMap.get(text[i].toUpperCase());
        if (code === undefined)
          throw new Error("No mapping for " + text[i] + " found");
        keyCodes.push(code);
      }
      await Promise.all(keyCodes.map((keyCode) => this._object.send("inputPress", {
        keyCode
      })));
    }
    async inputPress(params) {
      if (!keyMap.has(params.key))
        throw new Error("Unknown key: " + params.key);
      await this._object.send("inputPress", {
        keyCode: keyMap.get(params.key)
      });
    }
    async inputTap(params) {
      await this._object.send("inputClick", params);
    }
    async inputSwipe(params) {
      await this._object.send("inputSwipe", params);
    }
    async inputDrag(params) {
      await this._object.send("inputDrag", params);
    }
    async screenshot(params) {
      return {
        binary: await this._object.screenshot()
      };
    }
    async shell(params) {
      return {
        result: await this._object.shell(params.command)
      };
    }
    async open(params, metadata) {
      const socket = await this._object.open(params.command);
      return {
        socket: new AndroidSocketDispatcher(this, socket)
      };
    }
    async installApk(params) {
      await this._object.installApk(params.file, {
        args: params.args
      });
    }
    async push(params) {
      await this._object.push(params.file, params.path, params.mode);
    }
    async launchBrowser(params) {
      const context = await this._object.launchBrowser(params.pkg, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async close(params) {
      await this._object.close();
    }
    async setDefaultTimeoutNoReply(params) {
      this._object.setDefaultTimeout(params.timeout);
    }
    async connectToWebView(params) {
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, await this._object.connectToWebView(params.socketName))
      };
    }
  }
  exports.AndroidDeviceDispatcher = AndroidDeviceDispatcher;

  class AndroidSocketDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socket) {
      super(scope, socket, "AndroidSocket", {});
      this._type_AndroidSocket = true;
      this.addObjectListener("data", (data) => this._dispatchEvent("data", {
        data
      }));
      this.addObjectListener("close", () => {
        this._dispatchEvent("close");
        this._dispose();
      });
    }
    async write(params, metadata) {
      await this._object.write(params.data);
    }
    async close(params, metadata) {
      this._object.close();
    }
  }
  exports.AndroidSocketDispatcher = AndroidSocketDispatcher;
  var keyMap = new Map([["Unknown", 0], ["SoftLeft", 1], ["SoftRight", 2], ["Home", 3], ["Back", 4], ["Call", 5], ["EndCall", 6], ["0", 7], ["1", 8], ["2", 9], ["3", 10], ["4", 11], ["5", 12], ["6", 13], ["7", 14], ["8", 15], ["9", 16], ["Star", 17], ["*", 17], ["Pound", 18], ["#", 18], ["DialUp", 19], ["DialDown", 20], ["DialLeft", 21], ["DialRight", 22], ["DialCenter", 23], ["VolumeUp", 24], ["VolumeDown", 25], ["Power", 26], ["Camera", 27], ["Clear", 28], ["A", 29], ["B", 30], ["C", 31], ["D", 32], ["E", 33], ["F", 34], ["G", 35], ["H", 36], ["I", 37], ["J", 38], ["K", 39], ["L", 40], ["M", 41], ["N", 42], ["O", 43], ["P", 44], ["Q", 45], ["R", 46], ["S", 47], ["T", 48], ["U", 49], ["V", 50], ["W", 51], ["X", 52], ["Y", 53], ["Z", 54], ["Comma", 55], [",", 55], ["Period", 56], [".", 56], ["AltLeft", 57], ["AltRight", 58], ["ShiftLeft", 59], ["ShiftRight", 60], ["Tab", 61], ["\t", 61], ["Space", 62], [" ", 62], ["Sym", 63], ["Explorer", 64], ["Envelop", 65], ["Enter", 66], ["Del", 67], ["Grave", 68], ["Minus", 69], ["-", 69], ["Equals", 70], ["=", 70], ["LeftBracket", 71], ["(", 71], ["RightBracket", 72], [")", 72], ["Backslash", 73], ["\\", 73], ["Semicolon", 74], [";", 74], ["Apostrophe", 75], ["`", 75], ["Slash", 76], ["/", 76], ["At", 77], ["@", 77], ["Num", 78], ["HeadsetHook", 79], ["Focus", 80], ["Plus", 81], ["Menu", 82], ["Notification", 83], ["Search", 84], ["ChannelUp", 166], ["ChannelDown", 167], ["AppSwitch", 187], ["Assist", 219], ["Cut", 277], ["Copy", 278], ["Paste", 279]]);
  function fixupAndroidElementInfo(info) {
    info.clazz = info.clazz || "";
    info.pkg = info.pkg || "";
    info.res = info.res || "";
    info.desc = info.desc || "";
    info.text = info.text || "";
    for (const child of info.children || [])
      fixupAndroidElementInfo(child);
  }
});

// node_modules/playwright-core/lib/server/dispatchers/browserDispatcher.js
var require_browserDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConnectedBrowserDispatcher = exports.BrowserDispatcher = undefined;
  var _browser = require_browser();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _cdpSessionDispatcher = require_cdpSessionDispatcher();
  var _dispatcher = require_dispatcher();
  var _browserContext = require_browserContext();
  var _selectors = require_selectors();
  var _artifactDispatcher = require_artifactDispatcher();

  class BrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser) {
      super(scope, browser, "Browser", {
        version: browser.version(),
        name: browser.options.name
      });
      this._type_Browser = true;
      this.addObjectListener(_browser.Browser.Events.Disconnected, () => this._didClose());
    }
    _didClose() {
      this._dispatchEvent("close");
      this._dispose();
    }
    async newContext(params, metadata) {
      const context = await this._object.newContext(metadata, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, null, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close(params, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.close(params);
    }
    async killForTests(_, metadata) {
      metadata.potentiallyClosesScope = true;
      await this._object.killForTests();
    }
    async defaultUserAgentForTest() {
      return {
        userAgent: this._object.userAgent()
      };
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      const crBrowser = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      await crBrowser.startTracing(params.page ? params.page._object : undefined, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing())
      };
    }
  }
  exports.BrowserDispatcher = BrowserDispatcher;

  class ConnectedBrowserDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browser) {
      super(scope, browser, "Browser", {
        version: browser.version(),
        name: browser.options.name
      });
      this._type_Browser = true;
      this._contexts = new Set;
      this.selectors = undefined;
      this.selectors = new _selectors.Selectors;
    }
    async newContext(params, metadata) {
      if (params.recordVideo)
        params.recordVideo.dir = this._object.options.artifactsDir;
      const context = await this._object.newContext(metadata, params);
      this._contexts.add(context);
      context.setSelectors(this.selectors);
      context.on(_browserContext.BrowserContext.Events.Close, () => this._contexts.delete(context));
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, context)
      };
    }
    async newContextForReuse(params, metadata) {
      return await newContextForReuse(this._object, this, params, this.selectors, metadata);
    }
    async stopPendingOperations(params, metadata) {
      await this._object.stopPendingOperations(params.reason);
    }
    async close() {
    }
    async killForTests() {
    }
    async defaultUserAgentForTest() {
      throw new Error("Client should not send us Browser.defaultUserAgentForTest");
    }
    async newBrowserCDPSession() {
      if (!this._object.options.isChromium)
        throw new Error(`CDP session is only available in Chromium`);
      const crBrowser = this._object;
      return {
        session: new _cdpSessionDispatcher.CDPSessionDispatcher(this, await crBrowser.newBrowserCDPSession())
      };
    }
    async startTracing(params) {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      await crBrowser.startTracing(params.page ? params.page._object : undefined, params);
    }
    async stopTracing() {
      if (!this._object.options.isChromium)
        throw new Error(`Tracing is only available in Chromium`);
      const crBrowser = this._object;
      return {
        artifact: _artifactDispatcher.ArtifactDispatcher.from(this, await crBrowser.stopTracing())
      };
    }
    async cleanupContexts() {
      await Promise.all(Array.from(this._contexts).map((context) => context.close({
        reason: "Global context cleanup (connection terminated)"
      })));
    }
  }
  exports.ConnectedBrowserDispatcher = ConnectedBrowserDispatcher;
  async function newContextForReuse(browser, scope, params, selectors, metadata) {
    const {
      context,
      needsReset
    } = await browser.newContextForReuse(params, metadata);
    if (needsReset) {
      const oldContextDispatcher = (0, _dispatcher.existingDispatcher)(context);
      if (oldContextDispatcher)
        oldContextDispatcher._dispose();
      await context.resetForReuse(metadata, params);
    }
    if (selectors)
      context.setSelectors(selectors);
    const contextDispatcher = new _browserContextDispatcher.BrowserContextDispatcher(scope, context);
    return {
      context: contextDispatcher
    };
  }
});

// node_modules/playwright-core/lib/server/dispatchers/browserTypeDispatcher.js
var require_browserTypeDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserTypeDispatcher = undefined;
  var _browserDispatcher = require_browserDispatcher();
  var _dispatcher = require_dispatcher();
  var _browserContextDispatcher = require_browserContextDispatcher();

  class BrowserTypeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, browserType) {
      super(scope, browserType, "BrowserType", {
        executablePath: browserType.executablePath(),
        name: browserType.name()
      });
      this._type_BrowserType = true;
    }
    async launch(params, metadata) {
      const browser = await this._object.launch(metadata, params);
      return {
        browser: new _browserDispatcher.BrowserDispatcher(this, browser)
      };
    }
    async launchPersistentContext(params, metadata) {
      const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);
      return {
        context: new _browserContextDispatcher.BrowserContextDispatcher(this, browserContext)
      };
    }
    async connectOverCDP(params, metadata) {
      const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);
      const browserDispatcher = new _browserDispatcher.BrowserDispatcher(this, browser);
      return {
        browser: browserDispatcher,
        defaultContext: browser._defaultContext ? new _browserContextDispatcher.BrowserContextDispatcher(browserDispatcher, browser._defaultContext) : undefined
      };
    }
  }
  exports.BrowserTypeDispatcher = BrowserTypeDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/electronDispatcher.js
var require_electronDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronDispatcher = exports.ElectronApplicationDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _electron = require_electron2();
  var _browserContextDispatcher = require_browserContextDispatcher();
  var _jsHandleDispatcher = require_jsHandleDispatcher();
  var _elementHandlerDispatcher = require_elementHandlerDispatcher();

  class ElectronDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electron) {
      super(scope, electron, "Electron", {});
      this._type_Electron = true;
    }
    async launch(params) {
      const electronApplication = await this._object.launch(params);
      return {
        electronApplication: new ElectronApplicationDispatcher(this, electronApplication)
      };
    }
  }
  exports.ElectronDispatcher = ElectronDispatcher;

  class ElectronApplicationDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, electronApplication) {
      super(scope, electronApplication, "ElectronApplication", {
        context: new _browserContextDispatcher.BrowserContextDispatcher(scope, electronApplication.context())
      });
      this._type_EventTarget = true;
      this._type_ElectronApplication = true;
      this._subscriptions = new Set;
      this.addObjectListener(_electron.ElectronApplication.Events.Close, () => {
        this._dispatchEvent("close");
        this._dispose();
      });
      this.addObjectListener(_electron.ElectronApplication.Events.Console, (message) => {
        if (!this._subscriptions.has("console"))
          return;
        this._dispatchEvent("console", {
          type: message.type(),
          text: message.text(),
          args: message.args().map((a) => _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, a)),
          location: message.location()
        });
      });
    }
    async browserWindow(params) {
      const handle = await this._object.browserWindow(params.page.page());
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, handle)
      };
    }
    async evaluateExpression(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      return {
        value: (0, _jsHandleDispatcher.serializeResult)(await handle.evaluateExpression(params.expression, {
          isFunction: params.isFunction
        }, (0, _jsHandleDispatcher.parseArgument)(params.arg)))
      };
    }
    async evaluateExpressionHandle(params) {
      const handle = await this._object._nodeElectronHandlePromise;
      const result = await handle.evaluateExpressionHandle(params.expression, {
        isFunction: params.isFunction
      }, (0, _jsHandleDispatcher.parseArgument)(params.arg));
      return {
        handle: _elementHandlerDispatcher.ElementHandleDispatcher.fromJSHandle(this, result)
      };
    }
    async updateSubscription(params) {
      if (params.enabled)
        this._subscriptions.add(params.event);
      else
        this._subscriptions.delete(params.event);
    }
    async close() {
      await this._object.close();
    }
  }
  exports.ElectronApplicationDispatcher = ElectronApplicationDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/jsonPipeDispatcher.js
var require_jsonPipeDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonPipeDispatcher = undefined;
  var _dispatcher = require_dispatcher();
  var _utils = require_utils();

  class JsonPipeDispatcher extends _dispatcher.Dispatcher {
    constructor(scope) {
      super(scope, {
        guid: "jsonPipe@" + (0, _utils.createGuid)()
      }, "JsonPipe", {});
      this._type_JsonPipe = true;
    }
    async send(params) {
      this.emit("message", params.message);
    }
    async close() {
      this.emit("close");
      if (!this._disposed) {
        this._dispatchEvent("closed", {});
        this._dispose();
      }
    }
    dispatch(message) {
      if (!this._disposed)
        this._dispatchEvent("message", {
          message
        });
    }
    wasClosed(reason) {
      if (!this._disposed) {
        this._dispatchEvent("closed", {
          reason
        });
        this._dispose();
      }
    }
    dispose() {
      this._dispose();
    }
  }
  exports.JsonPipeDispatcher = JsonPipeDispatcher;
});

// node_modules/playwright-core/lib/server/socksInterceptor.js
var require_socksInterceptor = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SocksInterceptor = undefined;
  var socks = _interopRequireWildcard(require_socksProxy());
  var _events = _interopRequireDefault(__require("events"));
  var _validator = require_validator();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class SocksInterceptor {
    constructor(transport, pattern, redirectPortForTest) {
      this._handler = undefined;
      this._channel = undefined;
      this._socksSupportObjectGuid = undefined;
      this._ids = new Set;
      this._handler = new socks.SocksProxyHandler(pattern, redirectPortForTest);
      let lastId = -1;
      this._channel = new Proxy(new _events.default, {
        get: (obj, prop) => {
          if (prop in obj || obj[prop] !== undefined || typeof prop !== "string")
            return obj[prop];
          return (params) => {
            try {
              const id = --lastId;
              this._ids.add(id);
              const validator = (0, _validator.findValidator)("SocksSupport", prop, "Params");
              params = validator(params, "", {
                tChannelImpl: tChannelForSocks,
                binary: "toBase64"
              });
              transport.send({
                id,
                guid: this._socksSupportObjectGuid,
                method: prop,
                params,
                metadata: {
                  stack: [],
                  apiName: "",
                  internal: true
                }
              });
            } catch (e) {
            }
          };
        }
      });
      this._handler.on(socks.SocksProxyHandler.Events.SocksConnected, (payload) => this._channel.socksConnected(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksData, (payload) => this._channel.socksData(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksError, (payload) => this._channel.socksError(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksFailed, (payload) => this._channel.socksFailed(payload));
      this._handler.on(socks.SocksProxyHandler.Events.SocksEnd, (payload) => this._channel.socksEnd(payload));
      this._channel.on("socksRequested", (payload) => this._handler.socketRequested(payload));
      this._channel.on("socksClosed", (payload) => this._handler.socketClosed(payload));
      this._channel.on("socksData", (payload) => this._handler.sendSocketData(payload));
    }
    cleanup() {
      this._handler.cleanup();
    }
    interceptMessage(message) {
      if (this._ids.has(message.id)) {
        this._ids.delete(message.id);
        return true;
      }
      if (message.method === "__create__" && message.params.type === "SocksSupport") {
        this._socksSupportObjectGuid = message.params.guid;
        return false;
      }
      if (this._socksSupportObjectGuid && message.guid === this._socksSupportObjectGuid) {
        const validator = (0, _validator.findValidator)("SocksSupport", message.method, "Event");
        const params = validator(message.params, "", {
          tChannelImpl: tChannelForSocks,
          binary: "fromBase64"
        });
        this._channel.emit(message.method, params);
        return true;
      }
      return false;
    }
  }
  exports.SocksInterceptor = SocksInterceptor;
  function tChannelForSocks(names, arg, path, context) {
    throw new _validator.ValidationError(`${path}: channels are not expected in SocksSupport`);
  }
});

// node_modules/playwright-core/lib/server/dispatchers/localUtilsDispatcher.js
var require_localUtilsDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LocalUtilsDispatcher = undefined;
  exports.urlToWSEndpoint = urlToWSEndpoint;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _os = _interopRequireDefault(__require("os"));
  var _manualPromise = require_manualPromise();
  var _utils = require_utils();
  var _dispatcher = require_dispatcher();
  var _zipBundle = require_zipBundle();
  var _zipFile = require_zipFile();
  var _jsonPipeDispatcher = require_jsonPipeDispatcher();
  var _transport = require_transport2();
  var _socksInterceptor = require_socksInterceptor();
  var _userAgent = require_userAgent();
  var _progress = require_progress();
  var _network = require_network();
  var _instrumentation = require_instrumentation();
  var _deviceDescriptors = require_deviceDescriptors();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class LocalUtilsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright) {
      const localUtils = new _instrumentation.SdkObject(playwright, "localUtils", "localUtils");
      const deviceDescriptors = Object.entries(_deviceDescriptors.deviceDescriptors).map(([name, descriptor]) => ({
        name,
        descriptor
      }));
      super(scope, localUtils, "LocalUtils", {
        deviceDescriptors
      });
      this._type_LocalUtils = undefined;
      this._harBackends = new Map;
      this._stackSessions = new Map;
      this._type_LocalUtils = true;
    }
    async zip(params) {
      const promise = new _manualPromise.ManualPromise;
      const zipFile = new _zipBundle.yazl.ZipFile;
      zipFile.on("error", (error) => promise.reject(error));
      const addFile = (file, name) => {
        try {
          if (_fs.default.statSync(file).isFile())
            zipFile.addFile(file, name);
        } catch (e) {
        }
      };
      for (const entry of params.entries)
        addFile(entry.value, entry.name);
      const stackSession = params.stacksId ? this._stackSessions.get(params.stacksId) : undefined;
      if (stackSession !== null && stackSession !== undefined && stackSession.callStacks.length) {
        await stackSession.writer;
        if (process.env.PW_LIVE_TRACE_STACKS) {
          zipFile.addFile(stackSession.file, "trace.stacks");
        } else {
          const buffer = Buffer.from(JSON.stringify((0, _utils.serializeClientSideCallMetadata)(stackSession.callStacks)));
          zipFile.addBuffer(buffer, "trace.stacks");
        }
      }
      if (params.includeSources) {
        const sourceFiles = new Set;
        for (const {
          stack
        } of (stackSession === null || stackSession === undefined ? undefined : stackSession.callStacks) || []) {
          if (!stack)
            continue;
          for (const {
            file
          } of stack)
            sourceFiles.add(file);
        }
        for (const sourceFile of sourceFiles)
          addFile(sourceFile, "resources/src@" + (0, _utils.calculateSha1)(sourceFile) + ".txt");
      }
      if (params.mode === "write") {
        await _fs.default.promises.mkdir(_path.default.dirname(params.zipFile), {
          recursive: true
        });
        zipFile.end(undefined, () => {
          zipFile.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => promise.resolve()).on("error", (error) => promise.reject(error));
        });
        await promise;
        await this._deleteStackSession(params.stacksId);
        return;
      }
      const tempFile = params.zipFile + ".tmp";
      await _fs.default.promises.rename(params.zipFile, tempFile);
      _zipBundle.yauzl.open(tempFile, (err, inZipFile) => {
        if (err) {
          promise.reject(err);
          return;
        }
        (0, _utils.assert)(inZipFile);
        let pendingEntries = inZipFile.entryCount;
        inZipFile.on("entry", (entry) => {
          inZipFile.openReadStream(entry, (err2, readStream) => {
            if (err2) {
              promise.reject(err2);
              return;
            }
            zipFile.addReadStream(readStream, entry.fileName);
            if (--pendingEntries === 0) {
              zipFile.end(undefined, () => {
                zipFile.outputStream.pipe(_fs.default.createWriteStream(params.zipFile)).on("close", () => {
                  _fs.default.promises.unlink(tempFile).then(() => {
                    promise.resolve();
                  }).catch((error) => promise.reject(error));
                });
              });
            }
          });
        });
      });
      await promise;
      await this._deleteStackSession(params.stacksId);
    }
    async harOpen(params, metadata) {
      let harBackend;
      if (params.file.endsWith(".zip")) {
        const zipFile = new _zipFile.ZipFile(params.file);
        const entryNames = await zipFile.entries();
        const harEntryName = entryNames.find((e) => e.endsWith(".har"));
        if (!harEntryName)
          return {
            error: "Specified archive does not have a .har file"
          };
        const har = await zipFile.read(harEntryName);
        const harFile = JSON.parse(har.toString());
        harBackend = new HarBackend(harFile, null, zipFile);
      } else {
        const harFile = JSON.parse(await _fs.default.promises.readFile(params.file, "utf-8"));
        harBackend = new HarBackend(harFile, _path.default.dirname(params.file), null);
      }
      this._harBackends.set(harBackend.id, harBackend);
      return {
        harId: harBackend.id
      };
    }
    async harLookup(params, metadata) {
      const harBackend = this._harBackends.get(params.harId);
      if (!harBackend)
        return {
          action: "error",
          message: `Internal error: har was not opened`
        };
      return await harBackend.lookup(params.url, params.method, params.headers, params.postData, params.isNavigationRequest);
    }
    async harClose(params, metadata) {
      const harBackend = this._harBackends.get(params.harId);
      if (harBackend) {
        this._harBackends.delete(harBackend.id);
        harBackend.dispose();
      }
    }
    async harUnzip(params, metadata) {
      const dir = _path.default.dirname(params.zipFile);
      const zipFile = new _zipFile.ZipFile(params.zipFile);
      for (const entry of await zipFile.entries()) {
        const buffer = await zipFile.read(entry);
        if (entry === "har.har")
          await _fs.default.promises.writeFile(params.harFile, buffer);
        else
          await _fs.default.promises.writeFile(_path.default.join(dir, entry), buffer);
      }
      zipFile.close();
      await _fs.default.promises.unlink(params.zipFile);
    }
    async connect(params, metadata) {
      const controller = new _progress.ProgressController(metadata, this._object);
      controller.setLogName("browser");
      return await controller.run(async (progress2) => {
        var _params$exposeNetwork;
        const wsHeaders = {
          "User-Agent": (0, _userAgent.getUserAgent)(),
          "x-playwright-proxy": (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== undefined ? _params$exposeNetwork : "",
          ...params.headers
        };
        const wsEndpoint = await urlToWSEndpoint(progress2, params.wsEndpoint);
        const transport = await _transport.WebSocketTransport.connect(progress2, wsEndpoint, wsHeaders, true, "x-playwright-debug-log");
        const socksInterceptor = new _socksInterceptor.SocksInterceptor(transport, params.exposeNetwork, params.socksProxyRedirectPortForTest);
        const pipe = new _jsonPipeDispatcher.JsonPipeDispatcher(this);
        transport.onmessage = (json) => {
          if (socksInterceptor.interceptMessage(json))
            return;
          const cb = () => {
            try {
              pipe.dispatch(json);
            } catch (e) {
              transport.close();
            }
          };
          if (params.slowMo)
            setTimeout(cb, params.slowMo);
          else
            cb();
        };
        pipe.on("message", (message) => {
          transport.send(message);
        });
        transport.onclose = (reason) => {
          socksInterceptor === null || socksInterceptor === undefined || socksInterceptor.cleanup();
          pipe.wasClosed(reason);
        };
        pipe.on("close", () => transport.close());
        return {
          pipe,
          headers: transport.headers
        };
      }, params.timeout || 0);
    }
    async tracingStarted(params, metadata) {
      let tmpDir = undefined;
      if (!params.tracesDir)
        tmpDir = await _fs.default.promises.mkdtemp(_path.default.join(_os.default.tmpdir(), "playwright-tracing-"));
      const traceStacksFile = _path.default.join(params.tracesDir || tmpDir, params.traceName + ".stacks");
      this._stackSessions.set(traceStacksFile, {
        callStacks: [],
        file: traceStacksFile,
        writer: Promise.resolve(),
        tmpDir
      });
      return {
        stacksId: traceStacksFile
      };
    }
    async traceDiscarded(params, metadata) {
      await this._deleteStackSession(params.stacksId);
    }
    async addStackToTracingNoReply(params, metadata) {
      for (const session of this._stackSessions.values()) {
        session.callStacks.push(params.callData);
        if (process.env.PW_LIVE_TRACE_STACKS) {
          session.writer = session.writer.then(() => {
            const buffer = Buffer.from(JSON.stringify((0, _utils.serializeClientSideCallMetadata)(session.callStacks)));
            return _fs.default.promises.writeFile(session.file, buffer);
          });
        }
      }
    }
    async _deleteStackSession(stacksId) {
      const session = stacksId ? this._stackSessions.get(stacksId) : undefined;
      if (!session)
        return;
      await session.writer;
      if (session.tmpDir)
        await (0, _utils.removeFolders)([session.tmpDir]);
      this._stackSessions.delete(stacksId);
    }
  }
  exports.LocalUtilsDispatcher = LocalUtilsDispatcher;
  var redirectStatus = [301, 302, 303, 307, 308];

  class HarBackend {
    constructor(harFile, baseDir, zipFile) {
      this.id = (0, _utils.createGuid)();
      this._harFile = undefined;
      this._zipFile = undefined;
      this._baseDir = undefined;
      this._harFile = harFile;
      this._baseDir = baseDir;
      this._zipFile = zipFile;
    }
    async lookup(url, method, headers, postData, isNavigationRequest) {
      let entry;
      try {
        entry = await this._harFindResponse(url, method, headers, postData);
      } catch (e) {
        return {
          action: "error",
          message: "HAR error: " + e.message
        };
      }
      if (!entry)
        return {
          action: "noentry"
        };
      if (entry.request.url !== url && isNavigationRequest)
        return {
          action: "redirect",
          redirectURL: entry.request.url
        };
      const response = entry.response;
      try {
        const buffer = await this._loadContent(response.content);
        return {
          action: "fulfill",
          status: response.status,
          headers: response.headers,
          body: buffer
        };
      } catch (e) {
        return {
          action: "error",
          message: e.message
        };
      }
    }
    async _loadContent(content) {
      const file = content._file;
      let buffer;
      if (file) {
        if (this._zipFile)
          buffer = await this._zipFile.read(file);
        else
          buffer = await _fs.default.promises.readFile(_path.default.resolve(this._baseDir, file));
      } else {
        buffer = Buffer.from(content.text || "", content.encoding === "base64" ? "base64" : "utf-8");
      }
      return buffer;
    }
    async _harFindResponse(url, method, headers, postData) {
      const harLog = this._harFile.log;
      const visited = new Set;
      while (true) {
        const entries = [];
        for (const candidate of harLog.entries) {
          if (candidate.request.url !== url || candidate.request.method !== method)
            continue;
          if (method === "POST" && postData && candidate.request.postData) {
            const buffer = await this._loadContent(candidate.request.postData);
            if (!buffer.equals(postData)) {
              const boundary = multipartBoundary(headers);
              if (!boundary)
                continue;
              const candidataBoundary = multipartBoundary(candidate.request.headers);
              if (!candidataBoundary)
                continue;
              if (postData.toString().replaceAll(boundary, "") !== buffer.toString().replaceAll(candidataBoundary, ""))
                continue;
            }
          }
          entries.push(candidate);
        }
        if (!entries.length)
          return;
        let entry = entries[0];
        if (entries.length > 1) {
          const list = [];
          for (const candidate of entries) {
            const matchingHeaders = countMatchingHeaders(candidate.request.headers, headers);
            list.push({
              candidate,
              matchingHeaders
            });
          }
          list.sort((a, b) => b.matchingHeaders - a.matchingHeaders);
          entry = list[0].candidate;
        }
        if (visited.has(entry))
          throw new Error(`Found redirect cycle for ${url}`);
        visited.add(entry);
        const locationHeader = entry.response.headers.find((h) => h.name.toLowerCase() === "location");
        if (redirectStatus.includes(entry.response.status) && locationHeader) {
          const locationURL = new URL(locationHeader.value, url);
          url = locationURL.toString();
          if ((entry.response.status === 301 || entry.response.status === 302) && method === "POST" || entry.response.status === 303 && !["GET", "HEAD"].includes(method)) {
            method = "GET";
          }
          continue;
        }
        return entry;
      }
    }
    dispose() {
      var _this$_zipFile;
      (_this$_zipFile = this._zipFile) === null || _this$_zipFile === undefined || _this$_zipFile.close();
    }
  }
  function countMatchingHeaders(harHeaders, headers) {
    const set = new Set(headers.map((h) => h.name.toLowerCase() + ":" + h.value));
    let matches = 0;
    for (const h of harHeaders) {
      if (set.has(h.name.toLowerCase() + ":" + h.value))
        ++matches;
    }
    return matches;
  }
  async function urlToWSEndpoint(progress2, endpointURL) {
    var _progress$timeUntilDe;
    if (endpointURL.startsWith("ws"))
      return endpointURL;
    progress2 === null || progress2 === undefined || progress2.log(`<ws preparing> retrieving websocket url from ${endpointURL}`);
    const fetchUrl = new URL(endpointURL);
    if (!fetchUrl.pathname.endsWith("/"))
      fetchUrl.pathname += "/";
    fetchUrl.pathname += "json";
    const json = await (0, _network.fetchData)({
      url: fetchUrl.toString(),
      method: "GET",
      timeout: (_progress$timeUntilDe = progress2 === null || progress2 === undefined ? undefined : progress2.timeUntilDeadline()) !== null && _progress$timeUntilDe !== undefined ? _progress$timeUntilDe : 30000,
      headers: {
        "User-Agent": (0, _userAgent.getUserAgent)()
      }
    }, async (params, response) => {
      return new Error(`Unexpected status ${response.statusCode} when connecting to ${fetchUrl.toString()}.
` + `This does not look like a Playwright server, try connecting via ws://.`);
    });
    progress2 === null || progress2 === undefined || progress2.throwIfAborted();
    const wsUrl = new URL(endpointURL);
    let wsEndpointPath = JSON.parse(json).wsEndpointPath;
    if (wsEndpointPath.startsWith("/"))
      wsEndpointPath = wsEndpointPath.substring(1);
    if (!wsUrl.pathname.endsWith("/"))
      wsUrl.pathname += "/";
    wsUrl.pathname += wsEndpointPath;
    wsUrl.protocol = wsUrl.protocol === "https:" ? "wss:" : "ws:";
    return wsUrl.toString();
  }
  function multipartBoundary(headers) {
    const contentType = headers.find((h) => h.name.toLowerCase() === "content-type");
    if (!(contentType !== null && contentType !== undefined && contentType.value.includes("multipart/form-data")))
      return;
    const boundary = contentType.value.match(/boundary=(\S+)/);
    if (boundary)
      return boundary[1];
    return;
  }
});

// node_modules/playwright-core/lib/server/dispatchers/selectorsDispatcher.js
var require_selectorsDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SelectorsDispatcher = undefined;
  var _dispatcher = require_dispatcher();

  class SelectorsDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, selectors) {
      super(scope, selectors, "Selectors", {});
      this._type_Selectors = true;
    }
    async register(params) {
      await this._object.register(params.name, params.source, params.contentScript);
    }
    async setTestIdAttributeName(params) {
      this._object.setTestIdAttributeName(params.testIdAttributeName);
    }
  }
  exports.SelectorsDispatcher = SelectorsDispatcher;
});

// node_modules/playwright-core/lib/server/dispatchers/playwrightDispatcher.js
var require_playwrightDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightDispatcher = undefined;
  var _fetch = require_fetch();
  var _socksProxy = require_socksProxy();
  var _androidDispatcher = require_androidDispatcher();
  var _browserTypeDispatcher = require_browserTypeDispatcher();
  var _dispatcher = require_dispatcher();
  var _electronDispatcher = require_electronDispatcher();
  var _localUtilsDispatcher = require_localUtilsDispatcher();
  var _networkDispatchers = require_networkDispatchers();
  var _selectorsDispatcher = require_selectorsDispatcher();
  var _browserDispatcher = require_browserDispatcher();
  var _utils = require_utils();
  var _eventsHelper = require_eventsHelper();

  class PlaywrightDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, playwright, socksProxy, preLaunchedBrowser, prelaunchedAndroidDevice) {
      const browserDispatcher = preLaunchedBrowser ? new _browserDispatcher.ConnectedBrowserDispatcher(scope, preLaunchedBrowser) : undefined;
      const android = new _androidDispatcher.AndroidDispatcher(scope, playwright.android);
      const prelaunchedAndroidDeviceDispatcher = prelaunchedAndroidDevice ? new _androidDispatcher.AndroidDeviceDispatcher(android, prelaunchedAndroidDevice) : undefined;
      super(scope, playwright, "Playwright", {
        chromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.chromium),
        firefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.firefox),
        webkit: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.webkit),
        bidiChromium: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.bidiChromium),
        bidiFirefox: new _browserTypeDispatcher.BrowserTypeDispatcher(scope, playwright.bidiFirefox),
        android,
        electron: new _electronDispatcher.ElectronDispatcher(scope, playwright.electron),
        utils: playwright.options.isServer ? undefined : new _localUtilsDispatcher.LocalUtilsDispatcher(scope, playwright),
        selectors: new _selectorsDispatcher.SelectorsDispatcher(scope, (browserDispatcher === null || browserDispatcher === undefined ? undefined : browserDispatcher.selectors) || playwright.selectors),
        preLaunchedBrowser: browserDispatcher,
        preConnectedAndroidDevice: prelaunchedAndroidDeviceDispatcher,
        socksSupport: socksProxy ? new SocksSupportDispatcher(scope, socksProxy) : undefined
      });
      this._type_Playwright = undefined;
      this._browserDispatcher = undefined;
      this._type_Playwright = true;
      this._browserDispatcher = browserDispatcher;
    }
    async newRequest(params) {
      const request = new _fetch.GlobalAPIRequestContext(this._object, params);
      return {
        request: _networkDispatchers.APIRequestContextDispatcher.from(this.parentScope(), request)
      };
    }
    async cleanup() {
      var _this$_browserDispatc;
      await ((_this$_browserDispatc = this._browserDispatcher) === null || _this$_browserDispatc === undefined ? undefined : _this$_browserDispatc.cleanupContexts());
    }
  }
  exports.PlaywrightDispatcher = PlaywrightDispatcher;

  class SocksSupportDispatcher extends _dispatcher.Dispatcher {
    constructor(scope, socksProxy) {
      super(scope, {
        guid: "socksSupport@" + (0, _utils.createGuid)()
      }, "SocksSupport", {});
      this._type_SocksSupport = undefined;
      this._socksProxy = undefined;
      this._socksListeners = undefined;
      this._type_SocksSupport = true;
      this._socksProxy = socksProxy;
      this._socksListeners = [_eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksRequested, (payload) => this._dispatchEvent("socksRequested", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksData, (payload) => this._dispatchEvent("socksData", payload)), _eventsHelper.eventsHelper.addEventListener(socksProxy, _socksProxy.SocksProxy.Events.SocksClosed, (payload) => this._dispatchEvent("socksClosed", payload))];
    }
    async socksConnected(params) {
      var _this$_socksProxy;
      (_this$_socksProxy = this._socksProxy) === null || _this$_socksProxy === undefined || _this$_socksProxy.socketConnected(params);
    }
    async socksFailed(params) {
      var _this$_socksProxy2;
      (_this$_socksProxy2 = this._socksProxy) === null || _this$_socksProxy2 === undefined || _this$_socksProxy2.socketFailed(params);
    }
    async socksData(params) {
      var _this$_socksProxy3;
      (_this$_socksProxy3 = this._socksProxy) === null || _this$_socksProxy3 === undefined || _this$_socksProxy3.sendSocketData(params);
    }
    async socksError(params) {
      var _this$_socksProxy4;
      (_this$_socksProxy4 = this._socksProxy) === null || _this$_socksProxy4 === undefined || _this$_socksProxy4.sendSocketError(params);
    }
    async socksEnd(params) {
      var _this$_socksProxy5;
      (_this$_socksProxy5 = this._socksProxy) === null || _this$_socksProxy5 === undefined || _this$_socksProxy5.sendSocketEnd(params);
    }
    _onDispose() {
      _eventsHelper.eventsHelper.removeEventListeners(this._socksListeners);
    }
  }
});

// node_modules/playwright-core/lib/server/index.js
var require_server = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "DispatcherConnection", {
    enumerable: true,
    get: function() {
      return _dispatcher.DispatcherConnection;
    }
  });
  Object.defineProperty(exports, "PlaywrightDispatcher", {
    enumerable: true,
    get: function() {
      return _playwrightDispatcher.PlaywrightDispatcher;
    }
  });
  Object.defineProperty(exports, "Registry", {
    enumerable: true,
    get: function() {
      return _registry.Registry;
    }
  });
  Object.defineProperty(exports, "RootDispatcher", {
    enumerable: true,
    get: function() {
      return _dispatcher.RootDispatcher;
    }
  });
  Object.defineProperty(exports, "SocksProxy", {
    enumerable: true,
    get: function() {
      return _socksProxy.SocksProxy;
    }
  });
  Object.defineProperty(exports, "createPlaywright", {
    enumerable: true,
    get: function() {
      return _playwright.createPlaywright;
    }
  });
  Object.defineProperty(exports, "installBrowsersForNpmInstall", {
    enumerable: true,
    get: function() {
      return _registry.installBrowsersForNpmInstall;
    }
  });
  Object.defineProperty(exports, "installRootRedirect", {
    enumerable: true,
    get: function() {
      return _traceViewer.installRootRedirect;
    }
  });
  Object.defineProperty(exports, "openTraceInBrowser", {
    enumerable: true,
    get: function() {
      return _traceViewer.openTraceInBrowser;
    }
  });
  Object.defineProperty(exports, "openTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer.openTraceViewerApp;
    }
  });
  Object.defineProperty(exports, "registry", {
    enumerable: true,
    get: function() {
      return _registry.registry;
    }
  });
  Object.defineProperty(exports, "registryDirectory", {
    enumerable: true,
    get: function() {
      return _registry.registryDirectory;
    }
  });
  Object.defineProperty(exports, "runTraceViewerApp", {
    enumerable: true,
    get: function() {
      return _traceViewer.runTraceViewerApp;
    }
  });
  Object.defineProperty(exports, "serverSideCallMetadata", {
    enumerable: true,
    get: function() {
      return _instrumentation.serverSideCallMetadata;
    }
  });
  Object.defineProperty(exports, "startTraceViewerServer", {
    enumerable: true,
    get: function() {
      return _traceViewer.startTraceViewerServer;
    }
  });
  Object.defineProperty(exports, "writeDockerVersion", {
    enumerable: true,
    get: function() {
      return _registry.writeDockerVersion;
    }
  });
  var _registry = require_registry();
  var _dispatcher = require_dispatcher();
  var _playwrightDispatcher = require_playwrightDispatcher();
  var _playwright = require_playwright();
  var _traceViewer = require_traceViewer();
  var _instrumentation = require_instrumentation();
  var _socksProxy = require_socksProxy();
});

// node_modules/playwright-core/lib/client/errors.js
var require_errors2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TimeoutError = exports.TargetClosedError = undefined;
  exports.isTargetClosedError = isTargetClosedError;
  exports.parseError = parseError;
  exports.serializeError = serializeError;
  var _utils = require_utils();
  var _serializers = require_serializers();

  class TimeoutError extends Error {
    constructor(message) {
      super(message);
      this.name = "TimeoutError";
    }
  }
  exports.TimeoutError = TimeoutError;

  class TargetClosedError extends Error {
    constructor(cause) {
      super(cause || "Target page, context or browser has been closed");
    }
  }
  exports.TargetClosedError = TargetClosedError;
  function isTargetClosedError(error) {
    return error instanceof TargetClosedError;
  }
  function serializeError(e) {
    if ((0, _utils.isError)(e))
      return {
        error: {
          message: e.message,
          stack: e.stack,
          name: e.name
        }
      };
    return {
      value: (0, _serializers.serializeValue)(e, (value) => ({
        fallThrough: value
      }))
    };
  }
  function parseError(error) {
    if (!error.error) {
      if (error.value === undefined)
        throw new Error("Serialized error must have either an error or a value");
      return (0, _serializers.parseSerializedValue)(error.value, undefined);
    }
    if (error.error.name === "TimeoutError") {
      const e2 = new TimeoutError(error.error.message);
      e2.stack = error.error.stack || "";
      return e2;
    }
    if (error.error.name === "TargetClosedError") {
      const e2 = new TargetClosedError(error.error.message);
      e2.stack = error.error.stack || "";
      return e2;
    }
    const e = new Error(error.error.message);
    e.stack = error.error.stack || "";
    e.name = error.error.name;
    return e;
  }
});

// node_modules/playwright-core/lib/client/accessibility.js
var require_accessibility2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Accessibility = undefined;
  function axNodeFromProtocol(axNode) {
    const result = {
      ...axNode,
      value: axNode.valueNumber !== undefined ? axNode.valueNumber : axNode.valueString,
      checked: axNode.checked === "checked" ? true : axNode.checked === "unchecked" ? false : axNode.checked,
      pressed: axNode.pressed === "pressed" ? true : axNode.pressed === "released" ? false : axNode.pressed,
      children: axNode.children ? axNode.children.map(axNodeFromProtocol) : undefined
    };
    delete result.valueNumber;
    delete result.valueString;
    return result;
  }

  class Accessibility {
    constructor(channel) {
      this._channel = undefined;
      this._channel = channel;
    }
    async snapshot(options = {}) {
      const root = options.root ? options.root._elementChannel : undefined;
      const result = await this._channel.accessibilitySnapshot({
        interestingOnly: options.interestingOnly,
        root
      });
      return result.rootAXNode ? axNodeFromProtocol(result.rootAXNode) : null;
    }
  }
  exports.Accessibility = Accessibility;
});

// node_modules/playwright-core/lib/client/eventEmitter.js
var require_eventEmitter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.EventEmitter = undefined;
  var _events = __require("events");
  var _utils = require_utils();

  class EventEmitter {
    constructor() {
      this._events = undefined;
      this._eventsCount = 0;
      this._maxListeners = undefined;
      this._pendingHandlers = new Map;
      this._rejectionHandler = undefined;
      if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || undefined;
      this.on = this.addListener;
      this.off = this.removeListener;
    }
    setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || Number.isNaN(n))
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      this._maxListeners = n;
      return this;
    }
    getMaxListeners() {
      return this._maxListeners === undefined ? _events.EventEmitter.defaultMaxListeners : this._maxListeners;
    }
    emit(type, ...args) {
      const events = this._events;
      if (events === undefined)
        return false;
      const handler = events === null || events === undefined ? undefined : events[type];
      if (handler === undefined)
        return false;
      if (typeof handler === "function") {
        this._callHandler(type, handler, args);
      } else {
        const len = handler.length;
        const listeners = handler.slice();
        for (let i = 0;i < len; ++i)
          this._callHandler(type, listeners[i], args);
      }
      return true;
    }
    _callHandler(type, handler, args) {
      const promise = Reflect.apply(handler, this, args);
      if (!(promise instanceof Promise))
        return;
      let set = this._pendingHandlers.get(type);
      if (!set) {
        set = new Set;
        this._pendingHandlers.set(type, set);
      }
      set.add(promise);
      promise.catch((e) => {
        if (this._rejectionHandler)
          this._rejectionHandler(e);
        else
          throw e;
      }).finally(() => set.delete(promise));
    }
    addListener(type, listener) {
      return this._addListener(type, listener, false);
    }
    on(type, listener) {
      return this._addListener(type, listener, false);
    }
    _addListener(type, listener, prepend) {
      checkListener(listener);
      let events = this._events;
      let existing;
      if (events === undefined) {
        events = this._events = Object.create(null);
        this._eventsCount = 0;
      } else {
        if (events.newListener !== undefined) {
          this.emit("newListener", type, unwrapListener(listener));
          events = this._events;
        }
        existing = events[type];
      }
      if (existing === undefined) {
        existing = events[type] = listener;
        ++this._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        const m = this.getMaxListeners();
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          const w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = this;
          w.type = type;
          w.count = existing.length;
          if (!(0, _utils.isUnderTest)()) {
            console.warn(w);
          }
        }
      }
      return this;
    }
    prependListener(type, listener) {
      return this._addListener(type, listener, true);
    }
    once(type, listener) {
      checkListener(listener);
      this.on(type, new OnceWrapper(this, type, listener).wrapperFunction);
      return this;
    }
    prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, new OnceWrapper(this, type, listener).wrapperFunction);
      return this;
    }
    removeListener(type, listener) {
      checkListener(listener);
      const events = this._events;
      if (events === undefined)
        return this;
      const list = events[type];
      if (list === undefined)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) {
          this._events = Object.create(null);
        } else {
          var _listener;
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, (_listener = list.listener) !== null && _listener !== undefined ? _listener : listener);
        }
      } else if (typeof list !== "function") {
        let position = -1;
        let originalListener;
        for (let i = list.length - 1;i >= 0; i--) {
          if (list[i] === listener || wrappedListener(list[i]) === listener) {
            originalListener = wrappedListener(list[i]);
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else
          list.splice(position, 1);
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== undefined)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    }
    off(type, listener) {
      return this.removeListener(type, listener);
    }
    removeAllListeners(type, options) {
      this._removeAllListeners(type);
      if (!options)
        return this;
      if (options.behavior === "wait") {
        const errors = [];
        this._rejectionHandler = (error) => errors.push(error);
        return this._waitFor(type).then(() => {
          if (errors.length)
            throw errors[0];
        });
      }
      if (options.behavior === "ignoreErrors")
        this._rejectionHandler = () => {
        };
      return Promise.resolve();
    }
    _removeAllListeners(type) {
      const events = this._events;
      if (!events)
        return;
      if (!events.removeListener) {
        if (type === undefined) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return;
      }
      if (type === undefined) {
        const keys = Object.keys(events);
        let key;
        for (let i = 0;i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this._removeAllListeners(key);
        }
        this._removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return;
      }
      const listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        for (let i = listeners.length - 1;i >= 0; i--)
          this.removeListener(type, listeners[i]);
      }
    }
    listeners(type) {
      return this._listeners(this, type, true);
    }
    rawListeners(type) {
      return this._listeners(this, type, false);
    }
    listenerCount(type) {
      const events = this._events;
      if (events !== undefined) {
        const listener = events[type];
        if (typeof listener === "function")
          return 1;
        if (listener !== undefined)
          return listener.length;
      }
      return 0;
    }
    eventNames() {
      return this._eventsCount > 0 && this._events ? Reflect.ownKeys(this._events) : [];
    }
    async _waitFor(type) {
      let promises = [];
      if (type) {
        promises = [...this._pendingHandlers.get(type) || []];
      } else {
        promises = [];
        for (const [, pending] of this._pendingHandlers)
          promises.push(...pending);
      }
      await Promise.all(promises);
    }
    _listeners(target, type, unwrap) {
      const events = target._events;
      if (events === undefined)
        return [];
      const listener = events[type];
      if (listener === undefined)
        return [];
      if (typeof listener === "function")
        return unwrap ? [unwrapListener(listener)] : [listener];
      return unwrap ? unwrapListeners(listener) : listener.slice();
    }
  }
  exports.EventEmitter = EventEmitter;
  function checkListener(listener) {
    if (typeof listener !== "function")
      throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  class OnceWrapper {
    constructor(eventEmitter, eventType, listener) {
      this._fired = false;
      this.wrapperFunction = undefined;
      this._listener = undefined;
      this._eventEmitter = undefined;
      this._eventType = undefined;
      this._eventEmitter = eventEmitter;
      this._eventType = eventType;
      this._listener = listener;
      this.wrapperFunction = this._handle.bind(this);
      this.wrapperFunction.listener = listener;
    }
    _handle(...args) {
      if (this._fired)
        return;
      this._fired = true;
      this._eventEmitter.removeListener(this._eventType, this.wrapperFunction);
      return this._listener.apply(this._eventEmitter, args);
    }
  }
  function unwrapListener(l) {
    var _wrappedListener;
    return (_wrappedListener = wrappedListener(l)) !== null && _wrappedListener !== undefined ? _wrappedListener : l;
  }
  function unwrapListeners(arr) {
    return arr.map((l) => {
      var _wrappedListener2;
      return (_wrappedListener2 = wrappedListener(l)) !== null && _wrappedListener2 !== undefined ? _wrappedListener2 : l;
    });
  }
  function wrappedListener(l) {
    return l.listener;
  }
});

// node_modules/playwright-core/lib/client/channelOwner.js
var require_channelOwner = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChannelOwner = undefined;
  var _eventEmitter = require_eventEmitter();
  var _validator = require_validator();
  var _debugLogger = require_debugLogger();
  var _stackTrace = require_stackTrace();
  var _utils = require_utils();
  var _zones = require_zones();

  class ChannelOwner extends _eventEmitter.EventEmitter {
    constructor(parent, type, guid, initializer) {
      super();
      this._connection = undefined;
      this._parent = undefined;
      this._objects = new Map;
      this._type = undefined;
      this._guid = undefined;
      this._channel = undefined;
      this._initializer = undefined;
      this._logger = undefined;
      this._instrumentation = undefined;
      this._eventToSubscriptionMapping = new Map;
      this._isInternalType = false;
      this._wasCollected = false;
      this.setMaxListeners(0);
      this._connection = parent instanceof ChannelOwner ? parent._connection : parent;
      this._type = type;
      this._guid = guid;
      this._parent = parent instanceof ChannelOwner ? parent : undefined;
      this._instrumentation = this._connection._instrumentation;
      this._connection._objects.set(guid, this);
      if (this._parent) {
        this._parent._objects.set(guid, this);
        this._logger = this._parent._logger;
      }
      this._channel = this._createChannel(new _eventEmitter.EventEmitter);
      this._initializer = initializer;
    }
    markAsInternalType() {
      this._isInternalType = true;
    }
    _setEventToSubscriptionMapping(mapping) {
      this._eventToSubscriptionMapping = mapping;
    }
    _updateSubscription(event, enabled) {
      const protocolEvent = this._eventToSubscriptionMapping.get(String(event));
      if (protocolEvent) {
        this._wrapApiCall(async () => {
          await this._channel.updateSubscription({
            event: protocolEvent,
            enabled
          });
        }, true).catch(() => {
        });
      }
    }
    on(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.on(event, listener);
      return this;
    }
    addListener(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.addListener(event, listener);
      return this;
    }
    prependListener(event, listener) {
      if (!this.listenerCount(event))
        this._updateSubscription(event, true);
      super.prependListener(event, listener);
      return this;
    }
    off(event, listener) {
      super.off(event, listener);
      if (!this.listenerCount(event))
        this._updateSubscription(event, false);
      return this;
    }
    removeListener(event, listener) {
      super.removeListener(event, listener);
      if (!this.listenerCount(event))
        this._updateSubscription(event, false);
      return this;
    }
    _adopt(child) {
      child._parent._objects.delete(child._guid);
      this._objects.set(child._guid, child);
      child._parent = this;
    }
    _dispose(reason) {
      if (this._parent)
        this._parent._objects.delete(this._guid);
      this._connection._objects.delete(this._guid);
      this._wasCollected = reason === "gc";
      for (const object of [...this._objects.values()])
        object._dispose(reason);
      this._objects.clear();
    }
    _debugScopeState() {
      return {
        _guid: this._guid,
        objects: Array.from(this._objects.values()).map((o) => o._debugScopeState())
      };
    }
    _createChannel(base) {
      const channel = new Proxy(base, {
        get: (obj, prop) => {
          if (typeof prop === "string") {
            const validator = (0, _validator.maybeFindValidator)(this._type, prop, "Params");
            if (validator) {
              return async (params) => {
                return await this._wrapApiCall(async (apiZone) => {
                  const {
                    apiName,
                    frames,
                    csi,
                    callCookie,
                    stepId
                  } = apiZone.reported ? {
                    apiName: undefined,
                    csi: undefined,
                    callCookie: undefined,
                    frames: [],
                    stepId: undefined
                  } : apiZone;
                  apiZone.reported = true;
                  let currentStepId = stepId;
                  if (csi && apiName) {
                    const out = {};
                    csi.onApiCallBegin(apiName, params, frames, callCookie, out);
                    currentStepId = out.stepId;
                  }
                  return await this._connection.sendMessageToServer(this, prop, validator(params, "", {
                    tChannelImpl: tChannelImplToWire,
                    binary: this._connection.rawBuffers() ? "buffer" : "toBase64"
                  }), apiName, frames, currentStepId);
                });
              };
            }
          }
          return obj[prop];
        }
      });
      channel._object = this;
      return channel;
    }
    async _wrapApiCall(func, isInternal) {
      const logger = this._logger;
      const apiZone = _zones.zones.zoneData("apiZone");
      if (apiZone)
        return await func(apiZone);
      const stackTrace = (0, _stackTrace.captureLibraryStackTrace)();
      let apiName = stackTrace.apiName;
      const frames = stackTrace.frames;
      if (isInternal === undefined)
        isInternal = this._isInternalType;
      if (isInternal)
        apiName = undefined;
      const expectZone = _zones.zones.zoneData("expectZone");
      const stepId = expectZone === null || expectZone === undefined ? undefined : expectZone.stepId;
      if (!isInternal && expectZone)
        apiName = expectZone.title;
      const csi = isInternal || expectZone ? undefined : this._instrumentation;
      const callCookie = {};
      try {
        logApiCall(logger, `=> ${apiName} started`, isInternal);
        const apiZone2 = {
          apiName,
          frames,
          isInternal,
          reported: false,
          csi,
          callCookie,
          stepId
        };
        const result = await _zones.zones.run("apiZone", apiZone2, async () => await func(apiZone2));
        csi === null || csi === undefined || csi.onApiCallEnd(callCookie);
        logApiCall(logger, `<= ${apiName} succeeded`, isInternal);
        return result;
      } catch (e) {
        const innerError = (process.env.PWDEBUGIMPL || (0, _utils.isUnderTest)()) && e.stack ? `
<inner error>
` + e.stack : "";
        if (apiName && !apiName.includes("<anonymous>"))
          e.message = apiName + ": " + e.message;
        const stackFrames = `
` + (0, _stackTrace.stringifyStackFrames)(stackTrace.frames).join(`
`) + innerError;
        if (stackFrames.trim())
          e.stack = e.message + stackFrames;
        else
          e.stack = "";
        csi === null || csi === undefined || csi.onApiCallEnd(callCookie, e);
        logApiCall(logger, `<= ${apiName} failed`, isInternal);
        throw e;
      }
    }
    _toImpl() {
      var _this$_connection$toI, _this$_connection;
      return (_this$_connection$toI = (_this$_connection = this._connection).toImpl) === null || _this$_connection$toI === undefined ? undefined : _this$_connection$toI.call(_this$_connection, this);
    }
    toJSON() {
      return {
        _type: this._type,
        _guid: this._guid
      };
    }
  }
  exports.ChannelOwner = ChannelOwner;
  function logApiCall(logger, message, isNested) {
    if (isNested)
      return;
    if (logger && logger.isEnabled("api", "info"))
      logger.log("api", "info", message, [], {
        color: "cyan"
      });
    _debugLogger.debugLogger.log("api", message);
  }
  function tChannelImplToWire(names, arg, path, context) {
    if (arg._object instanceof ChannelOwner && (names === "*" || names.includes(arg._object._type)))
      return {
        guid: arg._object._guid
      };
    throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
  }
});

// node_modules/playwright-core/lib/client/stream.js
var require_stream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Stream = undefined;
  var _stream = __require("stream");
  var _channelOwner = require_channelOwner();

  class Stream extends _channelOwner.ChannelOwner {
    static from(Stream2) {
      return Stream2._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return new StreamImpl(this._channel);
    }
  }
  exports.Stream = Stream;

  class StreamImpl extends _stream.Readable {
    constructor(channel) {
      super();
      this._channel = undefined;
      this._channel = channel;
    }
    async _read() {
      const result = await this._channel.read({
        size: 1024 * 1024
      });
      if (result.binary.byteLength)
        this.push(result.binary);
      else
        this.push(null);
    }
    _destroy(error, callback) {
      this._channel.close().catch((e) => null);
      super._destroy(error, callback);
    }
  }
});

// node_modules/playwright-core/lib/client/artifact.js
var require_artifact2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Artifact = undefined;
  var fs = _interopRequireWildcard(__require("fs"));
  var _stream = require_stream();
  var _fileUtils = require_fileUtils();
  var _channelOwner = require_channelOwner();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }

  class Artifact extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    async pathAfterFinished() {
      if (this._connection.isRemote())
        throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      return (await this._channel.pathAfterFinished()).value;
    }
    async saveAs(path) {
      if (!this._connection.isRemote()) {
        await this._channel.saveAs({
          path
        });
        return;
      }
      const result = await this._channel.saveAsStream();
      const stream = _stream.Stream.from(result.stream);
      await (0, _fileUtils.mkdirIfNeeded)(path);
      await new Promise((resolve, reject) => {
        stream.stream().pipe(fs.createWriteStream(path)).on("finish", resolve).on("error", reject);
      });
    }
    async failure() {
      return (await this._channel.failure()).error || null;
    }
    async createReadStream() {
      const result = await this._channel.stream();
      const stream = _stream.Stream.from(result.stream);
      return stream.stream();
    }
    async readIntoBuffer() {
      const stream = await this.createReadStream();
      return await new Promise((resolve, reject) => {
        const chunks = [];
        stream.on("data", (chunk) => {
          chunks.push(chunk);
        });
        stream.on("end", () => {
          resolve(Buffer.concat(chunks));
        });
        stream.on("error", reject);
      });
    }
    async cancel() {
      return await this._channel.cancel();
    }
    async delete() {
      return await this._channel.delete();
    }
  }
  exports.Artifact = Artifact;
});

// node_modules/playwright-core/lib/client/clientHelper.js
var require_clientHelper = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addSourceUrlToScript = addSourceUrlToScript;
  exports.envObjectToArray = envObjectToArray;
  exports.evaluationScript = evaluationScript;
  var _fs = _interopRequireDefault(__require("fs"));
  var _utils = require_utils();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function envObjectToArray(env) {
    const result = [];
    for (const name in env) {
      if (!Object.is(env[name], undefined))
        result.push({
          name,
          value: String(env[name])
        });
    }
    return result;
  }
  async function evaluationScript(fun, arg, addSourceUrl = true) {
    if (typeof fun === "function") {
      const source = fun.toString();
      const argString = Object.is(arg, undefined) ? "undefined" : JSON.stringify(arg);
      return `(${source})(${argString})`;
    }
    if (arg !== undefined)
      throw new Error("Cannot evaluate a string with arguments");
    if ((0, _utils.isString)(fun))
      return fun;
    if (fun.content !== undefined)
      return fun.content;
    if (fun.path !== undefined) {
      let source = await _fs.default.promises.readFile(fun.path, "utf8");
      if (addSourceUrl)
        source = addSourceUrlToScript(source, fun.path);
      return source;
    }
    throw new Error("Either path or content property must be present");
  }
  function addSourceUrlToScript(source, path) {
    return `${source}
//# sourceURL=${path.replace(/\n/g, "")}`;
  }
});

// node_modules/playwright-core/lib/client/coverage.js
var require_coverage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Coverage = undefined;

  class Coverage {
    constructor(channel) {
      this._channel = undefined;
      this._channel = channel;
    }
    async startJSCoverage(options = {}) {
      await this._channel.startJSCoverage(options);
    }
    async stopJSCoverage() {
      return (await this._channel.stopJSCoverage()).entries;
    }
    async startCSSCoverage(options = {}) {
      await this._channel.startCSSCoverage(options);
    }
    async stopCSSCoverage() {
      return (await this._channel.stopCSSCoverage()).entries;
    }
  }
  exports.Coverage = Coverage;
});

// node_modules/playwright-core/lib/client/download.js
var require_download2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Download = undefined;

  class Download {
    constructor(page, url, suggestedFilename, artifact) {
      this._page = undefined;
      this._url = undefined;
      this._suggestedFilename = undefined;
      this._artifact = undefined;
      this._page = page;
      this._url = url;
      this._suggestedFilename = suggestedFilename;
      this._artifact = artifact;
    }
    page() {
      return this._page;
    }
    url() {
      return this._url;
    }
    suggestedFilename() {
      return this._suggestedFilename;
    }
    async path() {
      return await this._artifact.pathAfterFinished();
    }
    async saveAs(path) {
      return await this._artifact.saveAs(path);
    }
    async failure() {
      return await this._artifact.failure();
    }
    async createReadStream() {
      return await this._artifact.createReadStream();
    }
    async cancel() {
      return await this._artifact.cancel();
    }
    async delete() {
      return await this._artifact.delete();
    }
  }
  exports.Download = Download;
});

// node_modules/playwright-core/lib/client/jsHandle.js
var require_jsHandle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JSHandle = undefined;
  exports.assertMaxArguments = assertMaxArguments;
  exports.parseResult = parseResult;
  exports.serializeArgument = serializeArgument;
  var _channelOwner = require_channelOwner();
  var _serializers = require_serializers();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class JSHandle extends _channelOwner.ChannelOwner {
    static from(handle) {
      return handle._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._preview = undefined;
      this._preview = this._initializer.preview;
      this._channel.on("previewUpdated", ({
        preview
      }) => this._preview = preview);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return parseResult(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: serializeArgument(arg)
      });
      return JSHandle.from(result.handle);
    }
    async getProperty(propertyName) {
      const result = await this._channel.getProperty({
        name: propertyName
      });
      return JSHandle.from(result.handle);
    }
    async getProperties() {
      const map = new Map;
      for (const {
        name,
        value
      } of (await this._channel.getPropertyList()).properties)
        map.set(name, JSHandle.from(value));
      return map;
    }
    async jsonValue() {
      return parseResult((await this._channel.jsonValue()).value);
    }
    asElement() {
      return null;
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    async dispose() {
      try {
        await this._channel.dispose();
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    toString() {
      return this._preview;
    }
  }
  exports.JSHandle = JSHandle;
  function serializeArgument(arg) {
    const handles = [];
    const pushHandle = (channel) => {
      handles.push(channel);
      return handles.length - 1;
    };
    const value = (0, _serializers.serializeValue)(arg, (value2) => {
      if (value2 instanceof JSHandle)
        return {
          h: pushHandle(value2._channel)
        };
      return {
        fallThrough: value2
      };
    });
    return {
      value,
      handles
    };
  }
  function parseResult(value) {
    return (0, _serializers.parseSerializedValue)(value, undefined);
  }
  function assertMaxArguments(count, max) {
    if (count > max)
      throw new Error("Too many arguments. If you need to pass more than 1 argument to the function wrap them in an object.");
  }
});

// node_modules/playwright-core/lib/utils/isomorphic/locatorUtils.js
var require_locatorUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getByAltTextSelector = getByAltTextSelector;
  exports.getByLabelSelector = getByLabelSelector;
  exports.getByPlaceholderSelector = getByPlaceholderSelector;
  exports.getByRoleSelector = getByRoleSelector;
  exports.getByTestIdSelector = getByTestIdSelector;
  exports.getByTextSelector = getByTextSelector;
  exports.getByTitleSelector = getByTitleSelector;
  var _stringUtils = require_stringUtils();
  function getByAttributeTextSelector(attrName, text, options) {
    return `internal:attr=[${attrName}=${(0, _stringUtils.escapeForAttributeSelector)(text, (options === null || options === undefined ? undefined : options.exact) || false)}]`;
  }
  function getByTestIdSelector(testIdAttributeName, testId) {
    return `internal:testid=[${testIdAttributeName}=${(0, _stringUtils.escapeForAttributeSelector)(testId, true)}]`;
  }
  function getByLabelSelector(text, options) {
    return "internal:label=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== undefined && options.exact));
  }
  function getByAltTextSelector(text, options) {
    return getByAttributeTextSelector("alt", text, options);
  }
  function getByTitleSelector(text, options) {
    return getByAttributeTextSelector("title", text, options);
  }
  function getByPlaceholderSelector(text, options) {
    return getByAttributeTextSelector("placeholder", text, options);
  }
  function getByTextSelector(text, options) {
    return "internal:text=" + (0, _stringUtils.escapeForTextSelector)(text, !!(options !== null && options !== undefined && options.exact));
  }
  function getByRoleSelector(role, options = {}) {
    const props = [];
    if (options.checked !== undefined)
      props.push(["checked", String(options.checked)]);
    if (options.disabled !== undefined)
      props.push(["disabled", String(options.disabled)]);
    if (options.selected !== undefined)
      props.push(["selected", String(options.selected)]);
    if (options.expanded !== undefined)
      props.push(["expanded", String(options.expanded)]);
    if (options.includeHidden !== undefined)
      props.push(["include-hidden", String(options.includeHidden)]);
    if (options.level !== undefined)
      props.push(["level", String(options.level)]);
    if (options.name !== undefined)
      props.push(["name", (0, _stringUtils.escapeForAttributeSelector)(options.name, !!options.exact)]);
    if (options.pressed !== undefined)
      props.push(["pressed", String(options.pressed)]);
    return `internal:role=${role}${props.map(([n, v]) => `[${n}=${v}]`).join("")}`;
  }
});

// node_modules/playwright-core/lib/client/locator.js
var require_locator = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Locator = exports.FrameLocator = undefined;
  exports.setTestIdAttribute = setTestIdAttribute;
  exports.testIdAttributeName = testIdAttributeName;
  var util = _interopRequireWildcard(__require("util"));
  var _utils = require_utils();
  var _elementHandle = require_elementHandle();
  var _jsHandle = require_jsHandle();
  var _stringUtils = require_stringUtils();
  var _locatorUtils = require_locatorUtils();
  var _util$inspect$custom;
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  _util$inspect$custom = util.inspect.custom;

  class Locator {
    constructor(frame, selector, options) {
      this._frame = undefined;
      this._selector = undefined;
      this._frame = frame;
      this._selector = selector;
      if (options !== null && options !== undefined && options.hasText)
        this._selector += ` >> internal:has-text=${(0, _stringUtils.escapeForTextSelector)(options.hasText, false)}`;
      if (options !== null && options !== undefined && options.hasNotText)
        this._selector += ` >> internal:has-not-text=${(0, _stringUtils.escapeForTextSelector)(options.hasNotText, false)}`;
      if (options !== null && options !== undefined && options.has) {
        const locator = options.has;
        if (locator._frame !== frame)
          throw new Error(`Inner "has" locator must belong to the same frame.`);
        this._selector += ` >> internal:has=` + JSON.stringify(locator._selector);
      }
      if (options !== null && options !== undefined && options.hasNot) {
        const locator = options.hasNot;
        if (locator._frame !== frame)
          throw new Error(`Inner "hasNot" locator must belong to the same frame.`);
        this._selector += ` >> internal:has-not=` + JSON.stringify(locator._selector);
      }
    }
    async _withElement(task, timeout) {
      timeout = this._frame.page()._timeoutSettings.timeout({
        timeout
      });
      const deadline = timeout ? (0, _utils.monotonicTime)() + timeout : 0;
      return await this._frame._wrapApiCall(async () => {
        const result = await this._frame._channel.waitForSelector({
          selector: this._selector,
          strict: true,
          state: "attached",
          timeout
        });
        const handle = _elementHandle.ElementHandle.fromNullable(result.element);
        if (!handle)
          throw new Error(`Could not resolve ${this._selector} to DOM Element`);
        try {
          return await task(handle, deadline ? deadline - (0, _utils.monotonicTime)() : 0);
        } finally {
          await handle.dispose();
        }
      });
    }
    _equals(locator) {
      return this._frame === locator._frame && this._selector === locator._selector;
    }
    page() {
      return this._frame.page();
    }
    async boundingBox(options) {
      return await this._withElement((h) => h.boundingBox(), options === null || options === undefined ? undefined : options.timeout);
    }
    async check(options = {}) {
      return await this._frame.check(this._selector, {
        strict: true,
        ...options
      });
    }
    async click(options = {}) {
      return await this._frame.click(this._selector, {
        strict: true,
        ...options
      });
    }
    async dblclick(options = {}) {
      return await this._frame.dblclick(this._selector, {
        strict: true,
        ...options
      });
    }
    async dispatchEvent(type, eventInit = {}, options) {
      return await this._frame.dispatchEvent(this._selector, type, eventInit, {
        strict: true,
        ...options
      });
    }
    async dragTo(target, options = {}) {
      return await this._frame.dragAndDrop(this._selector, target._selector, {
        strict: true,
        ...options
      });
    }
    async evaluate(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluate(pageFunction, arg), options === null || options === undefined ? undefined : options.timeout);
    }
    async evaluateAll(pageFunction, arg) {
      return await this._frame.$$eval(this._selector, pageFunction, arg);
    }
    async evaluateHandle(pageFunction, arg, options) {
      return await this._withElement((h) => h.evaluateHandle(pageFunction, arg), options === null || options === undefined ? undefined : options.timeout);
    }
    async fill(value, options = {}) {
      return await this._frame.fill(this._selector, value, {
        strict: true,
        ...options
      });
    }
    async clear(options = {}) {
      return await this.fill("", options);
    }
    async _highlight() {
      return await this._frame._highlight(this._selector);
    }
    async highlight() {
      return await this._frame._highlight(this._selector);
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils.isString)(selectorOrLocator))
        return new Locator(this._frame, this._selector + " >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + " >> internal:chain=" + JSON.stringify(selectorOrLocator._selector), options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._selector + " >> " + selector);
    }
    filter(options) {
      return new Locator(this._frame, this._selector, options);
    }
    async elementHandle(options) {
      return await this._frame.waitForSelector(this._selector, {
        strict: true,
        state: "attached",
        ...options
      });
    }
    async elementHandles() {
      return await this._frame.$$(this._selector);
    }
    contentFrame() {
      return new FrameLocator(this._frame, this._selector);
    }
    first() {
      return new Locator(this._frame, this._selector + " >> nth=0");
    }
    last() {
      return new Locator(this._frame, this._selector + ` >> nth=-1`);
    }
    nth(index) {
      return new Locator(this._frame, this._selector + ` >> nth=${index}`);
    }
    and(locator) {
      if (locator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:and=` + JSON.stringify(locator._selector));
    }
    or(locator) {
      if (locator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._selector + ` >> internal:or=` + JSON.stringify(locator._selector));
    }
    async focus(options) {
      return await this._frame.focus(this._selector, {
        strict: true,
        ...options
      });
    }
    async blur(options) {
      await this._frame._channel.blur({
        selector: this._selector,
        strict: true,
        ...options
      });
    }
    async count() {
      return await this._frame._queryCount(this._selector);
    }
    async getAttribute(name, options) {
      return await this._frame.getAttribute(this._selector, name, {
        strict: true,
        ...options
      });
    }
    async hover(options = {}) {
      return await this._frame.hover(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerHTML(options) {
      return await this._frame.innerHTML(this._selector, {
        strict: true,
        ...options
      });
    }
    async innerText(options) {
      return await this._frame.innerText(this._selector, {
        strict: true,
        ...options
      });
    }
    async inputValue(options) {
      return await this._frame.inputValue(this._selector, {
        strict: true,
        ...options
      });
    }
    async isChecked(options) {
      return await this._frame.isChecked(this._selector, {
        strict: true,
        ...options
      });
    }
    async isDisabled(options) {
      return await this._frame.isDisabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEditable(options) {
      return await this._frame.isEditable(this._selector, {
        strict: true,
        ...options
      });
    }
    async isEnabled(options) {
      return await this._frame.isEnabled(this._selector, {
        strict: true,
        ...options
      });
    }
    async isHidden(options) {
      return await this._frame.isHidden(this._selector, {
        strict: true,
        ...options
      });
    }
    async isVisible(options) {
      return await this._frame.isVisible(this._selector, {
        strict: true,
        ...options
      });
    }
    async press(key, options = {}) {
      return await this._frame.press(this._selector, key, {
        strict: true,
        ...options
      });
    }
    async screenshot(options = {}) {
      return await this._withElement((h, timeout) => h.screenshot({
        ...options,
        timeout
      }), options.timeout);
    }
    async ariaSnapshot(options) {
      const result = await this._frame._channel.ariaSnapshot({
        ...options,
        selector: this._selector
      });
      return result.snapshot;
    }
    async scrollIntoViewIfNeeded(options = {}) {
      return await this._withElement((h, timeout) => h.scrollIntoViewIfNeeded({
        ...options,
        timeout
      }), options.timeout);
    }
    async selectOption(values, options = {}) {
      return await this._frame.selectOption(this._selector, values, {
        strict: true,
        ...options
      });
    }
    async selectText(options = {}) {
      return await this._withElement((h, timeout) => h.selectText({
        ...options,
        timeout
      }), options.timeout);
    }
    async setChecked(checked, options) {
      if (checked)
        await this.check(options);
      else
        await this.uncheck(options);
    }
    async setInputFiles(files, options = {}) {
      return await this._frame.setInputFiles(this._selector, files, {
        strict: true,
        ...options
      });
    }
    async tap(options = {}) {
      return await this._frame.tap(this._selector, {
        strict: true,
        ...options
      });
    }
    async textContent(options) {
      return await this._frame.textContent(this._selector, {
        strict: true,
        ...options
      });
    }
    async type(text, options = {}) {
      return await this._frame.type(this._selector, text, {
        strict: true,
        ...options
      });
    }
    async pressSequentially(text, options = {}) {
      return await this.type(text, options);
    }
    async uncheck(options = {}) {
      return await this._frame.uncheck(this._selector, {
        strict: true,
        ...options
      });
    }
    async all() {
      return new Array(await this.count()).fill(0).map((e, i) => this.nth(i));
    }
    async allInnerTexts() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.innerText));
    }
    async allTextContents() {
      return await this._frame.$$eval(this._selector, (ee) => ee.map((e) => e.textContent || ""));
    }
    async waitFor(options) {
      await this._frame._channel.waitForSelector({
        selector: this._selector,
        strict: true,
        omitReturnValue: true,
        ...options
      });
    }
    async _expect(expression, options) {
      const params = {
        selector: this._selector,
        expression,
        ...options,
        isNot: !!options.isNot
      };
      params.expectedValue = (0, _jsHandle.serializeArgument)(options.expectedValue);
      const result = await this._frame._channel.expect(params);
      if (result.received !== undefined)
        result.received = (0, _jsHandle.parseResult)(result.received);
      return result;
    }
    [_util$inspect$custom]() {
      return this.toString();
    }
    toString() {
      return (0, _utils.asLocator)("javascript", this._selector);
    }
  }
  exports.Locator = Locator;

  class FrameLocator {
    constructor(frame, selector) {
      this._frame = undefined;
      this._frameSelector = undefined;
      this._frame = frame;
      this._frameSelector = selector;
    }
    locator(selectorOrLocator, options) {
      if ((0, _utils.isString)(selectorOrLocator))
        return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator, options);
      if (selectorOrLocator._frame !== this._frame)
        throw new Error(`Locators must belong to the same frame.`);
      return new Locator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selectorOrLocator._selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)(testIdAttributeName(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    owner() {
      return new Locator(this._frame, this._frameSelector);
    }
    frameLocator(selector) {
      return new FrameLocator(this._frame, this._frameSelector + " >> internal:control=enter-frame >> " + selector);
    }
    first() {
      return new FrameLocator(this._frame, this._frameSelector + " >> nth=0");
    }
    last() {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=-1`);
    }
    nth(index) {
      return new FrameLocator(this._frame, this._frameSelector + ` >> nth=${index}`);
    }
  }
  exports.FrameLocator = FrameLocator;
  var _testIdAttributeName = "data-testid";
  function testIdAttributeName() {
    return _testIdAttributeName;
  }
  function setTestIdAttribute(attributeName) {
    _testIdAttributeName = attributeName;
  }
});

// node_modules/playwright-core/lib/client/events.js
var require_events2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Events = undefined;
  var Events = exports.Events = {
    AndroidDevice: {
      WebView: "webview",
      Close: "close"
    },
    AndroidSocket: {
      Data: "data",
      Close: "close"
    },
    AndroidWebView: {
      Close: "close"
    },
    Browser: {
      Disconnected: "disconnected"
    },
    BrowserContext: {
      Console: "console",
      Close: "close",
      Dialog: "dialog",
      Page: "page",
      WebError: "weberror",
      BackgroundPage: "backgroundpage",
      ServiceWorker: "serviceworker",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished"
    },
    BrowserServer: {
      Close: "close"
    },
    Page: {
      Close: "close",
      Crash: "crash",
      Console: "console",
      Dialog: "dialog",
      Download: "download",
      FileChooser: "filechooser",
      DOMContentLoaded: "domcontentloaded",
      PageError: "pageerror",
      Request: "request",
      Response: "response",
      RequestFailed: "requestfailed",
      RequestFinished: "requestfinished",
      FrameAttached: "frameattached",
      FrameDetached: "framedetached",
      FrameNavigated: "framenavigated",
      Load: "load",
      Popup: "popup",
      WebSocket: "websocket",
      Worker: "worker"
    },
    WebSocket: {
      Close: "close",
      Error: "socketerror",
      FrameReceived: "framereceived",
      FrameSent: "framesent"
    },
    Worker: {
      Close: "close"
    },
    ElectronApplication: {
      Close: "close",
      Console: "console",
      Window: "window"
    }
  };
});

// node_modules/playwright-core/lib/client/worker.js
var require_worker = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Worker = undefined;
  var _events = require_events2();
  var _channelOwner = require_channelOwner();
  var _jsHandle = require_jsHandle();
  var _utils = require_utils();
  var _errors = require_errors2();

  class Worker extends _channelOwner.ChannelOwner {
    static from(worker) {
      return worker._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._context = undefined;
      this._closedScope = new _utils.LongStandingScope;
      this._channel.on("close", () => {
        if (this._page)
          this._page._workers.delete(this);
        if (this._context)
          this._context._serviceWorkers.delete(this);
        this.emit(_events.Events.Worker.Close, this);
      });
      this.once(_events.Events.Worker.Close, () => {
        var _this$_page;
        return this._closedScope.close(((_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page._closeErrorWithReason()) || new _errors.TargetClosedError);
      });
    }
    url() {
      return this._initializer.url;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  exports.Worker = Worker;
});

// node_modules/playwright-core/lib/client/waiter.js
var require_waiter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Waiter = undefined;
  var _stackTrace = require_stackTrace();
  var _errors = require_errors2();
  var _utils = require_utils();

  class Waiter {
    constructor(channelOwner, event) {
      this._dispose = undefined;
      this._failures = [];
      this._immediateError = undefined;
      this._logs = [];
      this._channelOwner = undefined;
      this._waitId = undefined;
      this._error = undefined;
      this._savedZone = undefined;
      this._waitId = (0, _utils.createGuid)();
      this._channelOwner = channelOwner;
      this._savedZone = _utils.zones.currentZone();
      this._channelOwner._channel.waitForEventInfo({
        info: {
          waitId: this._waitId,
          phase: "before",
          event
        }
      }).catch(() => {
      });
      this._dispose = [() => this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "after",
            error: this._error
          }
        });
      }, true).catch(() => {
      })];
    }
    static createForEvent(channelOwner, event) {
      return new Waiter(channelOwner, event);
    }
    async waitForEvent(emitter, event, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, this._savedZone, predicate);
      return await this.waitForPromise(promise, dispose);
    }
    rejectOnEvent(emitter, event, error, predicate) {
      const {
        promise,
        dispose
      } = waitForEvent(emitter, event, this._savedZone, predicate);
      this._rejectOn(promise.then(() => {
        throw typeof error === "function" ? error() : error;
      }), dispose);
    }
    rejectOnTimeout(timeout, message) {
      if (!timeout)
        return;
      const {
        promise,
        dispose
      } = waitForTimeout(timeout);
      this._rejectOn(promise.then(() => {
        throw new _errors.TimeoutError(message);
      }), dispose);
    }
    rejectImmediately(error) {
      this._immediateError = error;
    }
    dispose() {
      for (const dispose of this._dispose)
        dispose();
    }
    async waitForPromise(promise, dispose) {
      try {
        if (this._immediateError)
          throw this._immediateError;
        const result = await Promise.race([promise, ...this._failures]);
        if (dispose)
          dispose();
        return result;
      } catch (e) {
        if (dispose)
          dispose();
        this._error = e.message;
        this.dispose();
        (0, _stackTrace.rewriteErrorMessage)(e, e.message + formatLogRecording(this._logs));
        throw e;
      }
    }
    log(s) {
      this._logs.push(s);
      this._channelOwner._wrapApiCall(async () => {
        await this._channelOwner._channel.waitForEventInfo({
          info: {
            waitId: this._waitId,
            phase: "log",
            message: s
          }
        }).catch(() => {
        });
      }, true);
    }
    _rejectOn(promise, dispose) {
      this._failures.push(promise);
      if (dispose)
        this._dispose.push(dispose);
    }
  }
  exports.Waiter = Waiter;
  function waitForEvent(emitter, event, savedZone, predicate) {
    let listener;
    const promise = new Promise((resolve, reject) => {
      listener = async (eventArg) => {
        await savedZone.run(async () => {
          try {
            if (predicate && !await predicate(eventArg))
              return;
            emitter.removeListener(event, listener);
            resolve(eventArg);
          } catch (e) {
            emitter.removeListener(event, listener);
            reject(e);
          }
        });
      };
      emitter.addListener(event, listener);
    });
    const dispose = () => emitter.removeListener(event, listener);
    return {
      promise,
      dispose
    };
  }
  function waitForTimeout(timeout) {
    let timeoutId;
    const promise = new Promise((resolve) => timeoutId = setTimeout(resolve, timeout));
    const dispose = () => clearTimeout(timeoutId);
    return {
      promise,
      dispose
    };
  }
  function formatLogRecording(log) {
    if (!log.length)
      return "";
    const header = ` logs `;
    const headerLength = 60;
    const leftLength = (headerLength - header.length) / 2;
    const rightLength = headerLength - header.length - leftLength;
    return `
${"=".repeat(leftLength)}${header}${"=".repeat(rightLength)}
${log.join(`
`)}
${"=".repeat(headerLength)}`;
  }
});

// node_modules/playwright-core/lib/client/tracing.js
var require_tracing2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Tracing = undefined;
  var _artifact = require_artifact2();
  var _channelOwner = require_channelOwner();

  class Tracing extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._includeSources = false;
      this._tracesDir = undefined;
      this._stacksId = undefined;
      this._isTracing = false;
      this.markAsInternalType();
    }
    async start(options = {}) {
      this._includeSources = !!options.sources;
      await this._channel.tracingStart({
        name: options.name,
        snapshots: options.snapshots,
        screenshots: options.screenshots,
        live: options._live
      });
      const {
        traceName
      } = await this._channel.tracingStartChunk({
        name: options.name,
        title: options.title
      });
      await this._startCollectingStacks(traceName);
    }
    async startChunk(options = {}) {
      const {
        traceName
      } = await this._channel.tracingStartChunk(options);
      await this._startCollectingStacks(traceName);
    }
    async group(name, options = {}) {
      await this._wrapApiCall(async () => {
        await this._channel.tracingGroup({
          name,
          location: options.location
        });
      }, false);
    }
    async groupEnd() {
      await this._wrapApiCall(async () => {
        await this._channel.tracingGroupEnd();
      }, false);
    }
    async _startCollectingStacks(traceName) {
      if (!this._isTracing) {
        this._isTracing = true;
        this._connection.setIsTracing(true);
      }
      const result = await this._connection.localUtils()._channel.tracingStarted({
        tracesDir: this._tracesDir,
        traceName
      });
      this._stacksId = result.stacksId;
    }
    async stopChunk(options = {}) {
      await this._doStopChunk(options.path);
    }
    async stop(options = {}) {
      await this._doStopChunk(options.path);
      await this._channel.tracingStop();
    }
    async _doStopChunk(filePath) {
      this._resetStackCounter();
      if (!filePath) {
        await this._channel.tracingStopChunk({
          mode: "discard"
        });
        if (this._stacksId)
          await this._connection.localUtils()._channel.traceDiscarded({
            stacksId: this._stacksId
          });
        return;
      }
      const isLocal = !this._connection.isRemote();
      if (isLocal) {
        const result2 = await this._channel.tracingStopChunk({
          mode: "entries"
        });
        await this._connection.localUtils()._channel.zip({
          zipFile: filePath,
          entries: result2.entries,
          mode: "write",
          stacksId: this._stacksId,
          includeSources: this._includeSources
        });
        return;
      }
      const result = await this._channel.tracingStopChunk({
        mode: "archive"
      });
      if (!result.artifact) {
        if (this._stacksId)
          await this._connection.localUtils()._channel.traceDiscarded({
            stacksId: this._stacksId
          });
        return;
      }
      const artifact = _artifact.Artifact.from(result.artifact);
      await artifact.saveAs(filePath);
      await artifact.delete();
      await this._connection.localUtils()._channel.zip({
        zipFile: filePath,
        entries: [],
        mode: "append",
        stacksId: this._stacksId,
        includeSources: this._includeSources
      });
    }
    _resetStackCounter() {
      if (this._isTracing) {
        this._isTracing = false;
        this._connection.setIsTracing(false);
      }
    }
  }
  exports.Tracing = Tracing;
});

// node_modules/playwright-core/lib/client/fetch.js
var require_fetch2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.APIResponse = exports.APIRequestContext = exports.APIRequest = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var util = _interopRequireWildcard(__require("util"));
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _channelOwner = require_channelOwner();
  var _network = require_network3();
  var _tracing = require_tracing2();
  var _errors = require_errors2();
  var _browserContext = require_browserContext2();
  var _Symbol$asyncDispose;
  var _Symbol$asyncDispose2;
  var _util$inspect$custom;
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class APIRequest {
    constructor(playwright) {
      this._playwright = undefined;
      this._contexts = new Set;
      this._defaultContextOptions = undefined;
      this._playwright = playwright;
    }
    async newContext(options = {}) {
      var _this$_defaultContext;
      options = {
        ...this._defaultContextOptions,
        ...options
      };
      const storageState = typeof options.storageState === "string" ? JSON.parse(await _fs.default.promises.readFile(options.storageState, "utf8")) : options.storageState;
      const tracesDir = (_this$_defaultContext = this._defaultContextOptions) === null || _this$_defaultContext === undefined ? undefined : _this$_defaultContext.tracesDir;
      const context = APIRequestContext.from((await this._playwright._channel.newRequest({
        ...options,
        extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils.headersObjectToArray)(options.extraHTTPHeaders) : undefined,
        storageState,
        tracesDir,
        clientCertificates: await (0, _browserContext.toClientCertificatesProtocol)(options.clientCertificates)
      })).request);
      this._contexts.add(context);
      context._request = this;
      context._tracing._tracesDir = tracesDir;
      await context._instrumentation.runAfterCreateRequestContext(context);
      return context;
    }
  }
  exports.APIRequest = APIRequest;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class APIRequestContext extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._request = undefined;
      this._tracing = undefined;
      this._closeReason = undefined;
      this._tracing = _tracing.Tracing.from(initializer.tracing);
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    async dispose(options = {}) {
      var _this$_request;
      this._closeReason = options.reason;
      await this._instrumentation.runBeforeCloseRequestContext(this);
      try {
        await this._channel.dispose(options);
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
      this._tracing._resetStackCounter();
      (_this$_request = this._request) === null || _this$_request === undefined || _this$_request._contexts.delete(this);
    }
    async delete(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "DELETE"
      });
    }
    async head(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "HEAD"
      });
    }
    async get(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "GET"
      });
    }
    async patch(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PATCH"
      });
    }
    async post(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "POST"
      });
    }
    async put(url, options) {
      return await this.fetch(url, {
        ...options,
        method: "PUT"
      });
    }
    async fetch(urlOrRequest, options = {}) {
      const url = (0, _utils.isString)(urlOrRequest) ? urlOrRequest : undefined;
      const request = (0, _utils.isString)(urlOrRequest) ? undefined : urlOrRequest;
      return await this._innerFetch({
        url,
        request,
        ...options
      });
    }
    async _innerFetch(options = {}) {
      return await this._wrapApiCall(async () => {
        var _options$request, _options$request2, _options$request3;
        if (this._closeReason)
          throw new _errors.TargetClosedError(this._closeReason);
        (0, _utils.assert)(options.request || typeof options.url === "string", "First argument must be either URL string or Request");
        (0, _utils.assert)((options.data === undefined ? 0 : 1) + (options.form === undefined ? 0 : 1) + (options.multipart === undefined ? 0 : 1) <= 1, `Only one of 'data', 'form' or 'multipart' can be specified`);
        (0, _utils.assert)(options.maxRedirects === undefined || options.maxRedirects >= 0, `'maxRedirects' must be greater than or equal to '0'`);
        (0, _utils.assert)(options.maxRetries === undefined || options.maxRetries >= 0, `'maxRetries' must be greater than or equal to '0'`);
        const url = options.url !== undefined ? options.url : options.request.url();
        const method = options.method || ((_options$request = options.request) === null || _options$request === undefined ? undefined : _options$request.method());
        let encodedParams = undefined;
        if (typeof options.params === "string")
          encodedParams = options.params;
        else if (options.params instanceof URLSearchParams)
          encodedParams = options.params.toString();
        const headersObj = options.headers || ((_options$request2 = options.request) === null || _options$request2 === undefined ? undefined : _options$request2.headers());
        const headers = headersObj ? (0, _utils.headersObjectToArray)(headersObj) : undefined;
        let jsonData;
        let formData;
        let multipartData;
        let postDataBuffer;
        if (options.data !== undefined) {
          if ((0, _utils.isString)(options.data)) {
            if (isJsonContentType(headers))
              jsonData = isJsonParsable(options.data) ? options.data : JSON.stringify(options.data);
            else
              postDataBuffer = Buffer.from(options.data, "utf8");
          } else if (Buffer.isBuffer(options.data)) {
            postDataBuffer = options.data;
          } else if (typeof options.data === "object" || typeof options.data === "number" || typeof options.data === "boolean") {
            jsonData = JSON.stringify(options.data);
          } else {
            throw new Error(`Unexpected 'data' type`);
          }
        } else if (options.form) {
          if (globalThis.FormData && options.form instanceof FormData) {
            formData = [];
            for (const [name, value] of options.form.entries()) {
              if (typeof value !== "string")
                throw new Error(`Expected string for options.form["${name}"], found File. Please use options.multipart instead.`);
              formData.push({
                name,
                value
              });
            }
          } else {
            formData = objectToArray(options.form);
          }
        } else if (options.multipart) {
          multipartData = [];
          if (globalThis.FormData && options.multipart instanceof FormData) {
            const form = options.multipart;
            for (const [name, value] of form.entries()) {
              if ((0, _utils.isString)(value)) {
                multipartData.push({
                  name,
                  value
                });
              } else {
                const file = {
                  name: value.name,
                  mimeType: value.type,
                  buffer: Buffer.from(await value.arrayBuffer())
                };
                multipartData.push({
                  name,
                  file
                });
              }
            }
          } else {
            for (const [name, value] of Object.entries(options.multipart))
              multipartData.push(await toFormField(name, value));
          }
        }
        if (postDataBuffer === undefined && jsonData === undefined && formData === undefined && multipartData === undefined)
          postDataBuffer = ((_options$request3 = options.request) === null || _options$request3 === undefined ? undefined : _options$request3.postDataBuffer()) || undefined;
        const fixtures = {
          __testHookLookup: options.__testHookLookup
        };
        const result = await this._channel.fetch({
          url,
          params: typeof options.params === "object" ? objectToArray(options.params) : undefined,
          encodedParams,
          method,
          headers,
          postData: postDataBuffer,
          jsonData,
          formData,
          multipartData,
          timeout: options.timeout,
          failOnStatusCode: options.failOnStatusCode,
          ignoreHTTPSErrors: options.ignoreHTTPSErrors,
          maxRedirects: options.maxRedirects,
          maxRetries: options.maxRetries,
          ...fixtures
        });
        return new APIResponse(this, result.response);
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, JSON.stringify(state, undefined, 2), "utf8");
      }
      return state;
    }
  }
  exports.APIRequestContext = APIRequestContext;
  async function toFormField(name, value) {
    if (isFilePayload(value)) {
      const payload = value;
      if (!Buffer.isBuffer(payload.buffer))
        throw new Error(`Unexpected buffer type of 'data.${name}'`);
      return {
        name,
        file: filePayloadToJson(payload)
      };
    } else if (value instanceof _fs.default.ReadStream) {
      return {
        name,
        file: await readStreamToJson(value)
      };
    } else {
      return {
        name,
        value: String(value)
      };
    }
  }
  function isJsonParsable(value) {
    if (typeof value !== "string")
      return false;
    try {
      JSON.parse(value);
      return true;
    } catch (e) {
      if (e instanceof SyntaxError)
        return false;
      else
        throw e;
    }
  }
  _Symbol$asyncDispose2 = Symbol.asyncDispose;
  _util$inspect$custom = util.inspect.custom;

  class APIResponse {
    constructor(context, initializer) {
      this._initializer = undefined;
      this._headers = undefined;
      this._request = undefined;
      this._request = context;
      this._initializer = initializer;
      this._headers = new _network.RawHeaders(this._initializer.headers);
    }
    ok() {
      return this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    url() {
      return this._initializer.url;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    headers() {
      return this._headers.headers();
    }
    headersArray() {
      return this._headers.headersArray();
    }
    async body() {
      try {
        const result = await this._request._channel.fetchResponseBody({
          fetchUid: this._fetchUid()
        });
        if (result.binary === undefined)
          throw new Error("Response has been disposed");
        return result.binary;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          throw new Error("Response has been disposed");
        throw e;
      }
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    async[_Symbol$asyncDispose2]() {
      await this.dispose();
    }
    async dispose() {
      await this._request._channel.disposeAPIResponse({
        fetchUid: this._fetchUid()
      });
    }
    [_util$inspect$custom]() {
      const headers = this.headersArray().map(({
        name,
        value
      }) => `  ${name}: ${value}`);
      return `APIResponse: ${this.status()} ${this.statusText()}
${headers.join(`
`)}`;
    }
    _fetchUid() {
      return this._initializer.fetchUid;
    }
    async _fetchLog() {
      const {
        log
      } = await this._request._channel.fetchLog({
        fetchUid: this._fetchUid()
      });
      return log;
    }
  }
  exports.APIResponse = APIResponse;
  function filePayloadToJson(payload) {
    return {
      name: payload.name,
      mimeType: payload.mimeType,
      buffer: payload.buffer
    };
  }
  async function readStreamToJson(stream) {
    const buffer = await new Promise((resolve, reject) => {
      const chunks = [];
      stream.on("data", (chunk) => chunks.push(chunk));
      stream.on("end", () => resolve(Buffer.concat(chunks)));
      stream.on("error", (err) => reject(err));
    });
    const streamPath = Buffer.isBuffer(stream.path) ? stream.path.toString("utf8") : stream.path;
    return {
      name: _path.default.basename(streamPath),
      buffer
    };
  }
  function isJsonContentType(headers) {
    if (!headers)
      return false;
    for (const {
      name,
      value
    } of headers) {
      if (name.toLocaleLowerCase() === "content-type")
        return value === "application/json";
    }
    return false;
  }
  function objectToArray(map) {
    if (!map)
      return;
    const result = [];
    for (const [name, value] of Object.entries(map))
      result.push({
        name,
        value: String(value)
      });
    return result;
  }
  function isFilePayload(value) {
    return typeof value === "object" && value["name"] && value["mimeType"] && value["buffer"];
  }
});

// node_modules/playwright-core/lib/client/network.js
var require_network3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebSocketRouteHandler = exports.WebSocketRoute = exports.WebSocket = exports.RouteHandler = exports.Route = exports.Response = exports.Request = exports.RawHeaders = undefined;
  exports.validateHeaders = validateHeaders;
  var _url = __require("url");
  var _channelOwner = require_channelOwner();
  var _frame = require_frame();
  var _worker = require_worker();
  var _fs = _interopRequireDefault(__require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils();
  var _manualPromise = require_manualPromise();
  var _events = require_events2();
  var _waiter = require_waiter();
  var _fetch = require_fetch2();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class Request extends _channelOwner.ChannelOwner {
    static from(request) {
      return request._object;
    }
    static fromNullable(request) {
      return request ? Request.from(request) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._redirectedFrom = null;
      this._redirectedTo = null;
      this._failureText = null;
      this._provisionalHeaders = undefined;
      this._actualHeadersPromise = undefined;
      this._timing = undefined;
      this._fallbackOverrides = {};
      this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);
      if (this._redirectedFrom)
        this._redirectedFrom._redirectedTo = this;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._timing = {
        startTime: 0,
        domainLookupStart: -1,
        domainLookupEnd: -1,
        connectStart: -1,
        secureConnectionStart: -1,
        connectEnd: -1,
        requestStart: -1,
        responseStart: -1,
        responseEnd: -1
      };
    }
    url() {
      return this._fallbackOverrides.url || this._initializer.url;
    }
    resourceType() {
      return this._initializer.resourceType;
    }
    method() {
      return this._fallbackOverrides.method || this._initializer.method;
    }
    postData() {
      var _ref;
      return ((_ref = this._fallbackOverrides.postDataBuffer || this._initializer.postData) === null || _ref === undefined ? undefined : _ref.toString("utf-8")) || null;
    }
    postDataBuffer() {
      return this._fallbackOverrides.postDataBuffer || this._initializer.postData || null;
    }
    postDataJSON() {
      const postData = this.postData();
      if (!postData)
        return null;
      const contentType = this.headers()["content-type"];
      if (contentType !== null && contentType !== undefined && contentType.includes("application/x-www-form-urlencoded")) {
        const entries = {};
        const parsed = new _url.URLSearchParams(postData);
        for (const [k, v] of parsed.entries())
          entries[k] = v;
        return entries;
      }
      try {
        return JSON.parse(postData);
      } catch (e) {
        throw new Error("POST data is not a valid JSON object: " + postData);
      }
    }
    headers() {
      if (this._fallbackOverrides.headers)
        return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers).headers();
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (this._fallbackOverrides.headers)
        return RawHeaders._fromHeadersObjectLossy(this._fallbackOverrides.headers);
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = this._wrapApiCall(async () => {
          return new RawHeaders((await this._channel.rawRequestHeaders()).headers);
        });
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async response() {
      return Response.fromNullable((await this._channel.response()).response);
    }
    async _internalResponse() {
      return await this._wrapApiCall(async () => {
        return Response.fromNullable((await this._channel.response()).response);
      }, true);
    }
    frame() {
      if (!this._initializer.frame) {
        (0, _utils.assert)(this.serviceWorker());
        throw new Error("Service Worker requests do not have an associated frame.");
      }
      const frame = _frame.Frame.from(this._initializer.frame);
      if (!frame._page) {
        throw new Error(["Frame for this navigation request is not available, because the request", "was issued before the frame is created. You can check whether the request", "is a navigation request by calling isNavigationRequest() method."].join(`
`));
      }
      return frame;
    }
    _safePage() {
      var _Frame$fromNullable;
      return ((_Frame$fromNullable = _frame.Frame.fromNullable(this._initializer.frame)) === null || _Frame$fromNullable === undefined ? undefined : _Frame$fromNullable._page) || null;
    }
    serviceWorker() {
      return this._initializer.serviceWorker ? _worker.Worker.from(this._initializer.serviceWorker) : null;
    }
    isNavigationRequest() {
      return this._initializer.isNavigationRequest;
    }
    redirectedFrom() {
      return this._redirectedFrom;
    }
    redirectedTo() {
      return this._redirectedTo;
    }
    failure() {
      if (this._failureText === null)
        return null;
      return {
        errorText: this._failureText
      };
    }
    timing() {
      return this._timing;
    }
    async sizes() {
      const response = await this.response();
      if (!response)
        throw new Error("Unable to fetch sizes for failed request");
      return (await response._channel.sizes()).sizes;
    }
    _setResponseEndTiming(responseEndTiming) {
      this._timing.responseEnd = responseEndTiming;
      if (this._timing.responseStart === -1)
        this._timing.responseStart = responseEndTiming;
    }
    _finalRequest() {
      return this._redirectedTo ? this._redirectedTo._finalRequest() : this;
    }
    _applyFallbackOverrides(overrides) {
      if (overrides.url)
        this._fallbackOverrides.url = overrides.url;
      if (overrides.method)
        this._fallbackOverrides.method = overrides.method;
      if (overrides.headers)
        this._fallbackOverrides.headers = overrides.headers;
      if ((0, _utils.isString)(overrides.postData))
        this._fallbackOverrides.postDataBuffer = Buffer.from(overrides.postData, "utf-8");
      else if (overrides.postData instanceof Buffer)
        this._fallbackOverrides.postDataBuffer = overrides.postData;
      else if (overrides.postData)
        this._fallbackOverrides.postDataBuffer = Buffer.from(JSON.stringify(overrides.postData), "utf-8");
    }
    _fallbackOverridesForContinue() {
      return this._fallbackOverrides;
    }
    _targetClosedScope() {
      var _this$serviceWorker, _this$_safePage;
      return ((_this$serviceWorker = this.serviceWorker()) === null || _this$serviceWorker === undefined ? undefined : _this$serviceWorker._closedScope) || ((_this$_safePage = this._safePage()) === null || _this$_safePage === undefined ? undefined : _this$_safePage._closedOrCrashedScope) || new _manualPromise.LongStandingScope;
    }
  }
  exports.Request = Request;

  class Route extends _channelOwner.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._handlingPromise = null;
      this._context = undefined;
      this._didThrow = false;
      this.markAsInternalType();
    }
    request() {
      return Request.from(this._initializer.request);
    }
    async _raceWithTargetClose(promise) {
      return await this.request()._targetClosedScope().safeRace(promise);
    }
    async _startHandling() {
      this._handlingPromise = new _manualPromise.ManualPromise;
      return await this._handlingPromise;
    }
    async fallback(options = {}) {
      this._checkNotHandled();
      this.request()._applyFallbackOverrides(options);
      this._reportHandled(false);
    }
    async abort(errorCode) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.abort({
          errorCode
        }));
      });
    }
    async _redirectNavigationRequest(url) {
      await this._handleRoute(async () => {
        await this._raceWithTargetClose(this._channel.redirectNavigationRequest({
          url
        }));
      });
    }
    async fetch(options = {}) {
      return await this._wrapApiCall(async () => {
        return await this._context.request._innerFetch({
          request: this.request(),
          data: options.postData,
          ...options
        });
      });
    }
    async fulfill(options = {}) {
      await this._handleRoute(async () => {
        await this._wrapApiCall(async () => {
          await this._innerFulfill(options);
        });
      });
    }
    async _handleRoute(callback) {
      this._checkNotHandled();
      try {
        await callback();
        this._reportHandled(true);
      } catch (e) {
        this._didThrow = true;
        throw e;
      }
    }
    async _innerFulfill(options = {}) {
      let fetchResponseUid;
      let {
        status: statusOption,
        headers: headersOption,
        body
      } = options;
      if (options.json !== undefined) {
        (0, _utils.assert)(options.body === undefined, "Can specify either body or json parameters");
        body = JSON.stringify(options.json);
      }
      if (options.response instanceof _fetch.APIResponse) {
        var _statusOption, _headersOption;
        (_statusOption = statusOption) !== null && _statusOption !== undefined || (statusOption = options.response.status());
        (_headersOption = headersOption) !== null && _headersOption !== undefined || (headersOption = options.response.headers());
        if (body === undefined && options.path === undefined) {
          if (options.response._request._connection === this._connection)
            fetchResponseUid = options.response._fetchUid();
          else
            body = await options.response.body();
        }
      }
      let isBase64 = false;
      let length = 0;
      if (options.path) {
        const buffer = await _fs.default.promises.readFile(options.path);
        body = buffer.toString("base64");
        isBase64 = true;
        length = buffer.length;
      } else if ((0, _utils.isString)(body)) {
        isBase64 = false;
        length = Buffer.byteLength(body);
      } else if (body) {
        length = body.length;
        body = body.toString("base64");
        isBase64 = true;
      }
      const headers = {};
      for (const header of Object.keys(headersOption || {}))
        headers[header.toLowerCase()] = String(headersOption[header]);
      if (options.contentType)
        headers["content-type"] = String(options.contentType);
      else if (options.json)
        headers["content-type"] = "application/json";
      else if (options.path)
        headers["content-type"] = _utilsBundle.mime.getType(options.path) || "application/octet-stream";
      if (length && !("content-length" in headers))
        headers["content-length"] = String(length);
      await this._raceWithTargetClose(this._channel.fulfill({
        status: statusOption || 200,
        headers: (0, _utils.headersObjectToArray)(headers),
        body,
        isBase64,
        fetchResponseUid
      }));
    }
    async continue(options = {}) {
      await this._handleRoute(async () => {
        this.request()._applyFallbackOverrides(options);
        await this._innerContinue(false);
      });
    }
    _checkNotHandled() {
      if (!this._handlingPromise)
        throw new Error("Route is already handled!");
    }
    _reportHandled(done) {
      const chain = this._handlingPromise;
      this._handlingPromise = null;
      chain.resolve(done);
    }
    async _innerContinue(isFallback) {
      const options = this.request()._fallbackOverridesForContinue();
      return await this._raceWithTargetClose(this._channel.continue({
        url: options.url,
        method: options.method,
        headers: options.headers ? (0, _utils.headersObjectToArray)(options.headers) : undefined,
        postData: options.postDataBuffer,
        isFallback
      }));
    }
  }
  exports.Route = Route;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class WebSocketRoute extends _channelOwner.ChannelOwner {
    static from(route) {
      return route._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._onPageMessage = undefined;
      this._onPageClose = undefined;
      this._onServerMessage = undefined;
      this._onServerClose = undefined;
      this._server = undefined;
      this._connected = false;
      this.markAsInternalType();
      this._server = {
        onMessage: (handler) => {
          this._onServerMessage = handler;
        },
        onClose: (handler) => {
          this._onServerClose = handler;
        },
        connectToServer: () => {
          throw new Error(`connectToServer must be called on the page-side WebSocketRoute`);
        },
        url: () => {
          return this._initializer.url;
        },
        close: async (options = {}) => {
          await this._channel.closeServer({
            ...options,
            wasClean: true
          }).catch(() => {
          });
        },
        send: (message) => {
          if ((0, _utils.isString)(message))
            this._channel.sendToServer({
              message,
              isBase64: false
            }).catch(() => {
            });
          else
            this._channel.sendToServer({
              message: message.toString("base64"),
              isBase64: true
            }).catch(() => {
            });
        },
        async[Symbol.asyncDispose]() {
          await this.close();
        }
      };
      this._channel.on("messageFromPage", ({
        message,
        isBase64
      }) => {
        if (this._onPageMessage)
          this._onPageMessage(isBase64 ? Buffer.from(message, "base64") : message);
        else if (this._connected)
          this._channel.sendToServer({
            message,
            isBase64
          }).catch(() => {
          });
      });
      this._channel.on("messageFromServer", ({
        message,
        isBase64
      }) => {
        if (this._onServerMessage)
          this._onServerMessage(isBase64 ? Buffer.from(message, "base64") : message);
        else
          this._channel.sendToPage({
            message,
            isBase64
          }).catch(() => {
          });
      });
      this._channel.on("closePage", ({
        code,
        reason,
        wasClean
      }) => {
        if (this._onPageClose)
          this._onPageClose(code, reason);
        else
          this._channel.closeServer({
            code,
            reason,
            wasClean
          }).catch(() => {
          });
      });
      this._channel.on("closeServer", ({
        code,
        reason,
        wasClean
      }) => {
        if (this._onServerClose)
          this._onServerClose(code, reason);
        else
          this._channel.closePage({
            code,
            reason,
            wasClean
          }).catch(() => {
          });
      });
    }
    url() {
      return this._initializer.url;
    }
    async close(options = {}) {
      await this._channel.closePage({
        ...options,
        wasClean: true
      }).catch(() => {
      });
    }
    connectToServer() {
      if (this._connected)
        throw new Error("Already connected to the server");
      this._connected = true;
      this._channel.connect().catch(() => {
      });
      return this._server;
    }
    send(message) {
      if ((0, _utils.isString)(message))
        this._channel.sendToPage({
          message,
          isBase64: false
        }).catch(() => {
        });
      else
        this._channel.sendToPage({
          message: message.toString("base64"),
          isBase64: true
        }).catch(() => {
        });
    }
    onMessage(handler) {
      this._onPageMessage = handler;
    }
    onClose(handler) {
      this._onPageClose = handler;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async _afterHandle() {
      if (this._connected)
        return;
      await this._channel.ensureOpened();
    }
  }
  exports.WebSocketRoute = WebSocketRoute;

  class WebSocketRouteHandler {
    constructor(baseURL, url, handler) {
      this._baseURL = undefined;
      this.url = undefined;
      this.handler = undefined;
      this._baseURL = baseURL;
      this.url = url;
      this.handler = handler;
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _utils.isString)(handler.url))
          patterns.push({
            glob: handler.url
          });
        else if ((0, _utils.isRegExp)(handler.url))
          patterns.push({
            regexSource: handler.url.source,
            regexFlags: handler.url.flags
          });
        else
          all = true;
      }
      if (all)
        return [{
          glob: "**/*"
        }];
      return patterns;
    }
    matches(wsURL) {
      return (0, _utils.urlMatches)(this._baseURL, wsURL, this.url);
    }
    async handle(webSocketRoute) {
      const handler = this.handler;
      await handler(webSocketRoute);
      await webSocketRoute._afterHandle();
    }
  }
  exports.WebSocketRouteHandler = WebSocketRouteHandler;

  class Response extends _channelOwner.ChannelOwner {
    static from(response) {
      return response._object;
    }
    static fromNullable(response) {
      return response ? Response.from(response) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._provisionalHeaders = undefined;
      this._actualHeadersPromise = undefined;
      this._request = undefined;
      this._finishedPromise = new _manualPromise.ManualPromise;
      this._provisionalHeaders = new RawHeaders(initializer.headers);
      this._request = Request.from(this._initializer.request);
      Object.assign(this._request._timing, this._initializer.timing);
    }
    url() {
      return this._initializer.url;
    }
    ok() {
      return this._initializer.status === 0 || this._initializer.status >= 200 && this._initializer.status <= 299;
    }
    status() {
      return this._initializer.status;
    }
    statusText() {
      return this._initializer.statusText;
    }
    fromServiceWorker() {
      return this._initializer.fromServiceWorker;
    }
    headers() {
      return this._provisionalHeaders.headers();
    }
    async _actualHeaders() {
      if (!this._actualHeadersPromise) {
        this._actualHeadersPromise = (async () => {
          return new RawHeaders((await this._channel.rawResponseHeaders()).headers);
        })();
      }
      return await this._actualHeadersPromise;
    }
    async allHeaders() {
      return (await this._actualHeaders()).headers();
    }
    async headersArray() {
      return (await this._actualHeaders()).headersArray().slice();
    }
    async headerValue(name) {
      return (await this._actualHeaders()).get(name);
    }
    async headerValues(name) {
      return (await this._actualHeaders()).getAll(name);
    }
    async finished() {
      return await this.request()._targetClosedScope().race(this._finishedPromise);
    }
    async body() {
      return (await this._channel.body()).binary;
    }
    async text() {
      const content = await this.body();
      return content.toString("utf8");
    }
    async json() {
      const content = await this.text();
      return JSON.parse(content);
    }
    request() {
      return this._request;
    }
    frame() {
      return this._request.frame();
    }
    async serverAddr() {
      return (await this._channel.serverAddr()).value || null;
    }
    async securityDetails() {
      return (await this._channel.securityDetails()).value || null;
    }
  }
  exports.Response = Response;

  class WebSocket extends _channelOwner.ChannelOwner {
    static from(webSocket) {
      return webSocket._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._isClosed = undefined;
      this._isClosed = false;
      this._page = parent;
      this._channel.on("frameSent", (event) => {
        if (event.opcode === 1)
          this.emit(_events.Events.WebSocket.FrameSent, {
            payload: event.data
          });
        else if (event.opcode === 2)
          this.emit(_events.Events.WebSocket.FrameSent, {
            payload: Buffer.from(event.data, "base64")
          });
      });
      this._channel.on("frameReceived", (event) => {
        if (event.opcode === 1)
          this.emit(_events.Events.WebSocket.FrameReceived, {
            payload: event.data
          });
        else if (event.opcode === 2)
          this.emit(_events.Events.WebSocket.FrameReceived, {
            payload: Buffer.from(event.data, "base64")
          });
      });
      this._channel.on("socketError", ({
        error
      }) => this.emit(_events.Events.WebSocket.Error, error));
      this._channel.on("close", () => {
        this._isClosed = true;
        this.emit(_events.Events.WebSocket.Close, this);
      });
    }
    url() {
      return this._initializer.url;
    }
    isClosed() {
      return this._isClosed;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.WebSocket.Error)
          waiter.rejectOnEvent(this, _events.Events.WebSocket.Error, new Error("Socket error"));
        if (event !== _events.Events.WebSocket.Close)
          waiter.rejectOnEvent(this, _events.Events.WebSocket.Close, new Error("Socket closed"));
        waiter.rejectOnEvent(this._page, _events.Events.Page.Close, () => this._page._closeErrorWithReason());
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
  }
  exports.WebSocket = WebSocket;
  function validateHeaders(headers) {
    for (const key of Object.keys(headers)) {
      const value = headers[key];
      if (!Object.is(value, undefined) && !(0, _utils.isString)(value))
        throw new Error(`Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
    }
  }

  class RouteHandler {
    constructor(baseURL, url, handler, times = Number.MAX_SAFE_INTEGER) {
      this.handledCount = 0;
      this._baseURL = undefined;
      this._times = undefined;
      this.url = undefined;
      this.handler = undefined;
      this._ignoreException = false;
      this._activeInvocations = new Set;
      this._svedZone = undefined;
      this._baseURL = baseURL;
      this._times = times;
      this.url = url;
      this.handler = handler;
      this._svedZone = _utils.zones.currentZone();
    }
    static prepareInterceptionPatterns(handlers) {
      const patterns = [];
      let all = false;
      for (const handler of handlers) {
        if ((0, _utils.isString)(handler.url))
          patterns.push({
            glob: handler.url
          });
        else if ((0, _utils.isRegExp)(handler.url))
          patterns.push({
            regexSource: handler.url.source,
            regexFlags: handler.url.flags
          });
        else
          all = true;
      }
      if (all)
        return [{
          glob: "**/*"
        }];
      return patterns;
    }
    matches(requestURL) {
      return (0, _utils.urlMatches)(this._baseURL, requestURL, this.url);
    }
    async handle(route) {
      return await this._svedZone.run(async () => this._handleImpl(route));
    }
    async _handleImpl(route) {
      const handlerInvocation = {
        complete: new _manualPromise.ManualPromise,
        route
      };
      this._activeInvocations.add(handlerInvocation);
      try {
        return await this._handleInternal(route);
      } catch (e) {
        if (this._ignoreException)
          return false;
        if ((0, _errors.isTargetClosedError)(e)) {
          (0, _utils.rewriteErrorMessage)(e, `"${e.message}" while running route callback.
Consider awaiting \`await page.unrouteAll({ behavior: 'ignoreErrors' })\`
before the end of the test to ignore remaining routes in flight.`);
        }
        throw e;
      } finally {
        handlerInvocation.complete.resolve();
        this._activeInvocations.delete(handlerInvocation);
      }
    }
    async stop(behavior) {
      if (behavior === "ignoreErrors") {
        this._ignoreException = true;
      } else {
        const promises = [];
        for (const activation of this._activeInvocations) {
          if (!activation.route._didThrow)
            promises.push(activation.complete);
        }
        await Promise.all(promises);
      }
    }
    async _handleInternal(route) {
      ++this.handledCount;
      const handledPromise = route._startHandling();
      const handler = this.handler;
      const [handled] = await Promise.all([handledPromise, handler(route, route.request())]);
      return handled;
    }
    willExpire() {
      return this.handledCount + 1 >= this._times;
    }
  }
  exports.RouteHandler = RouteHandler;

  class RawHeaders {
    static _fromHeadersObjectLossy(headers) {
      const headersArray = Object.entries(headers).map(([name, value]) => ({
        name,
        value
      })).filter((header) => header.value !== undefined);
      return new RawHeaders(headersArray);
    }
    constructor(headers) {
      this._headersArray = undefined;
      this._headersMap = new _utils.MultiMap;
      this._headersArray = headers;
      for (const header of headers)
        this._headersMap.set(header.name.toLowerCase(), header.value);
    }
    get(name) {
      const values = this.getAll(name);
      if (!values || !values.length)
        return null;
      return values.join(name.toLowerCase() === "set-cookie" ? `
` : ", ");
    }
    getAll(name) {
      return [...this._headersMap.get(name.toLowerCase())];
    }
    headers() {
      const result = {};
      for (const name of this._headersMap.keys())
        result[name] = this.get(name);
      return result;
    }
    headersArray() {
      return this._headersArray;
    }
  }
  exports.RawHeaders = RawHeaders;
});

// node_modules/playwright-core/lib/client/types.js
var require_types2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.kLifecycleEvents = undefined;
  var kLifecycleEvents = exports.kLifecycleEvents = new Set(["load", "domcontentloaded", "networkidle", "commit"]);
});

// node_modules/playwright-core/lib/client/frame.js
var require_frame = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Frame = undefined;
  exports.verifyLoadState = verifyLoadState;
  var _utils = require_utils();
  var _channelOwner = require_channelOwner();
  var _locator = require_locator();
  var _locatorUtils = require_locatorUtils();
  var _elementHandle = require_elementHandle();
  var _jsHandle = require_jsHandle();
  var _fs = _interopRequireDefault(__require("fs"));
  var network = _interopRequireWildcard(require_network3());
  var _events = __require("events");
  var _waiter = require_waiter();
  var _events2 = require_events2();
  var _types = require_types2();
  var _clientHelper = require_clientHelper();
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class Frame extends _channelOwner.ChannelOwner {
    static from(frame) {
      return frame._object;
    }
    static fromNullable(frame) {
      return frame ? Frame.from(frame) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._eventEmitter = undefined;
      this._loadStates = undefined;
      this._parentFrame = null;
      this._url = "";
      this._name = "";
      this._detached = false;
      this._childFrames = new Set;
      this._page = undefined;
      this._eventEmitter = new _events.EventEmitter;
      this._eventEmitter.setMaxListeners(0);
      this._parentFrame = Frame.fromNullable(initializer.parentFrame);
      if (this._parentFrame)
        this._parentFrame._childFrames.add(this);
      this._name = initializer.name;
      this._url = initializer.url;
      this._loadStates = new Set(initializer.loadStates);
      this._channel.on("loadstate", (event) => {
        if (event.add) {
          this._loadStates.add(event.add);
          this._eventEmitter.emit("loadstate", event.add);
        }
        if (event.remove)
          this._loadStates.delete(event.remove);
        if (!this._parentFrame && event.add === "load" && this._page)
          this._page.emit(_events2.Events.Page.Load, this._page);
        if (!this._parentFrame && event.add === "domcontentloaded" && this._page)
          this._page.emit(_events2.Events.Page.DOMContentLoaded, this._page);
      });
      this._channel.on("navigated", (event) => {
        this._url = event.url;
        this._name = event.name;
        this._eventEmitter.emit("navigated", event);
        if (!event.error && this._page)
          this._page.emit(_events2.Events.Page.FrameNavigated, this);
      });
    }
    page() {
      return this._page;
    }
    async goto(url, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return network.Response.fromNullable((await this._channel.goto({
        url,
        ...options,
        waitUntil
      })).response);
    }
    _setupNavigationWaiter(options) {
      const waiter = new _waiter.Waiter(this._page, "");
      if (this._page.isClosed())
        waiter.rejectImmediately(this._page._closeErrorWithReason());
      waiter.rejectOnEvent(this._page, _events2.Events.Page.Close, () => this._page._closeErrorWithReason());
      waiter.rejectOnEvent(this._page, _events2.Events.Page.Crash, new Error("Navigation failed because page crashed!"));
      waiter.rejectOnEvent(this._page, _events2.Events.Page.FrameDetached, new Error("Navigating frame was detached!"), (frame) => frame === this);
      const timeout = this._page._timeoutSettings.navigationTimeout(options);
      waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded.`);
      return waiter;
    }
    async waitForNavigation(options = {}) {
      return await this._page._wrapApiCall(async () => {
        const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
        const waiter = this._setupNavigationWaiter(options);
        const toUrl = typeof options.url === "string" ? ` to "${options.url}"` : "";
        waiter.log(`waiting for navigation${toUrl} until "${waitUntil}"`);
        const navigatedEvent = await waiter.waitForEvent(this._eventEmitter, "navigated", (event) => {
          var _this$_page;
          if (event.error)
            return true;
          waiter.log(`  navigated to "${event.url}"`);
          return (0, _utils.urlMatches)((_this$_page = this._page) === null || _this$_page === undefined ? undefined : _this$_page.context()._options.baseURL, event.url, options.url);
        });
        if (navigatedEvent.error) {
          const e = new Error(navigatedEvent.error);
          e.stack = "";
          await waiter.waitForPromise(Promise.reject(e));
        }
        if (!this._loadStates.has(waitUntil)) {
          await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter.log(`  "${s}" event fired`);
            return s === waitUntil;
          });
        }
        const request = navigatedEvent.newDocument ? network.Request.fromNullable(navigatedEvent.newDocument.request) : null;
        const response = request ? await waiter.waitForPromise(request._finalRequest()._internalResponse()) : null;
        waiter.dispose();
        return response;
      });
    }
    async waitForLoadState(state = "load", options = {}) {
      state = verifyLoadState("state", state);
      return await this._page._wrapApiCall(async () => {
        const waiter = this._setupNavigationWaiter(options);
        if (this._loadStates.has(state)) {
          waiter.log(`  not waiting, "${state}" event already fired`);
        } else {
          await waiter.waitForEvent(this._eventEmitter, "loadstate", (s) => {
            waiter.log(`  "${s}" event fired`);
            return s === state;
          });
        }
        waiter.dispose();
      });
    }
    async waitForURL(url, options = {}) {
      var _this$_page2;
      if ((0, _utils.urlMatches)((_this$_page2 = this._page) === null || _this$_page2 === undefined ? undefined : _this$_page2.context()._options.baseURL, this.url(), url))
        return await this.waitForLoadState(options.waitUntil, options);
      await this.waitForNavigation({
        url,
        ...options
      });
    }
    async frameElement() {
      return _elementHandle.ElementHandle.from((await this._channel.frameElement()).element);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async _evaluateExposeUtilityScript(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $(selector, options) {
      const result = await this._channel.querySelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async waitForSelector(selector, options = {}) {
      if (options.visibility)
        throw new Error("options.visibility is not supported, did you mean options.state?");
      if (options.waitFor && options.waitFor !== "visible")
        throw new Error("options.waitFor is not supported, did you mean options.state?");
      const result = await this._channel.waitForSelector({
        selector,
        ...options
      });
      return _elementHandle.ElementHandle.fromNullable(result.element);
    }
    async dispatchEvent(selector, type, eventInit, options = {}) {
      await this._channel.dispatchEvent({
        selector,
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit),
        ...options
      });
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      const result = await this._channel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$(selector) {
      const result = await this._channel.querySelectorAll({
        selector
      });
      return result.elements.map((e) => _elementHandle.ElementHandle.from(e));
    }
    async _queryCount(selector) {
      return (await this._channel.queryCount({
        selector
      })).value;
    }
    async content() {
      return (await this._channel.content()).value;
    }
    async setContent(html, options = {}) {
      const waitUntil = verifyLoadState("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      await this._channel.setContent({
        html,
        ...options,
        waitUntil
      });
    }
    name() {
      return this._name || "";
    }
    url() {
      return this._url;
    }
    parentFrame() {
      return this._parentFrame;
    }
    childFrames() {
      return Array.from(this._childFrames);
    }
    isDetached() {
      return this._detached;
    }
    async addScriptTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs.default.promises.readFile(copy.path)).toString();
        copy.content = (0, _clientHelper.addSourceUrlToScript)(copy.content, copy.path);
      }
      return _elementHandle.ElementHandle.from((await this._channel.addScriptTag({
        ...copy
      })).element);
    }
    async addStyleTag(options = {}) {
      const copy = {
        ...options
      };
      if (copy.path) {
        copy.content = (await _fs.default.promises.readFile(copy.path)).toString();
        copy.content += "/*# sourceURL=" + copy.path.replace(/\n/g, "") + "*/";
      }
      return _elementHandle.ElementHandle.from((await this._channel.addStyleTag({
        ...copy
      })).element);
    }
    async click(selector, options = {}) {
      return await this._channel.click({
        selector,
        ...options
      });
    }
    async dblclick(selector, options = {}) {
      return await this._channel.dblclick({
        selector,
        ...options
      });
    }
    async dragAndDrop(source, target, options = {}) {
      return await this._channel.dragAndDrop({
        source,
        target,
        ...options
      });
    }
    async tap(selector, options = {}) {
      return await this._channel.tap({
        selector,
        ...options
      });
    }
    async fill(selector, value, options = {}) {
      return await this._channel.fill({
        selector,
        value,
        ...options
      });
    }
    async _highlight(selector) {
      return await this._channel.highlight({
        selector
      });
    }
    locator(selector, options) {
      return new _locator.Locator(this, selector, options);
    }
    getByTestId(testId) {
      return this.locator((0, _locatorUtils.getByTestIdSelector)((0, _locator.testIdAttributeName)(), testId));
    }
    getByAltText(text, options) {
      return this.locator((0, _locatorUtils.getByAltTextSelector)(text, options));
    }
    getByLabel(text, options) {
      return this.locator((0, _locatorUtils.getByLabelSelector)(text, options));
    }
    getByPlaceholder(text, options) {
      return this.locator((0, _locatorUtils.getByPlaceholderSelector)(text, options));
    }
    getByText(text, options) {
      return this.locator((0, _locatorUtils.getByTextSelector)(text, options));
    }
    getByTitle(text, options) {
      return this.locator((0, _locatorUtils.getByTitleSelector)(text, options));
    }
    getByRole(role, options = {}) {
      return this.locator((0, _locatorUtils.getByRoleSelector)(role, options));
    }
    frameLocator(selector) {
      return new _locator.FrameLocator(this, selector);
    }
    async focus(selector, options = {}) {
      await this._channel.focus({
        selector,
        ...options
      });
    }
    async textContent(selector, options = {}) {
      const value = (await this._channel.textContent({
        selector,
        ...options
      })).value;
      return value === undefined ? null : value;
    }
    async innerText(selector, options = {}) {
      return (await this._channel.innerText({
        selector,
        ...options
      })).value;
    }
    async innerHTML(selector, options = {}) {
      return (await this._channel.innerHTML({
        selector,
        ...options
      })).value;
    }
    async getAttribute(selector, name, options = {}) {
      const value = (await this._channel.getAttribute({
        selector,
        name,
        ...options
      })).value;
      return value === undefined ? null : value;
    }
    async inputValue(selector, options = {}) {
      return (await this._channel.inputValue({
        selector,
        ...options
      })).value;
    }
    async isChecked(selector, options = {}) {
      return (await this._channel.isChecked({
        selector,
        ...options
      })).value;
    }
    async isDisabled(selector, options = {}) {
      return (await this._channel.isDisabled({
        selector,
        ...options
      })).value;
    }
    async isEditable(selector, options = {}) {
      return (await this._channel.isEditable({
        selector,
        ...options
      })).value;
    }
    async isEnabled(selector, options = {}) {
      return (await this._channel.isEnabled({
        selector,
        ...options
      })).value;
    }
    async isHidden(selector, options = {}) {
      return (await this._channel.isHidden({
        selector,
        ...options
      })).value;
    }
    async isVisible(selector, options = {}) {
      return (await this._channel.isVisible({
        selector,
        ...options
      })).value;
    }
    async hover(selector, options = {}) {
      await this._channel.hover({
        selector,
        ...options
      });
    }
    async selectOption(selector, values, options = {}) {
      return (await this._channel.selectOption({
        selector,
        ...(0, _elementHandle.convertSelectOptionValues)(values),
        ...options
      })).values;
    }
    async setInputFiles(selector, files, options = {}) {
      const converted = await (0, _elementHandle.convertInputFiles)(files, this.page().context());
      await this._channel.setInputFiles({
        selector,
        ...converted,
        ...options
      });
    }
    async type(selector, text, options = {}) {
      await this._channel.type({
        selector,
        text,
        ...options
      });
    }
    async press(selector, key, options = {}) {
      await this._channel.press({
        selector,
        key,
        ...options
      });
    }
    async check(selector, options = {}) {
      await this._channel.check({
        selector,
        ...options
      });
    }
    async uncheck(selector, options = {}) {
      await this._channel.uncheck({
        selector,
        ...options
      });
    }
    async setChecked(selector, checked, options) {
      if (checked)
        await this.check(selector, options);
      else
        await this.uncheck(selector, options);
    }
    async waitForTimeout(timeout) {
      await this._channel.waitForTimeout({
        timeout
      });
    }
    async waitForFunction(pageFunction, arg, options = {}) {
      if (typeof options.polling === "string")
        (0, _utils.assert)(options.polling === "raf", "Unknown polling option: " + options.polling);
      const result = await this._channel.waitForFunction({
        ...options,
        pollingInterval: options.polling === "raf" ? undefined : options.polling,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async title() {
      return (await this._channel.title()).value;
    }
  }
  exports.Frame = Frame;
  function verifyLoadState(name, waitUntil) {
    if (waitUntil === "networkidle0")
      waitUntil = "networkidle";
    if (!_types.kLifecycleEvents.has(waitUntil))
      throw new Error(`${name}: expected one of (load|domcontentloaded|networkidle|commit)`);
    return waitUntil;
  }
});

// node_modules/playwright-core/lib/client/writableStream.js
var require_writableStream = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WritableStream = undefined;
  var _stream = __require("stream");
  var _channelOwner = require_channelOwner();

  class WritableStream extends _channelOwner.ChannelOwner {
    static from(Stream) {
      return Stream._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    stream() {
      return new WritableStreamImpl(this._channel);
    }
  }
  exports.WritableStream = WritableStream;

  class WritableStreamImpl extends _stream.Writable {
    constructor(channel) {
      super();
      this._channel = undefined;
      this._channel = channel;
    }
    async _write(chunk, encoding, callback) {
      const error = await this._channel.write({
        binary: typeof chunk === "string" ? Buffer.from(chunk) : chunk
      }).catch((e) => e);
      callback(error || null);
    }
    async _final(callback) {
      const error = await this._channel.close().catch((e) => e);
      callback(error || null);
    }
  }
});

// node_modules/playwright-core/lib/client/elementHandle.js
var require_elementHandle = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElementHandle = undefined;
  exports.convertInputFiles = convertInputFiles;
  exports.convertSelectOptionValues = convertSelectOptionValues;
  exports.determineScreenshotType = determineScreenshotType;
  var _frame = require_frame();
  var _jsHandle = require_jsHandle();
  var _fs = _interopRequireDefault(__require("fs"));
  var _utilsBundle = require_utilsBundle();
  var _path = _interopRequireDefault(__require("path"));
  var _utils = require_utils();
  var _fileUtils = require_fileUtils();
  var _writableStream = require_writableStream();
  var _stream = __require("stream");
  var _util = __require("util");
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var pipelineAsync = (0, _util.promisify)(_stream.pipeline);

  class ElementHandle extends _jsHandle.JSHandle {
    static from(handle) {
      return handle._object;
    }
    static fromNullable(handle) {
      return handle ? ElementHandle.from(handle) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._elementChannel = undefined;
      this._elementChannel = this._channel;
    }
    asElement() {
      return this;
    }
    async ownerFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.ownerFrame()).frame);
    }
    async contentFrame() {
      return _frame.Frame.fromNullable((await this._elementChannel.contentFrame()).frame);
    }
    async getAttribute(name) {
      const value = (await this._elementChannel.getAttribute({
        name
      })).value;
      return value === undefined ? null : value;
    }
    async inputValue() {
      return (await this._elementChannel.inputValue()).value;
    }
    async textContent() {
      const value = (await this._elementChannel.textContent()).value;
      return value === undefined ? null : value;
    }
    async innerText() {
      return (await this._elementChannel.innerText()).value;
    }
    async innerHTML() {
      return (await this._elementChannel.innerHTML()).value;
    }
    async isChecked() {
      return (await this._elementChannel.isChecked()).value;
    }
    async isDisabled() {
      return (await this._elementChannel.isDisabled()).value;
    }
    async isEditable() {
      return (await this._elementChannel.isEditable()).value;
    }
    async isEnabled() {
      return (await this._elementChannel.isEnabled()).value;
    }
    async isHidden() {
      return (await this._elementChannel.isHidden()).value;
    }
    async isVisible() {
      return (await this._elementChannel.isVisible()).value;
    }
    async dispatchEvent(type, eventInit = {}) {
      await this._elementChannel.dispatchEvent({
        type,
        eventInit: (0, _jsHandle.serializeArgument)(eventInit)
      });
    }
    async scrollIntoViewIfNeeded(options = {}) {
      await this._elementChannel.scrollIntoViewIfNeeded(options);
    }
    async hover(options = {}) {
      await this._elementChannel.hover(options);
    }
    async click(options = {}) {
      return await this._elementChannel.click(options);
    }
    async dblclick(options = {}) {
      return await this._elementChannel.dblclick(options);
    }
    async tap(options = {}) {
      return await this._elementChannel.tap(options);
    }
    async selectOption(values, options = {}) {
      const result = await this._elementChannel.selectOption({
        ...convertSelectOptionValues(values),
        ...options
      });
      return result.values;
    }
    async fill(value, options = {}) {
      return await this._elementChannel.fill({
        value,
        ...options
      });
    }
    async selectText(options = {}) {
      await this._elementChannel.selectText(options);
    }
    async setInputFiles(files, options = {}) {
      const frame = await this.ownerFrame();
      if (!frame)
        throw new Error("Cannot set input files to detached element");
      const converted = await convertInputFiles(files, frame.page().context());
      await this._elementChannel.setInputFiles({
        ...converted,
        ...options
      });
    }
    async focus() {
      await this._elementChannel.focus();
    }
    async type(text, options = {}) {
      await this._elementChannel.type({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._elementChannel.press({
        key,
        ...options
      });
    }
    async check(options = {}) {
      return await this._elementChannel.check(options);
    }
    async uncheck(options = {}) {
      return await this._elementChannel.uncheck(options);
    }
    async setChecked(checked, options) {
      if (checked)
        await this.check(options);
      else
        await this.uncheck(options);
    }
    async boundingBox() {
      const value = (await this._elementChannel.boundingBox()).value;
      return value === undefined ? null : value;
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: undefined
      };
      if (!copy.type)
        copy.type = determineScreenshotType(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator) => ({
          frame: locator._frame._channel,
          selector: locator._selector
        }));
      }
      const result = await this._elementChannel.screenshot(copy);
      if (options.path) {
        await (0, _fileUtils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async $(selector) {
      return ElementHandle.fromNullable((await this._elementChannel.querySelector({
        selector
      })).element);
    }
    async $$(selector) {
      const result = await this._elementChannel.querySelectorAll({
        selector
      });
      return result.elements.map((h) => ElementHandle.from(h));
    }
    async $eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelector({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async $$eval(selector, pageFunction, arg) {
      const result = await this._elementChannel.evalOnSelectorAll({
        selector,
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async waitForElementState(state, options = {}) {
      return await this._elementChannel.waitForElementState({
        state,
        ...options
      });
    }
    async waitForSelector(selector, options = {}) {
      const result = await this._elementChannel.waitForSelector({
        selector,
        ...options
      });
      return ElementHandle.fromNullable(result.element);
    }
  }
  exports.ElementHandle = ElementHandle;
  function convertSelectOptionValues(values) {
    if (values === null)
      return {};
    if (!Array.isArray(values))
      values = [values];
    if (!values.length)
      return {};
    for (let i = 0;i < values.length; i++)
      (0, _utils.assert)(values[i] !== null, `options[${i}]: expected object, got null`);
    if (values[0] instanceof ElementHandle)
      return {
        elements: values.map((v) => v._elementChannel)
      };
    if ((0, _utils.isString)(values[0]))
      return {
        options: values.map((valueOrLabel) => ({
          valueOrLabel
        }))
      };
    return {
      options: values
    };
  }
  function filePayloadExceedsSizeLimit(payloads) {
    return payloads.reduce((size, item) => size + (item.buffer ? item.buffer.byteLength : 0), 0) >= _fileUtils.fileUploadSizeLimit;
  }
  async function resolvePathsAndDirectoryForInputFiles(items) {
    var _localPaths2;
    let localPaths;
    let localDirectory;
    for (const item of items) {
      const stat = await _fs.default.promises.stat(item);
      if (stat.isDirectory()) {
        if (localDirectory)
          throw new Error("Multiple directories are not supported");
        localDirectory = _path.default.resolve(item);
      } else {
        var _localPaths;
        (_localPaths = localPaths) !== null && _localPaths !== undefined || (localPaths = []);
        localPaths.push(_path.default.resolve(item));
      }
    }
    if ((_localPaths2 = localPaths) !== null && _localPaths2 !== undefined && _localPaths2.length && localDirectory)
      throw new Error("File paths must be all files or a single directory");
    return [localPaths, localDirectory];
  }
  async function convertInputFiles(files, context) {
    const items = Array.isArray(files) ? files.slice() : [files];
    if (items.some((item) => typeof item === "string")) {
      if (!items.every((item) => typeof item === "string"))
        throw new Error("File paths cannot be mixed with buffers");
      const [localPaths, localDirectory] = await resolvePathsAndDirectoryForInputFiles(items);
      if (context._connection.isRemote()) {
        const files2 = localDirectory ? (await _fs.default.promises.readdir(localDirectory, {
          withFileTypes: true,
          recursive: true
        })).filter((f) => f.isFile()).map((f) => _path.default.join(f.path, f.name)) : localPaths;
        const {
          writableStreams,
          rootDir
        } = await context._wrapApiCall(async () => context._channel.createTempFiles({
          rootDirName: localDirectory ? _path.default.basename(localDirectory) : undefined,
          items: await Promise.all(files2.map(async (file) => {
            const lastModifiedMs = (await _fs.default.promises.stat(file)).mtimeMs;
            return {
              name: localDirectory ? _path.default.relative(localDirectory, file) : _path.default.basename(file),
              lastModifiedMs
            };
          }))
        }), true);
        for (let i = 0;i < files2.length; i++) {
          const writable = _writableStream.WritableStream.from(writableStreams[i]);
          await pipelineAsync(_fs.default.createReadStream(files2[i]), writable.stream());
        }
        return {
          directoryStream: rootDir,
          streams: localDirectory ? undefined : writableStreams
        };
      }
      return {
        localPaths,
        localDirectory
      };
    }
    const payloads = items;
    if (filePayloadExceedsSizeLimit(payloads))
      throw new Error("Cannot set buffer larger than 50Mb, please write it to a file and pass its path instead.");
    return {
      payloads
    };
  }
  function determineScreenshotType(options) {
    if (options.path) {
      const mimeType = _utilsBundle.mime.getType(options.path);
      if (mimeType === "image/png")
        return "png";
      else if (mimeType === "image/jpeg")
        return "jpeg";
      throw new Error(`path: unsupported mime type "${mimeType}"`);
    }
    return options.type;
  }
});

// node_modules/playwright-core/lib/client/fileChooser.js
var require_fileChooser2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FileChooser = undefined;

  class FileChooser {
    constructor(page, elementHandle, isMultiple) {
      this._page = undefined;
      this._elementHandle = undefined;
      this._isMultiple = undefined;
      this._page = page;
      this._elementHandle = elementHandle;
      this._isMultiple = isMultiple;
    }
    element() {
      return this._elementHandle;
    }
    isMultiple() {
      return this._isMultiple;
    }
    page() {
      return this._page;
    }
    async setFiles(files, options) {
      return await this._elementHandle.setInputFiles(files, options);
    }
  }
  exports.FileChooser = FileChooser;
});

// node_modules/playwright-core/lib/client/input.js
var require_input2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Touchscreen = exports.Mouse = exports.Keyboard = undefined;

  class Keyboard {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async down(key) {
      await this._page._channel.keyboardDown({
        key
      });
    }
    async up(key) {
      await this._page._channel.keyboardUp({
        key
      });
    }
    async insertText(text) {
      await this._page._channel.keyboardInsertText({
        text
      });
    }
    async type(text, options = {}) {
      await this._page._channel.keyboardType({
        text,
        ...options
      });
    }
    async press(key, options = {}) {
      await this._page._channel.keyboardPress({
        key,
        ...options
      });
    }
  }
  exports.Keyboard = Keyboard;

  class Mouse {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async move(x, y, options = {}) {
      await this._page._channel.mouseMove({
        x,
        y,
        ...options
      });
    }
    async down(options = {}) {
      await this._page._channel.mouseDown({
        ...options
      });
    }
    async up(options = {}) {
      await this._page._channel.mouseUp(options);
    }
    async click(x, y, options = {}) {
      await this._page._channel.mouseClick({
        x,
        y,
        ...options
      });
    }
    async dblclick(x, y, options = {}) {
      await this.click(x, y, {
        ...options,
        clickCount: 2
      });
    }
    async wheel(deltaX, deltaY) {
      await this._page._channel.mouseWheel({
        deltaX,
        deltaY
      });
    }
  }
  exports.Mouse = Mouse;

  class Touchscreen {
    constructor(page) {
      this._page = undefined;
      this._page = page;
    }
    async tap(x, y) {
      await this._page._channel.touchscreenTap({
        x,
        y
      });
    }
  }
  exports.Touchscreen = Touchscreen;
});

// node_modules/playwright-core/lib/client/video.js
var require_video = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Video = undefined;
  var _utils = require_utils();

  class Video {
    constructor(page, connection) {
      this._artifact = null;
      this._artifactReadyPromise = new _utils.ManualPromise;
      this._isRemote = false;
      this._isRemote = connection.isRemote();
      this._artifact = page._closedOrCrashedScope.safeRace(this._artifactReadyPromise);
    }
    _artifactReady(artifact) {
      this._artifactReadyPromise.resolve(artifact);
    }
    async path() {
      if (this._isRemote)
        throw new Error(`Path is not available when connecting remotely. Use saveAs() to save a local copy.`);
      const artifact = await this._artifact;
      if (!artifact)
        throw new Error("Page did not produce any video frames");
      return artifact._initializer.absolutePath;
    }
    async saveAs(path) {
      const artifact = await this._artifact;
      if (!artifact)
        throw new Error("Page did not produce any video frames");
      return await artifact.saveAs(path);
    }
    async delete() {
      const artifact = await this._artifact;
      if (artifact)
        await artifact.delete();
    }
  }
  exports.Video = Video;
});

// node_modules/playwright-core/lib/client/harRouter.js
var require_harRouter = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.HarRouter = undefined;
  var _debugLogger = require_debugLogger();
  var _Symbol$asyncDispose;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class HarRouter {
    static async create(localUtils, file, notFoundAction, options) {
      const {
        harId,
        error
      } = await localUtils._channel.harOpen({
        file
      });
      if (error)
        throw new Error(error);
      return new HarRouter(localUtils, harId, notFoundAction, options);
    }
    constructor(localUtils, harId, notFoundAction, options) {
      this._localUtils = undefined;
      this._harId = undefined;
      this._notFoundAction = undefined;
      this._options = undefined;
      this._localUtils = localUtils;
      this._harId = harId;
      this._options = options;
      this._notFoundAction = notFoundAction;
    }
    async _handle(route) {
      const request = route.request();
      const response = await this._localUtils._channel.harLookup({
        harId: this._harId,
        url: request.url(),
        method: request.method(),
        headers: await request.headersArray(),
        postData: request.postDataBuffer() || undefined,
        isNavigationRequest: request.isNavigationRequest()
      });
      if (response.action === "redirect") {
        _debugLogger.debugLogger.log("api", `HAR: ${route.request().url()} redirected to ${response.redirectURL}`);
        await route._redirectNavigationRequest(response.redirectURL);
        return;
      }
      if (response.action === "fulfill") {
        if (response.status === -1)
          return;
        await route.fulfill({
          status: response.status,
          headers: Object.fromEntries(response.headers.map((h) => [h.name, h.value])),
          body: response.body
        });
        return;
      }
      if (response.action === "error")
        _debugLogger.debugLogger.log("api", "HAR: " + response.message);
      if (this._notFoundAction === "abort") {
        await route.abort();
        return;
      }
      await route.fallback();
    }
    async addContextRoute(context) {
      await context.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async addPageRoute(page) {
      await page.route(this._options.urlMatch || "**/*", (route) => this._handle(route));
    }
    async[_Symbol$asyncDispose]() {
      await this.dispose();
    }
    dispose() {
      this._localUtils._channel.harClose({
        harId: this._harId
      }).catch(() => {
      });
    }
  }
  exports.HarRouter = HarRouter;
});

// node_modules/playwright-core/lib/client/page.js
var require_page2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Page = exports.BindingCall = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _errors = require_errors2();
  var _timeoutSettings = require_timeoutSettings();
  var _utils = require_utils();
  var _accessibility = require_accessibility2();
  var _artifact = require_artifact2();
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _coverage = require_coverage();
  var _download = require_download2();
  var _elementHandle = require_elementHandle();
  var _events = require_events2();
  var _fileChooser = require_fileChooser2();
  var _frame = require_frame();
  var _input = require_input2();
  var _jsHandle = require_jsHandle();
  var _network = require_network3();
  var _video = require_video();
  var _waiter = require_waiter();
  var _worker = require_worker();
  var _harRouter = require_harRouter();
  var _Symbol$asyncDispose;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class Page extends _channelOwner.ChannelOwner {
    static from(page) {
      return page._object;
    }
    static fromNullable(page) {
      return page ? Page.from(page) : null;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._browserContext = undefined;
      this._ownedContext = undefined;
      this._mainFrame = undefined;
      this._frames = new Set;
      this._workers = new Set;
      this._closed = false;
      this._closedOrCrashedScope = new _utils.LongStandingScope;
      this._viewportSize = undefined;
      this._routes = [];
      this._webSocketRoutes = [];
      this.accessibility = undefined;
      this.coverage = undefined;
      this.keyboard = undefined;
      this.mouse = undefined;
      this.request = undefined;
      this.touchscreen = undefined;
      this.clock = undefined;
      this._bindings = new Map;
      this._timeoutSettings = undefined;
      this._video = null;
      this._opener = undefined;
      this._closeReason = undefined;
      this._closeWasCalled = false;
      this._harRouters = [];
      this._locatorHandlers = new Map;
      this._browserContext = parent;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(this._browserContext._timeoutSettings);
      this.accessibility = new _accessibility.Accessibility(this._channel);
      this.keyboard = new _input.Keyboard(this);
      this.mouse = new _input.Mouse(this);
      this.request = this._browserContext.request;
      this.touchscreen = new _input.Touchscreen(this);
      this.clock = this._browserContext.clock;
      this._mainFrame = _frame.Frame.from(initializer.mainFrame);
      this._mainFrame._page = this;
      this._frames.add(this._mainFrame);
      this._viewportSize = initializer.viewportSize || null;
      this._closed = initializer.isClosed;
      this._opener = Page.fromNullable(initializer.opener);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("crash", () => this._onCrash());
      this._channel.on("download", ({
        url,
        suggestedFilename,
        artifact
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact);
        this.emit(_events.Events.Page.Download, new _download.Download(this, url, suggestedFilename, artifactObject));
      });
      this._channel.on("fileChooser", ({
        element,
        isMultiple
      }) => this.emit(_events.Events.Page.FileChooser, new _fileChooser.FileChooser(this, _elementHandle.ElementHandle.from(element), isMultiple)));
      this._channel.on("frameAttached", ({
        frame
      }) => this._onFrameAttached(_frame.Frame.from(frame)));
      this._channel.on("frameDetached", ({
        frame
      }) => this._onFrameDetached(_frame.Frame.from(frame)));
      this._channel.on("locatorHandlerTriggered", ({
        uid
      }) => this._onLocatorHandlerTriggered(uid));
      this._channel.on("route", ({
        route
      }) => this._onRoute(_network.Route.from(route)));
      this._channel.on("webSocketRoute", ({
        webSocketRoute
      }) => this._onWebSocketRoute(_network.WebSocketRoute.from(webSocketRoute)));
      this._channel.on("video", ({
        artifact
      }) => {
        const artifactObject = _artifact.Artifact.from(artifact);
        this._forceVideo()._artifactReady(artifactObject);
      });
      this._channel.on("webSocket", ({
        webSocket
      }) => this.emit(_events.Events.Page.WebSocket, _network.WebSocket.from(webSocket)));
      this._channel.on("worker", ({
        worker
      }) => this._onWorker(_worker.Worker.from(worker)));
      this.coverage = new _coverage.Coverage(this._channel);
      this.once(_events.Events.Page.Close, () => this._closedOrCrashedScope.close(this._closeErrorWithReason()));
      this.once(_events.Events.Page.Crash, () => this._closedOrCrashedScope.close(new _errors.TargetClosedError));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.Page.Console, "console"], [_events.Events.Page.Dialog, "dialog"], [_events.Events.Page.Request, "request"], [_events.Events.Page.Response, "response"], [_events.Events.Page.RequestFinished, "requestFinished"], [_events.Events.Page.RequestFailed, "requestFailed"], [_events.Events.Page.FileChooser, "fileChooser"]]));
    }
    _onFrameAttached(frame) {
      frame._page = this;
      this._frames.add(frame);
      if (frame._parentFrame)
        frame._parentFrame._childFrames.add(frame);
      this.emit(_events.Events.Page.FrameAttached, frame);
    }
    _onFrameDetached(frame) {
      this._frames.delete(frame);
      frame._detached = true;
      if (frame._parentFrame)
        frame._parentFrame._childFrames.delete(frame);
      this.emit(_events.Events.Page.FrameDetached, frame);
    }
    async _onRoute(route) {
      route._context = this.context();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (this._closeWasCalled || this._browserContext._closeWasCalled)
          return;
        if (!routeHandler.matches(route.request().url()))
          continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1)
          continue;
        if (routeHandler.willExpire())
          this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length)
          this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
          });
        if (handled)
          return;
      }
      await this._browserContext._onRoute(route);
    }
    async _onWebSocketRoute(webSocketRoute) {
      const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
      if (routeHandler)
        await routeHandler.handle(webSocketRoute);
      else
        await this._browserContext._onWebSocketRoute(webSocketRoute);
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (func) {
        await bindingCall.call(func);
        return;
      }
      await this._browserContext._onBinding(bindingCall);
    }
    _onWorker(worker) {
      this._workers.add(worker);
      worker._page = this;
      this.emit(_events.Events.Page.Worker, worker);
    }
    _onClose() {
      this._closed = true;
      this._browserContext._pages.delete(this);
      this._browserContext._backgroundPages.delete(this);
      this._disposeHarRouters();
      this.emit(_events.Events.Page.Close, this);
    }
    _onCrash() {
      this.emit(_events.Events.Page.Crash, this);
    }
    context() {
      return this._browserContext;
    }
    async opener() {
      if (!this._opener || this._opener.isClosed())
        return null;
      return this._opener;
    }
    mainFrame() {
      return this._mainFrame;
    }
    frame(frameSelector) {
      const name = (0, _utils.isString)(frameSelector) ? frameSelector : frameSelector.name;
      const url = (0, _utils.isObject)(frameSelector) ? frameSelector.url : undefined;
      (0, _utils.assert)(name || url, "Either name or url matcher should be specified");
      return this.frames().find((f) => {
        if (name)
          return f.name() === name;
        return (0, _utils.urlMatches)(this._browserContext._options.baseURL, f.url(), url);
      }) || null;
    }
    frames() {
      return [...this._frames];
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    _forceVideo() {
      if (!this._video)
        this._video = new _video.Video(this, this._connection);
      return this._video;
    }
    video() {
      if (!this._browserContext._options.recordVideo)
        return null;
      return this._forceVideo();
    }
    async $(selector, options) {
      return await this._mainFrame.$(selector, options);
    }
    async waitForSelector(selector, options) {
      return await this._mainFrame.waitForSelector(selector, options);
    }
    async dispatchEvent(selector, type, eventInit, options) {
      return await this._mainFrame.dispatchEvent(selector, type, eventInit, options);
    }
    async evaluateHandle(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluateHandle(pageFunction, arg);
    }
    async $eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$eval(selector, pageFunction, arg);
    }
    async $$eval(selector, pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 3);
      return await this._mainFrame.$$eval(selector, pageFunction, arg);
    }
    async $$(selector) {
      return await this._mainFrame.$$(selector);
    }
    async addScriptTag(options = {}) {
      return await this._mainFrame.addScriptTag(options);
    }
    async addStyleTag(options = {}) {
      return await this._mainFrame.addStyleTag(options);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async setExtraHTTPHeaders(headers) {
      (0, _network.validateHeaders)(headers);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils.headersObjectToArray)(headers)
      });
    }
    url() {
      return this._mainFrame.url();
    }
    async content() {
      return await this._mainFrame.content();
    }
    async setContent(html, options) {
      return await this._mainFrame.setContent(html, options);
    }
    async goto(url, options) {
      return await this._mainFrame.goto(url, options);
    }
    async reload(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network.Response.fromNullable((await this._channel.reload({
        ...options,
        waitUntil
      })).response);
    }
    async addLocatorHandler(locator, handler, options = {}) {
      if (locator._frame !== this._mainFrame)
        throw new Error(`Locator must belong to the main frame of this page`);
      if (options.times === 0)
        return;
      const {
        uid
      } = await this._channel.registerLocatorHandler({
        selector: locator._selector,
        noWaitAfter: options.noWaitAfter
      });
      this._locatorHandlers.set(uid, {
        locator,
        handler,
        times: options.times
      });
    }
    async _onLocatorHandlerTriggered(uid) {
      let remove = false;
      try {
        const handler = this._locatorHandlers.get(uid);
        if (handler && handler.times !== 0) {
          if (handler.times !== undefined)
            handler.times--;
          await handler.handler(handler.locator);
        }
        remove = (handler === null || handler === undefined ? undefined : handler.times) === 0;
      } finally {
        if (remove)
          this._locatorHandlers.delete(uid);
        this._wrapApiCall(() => this._channel.resolveLocatorHandlerNoReply({
          uid,
          remove
        }), true).catch(() => {
        });
      }
    }
    async removeLocatorHandler(locator) {
      for (const [uid, data] of this._locatorHandlers) {
        if (data.locator._equals(locator)) {
          this._locatorHandlers.delete(uid);
          await this._channel.unregisterLocatorHandler({
            uid
          }).catch(() => {
          });
        }
      }
    }
    async waitForLoadState(state, options) {
      return await this._mainFrame.waitForLoadState(state, options);
    }
    async waitForNavigation(options) {
      return await this._mainFrame.waitForNavigation(options);
    }
    async waitForURL(url, options) {
      return await this._mainFrame.waitForURL(url, options);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
      const predicate = async (request) => {
        if ((0, _utils.isString)(urlOrPredicate) || (0, _utils.isRegExp)(urlOrPredicate))
          return (0, _utils.urlMatches)(this._browserContext._options.baseURL, request.url(), urlOrPredicate);
        return await urlOrPredicate(request);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for request ${trimmedUrl}` : undefined;
      return await this._waitForEvent(_events.Events.Page.Request, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
      const predicate = async (response) => {
        if ((0, _utils.isString)(urlOrPredicate) || (0, _utils.isRegExp)(urlOrPredicate))
          return (0, _utils.urlMatches)(this._browserContext._options.baseURL, response.url(), urlOrPredicate);
        return await urlOrPredicate(response);
      };
      const trimmedUrl = trimUrl(urlOrPredicate);
      const logLine = trimmedUrl ? `waiting for response ${trimmedUrl}` : undefined;
      return await this._waitForEvent(_events.Events.Page.Response, {
        predicate,
        timeout: options.timeout
      }, logLine);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._waitForEvent(event, optionsOrPredicate, `waiting for event "${event}"`);
    }
    _closeErrorWithReason() {
      return new _errors.TargetClosedError(this._closeReason || this._browserContext._effectiveCloseReason());
    }
    async _waitForEvent(event, optionsOrPredicate, logLine) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        if (logLine)
          waiter.log(logLine);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.Page.Crash)
          waiter.rejectOnEvent(this, _events.Events.Page.Crash, new Error("Page crashed"));
        if (event !== _events.Events.Page.Close)
          waiter.rejectOnEvent(this, _events.Events.Page.Close, () => this._closeErrorWithReason());
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async goBack(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network.Response.fromNullable((await this._channel.goBack({
        ...options,
        waitUntil
      })).response);
    }
    async goForward(options = {}) {
      const waitUntil = (0, _frame.verifyLoadState)("waitUntil", options.waitUntil === undefined ? "load" : options.waitUntil);
      return _network.Response.fromNullable((await this._channel.goForward({
        ...options,
        waitUntil
      })).response);
    }
    async requestGC() {
      await this._channel.requestGC();
    }
    async emulateMedia(options = {}) {
      await this._channel.emulateMedia({
        media: options.media === null ? "no-override" : options.media,
        colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
        reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
        forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors
      });
    }
    async setViewportSize(viewportSize) {
      this._viewportSize = viewportSize;
      await this._channel.setViewportSize({
        viewportSize
      });
    }
    viewportSize() {
      return this._viewportSize;
    }
    async evaluate(pageFunction, arg) {
      (0, _jsHandle.assertMaxArguments)(arguments.length, 2);
      return await this._mainFrame.evaluate(pageFunction, arg);
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new _network.RouteHandler(this._browserContext._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._browserContext._recordIntoHAR(har, this, options);
        return;
      }
      const harRouter = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter);
      await harRouter.addPageRoute(this);
    }
    async routeWebSocket(url, handler) {
      this._webSocketRoutes.unshift(new _network.WebSocketRouteHandler(this._browserContext._options.baseURL, url, handler));
      await this._updateWebSocketInterceptionPatterns();
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === undefined ? undefined : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
          removed.push(route);
        else
          remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default")
        return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = _network.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async _updateWebSocketInterceptionPatterns() {
      const patterns = _network.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
      await this._channel.setWebSocketInterceptionPatterns({
        patterns
      });
    }
    async screenshot(options = {}) {
      const copy = {
        ...options,
        mask: undefined
      };
      if (!copy.type)
        copy.type = (0, _elementHandle.determineScreenshotType)(options);
      if (options.mask) {
        copy.mask = options.mask.map((locator) => ({
          frame: locator._frame._channel,
          selector: locator._selector
        }));
      }
      const result = await this._channel.screenshot(copy);
      if (options.path) {
        await (0, _utils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, result.binary);
      }
      return result.binary;
    }
    async _expectScreenshot(options) {
      const mask = options !== null && options !== undefined && options.mask ? options === null || options === undefined ? undefined : options.mask.map((locator2) => ({
        frame: locator2._frame._channel,
        selector: locator2._selector
      })) : undefined;
      const locator = options.locator ? {
        frame: options.locator._frame._channel,
        selector: options.locator._selector
      } : undefined;
      return await this._channel.expectScreenshot({
        ...options,
        isNot: !!options.isNot,
        locator,
        mask
      });
    }
    async title() {
      return await this._mainFrame.title();
    }
    async bringToFront() {
      await this._channel.bringToFront();
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      try {
        if (this._ownedContext)
          await this._ownedContext.close();
        else
          await this._channel.close(options);
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e) && !options.runBeforeUnload)
          return;
        throw e;
      }
    }
    isClosed() {
      return this._closed;
    }
    async click(selector, options) {
      return await this._mainFrame.click(selector, options);
    }
    async dragAndDrop(source, target, options) {
      return await this._mainFrame.dragAndDrop(source, target, options);
    }
    async dblclick(selector, options) {
      return await this._mainFrame.dblclick(selector, options);
    }
    async tap(selector, options) {
      return await this._mainFrame.tap(selector, options);
    }
    async fill(selector, value, options) {
      return await this._mainFrame.fill(selector, value, options);
    }
    locator(selector, options) {
      return this.mainFrame().locator(selector, options);
    }
    getByTestId(testId) {
      return this.mainFrame().getByTestId(testId);
    }
    getByAltText(text, options) {
      return this.mainFrame().getByAltText(text, options);
    }
    getByLabel(text, options) {
      return this.mainFrame().getByLabel(text, options);
    }
    getByPlaceholder(text, options) {
      return this.mainFrame().getByPlaceholder(text, options);
    }
    getByText(text, options) {
      return this.mainFrame().getByText(text, options);
    }
    getByTitle(text, options) {
      return this.mainFrame().getByTitle(text, options);
    }
    getByRole(role, options = {}) {
      return this.mainFrame().getByRole(role, options);
    }
    frameLocator(selector) {
      return this.mainFrame().frameLocator(selector);
    }
    async focus(selector, options) {
      return await this._mainFrame.focus(selector, options);
    }
    async textContent(selector, options) {
      return await this._mainFrame.textContent(selector, options);
    }
    async innerText(selector, options) {
      return await this._mainFrame.innerText(selector, options);
    }
    async innerHTML(selector, options) {
      return await this._mainFrame.innerHTML(selector, options);
    }
    async getAttribute(selector, name, options) {
      return await this._mainFrame.getAttribute(selector, name, options);
    }
    async inputValue(selector, options) {
      return await this._mainFrame.inputValue(selector, options);
    }
    async isChecked(selector, options) {
      return await this._mainFrame.isChecked(selector, options);
    }
    async isDisabled(selector, options) {
      return await this._mainFrame.isDisabled(selector, options);
    }
    async isEditable(selector, options) {
      return await this._mainFrame.isEditable(selector, options);
    }
    async isEnabled(selector, options) {
      return await this._mainFrame.isEnabled(selector, options);
    }
    async isHidden(selector, options) {
      return await this._mainFrame.isHidden(selector, options);
    }
    async isVisible(selector, options) {
      return await this._mainFrame.isVisible(selector, options);
    }
    async hover(selector, options) {
      return await this._mainFrame.hover(selector, options);
    }
    async selectOption(selector, values, options) {
      return await this._mainFrame.selectOption(selector, values, options);
    }
    async setInputFiles(selector, files, options) {
      return await this._mainFrame.setInputFiles(selector, files, options);
    }
    async type(selector, text, options) {
      return await this._mainFrame.type(selector, text, options);
    }
    async press(selector, key, options) {
      return await this._mainFrame.press(selector, key, options);
    }
    async check(selector, options) {
      return await this._mainFrame.check(selector, options);
    }
    async uncheck(selector, options) {
      return await this._mainFrame.uncheck(selector, options);
    }
    async setChecked(selector, checked, options) {
      return await this._mainFrame.setChecked(selector, checked, options);
    }
    async waitForTimeout(timeout) {
      return await this._mainFrame.waitForTimeout(timeout);
    }
    async waitForFunction(pageFunction, arg, options) {
      return await this._mainFrame.waitForFunction(pageFunction, arg, options);
    }
    workers() {
      return [...this._workers];
    }
    async pause(_options) {
      var _this$_instrumentatio;
      if (__require("inspector").url())
        return;
      const defaultNavigationTimeout = this._browserContext._timeoutSettings.defaultNavigationTimeout();
      const defaultTimeout = this._browserContext._timeoutSettings.defaultTimeout();
      this._browserContext.setDefaultNavigationTimeout(0);
      this._browserContext.setDefaultTimeout(0);
      (_this$_instrumentatio = this._instrumentation) === null || _this$_instrumentatio === undefined || _this$_instrumentatio.onWillPause({
        keepTestTimeout: !!(_options !== null && _options !== undefined && _options.__testHookKeepTestTimeout)
      });
      await this._closedOrCrashedScope.safeRace(this.context()._channel.pause());
      this._browserContext.setDefaultNavigationTimeout(defaultNavigationTimeout);
      this._browserContext.setDefaultTimeout(defaultTimeout);
    }
    async pdf(options = {}) {
      const transportOptions = {
        ...options
      };
      if (transportOptions.margin)
        transportOptions.margin = {
          ...transportOptions.margin
        };
      if (typeof options.width === "number")
        transportOptions.width = options.width + "px";
      if (typeof options.height === "number")
        transportOptions.height = options.height + "px";
      for (const margin of ["top", "right", "bottom", "left"]) {
        const index = margin;
        if (options.margin && typeof options.margin[index] === "number")
          transportOptions.margin[index] = transportOptions.margin[index] + "px";
      }
      const result = await this._channel.pdf(transportOptions);
      if (options.path) {
        await _fs.default.promises.mkdir(_path.default.dirname(options.path), {
          recursive: true
        });
        await _fs.default.promises.writeFile(options.path, result.pdf);
      }
      return result.pdf;
    }
  }
  exports.Page = Page;

  class BindingCall extends _channelOwner.ChannelOwner {
    static from(channel) {
      return channel._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async call(func) {
      try {
        const frame = _frame.Frame.from(this._initializer.frame);
        const source = {
          context: frame._page.context(),
          page: frame._page,
          frame
        };
        let result;
        if (this._initializer.handle)
          result = await func(source, _jsHandle.JSHandle.from(this._initializer.handle));
        else
          result = await func(source, ...this._initializer.args.map(_jsHandle.parseResult));
        this._channel.resolve({
          result: (0, _jsHandle.serializeArgument)(result)
        }).catch(() => {
        });
      } catch (e) {
        this._channel.reject({
          error: (0, _errors.serializeError)(e)
        }).catch(() => {
        });
      }
    }
  }
  exports.BindingCall = BindingCall;
  function trimUrl(param) {
    if ((0, _utils.isRegExp)(param))
      return `/${(0, _utils.trimStringWithEllipsis)(param.source, 50)}/${param.flags}`;
    if ((0, _utils.isString)(param))
      return `"${(0, _utils.trimStringWithEllipsis)(param, 50)}"`;
  }
});

// node_modules/playwright-core/lib/client/cdpSession.js
var require_cdpSession = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.CDPSession = undefined;
  var _channelOwner = require_channelOwner();

  class CDPSession extends _channelOwner.ChannelOwner {
    static from(cdpSession) {
      return cdpSession._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("event", ({
        method,
        params
      }) => {
        this.emit(method, params);
      });
      this.on = super.on;
      this.addListener = super.addListener;
      this.off = super.removeListener;
      this.removeListener = super.removeListener;
      this.once = super.once;
    }
    async send(method, params) {
      const result = await this._channel.send({
        method,
        params
      });
      return result.result;
    }
    async detach() {
      return await this._channel.detach();
    }
  }
  exports.CDPSession = CDPSession;
});

// node_modules/playwright-core/lib/client/consoleMessage.js
var require_consoleMessage = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ConsoleMessage = undefined;
  var util = _interopRequireWildcard(__require("util"));
  var _jsHandle = require_jsHandle();
  var _page = require_page2();
  var _util$inspect$custom;
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  _util$inspect$custom = util.inspect.custom;

  class ConsoleMessage {
    constructor(event) {
      this._page = undefined;
      this._event = undefined;
      this._page = "page" in event && event.page ? _page.Page.from(event.page) : null;
      this._event = event;
    }
    page() {
      return this._page;
    }
    type() {
      return this._event.type;
    }
    text() {
      return this._event.text;
    }
    args() {
      return this._event.args.map(_jsHandle.JSHandle.from);
    }
    location() {
      return this._event.location;
    }
    [_util$inspect$custom]() {
      return this.text();
    }
  }
  exports.ConsoleMessage = ConsoleMessage;
});

// node_modules/playwright-core/lib/client/dialog.js
var require_dialog2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Dialog = undefined;
  var _channelOwner = require_channelOwner();
  var _page = require_page2();

  class Dialog extends _channelOwner.ChannelOwner {
    static from(dialog) {
      return dialog._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._page = undefined;
      this._page = _page.Page.fromNullable(initializer.page);
    }
    page() {
      return this._page;
    }
    type() {
      return this._initializer.type;
    }
    message() {
      return this._initializer.message;
    }
    defaultValue() {
      return this._initializer.defaultValue;
    }
    async accept(promptText) {
      await this._channel.accept({
        promptText
      });
    }
    async dismiss() {
      await this._channel.dismiss();
    }
  }
  exports.Dialog = Dialog;
});

// node_modules/playwright-core/lib/client/webError.js
var require_webError = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.WebError = undefined;

  class WebError {
    constructor(page, error) {
      this._page = undefined;
      this._error = undefined;
      this._page = page;
      this._error = error;
    }
    page() {
      return this._page;
    }
    error() {
      return this._error;
    }
  }
  exports.WebError = WebError;
});

// node_modules/playwright-core/lib/client/clock.js
var require_clock2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Clock = undefined;

  class Clock {
    constructor(browserContext) {
      this._browserContext = undefined;
      this._browserContext = browserContext;
    }
    async install(options = {}) {
      await this._browserContext._channel.clockInstall(options.time !== undefined ? parseTime(options.time) : {});
    }
    async fastForward(ticks) {
      await this._browserContext._channel.clockFastForward(parseTicks(ticks));
    }
    async pauseAt(time) {
      await this._browserContext._channel.clockPauseAt(parseTime(time));
    }
    async resume() {
      await this._browserContext._channel.clockResume({});
    }
    async runFor(ticks) {
      await this._browserContext._channel.clockRunFor(parseTicks(ticks));
    }
    async setFixedTime(time) {
      await this._browserContext._channel.clockSetFixedTime(parseTime(time));
    }
    async setSystemTime(time) {
      await this._browserContext._channel.clockSetSystemTime(parseTime(time));
    }
  }
  exports.Clock = Clock;
  function parseTime(time) {
    if (typeof time === "number")
      return {
        timeNumber: time
      };
    if (typeof time === "string")
      return {
        timeString: time
      };
    if (!isFinite(time.getTime()))
      throw new Error(`Invalid date: ${time}`);
    return {
      timeNumber: time.getTime()
    };
  }
  function parseTicks(ticks) {
    return {
      ticksNumber: typeof ticks === "number" ? ticks : undefined,
      ticksString: typeof ticks === "string" ? ticks : undefined
    };
  }
});

// node_modules/playwright-core/lib/client/browserContext.js
var require_browserContext2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserContext = undefined;
  exports.prepareBrowserContextParams = prepareBrowserContextParams;
  exports.toClientCertificatesProtocol = toClientCertificatesProtocol;
  var _page = require_page2();
  var _frame = require_frame();
  var network = _interopRequireWildcard(require_network3());
  var _fs = _interopRequireDefault(__require("fs"));
  var _path = _interopRequireDefault(__require("path"));
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _browser = require_browser2();
  var _worker = require_worker();
  var _events = require_events2();
  var _timeoutSettings = require_timeoutSettings();
  var _waiter = require_waiter();
  var _utils = require_utils();
  var _cdpSession = require_cdpSession();
  var _tracing = require_tracing2();
  var _artifact = require_artifact2();
  var _fetch = require_fetch2();
  var _stackTrace = require_stackTrace();
  var _harRouter = require_harRouter();
  var _consoleMessage = require_consoleMessage();
  var _dialog = require_dialog2();
  var _webError = require_webError();
  var _errors = require_errors2();
  var _clock = require_clock2();
  var _Symbol$asyncDispose;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function _getRequireWildcardCache(e) {
    if (typeof WeakMap != "function")
      return null;
    var r = new WeakMap, t = new WeakMap;
    return (_getRequireWildcardCache = function(e2) {
      return e2 ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule)
      return e;
    if (e === null || typeof e != "object" && typeof e != "function")
      return { default: e };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e))
      return t.get(e);
    var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e)
      if (u !== "default" && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    return n.default = e, t && t.set(e, n), n;
  }
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class BrowserContext extends _channelOwner.ChannelOwner {
    static from(context) {
      return context._object;
    }
    static fromNullable(context) {
      return context ? BrowserContext.from(context) : null;
    }
    constructor(parent, type, guid, initializer) {
      var _this$_browser, _this$_browser2;
      super(parent, type, guid, initializer);
      this._pages = new Set;
      this._routes = [];
      this._webSocketRoutes = [];
      this._browser = null;
      this._browserType = undefined;
      this._bindings = new Map;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._ownerPage = undefined;
      this._closedPromise = undefined;
      this._options = {};
      this.request = undefined;
      this.tracing = undefined;
      this.clock = undefined;
      this._backgroundPages = new Set;
      this._serviceWorkers = new Set;
      this._isChromium = undefined;
      this._harRecorders = new Map;
      this._closeWasCalled = false;
      this._closeReason = undefined;
      this._harRouters = [];
      if (parent instanceof _browser.Browser)
        this._browser = parent;
      (_this$_browser = this._browser) === null || _this$_browser === undefined || _this$_browser._contexts.add(this);
      this._isChromium = ((_this$_browser2 = this._browser) === null || _this$_browser2 === undefined ? undefined : _this$_browser2._name) === "chromium";
      this.tracing = _tracing.Tracing.from(initializer.tracing);
      this.request = _fetch.APIRequestContext.from(initializer.requestContext);
      this.clock = new _clock.Clock(this);
      this._channel.on("bindingCall", ({
        binding
      }) => this._onBinding(_page.BindingCall.from(binding)));
      this._channel.on("close", () => this._onClose());
      this._channel.on("page", ({
        page
      }) => this._onPage(_page.Page.from(page)));
      this._channel.on("route", ({
        route
      }) => this._onRoute(network.Route.from(route)));
      this._channel.on("webSocketRoute", ({
        webSocketRoute
      }) => this._onWebSocketRoute(network.WebSocketRoute.from(webSocketRoute)));
      this._channel.on("backgroundPage", ({
        page
      }) => {
        const backgroundPage = _page.Page.from(page);
        this._backgroundPages.add(backgroundPage);
        this.emit(_events.Events.BrowserContext.BackgroundPage, backgroundPage);
      });
      this._channel.on("serviceWorker", ({
        worker
      }) => {
        const serviceWorker = _worker.Worker.from(worker);
        serviceWorker._context = this;
        this._serviceWorkers.add(serviceWorker);
        this.emit(_events.Events.BrowserContext.ServiceWorker, serviceWorker);
      });
      this._channel.on("console", (event) => {
        const consoleMessage = new _consoleMessage.ConsoleMessage(event);
        this.emit(_events.Events.BrowserContext.Console, consoleMessage);
        const page = consoleMessage.page();
        if (page)
          page.emit(_events.Events.Page.Console, consoleMessage);
      });
      this._channel.on("pageError", ({
        error,
        page
      }) => {
        const pageObject = _page.Page.from(page);
        const parsedError = (0, _errors.parseError)(error);
        this.emit(_events.Events.BrowserContext.WebError, new _webError.WebError(pageObject, parsedError));
        if (pageObject)
          pageObject.emit(_events.Events.Page.PageError, parsedError);
      });
      this._channel.on("dialog", ({
        dialog
      }) => {
        const dialogObject = _dialog.Dialog.from(dialog);
        let hasListeners = this.emit(_events.Events.BrowserContext.Dialog, dialogObject);
        const page = dialogObject.page();
        if (page)
          hasListeners = page.emit(_events.Events.Page.Dialog, dialogObject) || hasListeners;
        if (!hasListeners) {
          if (dialogObject.type() === "beforeunload")
            dialog.accept({}).catch(() => {
            });
          else
            dialog.dismiss().catch(() => {
            });
        }
      });
      this._channel.on("request", ({
        request,
        page
      }) => this._onRequest(network.Request.from(request), _page.Page.fromNullable(page)));
      this._channel.on("requestFailed", ({
        request,
        failureText,
        responseEndTiming,
        page
      }) => this._onRequestFailed(network.Request.from(request), responseEndTiming, failureText, _page.Page.fromNullable(page)));
      this._channel.on("requestFinished", (params) => this._onRequestFinished(params));
      this._channel.on("response", ({
        response,
        page
      }) => this._onResponse(network.Response.from(response), _page.Page.fromNullable(page)));
      this._closedPromise = new Promise((f) => this.once(_events.Events.BrowserContext.Close, f));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.BrowserContext.Console, "console"], [_events.Events.BrowserContext.Dialog, "dialog"], [_events.Events.BrowserContext.Request, "request"], [_events.Events.BrowserContext.Response, "response"], [_events.Events.BrowserContext.RequestFinished, "requestFinished"], [_events.Events.BrowserContext.RequestFailed, "requestFailed"]]));
    }
    _setOptions(contextOptions, browserOptions) {
      this._options = contextOptions;
      if (this._options.recordHar)
        this._harRecorders.set("", {
          path: this._options.recordHar.path,
          content: this._options.recordHar.content
        });
      this.tracing._tracesDir = browserOptions.tracesDir;
    }
    _onPage(page) {
      this._pages.add(page);
      this.emit(_events.Events.BrowserContext.Page, page);
      if (page._opener && !page._opener.isClosed())
        page._opener.emit(_events.Events.Page.Popup, page);
    }
    _onRequest(request, page) {
      this.emit(_events.Events.BrowserContext.Request, request);
      if (page)
        page.emit(_events.Events.Page.Request, request);
    }
    _onResponse(response, page) {
      this.emit(_events.Events.BrowserContext.Response, response);
      if (page)
        page.emit(_events.Events.Page.Response, response);
    }
    _onRequestFailed(request, responseEndTiming, failureText, page) {
      request._failureText = failureText || null;
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFailed, request);
      if (page)
        page.emit(_events.Events.Page.RequestFailed, request);
    }
    _onRequestFinished(params) {
      const {
        responseEndTiming
      } = params;
      const request = network.Request.from(params.request);
      const response = network.Response.fromNullable(params.response);
      const page = _page.Page.fromNullable(params.page);
      request._setResponseEndTiming(responseEndTiming);
      this.emit(_events.Events.BrowserContext.RequestFinished, request);
      if (page)
        page.emit(_events.Events.Page.RequestFinished, request);
      if (response)
        response._finishedPromise.resolve(null);
    }
    async _onRoute(route) {
      route._context = this;
      const page = route.request()._safePage();
      const routeHandlers = this._routes.slice();
      for (const routeHandler of routeHandlers) {
        if (page !== null && page !== undefined && page._closeWasCalled || this._closeWasCalled)
          return;
        if (!routeHandler.matches(route.request().url()))
          continue;
        const index = this._routes.indexOf(routeHandler);
        if (index === -1)
          continue;
        if (routeHandler.willExpire())
          this._routes.splice(index, 1);
        const handled = await routeHandler.handle(route);
        if (!this._routes.length)
          this._wrapApiCall(() => this._updateInterceptionPatterns(), true).catch(() => {
          });
        if (handled)
          return;
      }
      await route._innerContinue(true).catch(() => {
      });
    }
    async _onWebSocketRoute(webSocketRoute) {
      const routeHandler = this._webSocketRoutes.find((route) => route.matches(webSocketRoute.url()));
      if (routeHandler)
        await routeHandler.handle(webSocketRoute);
      else
        webSocketRoute.connectToServer();
    }
    async _onBinding(bindingCall) {
      const func = this._bindings.get(bindingCall._initializer.name);
      if (!func)
        return;
      await bindingCall.call(func);
    }
    setDefaultNavigationTimeout(timeout) {
      this._timeoutSettings.setDefaultNavigationTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultNavigationTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._wrapApiCall(async () => {
        this._channel.setDefaultTimeoutNoReply({
          timeout
        }).catch(() => {
        });
      }, true);
    }
    browser() {
      return this._browser;
    }
    pages() {
      return [...this._pages];
    }
    async newPage() {
      if (this._ownerPage)
        throw new Error("Please use browser.newContext()");
      return _page.Page.from((await this._channel.newPage()).page);
    }
    async cookies(urls) {
      if (!urls)
        urls = [];
      if (urls && typeof urls === "string")
        urls = [urls];
      return (await this._channel.cookies({
        urls
      })).cookies;
    }
    async addCookies(cookies) {
      await this._channel.addCookies({
        cookies
      });
    }
    async clearCookies(options = {}) {
      await this._channel.clearCookies({
        name: (0, _utils.isString)(options.name) ? options.name : undefined,
        nameRegexSource: (0, _utils.isRegExp)(options.name) ? options.name.source : undefined,
        nameRegexFlags: (0, _utils.isRegExp)(options.name) ? options.name.flags : undefined,
        domain: (0, _utils.isString)(options.domain) ? options.domain : undefined,
        domainRegexSource: (0, _utils.isRegExp)(options.domain) ? options.domain.source : undefined,
        domainRegexFlags: (0, _utils.isRegExp)(options.domain) ? options.domain.flags : undefined,
        path: (0, _utils.isString)(options.path) ? options.path : undefined,
        pathRegexSource: (0, _utils.isRegExp)(options.path) ? options.path.source : undefined,
        pathRegexFlags: (0, _utils.isRegExp)(options.path) ? options.path.flags : undefined
      });
    }
    async grantPermissions(permissions, options) {
      await this._channel.grantPermissions({
        permissions,
        ...options
      });
    }
    async clearPermissions() {
      await this._channel.clearPermissions();
    }
    async setGeolocation(geolocation) {
      await this._channel.setGeolocation({
        geolocation: geolocation || undefined
      });
    }
    async setExtraHTTPHeaders(headers) {
      network.validateHeaders(headers);
      await this._channel.setExtraHTTPHeaders({
        headers: (0, _utils.headersObjectToArray)(headers)
      });
    }
    async setOffline(offline) {
      await this._channel.setOffline({
        offline
      });
    }
    async setHTTPCredentials(httpCredentials) {
      await this._channel.setHTTPCredentials({
        httpCredentials: httpCredentials || undefined
      });
    }
    async addInitScript(script, arg) {
      const source = await (0, _clientHelper.evaluationScript)(script, arg);
      await this._channel.addInitScript({
        source
      });
    }
    async exposeBinding(name, callback, options = {}) {
      await this._channel.exposeBinding({
        name,
        needsHandle: options.handle
      });
      this._bindings.set(name, callback);
    }
    async exposeFunction(name, callback) {
      await this._channel.exposeBinding({
        name
      });
      const binding = (source, ...args) => callback(...args);
      this._bindings.set(name, binding);
    }
    async route(url, handler, options = {}) {
      this._routes.unshift(new network.RouteHandler(this._options.baseURL, url, handler, options.times));
      await this._updateInterceptionPatterns();
    }
    async routeWebSocket(url, handler) {
      this._webSocketRoutes.unshift(new network.WebSocketRouteHandler(this._options.baseURL, url, handler));
      await this._updateWebSocketInterceptionPatterns();
    }
    async _recordIntoHAR(har, page, options = {}) {
      var _options$updateConten, _options$updateMode, _options$updateConten2;
      const {
        harId
      } = await this._channel.harStart({
        page: page === null || page === undefined ? undefined : page._channel,
        options: prepareRecordHarOptions({
          path: har,
          content: (_options$updateConten = options.updateContent) !== null && _options$updateConten !== undefined ? _options$updateConten : "attach",
          mode: (_options$updateMode = options.updateMode) !== null && _options$updateMode !== undefined ? _options$updateMode : "minimal",
          urlFilter: options.url
        })
      });
      this._harRecorders.set(harId, {
        path: har,
        content: (_options$updateConten2 = options.updateContent) !== null && _options$updateConten2 !== undefined ? _options$updateConten2 : "attach"
      });
    }
    async routeFromHAR(har, options = {}) {
      if (options.update) {
        await this._recordIntoHAR(har, null, options);
        return;
      }
      const harRouter = await _harRouter.HarRouter.create(this._connection.localUtils(), har, options.notFound || "abort", {
        urlMatch: options.url
      });
      this._harRouters.push(harRouter);
      await harRouter.addContextRoute(this);
    }
    _disposeHarRouters() {
      this._harRouters.forEach((router) => router.dispose());
      this._harRouters = [];
    }
    async unrouteAll(options) {
      await this._unrouteInternal(this._routes, [], options === null || options === undefined ? undefined : options.behavior);
      this._disposeHarRouters();
    }
    async unroute(url, handler) {
      const removed = [];
      const remaining = [];
      for (const route of this._routes) {
        if ((0, _utils.urlMatchesEqual)(route.url, url) && (!handler || route.handler === handler))
          removed.push(route);
        else
          remaining.push(route);
      }
      await this._unrouteInternal(removed, remaining, "default");
    }
    async _unrouteInternal(removed, remaining, behavior) {
      this._routes = remaining;
      await this._updateInterceptionPatterns();
      if (!behavior || behavior === "default")
        return;
      const promises = removed.map((routeHandler) => routeHandler.stop(behavior));
      await Promise.all(promises);
    }
    async _updateInterceptionPatterns() {
      const patterns = network.RouteHandler.prepareInterceptionPatterns(this._routes);
      await this._channel.setNetworkInterceptionPatterns({
        patterns
      });
    }
    async _updateWebSocketInterceptionPatterns() {
      const patterns = network.WebSocketRouteHandler.prepareInterceptionPatterns(this._webSocketRoutes);
      await this._channel.setWebSocketInterceptionPatterns({
        patterns
      });
    }
    _effectiveCloseReason() {
      var _this$_browser3;
      return this._closeReason || ((_this$_browser3 = this._browser) === null || _this$_browser3 === undefined ? undefined : _this$_browser3._closeReason);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.BrowserContext.Close)
          waiter.rejectOnEvent(this, _events.Events.BrowserContext.Close, () => new _errors.TargetClosedError(this._effectiveCloseReason()));
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async storageState(options = {}) {
      const state = await this._channel.storageState();
      if (options.path) {
        await (0, _utils.mkdirIfNeeded)(options.path);
        await _fs.default.promises.writeFile(options.path, JSON.stringify(state, undefined, 2), "utf8");
      }
      return state;
    }
    backgroundPages() {
      return [...this._backgroundPages];
    }
    serviceWorkers() {
      return [...this._serviceWorkers];
    }
    async newCDPSession(page) {
      if (!(page instanceof _page.Page) && !(page instanceof _frame.Frame))
        throw new Error("page: expected Page or Frame");
      const result = await this._channel.newCDPSession(page instanceof _page.Page ? {
        page: page._channel
      } : {
        frame: page._channel
      });
      return _cdpSession.CDPSession.from(result.session);
    }
    _onClose() {
      var _this$_browserType;
      if (this._browser)
        this._browser._contexts.delete(this);
      (_this$_browserType = this._browserType) === null || _this$_browserType === undefined || (_this$_browserType = _this$_browserType._contexts) === null || _this$_browserType === undefined || _this$_browserType.delete(this);
      this._disposeHarRouters();
      this.tracing._resetStackCounter();
      this.emit(_events.Events.BrowserContext.Close, this);
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      if (this._closeWasCalled)
        return;
      this._closeReason = options.reason;
      this._closeWasCalled = true;
      await this._wrapApiCall(async () => {
        await this.request.dispose(options);
      }, true);
      await this._wrapApiCall(async () => {
        var _this$_browserType2;
        await ((_this$_browserType2 = this._browserType) === null || _this$_browserType2 === undefined ? undefined : _this$_browserType2._willCloseContext(this));
        for (const [harId, harParams] of this._harRecorders) {
          const har = await this._channel.harExport({
            harId
          });
          const artifact = _artifact.Artifact.from(har.artifact);
          const isCompressed = harParams.content === "attach" || harParams.path.endsWith(".zip");
          const needCompressed = harParams.path.endsWith(".zip");
          if (isCompressed && !needCompressed) {
            await artifact.saveAs(harParams.path + ".tmp");
            await this._connection.localUtils()._channel.harUnzip({
              zipFile: harParams.path + ".tmp",
              harFile: harParams.path
            });
          } else {
            await artifact.saveAs(harParams.path);
          }
          await artifact.delete();
        }
      }, true);
      await this._channel.close(options);
      await this._closedPromise;
    }
    async _enableRecorder(params) {
      await this._channel.enableRecorder(params);
    }
  }
  exports.BrowserContext = BrowserContext;
  async function prepareStorageState(options) {
    if (typeof options.storageState !== "string")
      return options.storageState;
    try {
      return JSON.parse(await _fs.default.promises.readFile(options.storageState, "utf8"));
    } catch (e) {
      (0, _stackTrace.rewriteErrorMessage)(e, `Error reading storage state from ${options.storageState}:
` + e.message);
      throw e;
    }
  }
  function prepareRecordHarOptions(options) {
    if (!options)
      return;
    return {
      path: options.path,
      content: options.content || (options.omitContent ? "omit" : undefined),
      urlGlob: (0, _utils.isString)(options.urlFilter) ? options.urlFilter : undefined,
      urlRegexSource: (0, _utils.isRegExp)(options.urlFilter) ? options.urlFilter.source : undefined,
      urlRegexFlags: (0, _utils.isRegExp)(options.urlFilter) ? options.urlFilter.flags : undefined,
      mode: options.mode
    };
  }
  async function prepareBrowserContextParams(options) {
    if (options.videoSize && !options.videosPath)
      throw new Error(`"videoSize" option requires "videosPath" to be specified`);
    if (options.extraHTTPHeaders)
      network.validateHeaders(options.extraHTTPHeaders);
    const contextParams = {
      ...options,
      viewport: options.viewport === null ? undefined : options.viewport,
      noDefaultViewport: options.viewport === null,
      extraHTTPHeaders: options.extraHTTPHeaders ? (0, _utils.headersObjectToArray)(options.extraHTTPHeaders) : undefined,
      storageState: await prepareStorageState(options),
      serviceWorkers: options.serviceWorkers,
      recordHar: prepareRecordHarOptions(options.recordHar),
      colorScheme: options.colorScheme === null ? "no-override" : options.colorScheme,
      reducedMotion: options.reducedMotion === null ? "no-override" : options.reducedMotion,
      forcedColors: options.forcedColors === null ? "no-override" : options.forcedColors,
      acceptDownloads: toAcceptDownloadsProtocol(options.acceptDownloads),
      clientCertificates: await toClientCertificatesProtocol(options.clientCertificates)
    };
    if (!contextParams.recordVideo && options.videosPath) {
      contextParams.recordVideo = {
        dir: options.videosPath,
        size: options.videoSize
      };
    }
    if (contextParams.recordVideo && contextParams.recordVideo.dir)
      contextParams.recordVideo.dir = _path.default.resolve(process.cwd(), contextParams.recordVideo.dir);
    return contextParams;
  }
  function toAcceptDownloadsProtocol(acceptDownloads) {
    if (acceptDownloads === undefined)
      return;
    if (acceptDownloads)
      return "accept";
    return "deny";
  }
  async function toClientCertificatesProtocol(certs) {
    if (!certs)
      return;
    const bufferizeContent = async (value, path) => {
      if (value)
        return value;
      if (path)
        return await _fs.default.promises.readFile(path);
    };
    return await Promise.all(certs.map(async (cert) => ({
      origin: cert.origin,
      cert: await bufferizeContent(cert.cert, cert.certPath),
      key: await bufferizeContent(cert.key, cert.keyPath),
      pfx: await bufferizeContent(cert.pfx, cert.pfxPath),
      passphrase: cert.passphrase
    })));
  }
});

// node_modules/playwright-core/lib/client/browser.js
var require_browser2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Browser = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _events = require_events2();
  var _errors = require_errors2();
  var _cdpSession = require_cdpSession();
  var _artifact = require_artifact2();
  var _utils = require_utils();
  var _Symbol$asyncDispose;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class Browser extends _channelOwner.ChannelOwner {
    static from(browser) {
      return browser._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._contexts = new Set;
      this._isConnected = true;
      this._closedPromise = undefined;
      this._shouldCloseConnectionOnClose = false;
      this._browserType = undefined;
      this._options = {};
      this._name = undefined;
      this._path = undefined;
      this._connectHeaders = undefined;
      this._closeReason = undefined;
      this._name = initializer.name;
      this._channel.on("close", () => this._didClose());
      this._closedPromise = new Promise((f) => this.once(_events.Events.Browser.Disconnected, f));
    }
    browserType() {
      return this._browserType;
    }
    async newContext(options = {}) {
      return await this._innerNewContext(options, false);
    }
    async _newContextForReuse(options = {}) {
      return await this._wrapApiCall(async () => {
        for (const context of this._contexts) {
          await this._browserType._willCloseContext(context);
          for (const page of context.pages())
            page._onClose();
          context._onClose();
        }
        return await this._innerNewContext(options, true);
      }, true);
    }
    async _stopPendingOperations(reason) {
      return await this._wrapApiCall(async () => {
        await this._channel.stopPendingOperations({
          reason
        });
      }, true);
    }
    async _innerNewContext(options = {}, forReuse) {
      options = {
        ...this._browserType._defaultContextOptions,
        ...options
      };
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(options);
      const response = forReuse ? await this._channel.newContextForReuse(contextOptions) : await this._channel.newContext(contextOptions);
      const context = _browserContext.BrowserContext.from(response.context);
      await this._browserType._didCreateContext(context, contextOptions, this._options, options.logger || this._logger);
      return context;
    }
    contexts() {
      return [...this._contexts];
    }
    version() {
      return this._initializer.version;
    }
    async newPage(options = {}) {
      return await this._wrapApiCall(async () => {
        const context = await this.newContext(options);
        const page = await context.newPage();
        page._ownedContext = context;
        context._ownerPage = page;
        return page;
      });
    }
    isConnected() {
      return this._isConnected;
    }
    async newBrowserCDPSession() {
      return _cdpSession.CDPSession.from((await this._channel.newBrowserCDPSession()).session);
    }
    async startTracing(page, options = {}) {
      this._path = options.path;
      await this._channel.startTracing({
        ...options,
        page: page ? page._channel : undefined
      });
    }
    async stopTracing() {
      const artifact = _artifact.Artifact.from((await this._channel.stopTracing()).artifact);
      const buffer = await artifact.readIntoBuffer();
      await artifact.delete();
      if (this._path) {
        await (0, _utils.mkdirIfNeeded)(this._path);
        await _fs.default.promises.writeFile(this._path, buffer);
        this._path = undefined;
      }
      return buffer;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close(options = {}) {
      this._closeReason = options.reason;
      try {
        if (this._shouldCloseConnectionOnClose)
          this._connection.close();
        else
          await this._channel.close(options);
        await this._closedPromise;
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    _didClose() {
      this._isConnected = false;
      this.emit(_events.Events.Browser.Disconnected, this);
    }
  }
  exports.Browser = Browser;
});

// node_modules/playwright-core/lib/client/browserType.js
var require_browserType2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserType = undefined;
  var _browser3 = require_browser2();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _connection = require_connection();
  var _events = require_events2();
  var _clientHelper = require_clientHelper();
  var _utils = require_utils();
  var _timeoutRunner = require_timeoutRunner();

  class BrowserType extends _channelOwner.ChannelOwner {
    constructor(...args) {
      super(...args);
      this._serverLauncher = undefined;
      this._contexts = new Set;
      this._playwright = undefined;
      this._defaultContextOptions = undefined;
      this._defaultContextTimeout = undefined;
      this._defaultContextNavigationTimeout = undefined;
      this._defaultLaunchOptions = undefined;
    }
    static from(browserType) {
      return browserType._object;
    }
    executablePath() {
      if (!this._initializer.executablePath)
        throw new Error("Browser is not supported on current platform");
      return this._initializer.executablePath;
    }
    name() {
      return this._initializer.name;
    }
    async launch(options = {}) {
      var _this$_defaultLaunchO;
      (0, _utils.assert)(!options.userDataDir, "userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead");
      (0, _utils.assert)(!options.port, "Cannot specify a port without launching as a server.");
      const logger = options.logger || ((_this$_defaultLaunchO = this._defaultLaunchOptions) === null || _this$_defaultLaunchO === undefined ? undefined : _this$_defaultLaunchO.logger);
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      const launchOptions = {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined
      };
      return await this._wrapApiCall(async () => {
        const browser = _browser3.Browser.from((await this._channel.launch(launchOptions)).browser);
        this._didLaunchBrowser(browser, options, logger);
        return browser;
      });
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher)
        throw new Error("Launching server is not supported");
      options = {
        ...this._defaultLaunchOptions,
        ...options
      };
      return await this._serverLauncher.launchServer(options);
    }
    async launchPersistentContext(userDataDir, options = {}) {
      var _this$_defaultLaunchO2;
      const logger = options.logger || ((_this$_defaultLaunchO2 = this._defaultLaunchOptions) === null || _this$_defaultLaunchO2 === undefined ? undefined : _this$_defaultLaunchO2.logger);
      (0, _utils.assert)(!options.port, "Cannot specify a port without launching as a server.");
      options = {
        ...this._defaultLaunchOptions,
        ...this._defaultContextOptions,
        ...options
      };
      const contextParams = await (0, _browserContext.prepareBrowserContextParams)(options);
      const persistentParams = {
        ...contextParams,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined,
        channel: options.channel,
        userDataDir
      };
      return await this._wrapApiCall(async () => {
        const result = await this._channel.launchPersistentContext(persistentParams);
        const context = _browserContext.BrowserContext.from(result.context);
        await this._didCreateContext(context, contextParams, options, logger);
        return context;
      });
    }
    async connect(optionsOrWsEndpoint, options) {
      if (typeof optionsOrWsEndpoint === "string")
        return await this._connect({
          ...options,
          wsEndpoint: optionsOrWsEndpoint
        });
      (0, _utils.assert)(optionsOrWsEndpoint.wsEndpoint, "options.wsEndpoint is required");
      return await this._connect(optionsOrWsEndpoint);
    }
    async _connect(params) {
      const logger = params.logger;
      return await this._wrapApiCall(async () => {
        var _params$exposeNetwork;
        const deadline = params.timeout ? (0, _utils.monotonicTime)() + params.timeout : 0;
        const headers = {
          "x-playwright-browser": this.name(),
          ...params.headers
        };
        const localUtils = this._connection.localUtils();
        const connectParams = {
          wsEndpoint: params.wsEndpoint,
          headers,
          exposeNetwork: (_params$exposeNetwork = params.exposeNetwork) !== null && _params$exposeNetwork !== undefined ? _params$exposeNetwork : params._exposeNetwork,
          slowMo: params.slowMo,
          timeout: params.timeout
        };
        if (params.__testHookRedirectPortForwarding)
          connectParams.socksProxyRedirectPortForTest = params.__testHookRedirectPortForwarding;
        const {
          pipe,
          headers: connectHeaders
        } = await localUtils._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection = new _connection.Connection(localUtils, this._instrumentation);
        connection.markAsRemote();
        connection.on("close", closePipe);
        let browser;
        let closeError;
        const onPipeClosed = (reason) => {
          for (const context of ((_browser = browser) === null || _browser === undefined ? undefined : _browser.contexts()) || []) {
            var _browser;
            for (const page of context.pages())
              page._onClose();
            context._onClose();
          }
          connection.close(reason || closeError);
          setTimeout(() => {
            var _browser2;
            return (_browser2 = browser) === null || _browser2 === undefined ? undefined : _browser2._didClose();
          }, 0);
        };
        pipe.on("closed", (params2) => onPipeClosed(params2.reason));
        connection.onmessage = (message) => this._wrapApiCall(() => pipe.send({
          message
        }).catch(() => onPipeClosed()), true);
        pipe.on("message", ({
          message
        }) => {
          try {
            connection.dispatch(message);
          } catch (e) {
            closeError = String(e);
            closePipe();
          }
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          if (params.__testHookBeforeCreateBrowser)
            await params.__testHookBeforeCreateBrowser();
          const playwright = await connection.initializePlaywright();
          if (!playwright._initializer.preLaunchedBrowser) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use BrowserType.launchServer method?");
          }
          playwright._setSelectors(this._playwright.selectors);
          browser = _browser3.Browser.from(playwright._initializer.preLaunchedBrowser);
          this._didLaunchBrowser(browser, {}, logger);
          browser._shouldCloseConnectionOnClose = true;
          browser._connectHeaders = connectHeaders;
          browser.on(_events.Events.Browser.Disconnected, () => this._wrapApiCall(() => closePipe(), true));
          return browser;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${params.timeout}ms exceeded`);
        }
      });
    }
    async connectOverCDP(endpointURLOrOptions, options) {
      if (typeof endpointURLOrOptions === "string")
        return await this._connectOverCDP(endpointURLOrOptions, options);
      const endpointURL = "endpointURL" in endpointURLOrOptions ? endpointURLOrOptions.endpointURL : endpointURLOrOptions.wsEndpoint;
      (0, _utils.assert)(endpointURL, "Cannot connect over CDP without wsEndpoint.");
      return await this.connectOverCDP(endpointURL, endpointURLOrOptions);
    }
    async _connectOverCDP(endpointURL, params = {}) {
      if (this.name() !== "chromium")
        throw new Error("Connecting over CDP is only supported in Chromium.");
      const headers = params.headers ? (0, _utils.headersObjectToArray)(params.headers) : undefined;
      const result = await this._channel.connectOverCDP({
        endpointURL,
        headers,
        slowMo: params.slowMo,
        timeout: params.timeout
      });
      const browser = _browser3.Browser.from(result.browser);
      this._didLaunchBrowser(browser, {}, params.logger);
      if (result.defaultContext)
        await this._didCreateContext(_browserContext.BrowserContext.from(result.defaultContext), {}, {}, params.logger);
      return browser;
    }
    _didLaunchBrowser(browser, browserOptions, logger) {
      browser._browserType = this;
      browser._options = browserOptions;
      browser._logger = logger;
    }
    async _didCreateContext(context, contextOptions, browserOptions, logger) {
      context._logger = logger;
      context._browserType = this;
      this._contexts.add(context);
      context._setOptions(contextOptions, browserOptions);
      if (this._defaultContextTimeout !== undefined)
        context.setDefaultTimeout(this._defaultContextTimeout);
      if (this._defaultContextNavigationTimeout !== undefined)
        context.setDefaultNavigationTimeout(this._defaultContextNavigationTimeout);
      await this._instrumentation.runAfterCreateBrowserContext(context);
    }
    async _willCloseContext(context) {
      this._contexts.delete(context);
      await this._instrumentation.runBeforeCloseBrowserContext(context);
    }
  }
  exports.BrowserType = BrowserType;
});

// node_modules/playwright-core/lib/client/android.js
var require_android2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidWebView = exports.AndroidSocket = exports.AndroidInput = exports.AndroidDevice = exports.Android = undefined;
  var _fs = _interopRequireDefault(__require("fs"));
  var _utils = require_utils();
  var _events = require_events2();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _timeoutSettings = require_timeoutSettings();
  var _waiter = require_waiter();
  var _events2 = __require("events");
  var _connection = require_connection();
  var _errors = require_errors2();
  var _timeoutRunner = require_timeoutRunner();
  var _Symbol$asyncDispose;
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  class Android extends _channelOwner.ChannelOwner {
    static from(android) {
      return android._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = undefined;
      this._serverLauncher = undefined;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    async devices(options = {}) {
      const {
        devices
      } = await this._channel.devices(options);
      return devices.map((d) => AndroidDevice.from(d));
    }
    async launchServer(options = {}) {
      if (!this._serverLauncher)
        throw new Error("Launching server is not supported");
      return await this._serverLauncher.launchServer(options);
    }
    async connect(wsEndpoint, options = {}) {
      return await this._wrapApiCall(async () => {
        const deadline = options.timeout ? (0, _utils.monotonicTime)() + options.timeout : 0;
        const headers = {
          "x-playwright-browser": "android",
          ...options.headers
        };
        const localUtils = this._connection.localUtils();
        const connectParams = {
          wsEndpoint,
          headers,
          slowMo: options.slowMo,
          timeout: options.timeout
        };
        const {
          pipe
        } = await localUtils._channel.connect(connectParams);
        const closePipe = () => pipe.close().catch(() => {
        });
        const connection = new _connection.Connection(localUtils, this._instrumentation);
        connection.markAsRemote();
        connection.on("close", closePipe);
        let device;
        let closeError;
        const onPipeClosed = () => {
          var _device;
          (_device = device) === null || _device === undefined || _device._didClose();
          connection.close(closeError);
        };
        pipe.on("closed", onPipeClosed);
        connection.onmessage = (message) => pipe.send({
          message
        }).catch(onPipeClosed);
        pipe.on("message", ({
          message
        }) => {
          try {
            connection.dispatch(message);
          } catch (e) {
            closeError = String(e);
            closePipe();
          }
        });
        const result = await (0, _timeoutRunner.raceAgainstDeadline)(async () => {
          const playwright = await connection.initializePlaywright();
          if (!playwright._initializer.preConnectedAndroidDevice) {
            closePipe();
            throw new Error("Malformed endpoint. Did you use Android.launchServer method?");
          }
          device = AndroidDevice.from(playwright._initializer.preConnectedAndroidDevice);
          device._shouldCloseConnectionOnClose = true;
          device.on(_events.Events.AndroidDevice.Close, closePipe);
          return device;
        }, deadline);
        if (!result.timedOut) {
          return result.result;
        } else {
          closePipe();
          throw new Error(`Timeout ${options.timeout}ms exceeded`);
        }
      });
    }
  }
  exports.Android = Android;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class AndroidDevice extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._timeoutSettings = undefined;
      this._webViews = new Map;
      this._shouldCloseConnectionOnClose = false;
      this.input = undefined;
      this.input = new AndroidInput(this);
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings(parent._timeoutSettings);
      this._channel.on("webViewAdded", ({
        webView
      }) => this._onWebViewAdded(webView));
      this._channel.on("webViewRemoved", ({
        socketName
      }) => this._onWebViewRemoved(socketName));
      this._channel.on("close", () => this._didClose());
    }
    _onWebViewAdded(webView) {
      const view = new AndroidWebView(this, webView);
      this._webViews.set(webView.socketName, view);
      this.emit(_events.Events.AndroidDevice.WebView, view);
    }
    _onWebViewRemoved(socketName) {
      const view = this._webViews.get(socketName);
      this._webViews.delete(socketName);
      if (view)
        view.emit(_events.Events.AndroidWebView.Close);
    }
    setDefaultTimeout(timeout) {
      this._timeoutSettings.setDefaultTimeout(timeout);
      this._channel.setDefaultTimeoutNoReply({
        timeout
      });
    }
    serial() {
      return this._initializer.serial;
    }
    model() {
      return this._initializer.model;
    }
    webViews() {
      return [...this._webViews.values()];
    }
    async webView(selector, options) {
      const predicate = (v) => {
        if (selector.pkg)
          return v.pkg() === selector.pkg;
        if (selector.socketName)
          return v._socketName() === selector.socketName;
        return false;
      };
      const webView = [...this._webViews.values()].find(predicate);
      if (webView)
        return webView;
      return await this.waitForEvent("webview", {
        ...options,
        predicate
      });
    }
    async wait(selector, options) {
      await this._channel.wait({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async fill(selector, text, options) {
      await this._channel.fill({
        selector: toSelectorChannel(selector),
        text,
        ...options
      });
    }
    async press(selector, key, options) {
      await this.tap(selector, options);
      await this.input.press(key);
    }
    async tap(selector, options) {
      await this._channel.tap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async drag(selector, dest, options) {
      await this._channel.drag({
        selector: toSelectorChannel(selector),
        dest,
        ...options
      });
    }
    async fling(selector, direction, options) {
      await this._channel.fling({
        selector: toSelectorChannel(selector),
        direction,
        ...options
      });
    }
    async longTap(selector, options) {
      await this._channel.longTap({
        selector: toSelectorChannel(selector),
        ...options
      });
    }
    async pinchClose(selector, percent, options) {
      await this._channel.pinchClose({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async pinchOpen(selector, percent, options) {
      await this._channel.pinchOpen({
        selector: toSelectorChannel(selector),
        percent,
        ...options
      });
    }
    async scroll(selector, direction, percent, options) {
      await this._channel.scroll({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async swipe(selector, direction, percent, options) {
      await this._channel.swipe({
        selector: toSelectorChannel(selector),
        direction,
        percent,
        ...options
      });
    }
    async info(selector) {
      return (await this._channel.info({
        selector: toSelectorChannel(selector)
      })).info;
    }
    async screenshot(options = {}) {
      const {
        binary
      } = await this._channel.screenshot();
      if (options.path)
        await _fs.default.promises.writeFile(options.path, binary);
      return binary;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close() {
      try {
        if (this._shouldCloseConnectionOnClose)
          this._connection.close();
        else
          await this._channel.close();
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    _didClose() {
      this.emit(_events.Events.AndroidDevice.Close, this);
    }
    async shell(command) {
      const {
        result
      } = await this._channel.shell({
        command
      });
      return result;
    }
    async open(command) {
      return AndroidSocket.from((await this._channel.open({
        command
      })).socket);
    }
    async installApk(file, options) {
      await this._channel.installApk({
        file: await loadFile(file),
        args: options && options.args
      });
    }
    async push(file, path, options) {
      await this._channel.push({
        file: await loadFile(file),
        path,
        mode: options ? options.mode : undefined
      });
    }
    async launchBrowser(options = {}) {
      const contextOptions = await (0, _browserContext.prepareBrowserContextParams)(options);
      const result = await this._channel.launchBrowser(contextOptions);
      const context = _browserContext.BrowserContext.from(result.context);
      context._setOptions(contextOptions, {});
      return context;
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.AndroidDevice.Close)
          waiter.rejectOnEvent(this, _events.Events.AndroidDevice.Close, () => new _errors.TargetClosedError);
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
  }
  exports.AndroidDevice = AndroidDevice;

  class AndroidSocket extends _channelOwner.ChannelOwner {
    static from(androidDevice) {
      return androidDevice._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._channel.on("data", ({
        data
      }) => this.emit(_events.Events.AndroidSocket.Data, data));
      this._channel.on("close", () => this.emit(_events.Events.AndroidSocket.Close));
    }
    async write(data) {
      await this._channel.write({
        data
      });
    }
    async close() {
      await this._channel.close();
    }
    async[Symbol.asyncDispose]() {
      await this.close();
    }
  }
  exports.AndroidSocket = AndroidSocket;
  async function loadFile(file) {
    if ((0, _utils.isString)(file))
      return await _fs.default.promises.readFile(file);
    return file;
  }

  class AndroidInput {
    constructor(device) {
      this._device = undefined;
      this._device = device;
    }
    async type(text) {
      await this._device._channel.inputType({
        text
      });
    }
    async press(key) {
      await this._device._channel.inputPress({
        key
      });
    }
    async tap(point) {
      await this._device._channel.inputTap({
        point
      });
    }
    async swipe(from, segments, steps) {
      await this._device._channel.inputSwipe({
        segments,
        steps
      });
    }
    async drag(from, to, steps) {
      await this._device._channel.inputDrag({
        from,
        to,
        steps
      });
    }
  }
  exports.AndroidInput = AndroidInput;
  function toSelectorChannel(selector) {
    const {
      checkable,
      checked,
      clazz,
      clickable,
      depth,
      desc,
      enabled,
      focusable,
      focused,
      hasChild,
      hasDescendant,
      longClickable,
      pkg,
      res,
      scrollable,
      selected,
      text
    } = selector;
    const toRegex = (value) => {
      if (value === undefined)
        return;
      if ((0, _utils.isRegExp)(value))
        return value.source;
      return "^" + value.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d") + "$";
    };
    return {
      checkable,
      checked,
      clazz: toRegex(clazz),
      pkg: toRegex(pkg),
      desc: toRegex(desc),
      res: toRegex(res),
      text: toRegex(text),
      clickable,
      depth,
      enabled,
      focusable,
      focused,
      hasChild: hasChild ? {
        selector: toSelectorChannel(hasChild.selector)
      } : undefined,
      hasDescendant: hasDescendant ? {
        selector: toSelectorChannel(hasDescendant.selector),
        maxDepth: hasDescendant.maxDepth
      } : undefined,
      longClickable,
      scrollable,
      selected
    };
  }

  class AndroidWebView extends _events2.EventEmitter {
    constructor(device, data) {
      super();
      this._device = undefined;
      this._data = undefined;
      this._pagePromise = undefined;
      this._device = device;
      this._data = data;
    }
    pid() {
      return this._data.pid;
    }
    pkg() {
      return this._data.pkg;
    }
    _socketName() {
      return this._data.socketName;
    }
    async page() {
      if (!this._pagePromise)
        this._pagePromise = this._fetchPage();
      return await this._pagePromise;
    }
    async _fetchPage() {
      const {
        context
      } = await this._device._channel.connectToWebView({
        socketName: this._data.socketName
      });
      return _browserContext.BrowserContext.from(context).pages()[0];
    }
  }
  exports.AndroidWebView = AndroidWebView;
});

// node_modules/playwright-core/lib/client/electron.js
var require_electron3 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ElectronApplication = exports.Electron = undefined;
  var _timeoutSettings = require_timeoutSettings();
  var _browserContext = require_browserContext2();
  var _channelOwner = require_channelOwner();
  var _clientHelper = require_clientHelper();
  var _events = require_events2();
  var _jsHandle = require_jsHandle();
  var _consoleMessage = require_consoleMessage();
  var _waiter = require_waiter();
  var _errors = require_errors2();
  var _Symbol$asyncDispose;

  class Electron extends _channelOwner.ChannelOwner {
    static from(electron) {
      return electron._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    async launch(options = {}) {
      const params = {
        ...await (0, _browserContext.prepareBrowserContextParams)(options),
        env: (0, _clientHelper.envObjectToArray)(options.env ? options.env : process.env),
        tracesDir: options.tracesDir
      };
      const app = ElectronApplication.from((await this._channel.launch(params)).electronApplication);
      app._context._setOptions(params, options);
      return app;
    }
  }
  exports.Electron = Electron;
  _Symbol$asyncDispose = Symbol.asyncDispose;

  class ElectronApplication extends _channelOwner.ChannelOwner {
    static from(electronApplication) {
      return electronApplication._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this._context = undefined;
      this._windows = new Set;
      this._timeoutSettings = new _timeoutSettings.TimeoutSettings;
      this._context = _browserContext.BrowserContext.from(initializer.context);
      for (const page of this._context._pages)
        this._onPage(page);
      this._context.on(_events.Events.BrowserContext.Page, (page) => this._onPage(page));
      this._channel.on("close", () => {
        this.emit(_events.Events.ElectronApplication.Close);
      });
      this._channel.on("console", (event) => this.emit(_events.Events.ElectronApplication.Console, new _consoleMessage.ConsoleMessage(event)));
      this._setEventToSubscriptionMapping(new Map([[_events.Events.ElectronApplication.Console, "console"]]));
    }
    process() {
      return this._toImpl().process();
    }
    _onPage(page) {
      this._windows.add(page);
      this.emit(_events.Events.ElectronApplication.Window, page);
      page.once(_events.Events.Page.Close, () => this._windows.delete(page));
    }
    windows() {
      return [...this._windows];
    }
    async firstWindow(options) {
      if (this._windows.size)
        return this._windows.values().next().value;
      return await this.waitForEvent("window", options);
    }
    context() {
      return this._context;
    }
    async[_Symbol$asyncDispose]() {
      await this.close();
    }
    async close() {
      try {
        await this._context.close();
      } catch (e) {
        if ((0, _errors.isTargetClosedError)(e))
          return;
        throw e;
      }
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
      return await this._wrapApiCall(async () => {
        const timeout = this._timeoutSettings.timeout(typeof optionsOrPredicate === "function" ? {} : optionsOrPredicate);
        const predicate = typeof optionsOrPredicate === "function" ? optionsOrPredicate : optionsOrPredicate.predicate;
        const waiter = _waiter.Waiter.createForEvent(this, event);
        waiter.rejectOnTimeout(timeout, `Timeout ${timeout}ms exceeded while waiting for event "${event}"`);
        if (event !== _events.Events.ElectronApplication.Close)
          waiter.rejectOnEvent(this, _events.Events.ElectronApplication.Close, () => new _errors.TargetClosedError);
        const result = await waiter.waitForEvent(this, event, predicate);
        waiter.dispose();
        return result;
      });
    }
    async browserWindow(page) {
      const result = await this._channel.browserWindow({
        page: page._channel
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
    async evaluate(pageFunction, arg) {
      const result = await this._channel.evaluateExpression({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return (0, _jsHandle.parseResult)(result.value);
    }
    async evaluateHandle(pageFunction, arg) {
      const result = await this._channel.evaluateExpressionHandle({
        expression: String(pageFunction),
        isFunction: typeof pageFunction === "function",
        arg: (0, _jsHandle.serializeArgument)(arg)
      });
      return _jsHandle.JSHandle.from(result.handle);
    }
  }
  exports.ElectronApplication = ElectronApplication;
});

// node_modules/playwright-core/lib/client/selectors.js
var require_selectors2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SelectorsOwner = exports.Selectors = undefined;
  var _clientHelper = require_clientHelper();
  var _channelOwner = require_channelOwner();
  var _locator = require_locator();

  class Selectors {
    constructor() {
      this._channels = new Set;
      this._registrations = [];
    }
    async register(name, script, options = {}) {
      const source = await (0, _clientHelper.evaluationScript)(script, undefined, false);
      const params = {
        ...options,
        name,
        source
      };
      for (const channel of this._channels)
        await channel._channel.register(params);
      this._registrations.push(params);
    }
    setTestIdAttribute(attributeName) {
      (0, _locator.setTestIdAttribute)(attributeName);
      for (const channel of this._channels)
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: attributeName
        }).catch(() => {
        });
    }
    _addChannel(channel) {
      this._channels.add(channel);
      for (const params of this._registrations) {
        channel._channel.register(params).catch(() => {
        });
        channel._channel.setTestIdAttributeName({
          testIdAttributeName: (0, _locator.testIdAttributeName)()
        }).catch(() => {
        });
      }
    }
    _removeChannel(channel) {
      this._channels.delete(channel);
    }
  }
  exports.Selectors = Selectors;

  class SelectorsOwner extends _channelOwner.ChannelOwner {
    static from(browser) {
      return browser._object;
    }
  }
  exports.SelectorsOwner = SelectorsOwner;
});

// node_modules/playwright-core/lib/client/playwright.js
var require_playwright2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Playwright = undefined;
  var _errors = require_errors2();
  var _android = require_android2();
  var _browserType = require_browserType2();
  var _channelOwner = require_channelOwner();
  var _electron = require_electron3();
  var _fetch = require_fetch2();
  var _selectors = require_selectors2();

  class Playwright extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      var _this$_connection$loc, _this$_connection$loc2;
      super(parent, type, guid, initializer);
      this._android = undefined;
      this._electron = undefined;
      this._bidiChromium = undefined;
      this._bidiFirefox = undefined;
      this.chromium = undefined;
      this.firefox = undefined;
      this.webkit = undefined;
      this.devices = undefined;
      this.selectors = undefined;
      this.request = undefined;
      this.errors = undefined;
      this.request = new _fetch.APIRequest(this);
      this.chromium = _browserType.BrowserType.from(initializer.chromium);
      this.chromium._playwright = this;
      this.firefox = _browserType.BrowserType.from(initializer.firefox);
      this.firefox._playwright = this;
      this.webkit = _browserType.BrowserType.from(initializer.webkit);
      this.webkit._playwright = this;
      this._android = _android.Android.from(initializer.android);
      this._electron = _electron.Electron.from(initializer.electron);
      this._bidiChromium = _browserType.BrowserType.from(initializer.bidiChromium);
      this._bidiChromium._playwright = this;
      this._bidiFirefox = _browserType.BrowserType.from(initializer.bidiFirefox);
      this._bidiFirefox._playwright = this;
      this.devices = (_this$_connection$loc = (_this$_connection$loc2 = this._connection.localUtils()) === null || _this$_connection$loc2 === undefined ? undefined : _this$_connection$loc2.devices) !== null && _this$_connection$loc !== undefined ? _this$_connection$loc : {};
      this.selectors = new _selectors.Selectors;
      this.errors = {
        TimeoutError: _errors.TimeoutError
      };
      const selectorsOwner = _selectors.SelectorsOwner.from(initializer.selectors);
      this.selectors._addChannel(selectorsOwner);
      this._connection.on("close", () => {
        this.selectors._removeChannel(selectorsOwner);
      });
      global._playwrightInstance = this;
    }
    _setSelectors(selectors) {
      const selectorsOwner = _selectors.SelectorsOwner.from(this._initializer.selectors);
      this.selectors._removeChannel(selectorsOwner);
      this.selectors = selectors;
      this.selectors._addChannel(selectorsOwner);
    }
    static from(channel) {
      return channel._object;
    }
  }
  exports.Playwright = Playwright;
});

// node_modules/playwright-core/lib/client/jsonPipe.js
var require_jsonPipe = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.JsonPipe = undefined;
  var _channelOwner = require_channelOwner();

  class JsonPipe extends _channelOwner.ChannelOwner {
    static from(jsonPipe) {
      return jsonPipe._object;
    }
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
    }
    channel() {
      return this._channel;
    }
  }
  exports.JsonPipe = JsonPipe;
});

// node_modules/playwright-core/lib/client/localUtils.js
var require_localUtils = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.LocalUtils = undefined;
  var _channelOwner = require_channelOwner();

  class LocalUtils extends _channelOwner.ChannelOwner {
    constructor(parent, type, guid, initializer) {
      super(parent, type, guid, initializer);
      this.devices = undefined;
      this.markAsInternalType();
      this.devices = {};
      for (const {
        name,
        descriptor
      } of initializer.deviceDescriptors)
        this.devices[name] = descriptor;
    }
  }
  exports.LocalUtils = LocalUtils;
});

// node_modules/playwright-core/lib/client/clientInstrumentation.js
var require_clientInstrumentation = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInstrumentation = createInstrumentation;
  function createInstrumentation() {
    const listeners = [];
    return new Proxy({}, {
      get: (obj, prop) => {
        if (typeof prop !== "string")
          return obj[prop];
        if (prop === "addListener")
          return (listener) => listeners.push(listener);
        if (prop === "removeListener")
          return (listener) => listeners.splice(listeners.indexOf(listener), 1);
        if (prop === "removeAllListeners")
          return () => listeners.splice(0, listeners.length);
        if (prop.startsWith("run")) {
          return async (...params) => {
            for (const listener of listeners) {
              var _prop, _ref;
              await ((_prop = (_ref = listener)[prop]) === null || _prop === undefined ? undefined : _prop.call(_ref, ...params));
            }
          };
        }
        if (prop.startsWith("on")) {
          return (...params) => {
            for (const listener of listeners) {
              var _prop2, _ref2;
              (_prop2 = (_ref2 = listener)[prop]) === null || _prop2 === undefined || _prop2.call(_ref2, ...params);
            }
          };
        }
        return obj[prop];
      }
    });
  }
});

// node_modules/playwright-core/lib/client/connection.js
var require_connection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Connection = undefined;
  var _browser = require_browser2();
  var _browserContext = require_browserContext2();
  var _browserType = require_browserType2();
  var _channelOwner = require_channelOwner();
  var _elementHandle = require_elementHandle();
  var _frame = require_frame();
  var _jsHandle = require_jsHandle();
  var _network = require_network3();
  var _page = require_page2();
  var _worker = require_worker();
  var _dialog = require_dialog2();
  var _errors = require_errors2();
  var _cdpSession = require_cdpSession();
  var _playwright = require_playwright2();
  var _electron = require_electron3();
  var _stream = require_stream();
  var _writableStream = require_writableStream();
  var _debugLogger = require_debugLogger();
  var _selectors = require_selectors2();
  var _android = require_android2();
  var _artifact = require_artifact2();
  var _events = __require("events");
  var _jsonPipe = require_jsonPipe();
  var _fetch = require_fetch2();
  var _localUtils = require_localUtils();
  var _tracing = require_tracing2();
  var _validator = require_validator();
  var _clientInstrumentation = require_clientInstrumentation();
  var _utils = require_utils();

  class Root extends _channelOwner.ChannelOwner {
    constructor(connection) {
      super(connection, "Root", "", {});
    }
    async initialize() {
      return _playwright.Playwright.from((await this._channel.initialize({
        sdkLanguage: "javascript"
      })).playwright);
    }
  }

  class DummyChannelOwner extends _channelOwner.ChannelOwner {
  }

  class Connection extends _events.EventEmitter {
    constructor(localUtils, instrumentation) {
      super();
      this._objects = new Map;
      this.onmessage = (message) => {
      };
      this._lastId = 0;
      this._callbacks = new Map;
      this._rootObject = undefined;
      this._closedError = undefined;
      this._isRemote = false;
      this._localUtils = undefined;
      this._rawBuffers = false;
      this.toImpl = undefined;
      this._tracingCount = 0;
      this._instrumentation = undefined;
      this._rootObject = new Root(this);
      this._localUtils = localUtils;
      this._instrumentation = instrumentation || (0, _clientInstrumentation.createInstrumentation)();
    }
    markAsRemote() {
      this._isRemote = true;
    }
    isRemote() {
      return this._isRemote;
    }
    useRawBuffers() {
      this._rawBuffers = true;
    }
    rawBuffers() {
      return this._rawBuffers;
    }
    localUtils() {
      return this._localUtils;
    }
    async initializePlaywright() {
      return await this._rootObject.initialize();
    }
    getObjectWithKnownName(guid) {
      return this._objects.get(guid);
    }
    setIsTracing(isTracing) {
      if (isTracing)
        this._tracingCount++;
      else
        this._tracingCount--;
    }
    async sendMessageToServer(object, method, params, apiName, frames, stepId) {
      var _this$_localUtils;
      if (this._closedError)
        throw this._closedError;
      if (object._wasCollected)
        throw new Error("The object has been collected to prevent unbounded heap growth.");
      const guid = object._guid;
      const type = object._type;
      const id = ++this._lastId;
      const message = {
        id,
        guid,
        method,
        params
      };
      if (_debugLogger.debugLogger.isEnabled("channel")) {
        _debugLogger.debugLogger.log("channel", "SEND> " + JSON.stringify(message));
      }
      const location2 = frames[0] ? {
        file: frames[0].file,
        line: frames[0].line,
        column: frames[0].column
      } : undefined;
      const metadata = {
        apiName,
        location: location2,
        internal: !apiName,
        stepId
      };
      if (this._tracingCount && frames && type !== "LocalUtils")
        (_this$_localUtils = this._localUtils) === null || _this$_localUtils === undefined || _this$_localUtils._channel.addStackToTracingNoReply({
          callData: {
            stack: frames,
            id
          }
        }).catch(() => {
        });
      _utils.zones.exitZones(() => this.onmessage({
        ...message,
        metadata
      }));
      return await new Promise((resolve, reject) => this._callbacks.set(id, {
        resolve,
        reject,
        apiName,
        type,
        method
      }));
    }
    dispatch(message) {
      if (this._closedError)
        return;
      const {
        id,
        guid,
        method,
        params,
        result,
        error,
        log
      } = message;
      if (id) {
        if (_debugLogger.debugLogger.isEnabled("channel"))
          _debugLogger.debugLogger.log("channel", "<RECV " + JSON.stringify(message));
        const callback = this._callbacks.get(id);
        if (!callback)
          throw new Error(`Cannot find command to respond: ${id}`);
        this._callbacks.delete(id);
        if (error && !result) {
          const parsedError = (0, _errors.parseError)(error);
          (0, _utils.rewriteErrorMessage)(parsedError, parsedError.message + (0, _utils.formatCallLog)(log));
          callback.reject(parsedError);
        } else {
          const validator2 = (0, _validator.findValidator)(callback.type, callback.method, "Result");
          callback.resolve(validator2(result, "", {
            tChannelImpl: this._tChannelImplFromWire.bind(this),
            binary: this._rawBuffers ? "buffer" : "fromBase64"
          }));
        }
        return;
      }
      if (_debugLogger.debugLogger.isEnabled("channel"))
        _debugLogger.debugLogger.log("channel", "<EVENT " + JSON.stringify(message));
      if (method === "__create__") {
        this._createRemoteObject(guid, params.type, params.guid, params.initializer);
        return;
      }
      const object = this._objects.get(guid);
      if (!object)
        throw new Error(`Cannot find object to "${method}": ${guid}`);
      if (method === "__adopt__") {
        const child = this._objects.get(params.guid);
        if (!child)
          throw new Error(`Unknown new child: ${params.guid}`);
        object._adopt(child);
        return;
      }
      if (method === "__dispose__") {
        object._dispose(params.reason);
        return;
      }
      const validator = (0, _validator.findValidator)(object._type, method, "Event");
      object._channel.emit(method, validator(params, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      }));
    }
    close(cause) {
      if (this._closedError)
        return;
      this._closedError = new _errors.TargetClosedError(cause);
      for (const callback of this._callbacks.values())
        callback.reject(this._closedError);
      this._callbacks.clear();
      this.emit("close");
    }
    _tChannelImplFromWire(names, arg, path, context) {
      if (arg && typeof arg === "object" && typeof arg.guid === "string") {
        const object = this._objects.get(arg.guid);
        if (!object)
          throw new Error(`Object with guid ${arg.guid} was not bound in the connection`);
        if (names !== "*" && !names.includes(object._type))
          throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
        return object._channel;
      }
      throw new _validator.ValidationError(`${path}: expected channel ${names.toString()}`);
    }
    _createRemoteObject(parentGuid, type, guid, initializer) {
      const parent = this._objects.get(parentGuid);
      if (!parent)
        throw new Error(`Cannot find parent object ${parentGuid} to create ${guid}`);
      let result;
      const validator = (0, _validator.findValidator)(type, "", "Initializer");
      initializer = validator(initializer, "", {
        tChannelImpl: this._tChannelImplFromWire.bind(this),
        binary: this._rawBuffers ? "buffer" : "fromBase64"
      });
      switch (type) {
        case "Android":
          result = new _android.Android(parent, type, guid, initializer);
          break;
        case "AndroidSocket":
          result = new _android.AndroidSocket(parent, type, guid, initializer);
          break;
        case "AndroidDevice":
          result = new _android.AndroidDevice(parent, type, guid, initializer);
          break;
        case "APIRequestContext":
          result = new _fetch.APIRequestContext(parent, type, guid, initializer);
          break;
        case "Artifact":
          result = new _artifact.Artifact(parent, type, guid, initializer);
          break;
        case "BindingCall":
          result = new _page.BindingCall(parent, type, guid, initializer);
          break;
        case "Browser":
          result = new _browser.Browser(parent, type, guid, initializer);
          break;
        case "BrowserContext":
          result = new _browserContext.BrowserContext(parent, type, guid, initializer);
          break;
        case "BrowserType":
          result = new _browserType.BrowserType(parent, type, guid, initializer);
          break;
        case "CDPSession":
          result = new _cdpSession.CDPSession(parent, type, guid, initializer);
          break;
        case "Dialog":
          result = new _dialog.Dialog(parent, type, guid, initializer);
          break;
        case "Electron":
          result = new _electron.Electron(parent, type, guid, initializer);
          break;
        case "ElectronApplication":
          result = new _electron.ElectronApplication(parent, type, guid, initializer);
          break;
        case "ElementHandle":
          result = new _elementHandle.ElementHandle(parent, type, guid, initializer);
          break;
        case "Frame":
          result = new _frame.Frame(parent, type, guid, initializer);
          break;
        case "JSHandle":
          result = new _jsHandle.JSHandle(parent, type, guid, initializer);
          break;
        case "JsonPipe":
          result = new _jsonPipe.JsonPipe(parent, type, guid, initializer);
          break;
        case "LocalUtils":
          result = new _localUtils.LocalUtils(parent, type, guid, initializer);
          if (!this._localUtils)
            this._localUtils = result;
          break;
        case "Page":
          result = new _page.Page(parent, type, guid, initializer);
          break;
        case "Playwright":
          result = new _playwright.Playwright(parent, type, guid, initializer);
          break;
        case "Request":
          result = new _network.Request(parent, type, guid, initializer);
          break;
        case "Response":
          result = new _network.Response(parent, type, guid, initializer);
          break;
        case "Route":
          result = new _network.Route(parent, type, guid, initializer);
          break;
        case "Stream":
          result = new _stream.Stream(parent, type, guid, initializer);
          break;
        case "Selectors":
          result = new _selectors.SelectorsOwner(parent, type, guid, initializer);
          break;
        case "SocksSupport":
          result = new DummyChannelOwner(parent, type, guid, initializer);
          break;
        case "Tracing":
          result = new _tracing.Tracing(parent, type, guid, initializer);
          break;
        case "WebSocket":
          result = new _network.WebSocket(parent, type, guid, initializer);
          break;
        case "WebSocketRoute":
          result = new _network.WebSocketRoute(parent, type, guid, initializer);
          break;
        case "Worker":
          result = new _worker.Worker(parent, type, guid, initializer);
          break;
        case "WritableStream":
          result = new _writableStream.WritableStream(parent, type, guid, initializer);
          break;
        default:
          throw new Error("Missing type " + type);
      }
      return result;
    }
  }
  exports.Connection = Connection;
});

// node_modules/playwright-core/lib/server/dispatchers/debugControllerDispatcher.js
var require_debugControllerDispatcher = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DebugControllerDispatcher = undefined;
  var _utils = require_utils();
  var _debugController = require_debugController();
  var _dispatcher = require_dispatcher();

  class DebugControllerDispatcher extends _dispatcher.Dispatcher {
    constructor(connection, debugController) {
      super(connection, debugController, "DebugController", {});
      this._type_DebugController = undefined;
      this._listeners = undefined;
      this._type_DebugController = true;
      this._listeners = [_utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.StateChanged, (params) => {
        this._dispatchEvent("stateChanged", params);
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.InspectRequested, ({
        selector,
        locator
      }) => {
        this._dispatchEvent("inspectRequested", {
          selector,
          locator
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SourceChanged, ({
        text,
        header,
        footer,
        actions
      }) => {
        this._dispatchEvent("sourceChanged", {
          text,
          header,
          footer,
          actions
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.Paused, ({
        paused
      }) => {
        this._dispatchEvent("paused", {
          paused
        });
      }), _utils.eventsHelper.addEventListener(this._object, _debugController.DebugController.Events.SetModeRequested, ({
        mode
      }) => {
        this._dispatchEvent("setModeRequested", {
          mode
        });
      })];
    }
    async initialize(params) {
      this._object.initialize(params.codegenId, params.sdkLanguage);
    }
    async setReportStateChanged(params) {
      this._object.setReportStateChanged(params.enabled);
    }
    async resetForReuse() {
      await this._object.resetForReuse();
    }
    async navigate(params) {
      await this._object.navigate(params.url);
    }
    async setRecorderMode(params) {
      await this._object.setRecorderMode(params);
    }
    async highlight(params) {
      await this._object.highlight(params);
    }
    async hideHighlight() {
      await this._object.hideHighlight();
    }
    async resume() {
      await this._object.resume();
    }
    async kill() {
      await this._object.kill();
    }
    async closeAllBrowsers() {
      await this._object.closeAllBrowsers();
    }
    _onDispose() {
      _utils.eventsHelper.removeEventListeners(this._listeners);
      this._object.dispose();
    }
  }
  exports.DebugControllerDispatcher = DebugControllerDispatcher;
});

// node_modules/playwright-core/lib/remote/playwrightConnection.js
var require_playwrightConnection = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightConnection = undefined;
  var _server = require_server();
  var _browser = require_browser();
  var _instrumentation = require_instrumentation();
  var _socksProxy = require_socksProxy();
  var _utils = require_utils();
  var _android = require_android();
  var _debugControllerDispatcher = require_debugControllerDispatcher();
  var _debugLogger = require_debugLogger();

  class PlaywrightConnection {
    constructor(lock, clientType, ws, options, preLaunched, id, onClose) {
      this._ws = undefined;
      this._onClose = undefined;
      this._dispatcherConnection = undefined;
      this._cleanups = [];
      this._id = undefined;
      this._disconnected = false;
      this._preLaunched = undefined;
      this._options = undefined;
      this._root = undefined;
      this._profileName = undefined;
      this._ws = ws;
      this._preLaunched = preLaunched;
      this._options = options;
      options.launchOptions = filterLaunchOptions(options.launchOptions);
      if (clientType === "reuse-browser" || clientType === "pre-launched-browser-or-android")
        (0, _utils.assert)(preLaunched.playwright);
      if (clientType === "pre-launched-browser-or-android")
        (0, _utils.assert)(preLaunched.browser || preLaunched.androidDevice);
      this._onClose = onClose;
      this._id = id;
      this._profileName = `${new Date().toISOString()}-${clientType}`;
      this._dispatcherConnection = new _server.DispatcherConnection;
      this._dispatcherConnection.onmessage = async (message) => {
        await lock;
        if (ws.readyState !== ws.CLOSING) {
          const messageString = JSON.stringify(message);
          if (_debugLogger.debugLogger.isEnabled("server:channel"))
            _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1000} SEND ► ${messageString}`);
          if (_debugLogger.debugLogger.isEnabled("server:metadata"))
            this.logServerMetadata(message, messageString, "SEND");
          ws.send(messageString);
        }
      };
      ws.on("message", async (message) => {
        await lock;
        const messageString = Buffer.from(message).toString();
        const jsonMessage = JSON.parse(messageString);
        if (_debugLogger.debugLogger.isEnabled("server:channel"))
          _debugLogger.debugLogger.log("server:channel", `[${this._id}] ${(0, _utils.monotonicTime)() * 1000} ◀ RECV ${messageString}`);
        if (_debugLogger.debugLogger.isEnabled("server:metadata"))
          this.logServerMetadata(jsonMessage, messageString, "RECV");
        this._dispatcherConnection.dispatch(jsonMessage);
      });
      ws.on("close", () => this._onDisconnect());
      ws.on("error", (error) => this._onDisconnect(error));
      if (clientType === "controller") {
        this._root = this._initDebugControllerMode();
        return;
      }
      this._root = new _server.RootDispatcher(this._dispatcherConnection, async (scope, options2) => {
        await (0, _utils.startProfiling)();
        if (clientType === "reuse-browser")
          return await this._initReuseBrowsersMode(scope);
        if (clientType === "pre-launched-browser-or-android")
          return this._preLaunched.browser ? await this._initPreLaunchedBrowserMode(scope) : await this._initPreLaunchedAndroidMode(scope);
        if (clientType === "launch-browser")
          return await this._initLaunchBrowserMode(scope, options2);
        throw new Error("Unsupported client type: " + clientType);
      });
    }
    async _initLaunchBrowserMode(scope, options) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged launch mode for "${this._options.browserName}"`);
      const playwright = (0, _server.createPlaywright)({
        sdkLanguage: options.sdkLanguage,
        isServer: true
      });
      const ownedSocksProxy = await this._createOwnedSocksProxy(playwright);
      const browser = await playwright[this._options.browserName].launch((0, _instrumentation.serverSideCallMetadata)(), this._options.launchOptions);
      this._cleanups.push(async () => {
        for (const browser2 of playwright.allBrowsers())
          await browser2.close({
            reason: "Connection terminated"
          });
      });
      browser.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      return new _server.PlaywrightDispatcher(scope, playwright, ownedSocksProxy, browser);
    }
    async _initPreLaunchedBrowserMode(scope) {
      var _this$_preLaunched$so;
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (browser) mode`);
      const playwright = this._preLaunched.playwright;
      (_this$_preLaunched$so = this._preLaunched.socksProxy) === null || _this$_preLaunched$so === undefined || _this$_preLaunched$so.setPattern(this._options.socksProxyPattern);
      const browser = this._preLaunched.browser;
      browser.on(_browser.Browser.Events.Disconnected, () => {
        this.close({
          code: 1001,
          reason: "Browser closed"
        });
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, this._preLaunched.socksProxy, browser);
      for (const b of playwright.allBrowsers()) {
        if (b !== browser)
          await b.close({
            reason: "Connection terminated"
          });
      }
      this._cleanups.push(() => playwrightDispatcher.cleanup());
      return playwrightDispatcher;
    }
    async _initPreLaunchedAndroidMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged pre-launched (Android) mode`);
      const playwright = this._preLaunched.playwright;
      const androidDevice = this._preLaunched.androidDevice;
      androidDevice.on(_android.AndroidDevice.Events.Close, () => {
        this.close({
          code: 1001,
          reason: "Android device disconnected"
        });
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, undefined, undefined, androidDevice);
      this._cleanups.push(() => playwrightDispatcher.cleanup());
      return playwrightDispatcher;
    }
    _initDebugControllerMode() {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse controller mode`);
      const playwright = this._preLaunched.playwright;
      return new _debugControllerDispatcher.DebugControllerDispatcher(this._dispatcherConnection, playwright.debugController);
    }
    async _initReuseBrowsersMode(scope) {
      _debugLogger.debugLogger.log("server", `[${this._id}] engaged reuse browsers mode for ${this._options.browserName}`);
      const playwright = this._preLaunched.playwright;
      const requestedOptions = launchOptionsHash(this._options.launchOptions);
      let browser = playwright.allBrowsers().find((b) => {
        if (b.options.name !== this._options.browserName)
          return false;
        const existingOptions = launchOptionsHash(b.options.originalLaunchOptions);
        return existingOptions === requestedOptions;
      });
      for (const b of playwright.allBrowsers()) {
        if (b === browser)
          continue;
        if (b.options.name === this._options.browserName && b.options.channel === this._options.launchOptions.channel)
          await b.close({
            reason: "Connection terminated"
          });
      }
      if (!browser) {
        browser = await playwright[this._options.browserName || "chromium"].launch((0, _instrumentation.serverSideCallMetadata)(), {
          ...this._options.launchOptions,
          headless: !!process.env.PW_DEBUG_CONTROLLER_HEADLESS
        });
        browser.on(_browser.Browser.Events.Disconnected, () => {
          this.close({
            code: 1001,
            reason: "Browser closed"
          });
        });
      }
      this._cleanups.push(async () => {
        for (const browser2 of playwright.allBrowsers()) {
          for (const context of browser2.contexts()) {
            if (!context.pages().length)
              await context.close({
                reason: "Connection terminated"
              });
            else
              await context.stopPendingOperations("Connection closed");
          }
          if (!browser2.contexts())
            await browser2.close({
              reason: "Connection terminated"
            });
        }
      });
      const playwrightDispatcher = new _server.PlaywrightDispatcher(scope, playwright, undefined, browser);
      return playwrightDispatcher;
    }
    async _createOwnedSocksProxy(playwright) {
      if (!this._options.socksProxyPattern)
        return;
      const socksProxy = new _socksProxy.SocksProxy;
      socksProxy.setPattern(this._options.socksProxyPattern);
      playwright.options.socksProxyPort = await socksProxy.listen(0);
      _debugLogger.debugLogger.log("server", `[${this._id}] started socks proxy on port ${playwright.options.socksProxyPort}`);
      this._cleanups.push(() => socksProxy.close());
      return socksProxy;
    }
    async _onDisconnect(error) {
      this._disconnected = true;
      _debugLogger.debugLogger.log("server", `[${this._id}] disconnected. error: ${error}`);
      this._root._dispose();
      _debugLogger.debugLogger.log("server", `[${this._id}] starting cleanup`);
      for (const cleanup of this._cleanups)
        await cleanup().catch(() => {
        });
      await (0, _utils.stopProfiling)(this._profileName);
      this._onClose();
      _debugLogger.debugLogger.log("server", `[${this._id}] finished cleanup`);
    }
    logServerMetadata(message, messageString, direction) {
      const serverLogMetadata = {
        wallTime: Date.now(),
        id: message.id,
        guid: message.guid,
        method: message.method,
        payloadSizeInBytes: Buffer.byteLength(messageString, "utf-8")
      };
      _debugLogger.debugLogger.log("server:metadata", (direction === "SEND" ? "SEND ► " : "◀ RECV ") + JSON.stringify(serverLogMetadata));
    }
    async close(reason) {
      if (this._disconnected)
        return;
      _debugLogger.debugLogger.log("server", `[${this._id}] force closing connection: ${(reason === null || reason === undefined ? undefined : reason.reason) || ""} (${(reason === null || reason === undefined ? undefined : reason.code) || 0})`);
      try {
        this._ws.close(reason === null || reason === undefined ? undefined : reason.code, reason === null || reason === undefined ? undefined : reason.reason);
      } catch (e) {
      }
    }
  }
  exports.PlaywrightConnection = PlaywrightConnection;
  function launchOptionsHash(options) {
    const copy = {
      ...options
    };
    for (const k of Object.keys(copy)) {
      const key = k;
      if (copy[key] === defaultLaunchOptions[key])
        delete copy[key];
    }
    for (const key of optionsThatAllowBrowserReuse)
      delete copy[key];
    return JSON.stringify(copy);
  }
  function filterLaunchOptions(options) {
    return {
      channel: options.channel,
      args: options.args,
      ignoreAllDefaultArgs: options.ignoreAllDefaultArgs,
      ignoreDefaultArgs: options.ignoreDefaultArgs,
      timeout: options.timeout,
      headless: options.headless,
      proxy: options.proxy,
      chromiumSandbox: options.chromiumSandbox,
      firefoxUserPrefs: options.firefoxUserPrefs,
      slowMo: options.slowMo,
      executablePath: (0, _utils.isUnderTest)() ? options.executablePath : undefined
    };
  }
  var defaultLaunchOptions = {
    ignoreAllDefaultArgs: false,
    handleSIGINT: false,
    handleSIGTERM: false,
    handleSIGHUP: false,
    headless: true,
    devtools: false
  };
  var optionsThatAllowBrowserReuse = ["headless", "tracesDir"];
});

// node_modules/playwright-core/lib/remote/playwrightServer.js
var require_playwrightServer = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.PlaywrightServer = undefined;
  var _playwright = require_playwright();
  var _playwrightConnection = require_playwrightConnection();
  var _semaphore = require_semaphore();
  var _debugLogger = require_debugLogger();
  var _utils = require_utils();
  var _wsServer = require_wsServer();

  class PlaywrightServer {
    constructor(options) {
      this._preLaunchedPlaywright = undefined;
      this._options = undefined;
      this._wsServer = undefined;
      this._options = options;
      if (options.preLaunchedBrowser)
        this._preLaunchedPlaywright = options.preLaunchedBrowser.attribution.playwright;
      if (options.preLaunchedAndroidDevice)
        this._preLaunchedPlaywright = options.preLaunchedAndroidDevice._android.attribution.playwright;
      const browserSemaphore = new _semaphore.Semaphore(this._options.maxConnections);
      const controllerSemaphore = new _semaphore.Semaphore(1);
      const reuseBrowserSemaphore = new _semaphore.Semaphore(1);
      this._wsServer = new _wsServer.WSServer({
        onUpgrade: (request, socket) => {
          const uaError = (0, _utils.userAgentVersionMatchesErrorMessage)(request.headers["user-agent"] || "");
          if (uaError)
            return {
              error: `HTTP/${request.httpVersion} 428 Precondition Required\r
\r
${uaError}`
            };
        },
        onHeaders: (headers) => {
          if (process.env.PWTEST_SERVER_WS_HEADERS)
            headers.push(process.env.PWTEST_SERVER_WS_HEADERS);
        },
        onConnection: (request, url, ws, id) => {
          const browserHeader = request.headers["x-playwright-browser"];
          const browserName = url.searchParams.get("browser") || (Array.isArray(browserHeader) ? browserHeader[0] : browserHeader) || null;
          const proxyHeader = request.headers["x-playwright-proxy"];
          const proxyValue = url.searchParams.get("proxy") || (Array.isArray(proxyHeader) ? proxyHeader[0] : proxyHeader);
          const launchOptionsHeader = request.headers["x-playwright-launch-options"] || "";
          const launchOptionsHeaderValue = Array.isArray(launchOptionsHeader) ? launchOptionsHeader[0] : launchOptionsHeader;
          const launchOptionsParam = url.searchParams.get("launch-options");
          let launchOptions = {};
          try {
            launchOptions = JSON.parse(launchOptionsParam || launchOptionsHeaderValue);
          } catch (e) {
          }
          const isExtension = this._options.mode === "extension";
          if (isExtension) {
            if (!this._preLaunchedPlaywright)
              this._preLaunchedPlaywright = (0, _playwright.createPlaywright)({
                sdkLanguage: "javascript",
                isServer: true
              });
          }
          let clientType = "launch-browser";
          let semaphore = browserSemaphore;
          if (isExtension && url.searchParams.has("debug-controller")) {
            clientType = "controller";
            semaphore = controllerSemaphore;
          } else if (isExtension) {
            clientType = "reuse-browser";
            semaphore = reuseBrowserSemaphore;
          } else if (this._options.mode === "launchServer") {
            clientType = "pre-launched-browser-or-android";
            semaphore = browserSemaphore;
          }
          return new _playwrightConnection.PlaywrightConnection(semaphore.acquire(), clientType, ws, {
            socksProxyPattern: proxyValue,
            browserName,
            launchOptions
          }, {
            playwright: this._preLaunchedPlaywright,
            browser: this._options.preLaunchedBrowser,
            androidDevice: this._options.preLaunchedAndroidDevice,
            socksProxy: this._options.preLaunchedSocksProxy
          }, id, () => semaphore.release());
        },
        onClose: async () => {
          _debugLogger.debugLogger.log("server", "closing browsers");
          if (this._preLaunchedPlaywright)
            await Promise.all(this._preLaunchedPlaywright.allBrowsers().map((browser) => browser.close({
              reason: "Playwright Server stopped"
            })));
          _debugLogger.debugLogger.log("server", "closed browsers");
        }
      });
    }
    async listen(port = 0, hostname) {
      return this._wsServer.listen(port, hostname, this._options.path);
    }
    async close() {
      await this._wsServer.close();
    }
  }
  exports.PlaywrightServer = PlaywrightServer;
});

// node_modules/playwright-core/lib/browserServerImpl.js
var require_browserServerImpl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BrowserServerLauncherImpl = undefined;
  var _utilsBundle = require_utilsBundle();
  var _clientHelper = require_clientHelper();
  var _utils = require_utils();
  var _instrumentation = require_instrumentation();
  var _playwright = require_playwright();
  var _playwrightServer = require_playwrightServer();
  var _helper = require_helper();
  var _stackTrace = require_stackTrace();
  var _socksProxy = require_socksProxy();

  class BrowserServerLauncherImpl {
    constructor(browserName) {
      this._browserName = undefined;
      this._browserName = browserName;
    }
    async launchServer(options = {}) {
      const playwright = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      const socksProxy = undefined;
      playwright.options.socksProxyPort = await (socksProxy === null || socksProxy === undefined ? undefined : socksProxy.listen(0));
      const metadata = (0, _instrumentation.serverSideCallMetadata)();
      const browser = await playwright[this._browserName].launch(metadata, {
        ...options,
        ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
        ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
        env: options.env ? (0, _clientHelper.envObjectToArray)(options.env) : undefined
      }, toProtocolLogger(options.logger)).catch((e) => {
        const log = _helper.helper.formatBrowserLogs(metadata.log);
        (0, _stackTrace.rewriteErrorMessage)(e, `${e.message} Failed to launch browser.${log}`);
        throw e;
      });
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
      const server = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: Infinity,
        preLaunchedBrowser: browser,
        preLaunchedSocksProxy: socksProxy
      });
      const wsEndpoint = await server.listen(options.port, options.host);
      const browserServer = new _utilsBundle.ws.EventEmitter;
      browserServer.process = () => browser.options.browserProcess.process;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => browser.options.browserProcess.close();
      browserServer[Symbol.asyncDispose] = browserServer.close;
      browserServer.kill = () => browser.options.browserProcess.kill();
      browserServer._disconnectForTest = () => server.close();
      browserServer._userDataDirForTest = browser._userDataDirForTest;
      browser.options.browserProcess.onclose = (exitCode, signal) => {
        socksProxy === null || socksProxy === undefined || socksProxy.close().catch(() => {
        });
        server.close();
        browserServer.emit("close", exitCode, signal);
      };
      return browserServer;
    }
  }
  exports.BrowserServerLauncherImpl = BrowserServerLauncherImpl;
  function toProtocolLogger(logger) {
    return logger ? (direction, message) => {
      if (logger.isEnabled("protocol", "verbose"))
        logger.log("protocol", "verbose", (direction === "send" ? "SEND ► " : "◀ RECV ") + JSON.stringify(message), [], {});
    } : undefined;
  }
});

// node_modules/playwright-core/lib/androidServerImpl.js
var require_androidServerImpl = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.AndroidServerLauncherImpl = undefined;
  var _utilsBundle = require_utilsBundle();
  var _utils = require_utils();
  var _playwright = require_playwright();
  var _playwrightServer = require_playwrightServer();

  class AndroidServerLauncherImpl {
    async launchServer(options = {}) {
      const playwright = (0, _playwright.createPlaywright)({
        sdkLanguage: "javascript",
        isServer: true
      });
      let devices = await playwright.android.devices({
        host: options.adbHost,
        port: options.adbPort,
        omitDriverInstall: options.omitDriverInstall
      });
      if (devices.length === 0)
        throw new Error("No devices found");
      if (options.deviceSerialNumber) {
        devices = devices.filter((d) => d.serial === options.deviceSerialNumber);
        if (devices.length === 0)
          throw new Error(`No device with serial number '${options.deviceSerialNumber}' not found`);
      }
      if (devices.length > 1)
        throw new Error(`More than one device found. Please specify deviceSerialNumber`);
      const device = devices[0];
      const path = options.wsPath ? options.wsPath.startsWith("/") ? options.wsPath : `/${options.wsPath}` : `/${(0, _utils.createGuid)()}`;
      const server = new _playwrightServer.PlaywrightServer({
        mode: "launchServer",
        path,
        maxConnections: 1,
        preLaunchedAndroidDevice: device
      });
      const wsEndpoint = await server.listen(options.port, options.host);
      const browserServer = new _utilsBundle.ws.EventEmitter;
      browserServer.wsEndpoint = () => wsEndpoint;
      browserServer.close = () => device.close();
      browserServer.kill = () => device.close();
      device.on("close", () => {
        server.close();
        browserServer.emit("close");
      });
      return browserServer;
    }
  }
  exports.AndroidServerLauncherImpl = AndroidServerLauncherImpl;
});

// node_modules/playwright-core/lib/inProcessFactory.js
var require_inProcessFactory = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.createInProcessPlaywright = createInProcessPlaywright;
  var _server = require_server();
  var _connection = require_connection();
  var _browserServerImpl = require_browserServerImpl();
  var _androidServerImpl = require_androidServerImpl();
  function createInProcessPlaywright() {
    const playwright = (0, _server.createPlaywright)({
      sdkLanguage: process.env.PW_LANG_NAME || "javascript"
    });
    const clientConnection = new _connection.Connection(undefined, undefined);
    clientConnection.useRawBuffers();
    const dispatcherConnection = new _server.DispatcherConnection(true);
    dispatcherConnection.onmessage = (message) => clientConnection.dispatch(message);
    clientConnection.onmessage = (message) => dispatcherConnection.dispatch(message);
    const rootScope = new _server.RootDispatcher(dispatcherConnection);
    new _server.PlaywrightDispatcher(rootScope, playwright);
    const playwrightAPI = clientConnection.getObjectWithKnownName("Playwright");
    playwrightAPI.chromium._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("chromium");
    playwrightAPI.firefox._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("firefox");
    playwrightAPI.webkit._serverLauncher = new _browserServerImpl.BrowserServerLauncherImpl("webkit");
    playwrightAPI._android._serverLauncher = new _androidServerImpl.AndroidServerLauncherImpl;
    dispatcherConnection.onmessage = (message) => setImmediate(() => clientConnection.dispatch(message));
    clientConnection.onmessage = (message) => setImmediate(() => dispatcherConnection.dispatch(message));
    clientConnection.toImpl = (x) => x ? dispatcherConnection._dispatchers.get(x._guid)._object : dispatcherConnection._dispatchers.get("");
    playwrightAPI._toImpl = clientConnection.toImpl;
    return playwrightAPI;
  }
});

// node_modules/playwright-core/lib/inprocess.js
var require_inprocess = __commonJS((exports, module) => {
  var _inProcessFactory = require_inProcessFactory();
  module.exports = (0, _inProcessFactory.createInProcessPlaywright)();
});

// node_modules/playwright-core/index.js
var require_playwright_core = __commonJS((exports, module) => {
  var minimumMajorNodeVersion = 14;
  var currentNodeVersion = process.versions.node;
  var semver = currentNodeVersion.split(".");
  var [major] = [+semver[0]];
  if (major < minimumMajorNodeVersion) {
    console.error("You are running Node.js " + currentNodeVersion + `.
` + `Playwright requires Node.js ${minimumMajorNodeVersion} or higher. 
` + "Please update your version of Node.js.");
    process.exit(1);
  }
  module.exports = require_inprocess();
});

// node_modules/decamelize/index.js
var require_decamelize = __commonJS((exports, module) => {
  module.exports = function(str, sep) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    sep = typeof sep === "undefined" ? "_" : sep;
    return str.replace(/([a-z\d])([A-Z])/g, "$1" + sep + "$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g, "$1" + sep + "$2").toLowerCase();
  };
});

// node_modules/camelcase/index.js
var require_camelcase = __commonJS((exports, module) => {
  var UPPERCASE = /[\p{Lu}]/u;
  var LOWERCASE = /[\p{Ll}]/u;
  var LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
  var IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
  var SEPARATORS = /[_.\- ]+/;
  var LEADING_SEPARATORS = new RegExp("^" + SEPARATORS.source);
  var SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, "gu");
  var NUMBERS_AND_IDENTIFIER = new RegExp("\\d+" + IDENTIFIER.source, "gu");
  var preserveCamelCase = (string, toLowerCase, toUpperCase) => {
    let isLastCharLower = false;
    let isLastCharUpper = false;
    let isLastLastCharUpper = false;
    for (let i = 0;i < string.length; i++) {
      const character = string[i];
      if (isLastCharLower && UPPERCASE.test(character)) {
        string = string.slice(0, i) + "-" + string.slice(i);
        isLastCharLower = false;
        isLastLastCharUpper = isLastCharUpper;
        isLastCharUpper = true;
        i++;
      } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
        string = string.slice(0, i - 1) + "-" + string.slice(i - 1);
        isLastLastCharUpper = isLastCharUpper;
        isLastCharUpper = false;
        isLastCharLower = true;
      } else {
        isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
        isLastLastCharUpper = isLastCharUpper;
        isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
      }
    }
    return string;
  };
  var preserveConsecutiveUppercase = (input, toLowerCase) => {
    LEADING_CAPITAL.lastIndex = 0;
    return input.replace(LEADING_CAPITAL, (m1) => toLowerCase(m1));
  };
  var postProcess = (input, toUpperCase) => {
    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
    NUMBERS_AND_IDENTIFIER.lastIndex = 0;
    return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m) => toUpperCase(m));
  };
  var camelCase = (input, options) => {
    if (!(typeof input === "string" || Array.isArray(input))) {
      throw new TypeError("Expected the input to be `string | string[]`");
    }
    options = {
      pascalCase: false,
      preserveConsecutiveUppercase: false,
      ...options
    };
    if (Array.isArray(input)) {
      input = input.map((x) => x.trim()).filter((x) => x.length).join("-");
    } else {
      input = input.trim();
    }
    if (input.length === 0) {
      return "";
    }
    const toLowerCase = options.locale === false ? (string) => string.toLowerCase() : (string) => string.toLocaleLowerCase(options.locale);
    const toUpperCase = options.locale === false ? (string) => string.toUpperCase() : (string) => string.toLocaleUpperCase(options.locale);
    if (input.length === 1) {
      return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
    }
    const hasUpperCase = input !== toLowerCase(input);
    if (hasUpperCase) {
      input = preserveCamelCase(input, toLowerCase, toUpperCase);
    }
    input = input.replace(LEADING_SEPARATORS, "");
    if (options.preserveConsecutiveUppercase) {
      input = preserveConsecutiveUppercase(input, toLowerCase);
    } else {
      input = toLowerCase(input);
    }
    if (options.pascalCase) {
      input = toUpperCase(input.charAt(0)) + input.slice(1);
    }
    return postProcess(input, toUpperCase);
  };
  module.exports = camelCase;
  module.exports.default = camelCase;
});

// node_modules/uuid/wrapper.mjs
var import_dist = __toESM(require_dist(), 1);
var v1 = import_dist.default.v1;
var v3 = import_dist.default.v3;
var v4 = import_dist.default.v4;
var v5 = import_dist.default.v5;
var NIL = import_dist.default.NIL;
var version = import_dist.default.version;
var validate = import_dist.default.validate;
var stringify = import_dist.default.stringify;
var parse = import_dist.default.parse;

// node_modules/playwright-core/index.mjs
var import__ = __toESM(require_playwright_core(), 1);
var chromium = import__.default.chromium;
var firefox = import__.default.firefox;
var webkit = import__.default.webkit;
var selectors = import__.default.selectors;
var devices = import__.default.devices;
var errors = import__.default.errors;
var request = import__.default.request;
var _electron = import__.default._electron;
var _android = import__.default._android;
// src/dom/buildDomTree.ts
var buildDomTree = () => `
(() => {
    // Helper function to check if element is visible
    function isElementVisible(element: Element): boolean {
        if (!element) return false;

        const style = window.getComputedStyle(element);
        const rect = element.getBoundingClientRect();

        return (
            style.display !== "none" &&
            style.visibility !== "hidden" &&
            style.opacity !== "0" &&
            rect.width > 0 &&
            rect.height > 0 &&
            rect.top >= 0 &&
            rect.top <= window.innerHeight
        );
    }

    // Helper function to generate XPath
    function getXPath(element: Element): string {
        if (element.id) {
            return \`//*[@id="\${element.id}"]\`;
        }

        const parts: string[] = [];
        let current: Element | null = element;

        while (current && current.nodeType === Node.ELEMENT_NODE) {
            let index = 0;
            let sibling = current.previousSibling;

            while (sibling) {
                if (
                    sibling.nodeType === Node.ELEMENT_NODE &&
                    (sibling as Element).nodeName === current.nodeName
                ) {
                    index++;
                }
                sibling = sibling.previousSibling;
            }

            const tagName = current.nodeName.toLowerCase();
            const xpathIndex = index > 0 ? \`[\${index + 1}]\` : "";
            parts.unshift(\`\${tagName}\${xpathIndex}\`);

            current = current.parentElement;
        }

        return \`/\${parts.join("/")}\`;
    }

    // Helper function to check if element is interactive
    function isInteractiveElement(element: Element): boolean {
        const interactiveTags = new Set([
            "a",
            "button",
            "input",
            "select",
            "textarea",
            "details",
            "dialog",
            "menu",
            "menuitem",
            "option"
        ]);

        const interactiveRoles = new Set([
            "button",
            "link",
            "checkbox",
            "menuitem",
            "menuitemcheckbox",
            "menuitemradio",
            "option",
            "radio",
            "searchbox",
            "switch",
            "tab"
        ]);

        const tagName = element.tagName.toLowerCase();
        const role = element.getAttribute("role");

        return (
            interactiveTags.has(tagName) ||
            (role && interactiveRoles.has(role)) ||
            element.hasAttribute("onclick") ||
            element.hasAttribute("ng-click") ||
            element.hasAttribute("@click") ||
            element.hasAttribute("v-on:click")
        );
    }

    interface ProcessedNode {
        tagName: string;
        isVisible: boolean;
        isInteractive: boolean;
        xpath: string;
        attributes: Record<string, string>;
        children: ProcessedNode[];
        text?: string;
        shadowRoot: boolean;
        location: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        highlightIndex?: number;
    }

    // Process a DOM node
    function processNode(node: Element, currentIndex: number): ProcessedNode | null {
        if (node.nodeType !== Node.ELEMENT_NODE) {
            return null;
        }

        const isVisible = isElementVisible(node);
        const isInteractive = isInteractiveElement(node);
        const rect = node.getBoundingClientRect();

        const result: ProcessedNode = {
            tagName: node.nodeName.toLowerCase(),
            isVisible,
            isInteractive,
            xpath: getXPath(node),
            attributes: {},
            children: [],
            text: node.textContent?.trim(),
            shadowRoot: !!node.shadowRoot,
            location: {
                x: rect.x,
                y: rect.y,
                width: rect.width,
                height: rect.height
            }
        };

        // Add attributes
        for (const attr of Array.from(node.attributes)) {
            result.attributes[attr.name] = attr.value;
        }

        let nextIndex = currentIndex;

        // Add highlight index for interactive elements
        if (isInteractive && isVisible) {
            result.highlightIndex = nextIndex;
            nextIndex++;
        }

        // Process children
        for (const child of Array.from(node.children)) {
            const childNode = processNode(child, nextIndex);
            if (childNode) {
                result.children.push(childNode);
                if (childNode.highlightIndex) {
                    nextIndex = childNode.highlightIndex + 1;
                }
            }
        }

        return result;
    }

    // Start processing from document root
    return processNode(document.documentElement, 1);
})()`;
function parseEvaluatedTree(evalResult) {
  if (!evalResult || typeof evalResult !== "object") {
    return null;
  }
  const node = evalResult;
  return {
    tagName: String(node.tagName || ""),
    isVisible: Boolean(node.isVisible),
    parent: null,
    xpath: String(node.xpath || ""),
    attributes: node.attributes || {},
    children: Array.isArray(node.children) ? node.children.map((child) => parseEvaluatedTree(child)).filter((child) => child !== null) : [],
    text: node.text,
    isInteractive: Boolean(node.isInteractive),
    shadowRoot: Boolean(node.shadowRoot),
    highlightIndex: typeof node.highlightIndex === "number" ? node.highlightIndex : undefined,
    location: node.location
  };
}

// src/dom/observer.ts
var DEFAULT_QUERY_OPTIONS = {
  waitForVisible: true,
  waitForEnabled: true,
  timeout: 5000,
  includeHidden: false
};

class DOMObserver {
  page;
  constructor(page) {
    this.page = page;
  }
  async getClickableElements(includeHidden = false) {
    const [tree, clickableElements, selectorMap] = await Promise.all([
      this.getDOMTree(),
      this.getClickableElementsList(includeHidden),
      this.getSelectorMap()
    ]);
    return {
      timestamp: Date.now(),
      tree,
      clickableElements,
      selectorMap
    };
  }
  async findElements(selector, options = DEFAULT_QUERY_OPTIONS) {
    const state = await this.getClickableElements(options.includeHidden);
    const elements = state.clickableElements.filter((element) => {
      if (selector.index !== undefined && element.highlightIndex !== selector.index) {
        return false;
      }
      if (selector.xpath && element.xpath !== selector.xpath) {
        return false;
      }
      if (selector.coordinates) {
        const loc = element.location;
        if (!loc)
          return false;
        return loc.x === selector.coordinates.x && loc.y === selector.coordinates.y;
      }
      return true;
    });
    if (options.waitForVisible || options.waitForEnabled) {
      await this.page.waitForFunction((elements2, xpath) => {
        const element = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        if (!element)
          return false;
        const isVisible = element.getBoundingClientRect().height > 0;
        const isEnabled = !element.hasAttribute("disabled");
        return (!options.waitForVisible || isVisible) && (!options.waitForEnabled || isEnabled);
      }, { timeout: options.timeout }, elements.map((e) => e.xpath));
    }
    return elements;
  }
  async getDOMTree() {
    const evalResult = await this.page.evaluate(buildDomTree());
    const tree = parseEvaluatedTree(evalResult);
    if (!tree) {
      throw new Error("Failed to build DOM tree");
    }
    return tree;
  }
  async getClickableElementsList(includeHidden = false) {
    const tree = await this.getDOMTree();
    const clickable = [];
    function traverse(node) {
      if (node.isInteractive && (includeHidden || node.isVisible)) {
        clickable.push(node);
      }
      for (const child of node.children) {
        traverse(child);
      }
    }
    traverse(tree);
    return clickable;
  }
  async getSelectorMap() {
    const elements = await this.getClickableElementsList();
    const map = {};
    for (const el of elements) {
      if (el.highlightIndex !== undefined) {
        map[el.highlightIndex] = el;
      }
    }
    return map;
  }
}

// src/dom/tree-processor.ts
import crypto from "node:crypto";
function hashAttributes(attributes) {
  const attributesString = Object.entries(attributes).map(([key, value]) => `${key}=${value}`).join("");
  return crypto.createHash("sha256").update(attributesString).digest("hex");
}
function parentBranchPathHash(path) {
  const pathString = path.join("/");
  return crypto.createHash("sha256").update(pathString).digest("hex");
}
function getParentBranchPath(element) {
  const parents = [];
  let currentElement = element;
  while (currentElement.parent !== null) {
    parents.push(currentElement);
    currentElement = currentElement.parent;
  }
  parents.reverse();
  return parents.map((parent) => parent.tagName);
}
function hashDOMHistoryElement(element) {
  const branchPathHash = parentBranchPathHash(element.entireParentBranchPath);
  const attributesHash = hashAttributes(element.attributes);
  return {
    branchPathHash,
    attributesHash
  };
}
function hashDOMElement(element) {
  const parentBranchPath = getParentBranchPath(element);
  const branchPathHash = parentBranchPathHash(parentBranchPath);
  const attributesHash = hashAttributes(element.attributes);
  return {
    branchPathHash,
    attributesHash
  };
}
function isDOMElementNode(node) {
  return typeof node === "object" && node !== null && "tagName" in node;
}
function convertDOMElementToHistoryElement(element) {
  const parentBranchPath = getParentBranchPath(element);
  return {
    tagName: element.tagName,
    xpath: element.xpath,
    highlightIndex: element.highlightIndex,
    entireParentBranchPath: parentBranchPath,
    attributes: { ...element.attributes },
    shadowRoot: element.shadowRoot,
    toDict: () => ({
      tag_name: element.tagName,
      xpath: element.xpath,
      highlight_index: element.highlightIndex,
      entire_parent_branch_path: parentBranchPath,
      attributes: element.attributes,
      shadow_root: element.shadowRoot
    })
  };
}
function findHistoryElementInTree(historyElement, tree) {
  const hashedHistoryElement = hashDOMHistoryElement(historyElement);
  function processNode(node) {
    if (node.highlightIndex !== undefined) {
      const hashedNode = hashDOMElement(node);
      if (hashedNode.branchPathHash === hashedHistoryElement.branchPathHash && hashedNode.attributesHash === hashedHistoryElement.attributesHash) {
        return node;
      }
    }
    for (const child of node.children) {
      if (isDOMElementNode(child)) {
        const result = processNode(child);
        if (result) {
          return result;
        }
      }
    }
    return null;
  }
  return processNode(tree);
}

// src/dom/service.ts
var DEFAULT_QUERY_OPTIONS2 = {
  waitForVisible: true,
  waitForEnabled: true,
  timeout: 5000,
  includeHidden: false
};

class DOMService {
  observer;
  constructor(page) {
    this.observer = new DOMObserver(page);
  }
  async getState() {
    const observation = await this.observer.getClickableElements();
    return {
      tree: observation.tree,
      clickableElements: observation.clickableElements,
      selectorMap: observation.selectorMap
    };
  }
  async findElements(selector, options = {}) {
    const mergedOptions = { ...DEFAULT_QUERY_OPTIONS2, ...options };
    return this.observer.findElements(selector, mergedOptions);
  }
  async findElement(selector, options = {}) {
    const elements = await this.findElements(selector, options);
    return elements[0] || null;
  }
  async isFileUploader(element) {
    return element.tagName.toLowerCase() === "input" && (element.attributes.type === "file" || element.attributes.accept !== undefined);
  }
  convertToHistoryElement(element) {
    return convertDOMElementToHistoryElement(element);
  }
  findHistoryElement(element, tree) {
    return findHistoryElementInTree(element, tree);
  }
  async getElementByXPath(xpath) {
    return this.findElement({ xpath });
  }
  async getElementsByXPath(xpath) {
    return this.findElements({ xpath });
  }
  async getElementByIndex(index) {
    const state = await this.getState();
    return state.selectorMap[index] || null;
  }
  async getClickableElements() {
    const state = await this.getState();
    return state.clickableElements;
  }
  async getDOMTree() {
    const state = await this.getState();
    return state.tree;
  }
  async getSelectorMap() {
    const state = await this.getState();
    return state.selectorMap;
  }
}

// src/browser/context.ts
import { writeFile as writeFile2 } from "node:fs/promises";
import { mkdir as mkdir2 } from "node:fs/promises";
import { dirname as dirname2 } from "node:path";
var DEFAULT_CONFIG = {
  minimumWaitPageLoadTime: 0.5,
  waitForNetworkIdlePageLoadTime: 1,
  maximumWaitPageLoadTime: 5,
  waitBetweenActions: 1,
  disableSecurity: false,
  browserWindowSize: {
    width: 1280,
    height: 1100
  }
};

class BrowserContext {
  config;
  browser;
  context = null;
  activePage = null;
  domService;
  session = {
    cachedState: {
      selectorMap: {}
    }
  };
  constructor(browser, config = {}) {
    this.config = {
      ...DEFAULT_CONFIG,
      ...config
    };
    this.browser = browser;
    this.domService = new DOMService;
  }
  async init() {
    if (this.context)
      return;
    const playwrightBrowser = await this.browser.getPlaywrightBrowser();
    this.context = await playwrightBrowser.newContext({
      viewport: this.config.noViewport ? null : this.config.browserWindowSize,
      recordVideo: this.config.saveRecordingPath ? {
        dir: this.config.saveRecordingPath
      } : undefined,
      ignoreHTTPSErrors: this.config.disableSecurity
    });
    if (this.config.cookiesFile) {
      try {
        const fs = await import("node:fs/promises");
        const cookies = JSON.parse(await fs.readFile(this.config.cookiesFile, "utf-8"));
        await this.context.addCookies(cookies);
      } catch (error) {
        console.warn("Failed to load cookies:", error);
      }
    }
    if (this.config.tracePath) {
      await this.context.tracing.start({
        screenshots: true,
        snapshots: true
      });
    }
  }
  async getPage() {
    if (!this.context) {
      await this.init();
    }
    if (!this.activePage) {
      this.activePage = await this.context.newPage();
    }
    return this.activePage;
  }
  async close() {
    if (this.context) {
      if (this.config.tracePath) {
        await this.context.tracing.stop({
          path: this.config.tracePath
        });
      }
      if (this.config.cookiesFile) {
        await this.saveCookies();
      }
      await this.context.close();
      this.context = null;
      this.activePage = null;
    }
  }
  async saveCookies() {
    if (!this.context || !this.config.cookiesFile)
      return;
    try {
      const cookies = await this.context.cookies();
      await mkdir2(dirname2(this.config.cookiesFile), { recursive: true });
      await writeFile2(this.config.cookiesFile, JSON.stringify(cookies, null, 2));
    } catch (error) {
      console.warn("Failed to save cookies:", error);
    }
  }
  async getSession() {
    return this.session;
  }
  async getState() {
    if (!this.activePage) {
      throw new Error("No active page");
    }
    const [url, title, domTree, clickableElements, selectorMap] = await Promise.all([
      this.activePage.url(),
      this.activePage.title(),
      this.getDOMTree(),
      this.getClickableElements(),
      this.getSelectorMap()
    ]);
    const tabs = await this.getTabs();
    const screenshot = await this.getScreenshot();
    return {
      url,
      title,
      tabs,
      domTree,
      clickableElements,
      selectorMap,
      screenshot
    };
  }
  async getStateHistory() {
    if (!this.activePage) {
      throw new Error("No active page");
    }
    const [url, title] = await Promise.all([
      this.activePage.url(),
      this.activePage.title()
    ]);
    const tabs = await this.getTabs();
    const screenshot = await this.getScreenshot();
    return {
      url,
      title,
      tabs,
      interacted_element: null,
      screenshot,
      toDict: () => ({
        url,
        title,
        tabs,
        interacted_element: null,
        screenshot
      })
    };
  }
  async getDOMTree() {
    if (!this.activePage) {
      throw new Error("No active page");
    }
    const tree = await this.activePage.evaluate(() => {
      function processNode(node) {
        const attributes = {};
        for (const attr of node.attributes) {
          attributes[attr.name] = attr.value;
        }
        return {
          tagName: node.tagName.toLowerCase(),
          isVisible: node.getBoundingClientRect().height > 0 && node.getBoundingClientRect().width > 0,
          parent: null,
          xpath: getXPath(node),
          attributes,
          children: Array.from(node.children).map((child) => processNode(child)),
          text: node.textContent || undefined,
          isInteractive: isInteractive(node),
          shadowRoot: !!node.shadowRoot,
          highlightIndex: undefined
        };
      }
      function getXPath(node) {
        if (node.id) {
          return `//*[@id="${node.id}"]`;
        }
        const parts = [];
        let current = node;
        while (current && current.nodeType === Node.ELEMENT_NODE) {
          let index = 1;
          let sibling = current.previousElementSibling;
          while (sibling) {
            if (sibling.tagName === current.tagName) {
              index++;
            }
            sibling = sibling.previousElementSibling;
          }
          const tagName = current.tagName.toLowerCase();
          parts.unshift(`${tagName}[${index}]`);
          current = current.parentElement;
        }
        return `/${parts.join("/")}`;
      }
      function isInteractive(node) {
        const interactiveTags = ["a", "button", "input", "select", "textarea"];
        const interactiveRoles = ["button", "link", "menuitem", "tab", "checkbox", "radio"];
        return interactiveTags.includes(node.tagName.toLowerCase()) || node.hasAttribute("onclick") || node.hasAttribute("href") || node.hasAttribute("role") && interactiveRoles.includes(node.getAttribute("role"));
      }
      return processNode(document.documentElement);
    });
    let highlightIndex = 1;
    function processTree(node, parent = null) {
      node.parent = parent;
      if (node.isInteractive) {
        node.highlightIndex = highlightIndex++;
      }
      node.children.forEach((child) => processTree(child, node));
    }
    processTree(tree);
    return tree;
  }
  async getClickableElements() {
    if (!this.activePage) {
      throw new Error("No active page");
    }
    const elements = await this.activePage.evaluate(() => {
      const clickable = Array.from(document.querySelectorAll('a, button, [role="button"], [onclick]'));
      return clickable.map((el) => {
        const rect = el.getBoundingClientRect();
        return {
          tagName: el.tagName.toLowerCase(),
          text: el.textContent || undefined,
          attributes: Object.fromEntries(Array.from(el.attributes).map((attr) => [attr.name, attr.value])),
          isVisible: rect.width > 0 && rect.height > 0,
          xpath: getXPath(el),
          isInteractive: true,
          parent: null,
          children: [],
          highlightIndex: undefined
        };
        function getXPath(node) {
          const parts = [];
          while (node && node.nodeType === Node.ELEMENT_NODE) {
            let count = 1;
            let sibling = node.previousElementSibling;
            while (sibling) {
              if (sibling.tagName === node.tagName)
                count++;
              sibling = sibling.previousElementSibling;
            }
            parts.unshift(`${node.tagName.toLowerCase()}[${count}]`);
            node = node.parentElement;
          }
          return `/${parts.join("/")}`;
        }
      });
    });
    elements.forEach((el, i) => {
      el.highlightIndex = i + 1;
    });
    return elements;
  }
  async getSelectorMap() {
    const elements = await this.getClickableElements();
    const map = {};
    elements.forEach((el) => {
      if (el.highlightIndex !== undefined) {
        map[el.highlightIndex] = el;
      }
    });
    return map;
  }
  async getTabs() {
    const tabs = [];
    for (const [id, page] of this.pages) {
      tabs.push({
        url: page.url(),
        title: await page.title(),
        page_id: id
      });
    }
    return tabs;
  }
  async getScreenshot() {
    if (!this.activePage || !this.config.saveScreenshots) {
      return;
    }
    const buffer = await this.activePage.screenshot({ type: "png" });
    return buffer.toString("base64");
  }
  async waitForPageLoad() {
    const page = await this.getPage();
    await page.waitForTimeout(this.config.minimumWaitPageLoadTime * 1000);
    try {
      await page.waitForLoadState("networkidle", {
        timeout: this.config.waitForNetworkIdlePageLoadTime * 1000
      });
    } catch {
    }
    await page.waitForTimeout(this.config.waitBetweenActions * 1000);
  }
  async switchToTab(index) {
    if (!this.context)
      throw new Error("Browser context not initialized");
    const pages = this.context.pages();
    if (index >= 0 && index < pages.length) {
      this.activePage = pages[index];
      await this.activePage.bringToFront();
    } else {
      throw new Error(`Invalid tab index: ${index}`);
    }
  }
  async createNewTab(url) {
    if (!this.context)
      throw new Error("Browser context not initialized");
    this.activePage = await this.context.newPage();
    if (url) {
      await this.activePage.goto(url);
      await this.waitForPageLoad();
    }
  }
  async isFileUploader(elementNode) {
    return elementNode.tagName.toLowerCase() === "input" && (elementNode.attributes.type === "file" || elementNode.attributes.accept !== undefined);
  }
}

// src/browser/browser.ts
var defaultConfig = {
  headless: false,
  disableSecurity: true,
  extraChromiumArgs: []
};

class Browser {
  config;
  playwrightBrowser = null;
  constructor(config = {}) {
    this.config = { ...defaultConfig, ...config };
  }
  async newContext(config = {}) {
    const contextOptions = {
      viewport: config.browserWindowSize,
      ignoreHTTPSErrors: config.ignoreHttpsErrors,
      offline: config.offline,
      colorScheme: config.colorScheme,
      recordVideo: config.recordVideo ? {
        dir: "./",
        size: config.browserWindowSize
      } : undefined
    };
    return new BrowserContext(this, config);
  }
  async getPlaywrightBrowser() {
    if (!this.playwrightBrowser) {
      return this.init();
    }
    return this.playwrightBrowser;
  }
  async init() {
    this.playwrightBrowser = await this.setupBrowser();
    return this.playwrightBrowser;
  }
  async setupBrowser() {
    if (this.config.wssUrl) {
      return webkit.connect(this.config.wssUrl);
    }
    if (this.config.chromeInstancePath) {
      throw new Error("Chrome instance connection not implemented yet");
    }
    const disableSecurityArgs = this.config.disableSecurity ? [
      "--disable-web-security",
      "--disable-site-isolation-trials",
      "--disable-features=IsolateOrigins,site-per-process"
    ] : [];
    return webkit.launch({
      headless: this.config.headless,
      args: [
        "--no-sandbox",
        "--disable-blink-features=AutomationControlled",
        "--disable-infobars",
        "--disable-background-timer-throttling",
        "--disable-backgrounding-occluded-windows",
        "--disable-renderer-backgrounding",
        "--disable-window-activation",
        "--disable-focus-on-load",
        "--no-default-browser-check",
        "--no-startup-window",
        "--window-position=0,0",
        "--window-size=1280,800",
        "--disable-dev-shm-usage",
        "--disable-gpu",
        "--disable-setuid-sandbox",
        "--no-zygote",
        "--single-process",
        "--disable-dev-shm-usage",
        ...disableSecurityArgs,
        ...this.config.extraChromiumArgs || []
      ],
      proxy: this.config.proxy
    });
  }
  async close() {
    if (this.playwrightBrowser) {
      await this.playwrightBrowser.close();
      this.playwrightBrowser = null;
    }
  }
}

// node_modules/zod/lib/index.mjs
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error;
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};

class ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
}
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== undefined) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === errorMap ? undefined : errorMap
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}

class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === undefined ? undefined : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache;
var _ZodNativeEnum_cache;

class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
}
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== undefined ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message !== null && message !== undefined ? message : required_error) !== null && _a !== undefined ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== undefined ? message : invalid_type_error) !== null && _b !== undefined ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}

class ZodType {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus,
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === undefined ? undefined : params.async) !== null && _a !== undefined ? _a : false,
        contextualErrorMap: params === null || params === undefined ? undefined : params.errorMap
      },
      path: (params === null || params === undefined ? undefined : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    var _a, _b;
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if ((_b = (_a = err === null || err === undefined ? undefined : err.message) === null || _a === undefined ? undefined : _a.toLowerCase()) === null || _b === undefined ? undefined : _b.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === undefined ? undefined : params.errorMap,
        async: true
      },
      path: (params === null || params === undefined ? undefined : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(undefined).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if (!decoded.typ || !decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch (_a) {
    return false;
  }
}
function isValidCidr(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}

class ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus;
    let ctx = undefined;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a, _b;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === undefined ? undefined : options.precision) === "undefined" ? null : options === null || options === undefined ? undefined : options.precision,
      offset: (_a = options === null || options === undefined ? undefined : options.offset) !== null && _a !== undefined ? _a : false,
      local: (_b = options === null || options === undefined ? undefined : options.local) !== null && _b !== undefined ? _b : false,
      ...errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === undefined ? undefined : options.precision) === "undefined" ? null : options === null || options === undefined ? undefined : options.precision,
      ...errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === undefined ? undefined : options.position,
      ...errorUtil.errToObj(options === null || options === undefined ? undefined : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
}
ZodString.create = (params) => {
  var _a;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a = params === null || params === undefined ? undefined : params.coerce) !== null && _a !== undefined ? _a : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}

class ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = undefined;
    const status = new ParseStatus;
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
}
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
    ...processCreateParams(params)
  });
};

class ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch (_a) {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = undefined;
    const status = new ParseStatus;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
}
ZodBigInt.create = (params) => {
  var _a;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a = params === null || params === undefined ? undefined : params.coerce) !== null && _a !== undefined ? _a : false,
    ...processCreateParams(params)
  });
};

class ZodBoolean extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
    ...processCreateParams(params)
  });
};

class ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus;
    let ctx = undefined;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
}
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === undefined ? undefined : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};

class ZodSymbol extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};

class ZodUndefined extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};

class ZodNull extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};

class ZodAny extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};

class ZodUnknown extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};

class ZodNever extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
}
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};

class ZodVoid extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};

class ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : undefined,
          maximum: tooBig ? def.exactLength.value : undefined,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}

class ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== undefined ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === undefined ? undefined : _b.call(_a, issue, ctx).message) !== null && _c !== undefined ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== undefined ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
}
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};

class ZodUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = undefined;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
}
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [undefined];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [undefined, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};

class ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  static create(discriminator, options, params) {
    const optionsMap = new Map;
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
}
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0;index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}

class ZodIntersection extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
}
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};

class ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
}
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};

class ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}

class ZodMap extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = new Map;
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = new Map;
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
}
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};

class ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = new Set;
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};

class ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
}

class ZodLazy extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
}
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};

class ZodLiteral extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
}
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}

class ZodEnum extends ZodType {
  constructor() {
    super(...arguments);
    _ZodEnum_cache.set(this, undefined);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
}
_ZodEnum_cache = new WeakMap;
ZodEnum.create = createZodEnum;

class ZodNativeEnum extends ZodType {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache.set(this, undefined);
  }
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
}
_ZodNativeEnum_cache = new WeakMap;
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};

class ZodPromise extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
}
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};

class ZodEffects extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
}
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};

class ZodOptional extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(undefined);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};

class ZodNullable extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};

class ZodDefault extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};

class ZodCatch extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
}
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};

class ZodNaN extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
}
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");

class ZodBranded extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}

class ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
}

class ZodReadonly extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function custom(check, params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a, _b;
      if (!check(data)) {
        const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
        const _fatal = (_b = (_a = p.fatal) !== null && _a !== undefined ? _a : fatal) !== null && _b !== undefined ? _b : true;
        const p2 = typeof p === "string" ? { message: p } : p;
        ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
      }
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  datetimeRegex,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  enum: enumType,
  function: functionType,
  instanceof: instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  null: nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  undefined: undefinedType,
  union: unionType,
  unknown: unknownType,
  void: voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// src/telemetry/service.ts
class ProductTelemetry {
  capture(event) {
    console.debug("Telemetry event:", {
      name: event.name,
      properties: event.properties
    });
  }
}

// src/controller/registry.ts
class Registry {
  actions = new Map;
  telemetry;
  constructor() {
    this.telemetry = new ProductTelemetry;
  }
  action(description, func, options = {}) {
    const name = func.name;
    this.actions.set(name, {
      name,
      description,
      function: func,
      paramModel: options.paramModel ?? z2.object({}).strict(),
      requiresBrowser: options.requiresBrowser ?? false
    });
    this.telemetry.capture({
      name: "controller_registered_functions",
      properties: {},
      registeredFunctions: Array.from(this.actions.entries()).map(([name2, action]) => ({
        name: name2,
        params: action.paramModel.safeParse({}).success ? action.paramModel.safeParse({}).data : {}
      }))
    });
    return func;
  }
  getPromptDescription() {
    const descriptions = [];
    for (const action of this.actions.values()) {
      let desc = `${action.description}:
{${action.name}: `;
      const schema = action.paramModel.safeParse({});
      const properties = schema.success ? schema.data : {};
      desc += JSON.stringify(Object.entries(properties).reduce((acc, [key, value]) => {
        if (key !== "title") {
          acc[key] = value;
        }
        return acc;
      }, {}));
      desc += "}";
      descriptions.push(desc);
    }
    return descriptions.join(`

`);
  }
  async executeAction(actionName, params, browser) {
    const action = this.actions.get(actionName);
    if (!action) {
      throw new Error(`Unknown action: ${actionName}`);
    }
    if (action.requiresBrowser && !browser) {
      throw new Error(`Action ${actionName} requires a browser context`);
    }
    try {
      const validatedParams = action.paramModel.parse(params);
      return await action.function(validatedParams, browser);
    } catch (error) {
      throw new Error(`Error executing action ${actionName}: ${String(error)}`);
    }
  }
  getActionIndex(action) {
    const [, params] = Object.entries(action)[0];
    return params && typeof params === "object" ? params.index : undefined;
  }
  createActionModel() {
    const shape = {};
    for (const [name, action] of this.actions.entries()) {
      shape[name] = action.paramModel;
    }
    return z2.object(shape).partial().strict();
  }
}

// src/controller/actions.ts
var SearchGoogleActionSchema = z2.object({
  query: z2.string()
}).strict();
var GoToUrlActionSchema = z2.object({
  url: z2.string().url()
}).strict();
var ClickElementActionSchema = z2.object({
  index: z2.number().int().positive(),
  xpath: z2.string().optional()
}).strict();
var InputTextActionSchema = z2.object({
  index: z2.number().int().positive(),
  text: z2.string(),
  xpath: z2.string().optional()
}).strict();
var DoneActionSchema = z2.object({
  text: z2.string(),
  data: z2.unknown().optional()
}).strict();
var SwitchTabActionSchema = z2.object({
  pageId: z2.number().int().nonnegative()
}).strict();
var OpenTabActionSchema = z2.object({
  url: z2.string().url()
}).strict();
var ExtractPageContentActionSchema = z2.object({
  value: z2.enum(["text", "markdown", "html"]).default("text")
}).strict();
var ScrollActionSchema = z2.object({
  amount: z2.number().int().optional()
}).strict();
var SendKeysActionSchema = z2.object({
  keys: z2.string()
}).strict();
var ScrollToTextActionSchema = z2.object({
  text: z2.string()
}).strict();
var GetDropdownOptionsActionSchema = z2.object({
  index: z2.number().int().positive()
}).strict();
var SelectDropdownOptionActionSchema = z2.object({
  index: z2.number().int().positive(),
  text: z2.string()
}).strict();

// src/controller/controller.ts
class Controller {
  registry;
  constructor() {
    this.registry = new Registry;
    this.registerDefaultActions();
  }
  registerDefaultActions() {
    this.registry.action("Search Google in the current tab", async (params, browser) => {
      const validatedParams = SearchGoogleActionSchema.parse(params);
      const page = await browser.getPage();
      await page.goto(`https://www.google.com/search?q=${validatedParams.query}`);
      await page.waitForLoadState();
      const msg = `\uD83D\uDD0D  Searched for "${validatedParams.query}" in Google`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: SearchGoogleActionSchema, requiresBrowser: true });
    this.registry.action("Navigate to URL in the current tab", async (params, browser) => {
      const validatedParams = GoToUrlActionSchema.parse(params);
      const page = await browser.getPage();
      await page.goto(validatedParams.url);
      await page.waitForLoadState();
      const msg = `\uD83D\uDD17  Navigated to ${validatedParams.url}`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: GoToUrlActionSchema, requiresBrowser: true });
    this.registry.action("Go back", async (_, browser) => {
      const page = await browser.getPage();
      await page.goBack();
      await page.waitForLoadState();
      const msg = "\uD83D\uDD19  Navigated back";
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: z.object({}).strict(), requiresBrowser: true });
    this.registry.action("Click element", async (params, browser) => {
      const validatedParams = ClickElementActionSchema.parse(params);
      const session = await browser.getSession();
      const state = session.cachedState;
      if (!(validatedParams.index in state.selectorMap)) {
        throw new Error(`Element with index ${validatedParams.index} does not exist - retry or use alternative actions`);
      }
      const elementNode = state.selectorMap[validatedParams.index];
      const initialPages = browser.pages.length;
      if (await browser.isFileUploader(elementNode)) {
        const msg = `Index ${validatedParams.index} - has an element which opens file upload dialog. To upload files please use a specific function to upload files`;
        console.log(msg);
        return { extracted_content: msg, include_in_memory: true };
      }
      try {
        await browser.clickElementNode(elementNode);
        let msg = `\uD83D\uDDB1️  Clicked index ${validatedParams.index}`;
        console.log(msg);
        console.debug(`Element xpath: ${elementNode.xpath}`);
        if (browser.pages.length > initialPages) {
          const newTabMsg = "New tab opened - switching to it";
          msg += ` - ${newTabMsg}`;
          console.log(newTabMsg);
          await browser.switchToTab(-1);
        }
        return { extracted_content: msg, include_in_memory: true };
      } catch (error) {
        console.warn(`Element no longer available with index ${validatedParams.index} - most likely the page changed`);
        return { error: String(error), include_in_memory: true };
      }
    }, { paramModel: ClickElementActionSchema, requiresBrowser: true });
    this.registry.action("Input text into a input interactive element", async (params, browser) => {
      const validatedParams = InputTextActionSchema.parse(params);
      const session = await browser.getSession();
      const state = session.cachedState;
      if (!(validatedParams.index in state.selectorMap)) {
        throw new Error(`Element index ${validatedParams.index} does not exist - retry or use alternative actions`);
      }
      const elementNode = state.selectorMap[validatedParams.index];
      await browser.inputTextElementNode(elementNode, validatedParams.text);
      const msg = `⌨️  Input "${validatedParams.text}" into index ${validatedParams.index}`;
      console.log(msg);
      console.debug(`Element xpath: ${elementNode.xpath}`);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: InputTextActionSchema, requiresBrowser: true });
    this.registry.action("Switch tab", async (params, browser) => {
      const validatedParams = SwitchTabActionSchema.parse(params);
      await browser.switchToTab(validatedParams.pageId);
      const page = await browser.getPage();
      await page.waitForLoadState();
      const msg = `\uD83D\uDD04  Switched to tab ${validatedParams.pageId}`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: SwitchTabActionSchema, requiresBrowser: true });
    this.registry.action("Open url in new tab", async (params, browser) => {
      const validatedParams = OpenTabActionSchema.parse(params);
      await browser.createNewTab(validatedParams.url);
      const msg = `\uD83D\uDD17  Opened new tab with ${validatedParams.url}`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: OpenTabActionSchema, requiresBrowser: true });
    this.registry.action("Extract page content to get the text or markdown", async (params, browser) => {
      const validatedParams = ExtractPageContentActionSchema.parse(params);
      const page = await browser.getPage();
      const content = await page.evaluate(() => document.body.innerText);
      const msg = `\uD83D\uDCC4  Extracted page content
: ${content}
`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: false };
    }, { paramModel: ExtractPageContentActionSchema, requiresBrowser: true });
    this.registry.action("Complete task", async (params) => {
      const validatedParams = DoneActionSchema.parse(params);
      return { is_done: true, extracted_content: validatedParams.text, include_in_memory: true };
    }, { paramModel: DoneActionSchema, requiresBrowser: false });
    this.registry.action("Scroll down the page by pixel amount - if no amount is specified, scroll down one page", async (params, browser) => {
      const validatedParams = ScrollActionSchema.parse(params);
      const page = await browser.getPage();
      if (validatedParams.amount !== undefined) {
        await page.evaluate(`window.scrollBy(0, ${validatedParams.amount});`);
      } else {
        await page.keyboard.press("PageDown");
      }
      const amount = validatedParams.amount !== undefined ? `${validatedParams.amount} pixels` : "one page";
      const msg = `\uD83D\uDD0D  Scrolled down the page by ${amount}`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: ScrollActionSchema, requiresBrowser: true });
    this.registry.action("Scroll up the page by pixel amount - if no amount is specified, scroll up one page", async (params, browser) => {
      const validatedParams = ScrollActionSchema.parse(params);
      const page = await browser.getPage();
      if (validatedParams.amount !== undefined) {
        await page.evaluate(`window.scrollBy(0, -${validatedParams.amount});`);
      } else {
        await page.keyboard.press("PageUp");
      }
      const amount = validatedParams.amount !== undefined ? `${validatedParams.amount} pixels` : "one page";
      const msg = `\uD83D\uDD0D  Scrolled up the page by ${amount}`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: ScrollActionSchema, requiresBrowser: true });
    this.registry.action("Send strings of special keys like Backspace, Insert, PageDown, Delete, Enter, Shortcuts such as `Control+o`, `Control+Shift+T` are supported as well.", async (params, browser) => {
      const validatedParams = SendKeysActionSchema.parse(params);
      const page = await browser.getPage();
      await page.keyboard.press(validatedParams.keys);
      const msg = `⌨️  Sent keys: ${validatedParams.keys}`;
      console.log(msg);
      return { extracted_content: msg, include_in_memory: true };
    }, { paramModel: SendKeysActionSchema, requiresBrowser: true });
    this.registry.action("If you dont find something which you want to interact with, scroll to it", async (params, browser) => {
      const validatedParams = ScrollToTextActionSchema.parse(params);
      const page = await browser.getPage();
      try {
        const locators = [
          page.getByText(validatedParams.text, { exact: false }),
          page.locator(`text=${validatedParams.text}`),
          page.locator(`//*[contains(text(), '${validatedParams.text}')]`)
        ];
        for (const locator of locators) {
          try {
            if (await locator.count() > 0 && await locator.first().isVisible()) {
              await locator.first().scrollIntoViewIfNeeded();
              await new Promise((resolve) => setTimeout(resolve, 500));
              const msg = `\uD83D\uDD0D  Scrolled to text: ${validatedParams.text}`;
              console.log(msg);
              return { extracted_content: msg, include_in_memory: true };
            }
          } catch {
          }
        }
        return { error: `Could not find text: ${validatedParams.text}`, include_in_memory: true };
      } catch (error) {
        return { error: String(error), include_in_memory: true };
      }
    }, { paramModel: ScrollToTextActionSchema, requiresBrowser: true });
    this.registry.action("Get all options from a native dropdown", async (params, browser) => {
      const validatedParams = GetDropdownOptionsActionSchema.parse(params);
      const session = await browser.getSession();
      const state = session.cachedState;
      if (!(validatedParams.index in state.selectorMap)) {
        throw new Error(`Element index ${validatedParams.index} does not exist - retry or use alternative actions`);
      }
      const elementNode = state.selectorMap[validatedParams.index];
      const page = await browser.getPage();
      try {
        const options = await page.evaluate((xpath) => {
          const element = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
          if (!element || element.tagName.toLowerCase() !== "select") {
            throw new Error("Element is not a select dropdown");
          }
          return Array.from(element.options).map((option) => ({
            text: option.text,
            value: option.value,
            selected: option.selected
          }));
        }, elementNode.xpath);
        const msg = `\uD83D\uDCDD Available options for dropdown ${validatedParams.index}:
${options.map((opt) => `- ${opt.text} (${opt.value})${opt.selected ? " [selected]" : ""}`).join(`
`)}`;
        console.log(msg);
        return { extracted_content: msg, include_in_memory: true };
      } catch (error) {
        return { error: String(error), include_in_memory: true };
      }
    }, { paramModel: GetDropdownOptionsActionSchema, requiresBrowser: true });
    this.registry.action("Select dropdown option for interactive element index by the text of the option you want to select", async (params, browser) => {
      const validatedParams = SelectDropdownOptionActionSchema.parse(params);
      const session = await browser.getSession();
      const state = session.cachedState;
      if (!(validatedParams.index in state.selectorMap)) {
        throw new Error(`Element index ${validatedParams.index} does not exist - retry or use alternative actions`);
      }
      const elementNode = state.selectorMap[validatedParams.index];
      const page = await browser.getPage();
      try {
        await page.evaluate(({ xpath, text }) => {
          const element = document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
          if (!element || element.tagName.toLowerCase() !== "select") {
            throw new Error("Element is not a select dropdown");
          }
          const option = Array.from(element.options).find((opt) => opt.text.toLowerCase() === text.toLowerCase() || opt.value.toLowerCase() === text.toLowerCase());
          if (!option) {
            throw new Error(`Option with text "${text}" not found`);
          }
          element.value = option.value;
          element.dispatchEvent(new Event("change", { bubbles: true }));
        }, { xpath: elementNode.xpath, text: validatedParams.text });
        const msg = `\uD83D\uDCDD Selected option "${validatedParams.text}" in dropdown ${validatedParams.index}`;
        console.log(msg);
        return { extracted_content: msg, include_in_memory: true };
      } catch (error) {
        return { error: String(error), include_in_memory: true };
      }
    }, { paramModel: SelectDropdownOptionActionSchema, requiresBrowser: true });
  }
  action(description, func, options = {}) {
    return this.registry.action(description, func, options);
  }
  async multiAct(actions, browserContext) {
    const results = [];
    const session = await browserContext.getSession();
    const cachedSelectorMap = session.cachedState.selectorMap;
    const cachedPathHashes = new Set(Object.values(cachedSelectorMap).map((e) => e.hash.branchPathHash));
    await browserContext.removeHighlights();
    for (let i = 0;i < actions.length; i++) {
      const action = actions[i];
      if (action.getIndex() !== undefined && i !== 0) {
        const newState = await browserContext.getState();
        const newPathHashes = new Set(Object.values(newState.selectorMap).map((e) => e.hash.branchPathHash));
        if (!Array.from(newPathHashes).every((hash) => cachedPathHashes.has(hash))) {
          console.log(`Something new appeared after action ${i} / ${actions.length}`);
          break;
        }
      }
      results.push(await this.act(action, browserContext));
      console.debug(`Executed action ${i + 1} / ${actions.length}`);
      if (results[results.length - 1].is_done || results[results.length - 1].error || i === actions.length - 1) {
        break;
      }
      await new Promise((resolve) => setTimeout(resolve, browserContext.config.waitBetweenActions));
    }
    return results;
  }
  async act(action, browserContext) {
    const actionData = action.toJSON();
    for (const [actionName, params] of Object.entries(actionData)) {
      if (params !== undefined) {
        const result = await this.registry.executeAction(actionName, params, browserContext);
        if (typeof result === "string") {
          return { extracted_content: result, include_in_memory: true };
        }
        return result;
      }
    }
    return { include_in_memory: false };
  }
}

// node_modules/@langchain/core/dist/load/map_keys.js
var import_decamelize = __toESM(require_decamelize(), 1);
var import_camelcase = __toESM(require_camelcase(), 1);
function keyToJson(key, map) {
  return map?.[key] || import_decamelize.default(key);
}
function mapKeys(fields, mapper, map) {
  const mapped = {};
  for (const key in fields) {
    if (Object.hasOwn(fields, key)) {
      mapped[mapper(key, map)] = fields[key];
    }
  }
  return mapped;
}

// node_modules/@langchain/core/dist/load/serializable.js
function shallowCopy(obj) {
  return Array.isArray(obj) ? [...obj] : { ...obj };
}
function replaceSecrets(root, secretsMap) {
  const result = shallowCopy(root);
  for (const [path, secretId] of Object.entries(secretsMap)) {
    const [last, ...partsReverse] = path.split(".").reverse();
    let current = result;
    for (const part of partsReverse.reverse()) {
      if (current[part] === undefined) {
        break;
      }
      current[part] = shallowCopy(current[part]);
      current = current[part];
    }
    if (current[last] !== undefined) {
      current[last] = {
        lc: 1,
        type: "secret",
        id: [secretId]
      };
    }
  }
  return result;
}
function get_lc_unique_name(serializableClass) {
  const parentClass = Object.getPrototypeOf(serializableClass);
  const lcNameIsSubclassed = typeof serializableClass.lc_name === "function" && (typeof parentClass.lc_name !== "function" || serializableClass.lc_name() !== parentClass.lc_name());
  if (lcNameIsSubclassed) {
    return serializableClass.lc_name();
  } else {
    return serializableClass.name;
  }
}

class Serializable {
  static lc_name() {
    return this.name;
  }
  get lc_id() {
    return [
      ...this.lc_namespace,
      get_lc_unique_name(this.constructor)
    ];
  }
  get lc_secrets() {
    return;
  }
  get lc_attributes() {
    return;
  }
  get lc_aliases() {
    return;
  }
  constructor(kwargs, ..._args) {
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "lc_kwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    this.lc_kwargs = kwargs || {};
  }
  toJSON() {
    if (!this.lc_serializable) {
      return this.toJSONNotImplemented();
    }
    if (this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== "object" || Array.isArray(this.lc_kwargs)) {
      return this.toJSONNotImplemented();
    }
    const aliases = {};
    const secrets = {};
    const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key) => {
      acc[key] = key in this ? this[key] : this.lc_kwargs[key];
      return acc;
    }, {});
    for (let current = Object.getPrototypeOf(this);current; current = Object.getPrototypeOf(current)) {
      Object.assign(aliases, Reflect.get(current, "lc_aliases", this));
      Object.assign(secrets, Reflect.get(current, "lc_secrets", this));
      Object.assign(kwargs, Reflect.get(current, "lc_attributes", this));
    }
    Object.keys(secrets).forEach((keyPath) => {
      let read = this;
      let write = kwargs;
      const [last, ...partsReverse] = keyPath.split(".").reverse();
      for (const key of partsReverse.reverse()) {
        if (!(key in read) || read[key] === undefined)
          return;
        if (!(key in write) || write[key] === undefined) {
          if (typeof read[key] === "object" && read[key] != null) {
            write[key] = {};
          } else if (Array.isArray(read[key])) {
            write[key] = [];
          }
        }
        read = read[key];
        write = write[key];
      }
      if (last in read && read[last] !== undefined) {
        write[last] = write[last] || read[last];
      }
    });
    return {
      lc: 1,
      type: "constructor",
      id: this.lc_id,
      kwargs: mapKeys(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, keyToJson, aliases)
    };
  }
  toJSONNotImplemented() {
    return {
      lc: 1,
      type: "not_implemented",
      id: this.lc_id
    };
  }
}

// node_modules/@langchain/core/dist/messages/index.js
function mergeContent(firstContent, secondContent) {
  if (typeof firstContent === "string") {
    if (typeof secondContent === "string") {
      return firstContent + secondContent;
    } else {
      return [{ type: "text", text: firstContent }, ...secondContent];
    }
  } else if (Array.isArray(secondContent)) {
    return [...firstContent, ...secondContent];
  } else {
    return [...firstContent, { type: "text", text: secondContent }];
  }
}

class BaseMessage extends Serializable {
  get text() {
    return typeof this.content === "string" ? this.content : "";
  }
  constructor(fields, kwargs) {
    if (typeof fields === "string") {
      fields = { content: fields, additional_kwargs: kwargs };
    }
    if (!fields.additional_kwargs) {
      fields.additional_kwargs = {};
    }
    super(fields);
    Object.defineProperty(this, "lc_namespace", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["langchain_core", "messages"]
    });
    Object.defineProperty(this, "lc_serializable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(this, "content", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    Object.defineProperty(this, "additional_kwargs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    this.name = fields.name;
    this.content = fields.content;
    this.additional_kwargs = fields.additional_kwargs;
  }
  toDict() {
    return {
      type: this._getType(),
      data: this.toJSON().kwargs
    };
  }
  toChunk() {
    const type = this._getType();
    if (type === "human") {
      return new HumanMessageChunk({ ...this });
    } else if (type === "ai") {
      return new AIMessageChunk({ ...this });
    } else if (type === "system") {
      return new SystemMessageChunk({ ...this });
    } else if (type === "function") {
      return new FunctionMessageChunk({ ...this });
    } else if (ChatMessage.isInstance(this)) {
      return new ChatMessageChunk({ ...this });
    } else {
      throw new Error("Unknown message type.");
    }
  }
}
function isOpenAIToolCallArray(value) {
  return Array.isArray(value) && value.every((v) => typeof v.index === "number");
}

class BaseMessageChunk extends BaseMessage {
  static _mergeAdditionalKwargs(left, right) {
    const merged = { ...left };
    for (const [key, value] of Object.entries(right)) {
      if (merged[key] === undefined) {
        merged[key] = value;
      } else if (typeof merged[key] !== typeof value) {
        throw new Error(`additional_kwargs[${key}] already exists in the message chunk, but with a different type.`);
      } else if (typeof merged[key] === "string") {
        merged[key] = merged[key] + value;
      } else if (!Array.isArray(merged[key]) && typeof merged[key] === "object") {
        merged[key] = this._mergeAdditionalKwargs(merged[key], value);
      } else if (key === "tool_calls" && isOpenAIToolCallArray(merged[key]) && isOpenAIToolCallArray(value)) {
        for (const toolCall of value) {
          if (merged[key]?.[toolCall.index] !== undefined) {
            merged[key] = merged[key]?.map((value2, i) => {
              if (i !== toolCall.index) {
                return value2;
              }
              return {
                ...value2,
                ...toolCall,
                function: {
                  name: toolCall.function.name ?? value2.function.name,
                  arguments: (value2.function.arguments ?? "") + (toolCall.function.arguments ?? "")
                }
              };
            });
          } else {
            merged[key][toolCall.index] = toolCall;
          }
        }
      } else {
        throw new Error(`additional_kwargs[${key}] already exists in this message chunk.`);
      }
    }
    return merged;
  }
}

class HumanMessage extends BaseMessage {
  static lc_name() {
    return "HumanMessage";
  }
  _getType() {
    return "human";
  }
}

class HumanMessageChunk extends BaseMessageChunk {
  static lc_name() {
    return "HumanMessageChunk";
  }
  _getType() {
    return "human";
  }
  concat(chunk) {
    return new HumanMessageChunk({
      content: mergeContent(this.content, chunk.content),
      additional_kwargs: HumanMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs)
    });
  }
}

class AIMessage extends BaseMessage {
  static lc_name() {
    return "AIMessage";
  }
  _getType() {
    return "ai";
  }
}

class AIMessageChunk extends BaseMessageChunk {
  static lc_name() {
    return "AIMessageChunk";
  }
  _getType() {
    return "ai";
  }
  concat(chunk) {
    return new AIMessageChunk({
      content: mergeContent(this.content, chunk.content),
      additional_kwargs: AIMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs)
    });
  }
}

class SystemMessage extends BaseMessage {
  static lc_name() {
    return "SystemMessage";
  }
  _getType() {
    return "system";
  }
}

class SystemMessageChunk extends BaseMessageChunk {
  static lc_name() {
    return "SystemMessageChunk";
  }
  _getType() {
    return "system";
  }
  concat(chunk) {
    return new SystemMessageChunk({
      content: mergeContent(this.content, chunk.content),
      additional_kwargs: SystemMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs)
    });
  }
}
class FunctionMessageChunk extends BaseMessageChunk {
  static lc_name() {
    return "FunctionMessageChunk";
  }
  _getType() {
    return "function";
  }
  concat(chunk) {
    return new FunctionMessageChunk({
      content: mergeContent(this.content, chunk.content),
      additional_kwargs: FunctionMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs),
      name: this.name ?? ""
    });
  }
}
class ChatMessage extends BaseMessage {
  static lc_name() {
    return "ChatMessage";
  }
  constructor(fields, role) {
    if (typeof fields === "string") {
      fields = { content: fields, role };
    }
    super(fields);
    Object.defineProperty(this, "role", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    this.role = fields.role;
  }
  _getType() {
    return "generic";
  }
  static isInstance(message) {
    return message._getType() === "generic";
  }
}
class ChatMessageChunk extends BaseMessageChunk {
  static lc_name() {
    return "ChatMessageChunk";
  }
  constructor(fields, role) {
    if (typeof fields === "string") {
      fields = { content: fields, role };
    }
    super(fields);
    Object.defineProperty(this, "role", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: undefined
    });
    this.role = fields.role;
  }
  _getType() {
    return "generic";
  }
  concat(chunk) {
    return new ChatMessageChunk({
      content: mergeContent(this.content, chunk.content),
      additional_kwargs: ChatMessageChunk._mergeAdditionalKwargs(this.additional_kwargs, chunk.additional_kwargs),
      role: this.role
    });
  }
}
// node_modules/@langchain/core/dist/utils/js-sha1/hash.js
var root = typeof window === "object" ? window : {};
var HEX_CHARS = "0123456789abcdef".split("");
var EXTRA = [-2147483648, 8388608, 32768, 128];
var SHIFT = [24, 16, 8, 0];
var blocks = [];
function Sha1(sharedMemory) {
  if (sharedMemory) {
    blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    this.blocks = blocks;
  } else {
    this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  }
  this.h0 = 1732584193;
  this.h1 = 4023233417;
  this.h2 = 2562383102;
  this.h3 = 271733878;
  this.h4 = 3285377520;
  this.block = this.start = this.bytes = this.hBytes = 0;
  this.finalized = this.hashed = false;
  this.first = true;
}
Sha1.prototype.update = function(message) {
  if (this.finalized) {
    return;
  }
  var notString = typeof message !== "string";
  if (notString && message.constructor === root.ArrayBuffer) {
    message = new Uint8Array(message);
  }
  var code, index = 0, i, length = message.length || 0, blocks2 = this.blocks;
  while (index < length) {
    if (this.hashed) {
      this.hashed = false;
      blocks2[0] = this.block;
      blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
    }
    if (notString) {
      for (i = this.start;index < length && i < 64; ++index) {
        blocks2[i >> 2] |= message[index] << SHIFT[i++ & 3];
      }
    } else {
      for (i = this.start;index < length && i < 64; ++index) {
        code = message.charCodeAt(index);
        if (code < 128) {
          blocks2[i >> 2] |= code << SHIFT[i++ & 3];
        } else if (code < 2048) {
          blocks2[i >> 2] |= (192 | code >> 6) << SHIFT[i++ & 3];
          blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
        } else if (code < 55296 || code >= 57344) {
          blocks2[i >> 2] |= (224 | code >> 12) << SHIFT[i++ & 3];
          blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
          blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
        } else {
          code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
          blocks2[i >> 2] |= (240 | code >> 18) << SHIFT[i++ & 3];
          blocks2[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[i++ & 3];
          blocks2[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
          blocks2[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
        }
      }
    }
    this.lastByteIndex = i;
    this.bytes += i - this.start;
    if (i >= 64) {
      this.block = blocks2[16];
      this.start = i - 64;
      this.hash();
      this.hashed = true;
    } else {
      this.start = i;
    }
  }
  if (this.bytes > 4294967295) {
    this.hBytes += this.bytes / 4294967296 << 0;
    this.bytes = this.bytes % 4294967296;
  }
  return this;
};
Sha1.prototype.finalize = function() {
  if (this.finalized) {
    return;
  }
  this.finalized = true;
  var blocks2 = this.blocks, i = this.lastByteIndex;
  blocks2[16] = this.block;
  blocks2[i >> 2] |= EXTRA[i & 3];
  this.block = blocks2[16];
  if (i >= 56) {
    if (!this.hashed) {
      this.hash();
    }
    blocks2[0] = this.block;
    blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
  }
  blocks2[14] = this.hBytes << 3 | this.bytes >>> 29;
  blocks2[15] = this.bytes << 3;
  this.hash();
};
Sha1.prototype.hash = function() {
  var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;
  var f, j, t, blocks2 = this.blocks;
  for (j = 16;j < 80; ++j) {
    t = blocks2[j - 3] ^ blocks2[j - 8] ^ blocks2[j - 14] ^ blocks2[j - 16];
    blocks2[j] = t << 1 | t >>> 31;
  }
  for (j = 0;j < 20; j += 5) {
    f = b & c | ~b & d;
    t = a << 5 | a >>> 27;
    e = t + f + e + 1518500249 + blocks2[j] << 0;
    b = b << 30 | b >>> 2;
    f = a & b | ~a & c;
    t = e << 5 | e >>> 27;
    d = t + f + d + 1518500249 + blocks2[j + 1] << 0;
    a = a << 30 | a >>> 2;
    f = e & a | ~e & b;
    t = d << 5 | d >>> 27;
    c = t + f + c + 1518500249 + blocks2[j + 2] << 0;
    e = e << 30 | e >>> 2;
    f = d & e | ~d & a;
    t = c << 5 | c >>> 27;
    b = t + f + b + 1518500249 + blocks2[j + 3] << 0;
    d = d << 30 | d >>> 2;
    f = c & d | ~c & e;
    t = b << 5 | b >>> 27;
    a = t + f + a + 1518500249 + blocks2[j + 4] << 0;
    c = c << 30 | c >>> 2;
  }
  for (;j < 40; j += 5) {
    f = b ^ c ^ d;
    t = a << 5 | a >>> 27;
    e = t + f + e + 1859775393 + blocks2[j] << 0;
    b = b << 30 | b >>> 2;
    f = a ^ b ^ c;
    t = e << 5 | e >>> 27;
    d = t + f + d + 1859775393 + blocks2[j + 1] << 0;
    a = a << 30 | a >>> 2;
    f = e ^ a ^ b;
    t = d << 5 | d >>> 27;
    c = t + f + c + 1859775393 + blocks2[j + 2] << 0;
    e = e << 30 | e >>> 2;
    f = d ^ e ^ a;
    t = c << 5 | c >>> 27;
    b = t + f + b + 1859775393 + blocks2[j + 3] << 0;
    d = d << 30 | d >>> 2;
    f = c ^ d ^ e;
    t = b << 5 | b >>> 27;
    a = t + f + a + 1859775393 + blocks2[j + 4] << 0;
    c = c << 30 | c >>> 2;
  }
  for (;j < 60; j += 5) {
    f = b & c | b & d | c & d;
    t = a << 5 | a >>> 27;
    e = t + f + e - 1894007588 + blocks2[j] << 0;
    b = b << 30 | b >>> 2;
    f = a & b | a & c | b & c;
    t = e << 5 | e >>> 27;
    d = t + f + d - 1894007588 + blocks2[j + 1] << 0;
    a = a << 30 | a >>> 2;
    f = e & a | e & b | a & b;
    t = d << 5 | d >>> 27;
    c = t + f + c - 1894007588 + blocks2[j + 2] << 0;
    e = e << 30 | e >>> 2;
    f = d & e | d & a | e & a;
    t = c << 5 | c >>> 27;
    b = t + f + b - 1894007588 + blocks2[j + 3] << 0;
    d = d << 30 | d >>> 2;
    f = c & d | c & e | d & e;
    t = b << 5 | b >>> 27;
    a = t + f + a - 1894007588 + blocks2[j + 4] << 0;
    c = c << 30 | c >>> 2;
  }
  for (;j < 80; j += 5) {
    f = b ^ c ^ d;
    t = a << 5 | a >>> 27;
    e = t + f + e - 899497514 + blocks2[j] << 0;
    b = b << 30 | b >>> 2;
    f = a ^ b ^ c;
    t = e << 5 | e >>> 27;
    d = t + f + d - 899497514 + blocks2[j + 1] << 0;
    a = a << 30 | a >>> 2;
    f = e ^ a ^ b;
    t = d << 5 | d >>> 27;
    c = t + f + c - 899497514 + blocks2[j + 2] << 0;
    e = e << 30 | e >>> 2;
    f = d ^ e ^ a;
    t = c << 5 | c >>> 27;
    b = t + f + b - 899497514 + blocks2[j + 3] << 0;
    d = d << 30 | d >>> 2;
    f = c ^ d ^ e;
    t = b << 5 | b >>> 27;
    a = t + f + a - 899497514 + blocks2[j + 4] << 0;
    c = c << 30 | c >>> 2;
  }
  this.h0 = this.h0 + a << 0;
  this.h1 = this.h1 + b << 0;
  this.h2 = this.h2 + c << 0;
  this.h3 = this.h3 + d << 0;
  this.h4 = this.h4 + e << 0;
};
Sha1.prototype.hex = function() {
  this.finalize();
  var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;
  return HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h4 >> 28 & 15] + HEX_CHARS[h4 >> 24 & 15] + HEX_CHARS[h4 >> 20 & 15] + HEX_CHARS[h4 >> 16 & 15] + HEX_CHARS[h4 >> 12 & 15] + HEX_CHARS[h4 >> 8 & 15] + HEX_CHARS[h4 >> 4 & 15] + HEX_CHARS[h4 & 15];
};
Sha1.prototype.toString = Sha1.prototype.hex;
Sha1.prototype.digest = function() {
  this.finalize();
  var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;
  return [
    h0 >> 24 & 255,
    h0 >> 16 & 255,
    h0 >> 8 & 255,
    h0 & 255,
    h1 >> 24 & 255,
    h1 >> 16 & 255,
    h1 >> 8 & 255,
    h1 & 255,
    h2 >> 24 & 255,
    h2 >> 16 & 255,
    h2 >> 8 & 255,
    h2 & 255,
    h3 >> 24 & 255,
    h3 >> 16 & 255,
    h3 >> 8 & 255,
    h3 & 255,
    h4 >> 24 & 255,
    h4 >> 16 & 255,
    h4 >> 8 & 255,
    h4 & 255
  ];
};
Sha1.prototype.array = Sha1.prototype.digest;
Sha1.prototype.arrayBuffer = function() {
  this.finalize();
  var buffer = new ArrayBuffer(20);
  var dataView = new DataView(buffer);
  dataView.setUint32(0, this.h0);
  dataView.setUint32(4, this.h1);
  dataView.setUint32(8, this.h2);
  dataView.setUint32(12, this.h3);
  dataView.setUint32(16, this.h4);
  return buffer;
};
// node_modules/@langchain/core/dist/caches.js
var GLOBAL_MAP = new Map;
// src/agent/prompts.ts
class SystemPrompt {
  config;
  constructor(config = {}) {
    this.config = {
      maxActionsPerStep: 10,
      includeAttributes: [
        "title",
        "type",
        "name",
        "role",
        "tabindex",
        "aria-label",
        "placeholder",
        "value",
        "alt",
        "aria-expanded"
      ],
      maxErrorLength: 400,
      ...config
    };
  }
  getPrompt(browserState, stepInfo, task, memory) {
    return `You are a web browser automation agent. Your task is to help users accomplish their goals by interacting with web pages.

${this.taskDescription()}

${this.importantRules()}

${this.inputFormat()}

${this.availableActions()}

${this.config.useVision ? this.visionCapabilities() : ""}

CURRENT STATE:
Step ${stepInfo.step_number} of ${stepInfo.max_steps}
URL: ${browserState.url}
Title: ${browserState.title}
Task: ${task}

${this.config.includeMemory && memory ? `MEMORY:
${memory}
` : ""}

Respond in the following format:
{
\t"current_state": {
\t\t"evaluation_previous_goal": "Evaluation of what was accomplished in the previous step",
\t\t"memory": "Key information to remember",
\t\t"next_goal": "Next immediate goal to accomplish"
\t},
\t"action": [
\t\t{
\t\t\t"action_name": {
\t\t\t\t"param1": "value1",
\t\t\t\t"param2": "value2"
\t\t\t}
\t\t}
\t]
}`.trim();
  }
  getStateMessage(state, lastResult, stepInfo) {
    const content = {
      state,
      lastResult,
      stepInfo
    };
    return new SystemMessage(JSON.stringify(content, null, 2));
  }
  visionCapabilities() {
    return `
VISION CAPABILITIES:
- You can see and analyze visual elements on the page
- Screenshots are provided with labeled elements
- You can identify UI elements by their visual appearance
- You can understand spatial relationships between elements
`.trim();
  }
  toString() {
    return this.getPrompt({
      url: "",
      title: "",
      selectorMap: {},
      tabs: [],
      domTree: undefined,
      clickableElements: undefined
    }, {
      step_number: 0,
      max_steps: 0
    }, "No task specified");
  }
  taskDescription() {
    return `You are a web browser automation agent. Your goal is to complete tasks by interacting with web pages using the available actions. You should:
1. Understand the current state of the page
2. Plan the next steps to achieve the goal
3. Execute actions in sequence
4. Handle errors and unexpected situations
5. Complete the task efficiently`;
  }
  importantRules() {
    return `
IMPORTANT RULES:

1. RESPONSE FORMAT: You must ALWAYS respond with valid JSON in this exact format:
   {
     "current_state": {
       "evaluation_previous_goal": "Success|Failed|Unknown - Analyze if previous actions were successful",
       "memory": "Description of what has been done and what needs to be remembered",
       "next_goal": "What needs to be done with the next actions"
     },
     "action": [
       {
         "go_to_url": { "url": "https://example.com" }
       },
       {
         "input_text": { "index": 1, "text": "search query" }
       }
     ]
   }

   BOTH current_state AND action ARE REQUIRED IN EVERY RESPONSE.

2. ACTIONS: Each action in the array must be an object with a single key (the action name) and its parameters.

   Common action sequences:
   - Form filling: [
       {"input_text": {"index": 1, "text": "username"}},
       {"input_text": {"index": 2, "text": "password"}},
       {"click_element": {"index": 3}}
     ]
   - Navigation and extraction: [
       {"open_new_tab": {}},
       {"go_to_url": {"url": "https://example.com"}},
       {"extract_page_content": {}}
     ]

3. ELEMENT INTERACTION:
   - Only use indexes that exist in the provided element list
   - Each element has a unique index number (e.g., "33[:]<button>")
   - Elements marked with "_[:]" are non-interactive (for context only)

4. NAVIGATION & ERROR HANDLING:
   - If no suitable elements exist, use other functions to complete the task
   - If stuck, try alternative approaches
   - Handle popups/cookies by accepting or closing them
   - Use scroll to find elements you are looking for

5. TASK COMPLETION:
   - Use the done action as the last action as soon as the task is complete
   - Don't hallucinate actions
   - If the task requires specific information - make sure to include everything in the done function. This is what the user will see.
   - If you are running out of steps (current step), think about speeding it up, and ALWAYS use the done action as the last action.

6. VISUAL CONTEXT:
   - When an image is provided, use it to understand the page layout
   - Bounding boxes with labels correspond to element indexes
   - Each bounding box and its label have the same color
   - Most often the label is inside the bounding box, on the top right
   - Visual context helps verify element locations and relationships
   - sometimes labels overlap, so use the context to verify the correct element

7. Form filling:
   - If you fill a input field and your action sequence is interrupted, most often a list with suggestions poped up under the field and you need to first select the right element from the suggestion list.

8. ACTION SEQUENCING:
   - Actions are executed in the order they appear in the list
   - Each action should logically follow from the previous one
   - If the page changes after an action, the sequence is interrupted and you get the new state.
   - If content only disappears the sequence continues.
   - Only provide the action sequence until you think the page will change.
   - Try to be efficient, e.g. fill forms at once, or chain actions where nothing changes on the page like saving, extracting, checkboxes...
   - only use multiple actions if it makes sense.
   - use maximum ${this.config.maxActionsPerStep ?? 10} actions per sequence`.trim();
  }
  inputFormat() {
    return `
INPUT STRUCTURE:
1. Current URL: The webpage you're currently on
2. Available Tabs: List of open browser tabs
3. Interactive Elements: List in the format:
   index[:]<element_type>element_text - additional_info
   Example: 12[:]<button>Sign in - class="btn-primary"

4. Page Content: Text content of the page
5. Visual Context: Screenshot with labeled elements (if available)`.trim();
  }
  availableActions() {
    return `
AVAILABLE ACTIONS:

1. Navigation:
   - go_to_url: {"url": "string"}
   - go_back: {}
   - refresh_page: {}
   - open_new_tab: {}
   - switch_tab: {"index": number}
   - close_tab: {}

2. Element Interaction:
   - click_element: {"index": number}
   - input_text: {"index": number, "text": "string"}
   - select_option: {"index": number, "option": "string"}
   - hover_element: {"index": number}
   - scroll_to_element: {"index": number}

3. Page Interaction:
   - scroll_down: {"amount": number}
   - scroll_up: {"amount": number}
   - extract_page_content: {}
   - take_screenshot: {}

4. Task Control:
   - wait: {"seconds": number}
   - done: {"message": "string", "data": any}
   - error: {"message": "string"}`.trim();
  }
}

// src/agent/message-manager.ts
class MessageManager {
  messages = [];
  metadata = [];
  maxInputTokens;
  includeAttributes;
  maxErrorLength;
  task;
  actionDescriptions;
  systemPromptClass;
  ESTIMATED_TOKENS_PER_CHARACTER = 3;
  IMG_TOKENS = 800;
  constructor(config = {}) {
    this.maxInputTokens = config.maxInputTokens ?? 4000;
    this.includeAttributes = config.includeAttributes ?? [];
    this.maxErrorLength = config.maxErrorLength ?? 400;
    this.task = config.task ?? "";
    this.actionDescriptions = config.actionDescriptions ?? "";
    this.systemPromptClass = config.systemPromptClass ?? SystemPrompt;
    const systemMessage = new this.systemPromptClass({
      includeAttributes: this.includeAttributes,
      maxErrorLength: this.maxErrorLength
    }).getPrompt({
      url: "",
      title: "",
      selectorMap: {},
      tabs: [],
      domTree: undefined,
      clickableElements: undefined
    }, {
      step_number: 0,
      max_steps: 0
    }, this.task);
    this.addMessageWithTokens(new SystemMessage(systemMessage));
    const taskMessage = new HumanMessage(`Your task is: ${this.task}`);
    this.addMessageWithTokens(taskMessage);
  }
  addStateMessage(state, result = null, stepInfo = null) {
    if (result) {
      for (const r of result) {
        if (r.includeInMemory) {
          if (r.extractedContent) {
            const msg = new HumanMessage(r.extractedContent);
            this.addMessageWithTokens(msg);
          }
          if (r.error) {
            const msg = new HumanMessage(r.error.slice(-this.maxErrorLength));
            this.addMessageWithTokens(msg);
          }
          result = null;
        }
      }
    }
    let stateDescription = "";
    if (stepInfo) {
      stateDescription += `Current step: ${stepInfo.step_number + 1}/${stepInfo.max_steps}
`;
    }
    stateDescription += `Current url: ${state.url}
`;
    stateDescription += `Available tabs:
${JSON.stringify(state.tabs, null, 2)}
`;
    stateDescription += `Interactive elements:
${this.formatClickableElements(state)}`;
    if (result) {
      result.forEach((r, i) => {
        if (r.extractedContent) {
          stateDescription += `
Result of action ${i + 1}/${result.length}: ${r.extractedContent}`;
        }
        if (r.error) {
          const error = r.error.slice(-this.maxErrorLength);
          stateDescription += `
Error of action ${i + 1}/${result.length}: ...${error}`;
        }
      });
    }
    if (state.screenshot) {
      const message = new HumanMessage({
        content: [
          { type: "text", text: stateDescription },
          {
            type: "image_url",
            image_url: { url: `data:image/png;base64,${state.screenshot}` }
          }
        ]
      });
      this.addMessageWithTokens(message);
    } else {
      this.addMessageWithTokens(new HumanMessage(stateDescription));
    }
  }
  addModelOutput(output) {
    this.addMessageWithTokens(new AIMessage(JSON.stringify(output)));
  }
  getMessages() {
    return this.messages;
  }
  cutMessages() {
    let totalTokens = 0;
    const newMessages = [];
    const newMetadata = [];
    newMessages.push(this.messages[0], this.messages[1]);
    newMetadata.push(this.metadata[0], this.metadata[1]);
    totalTokens += (this.metadata[0].tokens ?? 0) + (this.metadata[1].tokens ?? 0);
    for (let i = this.messages.length - 1;i >= 2; i--) {
      const tokens = this.metadata[i].tokens ?? 0;
      if (totalTokens + tokens <= this.maxInputTokens) {
        newMessages.unshift(this.messages[i]);
        newMetadata.unshift(this.metadata[i]);
        totalTokens += tokens;
      } else {
        break;
      }
    }
    this.messages = newMessages;
    this.metadata = newMetadata;
  }
  addMessageWithTokens(message) {
    const content = typeof message.content === "string" ? message.content : JSON.stringify(message.content);
    let tokens = content.length * this.ESTIMATED_TOKENS_PER_CHARACTER;
    if (typeof message.content === "object" && Array.isArray(message.content)) {
      tokens += message.content.filter((item) => item && typeof item === "object" && ("type" in item) && item.type === "image_url").length * this.IMG_TOKENS;
    }
    this.messages.push(message);
    this.metadata.push({
      timestamp: Date.now(),
      type: message instanceof SystemMessage ? "system" : message instanceof HumanMessage ? "human" : "ai",
      tokens
    });
    if (this.getTotalTokens() > this.maxInputTokens) {
      this.cutMessages();
    }
  }
  getTotalTokens() {
    return this.metadata.reduce((sum, meta) => sum + (meta.tokens ?? 0), 0);
  }
  formatClickableElements(state) {
    if (!state.clickableElements)
      return "";
    return state.clickableElements.map((el) => {
      const attrs = this.includeAttributes.map((attr) => el.attributes?.[attr] ? `${attr}="${el.attributes[attr]}"` : "").filter(Boolean).join(" ");
      return `${el.highlightIndex}[:]<${el.tagName}${attrs ? ` ${attrs}` : ""}>`;
    }).join(`
`);
  }
}

// src/agent/agent.ts
class Agent {
  agentId;
  task;
  useVision;
  llm;
  saveConversationPath;
  controller;
  maxActionsPerStep;
  maxFailures;
  retryDelay;
  validateOutput;
  includeAttributes;
  maxErrorLength;
  browserInstance;
  browserContextInstance;
  ownsBrowser;
  ownsBrowserContext;
  messageManager;
  history;
  nSteps;
  consecutiveFailures;
  lastResult;
  constructor(config) {
    this.agentId = v4();
    this.task = config.task;
    this.useVision = config.useVision ?? true;
    this.llm = config.llm;
    this.saveConversationPath = config.saveConversationPath;
    this.controller = config.controller ?? new Controller;
    this.maxActionsPerStep = config.maxActionsPerStep ?? 10;
    this.maxFailures = config.maxFailures ?? 5;
    this.retryDelay = config.retryDelay ?? 10;
    this.validateOutput = config.validateOutput ?? false;
    this.includeAttributes = config.includeAttributes ?? [
      "title",
      "type",
      "name",
      "role",
      "tabindex",
      "aria-label",
      "placeholder",
      "value",
      "alt",
      "aria-expanded"
    ];
    this.maxErrorLength = config.maxErrorLength ?? 400;
    this.ownsBrowser = !config.browser;
    this.ownsBrowserContext = !config.browserContext;
    this.setupBrowser(config.browser, config.browserContext);
    this.history = { history: [] };
    this.nSteps = 1;
    this.consecutiveFailures = 0;
    this.messageManager = new MessageManager({
      llm: this.llm,
      task: this.task,
      actionDescriptions: this.controller.registry.getPromptDescription(),
      maxInputTokens: config.maxInputTokens ?? 128000,
      includeAttributes: this.includeAttributes,
      maxErrorLength: this.maxErrorLength,
      maxActionsPerStep: this.maxActionsPerStep
    });
  }
  setupBrowser(browser, browserContext) {
    if (browserContext) {
      this.browserContextInstance = browserContext;
    } else if (browser) {
      this.browserInstance = browser;
      this.browserContextInstance = new BrowserContext(browser);
    } else {
      this.browserInstance = new Browser;
      this.browserContextInstance = new BrowserContext(this.browserInstance);
    }
  }
  async run(maxSteps = 50) {
    try {
      while (this.nSteps <= maxSteps && this.consecutiveFailures < this.maxFailures) {
        await this.step();
        if (this.lastResult?.some((r) => r.isDone)) {
          break;
        }
      }
      if (this.validateOutput) {
        await this.validateFinalOutput();
      }
      return this.history;
    } finally {
      await this.cleanup();
    }
  }
  async step() {
    console.log(`
\uD83D\uDCCD Step ${this.nSteps}`);
    let state = null;
    let modelOutput = null;
    let result = [];
    try {
      state = await this.browserContextInstance?.getState(this.useVision);
      if (!state)
        throw new Error("Failed to get browser state");
      this.messageManager.addStateMessage(state, this.lastResult);
      const inputMessages = this.messageManager.getMessages();
      modelOutput = await this.getNextAction(inputMessages);
      if (this.saveConversationPath) {
      }
      this.messageManager.removeLastStateMessage();
      this.messageManager.addModelOutput(modelOutput);
      result = await this.controller.multiAct(modelOutput.action, this.browserContextInstance);
      this.lastResult = result;
      if (result.length > 0 && result[result.length - 1].isDone) {
        console.log(`\uD83D\uDCC4 Result: ${result[result.length - 1].extractedContent}`);
      }
      this.consecutiveFailures = 0;
    } catch (error) {
      result = this.handleStepError(error);
      this.lastResult = result;
    } finally {
      if (result.length > 0 && state) {
        this.makeHistoryItem(modelOutput, state, result);
      }
    }
  }
  async getNextAction(inputMessages) {
    const response = await this.llm.generateStructuredOutput(inputMessages, "AgentOutput");
    const parsed = response.parsed;
    parsed.action = parsed.action.slice(0, this.maxActionsPerStep);
    this.logResponse(parsed);
    this.nSteps++;
    return parsed;
  }
  logResponse(response) {
    const emoji = response.current_state.evaluation_previous_goal.includes("Success") ? "\uD83D\uDC4D" : response.current_state.evaluation_previous_goal.includes("Failed") ? "⚠️" : "\uD83E\uDD37";
    console.log(`${emoji} Eval: ${response.current_state.evaluation_previous_goal}`);
    console.log(`\uD83E\uDDE0 Memory: ${response.current_state.memory}`);
    console.log(`\uD83C\uDFAF Next goal: ${response.current_state.next_goal}`);
    response.action.forEach((action, i) => {
      console.log(`\uD83D\uDEE0️  Action ${i + 1}/${response.action.length}: ${JSON.stringify(action)}`);
    });
  }
  handleStepError(error) {
    const errorMsg = this.formatError(error);
    const prefix = `❌ Result failed ${this.consecutiveFailures + 1}/${this.maxFailures} times:
 `;
    if (error instanceof Error) {
      if (error.message.includes("Max token limit reached")) {
        this.messageManager.maxInputTokens -= 500;
        console.log(`Cutting tokens from history - new max input tokens: ${this.messageManager.maxInputTokens}`);
        this.messageManager.cutMessages();
      }
      this.consecutiveFailures++;
    }
    return [{
      error: errorMsg,
      includeInMemory: true
    }];
  }
  formatError(error) {
    if (error instanceof Error) {
      return error.message;
    }
    return String(error);
  }
  makeHistoryItem(modelOutput, state, result) {
    const interactedElements = modelOutput ? this.getInteractedElements(modelOutput, state.selectorMap) : [null];
    const stateHistory = {
      url: state.url,
      title: state.title,
      tabs: state.tabs,
      interactedElement: interactedElements,
      screenshot: state.screenshot
    };
    const historyItem = {
      modelOutput,
      result,
      state: stateHistory
    };
    this.history.history.push(historyItem);
  }
  getInteractedElements(modelOutput, selectorMap) {
    return modelOutput.action.map((action) => {
      const index = this.controller.registry.getActionIndex(action);
      if (index && index in selectorMap) {
        return this.convertDOMElementToHistoryElement(selectorMap[index]);
      }
      return null;
    });
  }
  async validateFinalOutput() {
    return true;
  }
  async cleanup() {
    if (this.browserContextInstance && this.ownsBrowserContext) {
      await this.browserContextInstance.close();
      this.browserContextInstance = undefined;
    }
    if (this.browserInstance && this.ownsBrowser) {
      await this.browserInstance.close();
      this.browserInstance = undefined;
    }
  }
}
// src/agent/types.ts
class AgentError extends Error {
  type;
  includeTrace;
  static VALIDATION_ERROR = "Invalid model output format. Please follow the correct schema.";
  static RATE_LIMIT_ERROR = "Rate limit reached. Waiting before retry.";
  static NO_VALID_ACTION = "No valid action found";
  constructor(message, type = "execution", includeTrace = false) {
    super(message);
    this.type = type;
    this.includeTrace = includeTrace;
    this.name = "AgentError";
  }
  static formatError(error, includeTrace = false) {
    if (error instanceof AgentError) {
      return error.message;
    }
    if (error.name === "ValidationError") {
      return `${AgentError.VALIDATION_ERROR}
Details: ${error.message}`;
    }
    if (error.name === "RateLimitError") {
      return AgentError.RATE_LIMIT_ERROR;
    }
    return includeTrace ? `${error.message}
Stacktrace:
${error.stack}` : error.message;
  }
}
// src/agent/history.ts
import fs from "node:fs";
class AgentHistory {
  model_output;
  result;
  state;
  constructor(model_output, result, state) {
    this.model_output = model_output;
    this.result = result;
    this.state = state;
  }
  toDict() {
    let modelOutputDump = null;
    if (this.model_output) {
      modelOutputDump = {
        current_state: this.model_output.current_state,
        action: this.model_output.action
      };
    }
    return {
      model_output: modelOutputDump,
      result: this.result,
      state: this.state.toDict()
    };
  }
  getInteractedElement(model_output, selector_map) {
    const elements = [];
    for (const action of model_output.action) {
      const [actionName, params] = Object.entries(action)[0];
      if (actionName === "click" && typeof params === "object" && params !== null) {
        const index = params.index;
        if (typeof index === "number") {
          const element = selector_map[index];
          elements.push(convertDOMElementToHistoryElement(element));
        }
      }
    }
    return elements;
  }
}

class AgentHistoryList {
  history;
  constructor(history = []) {
    this.history = history;
  }
  lastAction() {
    const lastHistory = this.history[this.history.length - 1];
    if (!lastHistory?.model_output?.action?.length) {
      return null;
    }
    const lastAction = lastHistory.model_output.action[lastHistory.model_output.action.length - 1];
    const [actionName, params] = Object.entries(lastAction)[0];
    return { [actionName]: params };
  }
  errors() {
    return this.history.flatMap((h) => h.result).filter((r) => Boolean(r.error)).map((r) => r.error);
  }
  finalResult() {
    const lastHistory = this.history[this.history.length - 1];
    if (!lastHistory) {
      return null;
    }
    const lastResult = lastHistory.result[lastHistory.result.length - 1];
    return lastResult?.extracted_content || null;
  }
  isDone() {
    const lastAction = this.lastAction();
    return lastAction !== null && Object.keys(lastAction)[0] === "done";
  }
  hasErrors() {
    return this.errors().length > 0;
  }
  urls() {
    return [...new Set(this.history.map((h) => h.state.url))];
  }
  screenshots() {
    return this.history.map((h) => h.state.screenshot).filter((s) => typeof s === "string");
  }
  async saveToFile(filepath) {
    await mkdir(dirname(filepath), { recursive: true });
    await writeFile(filepath, JSON.stringify(this.toDict(), null, 2));
  }
  async loadFromFile(filepath) {
    const content = await fs.promises.readFile(filepath, "utf-8");
    const data = JSON.parse(content);
    this.history = data.history.map((h) => {
      return new AgentHistory(h.model_output, h.result, h.state);
    });
  }
  toDict() {
    return {
      history: this.history.map((h) => h.toDict())
    };
  }
  toString() {
    return JSON.stringify(this.toDict(), null, 2);
  }
}
export {
  SystemPrompt,
  MessageManager,
  AgentHistoryList,
  AgentError,
  Agent
};
